<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.2"
            xml:lang="en">
   <db:info>
      <db:title/>
      <db:abstract>
         <db:para>Describes how source/replica interaction works</db:para>
      </db:abstract>
      <db:pubdate>2018-10-06+02:00</db:pubdate>
      <db:date>2018-10-06+02:00</db:date>
      <db:productname>Qt</db:productname>
      <db:productnumber>5.11</db:productnumber>
   </db:info>
   <db:para>Describes how source/replica interaction works.</db:para>
   <db:section xml:id="remote-object-interaction">
      <db:title>Remote Object Interaction</db:title>
      <db:para>Source/replica interaction is directional. Property changes and signal emission happen on the source, and are propagated to all replicas. If a property is writable, you can call the setter function on a replica. This will be forwarded to the source, and if a change is made, it will be made on the source and subsequently forwarded to all replicas. To the replica, it is then an asynchronous call, with latency before the change takes effect.</db:para>
      <db:para>Whereas you can emit a signal on a replica, this may have unexpected results and is discouraged for that reason. It will only trigger slots connected to the replica itself, no slots connected to the source or other replicas. Like property setters, slot invocations on a replica are forwarded to the Source to run.</db:para>
      <db:para>The behavior above is implemented automatically by QtRO, there is no need to write any replica implementation code. It will be handled automatically at runtime for dynamic replicas, or at compile time for repc generated headers.</db:para>
   </db:section>
</db:article>
