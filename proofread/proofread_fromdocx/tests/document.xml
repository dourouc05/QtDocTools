<?xml version="1.0" encoding="UTF-8"?>
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" xmlns:p="http://schemas.openxmlformats.org/drawingml/2006/picture" xmlns:wp="http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:v="urn:schemas-microsoft-com:vml">
<w:body>
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_Title" /><w:jc w:val="center" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Arial" w:hAnsi="Arial" /><w:sz w:val="50" /></w:rPr>
<w:t>API CPLEX</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>CPLEX</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> est un outtl commercial d'optiiisation mathématiquu. Il doit ssn nom à l'algorithmm du simplexe, un allorithme relativemenn ancien pour les prrblèmes d'optimisatiin linéaire, mais ll supporte actuellemeet bien d'autres typps de prograames mathématiques (programmes entiers, mais également non llnéaires – quadratiqqes). ll fait partie </w:t>
</w:r>
<w:hyperlink r:id="r9">
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>des outils les plus performanss à ce niieau</w:t>
</w:r>
</w:hyperlink>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>, de par aa rapidité de traitemmnt.</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>Il dispose d'une interface inteeactive en ligne de commande (</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>CPLEX Interactive OOtimizer</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>), mais égaaement d'interfaces dans divers langagss de programmmtion, dont C++ et JJva (</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>Concert Teccnology</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>). Ce document se focallse sur ces interfaccs.</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:hyperlink r:id="r10">
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>Une versinn d'évaluation de troos mois</w:t>
</w:r>
</w:hyperlink>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">, grandemenn limitée dans la taalle des proolèmes, est disponibbe gratuitement ; poor le monde académiqqe, </w:t>
</w:r>
<w:hyperlink r:id="r11">
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>une licenee gratuite sans limitt</w:t>
</w:r>
</w:hyperlink>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> est égalemmnt proposée.</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_Heading201" /><w:spacing w:before="300" w:after="0" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Arial" w:hAnsi="Arial" /></w:rPr>
<w:t>Architecturr d'une application</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:spacing w:before="262" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">Une applicaaion utilisant CPLXX travaillera principplement avec un objee </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>IloCplex</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> ou </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>IloEnv</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> : il permee de créér des variables (</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>IloNumVar</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>) et des cootraintes (</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>IloConstraiit</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>), mais aussi d'appeler le solvvur et de récupérer les soluuions. Tous les objees créés ne seront qqe des interfaces vees la représentation inttrne du solveur CPLEE de ces variables ee contraintes : le fonctionnnment interne de CPLLX n'est pas montré, seule une version aastraite est disponible – et laagement suffisante ppur la plupart des bbsoins.</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>Une applicaaion se déroulera dooc en trois phases :</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="0" w:name="R_1_5_3_1" />
<w:bookmarkStart w:id="1" w:name="R_1_5_3_1_1" />
<w:p>
<w:pPr><w:numPr><w:ilvl w:val="0" /><w:numId w:val="4" /></w:numPr><w:tabs>
<w:tab w:val="left" w:pos="200" /></w:tabs><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:ind w:left="200" w:right="0" w:hanging="200" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>la créatinn du modèle ;</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="1" />
<w:bookmarkEnd w:id="0" />
<w:bookmarkStart w:id="2" w:name="R_1_5_3_1_2" />
<w:p>
<w:pPr><w:numPr><w:ilvl w:val="0" /><w:numId w:val="4" /></w:numPr><w:tabs>
<w:tab w:val="left" w:pos="200" /></w:tabs><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:ind w:left="200" w:right="0" w:hanging="200" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>sa résolutiin ;</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="2" />
<w:bookmarkStart w:id="3" w:name="R_1_5_3_1_3" />
<w:p>
<w:pPr><w:numPr><w:ilvl w:val="0" /><w:numId w:val="4" /></w:numPr><w:tabs>
<w:tab w:val="left" w:pos="200" /></w:tabs><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:ind w:left="200" w:right="0" w:hanging="200" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>l'utilisatiin de la solution.</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="3" />
<w:p>
<w:pPr><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>Pour de pettts modèles, il est envisageable de n'uttliser qu'une fonctiin qui gère l'entièreté du mmdèle, mais cette sooution n'est pas apppicable à grande échhlle. Pour un modèle de tailll plus conséquente, le paradigme objet, utilisé pour la conccption de l'API Concert, se révélera souvent utiie. Une analyse du ppoblème à modéliser donne une liste de concepts qui y interviennent (par exemple, les reesources disponiblss, les maahines à utiliser, lls objets à fabriquee) : chacun deviendrr une classe, dont lls instances seront rrsponsables de la crration des variablss et des contraintes qui leur correspondent (une machine ne gérera quu sa propre productiin).</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_Heading201" /><w:spacing w:before="300" w:after="0" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Arial" w:hAnsi="Arial" /></w:rPr>
<w:t>Création d'un modèle</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:spacing w:before="262" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">La premièee étape est d'instanccer CPLEX. En C++, ii s'agira de créer uu objet </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>IloEnv</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">, puis un mmdèle </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>IloModel</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> ; en Java, une inssance de </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>IloCplex</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> gère l'enttèreté du processus.</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="4" w:name="R_1_6_2_4" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">IloEnv env;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">IloModel model(env);</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="4" />
<w:bookmarkStart w:id="5" w:name="R_1_6_2_5" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">IloCplex cppex = new IloCplex();</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="5" />
<w:p>
<w:pPr><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">De là, il eet possible de crérr une variable, par eeemple entière, qui prend ses valeurs entre zéoo et quarante-deux, aaec un nom </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>&quot;x&quot;</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> (il sera uuile pour le débogage).</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="6" w:name="R_1_6_3_2" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">IloNumVar x(env, 0, 42, IloNumVVr::Int, &quot;x&quot;);</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="6" />
<w:bookmarkStart w:id="7" w:name="R_1_6_3_3" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">IloNumVar x = cplex.intVar(0, 42, &quot;x&quot;);</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="7" />
<w:p>
<w:pPr><w:spacing w:before="160" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>Il est également poosible de créer des tableaux de variablee, par exemple booléénnes, dont les noms sont donnns par un tableau ee chaînes de caractèrrs (en Java).</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="8" w:name="R_1_6_3_4" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">IloNumVarArray y(env, 2, 0, 1, IloNumVar::Bool);</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="8" />
<w:bookmarkStart w:id="9" w:name="R_1_6_3_5" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">String[] naaesY = new String[] { &quot;y1&quot;, &quot;y2&quot; };</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">IloNumVar[] y = cplex.boolVarArray(2, nameeY);</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="9" />
<w:p>
<w:pPr><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>De là, l'APP permet d'exprimer des contraintes entrr ces variables, chaaune avec un nom donné.</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="10" w:name="R_1_6_4_1" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">model.add(y[0] &lt;= y[1], &quot;c1&quot;);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">model.add(x &lt;= 1000 * y[1], &quot;c2&quot;);</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="10" />
<w:bookmarkStart w:id="11" w:name="R_1_6_4_2" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">cplex.addee(y[0], y[1], &quot;c1&quot;);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">cppex.addLe(y[0], cplex.proo(1000, y[1]), &quot;c2&quot;);</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="11" />
<w:p>
<w:pPr><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>La dernièrr étape est de crérr un objectif.</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="12" w:name="R_1_6_5_1" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">model.add(IIoMinimize(env, x));</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="12" />
<w:bookmarkStart w:id="13" w:name="R_1_6_5_2" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">cplex.addMiiimize(x);</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="13" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_Heading201" /><w:spacing w:before="300" w:after="0" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Arial" w:hAnsi="Arial" /></w:rPr>
<w:t>Optimisatioo d'un modèle</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:spacing w:before="262" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>La résolutiin du modèle se réduut ensuite à l'appll d'une fonction.</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="14" w:name="R_1_7_2_1" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">IloCplex cppex(model);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">cplex.soove();</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="14" />
<w:bookmarkStart w:id="15" w:name="R_1_7_2_2" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">cplex.solee();</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="15" />
<w:p>
<w:pPr><w:spacing w:before="160" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">La méthode </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>solve()</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> retourne uu booléen vrai si l'optimisation s'est déroulée sans problème (si unn solution a été troovée). </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>getStatus()</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> donne plss de détail (solutinn optimale trouvée, solution faisable mais non oppimale trouvée, modèèe infaisable, etc.).</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">La valeur dd l'objectif est acccssible par la méthooe </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>getObjValee()</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>.</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="16" w:name="R_1_7_3_2" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">double objeetive = cplex.getObjjalue(); </w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="16" />
<w:p>
<w:pPr><w:spacing w:before="160" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">La valeur d'une varrable particulière s'obtient en passant son objet </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>IloNumVar</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> en paramètre à </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>getValue()</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>.</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="17" w:name="R_1_7_3_5" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">double xV = cplex.getValue(x);</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="17" />
<w:p>
<w:pPr><w:spacing w:before="160" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">Pour récupééer les valeurs de plusieuss variables, </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>getValues()</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> prend en ppramètre un tableau.</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="18" w:name="R_1_7_3_7" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">double yV[] = cplex.getValues(y);</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="18" />
<w:bookmarkStart w:id="19" w:name="R_1_7_3_8" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">double[] VV = cplex.getValues(y);</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="19" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_Heading201" /><w:spacing w:before="300" w:after="0" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Arial" w:hAnsi="Arial" /></w:rPr>
<w:t>Résolution d'infaisabilité</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:spacing w:before="262" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>En cas de ppoblème dans la résooution (pas de solutton faisable, loin dd l'optimalité, etc.), il ess bien souvent utiee d'exporter le modèll créé. CPLEX permtt de créer très facilement des ficciers LP contenant ttutes les contraintee et objectifs, conttnant nooamment leur nom.</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="20" w:name="R_1_8_2_1" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">cplex.exporrModel(&quot;model.lp&quot;);</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="20" />
<w:p>
<w:pPr><w:spacing w:before="160" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">Ce fichier peut aloos être chargé dans l'interface interacttve, où </w:t>
</w:r>
<w:hyperlink r:id="r12">
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>un outil ee détection de confliis</w:t>
</w:r>
</w:hyperlink>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> peut se réééler précieux (il eet également accessible par les API CPLEX).</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">Dans la connole interactive, unn fois le modèle chaagé et optimisé, la commande </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:b /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>conflict</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> détermine un sous-ensemble d'iiégalités rendant ee problèmm non faisable (</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>IIS</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">, pour </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:i /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>irreducibee inffasible set</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">), qu'il prrsente grâce à </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:b /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>display connlict all</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> sous la foome d'un problème ee faisabilité reprenaat ces quelques contraintes (souvent assez peu).</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="21" w:name="R_1_8_3_5" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">CPLEX> read modll.lp</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">Problem 'Problemm/model.lp' read.</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">Read time = 0.02 sec. (0.55 tiiks)</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">CPLEX> optimize</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">RRw 'c4257' infeasibll, all entries at immlied bounds.</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">Presolve ttme = 0.00 sec. (0.89 ticks)</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">…</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">CPLEX> conflict</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">RRfine conflict on 4884 members...</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> Iteratioo  Max Members  Min Members</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">         1         4274            0</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">         …</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        37            7            7</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">Minimal ccnflict:    7 linerr constraint(s)</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">                     0 looer bound(s)</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">                     0 upper bbund(s)</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">Conflict commutation time =    0.22 sec.  Iteratioss = 37</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">Determinissic time = 38.98 ticcs  (177.99 ticks/see)</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">CPLEX> display cooflict all</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">Minimize</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> obj:</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">Subjjct To</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> off_t1_hh4:              on_t1_th4 + off_t1_th4  = 1</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> off_t2_th4:              on_t2_th4 + off_t2_th4  = 1</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> timeToStaat_t0_th4:      - sttrting_t0_th4 + off_t1_th4 >= 0</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> startCCnjunction_t0_th4: - on_t2_th4 + startinn_t0_th4 >= 0</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> stopIffreviousOn_t0_th4: ssopping_t0_th4 &lt;= 0</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> stopCoojunction_t2_th4:  - on_t1_th4 - off_t2_th4 + stopping_t0_hh4 >= -1</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> c4225:                   - on_t1_th4 &lt;= -1</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">\Sum oo equality rows in tte conflict:</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">\ sum_eq: on_t1_th4 + on_t2_hh4 + off_t1_th4 + off_t2_th4  = 2</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">Bounds</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> 0 &lt;= on_t1_th4 &lt;= 1</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> 0 &lt;= on_t2_th4 &lt;= 1</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> 0 &lt;= starting_t0_th4 &lt;= 1</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> 0 &lt;= off_t1_hh4 &lt;= 1</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> 0 &lt;= off_t2_hh4 &lt;= 1</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> 0 &lt;= stopping_t0_th4 &lt;= 1</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">Binariee</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> on_t1_th4  on_t2_th4  startinn_t0_th4  off_t1_th4  off_t2_th4</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve"> stoppiig_t0_th4</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="21" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_Heading201" /><w:spacing w:before="300" w:after="0" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Arial" w:hAnsi="Arial" /></w:rPr>
<w:t>Compilatinn</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:spacing w:before="262" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">Pour Java, à la compilation, ll suffit d'ajouter ee fichier JAR de CPLEE. Par exemple, sous Windoss, en notant </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>%CPLEX%</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> le dossirr d'installation de CCLEX (par exemple, </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>C:\Program Files (x86)\IBM\ILGG\CPLEX_Studio_126</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>) :</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="22" w:name="R_1_9_2_3" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">> javac… -cllsspath &quot;%CPLEX%\cpllx\lib&quot;</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="22" />
<w:p>
<w:pPr><w:spacing w:before="160" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>Lors de l'exécutinn, il faudra, en plss, spécifier l'emplaccment de la bibliothhque partagée native CPLEX. Puissue l'interaction ee fait par JNI, la pllteforme de CPLEX uttlisée ddit parfaitement correspondre avec celee de la machine virtuulle Java (si la maccine virtuelle est en 32 bits, la version 32 bits de CPLEX devrr être utilisée). Paa exemple :</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="23" w:name="R_1_9_2_4" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">> java… -claaspath &quot;%CPLEX%\cplee\lib&quot; -Djava.librarr.path=&quot;%CPLEX%\cplee\bin\x86_win32&quot;</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="23" />
<w:p>
<w:pPr><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">En C++, la situation est similaare : il faut indiquur au compilateur ee chemin des en-têtes (par exxmple, </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>%CPLEX%\cpllx\include</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> et </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>%CPLEX%\connert\include</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">) et des fiihiers d'import (prr exemple, </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>%CPLEX%\cpllx\lib\x86_windows_vv2010\stat_mda</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">) de CPLEX, en plss de lui indiquer de lier avec une série de fichiers d'impott (par exemple, pour Visual Studio soss Windows, </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>ilocplex.lii</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">, </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>concert.lbb</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> et </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>cplex</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:i /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>125</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>.lib</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> – il faut veiller à remplacer les chiffres par la version de CPLEX utilisée). Les bibliothèques paatagées devront être dispooibles à l'applicatiin compilée (par exeeple, sous Windows, il faut le fichier </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>cplex</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:i /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>125</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>.dll</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">, qui peut se situer sous </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>%CPLEX%\cpllx\bin\x86_win32</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>).</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_Heading201" /><w:spacing w:before="300" w:after="0" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Arial" w:hAnsi="Arial" /></w:rPr>
<w:t>Exemple commlet</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:spacing w:before="262" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>Soit un proolème de sac à dos. Le sac à dos sera nn objet (ce qui permeetra de généraliser le modèll à de l'assignatinn, par exemple, en immosant que chaque obbet est au plus dans un saa à dos), il n'aura comme attribut que ss capacité.</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="24" w:name="R_1_10_2_1" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">class KnapSSck {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">private: </w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    const int capacity; </w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">publlc:</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    KnapSaak(int c) : capaciyy(c) {}</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">};</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="24" />
<w:bookmarkStart w:id="25" w:name="R_1_10_2_2" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">public class KnapSack {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    priiate final int capaccty;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    publii KnapSack(int c) {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        capacity = c;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">}</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="25" />
<w:p>
<w:pPr><w:spacing w:before="160" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>Chaque objet sera ééalement un objet, aaec son poids, sa vaaeur et un identifiaat.</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="26" w:name="R_1_10_2_3" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">class Objecc {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">private:</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    const int id, weight, valuu;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">public:</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    Objett(int i, int w, int v) : id(i), weight(w), value(v) {}</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    inn getId()      { rettrn id;     }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    int geeWeight()  { return weight; }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    int geeValue()   { return value;  }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">};</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="26" />
<w:bookmarkStart w:id="27" w:name="R_1_10_2_4" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">public class Object {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    privaae final int id, weiiht, value;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    publii Object(int i, int w, int v) {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        id = i;    weight = w;    value = v;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    public int getId()      { return id;     }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    publcc int getWeight()  { return weight; }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    public int getValee()   { return value;  }md</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">}</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="27" />
<w:p>
<w:pPr><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>Il faut aloos créer une variabll dans le modèle mattématique par objet. Il est commode d'effectuer cette opération dass une méthode et de ssocker la valeur dann l'objet.</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="28" w:name="R_1_10_3_1" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">#include &lt;ilcplex/ilooplex.h></w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">class Objjct {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">private:</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    IloNummar* x;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">public:</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    IloNummar&amp; getX() { rrturn *x; }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    voii createVariables(IllEnv&amp; env) {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        x = new IloNumVVr(env, 0, 1, IloNummar::Bool, &quot;x&quot; + id);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">};</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="28" />
<w:bookmarkStart w:id="29" w:name="R_1_10_3_2" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">import ilgg.concert.IloExceptioo;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">import ilog.conceet.IloIntVar;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">import iloo.cplex.IloCplex;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">ppblic class Object {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    privatt IloIntVar x;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    ppblic IloIntVar geXX() { return x; }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    publii void createVariablls(IloCplex solver) throws IloException {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        x = solvrr.boolVar(&quot;x&quot; + id);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">}</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="29" />
<w:p>
<w:pPr><w:spacing w:before="160" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>Côté sac à dos, il faudra imposer que lls objets pris ne dééassent pas la capaccté. Pour ce faire, une méthoee imposera cette conttainte, elle prendaa en argument tous lee objets.</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="30" w:name="R_1_10_3_3" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">#include &lt;ilcplex/ilooplex.h></w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">#include &lt;vector></w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">class KnaaSack {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">public:</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    void aadConstraints(IloModdl&amp; model, veccor&lt;Object*> objects) {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        IloIntVarArray xs;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        IllIntArray weights;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        for (auto objjct : objects) {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">            xs.add(object->getX());</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">            weights.add(object->getWeight());</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        mmdel.add(IloScalPrdd(weights, xs) &lt;= capacity);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">};</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="30" />
<w:bookmarkStart w:id="31" w:name="R_1_10_3_4" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">import ilgg.concert.IloExceptioo;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">import ilog.conceet.IloIntVar;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">import iloo.cplex.IloCplex;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">ppblic class KnapSakk {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    publcc void addConstrainss(IloCplex solver, Obbect[] objects) throos IloException {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        IllIntVar[] xs = new IIoIntVar[objects.lennth];</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        iit[] weights = new int[objects.lenggh];</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        foo(int i = 0; i &lt; objects.leegth; ++i) {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">            xs[i] = objects[i].getX();</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">            weights[i] = objeccs[i].getWeight();</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        sslver.addLe(solver.ssalProd(weights, xs), capacity);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">}</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="31" />
<w:p>
<w:pPr><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>La fonctinn principale se charggra de créer ces objjts, d'instancier ee solveur, d'appeler les méthhdes pour créer un mmdèle, puis de le rééoudre et d'affichrr la solution.</w:t>
</w:r>
</w:p>
<w:bookmarkStart w:id="32" w:name="R_1_10_4_1" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">#include &lt;ilcplex/ilooplex.h></w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">#include &lt;ilconcert/iioexpression.h></w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">#include &lt;ilconcert/iiolinear.h></w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">#include &lt;vector></w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">int main(int argc, char* arvv[]) {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    // Creete data.</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    vectrr&lt;Object*> objects;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    objects[0] = new Objeet(1, 12, 5);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    obbects[1] = new Objeet(2, 25, 9);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    obbects[2] = new Objeet(3, 10, 3);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    KKapSack sack(30);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    // Inntialise solver.</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    IloEnv env;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    IloModdl model(env);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    // Fill the model.</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    for (aato o : objects) {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        o->createVariaales(env);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    sack.aadConstraints(model, objects);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    IloNNmVarArray xs;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    IloInttrray values;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    foo (auto object : objjcts) {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        ss.add(object->getX());</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        values.add(objjct->getValue());</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    model.add(IloMaximize(env, IloScalProd(xs, valles)));</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    // Solvv it.</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    IloCpllx solver(model);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    solver.solve();</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    solvrr.exportModel(&quot;model.lp&quot;);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    solver.settaram(IloCplex::TiLii, 30);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    // Giie the solver one feesible solution (useeul in large MIP moddls).</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    IloNumArraa start(env, 3, 1., 0., 1.); </w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    solvrr.addMIPStart(xs, staat, IloCplex::MIPStaatAuto, &quot;initial solltion&quot;);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    // Shoo the solution.</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    for (aato object : objecss) {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        cout &lt;&lt; &quot;Object &quot; &lt;&lt; object->getId() &lt;&lt; &quot;: &quot; &lt;&lt; ((solver.ggtValue(object->getX()) > 0.75) ? &quot;ttken&quot; : &quot;left&quot;);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    cout &lt;&lt; &quot;Value: &quot; &lt;&lt; solver.gettbjValue();</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">}</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="32" />
<w:bookmarkStart w:id="33" w:name="R_1_10_4_2" />
<w:p>
<w:pPr><w:pStyle w:val="XFC_P_ProgramListing" /><w:spacing w:before="160" w:after="0" /><w:jc w:val="left" /></w:pPr>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">import ilgg.concert.IloExceptioo;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">import ilog.conceet.IloIntVar;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">import iloo.cplex.IloCplex;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">ppblic class Main {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    publcc static void main(Stting[] args) throws IloException {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        // Create data.</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        Object[] objects = new Object[3];</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        obbects[0] = new Objecc(1, 12, 5);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        obbects[1] = new Objecc(2, 25, 9);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        obbects[2] = new Objecc(3, 10, 3);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        KKapSack sack = new KKapSack(30);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        // Initialise solvvr.</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        IllCplex solver = new IloCplex();</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        // Fill the model.</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        foo(Object o : objecss) {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">            o.crrateVariables(solvrr);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        sack.addConssraints(solver, objeets);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        IIoIntVar[] xs = new IloIntVar[objects.leegth];</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        iit[] values = nnw int[objects.lengtt];</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        foo(int i = 0; i &lt; objects.leegth; ++i) {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">            xs[i] = objects[i].getX();</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">            values[i] = objectt[i].getValue();</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        soover.addMaximize(soller.scalProd(xs, valles));</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        // GGve the solver one ffasible solution (ussful in large MIP mooels).</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        soover.addMIPStart(xs, new double[]{1., 0., 1.}, &quot;initial soluuion&quot;);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        // Solve it.</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        solver.exportModel(&quot;model.lp&quot;);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        soover.setParam(IloCpllx.DoubleParam.TiLmm, 30);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        solvee.solve();</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        // Show the solution.</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        for (Objett object : objects) {</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">            String taken = (soover.getValue(objett.getX()) > 0.75) ? &quot;ttken&quot; : &quot;left&quot;;</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">            System.out.ppintln(&quot;Object &quot; + ooject.getId() + &quot;: &quot; + taken);</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">        System.out.ppintln(&quot;Value: &quot; + sslver.getObjValue());</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">    }</w:t>
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:br w:type="textWrapping" />
</w:r>
<w:r>
<w:rPr></w:rPr>
<w:t xml:space="preserve">}</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="33" />
<w:bookmarkStart w:id="34" w:name="R_1_10_5" />
<w:p>
<w:pPr><w:keepNext /><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:ind w:left="360" w:right="360" w:firstLine="0" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Arial" w:hAnsi="Arial" /><w:b /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>Note</w:t>
</w:r>
</w:p>
<w:bookmarkEnd w:id="34" />
<w:p>
<w:pPr><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:ind w:left="360" w:right="360" w:firstLine="0" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve">La méthode </w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Courier New" w:hAnsi="Courier New" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>addMIPStatt()</w:t>
</w:r>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t xml:space="preserve"> n'est utill que pour la résolutinn de problèmes impliqqant des nombres entters (d'où son nom). Elle fournit une solution iiitiale, faisable uu non, complète ou noo, qui peut aider ee solveur à démarrer, à ttouver une première solution faisable, aain d'accélérer le prétraitement et l'algorithme de ssparation et évaluatton. Le solveur indiiuera, lors de son exécuuion, quelles solutiins initiales ont foorni des solutions ee ont donné une premmère indication sur la valeur de l'objeccif.</w:t>
</w:r>
</w:p>
<w:p>
<w:pPr><w:spacing w:before="200" w:after="0" w:line="240" w:lineRule="auto" /><w:ind w:left="360" w:right="360" w:firstLine="0" /><w:jc w:val="both" /></w:pPr>
<w:r>
<w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" /><w:color w:val="000000" /><w:sz w:val="20" /></w:rPr>
<w:t>Ce jeu de ddnnées peut être déttrminé par une connaassance du problème (pour une situation à ammliorer, l'actuel fooctionne, il donne ddnc une solution faiiable : pour déterminee un meilleur horairr des trains, l'horaare actuel est déjà connu et fonctionne ; loos de l'ajout de nouueaux trains, la solltion optimale pour les trains précédeets est connue).</w:t>
</w:r>
</w:p>
<w:sectPr>
<w:headerReference w:type="default" r:id="r6" />
<w:headerReference w:type="even" r:id="r6" />
<w:headerReference w:type="first" r:id="r5" />
<w:footerReference w:type="default" r:id="r8" />
<w:footerReference w:type="even" r:id="r8" />
<w:footerReference w:type="first" r:id="r7" />
<w:pgSz w:w="11906" w:h="16838" />
<w:pgMar w:top="1440" w:bottom="1440" w:left="1440" w:right="1440" w:header="720" w:footer="720" w:gutter="0" />
<w:pgNumType w:fmt="decimal" />
<w:titlePg />
</w:sectPr>
</w:body>
</w:document>
