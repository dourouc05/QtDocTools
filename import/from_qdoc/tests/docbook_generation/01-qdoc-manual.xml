<html:html xmlns:html="http://www.w3.org/1999/xhtml" lang="en">
    <html:head>
        <html:meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
        <!-- qdoc-manual-intro.qdoc -->
        <html:title>Introduction to QDoc | QDoc Manual 5.4</html:title>
        <html:link href="style/offline.css" rel="stylesheet" type="text/css" />
    </html:head>
    <html:body>
        <html:div class="header" id="qtdocheader">
            <html:div class="main">
                <html:div class="main-rounded">
                    <html:div class="navigationbar">
                        <html:ul>
                            <html:li><html:a href="qtdoc/index.html">Qt 5.4</html:a></html:li>
                            <html:li><html:a href="qdoc-index.html">QDoc Manual</html:a></html:li>
                            <html:li>Introduction to QDoc</html:li>
                            <html:li id="buildversion">Qt 5.4.2 Reference Documentation</html:li>
                        </html:ul>
                    </html:div>
                </html:div>
                <html:div class="content">
                    <html:div class="line">
                        <html:div class="content mainContent">
                            <html:link href="qdoc-index.html" rel="prev" />
                            <html:link href="27-qdoc-commands-alphabetical.html" rel="next" />
                            <html:p class="naviNextPrevious headerNavi">
                                <html:a class="prevPage" href="qdoc-index.html">QDoc Manual</html:a>
                                <html:a class="nextPage" href="27-qdoc-commands-alphabetical.html"
                                    >Command Index</html:a>
                            </html:p><html:p> </html:p><html:div class="sidebar">
                                <html:div class="toc">
                                    <html:h3><html:a name="toc">Contents</html:a></html:h3>
                                    <html:ul>
                                        <html:li class="level1"><html:a href="#running-qdoc">Running
                                                QDoc</html:a></html:li>
                                        <html:li class="level1"><html:a href="#how-qdoc-works">How
                                                QDoc Works</html:a></html:li>
                                        <html:li class="level1"><html:a href="#command-types"
                                                >Command Types</html:a></html:li>
                                    </html:ul>
                                </html:div>
                                <html:div class="sidebar-content" id="sidebar-content"
                                ></html:div></html:div>
                            <html:h1 class="title">Introduction to QDoc</html:h1>
                            <html:span class="subtitle"></html:span>
                            <!-- $$$01-qdoc-manual.html-description -->
                            <html:div class="descr">
                                <html:a name="details"></html:a>
                                <html:p>QDoc is a tool used by Qt Developers to generate
                                    documentation for software projects. It works by extracting
                                        <html:i>QDoc comments</html:i> from project source files and
                                    then formatting these comments as HTML pages or DITA XML
                                    documents. QDoc finds QDoc comments in
                                        <html:code>.cpp</html:code> files and in
                                        <html:code>.qdoc</html:code> files. QDoc does not look for
                                    QDoc comments in <html:code>.h</html:code> files. A QDoc comment
                                    always begins with an exclamation mark (<html:b>!</html:b>)).
                                    For example:</html:p>
                                <html:pre class="cpp">
                                    <html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \<html:span class="keyword"
                                        >class</html:span>
                                    <html:span class="type"><html:a href="qtcore/qobject.html"
                                            >QObject</html:a></html:span> \brief The <html:span
                                        class="type"><html:a href="qtcore/qobject.html"
                                            >QObject</html:a></html:span>
                                    <html:span class="keyword">class</html:span> is the base
                                        <html:span class="keyword">class</html:span> of all
                                        <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span> objects<html:span
                                        class="operator">.</html:span> \ingroup objectmodel
                                    \reentrant <html:span class="type"><html:a
                                            href="qtcore/qobject.html">QObject</html:a></html:span>
                                    is the heart of the <html:span class="type"><html:a
                                            href="qtcore/qt.html">Qt</html:a></html:span> \l{Object
                                        Model}<html:span class="operator">.</html:span> The central
                                    feature in <html:span class="keyword">this</html:span> model is
                                    a very powerful mechanism <html:span class="keyword"
                                        >for</html:span> seamless object communication called
                                        \l{<html:span class="keyword">signals</html:span> and
                                        <html:span class="keyword">slots</html:span>}<html:span
                                        class="operator">.</html:span> You can connect a signal to a
                                    slot with connect() and destroy the connection with
                                        disconnect()<html:span class="operator">.</html:span> To
                                    avoid never ending notification loops you can temporarily block
                                        <html:span class="keyword">signals</html:span> with
                                        blockSignals()<html:span class="operator">.</html:span> The
                                        <html:span class="keyword">protected</html:span> functions
                                    connectNotify() and disconnectNotify() make it possible to track
                                        connections<html:span class="operator">.</html:span>
                                    <html:span class="type">QObjects</html:span> organize themselves
                                    in \l {Object Trees <html:span class="operator"
                                        >&amp;</html:span> Ownership} {object trees}<html:span
                                        class="operator">.</html:span> When you create a <html:span
                                        class="type"><html:a href="qtcore/qobject.html"
                                            >QObject</html:a></html:span> with another object as
                                        parent<html:span class="operator">,</html:span> the object
                                    will automatically add itself to the parent<html:span
                                        class="char">'s \c children() list. The parent takes
                                        ownership of the object. It will automatically delete its
                                        children in its destructor. You can look for an object by
                                        name and optionally type using findChild() or
                                        findChildren(). Every object has an objectName() and its
                                        class name can be found via the corresponding metaObject()
                                        (see QMetaObject::className()). You can determine whether
                                        the object'</html:span>s <html:span class="keyword"
                                        >class</html:span> inherits another <html:span
                                        class="keyword">class</html:span> in the <html:span
                                        class="type"><html:a href="qtcore/qobject.html"
                                            >QObject</html:a></html:span> inheritance hierarchy by
                                        <html:span class="keyword">using</html:span> the \c
                                    inherits() function<html:span class="operator">.</html:span>
                                    <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator">.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>From the QDoc comment above, QDoc generates the HTML <html:a
                                        href="qtcore/qobject.html">QObject class reference</html:a>
                                    page.</html:p>
                                <html:p>This manual explains how to use the QDoc commands in QDoc
                                    comments to embed good documentation in your source files. It
                                    also explains how to make a <html:a
                                        href="21-0-qdoc-configuration.html">QDoc configuration
                                        file</html:a>, which you will pass to QDoc on the command
                                    line.</html:p>
                                <html:a name="running-qdoc"></html:a>
                                <html:h2 id="running-qdoc">Running QDoc</html:h2>
                                <html:p>The current name of the QDoc program is
                                        <html:code>qdoc</html:code>. To run qdoc from the command
                                    line, give it the name of a configuration file:</html:p>
                                <html:blockquote><html:p><html:code>$ ../../bin/qdoc
                                            ./config.qdocconf</html:code></html:p>
                                </html:blockquote>
                                <html:p>QDoc recognizes the <html:code>.qdocconf</html:code> suffix
                                    as a <html:a href="21-0-qdoc-configuration.html">QDoc
                                        configuration file</html:a>. The configuration file is where
                                    you tell QDoc where to find the project source files, header
                                    files, and <html:code>.qdoc</html:code> files. It is also where
                                    you tell QDoc what kind of output to generate (HTML, DITA
                                    XML,...), and where to put the generated documentation. The
                                    configuration file also contains other information for
                                    QDoc.</html:p>
                                <html:p>See <html:a href="21-0-qdoc-configuration.html">The QDoc
                                        Configuration File</html:a> for instructions on how to set
                                    up a QDoc configuration file.</html:p>
                                <html:a name="how-qdoc-works"></html:a>
                                <html:h2 id="how-qdoc-works">How QDoc Works</html:h2>
                                <html:p>QDoc begins by reading the configuration file you specified
                                    on the command line. It stores all the variables from the
                                    configuration file for later use. One of the first variables it
                                    uses is <html:code>outputformats</html:code>. This variable
                                    tells QDoc which output generators it will run. The default
                                    value is <html:i>HTML</html:i>, so if you don't set
                                        <html:code>outputformats</html:code> in your configuration
                                    file, QDoc will generate HTML output. That's usually what you
                                    will want anyway, but you can also specify
                                        <html:i>DITAXML</html:i> to get DITA XML output
                                    instead.</html:p>
                                <html:p>Next, QDoc uses the values of the <html:a
                                        href="22-qdoc-configuration-generalvariables.html#headerdirs-variable"
                                        >headerdirs</html:a> variable and/or the <html:a
                                        href="22-qdoc-configuration-generalvariables.html#headers-variable"
                                        >headers</html:a> variable to find and parse all the header
                                    files for your project. QDoc does <html:i>not</html:i> scan
                                    header files for QDoc comments. It parses the header files to
                                    build a master tree of all the items that should be documented,
                                    in other words, the items that QDoc should find QDoc comments
                                    for.</html:p>
                                <html:p>After parsing all the header files and building the master
                                    tree of items to be documented, QDoc uses the value of the
                                        <html:a
                                        href="22-qdoc-configuration-generalvariables.html#sourcedirs-variable"
                                        >sourcedirs</html:a> variable and/or the value of the
                                        <html:a
                                        href="22-qdoc-configuration-generalvariables.html#sources-variable"
                                        >sources</html:a> variable to find and parse all the
                                        <html:code>.cpp</html:code> and <html:code>.qdoc</html:code>
                                    files for your project. These are the files QDoc scans for
                                        <html:i>QDoc comments</html:i>. Remember that a QDoc comment
                                    begins with an exclamation mark: <html:b>/*!</html:b> .</html:p>
                                <html:p>For each QDoc comment it finds, it searches the master tree
                                    for the item where the documentation belongs. Then it interprets
                                    the qdoc commands in the comment and stores the interpreted
                                    commands and the comment text in the tree node for the
                                    item.</html:p>
                                <html:p>Finally, QDoc traverses the master tree. For each node, if
                                    the node has stored documentation, QDoc calls the output
                                    generator specified by the <html:code>outputformats</html:code>
                                    variable to format and write the documentation in the directory
                                    specified in the configuration file in the <html:a
                                        href="22-qdoc-configuration-generalvariables.html#outputdir-variable"
                                        >outputdir</html:a> variable.</html:p>
                                <html:a name="command-types"></html:a>
                                <html:h2 id="command-types">Command Types</html:h2>
                                <html:p>QDoc interprets three types of commands:</html:p>
                                <html:ul>
                                    <html:li><html:a href="13-qdoc-commands-topics.html">Topic
                                            Commands</html:a></html:li>
                                    <html:li><html:a href="14-qdoc-commands-contextcommands.html"
                                            >Context Commands</html:a></html:li>
                                    <html:li><html:a href="03-qdoc-commands-markup.html">Markup
                                            Commands</html:a></html:li>
                                </html:ul>
                                <html:p>Topic commands identify the element you are documenting, for
                                    example a C++ class, function, type, or an extra page of text
                                    that doesn't map to an underlying C++ element.</html:p>
                                <html:p>Context commands tell QDoc how the element being documented
                                    relates to other documented elements, for example, next and
                                    previous page links, inclusion in page groups, or library
                                    modules. Context commands can also provide information about the
                                    documented element that QDoc can't get from the source files,
                                    for example, whether the element is thread-safe, whether it is
                                    an overloaded or reimplemented function, or whether it has been
                                    deprecated.</html:p>
                                <html:p>Markup commands tell QDoc how text and image elements in the
                                    document should be rendered, or about the document's outline
                                    structure.</html:p>
                            </html:div>
                            <!-- @@@01-qdoc-manual.html -->
                            <html:p class="naviNextPrevious footerNavi">
                                <html:a class="prevPage" href="qdoc-index.html">QDoc Manual</html:a>
                                <html:a class="nextPage" href="27-qdoc-commands-alphabetical.html"
                                    >Command Index</html:a>
                            </html:p>
                        </html:div>
                    </html:div>
                </html:div>
            </html:div>
        </html:div>
        <html:div class="footer">
            <html:p>
                <html:acronym title="Copyright">&#169;</html:acronym> 2015 The Qt Company Ltd.
                Documentation contributions included herein are the copyrights of their respective
                owners.<html:br /> The documentation provided herein is licensed under the terms of
                the <html:a href="http://www.gnu.org/licenses/fdl.html">GNU Free Documentation
                    License version 1.3</html:a> as published by the Free Software
                Foundation.<html:br /> Qt and respective logos are trademarks of The Qt Company Ltd.
                in Finland and/or other countries worldwide. All other trademarks are property of
                their respective owners. </html:p>
        </html:div>
    </html:body>
</html:html>