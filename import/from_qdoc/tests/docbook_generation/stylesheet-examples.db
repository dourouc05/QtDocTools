<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.0"
            xml:lang="en">
   <db:title>Qt Style Sheets Examples</db:title>
   <db:para>We will now see a few examples to get started with using Qt
                                    Style Sheets.</db:para>
   <db:section xml:id="style-sheet-usage">
      <db:title>Style Sheet Usage</db:title>
      <db:section>
         <db:title>Customizing the Foreground and Background Colors</db:title>
         <db:para>Let's start by setting yellow as the background color of all
                                        <db:code><db:link xlink:href="qlineedit.html">QLineEdit</db:link></db:code>s in an
                                    application. This could be achieved like this:</db:para>
         <db:programlisting>qApp-&gt;setStyleSheet("QLineEdit { background-color: yellow
                                    }");</db:programlisting>
         <db:para>If we want the property to apply only to the <db:code><db:link xlink:href="qlineedit.html">QLineEdit</db:link></db:code>s that are children
                                    (or grandchildren or grand-grandchildren) of a specific dialog,
                                    we would rather do this:</db:para>
         <db:programlisting>myDialog-&gt;setStyleSheet("QLineEdit { background-color: yellow
                                    }");</db:programlisting>
         <db:para>If we want the property to apply only to one specific
                                        <db:code><db:link xlink:href="qlineedit.html">QLineEdit</db:link></db:code>, we can
                                    give it a name using <db:code><db:link xlink:href="qtcore/qobject.html#objectName-prop">QObject::setObjectName</db:link>()</db:code> and use an ID Selector to
                                    refer to it:</db:para>
         <db:programlisting>myDialog-&gt;setStyleSheet("QLineEdit#nameEdit { background-color: yellow
                                        }");</db:programlisting>
         <db:para>Alternatively, we can set the <db:link xlink:href="stylesheet-reference.html#background-prop">background-color</db:link> property directly on the <db:code><db:link xlink:href="qlineedit.html">QLineEdit</db:link></db:code>, omitting the
                                    selector:</db:para>
         <db:programlisting>nameEdit-&gt;setStyleSheet("background-color: yellow");</db:programlisting>
         <db:para>To ensure a good contrast, we should also specify a suitable
                                    color for the text:</db:para>
         <db:programlisting>nameEdit-&gt;setStyleSheet("color: blue; background-color:
                                    yellow");</db:programlisting>
         <db:para>It might be a good idea to change the colors used for
                                    selected text as well:</db:para>
         <db:programlisting>nameEdit-&gt;setStyleSheet("color: blue;""background-color:
                                        yellow;""selection-color: yellow;""selection-background-color:
                                        blue;");</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing Using Dynamic Properties</db:title>
         <db:para>There are many situations where we need to present a form
                                    that has mandatory fields. To indicate to the user that the
                                    field is mandatory, one effective (albeit esthetically dubious)
                                    solution is to use yellow as the background color for those
                                    fields. It turns out this is very easy to implement using Qt
                                    Style Sheets. First, we would use the following application-wide
                                    style sheet:</db:para>
         <db:programlisting>*[mandatoryField="true"]
                                    { background-color:
                                    yellow }</db:programlisting>
         <db:para>This means that every widget whose
                                        <db:code>mandatoryField</db:code> Qt property is set to
                                    true would have a yellow background.</db:para>
         <db:para>Then, for each mandatory field widget, we would simply
                                    create a <db:code>mandatoryField</db:code> property on the
                                    fly and set it to true. For example:</db:para>
         <db:programlisting>QLineEdit*nameEdit =newQLineEdit(this); nameEdit-&gt;setProperty("mandatoryField",true); QLineEdit*emailEdit =newQLineEdit(this); emailEdit-&gt;setProperty("mandatoryField",true); QSpinBox*ageSpinBox =newQSpinBox(this); ageSpinBox-&gt;setProperty("mandatoryField",true);</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing a QPushButton Using the Box Model</db:title>
         <db:para>This time, we will show how to create a red <db:code><db:link xlink:href="qpushbutton.html">QPushButton</db:link></db:code>. This <db:code><db:link xlink:href="qpushbutton.html">QPushButton</db:link></db:code> would
                                    presumably be connected to a very destructive piece of
                                    code.</db:para>
         <db:para>First, we are tempted to use this style sheet:</db:para>
         <db:programlisting>QPushButton#evilButton { background-color: red
                                        }</db:programlisting>
         <db:para>However, the result is a boring, flat button with no
                                    borders:</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:alt>A flat red button</db:alt>
               <db:imageobject>
                  <db:imagedata fileref="images/stylesheet-redbutton1.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>What happened is this:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>We have made a request that cannot be satisfied using
                                        the native styles alone (e.g., the Windows XP theme engine
                                        doesn't let us specify the background color of a
                                        button).</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Therefore, the button is rendered using style
                                        sheets.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>We haven't specified any values for <db:link xlink:href="stylesheet-reference.html#border-width-prop">border-width</db:link> and <db:link xlink:href="stylesheet-reference.html#border-style-prop">border-style</db:link>, so by default we obtain a
                                        0-pixel wide border of style
                                        <db:code>none</db:code>.</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:para>Let's improve the situation by specifying a border:</db:para>
         <db:programlisting>QPushButton#evilButton {
                                        background-color:
                                    red; border-style:
                                    outset; border-width:
                                        2px; border-color: beige; }</db:programlisting>
         <db:informalfigure>
            <db:mediaobject>
               <db:alt>A red button with a beige border</db:alt>
               <db:imageobject>
                  <db:imagedata fileref="images/stylesheet-redbutton2.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>Things look already a lot better. But the
                                    button looks a bit cramped. Let's specify some spacing between
                                    the border and the text using the <db:link xlink:href="stylesheet-reference.html#padding-prop">padding</db:link>. Additionally, we will enforce a minimum
                                    width, round the corners, and specify a larger font to make the
                                    button look nicer:</db:para>
         <db:programlisting>QPushButton#evilButton {
                                        background-color:
                                    red; border-style:
                                    outset; border-width:
                                        2px; border-radius: 10px; border-color: beige; font: bold
                                        14px; min-width: 10em; padding: 6px; }</db:programlisting>
         <db:informalfigure>
            <db:mediaobject>
               <db:alt>A red button with a round beige border and big, bold text</db:alt>
               <db:imageobject>
                  <db:imagedata fileref="images/stylesheet-redbutton3.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>The only issue remaining is that the button
                                    doesn't react when we press it. We can fix this by specifying a
                                    slightly different background color and use a different border
                                    style.</db:para>
         <db:programlisting>QPushButton#evilButton {
                                        background-color:
                                    red; border-style:
                                    outset; border-width:
                                        2px; border-radius: 10px; border-color: beige; font: bold
                                        14px; min-width: 10em; padding: 6px; } QPushButton#evilButton:pressed {
                                        background-color:
                                        rgb(224,0,0); border-style: inset; }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing the QPushButton's Menu Indicator
                                    Sub-Control</db:title>
         <db:para>Subcontrols give access to the sub-elements of a widget. For
                                    example, a <db:code><db:link xlink:href="qpushbutton.html">QPushButton</db:link></db:code>
                                    associated with a menu (using <db:code><db:link xlink:href="qpushbutton.html#setMenu">QPushButton::setMenu</db:link>()</db:code>) has a menu indicator.
                                    Let's customize the menu indicator for the red push
                                    button:</db:para>
         <db:programlisting>QPushButton#evilButton::menu-indicator
                                        { image: url(myindicator.png); }</db:programlisting>
         <db:para>By default, the menu indicator is located at the
                                    bottom-right corner of the padding rectangle. We can change this
                                    by specifying <db:link xlink:href="stylesheet-reference.html#subcontrol-position-prop">subcontrol-position</db:link> and <db:link xlink:href="stylesheet-reference.html#subcontrol-origin-prop">subcontrol-origin</db:link> to anchor the indicator
                                    differently. We can also use <db:link xlink:href="stylesheet-reference.html#top-prop">top</db:link> and
                                        <db:link xlink:href="stylesheet-reference.html#left-prop">left</db:link> to move the indicator by a few pixels. For
                                    example:</db:para>
         <db:programlisting>QPushButton::menu-indicator { image: url(myindicator.png); subcontrol-position: right center;
                                        subcontrol-origin:
                                    padding; left: -2px;
                                    }</db:programlisting>
         <db:para>This positions the <db:code>myindicator.png</db:code> to
                                    the center right of the <db:code><db:link xlink:href="qpushbutton.html">QPushButton</db:link></db:code>'s <db:link xlink:href="stylesheet-reference.html#padding-prop">padding</db:link> rectangle (see <db:link xlink:href="stylesheet-reference.html#subcontrol-origin-prop">subcontrol-origin</db:link> for more information).</db:para>
      </db:section>
      <db:section>
         <db:title>Complex Selector Example</db:title>
         <db:para>Since red seems to be our favorite color, let's make the
                                    text in <db:code><db:link xlink:href="qlineedit.html">QLineEdit</db:link></db:code> red by
                                    setting the following application-wide stylesheet:</db:para>
         <db:programlisting>QLineEdit {
                                    color: red }</db:programlisting>
         <db:para>However, we would like to give a visual indication that a
                                        <db:code><db:link xlink:href="qlineedit.html">QLineEdit</db:link></db:code> is
                                    read-only by making it appear gray:</db:para>
         <db:programlisting>QLineEdit {
                                    color: red } QLineEdit[readOnly="true"]
                                    { color: gray }</db:programlisting>
         <db:para>At some point, our design team comes with the requirement
                                    that all <db:code><db:link xlink:href="qlineedit.html">QLineEdit</db:link></db:code>s in
                                    the registration form (with the <db:link xlink:href="qtcore/qobject.html#objectName-prop">object
                                        name</db:link>
            <db:code>registrationDialog</db:code>) to be brown:</db:para>
         <db:programlisting>QLineEdit {
                                    color: red } QLineEdit[readOnly="true"]
                                    { color: gray } #registrationDialog QLineEdit { color: brown
                                    }</db:programlisting>
         <db:para>A few UI design meetings later, we decide that all our
                                        <db:code><db:link xlink:href="qdialog.html">QDialog</db:link></db:code>s should have
                                    brown colored <db:code><db:link xlink:href="qlineedit.html">QLineEdit</db:link></db:code>s:</db:para>
         <db:programlisting>QLineEdit {
                                    color: red } QLineEdit[readOnly="true"]
                                    { color: gray } QDialogQLineEdit { color: brown
                                    }</db:programlisting>
         <db:para>Quiz: What happens if we have a read-only <db:code><db:link xlink:href="qlineedit.html">QLineEdit</db:link></db:code> in a <db:code><db:link xlink:href="qdialog.html">QDialog</db:link></db:code>? [Hint: The <db:link xlink:href="stylesheet-syntax.html#conflict-resolution">Conflict
                                        Resolution</db:link> section above explains what happens in
                                    cases like this.]</db:para>
      </db:section>
      <db:section>
         <db:title>See Also</db:title>
         <db:simplelist type="vert">
            <db:member>
               <db:link xlink:href="qtwidgets-widgets-stylesheet-example.html">Style Sheet
                                    Example</db:link>
            </db:member>
            <db:member>
               <db:link xlink:href="qtgui/richtext-html-subset.html">Supported HTML Subset</db:link>
            </db:member>
            <db:member><db:code><db:link xlink:href="qstyle.html">QStyle</db:link></db:code></db:member>
         </db:simplelist>
      </db:section>
   </db:section>
   <db:section xml:id="customizing-specific-widgets">
      <db:title>Customizing Specific
                                    Widgets</db:title>
      <db:para>This section provides examples to customize specific widgets
                                    using Style Sheets.</db:para>
      <db:section>
         <db:title>Customizing QAbstractScrollArea</db:title>
         <db:para>The background of any <db:code><db:link xlink:href="qabstractscrollarea.html">QAbstractScrollArea</db:link></db:code>
                                    (Item views, <db:code><db:link xlink:href="qtextedit.html">QTextEdit</db:link></db:code>
                                    and <db:code><db:link xlink:href="qtextbrowser.html">QTextBrowser</db:link></db:code>) can
                                    be set using the background properties. For example, to set a
                                    background-image that scrolls with the scroll bar:</db:para>
         <db:programlisting>QTextEdit,QListView { background-color: white;
                                        background-image:
                                        url(draft.png);
                                        background-attachment: scroll; }</db:programlisting>
         <db:para>If the background-image is to be fixed with the
                                    viewport:</db:para>
         <db:programlisting>QTextEdit,QListView { background-color: white;
                                        background-image:
                                        url(draft.png);
                                        background-attachment: fixed; }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QCheckBox</db:title>
         <db:para>Styling of a <db:code><db:link xlink:href="qcheckbox.html">QCheckBox</db:link></db:code> is almost identical to styling a <db:code><db:link xlink:href="qradiobutton.html">QRadioButton</db:link></db:code>. The main
                                    difference is that a tristate <db:code><db:link xlink:href="qcheckbox.html">QCheckBox</db:link></db:code> has an indeterminate state.</db:para>
         <db:programlisting>QCheckBox {
                                    spacing: 5px; } QCheckBox::indicator { width: 13px; height: 13px; } QCheckBox::indicator:unchecked { image: url(:/images/checkbox_unchecked.png); } QCheckBox::indicator:unchecked:hover {
                                    image: url(:/images/checkbox_unchecked_hover.png); } QCheckBox::indicator:unchecked:pressed {
                                    image: url(:/images/checkbox_unchecked_pressed.png); } QCheckBox::indicator:checked { image:
                                        url(:/images/checkbox_checked.png); } QCheckBox::indicator:checked:hover { image:
                                        url(:/images/checkbox_checked_hover.png); } QCheckBox::indicator:checked:pressed {
                                    image: url(:/images/checkbox_checked_pressed.png); } QCheckBox::indicator:indeterminate:hover
                                    { image: url(:/images/checkbox_indeterminate_hover.png); } QCheckBox::indicator:indeterminate:pressed { image:
                                        url(:/images/checkbox_indeterminate_pressed.png); }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QComboBox</db:title>
         <db:para>We will look at an example where the drop down button of a
                                        <db:code><db:link xlink:href="qcombobox.html">QComboBox</db:link></db:code> appears
                                    "merged" with the combo box frame.</db:para>
         <db:programlisting>QComboBox {
                                    border: 1px solid gray;
                                        border-radius:
                                        3px; padding:
                                        1px18px1px3px; min-width: 6em; } QComboBox:editable { background:
                                    white; } QComboBox:!editable,QComboBox::drop-down:editable { background:
                                    qlineargradient(x1: 0, y1:
                                        0, x2: 0, y2:
                                        1, stop: 0#E1E1E1, stop: 0.4
                                        #DDDDDD, stop: 0.5#D8D8D8, stop: 1.0
                                        #D3D3D3); } /*
                                        QComboBox gets the "on" state when the popup is open
                                        */QComboBox:!editable:on,QComboBox::drop-down:editable:on { background:
                                    qlineargradient(x1: 0, y1:
                                        0, x2: 0, y2:
                                        1, stop: 0#D3D3D3, stop: 0.4
                                        #D8D8D8, stop: 0.5#DDDDDD, stop: 1.0
                                        #E1E1E1); } QComboBox:on
                                    { /* shift the text when the popup
                                        opens */ padding-top: 3px; padding-left: 4px; } QComboBox::drop-down { subcontrol-origin: padding; subcontrol-position: top right; width:
                                        15px; border-left-width: 1px; border-left-color: darkgray;
                                        border-left-style: solid; /* just a
                                        single line */ border-top-right-radius: 3px;
                                        /* same radius as the QComboBox
                                        */ border-bottom-right-radius: 3px;
                                    } QComboBox::down-arrow { image: url(/usr/share/icons/crystalsvg/16x16/actions/1downarrow.png); } QComboBox::down-arrow:on { /* shift the
                                        arrow when popup is open */ top: 1px; left: 1px; }</db:programlisting>
         <db:para>The pop-up of the <db:code><db:link xlink:href="qcombobox.html">QComboBox</db:link></db:code> is a <db:code><db:link xlink:href="qabstractitemview.html">QAbstractItemView</db:link></db:code> and
                                    is styled using the descendant selector:</db:para>
         <db:programlisting>QComboBoxQAbstractItemView { border:
                                        2px solid darkgray;
                                        selection-background-color: lightgray; }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QDockWidget</db:title>
         <db:para>The title bar and the buttons of a <db:code><db:link xlink:href="qdockwidget.html">QDockWidget</db:link></db:code> can be
                                    customized as follows:</db:para>
         <db:programlisting>QDockWidget
                                    { border: 1px solid
                                    lightgray; titlebar-close-icon: url(close.png); titlebar-normal-icon: url(undock.png); } QDockWidget::title { text-align: left; /*
                                        align the text to the left */ background:
                                    lightgray; padding-left:
                                        5px; } QDockWidget::close-button,QDockWidget::float-button { border: 1px solid transparent; background: darkgray;
                                    padding: 0px; } QDockWidget::close-button:hover,QDockWidget::float-button:hover { background: gray; } QDockWidget::close-button:pressed,QDockWidget::float-button:pressed { padding: 1px-1px-1px1px; }</db:programlisting>
         <db:para>If one desires to move the dock widget buttons to the left,
                                    the following style sheet can be used:</db:para>
         <db:programlisting>QDockWidget
                                    { border: 1px solid
                                    lightgray; titlebar-close-icon: url(close.png); titlebar-normal-icon: url(float.png); } QDockWidget::title { text-align: left; background: lightgray;
                                        padding-left:
                                        35px; } QDockWidget::close-button,QDockWidget::float-button { background: darkgray; padding: 0px; icon-size: 14px; /* maximum icon size */ } QDockWidget::close-button:hover,QDockWidget::float-button:hover { background: gray; } QDockWidget::close-button:pressed,QDockWidget::float-button:pressed { padding: 1px-1px-1px1px; } QDockWidget::close-button { subcontrol-position: top left;
                                        subcontrol-origin:
                                    margin; position: absolute; top: 0px; left: 0px; bottom: 0px; width: 14px; } QDockWidget::float-button { subcontrol-position: top left; subcontrol-origin: margin; position:
                                    absolute; top: 0px; left:
                                        16px; bottom:
                                        0px; width: 14px; }</db:programlisting>
         <db:note>
            <db:para>To customize the separator (resize
                                    handle) of a <db:code><db:link xlink:href="qdockwidget.html">QDockWidget</db:link></db:code>, use
                                    QMainWindow::separator.</db:para>
         </db:note>
      </db:section>
      <db:section>
         <db:title>Customizing QFrame</db:title>
         <db:para>A <db:code><db:link xlink:href="qframe.html">QFrame</db:link></db:code> is styled using
                                    the <db:link xlink:href="stylesheet-customizing.html#the-box-model">The
                                        Box Model</db:link>.</db:para>
         <db:programlisting>QFrame,QLabel,QToolTip { border: 2px solid green; border-radius: 4px; padding: 2px; background-image: url(images/welcome.png); }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QGroupBox</db:title>
         <db:para>Let us look at an example that moves the <db:code><db:link xlink:href="qgroupbox.html">QGroupBox</db:link></db:code>'s title to the
                                    center.</db:para>
         <db:programlisting>QGroupBox {
                                        background-color:
                                    qlineargradient(x1: 0, y1:
                                        0, x2: 0, y2:
                                        1, stop: 0#E0E0E0, stop: 1
                                        #FFFFFF); border: 2px solid gray; border-radius: 5px; margin-top: 1ex; /* leave space
                                        at the top for the title */ } QGroupBox::title { subcontrol-origin: margin;
                                        subcontrol-position:
                                    top center; /* position at the top
                                        center */ padding: 03px; background-color: qlineargradient(x1:
                                        0, y1: 0, x2:
                                        0, y2: 1,
                                    stop: 0#FF0ECE, stop: 1
                                        #FFFFFF); }</db:programlisting>
         <db:para>For a checkable <db:code><db:link xlink:href="qgroupbox.html">QGroupBox</db:link></db:code>, use the {#indicator-sub}{::indicator}
                                    subcontrol and style it exactly like a <db:code><db:link xlink:href="qcheckbox.html">QCheckBox</db:link></db:code> (i.e)</db:para>
         <db:programlisting>QGroupBox::indicator { width: 13px; height: 13px; } QGroupBox::indicator:unchecked { image: url(:/images/checkbox_unchecked.png); } /* proceed with styling just like QCheckBox
                                        */</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QHeaderView</db:title>
         <db:para><db:code><db:link xlink:href="qheaderview.html">QHeaderView</db:link></db:code> is
                                    customized as follows:</db:para>
         <db:programlisting>QHeaderView::section { background-color:
                                        qlineargradient(x1:0,
                                        y1:0, x2:0,
                                        y2:1, stop:0#616161, stop: 0.5
                                        #505050, stop: 0.6#434343, stop:1
                                        #656565); color: white; padding-left: 4px; border: 1px solid #6c6c6c; } QHeaderView::section:checked {
                                        background-color:
                                    red; } /* style the sort indicator
                                        */QHeaderView::down-arrow { image:
                                        url(down_arrow.png);
                                    } QHeaderView::up-arrow { image: url(up_arrow.png); }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QLineEdit</db:title>
         <db:para>The frame of a <db:code><db:link xlink:href="qlineedit.html">QLineEdit</db:link></db:code> is styled using the <db:link xlink:href="stylesheet-customizing.html#the-box-model">The Box
                                        Model</db:link>. To create a line edit with rounded corners,
                                    we can set:</db:para>
         <db:programlisting>QLineEdit {
                                    border: 2px solid gray;
                                        border-radius:
                                        10px; padding:
                                        08px; background: yellow;
                                        selection-background-color: darkgray; }</db:programlisting>
         <db:para>The password character of line edits that have <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum">QLineEdit::Password</db:link></db:code> echo mode can be set
                                    using:</db:para>
         <db:programlisting>QLineEdit[echoMode="2"] {
                                        lineedit-password-character: 9679; }</db:programlisting>
         <db:para>The background of a read only <db:code><db:link xlink:href="qlineedit.html">QLineEdit</db:link></db:code> can be modified as below:</db:para>
         <db:programlisting>QLineEdit:read-only { background:
                                    lightblue;</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QListView</db:title>
         <db:para>The background color of alternating rows can be customized
                                    using the following style sheet:</db:para>
         <db:programlisting>QListView {
                                        alternate-background-color: yellow; }</db:programlisting>
         <db:para>To provide a special background when you hover over items,
                                    we can use the <db:link xlink:href="stylesheet-reference.html#item-sub">::item</db:link> subcontrol. For example,</db:para>
         <db:programlisting>QListView {
                                        show-decoration-selected: 1; /* make the
                                        selection span the entire width of the view */ }
                                        QListView::item:alternate { background:
                                        #EEEEEE; }
                                        QListView::item:selected { border:
                                        1px solid #6a6ea9; } QListView::item:selected:!active { background:
                                    qlineargradient(x1: 0, y1:
                                        0, x2: 0, y2:
                                        1, stop: 0#ABAFE5, stop: 1
                                        #8588B2); } QListView::item:selected:active { background:
                                    qlineargradient(x1: 0, y1:
                                        0, x2: 0, y2:
                                        1, stop: 0#6a6ea9, stop: 1
                                        #888dd9); } QListView::item:hover { background: qlineargradient(x1:
                                        0, y1: 0, x2:
                                        0, y2: 1,
                                    stop: 0#FAFBFE, stop: 1
                                        #DCDEF1); }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QMainWindow</db:title>
         <db:para>The separator of a <db:code><db:link xlink:href="qmainwindow.html">QMainWindow</db:link></db:code> can be styled as follows:</db:para>
         <db:programlisting>QMainWindow::separator { background: yellow; width:
                                        10px; /* when vertical */ height:
                                        10px; /* when horizontal */ }
                                        QMainWindow::separator:hover { background:
                                    red; }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QMenu</db:title>
         <db:para>Individual items of a <db:code><db:link xlink:href="qmenu.html">QMenu</db:link></db:code> are styled using the 'item' subcontrol as
                                    follows:</db:para>
         <db:programlisting>QMenu {
                                        background-color:
                                        #ABABAB; /* sets background
                                        of the menu */ border: 1px solid black; } QMenu::item { /* sets
                                        background of menu item. set this to something
                                        non-transparent if you want menu color and menu item color
                                        to be different */ background-color: transparent; }
                                        QMenu::item:selected { /*
                                        when user selects item using mouse or keyboard
                                        */ background-color: #654321; }</db:programlisting>
         <db:para>For a more advanced customization, use a style sheet as
                                    follows:</db:para>
         <db:programlisting>QMenu {
                                        background-color:
                                    white; margin: 2px;
                                        /* some spacing around the menu
                                        */ } QMenu::item { padding: 2px25px2px20px; border: 1px solid transparent; /* reserve space for selection border
                                        */ } QMenu::item:selected {
                                        border-color:
                                    darkblue; background: rgba(100,100,100,150); } QMenu::icon:checked { /*
                                        appearance of a 'checked' icon */ background:
                                    gray; border: 1px inset
                                    gray; position: absolute; top: 1px; right: 1px; bottom: 1px; left: 1px; } QMenu::separator { height:
                                        2px; background:
                                    lightblue; margin-left:
                                        10px; margin-right: 5px; } QMenu::indicator { width: 13px; height: 13px; } /*
                                        non-exclusive indicator = check box style indicator (see
                                        QActionGroup::setExclusive) */QMenu::indicator:non-exclusive:unchecked { image: url(:/images/checkbox_unchecked.png); } QMenu::indicator:non-exclusive:unchecked:selected { image:
                                        url(:/images/checkbox_unchecked_hover.png); } QMenu::indicator:non-exclusive:checked { image: url(:/images/checkbox_checked.png); } QMenu::indicator:non-exclusive:checked:selected { image:
                                        url(:/images/checkbox_checked_hover.png); } /* exclusive indicator = radio button style
                                        indicator (see QActionGroup::setExclusive) */QMenu::indicator:exclusive:unchecked { image:
                                        url(:/images/radiobutton_unchecked.png); } QMenu::indicator:exclusive:unchecked:selected {
                                    image: url(:/images/radiobutton_unchecked_hover.png); } QMenu::indicator:exclusive:checked { image:
                                        url(:/images/radiobutton_checked.png); } QMenu::indicator:exclusive:checked:selected { image:
                                        url(:/images/radiobutton_checked_hover.png); }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QMenuBar</db:title>
         <db:para><db:code><db:link xlink:href="qmenubar.html">QMenuBar</db:link></db:code> is styled as
                                    follows:</db:para>
         <db:programlisting>QMenuBar {
                                        background-color:
                                        qlineargradient(x1:0,
                                        y1:0, x2:0,
                                        y2:1, stop:0 lightgray, stop:1 darkgray); } QMenuBar::item { spacing: 3px; /* spacing
                                        between menu bar items */ padding: 1px4px; background:
                                    transparent; border-radius: 4px;
                                    } QMenuBar::item:selected { /* when selected using mouse or keyboard
                                        */ background: #a8a8a8; } QMenuBar::item:pressed { background: #888888; }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QProgressBar</db:title>
         <db:para>The <db:code><db:link xlink:href="qprogressbar.html">QProgressBar</db:link></db:code>'s
                                        <db:link xlink:href="stylesheet-reference.html#border-prop">border</db:link>, <db:link xlink:href="stylesheet-reference.html#chunk-sub">chunk</db:link>,
                                    and <db:link xlink:href="stylesheet-reference.html#text-align-prop">text-align</db:link> can be customized using style sheets.
                                    However, if one property or sub-control is customized, all the
                                    other properties or sub-controls must be customized as
                                    well.</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:imageobject>
                  <db:imagedata fileref="images/progressBar-stylesheet.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>For example, we change the <db:link xlink:href="stylesheet-reference.html#border-prop">border</db:link>
                                    to grey and the <db:link xlink:href="stylesheet-reference.html#chunk-sub">chunk</db:link> to
                                    cerulean.</db:para>
         <db:programlisting>QProgressBar { border: 2px solid grey; border-radius: 5px; } QProgressBar::chunk { background-color: #05B8CC; width: 20px; }</db:programlisting>
         <db:para>This leaves the <db:link xlink:href="stylesheet-reference.html#text-align-prop">text-align</db:link>, which we customize by positioning the
                                    text in the center of the progress bar.</db:para>
         <db:programlisting>QProgressBar { border: 2px solid grey; border-radius: 5px; text-align: center; }</db:programlisting>
         <db:para>A <db:link xlink:href="stylesheet-reference.html#margin-prop">margin</db:link> can be included to obtain more visible
                                    chunks.</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:imageobject>
                  <db:imagedata fileref="images/progressBar2-stylesheet.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>In the screenshot above, we use a <db:link xlink:href="stylesheet-reference.html#margin-prop">margin</db:link>
                                    of 0.5 pixels.</db:para>
         <db:programlisting>QProgressBar::chunk { background-color: #CD96CD; width: 10px; margin: 0.5px; }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QPushButton</db:title>
         <db:para>A <db:code><db:link xlink:href="qpushbutton.html">QPushButton</db:link></db:code> is
                                    styled as follows:</db:para>
         <db:programlisting>QPushButton
                                    { border: 2px solid
                                        #8f8f91;
                                        border-radius:
                                        6px;
                                        background-color:
                                    qlineargradient(x1: 0, y1:
                                        0, x2: 0, y2:
                                        1, stop: 0#f6f7fa, stop: 1
                                        #dadbde); min-width: 80px; } QPushButton:pressed { background-color: qlineargradient(x1:
                                        0, y1: 0, x2:
                                        0, y2: 1,
                                    stop: 0#dadbde, stop: 1
                                        #f6f7fa); } QPushButton:flat { border: none;
                                        /* no border for a flat push
                                        button */ } QPushButton:default { border-color: navy; /*
                                        make the default button prominent */
                                    }</db:programlisting>
         <db:para>For a <db:code><db:link xlink:href="qpushbutton.html">QPushButton</db:link></db:code>
                                    with a menu, use the <db:link xlink:href="stylesheet-reference.html#menu-indicator-sub">::menu-indicator</db:link> subcontrol.</db:para>
         <db:programlisting>QPushButton:open { /* when the button has its menu open
                                        */ background-color: qlineargradient(x1: 0, y1: 0, x2:
                                        0, y2: 1,
                                    stop: 0#dadbde, stop: 1
                                        #f6f7fa); } QPushButton::menu-indicator { image: url(menu_indicator.png); subcontrol-origin: padding;
                                        subcontrol-position:
                                    bottom right; } QPushButton::menu-indicator:pressed,QPushButton::menu-indicator:open { position:
                                    relative; top: 2px; left:
                                        2px; /* shift the arrow by 2 px */
                                    }</db:programlisting>
         <db:para>Checkable <db:code><db:link xlink:href="qpushbutton.html">QPushButton</db:link></db:code> have the <db:link xlink:href="stylesheet-reference.html#checked-ps">:checked</db:link> pseudo state set.</db:para>
      </db:section>
      <db:section>
         <db:title>Customizing QRadioButton</db:title>
         <db:para>The indicator of a <db:code><db:link xlink:href="qradiobutton.html">QRadioButton</db:link></db:code> can be changed using:</db:para>
         <db:programlisting>QRadioButton::indicator { width: 13px; height: 13px; } QRadioButton::indicator::unchecked { image:
                                        url(:/images/radiobutton_unchecked.png); } QRadioButton::indicator:unchecked:hover {
                                    image: url(:/images/radiobutton_unchecked_hover.png); } QRadioButton::indicator:unchecked:pressed {
                                    image: url(:/images/radiobutton_unchecked_pressed.png); } QRadioButton::indicator::checked { image:
                                        url(:/images/radiobutton_checked.png); } QRadioButton::indicator:checked:hover {
                                    image: url(:/images/radiobutton_checked_hover.png); } QRadioButton::indicator:checked:pressed {
                                    image: url(:/images/radiobutton_checked_pressed.png); }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QScrollBar</db:title>
         <db:para>The <db:code><db:link xlink:href="qscrollbar.html">QScrollBar</db:link></db:code> can
                                    be styled using its subcontrols like <db:link xlink:href="stylesheet-reference.html#handle-sub">handle</db:link>,
                                        <db:link xlink:href="stylesheet-reference.html#add-line-sub">add-line</db:link>, <db:link xlink:href="stylesheet-reference.html#sub-line-sub">sub-line</db:link>, and so on. Note that if one property or
                                    sub-control is customized, all the other properties or
                                    sub-controls must be customized as well.</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:imageobject>
                  <db:imagedata fileref="images/stylesheet-scrollbar1.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>The scroll bar above has been styled in
                                    aquamarine with a solid grey border.</db:para>
         <db:programlisting>QScrollBar:horizontal { border: 2px solid grey; background:
                                        #32CC99; height:
                                        15px; margin:
                                        0px20px020px; } QScrollBar::handle:horizontal {
                                    background: white; min-width: 20px;
                                    } QScrollBar::add-line:horizontal { border:
                                        2px solid grey;
                                    background: #32CC99;
                                    width: 20px;
                                        subcontrol-position:
                                    right; subcontrol-origin: margin; } QScrollBar::sub-line:horizontal { border: 2px solid grey; background:
                                        #32CC99; width:
                                        20px;
                                        subcontrol-position:
                                    left; subcontrol-origin:
                                    margin; }</db:programlisting>
         <db:para>The <db:link xlink:href="stylesheet-reference.html#left-arrow-sub">left-arrow</db:link> and <db:link xlink:href="stylesheet-reference.html#right-arrow-sub">right-arrow</db:link> have a solid grey border with a white
                                    background. As an alternative, you could also embed the image of
                                    an arrow.</db:para>
         <db:programlisting>QScrollBar:left-arrow:horizontal,QScrollBar::right-arrow:horizontal { border:
                                        2px solid grey; width:
                                        3px; height:
                                        3px; background:
                                    white; } QScrollBar::add-page:horizontal,QScrollBar::sub-page:horizontal { background:
                                    none; }</db:programlisting>
         <db:para>If you want the scroll buttons of the scroll bar to be
                                    placed together (instead of the edges) like on Mac OS X, you can
                                    use the following stylesheet:</db:para>
         <db:programlisting>QScrollBar:horizontal { border: 2px solid green; background:
                                    cyan; height: 15px;
                                    margin: 0px40px00px; } QScrollBar::handle:horizontal {
                                    background: gray; min-width: 20px;
                                    } QScrollBar::add-line:horizontal { background:
                                    blue; width: 16px;
                                        subcontrol-position:
                                    right; subcontrol-origin: margin; border: 2px solid black; } QScrollBar::sub-line:horizontal { background: magenta; width:
                                        16px;
                                        subcontrol-position:
                                    top right; subcontrol-origin: margin; border: 2px solid black; position: absolute; right:
                                        20px; } QScrollBar:left-arrow:horizontal,QScrollBar::right-arrow:horizontal { width:
                                        3px; height:
                                        3px; background: pink;
                                    } QScrollBar::add-page:horizontal,QScrollBar::sub-page:horizontal { background:
                                    none; }</db:programlisting>
         <db:para>The scroll bar using the above stylesheet looks like
                                    this:</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:imageobject>
                  <db:imagedata fileref="images/stylesheet-scrollbar2.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>To
                                    customize a vertical scroll bar use a style sheet similar to the
                                    following:</db:para>
         <db:programlisting>QScrollBar:vertical { border:
                                        2px solid grey;
                                    background: #32CC99;
                                    width: 15px; margin:
                                        22px022px0; } QScrollBar::handle:vertical { background:
                                    white; min-height:
                                        20px; } QScrollBar::add-line:vertical { border:
                                        2px solid grey;
                                    background: #32CC99;
                                    height: 20px;
                                        subcontrol-position:
                                    bottom; subcontrol-origin: margin; } QScrollBar::sub-line:vertical { border: 2px solid grey; background: #32CC99; height: 20px; subcontrol-position: top;
                                        subcontrol-origin:
                                    margin; } QScrollBar::up-arrow:vertical,QScrollBar::down-arrow:vertical { border:
                                        2px solid grey; width:
                                        3px; height:
                                        3px; background:
                                    white; } QScrollBar::add-page:vertical,QScrollBar::sub-page:vertical { background:
                                    none; }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QSizeGrip</db:title>
         <db:para><db:code><db:link xlink:href="qsizegrip.html">QSizeGrip</db:link></db:code> is usually
                                    styled by just setting an image.</db:para>
         <db:programlisting>QSizeGrip {
                                    image: url(:/images/sizegrip.png); width: 16px; height: 16px; }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QSlider</db:title>
         <db:para>You can style horizontal slider as below:</db:para>
         <db:programlisting>QSlider::groove:horizontal { border: 1px solid #999999; height: 8px; /* the groove expands to the size of the slider by default.
                                        by giving it a height, it has a fixed size */
                                    background: qlineargradient(x1:0,
                                        y1:0, x2:0,
                                        y2:1, stop:0#B1B1B1, stop:1
                                        #c4c4c4); margin: 2px0; } QSlider::handle:horizontal { background:
                                        qlineargradient(x1:0,
                                        y1:0, x2:1,
                                        y2:1, stop:0#b4b4b4, stop:1
                                        #8f8f8f); border: 1px solid #5c5c5c; width: 18px; margin: -2px0; /* handle is placed by default on the
                                        contents rect of the groove. Expand outside the groove
                                        */ border-radius: 3px; }</db:programlisting>
         <db:para>If you want to change the color of the slider parts before
                                    and after the handle, you can use the add-page and sub-page
                                    subcontrols. For example, for a vertical slider:</db:para>
         <db:programlisting>QSlider::groove:vertical { background: red; position:
                                    absolute; /* absolutely position 4px
                                        from the left and right of the widget. setting margins on
                                        the widget should work too... */ left:
                                        4px; right: 4px; } QSlider::handle:vertical { height: 10px; background: green; margin:
                                        0-4px; /* expand outside the groove */ } QSlider::add-page:vertical { background: white; } QSlider::sub-page:vertical { background: pink; }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QSpinBox</db:title>
         <db:para><db:code><db:link xlink:href="qspinbox.html">QSpinBox</db:link></db:code> can be
                                    completely customized as below (the style sheet has commentary
                                    inline):</db:para>
         <db:programlisting>QSpinBox {
                                        padding-right:
                                        15px; /* make room for the arrows */
                                        border-image:
                                        url(:/images/frame.png) 4;
                                        border-width:
                                        3; } QSpinBox::up-button { subcontrol-origin: border; subcontrol-position: top right;
                                        /* position at the top right
                                        corner */ width: 16px; /* 16 + 2*1px
                                        border-width = 15px padding + 3px parent border
                                        */ border-image: url(:/images/spinup.png) 1;
                                        border-width:
                                        1px; } QSpinBox::up-button:hover { border-image: url(:/images/spinup_hover.png) 1;
                                    } QSpinBox::up-button:pressed { border-image: url(:/images/spinup_pressed.png) 1; } QSpinBox::up-arrow { image: url(:/images/up_arrow.png); width: 7px; height: 7px; } QSpinBox::up-arrow:disabled,QSpinBox::up-arrow:off { /* off
                                        state when value is max */ image:
                                        url(:/images/up_arrow_disabled.png); } QSpinBox::down-button { subcontrol-origin: border; subcontrol-position: bottom right;
                                        /* position at bottom right
                                        corner */ width: 16px; border-image: url(:/images/spindown.png) 1;
                                        border-width:
                                        1px; border-top-width: 0; } QSpinBox::down-button:hover { border-image: url(:/images/spindown_hover.png) 1;
                                    } QSpinBox::down-button:pressed {
                                        border-image:
                                        url(:/images/spindown_pressed.png) 1;
                                    } QSpinBox::down-arrow { image: url(:/images/down_arrow.png); width: 7px; height: 7px; } QSpinBox::down-arrow:disabled,QSpinBox::down-arrow:off { /* off state when value in min
                                        */ image: url(:/images/down_arrow_disabled.png); }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QSplitter</db:title>
         <db:para>A <db:code><db:link xlink:href="qsplitter.html">QSplitter</db:link></db:code> derives
                                    from a <db:code><db:link xlink:href="qframe.html">QFrame</db:link></db:code> and hence can
                                    be styled like a <db:code><db:link xlink:href="qframe.html">QFrame</db:link></db:code>. The
                                    grip or the handle is customized using the <db:link xlink:href="stylesheet-reference.html#handle-sub">::handle</db:link> subcontrol.</db:para>
         <db:programlisting>QSplitter::handle { image: url(images/splitter.png); } QSplitter::handle:horizontal { width:
                                        2px; } QSplitter::handle:vertical { height:
                                        2px; } QSplitter::handle:pressed {
                                        url(images/splitter_pressed.png); }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QStatusBar</db:title>
         <db:para>We can provide a background for the status bar and a border
                                    for items inside the status bar as follows:</db:para>
         <db:programlisting>QStatusBar {
                                    background: brown; } QStatusBar::item { border: 1px solid red; border-radius: 3px; }</db:programlisting>
         <db:para>Note that widgets that have been added to the <db:code><db:link xlink:href="qstatusbar.html">QStatusBar</db:link></db:code> can be styled
                                    using the descendant declaration (i.e)</db:para>
         <db:programlisting>QStatusBarQLabel { border: 3px solid white; }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QTabWidget and QTabBar</db:title>
         <db:informalfigure>
            <db:mediaobject>
               <db:imageobject>
                  <db:imagedata fileref="images/tabWidget-stylesheet1.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>For the screenshot above, we need a
                                    stylesheet as follows:</db:para>
         <db:programlisting>QTabWidget::pane { /* The tab
                                        widget frame */ border-top: 2px solid #C2C7CB; } QTabWidget::tab-bar { left: 5px; /* move to the
                                        right by 5px */ } /*
                                        Style the tab using the tab sub-control. Note that it reads
                                        QTabBar _not_ QTabWidget */QTabBar::tab { background: qlineargradient(x1:
                                        0, y1: 0, x2:
                                        0, y2: 1,
                                    stop: 0#E1E1E1, stop: 0.4
                                        #DDDDDD, stop: 0.5#D8D8D8, stop: 1.0
                                        #D3D3D3); border: 2px solid #C4C4C3; border-bottom-color: #C2C7CB; /* same as the pane color */
                                        border-top-left-radius: 4px; border-top-right-radius: 4px;
                                        min-width:
                                        8ex; padding:
                                        2px; } QTabBar::tab:selected,QTabBar::tab:hover { background: qlineargradient(x1:
                                        0, y1: 0, x2:
                                        0, y2: 1,
                                    stop: 0#fafafa, stop: 0.4
                                        #f4f4f4, stop: 0.5#e7e7e7, stop: 1.0
                                        #fafafa); } QTabBar::tab:selected { border-color: #9B9B9B; border-bottom-color: #C2C7CB; /* same as pane color
                                        */ } QTabBar::tab:!selected { margin-top: 2px; /* make
                                        non-selected tabs look smaller */ }</db:programlisting>
         <db:para>Often we require the tabs to overlap to look like
                                    below:</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:imageobject>
                  <db:imagedata fileref="images/tabWidget-stylesheet2.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>For a tab widget that looks like above, we
                                    make use of <db:link xlink:href="http://www.communitymx.com/content/article.cfm?cid=B0029">negative margins</db:link>. The resulting stylesheet looks
                                    like this:</db:para>
         <db:programlisting>QTabWidget::pane { /* The tab
                                        widget frame */ border-top: 2px solid #C2C7CB; } QTabWidget::tab-bar { left: 5px; /* move to the
                                        right by 5px */ } /*
                                        Style the tab using the tab sub-control. Note that it reads
                                        QTabBar _not_ QTabWidget */QTabBar::tab { background: qlineargradient(x1:
                                        0, y1: 0, x2:
                                        0, y2: 1,
                                    stop: 0#E1E1E1, stop: 0.4
                                        #DDDDDD, stop: 0.5#D8D8D8, stop: 1.0
                                        #D3D3D3); border: 2px solid #C4C4C3; border-bottom-color: #C2C7CB; /* same as the pane color */
                                        border-top-left-radius: 4px; border-top-right-radius: 4px;
                                        min-width:
                                        8ex; padding:
                                        2px; } QTabBar::tab:selected,QTabBar::tab:hover { background: qlineargradient(x1:
                                        0, y1: 0, x2:
                                        0, y2: 1,
                                    stop: 0#fafafa, stop: 0.4
                                        #f4f4f4, stop: 0.5#e7e7e7, stop: 1.0
                                        #fafafa); } QTabBar::tab:selected { border-color: #9B9B9B; border-bottom-color: #C2C7CB; /* same as pane color
                                        */ } QTabBar::tab:!selected { margin-top: 2px; /* make
                                        non-selected tabs look smaller */ } /* make use of negative margins for
                                        overlapping tabs */QTabBar::tab:selected { /*
                                        expand/overlap to the left and right by 4px */
                                        margin-left:
                                        -4px; margin-right: -4px; } QTabBar::tab:first:selected { margin-left: 0; /*
                                        the first selected tab has nothing to overlap with on the
                                        left */ } QTabBar::tab:last:selected { margin-right: 0; /*
                                        the last selected tab has nothing to overlap with on the
                                        right */ } QTabBar::tab:only-one { margin: 0; /* if there is
                                        only one tab, we don't want overlapping margins
                                        */ }</db:programlisting>
         <db:para>To move the tab bar to the center (as below), we require the
                                    following stylesheet:</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:imageobject>
                  <db:imagedata fileref="images/tabWidget-stylesheet3.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:programlisting>QTabWidget::pane { /* The tab
                                        widget frame */ border-top: 2px solid #C2C7CB; position: absolute; top: -0.5em; } QTabWidget::tab-bar { alignment: center; } /* Style the tab using the tab sub-control.
                                        Note that it reads QTabBar _not_ QTabWidget */QTabBar::tab { background: qlineargradient(x1:
                                        0, y1: 0, x2:
                                        0, y2: 1,
                                    stop: 0#E1E1E1, stop: 0.4
                                        #DDDDDD, stop: 0.5#D8D8D8, stop: 1.0
                                        #D3D3D3); border: 2px solid #C4C4C3; border-bottom-color: #C2C7CB; /* same as the pane color */
                                        border-top-left-radius: 4px; border-top-right-radius: 4px;
                                        min-width:
                                        8ex; padding:
                                        2px; } QTabBar::tab:selected,QTabBar::tab:hover { background: qlineargradient(x1:
                                        0, y1: 0, x2:
                                        0, y2: 1,
                                    stop: 0#fafafa, stop: 0.4
                                        #f4f4f4, stop: 0.5#e7e7e7, stop: 1.0
                                        #fafafa); } QTabBar::tab:selected { border-color: #9B9B9B; border-bottom-color: #C2C7CB; /* same as pane color
                                        */ }</db:programlisting>
         <db:para>The tear indicator and the scroll buttons can be further
                                    customized as follows:</db:para>
         <db:programlisting>QTabBar::tear { image: url(tear_indicator.png); } QTabBar::scroller { /* the
                                        width of the scroll buttons */ width: 20px; } QTabBarQToolButton { /* the scroll buttons are tool buttons
                                        */ border-image: url(scrollbutton.png) 2; border-width: 2px; } QTabBarQToolButton::right-arrow { /* the arrow mark in the tool buttons
                                        */ image: url(rightarrow.png); } QTabBarQToolButton::left-arrow { image:
                                        url(leftarrow.png);
                                    }</db:programlisting>
         <db:para>Since Qt 4.6 the close button can be customized as
                                    follow:</db:para>
         <db:programlisting>QTabBar::close-button { image: url(close.png) subcontrol-position: left; } QTabBar::close-button:hover { image: url(close-hover.png) }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QTableView</db:title>
         <db:para>Suppose we'd like our selected item in <db:code><db:link xlink:href="qtableview.html">QTableView</db:link></db:code> to have bubblegum
                                    pink fade to white as its background.</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:imageobject>
                  <db:imagedata fileref="images/tableWidget-stylesheet.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>This is possible with the <db:link xlink:href="stylesheet-reference.html#selection-background-color-prop">selection-background-color</db:link> property and the syntax
                                    required is:</db:para>
         <db:programlisting>QTableView {
                                        selection-background-color: qlineargradient(x1: 0, y1: 0, x2:
                                        0.5, y2: 0.5,
                                    stop: 0#FF92BB, stop: 1
                                        white); }</db:programlisting>
         <db:para>The corner widget can be customized using the following
                                    style sheet</db:para>
         <db:programlisting>QTableViewQTableCornerButton::section { background: red;
                                    border: 2px outset red;
                                    }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QToolBar</db:title>
         <db:para>The background and the handle of a <db:code><db:link xlink:href="qtoolbar.html">QToolBar</db:link></db:code> is customized as
                                    below:</db:para>
         <db:programlisting>QToolBar {
                                    background: red; spacing: 3px; /* spacing
                                        between items in the tool bar */ } QToolBar::handle { image: url(handle.png); }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QToolBox</db:title>
         <db:para>The tabs of the <db:code><db:link xlink:href="qtoolbox.html">QToolBox</db:link></db:code> are customized using the 'tab'
                                    subcontrol.</db:para>
         <db:programlisting>QToolBox::tab { background: qlineargradient(x1:
                                        0, y1: 0, x2:
                                        0, y2: 1,
                                    stop: 0#E1E1E1, stop: 0.4
                                        #DDDDDD, stop: 0.5#D8D8D8, stop: 1.0
                                        #D3D3D3); border-radius: 5px; color: darkgray; } QToolBox::tab:selected { /*
                                        italicize selected tabs */ font: italic; color:
                                    white; }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QToolButton</db:title>
         <db:para>There are three types of QToolButtons.</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>The <db:code><db:link xlink:href="qtoolbutton.html">QToolButton</db:link></db:code> has no menu. In this case, the
                                            <db:code><db:link xlink:href="qtoolbutton.html">QToolButton</db:link></db:code> is
                                        styled exactly like <db:code><db:link xlink:href="qpushbutton.html">QPushButton</db:link></db:code>. See <db:link xlink:href="stylesheet-examples.html#customizing-qpushbutton">Customizing QPushButton</db:link> for an
                                        example.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>The <db:code><db:link xlink:href="qtoolbutton.html">QToolButton</db:link></db:code> has a menu and has the <db:code><db:link xlink:href="qtoolbutton.html#popupMode-prop">QToolButton::popupMode</db:link></db:code> set to <db:code><db:link xlink:href="qtoolbutton.html#ToolButtonPopupMode-enum">QToolButton::DelayedPopup</db:link></db:code> or <db:code><db:link xlink:href="qtoolbutton.html#ToolButtonPopupMode-enum">QToolButton::InstantPopup</db:link></db:code>. In this case, the
                                            <db:code><db:link xlink:href="qtoolbutton.html">QToolButton</db:link></db:code> is
                                        styled exactly like a <db:code><db:link xlink:href="qpushbutton.html">QPushButton</db:link></db:code> with a menu. See <db:link xlink:href="stylesheet-examples.html#customizing-qpushbutton">Customizing QPushButton</db:link> for an example of the
                                        usage of the menu-indicator pseudo state.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>The <db:code><db:link xlink:href="qtoolbutton.html">QToolButton</db:link></db:code> has its <db:code><db:link xlink:href="qtoolbutton.html#popupMode-prop">QToolButton::popupMode</db:link></db:code> set to <db:code><db:link xlink:href="qtoolbutton.html#ToolButtonPopupMode-enum">QToolButton::MenuButtonPopup</db:link></db:code>. In this case, we
                                        style it as follows:</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:programlisting>QToolButton
                                    { /* all types of tool button
                                        */ border: 2px solid #8f8f91; border-radius: 6px; background-color: qlineargradient(x1: 0, y1: 0, x2:
                                        0, y2: 1,
                                    stop: 0#f6f7fa, stop: 1
                                        #dadbde); } QToolButton[popupMode="1"] {
                                        /* only for MenuButtonPopup
                                        */ padding-right: 20px; /* make way
                                        for the popup button */ } QToolButton:pressed {
                                        background-color:
                                    qlineargradient(x1: 0, y1:
                                        0, x2: 0, y2:
                                        1, stop: 0#dadbde, stop: 1
                                        #f6f7fa); } /* the
                                        subcontrols below are used only in the MenuButtonPopup mode
                                        */QToolButton::menu-button { border: 2px solid gray; border-top-right-radius: 6px;
                                        border-bottom-right-radius: 6px;
                                        /* 16px width + 4px for border =
                                        20px allocated above */ width: 16px; } QToolButton::menu-arrow { image: url(downarrow.png); } QToolButton::menu-arrow:open { top: 1px; left: 1px; /* shift it a bit */ }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QToolTip</db:title>
         <db:para><db:code><db:link xlink:href="qtooltip.html">QToolTip</db:link></db:code> is customized
                                    exactly like a <db:code><db:link xlink:href="qlabel.html">QLabel</db:link></db:code>. In
                                    addition, for platforms that support it, the opacity property
                                    may be set to adjust the opacity.</db:para>
         <db:para>For example,</db:para>
         <db:programlisting>QToolTip {
                                    border: 2px solid
                                    darkkhaki; padding: 5px;
                                        border-radius:
                                        3px; opacity:
                                        200; }</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Customizing QTreeView</db:title>
         <db:para>The background color of alternating rows can be customized
                                    using the following style sheet:</db:para>
         <db:programlisting>QTreeView {
                                        alternate-background-color: yellow; }</db:programlisting>
         <db:para>To provide a special background when you hover over items,
                                    we can use the <db:link xlink:href="stylesheet-reference.html#item-sub">::item</db:link> subcontrol. For example,</db:para>
         <db:programlisting>QTreeView {
                                        show-decoration-selected: 1; } QTreeView::item { border: 1px solid #d9d9d9; border-top-color: transparent; border-bottom-color: transparent; }
                                        QTreeView::item:hover { background:
                                    qlineargradient(x1: 0, y1:
                                        0, x2: 0, y2:
                                        1, stop: 0#e7effd, stop: 1
                                        #cbdaf1); border: 1px solid #bfcde4; } QTreeView::item:selected { border: 1px solid #567dbc; } QTreeView::item:selected:active{
                                    background: qlineargradient(x1: 0, y1:
                                        0, x2: 0, y2:
                                        1, stop: 0#6ea1f1, stop: 1
                                        #567dbc); } QTreeView::item:selected:!active { background: qlineargradient(x1:
                                        0, y1: 0, x2:
                                        0, y2: 1,
                                    stop: 0#6b9be8, stop: 1
                                        #577fbf); }</db:programlisting>
         <db:para>The branches of a <db:code><db:link xlink:href="qtreeview.html">QTreeView</db:link></db:code> are styled using the <db:link xlink:href="stylesheet-reference.html#branch-sub">::branch</db:link> subcontrol. The following stylesheet
                                    color codes the various states when drawing a branch.</db:para>
         <db:programlisting>QTreeView::branch { background: palette(base); }
                                        QTreeView::branch:has-siblings:!adjoins-item { background: cyan; }
                                        QTreeView::branch:has-siblings:adjoins-item { background: red; }
                                        QTreeView::branch:!has-children:!has-siblings:adjoins-item { background: blue; } QTreeView::branch:closed:has-children:has-siblings { background: pink; }
                                        QTreeView::branch:has-children:!has-siblings:closed { background: gray; }
                                        QTreeView::branch:open:has-children:has-siblings { background:
                                    magenta; } QTreeView::branch:open:has-children:!has-siblings { background: green; }</db:programlisting>
         <db:para>Colorful, though it is, a more useful example can be made
                                    using the following images:</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:inlinemediaobject>
                           <db:imageobject>
                              <db:imagedata fileref="images/stylesheet-vline.png"/>
                           </db:imageobject>
                        </db:inlinemediaobject>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:inlinemediaobject>
                           <db:imageobject>
                              <db:imagedata fileref="images/stylesheet-branch-more.png"/>
                           </db:imageobject>
                        </db:inlinemediaobject>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:inlinemediaobject>
                           <db:imageobject>
                              <db:imagedata fileref="images/stylesheet-branch-end.png"/>
                           </db:imageobject>
                        </db:inlinemediaobject>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:inlinemediaobject>
                           <db:imageobject>
                              <db:imagedata fileref="images/stylesheet-branch-closed.png"/>
                           </db:imageobject>
                        </db:inlinemediaobject>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:inlinemediaobject>
                           <db:imageobject>
                              <db:imagedata fileref="images/stylesheet-branch-open.png"/>
                           </db:imageobject>
                        </db:inlinemediaobject>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>vline.png</db:para>
                  </db:td>
                  <db:td>
                     <db:para>branch-more.png</db:para>
                  </db:td>
                  <db:td>
                     <db:para>branch-end.png</db:para>
                  </db:td>
                  <db:td>
                     <db:para>branch-closed.png</db:para>
                  </db:td>
                  <db:td>
                     <db:para>branch-open.png</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:programlisting>QTreeView::branch:has-siblings:!adjoins-item { border-image: url(vline.png) 0;
                                    } QTreeView::branch:has-siblings:adjoins-item { border-image: url(branch-more.png) 0; } QTreeView::branch:!has-children:!has-siblings:adjoins-item { border-image: url(branch-end.png) 0; }
                                        QTreeView::branch:has-children:!has-siblings:closed,QTreeView::branch:closed:has-children:has-siblings { border-image: none; image:
                                        url(branch-closed.png); } QTreeView::branch:open:has-children:!has-siblings,QTreeView::branch:open:has-children:has-siblings { border-image: none; image:
                                        url(branch-open.png); }</db:programlisting>
         <db:para>The resulting tree view looks like this:</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:imageobject>
                  <db:imagedata fileref="images/stylesheet-treeview.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
      </db:section>
      <db:section>
         <db:title>See Also</db:title>
         <db:simplelist type="vert">
            <db:member>
               <db:link xlink:href="qtwidgets-widgets-stylesheet-example.html">Style Sheet
                                    Example</db:link>
            </db:member>
            <db:member>
               <db:link xlink:href="qtgui/richtext-html-subset.html">Supported HTML Subset</db:link>
            </db:member>
            <db:member><db:code><db:link xlink:href="qstyle.html">QStyle</db:link></db:code></db:member>
         </db:simplelist>
      </db:section>
   </db:section>
   <db:section xml:id="common-mistakes">
      <db:title>Common Mistakes</db:title>
      <db:para>This section lists some common mistakes when using
                                    stylesheets.</db:para>
      <db:section>
         <db:title>QPushButton and images</db:title>
         <db:para>When styling a <db:code><db:link xlink:href="qpushbutton.html">QPushButton</db:link></db:code>, it is often desirable to use an image
                                    as the button graphic. It is common to try the <db:link xlink:href="stylesheet-reference.html#background-image-prop">background-image</db:link> property, but this has a number
                                    of drawbacks: For instance, the background will often appear
                                    hidden behind the button decoration, because it is not
                                    considered a background. In addition, if the button is resized,
                                    the entire background will be stretched or tiled, which does not
                                    always look good.</db:para>
         <db:para>It is better to use the <db:link xlink:href="stylesheet-reference.html#border-image-prop">border-image</db:link> property, as it will always display
                                    the image, regardless of the background (you can combine it with
                                    a background if it has alpha values in it), and it has special
                                    settings to deal with button resizing.</db:para>
         <db:para>Consider the following snippet:</db:para>
         <db:programlisting>QPushButton { color: grey;
                                        border-image:
                                        url(/home/kamlie/code/button.png) 310310; border-top: 3px transparent; border-bottom: 3px transparent; border-right: 10px transparent;
                                        border-left:
                                        10px transparent;
                                    }</db:programlisting>
         <db:para>This will produce a button looking like this:</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:imageobject>
                  <db:imagedata fileref="images/stylesheet-border-image-normal.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>The numbers after the url gives the top,
                                    right, bottom and left number of pixels, respectively. These
                                    numbers correspond to the border and should not stretch when the
                                    size changes. Whenever you resize the button, the middle part of
                                    the image will stretch in both directions, while the pixels
                                    specified in the stylesheet will not. This makes the borders of
                                    the button look more natural, like this:</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:inlinemediaobject>
                           <db:imageobject>
                              <db:imagedata fileref="images/stylesheet-border-image-stretched.png"/>
                           </db:imageobject>
                        </db:inlinemediaobject>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>With borders</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:inlinemediaobject>
                           <db:imageobject>
                              <db:imagedata fileref="images/stylesheet-border-image-wrong.png"/>
                           </db:imageobject>
                        </db:inlinemediaobject>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>Without borders</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section>
         <db:title>See Also</db:title>
         <db:simplelist type="vert">
            <db:member>
               <db:link xlink:href="qtwidgets-widgets-stylesheet-example.html">Style Sheet
                                    Example</db:link>
            </db:member>
            <db:member>
               <db:link xlink:href="qtgui/richtext-html-subset.html">Supported HTML Subset</db:link>
            </db:member>
            <db:member><db:code><db:link xlink:href="qstyle.html">QStyle</db:link></db:code></db:member>
         </db:simplelist>
      </db:section>
   </db:section>
</db:article>
