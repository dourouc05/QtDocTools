<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0"
    xml:lang="en">
    <db:title>ListModel QML Type</db:title>
    <db:classsynopsis>
        <db:ooclass>
            <db:classname>ListModel</db:classname>
        </db:ooclass>
        <db:classsynopsisinfo role="import"> import
            QtQml.Models 2.1</db:classsynopsisinfo>
    </db:classsynopsis>
    <db:section>
        <db:title>Detailed Description</db:title>
        <db:para>The <db:link xlink:href="qml-qtqml-models-listmodel.html">ListModel</db:link> is a simple container of <db:link xlink:href="qml-qtqml-models-listelement.html">ListElement</db:link>
            definitions, each containing data roles. The contents can be defined
            dynamically, or explicitly in QML.</db:para>
        <db:para>The number of elements in the model can be obtained from its
            <db:link xlink:href="qml-qtqml-models-listmodel.html#count-prop">count</db:link> property. A number of familiar methods are also
            provided to manipulate the contents of the model, including <db:link xlink:href="qml-qtqml-models-listmodel.html#append-method">append()</db:link>, <db:link xlink:href="qml-qtqml-models-listmodel.html#insert-method">insert()</db:link>, <db:link xlink:href="qml-qtqml-models-listmodel.html#move-method">move()</db:link>, <db:link xlink:href="qml-qtqml-models-listmodel.html#remove-method">remove()</db:link> and <db:link xlink:href="qml-qtqml-models-listmodel.html#set-method">set()</db:link>. These methods accept dictionaries as their
            arguments; these are translated to <db:link xlink:href="qml-qtqml-models-listelement.html">ListElement</db:link>
            objects by the model.</db:para>
        <db:para>Elements can be manipulated via the model using the <db:link xlink:href="qml-qtqml-models-listmodel.html#setProperty-method">setProperty()</db:link> method, which allows the roles of the
            specified element to be set and changed.</db:para>
        <db:section>
            <db:title>Example Usage</db:title>
            <db:para>The following example shows a <db:link xlink:href="qml-qtqml-models-listmodel.html">ListModel</db:link>
                containing three elements, with the roles "name" and
                "cost".</db:para>
            <db:programlisting>import QtQuick 2.0 ListModel { id: fruitModelListElement { name: "Apple"cost: 2.45 } ListElement { name: "Orange"cost: 3.25 } ListElement { name: "Banana"cost: 1.95 } }</db:programlisting>
            <db:para>Roles (properties) in each element must begin with a lower-case
                letter and should be common to all elements in a model. The <db:link xlink:href="qml-qtqml-models-listelement.html">ListElement</db:link>
                documentation provides more guidelines for how elements should be
                defined.</db:para>
            <db:para>Since the example model contains an <db:code>id</db:code>
                property, it can be referenced by views, such as the <db:link xlink:href="qtquick/qml-qtquick-listview.html">ListView</db:link> in
                this example:</db:para>
            <db:programlisting>import QtQuick 2.0 Rectangle { width: 200;
                height: 200ListModel { id: fruitModel
                ... } Component { id: fruitDelegateRow { spacing: 10Text { text: name }
                Text { text: '$'+cost } } } ListView { anchors.fill: parentmodel: fruitModeldelegate: fruitDelegate } }</db:programlisting>
            <db:para>It is possible for roles to contain list data. In the following
                example we create a list of fruit attributes:</db:para>
            <db:programlisting>ListModel { id: fruitModelListElement { name: "Apple"cost: 2.45attributes: [ ListElement { description: "Core" }, ListElement { description: "Deciduous" } ] } ListElement { name: "Orange"cost: 3.25attributes: [ ListElement { description: "Citrus" } ] } ListElement { name: "Banana"cost: 1.95attributes: [ ListElement { description: "Tropical" }, ListElement { description: "Seedless" } ] } }</db:programlisting>
            <db:para>The delegate displays all the fruit attributes:</db:para>
            <db:programlisting>Component { id: fruitDelegateItem { width: 200;
                height: 50Text { id: nameField;
                text: name } Text { text: '$'+cost; anchors.left: nameField.right
                } Row
                { anchors.top: nameField.bottomspacing: 5Text { text: "Attributes:" } Repeater { model: attributesText { text: description } } } } }</db:programlisting>
        </db:section>
        <db:section>
            <db:title>Modifying List Models</db:title>
            <db:para>The content of a <db:link xlink:href="qml-qtqml-models-listmodel.html">ListModel</db:link> may be created and modified using the
                <db:link xlink:href="qml-qtqml-models-listmodel.html#clear-method">clear()</db:link>, <db:link xlink:href="qml-qtqml-models-listmodel.html#append-method">append()</db:link>, <db:link xlink:href="qml-qtqml-models-listmodel.html#set-method">set()</db:link>, <db:link xlink:href="qml-qtqml-models-listmodel.html#insert-method">insert()</db:link> and <db:link xlink:href="qml-qtqml-models-listmodel.html#setProperty-method">setProperty()</db:link> methods. For example:</db:para>
            <db:programlisting>Component { id: fruitDelegateItem { width: 200;
                height: 50Text { text: name }
                Text { text: '$'+cost; anchors.right: parent.right }
                // Double the price when
                clicked.MouseArea { anchors.fill: parentonClicked: fruitModel.setProperty(index, "cost", cost*2) } } }</db:programlisting>
            <db:para>Note that when creating content dynamically the set of available
                properties cannot be changed once set. Whatever properties are first
                added to the model are the only permitted properties in the
                model.</db:para>
        </db:section>
        <db:section>
            <db:title>Using
                Threaded List Models with WorkerScript</db:title>
            <db:para>
                <db:link xlink:href="qml-qtqml-models-listmodel.html">ListModel</db:link> can be used together with <db:link xlink:href="qml-workerscript.html">WorkerScript</db:link> access a list
                model from multiple threads. This is useful if list modifications
                are synchronous and take some time: the list operations can be moved
                to a different thread to avoid blocking of the main GUI
                thread.</db:para>
            <db:para>Here is an example that uses <db:link xlink:href="qml-workerscript.html">WorkerScript</db:link> to
                periodically append the current time to a list model:</db:para>
            <db:programlisting>Timer { id: timerinterval: 2000; repeat: truerunning: truetriggeredOnStart: trueonTriggered: { var msg = {'action': 'appendCurrentTime', 'model':
                listModel}; worker.sendMessage(msg); } }</db:programlisting>
            <db:para>The included file, <db:code>dataloader.js</db:code>, looks
                like this:</db:para>
            <db:programlisting>WorkerScript.onMessage=function(msg) { if (msg.action=='appendCurrentTime') { var
                data = {'time': new
                Date().toTimeString()}; msg.model.append(data);
                msg.model.sync();
                // updates the changes to the
                list } }</db:programlisting>
            <db:para>The timer in the main example sends messages to the worker
                script by calling <db:link xlink:href="qml-workerscript.html#sendMessage-method">WorkerScript::sendMessage()</db:link>. When this message is
                received, <db:code>WorkerScript.onMessage()</db:code> is invoked
                in <db:code>dataloader.js</db:code>, which appends the current
                time to the list model.</db:para>
            <db:para>Note the call to <db:link xlink:href="qml-qtqml-models-listmodel.html#sync-method">sync()</db:link> from the external thread. You must call <db:link xlink:href="qml-qtqml-models-listmodel.html#sync-method">sync()</db:link> or else the changes made to the list from that
                thread will not be reflected in the list model in the main
                thread.</db:para>
            <db:section>
                <db:title>See Also</db:title>
                <db:simplelist type="vert">
                    <db:member>
                        <db:link xlink:href="qtquick/qtquick-modelviewsdata-modelview.html#qml-data-models">Data Models</db:link>
                    </db:member>
                    <db:member>
                        <db:link xlink:href="qtquick/qtquick-threading-example.html">Qt Quick Examples
                            - Threading</db:link>
                    </db:member>
                    <db:member>
                        <db:link xlink:href="qtqml-index.html">Qt
                            QML</db:link>
                    </db:member>
                </db:simplelist>
            </db:section>
        </db:section>
    </db:section>
</db:article>
