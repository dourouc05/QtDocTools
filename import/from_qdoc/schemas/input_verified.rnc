namespace html = "http://www.w3.org/1999/xhtml"
namespace s = "http://www.ascc.net/xml/schematron"


## Root. 
start =
    element html:html {
        attribute lang { xsd:NCName },
        element html:head {
            element html:meta {
                # Ignored for the transformation. 
                attribute content { text },
                attribute http-equiv { xsd:NCName }
            },
            element html:title { text },
            element html:link {
                # Ignored for the transformation. 
                attribute href { text },
                attribute rel { xsd:NCName },
                attribute type { text }
            }
        },
        element html:body {
            # qtdocheader (partly used) then footer. 
            element html:div {
                attribute class { "header" },
                attribute id { "qtdocheader" },
                element html:div {
                    attribute class { "main" },
                    element html:div {
                        # Ignored for the transformation. 
                        attribute class { "main-rounded" },
                        \div+
                    },
                    element html:div {
                        attribute class { "content" },
                        element html:div {
                            attribute class { "line" },
                            element html:div {
                                attribute class { "content mainContent" },
                                actualContent
                            }
                        }
                    }
                }
            },
            element html:div {
                # Ignored for the transformation.
                attribute class { "footer" },
                p
            }
        }
    }

## Base elements.
content = p | pre | ul | ol | table
anchor =
    element html:a {
        attribute name { text },
        empty
    }
table =
    element html:div {
        attribute class { "table" },
        html_table
    }
# Titles. 
h_html =
    attribute id { text }?,
    text
h6_html = element html:h6 { h_html }
h5_html = element html:h5 { h_html }
h4_html = element html:h4 { h_html }
h3_html = element html:h3 { h_html }
h2_html = element html:h2 { h_html }
h6 = anchor, h6_html, content*
h5 = anchor, h5_html, content*, h6*
h4 = anchor, h4_html, content*, h5*
h3 = anchor, h3_html, content*, h4*
h2 = anchor, h2_html, content*, h3*

## Main parts of the content. 
actualContent =
    element html:div {
        # Ignored for the transformation. 
        attribute class { "sidebar" },
        \div+
    },
    # Title and subtitle. 
    element html:h1 {
        attribute class { "title" },
        text
    },
    element html:span {
        attribute class { "subtitle" },
        text
    }?,
    
    ## Actual content. 
    ## () For (obsolete too!) class pages, first a brief description, then summary tables (whose order is important). 
    (class_brief,
     class_summary?,
     # @TODO: check whether those files exist (unparsed-text-available() or document-available()). 
     class_relatedFiles?,
     class_summary_types?,
     class_summary_properties?, 
     class_summary_funcs,
     class_summary_statics?,
     class_summary_nonmems?)?,
    
    ## () Then the main description. 
    description?,
    seealso?,
    class_content?
# Class summary. 
class_brief = p
class_relatedFiles = ul
class_summary =
    element html:div {
        attribute class { "table" },
        element html:table {
            attribute class { "alignedsummary" },
            element html:tbody {
                # In this order: header to include, qmake addition, inherits?, inherited by?, first availability?. 
                element html:tr {
                    element html:td {
                        attribute class { text },
                        " Header:"
                    },
                    element html:td {
                        attribute class { text },
                        element html:span {
                            attribute class { "preprocessor" },
                            text
                        }
                    }
                },
                element html:tr {
                    element html:td {
                        attribute class { text },
                        " qmake:"
                    },
                    element html:td {
                        attribute class { text },
                        text
                    }
                },
                element html:tr {
                    element html:td {
                        attribute class { text },
                        " Inherits:"
                    },
                    element html:td {
                        attribute class { text },
                        (element html:a {
                             attribute href { text },
                             text
                         },
                         text)+
                    }
                }?,
                element html:tr {
                    element html:td {
                        attribute class { text },
                        " Inherited By:"
                    },
                    element html:td {
                        attribute class { text },
                        (element html:p {
                             (element html:a {
                                  attribute href { text },
                                  text
                              },
                              text)+
                         }
                         | (element html:a {
                                attribute href { text },
                                text
                            },
                            text)+)
                    }
                }?,
                element html:tr {
                    element html:td {
                        attribute class { text },
                        " Since:"
                    },
                    element html:td {
                        attribute class { text },
                        text
                    }
                }?
            }
        }
    }
class_summary_types =
    element html:a {
        attribute name { "public-types" }
    }?,
    element html:h2 {
        attribute id { "public-types" }?,
        "Public Types"
    },
    class_sub_divtable
class_summary_properties =
    element html:a {
        attribute name { "properties" }
    }?,
    element html:h2 {
        attribute id { "properties" }?,
        "Properties"
    },
    class_sub_divtable_props, 
    class_summary_properties_inherited?
class_summary_properties_inherited = 
    element html:ul {
        element html:li {
            attribute class { "fn" }, 
            text, 
            element html:a {
                attribute href { text }, 
                text
            }
        }+
    }
class_summary_funcs =
    element html:a {
        attribute name { "public-functions" }
    }?,
    element html:h2 {
        attribute id { "public-functions" }?,
        "Public Functions"
    },
    class_sub_divtable
class_summary_statics =
    element html:a {
        attribute name { "static-public-members" }
    }?,
    element html:h2 {
        attribute id { "static-public-members" }?,
        "Static Public Members"
    },
    class_sub_divtable
class_summary_nonmems =
    element html:a {
        attribute name { "related-non-members" }
    }?,
    element html:h2 {
        attribute id { "related-non-members" }?,
        "Related Non-Members"
    },
    class_sub_divtable
class_sub_divtable =
    element html:div {
        attribute class { "table" },
        element html:table {
            attribute class { "alignedsummary" },
            element html:tbody { tr+ }
        }
    }
class_sub_divtable_props =
    element html:div {
        attribute class { "table" },
        element html:table {
            attribute class { "propsummary" },
            element html:tbody { 
                element html:tr {
                    (element html:td {
                        attribute class { "topAlign" }, 
                        element html:ul {
                            element html:li {
                                attribute class { "fn" }, 
                                element html:b {
                                    element html:a {
                                        attribute href { text }, 
                                        text
                                    }
                                }, 
                                text
                            }+
                        }
                    })+
                }
            }
        }
    }
# Textual description (only content for concept pages, after a title for class pages -- 
# and the anchor comes before the <div> for classes, but after it for concepts). 
description = description_class | description_concept
description_class =
    element html:a {
        attribute name { "details" }
    },
    element html:div {
        attribute class { "descr" },
        element html:h2 {
            attribute id { "details" },
            "Detailed Description"
        },
        content*,
        h3*
    }
description_concept =
    element html:div {
        attribute class { "descr" },
        element html:a {
            attribute name { "details" }
        },
        content+,
        h2*
    }
# "See also" list of links.  
seealso =
    element html:p {
        element html:b { "See also " },
        (seealso_link | text)+
    }
seealso_link =
    element html:a {
        attribute href { text },
        text
    }
# Actual class content. Statics are merged with funcs. 
class_content = class_types?, class_funcs, class_nonmems?
class_types =
    element html:div {
        attribute class { "types" },
        element html:h2 { "Member Type Documentation" },
        (enum | typedef)*
    }
enum = enumWithoutFlags | enumWithFlags
# Complemented by Schematron. 
enumWithoutFlags =
    element html:h3 {
        attribute class { "fn" },
        attribute id { text },
        anchor,
        # The name of the enumeration (something like enum QLowEnergyCharacteristic::<span>PropertyType</span>). 
        enum_name
    },
    # The enumeration description: a paragraph, a table of matchings. 
    p+,
    enum_matchings,
    seealso?
enumWithFlags =
    element html:h3 {
        attribute class { "flags" },
        attribute id { text },
        anchor,
        # The name of the enumeration (something like enum QLowEnergyCharacteristic::<span>PropertyType</span>). 
        enum_name,
        # Flags (something like flags QLowEnergyCharacteristic::&#8203;<html:span class="name">PropertyTypes</html:span>). 
        (br, enum_name)?
    },
    # The enumeration description: a paragraph, a table of matchings, then something for the flags. 
    p+,
    enum_matchings,
    p+,
    seealso?
enum_name =
    text,
    element html:span {
        attribute class { "name" },
        text
    }
enum_matchings =
    element html:div {
        attribute class { "table" },
        element html:table {
            attribute class { "valuelist" },
            element html:tbody {
                (element html:tr {
                     attribute class { text }?,
                     attribute valign { text }?,
                     element html:th {
                         attribute class { "tblConst" },
                         "Constant"
                     },
                     element html:th {
                         attribute class { "tblval" },
                         "Value"
                     },
                     element html:th {
                         attribute class { "tbldscr" },
                         "Description"
                     }
                 },
                 element html:tr {
                     element html:td {
                         attribute class { text },
                         element html:code { text }
                     },
                     element html:td {
                         attribute class { text },
                         element html:code { text }
                     },
                     element html:td {
                         attribute class { text },
                         p_content
                     }
                 }+)
                | (element html:tr {
                       attribute class { text }?,
                       attribute valign { text }?,
                       element html:th {
                           attribute class { "tblConst" },
                           "Constant"
                       },
                       element html:th {
                           attribute class { "tblVal" },
                           "Value"
                       }
                   },
                   element html:tr {
                       element html:td {
                           attribute class { text },
                           element html:code { text }
                       },
                       element html:td {
                           attribute class { text },
                           element html:code { text }
                       }
                   }+)
            }
        }
    }
typedef = element html:span { empty }
# TODO! 
class_funcs =
    element html:div {
        attribute class { "func" },
        element html:h2 { "Member Function Documentation" },
        func*
    }
    | (element html:h2 { "Member Function Documentation" },
       func*)
func =
    element html:h3 {
        attribute class { "fn" },
        attribute id { text },
        element html:a {
            attribute name { text },
            empty
        },
        func_modifiers,
        func_return,
        func_name,
        func_params
    },
    content+
func_modifiers = element html:code { text }?
func_return = type
func_name =
    text,
    element html:span {
        attribute class { "name" },
        text
    }
func_params = text | (text, func_params_list, text)
func_params_list = (func_params_list_one, text?)*
func_params_list_one =
    text,
    (type,
     text?,
     element html:i { text },
     text)?
type = type_noTemplateAllowed, type_template?
type_template = text, type_noTemplateAllowed, text
type_noTemplateAllowed =
    text
    | element html:span {
          attribute class { "type" },
          (element html:a {
               attribute href { text },
               text
           }
           | text)
      }
class_nonmems =
    element html:div {
        attribute class { "relnonmem" },
        element html:h2 { "Related Non-Members" },
        nonmem+
    }
nonmem = nonmem_func | nonmem_typedef
nonmem_func =
    element html:h3 {
        attribute class { "fn" },
        attribute id { text },
        element html:a {
            attribute name { text },
            empty
        },
        func_modifiers,
        func_return,
        func_name,
        func_params
    },
    content+
nonmem_typedef =
    element html:h3 {
        attribute class { "fn" },
        attribute id { text },
        element html:a {
            attribute name { text },
            empty
        },
        text,
        func_name
    },
    content+

## HTML details. 
\div =
    element html:div {
        attribute class { text },
        attribute id { xsd:NCName }?,
        (element html:h1 {
             attribute class { xsd:NCName },
             text
         }?
         | span?
         | a
         | \div
         | p
         | pre
         | ul
         | element html:h2 {
               attribute id { xsd:NCName }?,
               text
           }
         | element html:h3 {
               attribute class { xsd:NCName }?,
               attribute id { xsd:NCName }?,
               (text | a | br | code | i | span)+
           }
         | html_table?)*
    }
html_table =
    element html:table {
        attribute class { xsd:NCName },
        element html:thead { tr }?,
        element html:tbody { tr+ }
    }
span =
    element html:span {
        # @TODO: enumerate the recognised classes. 
        attribute class { xsd:NCName },
        (text | a)+
    }
ul = element html:ul { li+ }
ol = element html:ul { li+ }
li =
    element html:li {
        attribute class { xsd:NCName }?,
        attribute id { xsd:NCName }?,
        (text | a | code | i | p | ul)+
    }
a =
    element html:a {
        attribute href { xsd:anyURI }?,
        attribute name { xsd:NCName }?,
        xsd:anyURI
    }
br = element html:br { empty }
code = element html:code { text }
i =
    element html:i { xsd:NCName }
    | element html:em { xsd:NCName }
p_content =
    (text
     | a
     | b
     | br
     | code
     | i
     | img
     | element html:acronym {
           attribute title { xsd:NCName },
           text
       })+
p =
    element html:p {
        attribute class { xsd:NCName }?,
        p_content
    }
pre =
    element html:pre {
        attribute class { xsd:NCName },
        (text | span)+
    }
tr =
    element html:tr {
        attribute class { text }?,
        attribute valign { xsd:NCName }?,
        (element html:th {
             attribute class { xsd:NCName }?,
             xsd:NCName
         }+
         | element html:td {
               attribute class { text }?,
               attribute rowspan { xsd:integer }?,
               (text | b | code | i | img | p | pre | span)+
           }+)
    }
img =
    element html:img {
        attribute alt { text }?,
        attribute src { text }
    }
b =
    element html:b { (text | a)+ }
    | element html:strong { (text | a)+ }
