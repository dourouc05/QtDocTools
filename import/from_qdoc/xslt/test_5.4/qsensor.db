<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.0"
            xml:lang="en">
   <db:title>QSensor Class</db:title>
   <db:classsynopsis>
      <db:ooclass>
         <db:classname>QSensor</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="header">#include
                                                  &lt;QSensor&gt;</db:classsynopsisinfo>
      <db:classsynopsisinfo role="qmake"> QT +=
                                                sensors</db:classsynopsisinfo>
      <db:classsynopsisinfo role="inherits">
         <db:link xlink:href="qtcore/qobject.html">QObject</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qaccelerometer.html">QAccelerometer</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qaltimeter.html">QAltimeter</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qambientlightsensor.html">QAmbientLightSensor</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qambienttemperaturesensor.html">QAmbientTemperatureSensor</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qcompass.html">QCompass</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qdistancesensor.html">QDistanceSensor</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qgyroscope.html">QGyroscope</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qholstersensor.html">QHolsterSensor</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qirproximitysensor.html">QIRProximitySensor</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qlightsensor.html">QLightSensor</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qmagnetometer.html">QMagnetometer</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qorientationsensor.html">QOrientationSensor</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qpressuresensor.html">QPressureSensor</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qproximitysensor.html">QProximitySensor</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qrotationsensor.html">QRotationSensor</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qtapsensor.html">QTapSensor</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qtiltsensor.html">QTiltSensor</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="since"> Qt
                                                5.1</db:classsynopsisinfo>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>active</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>alwaysOn</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qsensor.html#qrangelist-typedef">qrangelist</db:type>
         <db:varname>availableDataRates</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qsensor.html#AxesOrientationMode-enum">AxesOrientationMode</db:type>
         <db:varname>axesOrientationMode</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>bufferSize</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>busy</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>connectedToBackend</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>currentOrientation</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>dataRate</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qstring.html">QString</db:type>
         <db:varname>description</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>efficientBufferSize</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>error</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qbytearray.html">QByteArray</db:type>
         <db:varname>identifier</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>maxBufferSize</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>outputRange</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qsensor.html#qoutputrangelist-typedef">qoutputrangelist</db:type>
         <db:varname>outputRanges</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qsensorreading.html">QSensorReading</db:type>
         <db:varname>reading</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>skipDuplicates</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qbytearray.html">QByteArray</db:type>
         <db:varname>type</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>userOrientation</db:varname>
      </db:fieldsynopsis>
      <db:constructorsynopsis xlink:href="#QSensor">
         <db:methodname>QSensor</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QByteArray  &amp; 
                                    type ,  QObject  *  parent  =
                                    0)</db:exceptionname>
      </db:constructorsynopsis>
      <db:destructorsynopsis xlink:href="dtor.QSensor">
         <db:methodname>~QSensor</db:methodname>
         <db:void/>
      </db:destructorsynopsis>
      <db:methodsynopsis xlink:href="addFilter">
         <db:void/>
         <db:methodname>addFilter</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QSensorFilter  * 
                                        filter )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="availableSensorsChanged">
         <db:void/>
         <db:methodname>availableSensorsChanged</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="busyChanged">
         <db:void/>
         <db:methodname>busyChanged</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="connectToBackend">
         <db:type>bool</db:type>
         <db:methodname>connectToBackend</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="defaultSensorForType">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qtcore/qbytearray.html">QByteArray</db:type>
         <db:methodname>defaultSensorForType</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QByteArray  &amp; 
                                    type )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="filters">
         <db:type>QList&lt;QSensorFilter&gt;</db:type>
         <db:methodname>filters</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="isFeatureSupported">
         <db:type>bool</db:type>
         <db:methodname>isFeatureSupported</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( Feature  feature )
                                    const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="removeFilter">
         <db:void/>
         <db:methodname>removeFilter</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QSensorFilter  * 
                                        filter )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="sensorTypes">
         <db:modifier>static</db:modifier>
         <db:type>QList&lt;QByteArray&gt;</db:type>
         <db:methodname>sensorTypes</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="sensorsForType">
         <db:modifier>static</db:modifier>
         <db:type>QList&lt;QByteArray&gt;</db:type>
         <db:methodname>sensorsForType</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QByteArray  &amp; 
                                        type )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setCurrentOrientation">
         <db:void/>
         <db:methodname>setCurrentOrientation</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int 
                                        currentOrientation )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setEfficientBufferSize">
         <db:void/>
         <db:methodname>setEfficientBufferSize</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int 
                                        efficientBufferSize )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setMaxBufferSize">
         <db:void/>
         <db:methodname>setMaxBufferSize</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  maxBufferSize )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="start">
         <db:type>bool</db:type>
         <db:methodname>start</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="stop">
         <db:void/>
         <db:methodname>stop</db:methodname>
         <db:void/>
      </db:methodsynopsis>
   </db:classsynopsis>
   <db:classsynopsis>
      <db:ooclass>
         <db:classname xlink:href="qsensor.html">qoutputrange</db:classname>
      </db:ooclass>
   </db:classsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The <db:code><db:link xlink:href="qsensor.html">QSensor</db:link></db:code> class
                                    represents a single hardware sensor.</db:para>
      <db:para>The life cycle of a sensor is typically:</db:para>
      <db:itemizedlist>
         <db:listitem>
            <db:para>Create a sub-class of <db:code><db:link xlink:href="qsensor.html">QSensor</db:link></db:code> on the stack or heap.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Setup as required by the application.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Start receiving values.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Sensor data is used by the application.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Stop receiving values.</db:para>
         </db:listitem>
      </db:itemizedlist>
      <db:para>The sensor data is delivered via <db:code><db:link xlink:href="qsensorreading.html">QSensorReading</db:link></db:code> and its
                                    sub-classes.</db:para>
      <db:section xml:id="orientation">
         <db:title>Orientation</db:title>
         <db:para>Some sensors react to screen orientation changes, such as
                                        <db:code><db:link xlink:href="qaccelerometer.html">QAccelerometer</db:link></db:code>,
                                        <db:code><db:link xlink:href="qmagnetometer.html">QMagnetometer</db:link></db:code> and
                                        <db:code><db:link xlink:href="qrotationsensor.html">QRotationSensor</db:link></db:code>. These are so called
                                        <db:emphasis>orientable</db:emphasis> sensors. For orientable sensors,
                                        <db:code><db:link xlink:href="qsensor.html">QSensor</db:link></db:code> supports
                                    changing the reporting of the reading values based on the
                                    orientation of the screen.</db:para>
         <db:para>For orientable sensors, the <db:link xlink:href="qsensor.html#axesOrientationMode-prop">axesOrientationMode</db:link> property controls how the
                                    orientation affects the reading values.</db:para>
         <db:para>In the default mode, <db:code><db:link xlink:href="qsensor.html#AxesOrientationMode-enum">QSensor::FixedOrientation</db:link></db:code>, the reading values
                                    remain unaffected by the orientation. In the <db:code><db:link xlink:href="qsensor.html#AxesOrientationMode-enum">QSensor::AutomaticOrientation</db:link></db:code> mode, the reading
                                    values are automatically rotated by taking the current screen
                                    orientation into account. And finally, in the <db:code><db:link xlink:href="qsensor.html#AxesOrientationMode-enum">QSensor::UserOrientation</db:link></db:code> mode, the reading values
                                    are rotated according to a user-specified orientation.</db:para>
         <db:para>The functionality of this is only available if it is
                                    supported by the backend and if the sensor is orientable, which
                                    can be checked by calling <db:code><db:link xlink:href="qsensor.html#isFeatureSupported">QSensor::isFeatureSupported</db:link>()</db:code> with the <db:code><db:link xlink:href="qsensor.html#Feature-enum">QSensor::AxesOrientation</db:link></db:code> flag.</db:para>
         <db:para>The orientation values here are always of the screen
                                    orientation, not the device orientation. The screen orientation
                                    is the orientation of the GUI. For example when rotating a
                                    device by 90 degrees counter-clockwise, the screen orientation
                                    compensates for that by rotating 90 degrees clockwise, to the
                                    effect that the GUI is still facing upright after the device has
                                    been rotated. Note that applications can lock the screen
                                    orientation, for example to force portrait or landscape mode.
                                    For locked orientations, orientable sensors will not react with
                                    reading changes if the device orientation is changed, as
                                    orientable sensors react to screen orientation changes only.
                                    This makes sense, as the purpose of orientable sensors is to
                                    keep the sensor orientation in sync with the screen
                                    orientation.</db:para>
         <db:para>The orientation values range from 0 to 270 degrees. The
                                    orientation is applied in clockwise direction, e.g. an
                                    orientation value of 90 degrees means that the screen has been
                                    rotated 90 degress to the right from its origin position, to
                                    compensate a device rotation of 90 degrees to the left.</db:para>
      </db:section>
      <db:section>
         <db:title>See Also</db:title>
         <db:simplelist type="vert">
            <db:member>
               <db:code><db:link xlink:href="qsensorreading.html">QSensorReading</db:link></db:code>
            </db:member>
         </db:simplelist>
      </db:section>
   </db:section>
   <db:section xml:id="types">
      <db:title>Member Type Documentation</db:title>
      <db:section xml:id="AxesOrientationMode-enum">
         <db:title>enum QSensor::AxesOrientationMode</db:title>
         <db:para>Describes how reading values are affected by the screen
                                    orientation.</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QSensor::FixedOrientation</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>No automatic rotation is
                                                  applied to the reading values.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QSensor::AutomaticOrientation</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>1</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The reading values are
                                                  automatically rotated based on the screen
                                                  orientation.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QSensor::UserOrientation</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>2</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The reading values are
                                                  rotated based on the angle of the <db:link xlink:href="qsensor.html#userOrientation-prop">userOrientation</db:link> property.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>This enum was introduced or modified in Qt 5.1.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#axesOrientationMode-prop">QSensor::axesOrientationMode</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="Feature-enum">
         <db:title>enum QSensor::Feature</db:title>
         <db:para>Lists optional features a backend might support.</db:para>
         <db:para>The features common to all sensor types are:</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QSensor::Buffering</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The backend supports
                                                  buffering of readings, controlled by the <db:code><db:link xlink:href="qsensor.html#bufferSize-prop">QSensor::bufferSize</db:link></db:code> property.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QSensor::AlwaysOn</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>1</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The backend supports
                                                  changing the policy on whether to suspend when
                                                  idle, controlled by the <db:code><db:link xlink:href="qsensor.html#alwaysOn-prop">QSensor::alwaysOn</db:link></db:code> property.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QSensor::SkipDuplicates</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>5</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The backend supports
                                                  skipping of same or very similar successive
                                                  readings. This can be enabled by setting the
                                                  <db:code><db:link xlink:href="qsensor.html#skipDuplicates-prop">QSensor::skipDuplicates</db:link></db:code> property to
                                                  true.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The features of <db:code><db:link xlink:href="qmagnetometer.html">QMagnetometer</db:link></db:code> are:</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QSensor::GeoValues</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>2</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The backend supports
                                                  returning geo values, which can be controlled with
                                                  the <db:code><db:link xlink:href="qmagnetometer.html#returnGeoValues-prop">QMagnetometer::returnGeoValues</db:link></db:code>
                                                  property.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The features of <db:code><db:link xlink:href="qlightsensor.html">QLightSensor</db:link></db:code> are:</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QSensor::FieldOfView</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>3</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The backend specifies its
                                                  field of view, which can be read from the <db:code><db:link xlink:href="qlightsensor.html#fieldOfView-prop">QLightSensor::fieldOfView</db:link></db:code>
                                                  property.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The features of <db:code><db:link xlink:href="qaccelerometer.html">QAccelerometer</db:link></db:code> are:</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QSensor::AccelerationMode</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>4</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The backend supports
                                                  switching the acceleration mode of the
                                                  acceleromter with the <db:code><db:link xlink:href="qaccelerometer.html#accelerationMode-prop">QAccelerometer::accelerationMode</db:link></db:code>
                                                  property.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The features of <db:code><db:link xlink:href="qpressuresensor.html">QPressureSensor</db:link></db:code> are:</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QSensor::PressureSensorTemperature</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>7</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The backend provides the
                                                  pressure sensor's die temperature</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The features of all orientable sensors are:</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QSensor::AxesOrientation</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>6</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The backend supports
                                                  changing the axes orientation from the default of
                                                  <db:code><db:link xlink:href="qsensor.html#AxesOrientationMode-enum">QSensor::FixedOrientation</db:link></db:code> to something
                                                  else.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>This enum was introduced or modified in Qt 5.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#isFeatureSupported">QSensor::isFeatureSupported</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
   </db:section>
   <db:section xml:id="prop">
      <db:title>Property Documentation</db:title>
      <db:section xml:id="active-prop">
         <db:title>active : bool</db:title>
         <db:para>This property holds a value to indicate if the sensor is
                                    active.</db:para>
         <db:para>This is true if the sensor is active (returning values).
                                    This is false otherwise.</db:para>
         <db:para>Note that setting this value to true will not have an
                                    immediate effect. Instead, the sensor will be started once the
                                    event loop has been reached.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">isActive</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setActive</db:emphasis>(bool<db:emphasis>
                                                  active</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">activeChanged</db:emphasis>()</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="alwaysOn-prop">
         <db:title>alwaysOn : bool</db:title>
         <db:para>This property holds a value to indicate if the sensor should
                                    remain running when the screen is off.</db:para>
         <db:para>Some platforms have a policy of suspending sensors when the
                                    screen turns off. Setting this property to true will ensure the
                                    sensor continues to run.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">isAlwaysOn</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setAlwaysOn</db:emphasis>(bool<db:emphasis>
                                                  alwaysOn</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">alwaysOnChanged</db:emphasis>()</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="availableDataRates-prop">
         <db:title>availableDataRates : const <db:link xlink:href="qsensor.html#qrangelist-typedef">qrangelist</db:link></db:title>
         <db:para>This property holds the data rates that the sensor
                                    supports.</db:para>
         <db:para>This is a list of the data rates that the sensor supports.
                                    Measured in Hertz.</db:para>
         <db:para>Entries in the list can represent discrete rates or a
                                    continuous range of rates. A discrete rate is noted by having
                                    both values the same.</db:para>
         <db:para>See the <db:link xlink:href="qtsensors-sensor-explorer-example.html">sensor_explorer</db:link> example for an example of how to
                                    interpret and use this information.</db:para>
         <db:para>Note that this information is not mandatory as not all
                                    sensors have a rate at which they run. In such cases, the list
                                    will be empty.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  qrangelist </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">availableDataRates</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#dataRate-prop">QSensor::dataRate</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qsensor.html#qrangelist-typedef">qrangelist</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="axesOrientationMode-prop">
         <db:title>axesOrientationMode : <db:link xlink:href="qsensor.html#AxesOrientationMode-enum">AxesOrientationMode</db:link></db:title>
         <db:para>This property holds the mode that affects how the screen
                                    orientation changes reading values.</db:para>
         <db:para>When set to <db:link xlink:href="qsensor.html#AxesOrientationMode-enum">FixedOrientation</db:link>, which is the default mode, no
                                    automatic rotation is applied to the reading. This is the only
                                    mode available for backends that do not support the <db:code><db:link xlink:href="qsensor.html#Feature-enum">QSensor::AxesOrientation</db:link></db:code> feature.</db:para>
         <db:para>When set to <db:link xlink:href="qsensor.html#AxesOrientationMode-enum">AutomaticOrientation</db:link>, the reading values are
                                    automatically rotated when the screen orientation changes. In
                                    effect, the screen orientation is canceled out.</db:para>
         <db:para>As an example, assume the device is rotated by 180 degrees
                                    and therefore the screen orientation also is rotated by 180
                                    degrees from the native orientation. Without automatic axes
                                    orientation, the reading values would now be changed: Both the X
                                    and the Y values would be negated, forcing an application
                                    developer to manually cancel out the negation in application
                                    code. Automatic axes orientation does this automatically, in
                                    this mode the X and Y values would be the same as with the
                                    default screen orientation.</db:para>
         <db:para>This automatic rotation of the axes is handy is some
                                    usecases, for example in a bubble level application that
                                    measures how level a surface is by looking at the X axis value
                                    of an accelerometer. When the device and screen orientation
                                    change by 90 degrees, an application developer does not need to
                                    change anything, he can continue using the X axis value even
                                    though the device is rotated. Without automatic axes
                                    orientation, the application developer would need to look at the
                                    Y values instead, thereby adding code to the application that
                                    reads from a different axis depending on the screen
                                    orientation.</db:para>
         <db:para>The <db:link xlink:href="qsensor.html#AxesOrientationMode-enum">UserOrientation</db:link> mode is quite similar to <db:link xlink:href="qsensor.html#AxesOrientationMode-enum">AutomaticOrientation</db:link>, only that the screen
                                    orientation is manually controlled instead of automatically
                                    determined. The angle of the <db:link xlink:href="qsensor.html#userOrientation-prop">userOrientation</db:link> property is then used for rotating
                                    the reading values.</db:para>
         <db:para>Since the rotation of the reading values is based on the
                                    screen orientation, Z values will never change, as the Z axis is
                                    perpendicular to the screen. As screen orientation changes in 90
                                    degree steps, rotating the reading values is also done in steps
                                    of 90 degrees.</db:para>
         <db:para>This property is only used for orientable sensors.</db:para>
         <db:para>This property was introduced in Qt 5.1.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  AxesOrientationMode </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">axesOrientationMode</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setAxesOrientationMode</db:emphasis>(AxesOrientationMode<db:emphasis>
                                                  axesOrientationMode</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">axesOrientationModeChanged</db:emphasis>(AxesOrientationMode<db:emphasis>
                                                  axesOrientationMode</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="bufferSize-prop">
         <db:title>bufferSize : int</db:title>
         <db:para>This property holds the size of the buffer. By default, the
                                    buffer size is 1, which means no buffering. If the maximum
                                    buffer size is 1, then buffering is not supported by the
                                    sensor.</db:para>
         <db:para>Setting bufferSize greater than <db:link xlink:href="qsensor.html#maxBufferSize-prop">maxBufferSize</db:link> will cause <db:link xlink:href="qsensor.html#maxBufferSize-prop">maxBufferSize</db:link> to be used.</db:para>
         <db:para>Buffering is turned on when bufferSize is greater than 1.
                                    The sensor will collect the requested number of samples and
                                    deliver them all to the application at one time. They will be
                                    delivered to the application as a burst of changed readings so
                                    it is particularly important that the application processes each
                                    reading immediately or saves the values somewhere else.</db:para>
         <db:para>If <db:code><db:link xlink:href="qsensor.html#stop">stop</db:link>()</db:code> is
                                    called when buffering is on-going, the partial buffer is not
                                    delivered.</db:para>
         <db:para>When the sensor is started with buffering option, values are
                                    collected from that moment onwards. There is no pre-existing
                                    buffer that can be utilized.</db:para>
         <db:para>Some backends like Blackberry only support enabling or
                                    disabling the buffer and do not give control over the size. In
                                    this case, the <db:link xlink:href="qsensor.html#maxBufferSize-prop">maxBufferSize</db:link> and <db:link xlink:href="qsensor.html#efficientBufferSize-prop">efficientBufferSize</db:link> properties might not be set at
                                    all, even though buffering is supported. Setting the bufferSize
                                    property to any value greater than 1 will enable buffering.
                                    After the sensor has been started, the bufferSize property will
                                    be set to the actual value by the backend.</db:para>
         <db:para>On Blackberry, buffering will not wait until the buffer is
                                    full to deliver new readings. Instead, the buffer will be used
                                    if the backend does not manage to retrieve the readings in time,
                                    for example when the event loop is blocked for too long. Without
                                    a buffer, these readings would simply be dropped.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">bufferSize</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setBufferSize</db:emphasis>(int<db:emphasis>
                                                  bufferSize</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">bufferSizeChanged</db:emphasis>(int<db:emphasis>
                                                  bufferSize</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#maxBufferSize-prop">QSensor::maxBufferSize</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#efficientBufferSize-prop">QSensor::efficientBufferSize</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="busy-prop">
         <db:title>busy : const bool</db:title>
         <db:para>This property holds a value to indicate if the sensor is
                                    busy.</db:para>
         <db:para>Some sensors may be on the system but unavailable for use.
                                    This function will return true if the sensor is busy. You will
                                    not be able to <db:code><db:link xlink:href="qsensor.html#start">start</db:link>()</db:code> the sensor.</db:para>
         <db:para>Note that this function does not return true if you are
                                    using the sensor, only if another process is using the
                                    sensor.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">isBusy</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#busyChanged">busyChanged</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="connectedToBackend-prop">
         <db:title>connectedToBackend : const bool</db:title>
         <db:para>This property holds a value indicating if the sensor has
                                    connected to a backend.</db:para>
         <db:para>A sensor that has not been connected to a backend cannot do
                                    anything useful.</db:para>
         <db:para>Call the <db:code><db:link xlink:href="qsensor.html#connectToBackend">connectToBackend</db:link>()</db:code> method to force the sensor to
                                    connect to a backend immediately. This is automatically called
                                    if you call <db:code><db:link xlink:href="qsensor.html#start">start</db:link>()</db:code>
                                    so you only need to do this if you need access to sensor
                                    properties (ie. to poll the sensor's meta-data before you use
                                    it).</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">isConnectedToBackend</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="currentOrientation-prop">
         <db:title>currentOrientation : const int</db:title>
         <db:para>This property holds the current orientation that is used for
                                    rotating the reading values.</db:para>
         <db:para>This might not be the same as the screen orientation. For
                                    example, in the <db:link xlink:href="qsensor.html#AxesOrientationMode-enum">FixedOrientation</db:link> mode, the reading values are not
                                    rotated, and therefore the property is 0.</db:para>
         <db:para>In the <db:link xlink:href="qsensor.html#AxesOrientationMode-enum">UserOrientation</db:link> mode, the readings are rotated
                                    based on the <db:link xlink:href="qsensor.html#userOrientation-prop">userOrientation</db:link> property, and therefore this
                                    property is equal to the <db:link xlink:href="qsensor.html#userOrientation-prop">userOrientation</db:link> property.</db:para>
         <db:para>In the <db:link xlink:href="qsensor.html#AxesOrientationMode-enum">AutomaticOrientation</db:link> mode, the readings are
                                    rotated based on the screen orientation, and therefore this
                                    property will be equal to the current screen
                                    orientation.</db:para>
         <db:para>This property is set by the backend and only valid for
                                    orientable sensors.</db:para>
         <db:para>This property was introduced in Qt 5.1.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">currentOrientation</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">currentOrientationChanged</db:emphasis>(int<db:emphasis>
                                                  currentOrientation</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="dataRate-prop">
         <db:title>dataRate : int</db:title>
         <db:para>This property holds the data rate that the sensor should be
                                    run at.</db:para>
         <db:para>Measured in Hertz.</db:para>
         <db:para>The data rate is the maximum frequency at which the sensor
                                    can detect changes.</db:para>
         <db:para>Setting this property is not portable and can cause
                                    conflicts with other applications. Check with the sensor backend
                                    and platform documentation for any policy regarding multiple
                                    applications requesting a data rate.</db:para>
         <db:para>The default value (0) means that the app does not care what
                                    the data rate is. Applications should consider using a
                                    timer-based poll of the current value or ensure that the code
                                    that processes values can run very quickly as the platform may
                                    provide updates hundreds of times each second.</db:para>
         <db:para>This should be set before calling <db:code><db:link xlink:href="qsensor.html#start">start</db:link>()</db:code> because the
                                    sensor may not notice changes to this value while it is
                                    running.</db:para>
         <db:para>Note that there is no mechanism to determine the current
                                    data rate in use by the platform.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">dataRate</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setDataRate</db:emphasis>(int<db:emphasis>
                                                  rate</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">dataRateChanged</db:emphasis>()</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#availableDataRates-prop">QSensor::availableDataRates</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="description-prop">
         <db:title>description : const <db:link xlink:href="qtcore/qstring.html">QString</db:link></db:title>
         <db:para>This property holds a descriptive string for the
                                    sensor.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  QString </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">description</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="efficientBufferSize-prop">
         <db:title>efficientBufferSize : const int</db:title>
         <db:para>The property holds the most efficient buffer size. Normally
                                    this is 1 (which means no particular size is most efficient).
                                    Some sensor drivers have a FIFO buffer which makes it more
                                    efficient to deliver the FIFO's size worth of readings at one
                                    time.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">efficientBufferSize</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">efficientBufferSizeChanged</db:emphasis>(int<db:emphasis>
                                                  efficientBufferSize</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#bufferSize-prop">QSensor::bufferSize</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#maxBufferSize-prop">QSensor::maxBufferSize</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="error-prop">
         <db:title>error : const int</db:title>
         <db:para>This property holds the last error code set on the
                                    sensor.</db:para>
         <db:para>Note that error codes are sensor-specific.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">error</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">sensorError</db:emphasis>(int<db:emphasis>
                                                  error</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="identifier-prop">
         <db:title>identifier : <db:link xlink:href="qtcore/qbytearray.html">QByteArray</db:link></db:title>
         <db:para>This property holds the backend identifier for the
                                    sensor.</db:para>
         <db:para>Note that the identifier is filled out automatically when
                                    the sensor is connected to a backend. If you want to connect a
                                    specific backend, you should call setIdentifier() before <db:code><db:link xlink:href="qsensor.html#connectToBackend">connectToBackend</db:link>()</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  QByteArray </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">identifier</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setIdentifier</db:emphasis>(const
                                                  QByteArray &amp;<db:emphasis>
                                                  identifier</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="maxBufferSize-prop">
         <db:title>maxBufferSize : const int</db:title>
         <db:para>The property holds the maximum buffer size.</db:para>
         <db:para>Note that this may be 1, in which case the sensor does not
                                    support any form of buffering. In that case, <db:link xlink:href="qsensor.html#isFeatureSupported">isFeatureSupported</db:link>
            <db:code><db:link xlink:href="qsensor.html#Feature-enum">QSensor::Buffering</db:link></db:code>) will also return false.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">maxBufferSize</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">maxBufferSizeChanged</db:emphasis>(int<db:emphasis>
                                                  maxBufferSize</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#bufferSize-prop">QSensor::bufferSize</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#efficientBufferSize-prop">QSensor::efficientBufferSize</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="outputRange-prop">
         <db:title>outputRange : int</db:title>
         <db:para>This property holds the output range in use by the
                                    sensor.</db:para>
         <db:para>This value represents the index in the <db:code><db:link xlink:href="qsensor.html#outputRanges-prop">QSensor::outputRanges</db:link></db:code> list to use.</db:para>
         <db:para>Setting this property is not portable and can cause
                                    conflicts with other applications. Check with the sensor backend
                                    and platform documentation for any policy regarding multiple
                                    applications requesting an output range.</db:para>
         <db:para>The default value (-1) means that the app does not care what
                                    the output range is.</db:para>
         <db:para>Note that there is no mechanism to determine the current
                                    output range in use by the platform.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">outputRange</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setOutputRange</db:emphasis>(int<db:emphasis>
                                                  index</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#outputRanges-prop">QSensor::outputRanges</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="outputRanges-prop">
         <db:title>outputRanges : const <db:link xlink:href="qsensor.html#qoutputrangelist-typedef">qoutputrangelist</db:link></db:title>
         <db:para>This property holds a list of output ranges the sensor
                                    supports.</db:para>
         <db:para>A sensor may have more than one output range. Typically this
                                    is done to give a greater measurement range at the cost of
                                    lowering accuracy.</db:para>
         <db:para>Note that this information is not mandatory. This
                                    information is typically only available for sensors that have
                                    selectable output ranges (such as typical
                                    accelerometers).</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  qoutputrangelist </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">outputRanges</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#outputRange-prop">QSensor::outputRange</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qsensor.html#qoutputrangelist-typedef">qoutputrangelist</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="reading-prop">
         <db:title>reading : <db:link xlink:href="qsensorreading.html">QSensorReading</db:link></db:title>
         <db:para>This property holds the reading class.</db:para>
         <db:para>The reading class provides access to sensor readings. The
                                    reading object is a volatile cache of the most recent sensor
                                    reading that has been received so the application should process
                                    readings immediately or save the values somewhere for later
                                    processing.</db:para>
         <db:para>Note that this will return 0 until a sensor backend is
                                    connected to a backend.</db:para>
         <db:para>Also note that readings are not immediately available after
                                        <db:code><db:link xlink:href="qsensor.html#start">start</db:link>()</db:code> is
                                    called. Applications must wait for the readingChanged() signal
                                    to be emitted.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  QSensorReading * </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">reading</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">readingChanged</db:emphasis>()</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#connectedToBackend-prop">isConnectedToBackend</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#start">start</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="skipDuplicates-prop">
         <db:title>skipDuplicates : bool</db:title>
         <db:para>This property holds indicates whether duplicate reading
                                    values should be omitted.</db:para>
         <db:para>When duplicate skipping is enabled, successive readings with
                                    the same or very similar values are omitted. This helps reducing
                                    the amount of processing done, as less sensor readings are made
                                    available. As a consequence, readings arrive at an irregular
                                    interval.</db:para>
         <db:para>Duplicate skipping is not just enabled for readings that are
                                    exactly the same, but also for readings that are quite similar,
                                    as each sensor has a bit of jitter even if the device is not
                                    moved.</db:para>
         <db:para>Support for this property depends on the backend. Use
                                        <db:code><db:link xlink:href="qsensor.html#isFeatureSupported">isFeatureSupported</db:link>()</db:code> to check if it is supported
                                    on the current platform.</db:para>
         <db:para>Duplicate skipping is disabled by default.</db:para>
         <db:para>Duplicate skipping takes effect when the sensor is started,
                                    changing the property while the sensor is active has no
                                    immediate effect.</db:para>
         <db:para>This property was introduced in Qt 5.1.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">skipDuplicates</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setSkipDuplicates</db:emphasis>(bool<db:emphasis>
                                                  skipDuplicates</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">skipDuplicatesChanged</db:emphasis>(bool<db:emphasis>
                                                  skipDuplicates</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="type-prop">
         <db:title>type : const <db:link xlink:href="qtcore/qbytearray.html">QByteArray</db:link></db:title>
         <db:para>This property holds the type of the sensor.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  QByteArray </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">type</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="userOrientation-prop">
         <db:title>userOrientation : int</db:title>
         <db:para>This property holds the angle used for rotating the reading
                                    values in the UserOrientation mode.</db:para>
         <db:para>When the <db:link xlink:href="qsensor.html#axesOrientationMode-prop">axesOrientationMode</db:link> property is set to <db:link xlink:href="qsensor.html#AxesOrientationMode-enum">UserOrientation</db:link>, the angle for rotating the
                                    reading values is taken from this property. In other modes, the
                                    property has no effect.</db:para>
         <db:para>The default is 0. The only valid values are 0, 90, 180 and
                                    270, as those are the only possible screen
                                    orientations.</db:para>
         <db:para>This property is only valid for orientable sensors.</db:para>
         <db:para>This property was introduced in Qt 5.1.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">userOrientation</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setUserOrientation</db:emphasis>(int<db:emphasis>
                                                  userOrientation</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">userOrientationChanged</db:emphasis>(int<db:emphasis>
                                                  userOrientation</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
   </db:section>
   <db:section xml:id="func">
      <db:title>Member Function Documentation</db:title>
      <db:section xml:id="QSensor">
         <db:title>QSensor::QSensor(const <db:link xlink:href="qtcore/qbytearray.html">QByteArray</db:link><db:link xlink:href="qtcore/qobject.html#QObject">QObject</db:link></db:title>
         <db:para>Construct the <db:emphasis>type</db:emphasis> sensor as a child of
                                        <db:emphasis>parent</db:emphasis>.</db:para>
         <db:para>Do not use this constructor if a derived class exists for
                                    the specific sensor type.</db:para>
         <db:para>The wrong way is to use the base class constructor:</db:para>
         <db:programlisting>QSensor*magnetometer =newQSensor(QMagnetometer::type,this);</db:programlisting>
         <db:para>The right way is to create an instance of the derived
                                    class:</db:para>
         <db:programlisting>QMagnetometer*magnetometer =newQMagnetometer(this);</db:programlisting>
         <db:para>The derived classes have additional properties and data
                                    members which are needed for certain features such as geo value
                                    support in <db:code><db:link xlink:href="qmagnetometer.html">QMagnetometer</db:link></db:code> or acceleration mode support in
                                        <db:code><db:link xlink:href="qaccelerometer.html">QAccelerometer</db:link></db:code>.
                                    These features will only work properly when creating a sensor
                                    instance from a <db:code><db:link xlink:href="qsensor.html">QSensor</db:link></db:code>
                                    subclass.</db:para>
         <db:para>Only use this constructor if there is no derived sensor
                                    class available. Note that all built-in sensors have a derived
                                    class, so using this constructor should only be necessary when
                                    implementing custom sensors, like in the <db:link xlink:href="qtsensors-grue-example.html">Grue sensor
                                        example</db:link>.</db:para>
      </db:section>
      <db:section xml:id="dtor.QSensor">
         <db:title>[virtual] QSensor::~QSensor()</db:title>
         <db:para>Destroy the sensor. Stops the sensor if it has not already
                                    been stopped.</db:para>
      </db:section>
      <db:section xml:id="addFilter">
         <db:title>void QSensor::addFilter(<db:link xlink:href="qsensorfilter.html">QSensorFilter</db:link></db:title>
         <db:para>Add a <db:emphasis>filter</db:emphasis> to the sensor.</db:para>
         <db:para>The sensor does not take ownership of the filter. <db:code><db:link xlink:href="qsensorfilter.html">QSensorFilter</db:link></db:code> will inform
                                    the sensor if it is destroyed.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensorfilter.html">QSensorFilter</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="availableSensorsChanged">
         <db:title>[signal] void QSensor::availableSensorsChanged()</db:title>
         <db:para>This signal is emitted when the list of available sensors
                                    has changed. The sensors available to a program will not
                                    generally change over time however some of the available sensors
                                    may represent hardware that is not permanently connected. For
                                    example, a game controller that is connected via bluetooth would
                                    become available when it was on and would become unavailable
                                    when it was off.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#sensorTypes">QSensor::sensorTypes</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#sensorsForType">QSensor::sensorsForType</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="busyChanged">
         <db:title>[signal] void QSensor::busyChanged()</db:title>
         <db:para>This signal is emitted when the sensor is no longer busy.
                                    This can be used to grab a sensor when it becomes
                                    available.</db:para>
         <db:programlisting>sensor.start(); if
                                        (sensor.isBusy()) {
                                        // need to wait for busyChanged
                                        signal and try again }</db:programlisting>
      </db:section>
      <db:section xml:id="connectToBackend">
         <db:title>bool QSensor::connectToBackend()</db:title>
         <db:para>Try to connect to a sensor backend.</db:para>
         <db:para>Returns true if a suitable backend could be found, false
                                    otherwise.</db:para>
         <db:para>The type must be set before calling this method if you are
                                    using <db:code><db:link xlink:href="qsensor.html">QSensor</db:link></db:code>
                                    directly.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#connectedToBackend-prop">isConnectedToBackend</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="defaultSensorForType">
         <db:title>[static] <db:link xlink:href="qtcore/qbytearray.html">QByteArray</db:link><db:link xlink:href="qtcore/qbytearray.html">QByteArray</db:link></db:title>
         <db:para>Returns the default sensor identifier for
                                        <db:emphasis>type</db:emphasis>. This is set in a config file and can
                                    be overridden if required. If no default is available the system
                                    will return the first registered sensor for
                                        <db:emphasis>type</db:emphasis>.</db:para>
         <db:para>Note that there is special case logic to prevent the generic
                                    plugin's backends from becoming the default when another backend
                                    is registered for the same type. This logic means that a backend
                                    identifier starting with <db:code>generic.</db:code> will
                                    only be the default if no other backends have been registered
                                    for that type or if it is specified in
                                        <db:code>Sensors.conf</db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="determining-the-default-sensor-for-a-type.html">Determining the default sensor for a
                                    type</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="filters">
         <db:title><db:link xlink:href="qtcore/qlist.html">QList</db:link><db:link xlink:href="qsensorfilter.html">QSensorFilter</db:link></db:title>
         <db:para>Returns the filters currently attached to the
                                    sensor.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensorfilter.html">QSensorFilter</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="isFeatureSupported">
         <db:title>bool QSensor::isFeatureSupported(<db:link xlink:href="qsensor.html#Feature-enum">Feature</db:link></db:title>
         <db:para>Checks if a specific feature is supported by the
                                    backend.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qtsensors-module.html">QtSensors</db:link></db:code>
                                    supports a rich API for controlling and providing information
                                    about sensors. Naturally, not all of this functionality can be
                                    supported by all of the backends.</db:para>
         <db:para>To check if the current backend supports the feature
                                        <db:emphasis>feature</db:emphasis>, call this function.</db:para>
         <db:para>The backend needs to be connected, otherwise false will be
                                    returned. Calling <db:code><db:link xlink:href="qsensor.html#connectToBackend">connectToBackend</db:link>()</db:code> or <db:code><db:link xlink:href="qsensor.html#start">start</db:link>()</db:code> will create a
                                    connection to the backend.</db:para>
         <db:para>Backends have to implement <db:code><db:link xlink:href="qsensorbackend.html#isFeatureSupported">QSensorBackend::isFeatureSupported</db:link>()</db:code> to make this
                                    work.</db:para>
         <db:para>Returns whether or not the feature is supported if the
                                    backend is connected, or false if the backend is not
                                    connected.</db:para>
         <db:para>This function was introduced in Qt 5.0.</db:para>
      </db:section>
      <db:section xml:id="removeFilter">
         <db:title>void QSensor::removeFilter(<db:link xlink:href="qsensorfilter.html">QSensorFilter</db:link></db:title>
         <db:para>Remove <db:emphasis>filter</db:emphasis> from the sensor.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensorfilter.html">QSensorFilter</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="sensorTypes">
         <db:title>[static] <db:link xlink:href="qtcore/qlist.html">QList</db:link><db:link xlink:href="qtcore/qbytearray.html">QByteArray</db:link></db:title>
         <db:para>Returns a list of all sensor types.</db:para>
      </db:section>
      <db:section xml:id="sensorsForType">
         <db:title>[static] <db:link xlink:href="qtcore/qlist.html">QList</db:link><db:link xlink:href="qtcore/qbytearray.html">QByteArray</db:link><db:link xlink:href="qtcore/qbytearray.html">QByteArray</db:link></db:title>
         <db:para>Returns a list of ids for each of the sensors for
                                        <db:emphasis>type</db:emphasis>. If there are no sensors of that type
                                    available the list will be empty.</db:para>
      </db:section>
      <db:section xml:id="setCurrentOrientation">
         <db:title>void QSensor::setCurrentOrientation(int currentOrientation)</db:title>
         <db:para>Sets the current screen orientation to
                                        <db:emphasis>currentOrientation</db:emphasis>. This is to be called
                                    from the backend whenever the screen orientation or the <db:link xlink:href="qsensor.html#userOrientation-prop">userOrientation</db:link> property changes.</db:para>
         <db:para>This function was introduced in Qt 5.1.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#currentOrientation-prop">currentOrientation</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setEfficientBufferSize">
         <db:title>void QSensor::setEfficientBufferSize(int efficientBufferSize)</db:title>
         <db:para>Sets the efficient buffer size to
                                        <db:emphasis>efficientBufferSize</db:emphasis>. This is to be called
                                    from the backend.</db:para>
         <db:para>This function was introduced in Qt 5.1.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#efficientBufferSize-prop">efficientBufferSize</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setMaxBufferSize">
         <db:title>void QSensor::setMaxBufferSize(int maxBufferSize)</db:title>
         <db:para>Sets the maximum buffer size to
                                        <db:emphasis>maxBufferSize</db:emphasis>. This is to be called from
                                    the backend.</db:para>
         <db:para>This function was introduced in Qt 5.1.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#maxBufferSize-prop">maxBufferSize</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="start">
         <db:title>[slot] bool QSensor::start()</db:title>
         <db:para>Start retrieving values from the sensor. Returns true if the
                                    sensor was started, false otherwise.</db:para>
         <db:para>The sensor may fail to start for several reasons.</db:para>
         <db:para>Once an application has started a sensor it must wait until
                                    the sensor receives a new value before it can query the sensor's
                                    values. This is due to how the sensor receives values from the
                                    system. Sensors do not (in general) poll for new values, rather
                                    new values are pushed to the sensors as they happen.</db:para>
         <db:para>For example, this code will not work as intended.</db:para>
         <db:programlisting>sensor-&gt;start();
                                    sensor-&gt;reading()-&gt;x(); // no data available</db:programlisting>
         <db:para>To work correctly, the code that accesses the reading should
                                    ensure the <db:code><db:link xlink:href="qsensor.html#reading-prop">readingChanged</db:link>()</db:code> signal has been emitted.</db:para>
         <db:programlisting>connect(sensor, SIGNAL(readingChanged()),this, SLOT(checkReading()));
                                        sensor-&gt;start(); } void MyClass::checkReading() {
                                        sensor-&gt;reading()-&gt;x();</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#busy-prop">QSensor::busy</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="stop">
         <db:title>[slot] void QSensor::stop()</db:title>
         <db:para>Stop retrieving values from the sensor.</db:para>
         <db:para>This releases the sensor so that other processes can use
                                    it.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#busy-prop">QSensor::busy</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
   </db:section>
   <db:section xml:id="relnonmem">
      <db:title>Related Non-Members</db:title>
      <db:section>
         <db:title>class <db:link xlink:href="qsensor.html">qoutputrange</db:link></db:title>
         <db:para>The qoutputrange class holds the specifics of an output
                                    range. <db:link xlink:href="qsensor.html#details">More...</db:link>
         </db:para>
      </db:section>
      <db:section xml:id="qoutputrangelist-typedef">
         <db:title>typedef qoutputrangelist</db:title>
         <db:para>This type is defined as a list of qoutputrange
                                    values.</db:para>
         <db:programlisting>typedefQList&lt;qoutputrange&gt; qoutputrangelist;</db:programlisting>
         <db:para>This typedef was introduced in Qt 5.1.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtcore/qlist.html">QList</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qsensor.html">qoutputrange</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#outputRanges-prop">QSensor::outputRanges</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="qrange-typedef">
         <db:title>typedef qrange</db:title>
         <db:para>This type is defined as a <db:code><db:link xlink:href="qtcore/qpair.html">QPair</db:link></db:code>.</db:para>
         <db:programlisting>typedefQPair&lt;int,int&gt;
                                    qrange;</db:programlisting>
         <db:para>This typedef was introduced in Qt 5.1.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtcore/qpair.html">QPair</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qsensor.html#qrangelist-typedef">qrangelist</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#availableDataRates-prop">QSensor::availableDataRates</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="qrangelist-typedef">
         <db:title>typedef qrangelist</db:title>
         <db:para>This type is defined as a list of qrange values.</db:para>
         <db:programlisting>typedefQList&lt;qrange&gt; qrangelist;</db:programlisting>
         <db:para>This typedef was introduced in Qt 5.1.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtcore/qlist.html">QList</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qsensor.html#qrange-typedef">qrange</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qsensor.html#availableDataRates-prop">QSensor::availableDataRates</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
   </db:section>
</db:article>
