<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.0"
            xml:lang="en">
   <db:title>Creating Custom Widgets for Qt Designer</db:title>
   <db:para>
      <db:emphasis>Qt Designer</db:emphasis>'s plugin-based architecture
                                    allows user-defined and third party custom widgets to be edited
                                    just like you do with standard Qt widgets. All of the custom
                                    widget's features are made available to <db:emphasis>Qt
                                        Designer</db:emphasis>, including widget properties, signals, and
                                    slots. Since <db:emphasis>Qt Designer</db:emphasis> uses real widgets
                                    during the form design process, custom widgets will appear the
                                    same as they do when previewed.</db:para>
   <db:informalfigure>
      <db:mediaobject>
         <db:imageobject>
            <db:imagedata fileref="images/worldtimeclockplugin-example.png"/>
         </db:imageobject>
      </db:mediaobject>
   </db:informalfigure>
   <db:para>The <db:code><db:link xlink:href="qtdesigner-module.html">QtDesigner</db:link></db:code> module provides you with the ability to
                                    create custom widgets in <db:emphasis>Qt Designer</db:emphasis>.</db:para>
   <db:section xml:id="getting-started">
      <db:title>Getting Started</db:title>
      <db:para>To integrate a custom widget with <db:emphasis>Qt
                                        Designer</db:emphasis>, you require a suitable description for
                                    the widget and an appropriate <db:code>.pro</db:code>
                                    file.</db:para>
      <db:section>
         <db:title>Providing an Interface Description</db:title>
         <db:para>To inform <db:emphasis>Qt Designer</db:emphasis> about the type of
                                    widget you want to provide, create a subclass of <db:code><db:link xlink:href="qdesignercustomwidgetinterface.html">QDesignerCustomWidgetInterface</db:link></db:code> that describes the
                                    various properties your widget exposes. Most of these are
                                    supplied by functions that are pure virtual in the base class,
                                    because only the author of the plugin can provide this
                                    information.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Function</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description of the return value</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>name()</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The name of the class that provides the
                                                  widget.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>group()</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The group in <db:emphasis>Qt Designer</db:emphasis>'s
                                                  widget box that the widget belongs to.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>toolTip()</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>A short description to help users identify
                                                  the widget in <db:emphasis>Qt
                                                  Designer</db:emphasis>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>whatsThis()</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>A longer description of the widget for
                                                  users of <db:emphasis>Qt Designer</db:emphasis>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>includeFile()</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The header file that must be included in
                                                  applications that use this widget. This
                                                  information is stored in UI files and will be used
                                                  by <db:code>uic</db:code> to create a suitable
                                                  <db:code>#includes</db:code> statement in the
                                                  code it generates for the form containing the
                                                  custom widget.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>icon()</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>An icon that can be used to represent the
                                                  widget in <db:emphasis>Qt Designer</db:emphasis>'s widget
                                                  box.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>isContainer()</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>True if the widget will be used to hold
                                                  child widgets; false otherwise.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>createWidget()</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>A <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code> pointer to an instance of the
                                                  custom widget, constructed with the parent
                                                  supplied.</db:para>
                     <db:note>
                        <db:para>createWidget() is a factory function
                                                  responsible for creating the widget only. The
                                                  custom widget's properties will not be available
                                                  until load() returns.</db:para>
                     </db:note>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>domXml()</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>A description of the widget's properties,
                                                  such as its object name, size hint, and other
                                                  standard <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code> properties.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>codeTemplate()</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>This function is reserved for future use by
                                                  <db:emphasis>Qt Designer</db:emphasis>.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>Two other virtual functions can also be
                                    reimplemented:</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>initialize()</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Sets up extensions and other features for
                                                  custom widgets. Custom container extensions (see
                                                  <db:code><db:link xlink:href="qdesignercontainerextension.html">QDesignerContainerExtension</db:link></db:code>) and task
                                                  menu extensions (see <db:code><db:link xlink:href="qdesignertaskmenuextension.html">QDesignerTaskMenuExtension</db:link></db:code>) should be
                                                  set up in this function.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>isInitialized()</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Returns true if the widget has been
                                                  initialized; returns false otherwise.
                                                  Reimplementations usually check whether the
                                                  <db:code>initialize()</db:code> function has
                                                  been called and return the result of this
                                                  test.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section>
         <db:title>Notes on the 
                                    Function</db:title>
         <db:para>The <db:code>domXml()</db:code> function returns a UI
                                    file snippet that is used by <db:emphasis>Qt Designer</db:emphasis>'s
                                    widget factory to create a custom widget and its applicable
                                    properties.</db:para>
         <db:para>Since Qt 4.4, <db:emphasis>Qt Designer</db:emphasis>'s widget box
                                    allows for a complete UI file to describe <db:emphasis role="bold">one</db:emphasis>
                                    custom widget. The UI file can be loaded using the
                                        <db:code>&lt;ui&gt;</db:code> tag. Specifying the
                                    &lt;ui&gt; tag allows for adding the &lt;customwidget&gt;
                                    element that contains additional information for custom widgets.
                                    The <db:code>&lt;widget&gt;</db:code> tag is sufficient if
                                    no additional information is required</db:para>
         <db:para>If the custom widget does not provide a reasonable size
                                    hint, it is necessary to specify a default geometry in the
                                    string returned by the <db:code>domXml()</db:code> function
                                    in your subclass. For example, the
                                        <db:code>AnalogClockPlugin</db:code> provided by the
                                        <db:link xlink:href="qtdesigner-customwidgetplugin-example.html">Custom Widget Plugin</db:link> example, defines a default
                                    widgetgeometry in the following way:</db:para>
         <db:programlisting language="qml"> ... " &lt;property
                                        name=\"geometry\"&gt;\n"" &lt;rect&gt;\n"" &lt;x&gt;0&lt;/x&gt;\n"" &lt;y&gt;0&lt;/y&gt;\n""
                                        &lt;width&gt;100&lt;/width&gt;\n""
                                        &lt;height&gt;100&lt;/height&gt;\n"" &lt;/rect&gt;\n"" &lt;/property&gt;\n"
                                    ...</db:programlisting>
         <db:para>An additional feature of the <db:code>domXml()</db:code>
                                    function is that, if it returns an empty string, the widget will
                                    not be installed in <db:emphasis>Qt Designer</db:emphasis>'s widget box.
                                    However, it can still be used by other widgets in the form. This
                                    feature is used to hide widgets that should not be explicitly
                                    created by the user, but are required by other widgets.</db:para>
         <db:para>A complete custom widget specification looks like:</db:para>
         <db:programlisting>&lt;ui
                                        language="c++"&gt; displayname="MyWidget"&gt;&lt;widget class="widgets::MyWidget" name="mywidget"/&gt;&lt;customwidgets&gt;&lt;customwidget&gt;&lt;class&gt;widgets::MyWidget&lt;/class&gt;&lt;addpagemethod&gt;addPage&lt;/addpagemethod&gt;&lt;propertyspecifications&gt;&lt;stringpropertyspecification name="fileName" notr="true"
                                        type="singleline"&lt;stringpropertyspecification name="text" type="richtext"&lt;/propertyspecifications&gt;&lt;/customwidget&gt;&lt;/customwidgets&gt;&lt;/ui&gt;</db:programlisting>
         <db:para>Attributes of the <db:code>&lt;ui&gt;</db:code>
                                    tag:</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Attribute</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Presence</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Values</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Comment</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>language</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>optional</db:para>
                  </db:td>
                  <db:td>
                     <db:para>"c++", "jambi"</db:para>
                  </db:td>
                  <db:td>
                     <db:para>This attribute specifies the language the
                                                  custom widget is intended for. It is mainly there
                                                  to prevent C++-plugins from appearing in Qt
                                                  Jambi.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>displayname</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>optional</db:para>
                  </db:td>
                  <db:td>
                     <db:para>Class name</db:para>
                  </db:td>
                  <db:td>
                     <db:para>The value of the attribute appears in the
                                                  Widget box and can be used to strip away
                                                  namespaces.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The <db:code>&lt;addpagemethod&gt;</db:code> tag tells
                                        <db:emphasis>Qt Designer</db:emphasis> and <db:link xlink:href="qtdoc/uic.html#uic">uic</db:link> which method should
                                    be used to add pages to a container widget. This applies to
                                    container widgets that require calling a particular method to
                                    add a child rather than adding the child by passing the parent.
                                    In particular, this is relevant for containers that are not a a
                                    subclass of the containers provided in <db:emphasis>Qt
                                        Designer</db:emphasis>, but are based on the notion of
                                        <db:emphasis>Current Page</db:emphasis>. In addition, you need to
                                    provide a container extension for them.</db:para>
         <db:para>The <db:code>&lt;propertyspecifications&gt;</db:code>
                                    element can contain a list of property meta information.
                                    Currently, properties of type string are supported. For these
                                    properties, the
                                        <db:code>&lt;stringpropertyspecification&gt;</db:code>
                                    tag can be used. This tag has the following attributes:</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Attribute</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Presence</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Values</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Comment</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>name</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>required</db:para>
                  </db:td>
                  <db:td>
                     <db:para>Name of the property</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>type</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>required</db:para>
                  </db:td>
                  <db:td>
                     <db:para>See below table</db:para>
                  </db:td>
                  <db:td>
                     <db:para>The value of the attribute determines how
                                                  the property editor will handle them.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>notr</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>optional</db:para>
                  </db:td>
                  <db:td>
                     <db:para>"true", "false"</db:para>
                  </db:td>
                  <db:td>
                     <db:para>If the attribute is "true", the value is
                                                  not meant to be translated.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>Values of the <db:code>type</db:code> attribute of the
                                    string property:</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Type</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>"richtext"</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Rich text.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>"multiline"</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Multi-line plain text.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>"singleline"</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Single-line plain text.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>"stylesheet"</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>A CSS-style sheet.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>"objectname"</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>An object name (restricted set of valid
                                                  characters).</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>"url"</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>URL, file name.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section>
         <db:title>See Also</db:title>
         <db:simplelist>
            <db:member>
               <db:link xlink:href="designer-using-custom-widgets.html">Using Custom Widgets with Qt Designer</db:link>
            </db:member>
            <db:member>
               <db:link xlink:href="designer-creating-custom-widgets-extensions.html">Creating
                                    Custom Widget Extensions</db:link>
            </db:member>
         </db:simplelist>
      </db:section>
   </db:section>
   <db:section xml:id="plugin-requirements">
      <db:title>Plugin Requirements</db:title>
      <db:para>In order for plugins to work correctly on all platforms, you
                                    need to ensure that they export the symbols needed by <db:emphasis>Qt
                                        Designer</db:emphasis>.</db:para>
      <db:para>First of all, the plugin class must be exported in order for
                                    the plugin to be loaded by <db:emphasis>Qt Designer</db:emphasis>. Use the
                                        <db:code><db:link xlink:href="qtcore/qtplugin.html#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>()</db:code> macro to do this. Also, the
                                        <db:code><db:link xlink:href="qdesignercustomwidgetinterface.html#QDESIGNER_WIDGET_EXPORT">QDESIGNER_WIDGET_EXPORT</db:link></db:code> macro must be used to
                                    define each custom widget class within a plugin, that <db:emphasis>Qt
                                        Designer</db:emphasis> will instantiate.</db:para>
      <db:section>
         <db:title>See Also</db:title>
         <db:simplelist>
            <db:member>
               <db:link xlink:href="designer-using-custom-widgets.html">Using Custom Widgets with Qt Designer</db:link>
            </db:member>
            <db:member>
               <db:link xlink:href="designer-creating-custom-widgets-extensions.html">Creating
                                    Custom Widget Extensions</db:link>
            </db:member>
         </db:simplelist>
      </db:section>
   </db:section>
   <db:section xml:id="creating-well-behaved-widgets">
      <db:title>Creating Well Behaved
                                    Widgets</db:title>
      <db:para>Some custom widgets have special user interface features
                                    that may make them behave differently to many of the standard
                                    widgets found in <db:emphasis>Qt Designer</db:emphasis>. Specifically, if
                                    a custom widget grabs the keyboard as a result of a call to
                                        <db:code><db:link xlink:href="qtwidgets/qwidget.html#grabKeyboard">QWidget::grabKeyboard</db:link>()</db:code>, the operation of
                                        <db:emphasis>Qt Designer</db:emphasis> will be affected.</db:para>
      <db:para>To give custom widgets special behavior in <db:emphasis>Qt
                                        Designer</db:emphasis>, provide an implementation of the
                                    initialize() function to configure the widget construction
                                    process for <db:emphasis>Qt Designer</db:emphasis> specific behavior. This
                                    function will be called for the first time before any calls to
                                    createWidget() and could perhaps set an internal flag that can
                                    be tested later when <db:emphasis>Qt Designer</db:emphasis> calls the
                                    plugin's createWidget() function.</db:para>
      <db:section>
         <db:title>See Also</db:title>
         <db:simplelist>
            <db:member>
               <db:link xlink:href="designer-using-custom-widgets.html">Using Custom Widgets with Qt Designer</db:link>
            </db:member>
            <db:member>
               <db:link xlink:href="designer-creating-custom-widgets-extensions.html">Creating
                                    Custom Widget Extensions</db:link>
            </db:member>
         </db:simplelist>
      </db:section>
   </db:section>
   <db:section xml:id="building-and-installing-the-plugin">
      <db:title>Building and
                                    Installing the Plugin</db:title>
      <db:para/>
      <db:section>
         <db:title>A Simple Plugin</db:title>
         <db:para>The <db:link xlink:href="qtdesigner-customwidgetplugin-example.html">Custom
                                        Widget Plugin Example</db:link> demonstrates a simple
                                        <db:emphasis>Qt Designer</db:emphasis> plugin.</db:para>
         <db:para>The <db:code>.pro</db:code> file for a plugin must
                                    specify the headers and sources for both the custom widget and
                                    the plugin interface. Typically, this file only has to specify
                                    that the plugin's project is to be built as a library, but with
                                    specific plugin support for <db:emphasis>Qt Designer</db:emphasis>. This
                                    is done with the following declarations:</db:para>
         <db:programlisting>HEADERS = analogclock.h \ customwidgetplugin.h
                                    SOURCES = analogclock.cpp \ customwidgetplugin.cpp OTHER_FILES
                                    += analogclock.json</db:programlisting>
         <db:para>If Qt is configured to build in both debug and release
                                    modes, <db:emphasis>Qt Designer</db:emphasis> will be built in release
                                    mode. When this occurs, it is necessary to ensure that plugins
                                    are also built in release mode. To do this, include the
                                    following declaration in the plugin's
                                        <db:code>.pro</db:code> file:</db:para>
         <db:programlisting>CONFIG += release</db:programlisting>
         <db:para>If plugins are built in a mode that is incompatible with
                                        <db:emphasis>Qt Designer</db:emphasis>, they will not be loaded and
                                    installed. For more information about plugins, see the <db:link xlink:href="qtdoc/plugins-howto.html">Plugins HOWTO</db:link>
                                    document.</db:para>
         <db:para>It is also necessary to ensure that the plugin is installed
                                    together with other <db:emphasis>Qt Designer</db:emphasis> widget
                                    plugins:</db:para>
         <db:programlisting>target.path = $$[QT_INSTALL_PLUGINS]/designer
                                    INSTALLS += target</db:programlisting>
         <db:para>The <db:code>$[QT_INSTALL_PLUGINS]</db:code> variable is
                                    a placeholder to the location of the installed Qt plugins. You
                                    can configure <db:emphasis>Qt Designer</db:emphasis> to look for plugins
                                    in other locations by setting the
                                        <db:code>QT_PLUGIN_PATH</db:code> environment variable
                                    before running the application.</db:para>
         <db:note>
            <db:para>
               <db:emphasis>Qt Designer</db:emphasis> will
                                    look for a <db:code>designer</db:code> subdirectory in each
                                    path supplied.</db:para>
         </db:note>
         <db:para>See <db:code><db:link xlink:href="qtcore/qcoreapplication.html#libraryPaths">QCoreApplication::libraryPaths</db:link>()</db:code> for more
                                    information about customizing paths for libraries and plugins
                                    with Qt applications.</db:para>
      </db:section>
      <db:section>
         <db:title>Splitting up the Plugin</db:title>
         <db:para>In a real world scenario, you do not want to have
                                    dependencies of the application making use of the custom widgets
                                    to the <db:emphasis>Qt Designer</db:emphasis> headers and libraries as
                                    introduced by the simple approach explained above.</db:para>
         <db:para>There are two ways to resolve this:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>Create a <db:code>.pri</db:code> file that contains
                                        the headers sources and sources of the custom
                                            widget:<db:programlisting> INCLUDEPATH += $$PWD HEADERS
                                                += $$PWD/analogclock.h SOURCES += $$PWD/analogclock.cpp</db:programlisting>
                  <db:programlisting>include(customwidget.pri)</db:programlisting>
               </db:para>
               <db:para>This file would then be included by the
                                                <db:code>.pro</db:code> file of the plugin and
                                            the application:</db:para>
               <db:para>Running <db:code>qmake -Wall</db:code> on the
                                                <db:code>.pro</db:code> files causes a warning
                                            to be printed if an included <db:code>.pri</db:code>
                                            file cannot be found.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Create a standalone shared library containing the
                                        custom widgets only as described in <db:link xlink:href="qtdoc/sharedlibrary.html">Creating Shared
                                            Libraries</db:link>.</db:para>
               <db:para>This library would then be
                                            used by the application as well as by the <db:emphasis>Qt
                                                Designer</db:emphasis> plugin. Care must be taken to
                                            ensure that the plugin can locate the library at
                                            run-time.</db:para>
            </db:listitem>
         </db:itemizedlist>
      </db:section>
      <db:section>
         <db:title>See Also</db:title>
         <db:simplelist>
            <db:member>
               <db:link xlink:href="designer-using-custom-widgets.html">Using Custom Widgets with Qt Designer</db:link>
            </db:member>
            <db:member>
               <db:link xlink:href="designer-creating-custom-widgets-extensions.html">Creating
                                    Custom Widget Extensions</db:link>
            </db:member>
         </db:simplelist>
      </db:section>
   </db:section>
   <db:section xml:id="related-examples">
      <db:title>Related Examples</db:title>
      <db:para>For more information on using custom widgets in <db:emphasis>Qt
                                        Designer</db:emphasis>, refer to the <db:link xlink:href="qtdesigner-customwidgetplugin-example.html">Custom
                                        Widget Plugin</db:link> and <db:link xlink:href="qtdesigner-worldtimeclockplugin-example.html">World
                                        Time Clock Plugin</db:link> examples for more information
                                    about using custom widgets in <db:emphasis>Qt Designer</db:emphasis>.
                                    Also, you can use the <db:code><db:link xlink:href="qdesignercustomwidgetcollectioninterface.html">QDesignerCustomWidgetCollectionInterface</db:link></db:code> class to
                                    combine several custom widgets into a single library.</db:para>
      <db:section>
         <db:title>See Also</db:title>
         <db:simplelist>
            <db:member>
               <db:link xlink:href="designer-using-custom-widgets.html">Using Custom Widgets with Qt Designer</db:link>
            </db:member>
            <db:member>
               <db:link xlink:href="designer-creating-custom-widgets-extensions.html">Creating
                                    Custom Widget Extensions</db:link>
            </db:member>
         </db:simplelist>
      </db:section>
   </db:section>
</db:article>
