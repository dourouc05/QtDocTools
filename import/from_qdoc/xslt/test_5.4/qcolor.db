<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.0"
            xml:lang="en">
   <db:title>QColor Class</db:title>
   <db:classsynopsis>
      <db:ooclass>
         <db:classname>QColor</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="header">#include &lt;QColor&gt;</db:classsynopsisinfo>
      <db:classsynopsisinfo role="qmake"> QT += gui</db:classsynopsisinfo>
      <db:constructorsynopsis xlink:href="#QColor">
         <db:methodname>QColor</db:methodname>
         <db:void/>
      </db:constructorsynopsis>
      <db:constructorsynopsis xlink:href="#QColor-2">
         <db:methodname>QColor</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  r ,  int  g ,  int  b ,  int  a  = 255)</db:exceptionname>
      </db:constructorsynopsis>
      <db:constructorsynopsis xlink:href="#QColor-3">
         <db:methodname>QColor</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QRgb  color )</db:exceptionname>
      </db:constructorsynopsis>
      <db:constructorsynopsis xlink:href="#QColor-4">
         <db:methodname>QColor</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QString  &amp;  name )</db:exceptionname>
      </db:constructorsynopsis>
      <db:constructorsynopsis xlink:href="#QColor-5">
         <db:methodname>QColor</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  char  *  name )</db:exceptionname>
      </db:constructorsynopsis>
      <db:constructorsynopsis xlink:href="#QColor-6">
         <db:methodname>QColor</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QColor  &amp;  color )</db:exceptionname>
      </db:constructorsynopsis>
      <db:constructorsynopsis xlink:href="#QColor-8">
         <db:methodname>QColor</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( Qt::GlobalColor  color )</db:exceptionname>
      </db:constructorsynopsis>
      <db:methodsynopsis xlink:href="alpha">
         <db:type>int</db:type>
         <db:methodname>alpha</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="alphaF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>alphaF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="black">
         <db:type>int</db:type>
         <db:methodname>black</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="blackF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>blackF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="blue">
         <db:type>int</db:type>
         <db:methodname>blue</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="blueF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>blueF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="colorNames">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qtcore/qstringlist.html">QStringList</db:type>
         <db:methodname>colorNames</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="convertTo">
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>convertTo</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( Spec  colorSpec ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="cyan">
         <db:type>int</db:type>
         <db:methodname>cyan</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="cyanF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>cyanF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="darker">
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>darker</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  factor  = 200) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="fromCmyk">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>fromCmyk</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  c ,  int  m ,  int  y ,  int  k ,  int  a  = 255)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="fromCmykF">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>fromCmykF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  c ,  qreal  m ,  qreal  y ,  qreal  k ,  qreal  a  = 1.0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="fromHsl">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>fromHsl</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  h ,  int  s ,  int  l ,  int  a  = 255)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="fromHslF">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>fromHslF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  h ,  qreal  s ,  qreal  l ,  qreal  a  = 1.0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="fromHsv">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>fromHsv</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  h ,  int  s ,  int  v ,  int  a  = 255)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="fromHsvF">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>fromHsvF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  h ,  qreal  s ,  qreal  v ,  qreal  a  = 1.0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="fromRgb">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>fromRgb</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QRgb  rgb )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="fromRgb-2">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>fromRgb</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  r ,  int  g ,  int  b ,  int  a  = 255)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="fromRgbF">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>fromRgbF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  r ,  qreal  g ,  qreal  b ,  qreal  a  = 1.0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="fromRgba">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>fromRgba</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QRgb  rgba )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="getCmyk">
         <db:void/>
         <db:methodname>getCmyk</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  *  c ,  int  *  m ,  int  *  y ,  int  *  k ,  int  *  a  = 0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="getCmykF">
         <db:void/>
         <db:methodname>getCmykF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  *  c ,  qreal  *  m ,  qreal  *  y ,  qreal  *  k ,  qreal  *  a  = 0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="getHsl">
         <db:void/>
         <db:methodname>getHsl</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  *  h ,  int  *  s ,  int  *  l ,  int  *  a  = 0) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="getHslF">
         <db:void/>
         <db:methodname>getHslF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  *  h ,  qreal  *  s ,  qreal  *  l ,  qreal  *  a  = 0) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="getHsv">
         <db:void/>
         <db:methodname>getHsv</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  *  h ,  int  *  s ,  int  *  v ,  int  *  a  = 0) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="getHsvF">
         <db:void/>
         <db:methodname>getHsvF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  *  h ,  qreal  *  s ,  qreal  *  v ,  qreal  *  a  = 0) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="getRgb">
         <db:void/>
         <db:methodname>getRgb</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  *  r ,  int  *  g ,  int  *  b ,  int  *  a  = 0) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="getRgbF">
         <db:void/>
         <db:methodname>getRgbF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  *  r ,  qreal  *  g ,  qreal  *  b ,  qreal  *  a  = 0) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="green">
         <db:type>int</db:type>
         <db:methodname>green</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="greenF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>greenF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="hslHue">
         <db:type>int</db:type>
         <db:methodname>hslHue</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="hslHueF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>hslHueF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="hslSaturation">
         <db:type>int</db:type>
         <db:methodname>hslSaturation</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="hslSaturationF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>hslSaturationF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="hsvHue">
         <db:type>int</db:type>
         <db:methodname>hsvHue</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="hsvHueF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>hsvHueF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="hsvSaturation">
         <db:type>int</db:type>
         <db:methodname>hsvSaturation</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="hsvSaturationF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>hsvSaturationF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="hue">
         <db:type>int</db:type>
         <db:methodname>hue</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="hueF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>hueF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="isValid">
         <db:type>bool</db:type>
         <db:methodname>isValid</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="isValidColor">
         <db:modifier>static</db:modifier>
         <db:type>bool</db:type>
         <db:methodname>isValidColor</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QString  &amp;  name )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="lighter">
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>lighter</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  factor  = 150) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="lightness">
         <db:type>int</db:type>
         <db:methodname>lightness</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="lightnessF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>lightnessF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="magenta">
         <db:type>int</db:type>
         <db:methodname>magenta</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="magentaF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>magentaF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="name">
         <db:type xlink:href="qtcore/qstring.html">QString</db:type>
         <db:methodname>name</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="name-2">
         <db:type xlink:href="qtcore/qstring.html">QString</db:type>
         <db:methodname>name</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( NameFormat  format ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="red">
         <db:type>int</db:type>
         <db:methodname>red</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="redF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>redF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="rgb">
         <db:type xlink:href="qcolor.html#QRgb-typedef">QRgb</db:type>
         <db:methodname>rgb</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="rgba">
         <db:type xlink:href="qcolor.html#QRgb-typedef">QRgb</db:type>
         <db:methodname>rgba</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="saturation">
         <db:type>int</db:type>
         <db:methodname>saturation</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="saturationF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>saturationF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setAlpha">
         <db:void/>
         <db:methodname>setAlpha</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  alpha )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setAlphaF">
         <db:void/>
         <db:methodname>setAlphaF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  alpha )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setBlue">
         <db:void/>
         <db:methodname>setBlue</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  blue )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setBlueF">
         <db:void/>
         <db:methodname>setBlueF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  blue )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setCmyk">
         <db:void/>
         <db:methodname>setCmyk</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  c ,  int  m ,  int  y ,  int  k ,  int  a  = 255)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setCmykF">
         <db:void/>
         <db:methodname>setCmykF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  c ,  qreal  m ,  qreal  y ,  qreal  k ,  qreal  a  = 1.0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setGreen">
         <db:void/>
         <db:methodname>setGreen</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  green )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setGreenF">
         <db:void/>
         <db:methodname>setGreenF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  green )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setHsl">
         <db:void/>
         <db:methodname>setHsl</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  h ,  int  s ,  int  l ,  int  a  = 255)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setHslF">
         <db:void/>
         <db:methodname>setHslF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  h ,  qreal  s ,  qreal  l ,  qreal  a  = 1.0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setHsv">
         <db:void/>
         <db:methodname>setHsv</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  h ,  int  s ,  int  v ,  int  a  = 255)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setHsvF">
         <db:void/>
         <db:methodname>setHsvF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  h ,  qreal  s ,  qreal  v ,  qreal  a  = 1.0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setNamedColor">
         <db:void/>
         <db:methodname>setNamedColor</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QString  &amp;  name )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setRed">
         <db:void/>
         <db:methodname>setRed</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  red )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setRedF">
         <db:void/>
         <db:methodname>setRedF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  red )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setRgb">
         <db:void/>
         <db:methodname>setRgb</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  r ,  int  g ,  int  b ,  int  a  = 255)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setRgb-2">
         <db:void/>
         <db:methodname>setRgb</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QRgb  rgb )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setRgbF">
         <db:void/>
         <db:methodname>setRgbF</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  r ,  qreal  g ,  qreal  b ,  qreal  a  = 1.0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setRgba">
         <db:void/>
         <db:methodname>setRgba</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QRgb  rgba )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="spec">
         <db:type xlink:href="qcolor.html#Spec-enum">Spec</db:type>
         <db:methodname>spec</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toCmyk">
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>toCmyk</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toHsl">
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>toHsl</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toHsv">
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>toHsv</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toRgb">
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>toRgb</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="value">
         <db:type>int</db:type>
         <db:methodname>value</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="valueF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>valueF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="yellow">
         <db:type>int</db:type>
         <db:methodname>yellow</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="yellowF">
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:methodname>yellowF</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="operator-QVariant">
         <db:methodname>operator QVariant</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="operator-not-eq">
         <db:type>bool</db:type>
         <db:methodname>operator!=</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QColor  &amp;  color ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="operator-eq">
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>operator=</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QColor  &amp;  color )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="operator-eq-2">
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>operator=</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( Qt::GlobalColor  color )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="operator-eq-eq">
         <db:type>bool</db:type>
         <db:methodname>operator==</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QColor  &amp;  color ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="dark">
         <db:modifier>(obsolete)</db:modifier>
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>dark</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  factor  = 200) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="light">
         <db:modifier>(obsolete)</db:modifier>
         <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
         <db:methodname>light</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  factor  = 150) const</db:exceptionname>
      </db:methodsynopsis>
   </db:classsynopsis>
   <db:funcsynopsis xlink:href="#qAlpha">
      <db:funcprototype>
         <db:funcdef>
            <db:type>int</db:type>
            <db:function>qAlpha</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type xlink:href="qcolor.html#QRgb-typedef">QRgb</db:type>
            <db:parameter>rgba</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qBlue">
      <db:funcprototype>
         <db:funcdef>
            <db:type>int</db:type>
            <db:function>qBlue</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type xlink:href="qcolor.html#QRgb-typedef">QRgb</db:type>
            <db:parameter>rgb</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qGray">
      <db:funcprototype>
         <db:funcdef>
            <db:type>int</db:type>
            <db:function>qGray</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>int&lt;int&lt;int&gt;&gt;</db:type>
            <db:parameter>r</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>int&lt;int&gt;</db:type>
            <db:parameter>g</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>int</db:type>
            <db:parameter>b</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qGray-2">
      <db:funcprototype>
         <db:funcdef>
            <db:type>int</db:type>
            <db:function>qGray</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type xlink:href="qcolor.html#QRgb-typedef">QRgb</db:type>
            <db:parameter>rgb</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qGreen">
      <db:funcprototype>
         <db:funcdef>
            <db:type>int</db:type>
            <db:function>qGreen</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type xlink:href="qcolor.html#QRgb-typedef">QRgb</db:type>
            <db:parameter>rgb</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qPremultiply">
      <db:funcprototype>
         <db:funcdef>
            <db:type xlink:href="qcolor.html#QRgb-typedef">QRgb</db:type>
            <db:function>qPremultiply</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type xlink:href="qcolor.html#QRgb-typedef">QRgb</db:type>
            <db:parameter>rgb</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qRed">
      <db:funcprototype>
         <db:funcdef>
            <db:type>int</db:type>
            <db:function>qRed</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type xlink:href="qcolor.html#QRgb-typedef">QRgb</db:type>
            <db:parameter>rgb</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qRgb">
      <db:funcprototype>
         <db:funcdef>
            <db:type xlink:href="qcolor.html#QRgb-typedef">QRgb</db:type>
            <db:function>qRgb</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>int&lt;int&lt;int&gt;&gt;</db:type>
            <db:parameter>r</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>int&lt;int&gt;</db:type>
            <db:parameter>g</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>int</db:type>
            <db:parameter>b</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qRgba">
      <db:funcprototype>
         <db:funcdef>
            <db:type xlink:href="qcolor.html#QRgb-typedef">QRgb</db:type>
            <db:function>qRgba</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>int&lt;int&lt;int&lt;int&gt;&gt;&gt;</db:type>
            <db:parameter>r</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>int&lt;int&lt;int&gt;&gt;</db:type>
            <db:parameter>g</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>int&lt;int&gt;</db:type>
            <db:parameter>b</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>int</db:type>
            <db:parameter>a</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qUnpremultiply">
      <db:funcprototype>
         <db:funcdef>
            <db:type xlink:href="qcolor.html#QRgb-typedef">QRgb</db:type>
            <db:function>qUnpremultiply</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type xlink:href="qcolor.html#QRgb-typedef">QRgb</db:type>
            <db:parameter>rgb</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#operator-lt-lt-41">
      <db:funcprototype>
         <db:funcdef>
            <db:type xlink:href="qtcore/qdatastream.html">QDataStream</db:type>
            <db:function>operator&lt;&lt;</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>QDataStream&lt;QColor&gt;</db:type>
            <db:parameter>stream</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
            <db:parameter>color</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#operator-gt-gt-17">
      <db:funcprototype>
         <db:funcdef>
            <db:type xlink:href="qtcore/qdatastream.html">QDataStream</db:type>
            <db:function>operator&gt;&gt;</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>QDataStream&lt;QColor&gt;</db:type>
            <db:parameter>stream</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type xlink:href="qcolor.html#QColor">QColor</db:type>
            <db:parameter>color</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> class provides colors based on RGB, HSV or CMYK values.</db:para>
      <db:para>A color is normally specified in terms of RGB (red, green, and blue) components, but it is also possible to specify it in terms of HSV (hue, saturation, and value) and CMYK (cyan, magenta, yellow and black) components. In addition a color can be specified using a color name. The color name can be any of the SVG 1.0 color names.</db:para>
      <db:informaltable>
         <db:thead>
            <db:tr>
               <db:th>
                  <db:para>RGB</db:para>
               </db:th>
               <db:th>
                  <db:para>HSV</db:para>
               </db:th>
               <db:th>
                  <db:para>CMYK</db:para>
               </db:th>
            </db:tr>
         </db:thead>
         <db:tbody>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:inlinemediaobject>
                        <db:imageobject>
                           <db:imagedata fileref="images/qcolor-rgb.png"/>
                        </db:imageobject>
                     </db:inlinemediaobject>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>
                     <db:inlinemediaobject>
                        <db:imageobject>
                           <db:imagedata fileref="images/qcolor-hsv.png"/>
                        </db:imageobject>
                     </db:inlinemediaobject>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>
                     <db:inlinemediaobject>
                        <db:imageobject>
                           <db:imagedata fileref="images/qcolor-cmyk.png"/>
                        </db:imageobject>
                     </db:inlinemediaobject>
                  </db:para>
               </db:td>
            </db:tr>
         </db:tbody>
      </db:informaltable>
      <db:para>The <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> constructor creates the color based on RGB values. To create a <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> based on either HSV or CMYK values, use the <db:code><db:link xlink:href="qcolor.html#toHsv">toHsv</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#toCmyk">toCmyk</db:link>()</db:code> functions respectively. These functions return a copy of the color using the desired format. In addition the static <db:code><db:link xlink:href="qcolor.html#fromRgb">fromRgb</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#fromHsv">fromHsv</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#fromCmyk">fromCmyk</db:link>()</db:code> functions create colors from the specified values. Alternatively, a color can be converted to any of the three formats using the <db:code><db:link xlink:href="qcolor.html#convertTo">convertTo</db:link>()</db:code> function (returning a copy of the color in the desired format), or any of the <db:code><db:link xlink:href="qcolor.html#setRgb">setRgb</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#setHsv">setHsv</db:link>()</db:code>
                                    and <db:code><db:link xlink:href="qcolor.html#setCmyk">setCmyk</db:link>()</db:code> functions altering <db:emphasis>this</db:emphasis> color's format. The <db:code><db:link xlink:href="qcolor.html#spec">spec</db:link>()</db:code> function tells how the color was specified.</db:para>
      <db:para>A color can be set by passing an RGB string (such as "#112233"), or an ARGB string (such as "#ff112233") or a color name (such as "blue"), to the <db:code><db:link xlink:href="qcolor.html#setNamedColor">setNamedColor</db:link>()</db:code> function. The color names are taken from the SVG 1.0 color names. The <db:code><db:link xlink:href="qcolor.html#name">name</db:link>()</db:code> function returns the name of the color in the format "#RRGGBB". Colors can also be set using <db:code><db:link xlink:href="qcolor.html#setRgb">setRgb</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#setHsv">setHsv</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#setCmyk">setCmyk</db:link>()</db:code>. To get a lighter or darker color use the <db:code><db:link xlink:href="qcolor.html#lighter">lighter</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#darker">darker</db:link>()</db:code> functions respectively.</db:para>
      <db:para>The <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code> function indicates whether a <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> is legal at all. For example, a RGB color with RGB values out of range is illegal. For performance reasons, <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> mostly disregards illegal colors, and for that reason, the result of using an invalid color is undefined.</db:para>
      <db:para>The color components can be retrieved individually, e.g with <db:code><db:link xlink:href="qcolor.html#red">red</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#hue">hue</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#cyan">cyan</db:link>()</db:code>. The values of the color components can also be retrieved in one go using the <db:code><db:link xlink:href="qcolor.html#getRgb">getRgb</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#getHsv">getHsv</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#getCmyk">getCmyk</db:link>()</db:code> functions. Using the RGB color model, the color components can in addition be accessed with <db:code><db:link xlink:href="qcolor.html#rgb">rgb</db:link>()</db:code>.</db:para>
      <db:para>There are several related non-members: <db:code><db:link xlink:href="qcolor.html#QRgb-typedef">QRgb</db:link></db:code> is a typdef for an unsigned int representing the RGB value triplet (r, g, b). Note that it also can hold a value for the alpha-channel (for more information, see the <db:link xlink:href="qcolor.html#alpha-blended-drawing">Alpha-Blended Drawing</db:link> section). The <db:code><db:link xlink:href="qcolor.html#qRed">qRed</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#qBlue">qBlue</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#qGreen">qGreen</db:link>()</db:code> functions return the respective component of the given <db:code><db:link xlink:href="qcolor.html#QRgb-typedef">QRgb</db:link></db:code> value, while the <db:code><db:link xlink:href="qcolor.html#qRgb">qRgb</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#qRgba">qRgba</db:link>()</db:code> functions create and return the <db:code><db:link xlink:href="qcolor.html#QRgb-typedef">QRgb</db:link></db:code> triplet based on the given component values. Finally, the <db:code><db:link xlink:href="qcolor.html#qAlpha">qAlpha</db:link>()</db:code> function returns the alpha
                                    component of the provided <db:code><db:link xlink:href="qcolor.html#QRgb-typedef">QRgb</db:link></db:code>, and the <db:code><db:link xlink:href="qcolor.html#qGray">qGray</db:link>()</db:code> function calculates and return a gray value based on the given value.</db:para>
      <db:para>
         <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> is platform and device independent. The <db:code><db:link xlink:href="qtwidgets/qcolormap.html">QColormap</db:link></db:code> class maps the color to the hardware.</db:para>
      <db:para>For more information about painting in general, see the <db:link xlink:href="paintsystem.html">Paint System</db:link> documentation.</db:para>
      <db:section xml:id="integer-vs-floating-point-precision">
         <db:title>Integer vs. Floating Point Precision</db:title>
         <db:para>
            <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> supports floating point precision and provides floating point versions of all the color components functions, e.g. <db:code><db:link xlink:href="qcolor.html#getRgbF">getRgbF</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#hueF">hueF</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#fromCmykF">fromCmykF</db:link>()</db:code>. Note that since the components are stored using 16-bit integers, there might be minor deviations between the values set using, for example, <db:code><db:link xlink:href="qcolor.html#setRgbF">setRgbF</db:link>()</db:code> and the values returned by the <db:code><db:link xlink:href="qcolor.html#getRgbF">getRgbF</db:link>()</db:code> function due to rounding.</db:para>
         <db:para>While the integer based functions take values in the range 0-255 (except <db:code><db:link xlink:href="qcolor.html#hue">hue</db:link>()</db:code> which must have values within the range 0-359), the floating point functions accept values in the range 0.0 - 1.0.</db:para>
      </db:section>
      <db:section xml:id="alpha-blended-drawing">
         <db:title>Alpha-Blended Drawing</db:title>
         <db:para>
            <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> also support alpha-blended outlining and filling. The alpha channel of a color specifies the transparency effect, 0 represents a fully transparent color, while 255 represents a fully opaque color. For example:</db:para>
         <db:programlisting>// Specify semi-transparent red painter.setBrush(QColor(255,0,0,127)); painter.drawRect(0,0, width()/2, height()); // Specify semi-transparent blue painter.setBrush(QColor(0,0,255,127)); painter.drawRect(0,0, width(), height()/2);</db:programlisting>
         <db:para>The code above produces the following output:</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:imageobject>
                  <db:imagedata fileref="images/alphafill.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>The alpha channel of a color can be retrieved and set using the <db:code><db:link xlink:href="qcolor.html#alpha">alpha</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#setAlpha">setAlpha</db:link>()</db:code> functions if its value is an integer, and <db:code><db:link xlink:href="qcolor.html#alphaF">alphaF</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#setAlphaF">setAlphaF</db:link>()</db:code> if its value is qreal (double). By default, the alpha-channel is set to 255 (opaque). To retrieve and set <db:emphasis>all</db:emphasis> the RGB color components (including the alpha-channel) in one go, use the <db:code><db:link xlink:href="qcolor.html#rgba">rgba</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#setRgba">setRgba</db:link>()</db:code> functions.</db:para>
      </db:section>
      <db:section xml:id="predefined-colors">
         <db:title>Predefined Colors</db:title>
         <db:para>There are 20 predefined QColors described by the <db:code><db:link xlink:href="qtcore/qt.html#GlobalColor-enum">Qt::GlobalColor</db:link></db:code> enum, including black, white, primary and secondary colors, darker versions of these colors and three shades of gray. <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> also recognizes a variety of color names; the static <db:code><db:link xlink:href="qcolor.html#colorNames">colorNames</db:link>()</db:code> function returns a <db:code><db:link xlink:href="qtcore/qstringlist.html">QStringList</db:link></db:code> color names that <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> knows about.</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:alt>Qt Colors</db:alt>
               <db:imageobject>
                  <db:imagedata fileref="images/qt-colors.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>Additionally, the <db:code><db:link xlink:href="qtcore/qt.html#GlobalColor-enum">Qt::color0</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qt.html#GlobalColor-enum">Qt::color1</db:link></db:code> and <db:code><db:link xlink:href="qtcore/qt.html#GlobalColor-enum">Qt::transparent</db:link></db:code> colors are used for special purposes.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qtcore/qt.html#GlobalColor-enum">Qt::color0</db:link></db:code> (zero pixel value) and <db:code><db:link xlink:href="qtcore/qt.html#GlobalColor-enum">Qt::color1</db:link></db:code> (non-zero pixel value) are special colors for drawing in QBitmaps. Painting with <db:code><db:link xlink:href="qtcore/qt.html#GlobalColor-enum">Qt::color0</db:link></db:code> sets the bitmap bits to 0 (transparent; i.e., background), and painting with <db:code><db:link xlink:href="qtcore/qt.html#GlobalColor-enum">Qt::color1</db:link></db:code> sets the bits to 1 (opaque; i.e., foreground).</db:para>
         <db:para>
            <db:code><db:link xlink:href="qtcore/qt.html#GlobalColor-enum">Qt::transparent</db:link></db:code> is used to indicate a transparent pixel. When painting with this value, a pixel value will be used that is appropriate for the underlying pixel format in use.</db:para>
      </db:section>
      <db:section xml:id="the-hsv-color-model">
         <db:title>The HSV Color Model</db:title>
         <db:para>The RGB model is hardware-oriented. Its representation is close to what most monitors show. In contrast, HSV represents color in a way more suited to the human perception of color. For example, the relationships "stronger than", "darker than", and "the opposite of" are easily expressed in HSV but are much harder to express in RGB.</db:para>
         <db:para>HSV, like RGB, has three components:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>H, for hue, is in the range 0 to 359 if the color is chromatic (not gray), or meaningless if it is gray. It represents degrees on the color wheel familiar to most people. Red is 0 (degrees), green is 120, and blue is 240.<db:inlinemediaobject>
                     <db:imageobject>
                        <db:imagedata fileref="images/qcolor-hue.png"/>
                     </db:imageobject>
                  </db:inlinemediaobject>
               </db:para>
               <db:informalfigure>
                  <db:mediaobject>
                     <db:imageobject>
                        <db:imagedata fileref="images/qcolor-hue.png"/>
                     </db:imageobject>
                  </db:mediaobject>
               </db:informalfigure>
            </db:listitem>
            <db:listitem>
               <db:para>S, for saturation, is in the range 0 to 255, and the bigger it is, the stronger the color is. Grayish colors have saturation near 0; very strong colors have saturation near 255.<db:inlinemediaobject>
                     <db:imageobject>
                        <db:imagedata fileref="images/qcolor-saturation.png"/>
                     </db:imageobject>
                  </db:inlinemediaobject>
               </db:para>
               <db:informalfigure>
                  <db:mediaobject>
                     <db:imageobject>
                        <db:imagedata fileref="images/qcolor-saturation.png"/>
                     </db:imageobject>
                  </db:mediaobject>
               </db:informalfigure>
            </db:listitem>
            <db:listitem>
               <db:para>V, for value, is in the range 0 to 255 and represents lightness or brightness of the color. 0 is black; 255 is as far from black as possible.<db:inlinemediaobject>
                     <db:imageobject>
                        <db:imagedata fileref="images/qcolor-value.png"/>
                     </db:imageobject>
                  </db:inlinemediaobject>
               </db:para>
               <db:informalfigure>
                  <db:mediaobject>
                     <db:imageobject>
                        <db:imagedata fileref="images/qcolor-value.png"/>
                     </db:imageobject>
                  </db:mediaobject>
               </db:informalfigure>
            </db:listitem>
         </db:itemizedlist>
         <db:para>Here are some examples: pure red is H=0, S=255, V=255; a dark red, moving slightly towards the magenta, could be H=350 (equivalent to -10), S=255, V=180; a grayish light red could have H about 0 (say 350-359 or 0-10), S about 50-100, and S=255.</db:para>
         <db:para>Qt returns a hue value of -1 for achromatic colors. If you pass a hue value that is too large, Qt forces it into range. Hue 360 or 720 is treated as 0; hue 540 is treated as 180.</db:para>
         <db:para>In addition to the standard HSV model, Qt provides an alpha-channel to feature <db:link xlink:href="qcolor.html#alpha-blended-drawing">alpha-blended drawing</db:link>.</db:para>
      </db:section>
      <db:section xml:id="the-hsl-color-model">
         <db:title>The HSL Color Model</db:title>
         <db:para>HSL is similar to HSV. Instead of value parameter from HSV, HSL has the lightness parameter. The lightness parameter goes from black to color and from color to white. If you go outside at the night its black or dark gray. At day its colorful but if you look in a really strong light a things they are going to white and wash out.</db:para>
      </db:section>
      <db:section xml:id="the-cmyk-color-model">
         <db:title>The CMYK Color Model</db:title>
         <db:para>While the RGB and HSV color models are used for display on computer monitors, the CMYK model is used in the four-color printing process of printing presses and some hard-copy devices.</db:para>
         <db:para>CMYK has four components, all in the range 0-255: cyan (C), magenta (M), yellow (Y) and black (K). Cyan, magenta and yellow are called subtractive colors; the CMYK color model creates color by starting with a white surface and then subtracting color by applying the appropriate components. While combining cyan, magenta and yellow gives the color black, subtracting one or more will yield any other color. When combined in various percentages, these three colors can create the entire spectrum of colors.</db:para>
         <db:para>Mixing 100 percent of cyan, magenta and yellow <db:emphasis>does</db:emphasis> produce black, but the result is unsatisfactory since it wastes ink, increases drying time, and gives a muddy colour when printing. For that reason, black is added in professional printing to provide a solid black tone; hence the term 'four color process'.</db:para>
         <db:para>In addition to the standard CMYK model, Qt provides an alpha-channel to feature <db:link xlink:href="qcolor.html#alpha-blended-drawing">alpha-blended drawing</db:link>.</db:para>
      </db:section>
      <db:section>
         <db:title>See Also</db:title>
         <db:simplelist>
            <db:member>
               <db:code><db:link xlink:href="qpalette.html">QPalette</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qbrush.html">QBrush</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qtwidgets/qapplication.html#setColorSpec">QApplication::setColorSpec</db:link>()</db:code>
            </db:member>
         </db:simplelist>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Member Type Documentation</db:title>
      <db:section xml:id="NameFormat-enum">
         <db:title>enum QColor::​NameFormat</db:title>
         <db:para>How to format the output of the <db:code><db:link xlink:href="qcolor.html#name">name</db:link>()</db:code> function</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QColor::HexRgb</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>#RRGGBB A "#" character followed by three two-digit hexadecimal numbers (i.e. <db:code>#RRGGBB</db:code>).</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QColor::HexArgb</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>1</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>#AARRGGBB A "#" character followed by four two-digit hexadecimal numbers (i.e. <db:code>#AARRGGBB</db:code>).</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#name">name</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="Spec-enum">
         <db:title>enum QColor::​Spec</db:title>
         <db:para>The type of color specified, either RGB, HSV, CMYK or HSL.</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QColor::Rgb</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>1</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QColor::Hsv</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>2</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QColor::Cmyk</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>3</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QColor::Hsl</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>4</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QColor::Invalid</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#spec">spec</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#convertTo">convertTo</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Member Function Documentation</db:title>
      <db:section xml:id="QColor">
         <db:title>QColor::​QColor()</db:title>
         <db:para>Constructs an invalid color with the RGB value (0, 0, 0). An invalid color is a color that is not properly set up for the underlying window system.</db:para>
         <db:para>The alpha value of an invalid color is unspecified.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="QColor-2">
         <db:title>QColor::​QColor(int r, int g, int b, int a = 255)</db:title>
         <db:para>Constructs a color with the RGB value <db:emphasis>r</db:emphasis>, <db:emphasis>g</db:emphasis>, <db:emphasis>b</db:emphasis>, and the alpha-channel (transparency) value of <db:emphasis>a</db:emphasis>.</db:para>
         <db:para>The color is left invalid if any of the arguments are invalid.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setRgba">setRgba</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="QColor-3">
         <db:title>QColor::​QColor(QRgb color)</db:title>
         <db:para>Constructs a color with the value <db:emphasis>color</db:emphasis>. The alpha component is ignored and set to solid.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromRgb">fromRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="QColor-4">
         <db:title>QColor::​QColor(const QString &amp; name)</db:title>
         <db:para>Constructs a named color in the same way as <db:code><db:link xlink:href="qcolor.html#setNamedColor">setNamedColor</db:link>()</db:code> using the given <db:emphasis>name</db:emphasis>.</db:para>
         <db:para>The color is left invalid if the <db:emphasis>name</db:emphasis> cannot be parsed.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setNamedColor">setNamedColor</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#name">name</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="QColor-5">
         <db:title>QColor::​QColor(const char * name)</db:title>
         <db:para>Constructs a named color in the same way as <db:code><db:link xlink:href="qcolor.html#setNamedColor">setNamedColor</db:link>()</db:code> using the given <db:emphasis>name</db:emphasis>.</db:para>
         <db:para>The color is left invalid if the <db:emphasis>name</db:emphasis> cannot be parsed.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setNamedColor">setNamedColor</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#name">name</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="QColor-6">
         <db:title>QColor::​QColor(const QColor &amp; color)</db:title>
         <db:para>Constructs a color that is a copy of <db:emphasis>color</db:emphasis>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="QColor-8">
         <db:title>QColor::​QColor(Qt::GlobalColor color)</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Constructs a new color with a color value of <db:emphasis>color</db:emphasis>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#predefined-colors">Predefined Colors</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="alpha">
         <db:title>int QColor::​alpha() const</db:title>
         <db:para>Returns the alpha color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setAlpha">setAlpha</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#alphaF">alphaF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#alpha-blended-drawing">Alpha-Blended Drawing</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="alphaF">
         <db:title>qreal QColor::​alphaF() const</db:title>
         <db:para>Returns the alpha color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setAlphaF">setAlphaF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#alpha">alpha</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#alpha-blended-drawing">Alpha-Blended Drawing</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="black">
         <db:title>int QColor::​black() const</db:title>
         <db:para>Returns the black color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#blackF">blackF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getCmyk">getCmyk</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-cmyk-color-model">The CMYK Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="blackF">
         <db:title>qreal QColor::​blackF() const</db:title>
         <db:para>Returns the black color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#black">black</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getCmykF">getCmykF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-cmyk-color-model">The CMYK Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="blue">
         <db:title>int QColor::​blue() const</db:title>
         <db:para>Returns the blue color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setBlue">setBlue</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#blueF">blueF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getRgb">getRgb</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="blueF">
         <db:title>qreal QColor::​blueF() const</db:title>
         <db:para>Returns the blue color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setBlueF">setBlueF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#blue">blue</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getRgbF">getRgbF</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="colorNames">
         <db:title>[static] QStringList QColor::​colorNames()</db:title>
         <db:para>Returns a <db:code><db:link xlink:href="qtcore/qstringlist.html">QStringList</db:link></db:code> containing the color names Qt knows about.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:link xlink:href="qcolor.html#predefined-colors">Predefined Colors</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="convertTo">
         <db:title>QColor QColor::​convertTo(Spec colorSpec) const</db:title>
         <db:para>Creates a copy of <db:emphasis>this</db:emphasis> color in the format specified by <db:emphasis>colorSpec</db:emphasis>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#spec">spec</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#toCmyk">toCmyk</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#toHsv">toHsv</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#toRgb">toRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="cyan">
         <db:title>int QColor::​cyan() const</db:title>
         <db:para>Returns the cyan color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#cyanF">cyanF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getCmyk">getCmyk</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-cmyk-color-model">The CMYK Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="cyanF">
         <db:title>qreal QColor::​cyanF() const</db:title>
         <db:para>Returns the cyan color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#cyan">cyan</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getCmykF">getCmykF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-cmyk-color-model">The CMYK Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="darker">
         <db:title>QColor QColor::​darker(int factor = 200) const</db:title>
         <db:para>Returns a darker (or lighter) color, but does not change this object.</db:para>
         <db:para>If the <db:emphasis>factor</db:emphasis> is greater than 100, this functions returns a darker color. Setting <db:emphasis>factor</db:emphasis> to 300 returns a color that has one-third the brightness. If the <db:emphasis>factor</db:emphasis> is less than 100, the return color is lighter, but we recommend using the <db:code><db:link xlink:href="qcolor.html#lighter">lighter</db:link>()</db:code> function for this purpose. If the <db:emphasis>factor</db:emphasis> is 0 or negative, the return value is unspecified.</db:para>
         <db:para>The function converts the current RGB color to HSV, divides the value (V) component by <db:emphasis>factor</db:emphasis> and converts the color back to RGB.</db:para>
         <db:para>This function was introduced in Qt 4.3.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#lighter">lighter</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="fromCmyk">
         <db:title>[static] QColor QColor::​fromCmyk(int c, int m, int y, int k, int a = 255)</db:title>
         <db:para>Static convenience function that returns a <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> constructed from the given CMYK color values: <db:emphasis>c</db:emphasis> (cyan), <db:emphasis>m</db:emphasis> (magenta), <db:emphasis>y</db:emphasis> (yellow), <db:emphasis>k</db:emphasis> (black), and <db:emphasis>a</db:emphasis> (alpha-channel, i.e. transparency).</db:para>
         <db:para>All the values must be in the range 0-255.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#toCmyk">toCmyk</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromCmykF">fromCmykF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-cmyk-color-model">The CMYK Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="fromCmykF">
         <db:title>[static] QColor QColor::​fromCmykF(qreal c, qreal m, qreal y, qreal k, qreal a = 1.0)</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Static convenience function that returns a <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> constructed from the given CMYK color values: <db:emphasis>c</db:emphasis> (cyan), <db:emphasis>m</db:emphasis> (magenta), <db:emphasis>y</db:emphasis> (yellow), <db:emphasis>k</db:emphasis> (black), and <db:emphasis>a</db:emphasis> (alpha-channel, i.e. transparency).</db:para>
         <db:para>All the values must be in the range 0.0-1.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#toCmyk">toCmyk</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromCmyk">fromCmyk</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-cmyk-color-model">The CMYK Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="fromHsl">
         <db:title>[static] QColor QColor::​fromHsl(int h, int s, int l, int a = 255)</db:title>
         <db:para>Static convenience function that returns a <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> constructed from the HSV color values, <db:emphasis>h</db:emphasis> (hue), <db:emphasis>s</db:emphasis> (saturation), <db:emphasis>l</db:emphasis> (lightness), and <db:emphasis>a</db:emphasis> (alpha-channel, i.e. transparency).</db:para>
         <db:para>The value of <db:emphasis>s</db:emphasis>, <db:emphasis>l</db:emphasis>, and <db:emphasis>a</db:emphasis> must all be in the range 0-255; the value of <db:emphasis>h</db:emphasis> must be in the range 0-359.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#toHsl">toHsl</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromHslF">fromHslF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="fromHslF">
         <db:title>[static] QColor QColor::​fromHslF(qreal h, qreal s, qreal l, qreal a = 1.0)</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Static convenience function that returns a <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> constructed from the HSV color values, <db:emphasis>h</db:emphasis> (hue), <db:emphasis>s</db:emphasis> (saturation), <db:emphasis>l</db:emphasis> (lightness), and <db:emphasis>a</db:emphasis> (alpha-channel, i.e. transparency).</db:para>
         <db:para>All the values must be in the range 0.0-1.0.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#toHsl">toHsl</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromHsl">fromHsl</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="fromHsv">
         <db:title>[static] QColor QColor::​fromHsv(int h, int s, int v, int a = 255)</db:title>
         <db:para>Static convenience function that returns a <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> constructed from the HSV color values, <db:emphasis>h</db:emphasis> (hue), <db:emphasis>s</db:emphasis> (saturation), <db:emphasis>v</db:emphasis> (value), and <db:emphasis>a</db:emphasis> (alpha-channel, i.e. transparency).</db:para>
         <db:para>The value of <db:emphasis>s</db:emphasis>, <db:emphasis>v</db:emphasis>, and <db:emphasis>a</db:emphasis> must all be in the range 0-255; the value of <db:emphasis>h</db:emphasis> must be in the range 0-359.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#toHsv">toHsv</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromHsvF">fromHsvF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="fromHsvF">
         <db:title>[static] QColor QColor::​fromHsvF(qreal h, qreal s, qreal v, qreal a = 1.0)</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Static convenience function that returns a <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> constructed from the HSV color values, <db:emphasis>h</db:emphasis> (hue), <db:emphasis>s</db:emphasis> (saturation), <db:emphasis>v</db:emphasis> (value), and <db:emphasis>a</db:emphasis> (alpha-channel, i.e. transparency).</db:para>
         <db:para>All the values must be in the range 0.0-1.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#toHsv">toHsv</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromHsv">fromHsv</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="fromRgb">
         <db:title>[static] QColor QColor::​fromRgb(QRgb rgb)</db:title>
         <db:para>Static convenience function that returns a <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> constructed from the given <db:code><db:link xlink:href="qcolor.html#QRgb-typedef">QRgb</db:link></db:code> value <db:emphasis>rgb</db:emphasis>.</db:para>
         <db:para>The alpha component of <db:emphasis>rgb</db:emphasis> is ignored (i.e. it is automatically set to 255), use the <db:code><db:link xlink:href="qcolor.html#fromRgba">fromRgba</db:link>()</db:code> function to include the alpha-channel specified by the given <db:code><db:link xlink:href="qcolor.html#QRgb-typedef">QRgb</db:link></db:code> value.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromRgba">fromRgba</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromRgbF">fromRgbF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#toRgb">toRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="fromRgb-2">
         <db:title>[static] QColor QColor::​fromRgb(int r, int g, int b, int a = 255)</db:title>
         <db:para>Static convenience function that returns a <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> constructed from the RGB color values, <db:emphasis>r</db:emphasis> (red), <db:emphasis>g</db:emphasis> (green), <db:emphasis>b</db:emphasis> (blue), and <db:emphasis>a</db:emphasis> (alpha-channel, i.e. transparency).</db:para>
         <db:para>All the values must be in the range 0-255.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#toRgb">toRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromRgbF">fromRgbF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="fromRgbF">
         <db:title>[static] QColor QColor::​fromRgbF(qreal r, qreal g, qreal b, qreal a = 1.0)</db:title>
         <db:para>Static convenience function that returns a <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> constructed from the RGB color values, <db:emphasis>r</db:emphasis> (red), <db:emphasis>g</db:emphasis> (green), <db:emphasis>b</db:emphasis> (blue), and <db:emphasis>a</db:emphasis> (alpha-channel, i.e. transparency).</db:para>
         <db:para>All the values must be in the range 0.0-1.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromRgb">fromRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#toRgb">toRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="fromRgba">
         <db:title>[static] QColor QColor::​fromRgba(QRgb rgba)</db:title>
         <db:para>Static convenience function that returns a <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> constructed from the given <db:code><db:link xlink:href="qcolor.html#QRgb-typedef">QRgb</db:link></db:code> value <db:emphasis>rgba</db:emphasis>.</db:para>
         <db:para>Unlike the <db:code><db:link xlink:href="qcolor.html#fromRgb">fromRgb</db:link>()</db:code> function, the alpha-channel specified by the given <db:code><db:link xlink:href="qcolor.html#QRgb-typedef">QRgb</db:link></db:code> value is included.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromRgb">fromRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="getCmyk">
         <db:title>void QColor::​getCmyk(int * c, int * m, int * y, int * k, int * a = 0)</db:title>
         <db:para>Sets the contents pointed to by <db:emphasis>c</db:emphasis>, <db:emphasis>m</db:emphasis>, <db:emphasis>y</db:emphasis>, <db:emphasis>k</db:emphasis>, and <db:emphasis>a</db:emphasis>, to the cyan, magenta, yellow, black, and alpha-channel (transparency) components of the color's CMYK value.</db:para>
         <db:para>These components can be retrieved individually using the <db:code><db:link xlink:href="qcolor.html#cyan">cyan</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#magenta">magenta</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#yellow">yellow</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#black">black</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#alpha">alpha</db:link>()</db:code> functions.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setCmyk">setCmyk</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-cmyk-color-model">The CMYK Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="getCmykF">
         <db:title>void QColor::​getCmykF(qreal * c, qreal * m, qreal * y, qreal * k, qreal * a = 0)</db:title>
         <db:para>Sets the contents pointed to by <db:emphasis>c</db:emphasis>, <db:emphasis>m</db:emphasis>, <db:emphasis>y</db:emphasis>, <db:emphasis>k</db:emphasis>, and <db:emphasis>a</db:emphasis>, to the cyan, magenta, yellow, black, and alpha-channel (transparency) components of the color's CMYK value.</db:para>
         <db:para>These components can be retrieved individually using the <db:code><db:link xlink:href="qcolor.html#cyanF">cyanF</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#magentaF">magentaF</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#yellowF">yellowF</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#blackF">blackF</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#alphaF">alphaF</db:link>()</db:code> functions.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setCmykF">setCmykF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-cmyk-color-model">The CMYK Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="getHsl">
         <db:title>void QColor::​getHsl(int * h, int * s, int * l, int * a = 0) const</db:title>
         <db:para>Sets the contents pointed to by <db:emphasis>h</db:emphasis>, <db:emphasis>s</db:emphasis>, <db:emphasis>l</db:emphasis>, and <db:emphasis>a</db:emphasis>, to the hue, saturation, lightness, and alpha-channel (transparency) components of the color's HSL value.</db:para>
         <db:para>These components can be retrieved individually using the hueHsl(), saturationHsl(), <db:code><db:link xlink:href="qcolor.html#lightness">lightness</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#alpha">alpha</db:link>()</db:code> functions.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setHsl">setHsl</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="getHslF">
         <db:title>void QColor::​getHslF(qreal * h, qreal * s, qreal * l, qreal * a = 0) const</db:title>
         <db:para>Sets the contents pointed to by <db:emphasis>h</db:emphasis>, <db:emphasis>s</db:emphasis>, <db:emphasis>l</db:emphasis>, and <db:emphasis>a</db:emphasis>, to the hue, saturation, lightness, and alpha-channel (transparency) components of the color's HSL value.</db:para>
         <db:para>These components can be retrieved individually using the hueHslF(), saturationHslF(), <db:code><db:link xlink:href="qcolor.html#lightnessF">lightnessF</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#alphaF">alphaF</db:link>()</db:code> functions.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setHsl">setHsl</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="getHsv">
         <db:title>void QColor::​getHsv(int * h, int * s, int * v, int * a = 0) const</db:title>
         <db:para>Sets the contents pointed to by <db:emphasis>h</db:emphasis>, <db:emphasis>s</db:emphasis>, <db:emphasis>v</db:emphasis>, and <db:emphasis>a</db:emphasis>, to the hue, saturation, value, and alpha-channel (transparency) components of the color's HSV value.</db:para>
         <db:para>These components can be retrieved individually using the <db:code><db:link xlink:href="qcolor.html#hue">hue</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#saturation">saturation</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#value">value</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#alpha">alpha</db:link>()</db:code> functions.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setHsv">setHsv</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="getHsvF">
         <db:title>void QColor::​getHsvF(qreal * h, qreal * s, qreal * v, qreal * a = 0) const</db:title>
         <db:para>Sets the contents pointed to by <db:emphasis>h</db:emphasis>, <db:emphasis>s</db:emphasis>, <db:emphasis>v</db:emphasis>, and <db:emphasis>a</db:emphasis>, to the hue, saturation, value, and alpha-channel (transparency) components of the color's HSV value.</db:para>
         <db:para>These components can be retrieved individually using the <db:code><db:link xlink:href="qcolor.html#hueF">hueF</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#saturationF">saturationF</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#valueF">valueF</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#alphaF">alphaF</db:link>()</db:code> functions.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setHsv">setHsv</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="getRgb">
         <db:title>void QColor::​getRgb(int * r, int * g, int * b, int * a = 0) const</db:title>
         <db:para>Sets the contents pointed to by <db:emphasis>r</db:emphasis>, <db:emphasis>g</db:emphasis>, <db:emphasis>b</db:emphasis>, and <db:emphasis>a</db:emphasis>, to the red, green, blue, and alpha-channel (transparency) components of the color's RGB value.</db:para>
         <db:para>These components can be retrieved individually using the <db:code><db:link xlink:href="qcolor.html#red">red</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#green">green</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#blue">blue</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#alpha">alpha</db:link>()</db:code> functions.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#rgb">rgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setRgb">setRgb</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="getRgbF">
         <db:title>void QColor::​getRgbF(qreal * r, qreal * g, qreal * b, qreal * a = 0) const</db:title>
         <db:para>Sets the contents pointed to by <db:emphasis>r</db:emphasis>, <db:emphasis>g</db:emphasis>, <db:emphasis>b</db:emphasis>, and <db:emphasis>a</db:emphasis>, to the red, green, blue, and alpha-channel (transparency) components of the color's RGB value.</db:para>
         <db:para>These components can be retrieved individually using the <db:code><db:link xlink:href="qcolor.html#redF">redF</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#greenF">greenF</db:link>()</db:code>, <db:code><db:link xlink:href="qcolor.html#blueF">blueF</db:link>()</db:code> and <db:code><db:link xlink:href="qcolor.html#alphaF">alphaF</db:link>()</db:code> functions.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#rgb">rgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setRgb">setRgb</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="green">
         <db:title>int QColor::​green() const</db:title>
         <db:para>Returns the green color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setGreen">setGreen</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#greenF">greenF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getRgb">getRgb</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="greenF">
         <db:title>qreal QColor::​greenF() const</db:title>
         <db:para>Returns the green color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setGreenF">setGreenF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#green">green</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getRgbF">getRgbF</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="hslHue">
         <db:title>int QColor::​hslHue() const</db:title>
         <db:para>Returns the hue color component of this color.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHslF">getHslF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsl">getHsl</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="hslHueF">
         <db:title>qreal QColor::​hslHueF() const</db:title>
         <db:para>Returns the hue color component of this color.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#hue">hue</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHslF">getHslF</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="hslSaturation">
         <db:title>int QColor::​hslSaturation() const</db:title>
         <db:para>Returns the saturation color component of this color.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#saturationF">saturationF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsv">getHsv</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="hslSaturationF">
         <db:title>qreal QColor::​hslSaturationF() const</db:title>
         <db:para>Returns the saturation color component of this color.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#saturationF">saturationF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHslF">getHslF</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="hsvHue">
         <db:title>int QColor::​hsvHue() const</db:title>
         <db:para>Returns the hue color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#hueF">hueF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsv">getHsv</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="hsvHueF">
         <db:title>qreal QColor::​hsvHueF() const</db:title>
         <db:para>Returns the hue color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#hue">hue</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsvF">getHsvF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="hsvSaturation">
         <db:title>int QColor::​hsvSaturation() const</db:title>
         <db:para>Returns the saturation color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#saturationF">saturationF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsv">getHsv</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="hsvSaturationF">
         <db:title>qreal QColor::​hsvSaturationF() const</db:title>
         <db:para>Returns the saturation color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#saturation">saturation</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsvF">getHsvF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="hue">
         <db:title>int QColor::​hue() const</db:title>
         <db:para>Returns the hue color component of this color.</db:para>
         <db:para>The color is implicitly converted to HSV.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#hsvHue">hsvHue</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#hueF">hueF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsv">getHsv</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="hueF">
         <db:title>qreal QColor::​hueF() const</db:title>
         <db:para>Returns the hue color component of this color.</db:para>
         <db:para>The color is implicitly converted to HSV.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#hsvHueF">hsvHueF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#hue">hue</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsvF">getHsvF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="isValid">
         <db:title>bool QColor::​isValid() const</db:title>
         <db:para>Returns <db:code>true</db:code> if the color is valid; otherwise returns <db:code>false</db:code>.</db:para>
      </db:section>
      <db:section xml:id="isValidColor">
         <db:title>[static] bool QColor::​isValidColor(const QString &amp; name)</db:title>
         <db:para>Returns <db:code>true</db:code> if the <db:emphasis>name</db:emphasis> is a valid color name and can be used to construct a valid <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> object, otherwise returns false.</db:para>
         <db:para>It uses the same algorithm used in <db:code><db:link xlink:href="qcolor.html#setNamedColor">setNamedColor</db:link>()</db:code>.</db:para>
         <db:para>This function was introduced in Qt 4.7.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setNamedColor">setNamedColor</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="lighter">
         <db:title>QColor QColor::​lighter(int factor = 150) const</db:title>
         <db:para>Returns a lighter (or darker) color, but does not change this object.</db:para>
         <db:para>If the <db:emphasis>factor</db:emphasis> is greater than 100, this functions returns a lighter color. Setting <db:emphasis>factor</db:emphasis> to 150 returns a color that is 50% brighter. If the <db:emphasis>factor</db:emphasis> is less than 100, the return color is darker, but we recommend using the <db:code><db:link xlink:href="qcolor.html#darker">darker</db:link>()</db:code> function for this purpose. If the <db:emphasis>factor</db:emphasis> is 0 or negative, the return value is unspecified.</db:para>
         <db:para>The function converts the current RGB color to HSV, multiplies the value (V) component by <db:emphasis>factor</db:emphasis> and converts the color back to RGB.</db:para>
         <db:para>This function was introduced in Qt 4.3.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#darker">darker</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="lightness">
         <db:title>int QColor::​lightness() const</db:title>
         <db:para>Returns the lightness color component of this color.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#lightnessF">lightnessF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsl">getHsl</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="lightnessF">
         <db:title>qreal QColor::​lightnessF() const</db:title>
         <db:para>Returns the lightness color component of this color.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#value">value</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHslF">getHslF</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="magenta">
         <db:title>int QColor::​magenta() const</db:title>
         <db:para>Returns the magenta color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#magentaF">magentaF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getCmyk">getCmyk</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-cmyk-color-model">The CMYK Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="magentaF">
         <db:title>qreal QColor::​magentaF() const</db:title>
         <db:para>Returns the magenta color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#magenta">magenta</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getCmykF">getCmykF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-cmyk-color-model">The CMYK Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="name">
         <db:title>QString QColor::​name() const</db:title>
         <db:para>Returns the name of the color in the format "#RRGGBB"; i.e. a "#" character followed by three two-digit hexadecimal numbers.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setNamedColor">setNamedColor</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="name-2">
         <db:title>QString QColor::​name(NameFormat format) const</db:title>
         <db:para>Returns the name of the color in the specified <db:emphasis>format</db:emphasis>.</db:para>
         <db:para>This function was introduced in Qt 5.2.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setNamedColor">setNamedColor</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#NameFormat-enum">NameFormat</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="red">
         <db:title>int QColor::​red() const</db:title>
         <db:para>Returns the red color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setRed">setRed</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#redF">redF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getRgb">getRgb</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="redF">
         <db:title>qreal QColor::​redF() const</db:title>
         <db:para>Returns the red color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setRedF">setRedF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#red">red</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getRgbF">getRgbF</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="rgb">
         <db:title>QRgb QColor::​rgb() const</db:title>
         <db:para>Returns the RGB value of the color. The alpha value is opaque.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setRgb">setRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getRgb">getRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#rgba">rgba</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="rgba">
         <db:title>QRgb QColor::​rgba() const</db:title>
         <db:para>Returns the RGB value of the color, including its alpha.</db:para>
         <db:para>For an invalid color, the alpha value of the returned color is unspecified.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setRgba">setRgba</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#rgb">rgb</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="saturation">
         <db:title>int QColor::​saturation() const</db:title>
         <db:para>Returns the saturation color component of this color.</db:para>
         <db:para>The color is implicitly converted to HSV.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#hsvSaturation">hsvSaturation</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#saturationF">saturationF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsv">getHsv</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="saturationF">
         <db:title>qreal QColor::​saturationF() const</db:title>
         <db:para>Returns the saturation color component of this color.</db:para>
         <db:para>The color is implicitly converted to HSV.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#hsvSaturationF">hsvSaturationF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#saturation">saturation</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsvF">getHsvF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setAlpha">
         <db:title>void QColor::​setAlpha(int alpha)</db:title>
         <db:para>Sets the alpha of this color to <db:emphasis>alpha</db:emphasis>. Integer alpha is specified in the range 0-255.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#alpha">alpha</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#alphaF">alphaF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#alpha-blended-drawing">Alpha-Blended Drawing</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setAlphaF">
         <db:title>void QColor::​setAlphaF(qreal alpha)</db:title>
         <db:para>Sets the alpha of this color to <db:emphasis>alpha</db:emphasis>. qreal alpha is specified in the range 0.0-1.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#alphaF">alphaF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#alpha">alpha</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#alpha-blended-drawing">Alpha-Blended Drawing</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setBlue">
         <db:title>void QColor::​setBlue(int blue)</db:title>
         <db:para>Sets the blue color component of this color to <db:emphasis>blue</db:emphasis>. Integer components are specified in the range 0-255.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#blue">blue</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#blueF">blueF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setRgb">setRgb</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setBlueF">
         <db:title>void QColor::​setBlueF(qreal blue)</db:title>
         <db:para>Sets the blue color component of this color to <db:emphasis>blue</db:emphasis>. Float components are specified in the range 0.0-1.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#blueF">blueF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#blue">blue</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setRgbF">setRgbF</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setCmyk">
         <db:title>void QColor::​setCmyk(int c, int m, int y, int k, int a = 255)</db:title>
         <db:para>Sets the color to CMYK values, <db:emphasis>c</db:emphasis> (cyan), <db:emphasis>m</db:emphasis> (magenta), <db:emphasis>y</db:emphasis> (yellow), <db:emphasis>k</db:emphasis> (black), and <db:emphasis>a</db:emphasis> (alpha-channel, i.e. transparency).</db:para>
         <db:para>All the values must be in the range 0-255.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getCmyk">getCmyk</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setCmykF">setCmykF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-cmyk-color-model">The CMYK Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setCmykF">
         <db:title>void QColor::​setCmykF(qreal c, qreal m, qreal y, qreal k, qreal a = 1.0)</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Sets the color to CMYK values, <db:emphasis>c</db:emphasis> (cyan), <db:emphasis>m</db:emphasis> (magenta), <db:emphasis>y</db:emphasis> (yellow), <db:emphasis>k</db:emphasis> (black), and <db:emphasis>a</db:emphasis> (alpha-channel, i.e. transparency).</db:para>
         <db:para>All the values must be in the range 0.0-1.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getCmykF">getCmykF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setCmyk">setCmyk</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-cmyk-color-model">The CMYK Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setGreen">
         <db:title>void QColor::​setGreen(int green)</db:title>
         <db:para>Sets the green color component of this color to <db:emphasis>green</db:emphasis>. Integer components are specified in the range 0-255.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#green">green</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#greenF">greenF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setRgb">setRgb</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setGreenF">
         <db:title>void QColor::​setGreenF(qreal green)</db:title>
         <db:para>Sets the green color component of this color to <db:emphasis>green</db:emphasis>. Float components are specified in the range 0.0-1.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#greenF">greenF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#green">green</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setRgbF">setRgbF</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setHsl">
         <db:title>void QColor::​setHsl(int h, int s, int l, int a = 255)</db:title>
         <db:para>Sets a HSL color value; <db:emphasis>h</db:emphasis> is the hue, <db:emphasis>s</db:emphasis> is the saturation, <db:emphasis>l</db:emphasis> is the lightness and <db:emphasis>a</db:emphasis> is the alpha component of the HSL color.</db:para>
         <db:para>The saturation, value and alpha-channel values must be in the range 0-255, and the hue value must be greater than -1.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsl">getHsl</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setHslF">setHslF</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setHslF">
         <db:title>void QColor::​setHslF(qreal h, qreal s, qreal l, qreal a = 1.0)</db:title>
         <db:para>Sets a HSL color lightness; <db:emphasis>h</db:emphasis> is the hue, <db:emphasis>s</db:emphasis> is the saturation, <db:emphasis>l</db:emphasis> is the lightness and <db:emphasis>a</db:emphasis> is the alpha component of the HSL color.</db:para>
         <db:para>All the values must be in the range 0.0-1.0.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHslF">getHslF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setHsl">setHsl</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setHsv">
         <db:title>void QColor::​setHsv(int h, int s, int v, int a = 255)</db:title>
         <db:para>Sets a HSV color value; <db:emphasis>h</db:emphasis> is the hue, <db:emphasis>s</db:emphasis> is the saturation, <db:emphasis>v</db:emphasis> is the value and <db:emphasis>a</db:emphasis> is the alpha component of the HSV color.</db:para>
         <db:para>The saturation, value and alpha-channel values must be in the range 0-255, and the hue value must be greater than -1.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsv">getHsv</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setHsvF">setHsvF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setHsvF">
         <db:title>void QColor::​setHsvF(qreal h, qreal s, qreal v, qreal a = 1.0)</db:title>
         <db:para>Sets a HSV color value; <db:emphasis>h</db:emphasis> is the hue, <db:emphasis>s</db:emphasis> is the saturation, <db:emphasis>v</db:emphasis> is the value and <db:emphasis>a</db:emphasis> is the alpha component of the HSV color.</db:para>
         <db:para>All the values must be in the range 0.0-1.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsvF">getHsvF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setHsv">setHsv</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setNamedColor">
         <db:title>void QColor::​setNamedColor(const QString &amp; name)</db:title>
         <db:para>Sets the RGB value of this <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> to <db:emphasis>name</db:emphasis>, which may be in one of these formats:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>#RGB (each of R, G, and B is a single hex digit)</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>#RRGGBB</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>#AARRGGBB (Since 5.2)</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>#RRRGGGBBB</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>#RRRRGGGGBBBB</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>A name from the list of colors defined in the list of <db:link xlink:href="http://www.w3.org/TR/SVG/types.html#ColorKeywords">SVG color keyword names</db:link> provided by the World Wide Web Consortium; for example, "steelblue" or "gainsboro". These color names work on all platforms. Note that these color names are <db:emphasis>not</db:emphasis> the same as defined by the <db:code><db:link xlink:href="qtcore/qt.html#GlobalColor-enum">Qt::GlobalColor</db:link></db:code> enums, e.g. "green" and <db:code><db:link xlink:href="qtcore/qt.html#GlobalColor-enum">Qt::green</db:link></db:code> does not refer to the same color.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code>transparent</db:code> - representing the absence of a color.</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:para>The color is invalid if <db:emphasis>name</db:emphasis> cannot be parsed.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#QColor">QColor</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#name">name</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setRed">
         <db:title>void QColor::​setRed(int red)</db:title>
         <db:para>Sets the red color component of this color to <db:emphasis>red</db:emphasis>. Integer components are specified in the range 0-255.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#red">red</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#redF">redF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setRgb">setRgb</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setRedF">
         <db:title>void QColor::​setRedF(qreal red)</db:title>
         <db:para>Sets the red color component of this color to <db:emphasis>red</db:emphasis>. Float components are specified in the range 0.0-1.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#redF">redF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#red">red</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setRgbF">setRgbF</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setRgb">
         <db:title>void QColor::​setRgb(int r, int g, int b, int a = 255)</db:title>
         <db:para>Sets the RGB value to <db:emphasis>r</db:emphasis>, <db:emphasis>g</db:emphasis>, <db:emphasis>b</db:emphasis> and the alpha value to <db:emphasis>a</db:emphasis>.</db:para>
         <db:para>All the values must be in the range 0-255.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#rgb">rgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getRgb">getRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setRgbF">setRgbF</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setRgb-2">
         <db:title>void QColor::​setRgb(QRgb rgb)</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Sets the RGB value to <db:emphasis>rgb</db:emphasis>. The alpha value is set to opaque.</db:para>
      </db:section>
      <db:section xml:id="setRgbF">
         <db:title>void QColor::​setRgbF(qreal r, qreal g, qreal b, qreal a = 1.0)</db:title>
         <db:para>Sets the color channels of this color to <db:emphasis>r</db:emphasis> (red), <db:emphasis>g</db:emphasis> (green), <db:emphasis>b</db:emphasis> (blue) and <db:emphasis>a</db:emphasis> (alpha, transparency).</db:para>
         <db:para>All values must be in the range 0.0-1.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#rgb">rgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getRgbF">getRgbF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#setRgb">setRgb</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setRgba">
         <db:title>void QColor::​setRgba(QRgb rgba)</db:title>
         <db:para>Sets the RGB value to <db:emphasis>rgba</db:emphasis>, including its alpha.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#rgba">rgba</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#rgb">rgb</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="spec">
         <db:title>Spec QColor::​spec() const</db:title>
         <db:para>Returns how the color was specified.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:link xlink:href="qcolor.html#Spec-enum">Spec</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#convertTo">convertTo</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="toCmyk">
         <db:title>QColor QColor::​toCmyk() const</db:title>
         <db:para>Creates and returns a CMYK <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> based on this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromCmyk">fromCmyk</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#convertTo">convertTo</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-cmyk-color-model">The CMYK Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="toHsl">
         <db:title>QColor QColor::​toHsl() const</db:title>
         <db:para>Creates and returns an HSL <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> based on this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromHsl">fromHsl</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#convertTo">convertTo</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="toHsv">
         <db:title>QColor QColor::​toHsv() const</db:title>
         <db:para>Creates and returns an HSV <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> based on this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromHsv">fromHsv</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#convertTo">convertTo</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="toRgb">
         <db:title>QColor QColor::​toRgb() const</db:title>
         <db:para>Create and returns an RGB <db:code><db:link xlink:href="qcolor.html">QColor</db:link></db:code> based on this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#fromRgb">fromRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#convertTo">convertTo</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#isValid">isValid</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="value">
         <db:title>int QColor::​value() const</db:title>
         <db:para>Returns the value color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#valueF">valueF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsv">getHsv</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="valueF">
         <db:title>qreal QColor::​valueF() const</db:title>
         <db:para>Returns the value color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#value">value</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getHsvF">getHsvF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-hsv-color-model">The HSV Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="yellow">
         <db:title>int QColor::​yellow() const</db:title>
         <db:para>Returns the yellow color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#yellowF">yellowF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getCmyk">getCmyk</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-cmyk-color-model">The CMYK Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="yellowF">
         <db:title>qreal QColor::​yellowF() const</db:title>
         <db:para>Returns the yellow color component of this color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#yellow">yellow</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#getCmykF">getCmykF</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qcolor.html#the-cmyk-color-model">The CMYK Color Model</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="operator-QVariant">
         <db:title>QColor::​operator QVariant() const</db:title>
         <db:para>Returns the color as a <db:code><db:link xlink:href="qtcore/qvariant.html">QVariant</db:link></db:code>
         </db:para>
      </db:section>
      <db:section xml:id="operator-not-eq">
         <db:title>bool QColor::​operator!=(const QColor &amp; color) const</db:title>
         <db:para>Returns <db:code>true</db:code> if this color has a different RGB and alpha values from <db:emphasis>color</db:emphasis>; otherwise returns <db:code>false</db:code>.</db:para>
      </db:section>
      <db:section xml:id="operator-eq">
         <db:title>QColor &amp; QColor::​operator=(const QColor &amp; color)</db:title>
         <db:para>Assigns a copy of <db:emphasis>color</db:emphasis> to this color, and returns a reference to it.</db:para>
      </db:section>
      <db:section xml:id="operator-eq-2">
         <db:title>QColor &amp; QColor::​operator=(Qt::GlobalColor color)</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Assigns a copy of <db:emphasis>color</db:emphasis> and returns a reference to this color.</db:para>
      </db:section>
      <db:section xml:id="operator-eq-eq">
         <db:title>bool QColor::​operator==(const QColor &amp; color) const</db:title>
         <db:para>Returns <db:code>true</db:code> if this color has the same RGB and alpha values as <db:emphasis>color</db:emphasis>; otherwise returns <db:code>false</db:code>.</db:para>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Related Non-Members</db:title>
      <db:section xml:id="QRgb-typedef">
         <db:title>typedef QRgb</db:title>
         <db:para>An ARGB quadruplet on the format #AARRGGBB, equivalent to an unsigned int.</db:para>
         <db:para>The type also holds a value for the alpha-channel. The default alpha channel is <db:code>ff</db:code>, i.e opaque. For more information, see the <db:link xlink:href="qcolor.html#alpha-blended-drawing">Alpha-Blended Drawing</db:link> section.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#rgb">QColor::rgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#rgba">QColor::rgba</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>int qAlpha(QRgb rgba)</db:title>
         <db:para>Returns the alpha component of the ARGB quadruplet <db:emphasis>rgba</db:emphasis>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#qRgb">qRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#alpha">QColor::alpha</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>int qBlue(QRgb rgb)</db:title>
         <db:para>Returns the blue component of the ARGB quadruplet <db:emphasis>rgb</db:emphasis>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#qRgb">qRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#blue">QColor::blue</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>int qGray(int r, int g, int b)</db:title>
         <db:para>Returns a gray value (0 to 255) from the (<db:emphasis>r</db:emphasis>, <db:emphasis>g</db:emphasis>, <db:emphasis>b</db:emphasis>) triplet.</db:para>
         <db:para>The gray value is calculated using the formula (<db:emphasis>r</db:emphasis> * 11 + <db:emphasis>g</db:emphasis> * 16 + <db:emphasis>b</db:emphasis> * 5)/32.</db:para>
      </db:section>
      <db:section>
         <db:title>int qGray(QRgb rgb)</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Returns a gray value (0 to 255) from the given ARGB quadruplet <db:emphasis>rgb</db:emphasis>.</db:para>
         <db:para>The gray value is calculated using the formula (R * 11 + G * 16 + B * 5)/32; the alpha-channel is ignored.</db:para>
      </db:section>
      <db:section>
         <db:title>int qGreen(QRgb rgb)</db:title>
         <db:para>Returns the green component of the ARGB quadruplet <db:emphasis>rgb</db:emphasis>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#qRgb">qRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#green">QColor::green</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QRgb qPremultiply(QRgb rgb)</db:title>
         <db:para>Converts an unpremultiplied ARGB quadruplet <db:emphasis>rgb</db:emphasis> into a premultiplied ARGB quadruplet.</db:para>
         <db:para>This function was introduced in Qt 5.3.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#qUnpremultiply">qUnpremultiply</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>int qRed(QRgb rgb)</db:title>
         <db:para>Returns the red component of the ARGB quadruplet <db:emphasis>rgb</db:emphasis>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#qRgb">qRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#red">QColor::red</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QRgb qRgb(int r, int g, int b)</db:title>
         <db:para>Returns the ARGB quadruplet (255, <db:emphasis>r</db:emphasis>, <db:emphasis>g</db:emphasis>, <db:emphasis>b</db:emphasis>).</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#qRgba">qRgba</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#qRed">qRed</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#qGreen">qGreen</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#qBlue">qBlue</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QRgb qRgba(int r, int g, int b, int a)</db:title>
         <db:para>Returns the ARGB quadruplet (<db:emphasis>a</db:emphasis>, <db:emphasis>r</db:emphasis>, <db:emphasis>g</db:emphasis>, <db:emphasis>b</db:emphasis>).</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#qRgb">qRgb</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#qRed">qRed</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#qGreen">qGreen</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#qBlue">qBlue</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QRgb qUnpremultiply(QRgb rgb)</db:title>
         <db:para>Converts a premultiplied ARGB quadruplet <db:emphasis>rgb</db:emphasis> into an unpremultiplied ARGB quadruplet.</db:para>
         <db:para>This function was introduced in Qt 5.3.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:code><db:link xlink:href="qcolor.html#qPremultiply">qPremultiply</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QDataStream &amp; operator&lt;&lt;(QDataStream &amp; stream, const QColor &amp; color)</db:title>
         <db:para>Writes the <db:emphasis>color</db:emphasis> to the <db:emphasis>stream</db:emphasis>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:link xlink:href="qtcore/datastreamformat.html">Serializing Qt Data Types</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QDataStream &amp; operator&gt;&gt;(QDataStream &amp; stream, QColor &amp; color)</db:title>
         <db:para>Reads the <db:emphasis>color</db:emphasis> from the <db:emphasis>stream</db:emphasis>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist>
               <db:member>
                  <db:link xlink:href="qtcore/datastreamformat.html">Serializing Qt Data Types</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Obsolete Members</db:title>
      <db:section>
         <db:title>Member Function Documentation</db:title>
         <db:section xml:id="dark">
            <db:title>QColor QColor::​dark(int factor = 200) const</db:title>
            <db:para>Use darker(<db:emphasis>factor</db:emphasis>) instead.</db:para>
         </db:section>
         <db:section xml:id="light">
            <db:title>QColor QColor::​light(int factor = 150) const</db:title>
            <db:para>Use lighter(<db:emphasis>factor</db:emphasis>) instead.</db:para>
         </db:section>
      </db:section>
   </db:section>
</db:article>
