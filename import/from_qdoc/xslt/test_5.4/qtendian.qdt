<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.1-extension qtdoctools-1.0"
            xml:lang="en">
   <db:title>&lt;QtEndian&gt; - Endian Conversion
                                Functions</db:title>
   <db:funcsynopsis xlink:href="#qFromBigEndian">
      <db:funcprototype>
         <db:funcdef>
            <db:type>T</db:type>
            <db:function>qFromBigEndian</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type xlink:href="qtglobal.html#uchar-typedef">uchar</db:type>
            <db:parameter>src</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qFromBigEndian-4">
      <db:funcprototype>
         <db:funcdef>
            <db:type>T</db:type>
            <db:function>qFromBigEndian</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>T</db:type>
            <db:parameter>src</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qFromLittleEndian">
      <db:funcprototype>
         <db:funcdef>
            <db:type>T</db:type>
            <db:function>qFromLittleEndian</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type xlink:href="qtglobal.html#uchar-typedef">uchar</db:type>
            <db:parameter>src</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qFromLittleEndian-4">
      <db:funcprototype>
         <db:funcdef>
            <db:type>T</db:type>
            <db:function>qFromLittleEndian</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>T</db:type>
            <db:parameter>src</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qToBigEndian">
      <db:funcprototype>
         <db:funcdef>
            <db:function>qToBigEndian</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>T&lt;uchar&gt;</db:type>
            <db:parameter>src</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type xlink:href="qtglobal.html#uchar-typedef">uchar</db:type>
            <db:parameter>dest</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qToBigEndian-2">
      <db:funcprototype>
         <db:funcdef>
            <db:type>T</db:type>
            <db:function>qToBigEndian</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>T</db:type>
            <db:parameter>src</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qToLittleEndian">
      <db:funcprototype>
         <db:funcdef>
            <db:function>qToLittleEndian</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>T&lt;uchar&gt;</db:type>
            <db:parameter>src</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type xlink:href="qtglobal.html#uchar-typedef">uchar</db:type>
            <db:parameter>dest</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qToLittleEndian-2">
      <db:funcprototype>
         <db:funcdef>
            <db:type>T</db:type>
            <db:function>qToLittleEndian</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>T</db:type>
            <db:parameter>src</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The &lt;QtEndian&gt; header provides functions to convert
                                between little and big endian representations of numbers. <db:link xlink:href="#details">More...</db:link>
      </db:para>
   </db:section>
   <db:section xml:id="nonmemfunc">
      <db:title>Function Documentation</db:title>
      <db:section xml:id="qFromBigEndian">
         <db:title>T qFromBigEndian(const <db:link xlink:href="qtglobal.html#uchar-typedef">uchar</db:link></db:title>
         <db:para>Reads a big-endian number from memory location
                                    <db:emphasis>src</db:emphasis> and returns the number in the host byte
                                order representation. On CPU architectures where the host byte order
                                is little-endian (such as x86) this will swap the byte order;
                                otherwise it will just read from <db:emphasis>src</db:emphasis>.</db:para>
         <db:note>
            <db:para>Template type <db:code>T</db:code>
                                can either be a qint16, qint32 or qint64. Other types of integers,
                                e.g., qlong, are not applicable.</db:para>
         </db:note>
         <db:para>There are no data
                                alignment constraints for <db:emphasis>src</db:emphasis>.</db:para>
         <db:para>This function was introduced in Qt 4.3.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtendian.html#qFromLittleEndian">qFromLittleEndian</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtendian.html#qToBigEndian">qToBigEndian</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtendian.html#qToLittleEndian">qToLittleEndian</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="qFromBigEndian-4">
         <db:title>T qFromBigEndian(T src)</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Converts <db:emphasis>src</db:emphasis> from big-endian byte order and
                                returns the number in host byte order representation of that number.
                                On CPU architectures where the host byte order is little-endian
                                (such as x86) this will return <db:emphasis>src</db:emphasis> with the byte
                                order swapped; otherwise it will return <db:emphasis>src</db:emphasis>
                                unmodified.</db:para>
         <db:para>This function was introduced in Qt 4.3.</db:para>
      </db:section>
      <db:section xml:id="qFromLittleEndian">
         <db:title>T qFromLittleEndian(const <db:link xlink:href="qtglobal.html#uchar-typedef">uchar</db:link></db:title>
         <db:para>Reads a little-endian number from memory location
                                    <db:emphasis>src</db:emphasis> and returns the number in the host byte
                                order representation. On CPU architectures where the host byte order
                                is big-endian (such as PowerPC) this will swap the byte order;
                                otherwise it will just read from <db:emphasis>src</db:emphasis>.</db:para>
         <db:note>
            <db:para>Template type <db:code>T</db:code>
                                can either be a qint16, qint32 or qint64. Other types of integers,
                                e.g., qlong, are not applicable.</db:para>
         </db:note>
         <db:para>There are no data
                                alignment constraints for <db:emphasis>src</db:emphasis>.</db:para>
         <db:para>This function was introduced in Qt 4.3.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtendian.html#qFromBigEndian">qFromBigEndian</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtendian.html#qToBigEndian">qToBigEndian</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtendian.html#qToLittleEndian">qToLittleEndian</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="qFromLittleEndian-4">
         <db:title>T qFromLittleEndian(T src)</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Converts <db:emphasis>src</db:emphasis> from little-endian byte order and
                                returns the number in host byte order representation of that number.
                                On CPU architectures where the host byte order is big-endian (such
                                as PowerPC) this will return <db:emphasis>src</db:emphasis> with the byte
                                order swapped; otherwise it will return <db:emphasis>src</db:emphasis>
                                unmodified.</db:para>
         <db:para>This function was introduced in Qt 4.3.</db:para>
      </db:section>
      <db:section xml:id="qToBigEndian">
         <db:title>void qToBigEndian(T src, <db:link xlink:href="qtglobal.html#uchar-typedef">uchar</db:link></db:title>
         <db:para>Writes the number <db:emphasis>src</db:emphasis> with template type
                                    <db:code>T</db:code> to the memory location at
                                    <db:emphasis>dest</db:emphasis> in big-endian byte order.</db:para>
         <db:para>Note that template type <db:code>T</db:code> can only be an
                                integer data type (signed or unsigned).</db:para>
         <db:para>There are no data alignment constraints for
                                    <db:emphasis>dest</db:emphasis>.</db:para>
         <db:para>This function was introduced in Qt 4.3.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtendian.html#qFromBigEndian">qFromBigEndian</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtendian.html#qFromLittleEndian">qFromLittleEndian</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtendian.html#qToLittleEndian">qToLittleEndian</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="qToBigEndian-2">
         <db:title>T qToBigEndian(T src)</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Converts <db:emphasis>src</db:emphasis> from host byte order and returns
                                the number in big-endian byte order representation of that number.
                                On CPU architectures where the host byte order is little-endian
                                (such as x86) this will return <db:emphasis>src</db:emphasis> with the byte
                                order swapped; otherwise it will return <db:emphasis>src</db:emphasis>
                                unmodified.</db:para>
         <db:para>This function was introduced in Qt 4.3.</db:para>
      </db:section>
      <db:section xml:id="qToLittleEndian">
         <db:title>void qToLittleEndian(T src, <db:link xlink:href="qtglobal.html#uchar-typedef">uchar</db:link></db:title>
         <db:para>Writes the number <db:emphasis>src</db:emphasis> with template type
                                    <db:code>T</db:code> to the memory location at
                                    <db:emphasis>dest</db:emphasis> in little-endian byte order.</db:para>
         <db:para>Note that template type <db:code>T</db:code> can only be an
                                integer data type (signed or unsigned).</db:para>
         <db:para>There are no data alignment constraints for
                                    <db:emphasis>dest</db:emphasis>.</db:para>
         <db:para>This function was introduced in Qt 4.3.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtendian.html#qFromBigEndian">qFromBigEndian</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtendian.html#qFromLittleEndian">qFromLittleEndian</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtendian.html#qToBigEndian">qToBigEndian</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="qToLittleEndian-2">
         <db:title>T qToLittleEndian(T src)</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Converts <db:emphasis>src</db:emphasis> from host byte order and returns
                                the number in little-endian byte order representation of that
                                number. On CPU architectures where the host byte order is big-endian
                                (such as PowerPC) this will return <db:emphasis>src</db:emphasis> with the
                                byte order swapped; otherwise it will return <db:emphasis>src</db:emphasis>
                                unmodified.</db:para>
         <db:para>This function was introduced in Qt 4.3.</db:para>
      </db:section>
   </db:section>
</db:article>
