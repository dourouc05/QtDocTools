<html:html xmlns:html="http://www.w3.org/1999/xhtml" lang="en">
    <html:head>
        <html:meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
        <!-- qendian.qdoc -->
        <html:title>&lt;QtEndian&gt; - Endian Conversion Functions | Qt Core 5.4</html:title>
        <html:link href="style/offline.css" rel="stylesheet" type="text/css" />
    </html:head>
    <html:body>
        <html:div class="header" id="qtdocheader">
            <html:div class="main">
                <html:div class="main-rounded">
                    <html:div class="navigationbar">
                        <html:ul>
                            <html:li><html:a href="qtdoc/index.html">Qt 5.4</html:a></html:li>
                            <html:li><html:a href="qtcore-index.html">Qt Core</html:a></html:li>
                            <html:li>&lt;QtEndian&gt; - Endian Conversion Functions</html:li>
                            <html:li id="buildversion">Qt 5.4.2 Reference Documentation</html:li>
                        </html:ul>
                    </html:div>
                </html:div>
                <html:div class="content">
                    <html:div class="line">
                        <html:div class="content mainContent">
                            <html:div class="sidebar"><html:div class="sidebar-content"
                                    id="sidebar-content"></html:div></html:div>
                            <html:h1 class="title">&lt;QtEndian&gt; - Endian Conversion
                                Functions</html:h1>
                            <html:span class="subtitle"></html:span>
                            <!-- $$$<QtEndian>-brief -->
                            <html:p>The &lt;QtEndian&gt; header provides functions to convert
                                between little and big endian representations of numbers. <html:a
                                    href="#details">More...</html:a></html:p>
                            <!-- @@@<QtEndian> -->
                            <html:ul> </html:ul>
                            <html:a name="Functions"></html:a>
                            <html:h2 id="Functions">Functions</html:h2>
                            <html:div class="table"><html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> T </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtendian.html#qFromBigEndian"
                                                  >qFromBigEndian</html:a></html:b>(const uchar
                                                  *<html:i> src</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> T </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtendian.html#qFromBigEndian-4"
                                                  >qFromBigEndian</html:a></html:b>(T<html:i>
                                                  src</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> T </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtendian.html#qFromLittleEndian"
                                                  >qFromLittleEndian</html:a></html:b>(const uchar
                                                  *<html:i> src</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> T </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtendian.html#qFromLittleEndian-4"
                                                  >qFromLittleEndian</html:a></html:b>(T<html:i>
                                                  src</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtendian.html#qToBigEndian"
                                                  >qToBigEndian</html:a></html:b>(T<html:i>
                                                  src</html:i>, uchar *<html:i>
                                                dest</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> T </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtendian.html#qToBigEndian-2"
                                                  >qToBigEndian</html:a></html:b>(T<html:i>
                                                  src</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtendian.html#qToLittleEndian"
                                                  >qToLittleEndian</html:a></html:b>(T<html:i>
                                                  src</html:i>, uchar *<html:i>
                                                dest</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> T </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtendian.html#qToLittleEndian-2"
                                                  >qToLittleEndian</html:a></html:b>(T<html:i>
                                                  src</html:i>)</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div>
                            <!-- $$$<QtEndian>-description -->
                            <html:div class="descr">
                                <html:a name="details"></html:a>
                            </html:div>
                            <!-- @@@<QtEndian> -->
                            <html:h2>Function Documentation</html:h2>
                            <!-- $$$qFromBigEndian[overload1]$$$qFromBigEndianconstuchar* -->
                            <html:h3 class="fn" id="qFromBigEndian"><html:a name="qFromBigEndian"
                                    ></html:a><html:span class="type">T</html:span>
                                <html:span class="name">qFromBigEndian</html:span>(const <html:span
                                    class="type"><html:a href="qtglobal.html#uchar-typedef"
                                        >uchar</html:a></html:span> *<html:i>
                                src</html:i>)</html:h3>
                            <html:p>Reads a big-endian number from memory location
                                    <html:i>src</html:i> and returns the number in the host byte
                                order representation. On CPU architectures where the host byte order
                                is little-endian (such as x86) this will swap the byte order;
                                otherwise it will just read from <html:i>src</html:i>.</html:p>
                            <html:p><html:b>Note: </html:b>Template type <html:code>T</html:code>
                                can either be a qint16, qint32 or qint64. Other types of integers,
                                e.g., qlong, are not applicable.</html:p><html:p>There are no data
                                alignment constraints for <html:i>src</html:i>.</html:p>
                            <html:p>This function was introduced in Qt 4.3.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtendian.html#qFromLittleEndian"
                                    >qFromLittleEndian</html:a>(), <html:a
                                    href="qtendian.html#qToBigEndian">qToBigEndian</html:a>(), and
                                    <html:a href="qtendian.html#qToLittleEndian"
                                    >qToLittleEndian</html:a>().</html:p>
                            <!-- @@@qFromBigEndian -->
                            <!-- $$$qFromBigEndian$$$qFromBigEndianT -->
                            <html:h3 class="fn" id="qFromBigEndian-4"><html:a
                                    name="qFromBigEndian-4"></html:a><html:span class="type"
                                    >T</html:span>
                                <html:span class="name">qFromBigEndian</html:span>(<html:span
                                    class="type">T</html:span><html:i> src</html:i>)</html:h3>
                            <html:p>This is an overloaded function.</html:p>
                            <html:p>Converts <html:i>src</html:i> from big-endian byte order and
                                returns the number in host byte order representation of that number.
                                On CPU architectures where the host byte order is little-endian
                                (such as x86) this will return <html:i>src</html:i> with the byte
                                order swapped; otherwise it will return <html:i>src</html:i>
                                unmodified.</html:p>
                            <html:p>This function was introduced in Qt 4.3.</html:p>
                            <!-- @@@qFromBigEndian -->
                            <!-- $$$qFromLittleEndian[overload1]$$$qFromLittleEndianconstuchar* -->
                            <html:h3 class="fn" id="qFromLittleEndian"><html:a
                                    name="qFromLittleEndian"></html:a><html:span class="type"
                                    >T</html:span>
                                <html:span class="name">qFromLittleEndian</html:span>(const
                                    <html:span class="type"><html:a
                                        href="qtglobal.html#uchar-typedef"
                                    >uchar</html:a></html:span> *<html:i> src</html:i>)</html:h3>
                            <html:p>Reads a little-endian number from memory location
                                    <html:i>src</html:i> and returns the number in the host byte
                                order representation. On CPU architectures where the host byte order
                                is big-endian (such as PowerPC) this will swap the byte order;
                                otherwise it will just read from <html:i>src</html:i>.</html:p>
                            <html:p><html:b>Note: </html:b>Template type <html:code>T</html:code>
                                can either be a qint16, qint32 or qint64. Other types of integers,
                                e.g., qlong, are not applicable.</html:p><html:p>There are no data
                                alignment constraints for <html:i>src</html:i>.</html:p>
                            <html:p>This function was introduced in Qt 4.3.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtendian.html#qFromBigEndian">qFromBigEndian</html:a>(),
                                    <html:a href="qtendian.html#qToBigEndian"
                                >qToBigEndian</html:a>(), and <html:a
                                    href="qtendian.html#qToLittleEndian"
                                >qToLittleEndian</html:a>().</html:p>
                            <!-- @@@qFromLittleEndian -->
                            <!-- $$$qFromLittleEndian$$$qFromLittleEndianT -->
                            <html:h3 class="fn" id="qFromLittleEndian-4"><html:a
                                    name="qFromLittleEndian-4"></html:a><html:span class="type"
                                    >T</html:span>
                                <html:span class="name">qFromLittleEndian</html:span>(<html:span
                                    class="type">T</html:span><html:i> src</html:i>)</html:h3>
                            <html:p>This is an overloaded function.</html:p>
                            <html:p>Converts <html:i>src</html:i> from little-endian byte order and
                                returns the number in host byte order representation of that number.
                                On CPU architectures where the host byte order is big-endian (such
                                as PowerPC) this will return <html:i>src</html:i> with the byte
                                order swapped; otherwise it will return <html:i>src</html:i>
                                unmodified.</html:p>
                            <html:p>This function was introduced in Qt 4.3.</html:p>
                            <!-- @@@qFromLittleEndian -->
                            <!-- $$$qToBigEndian[overload1]$$$qToBigEndianTuchar* -->
                            <html:h3 class="fn" id="qToBigEndian"><html:a name="qToBigEndian"
                                    ></html:a><html:span class="type">void</html:span>
                                <html:span class="name">qToBigEndian</html:span>(<html:span
                                    class="type">T</html:span><html:i> src</html:i>, <html:span
                                    class="type"><html:a href="qtglobal.html#uchar-typedef"
                                        >uchar</html:a></html:span> *<html:i>
                                dest</html:i>)</html:h3>
                            <html:p>Writes the number <html:i>src</html:i> with template type
                                    <html:code>T</html:code> to the memory location at
                                    <html:i>dest</html:i> in big-endian byte order.</html:p>
                            <html:p>Note that template type <html:code>T</html:code> can only be an
                                integer data type (signed or unsigned).</html:p>
                            <html:p>There are no data alignment constraints for
                                    <html:i>dest</html:i>.</html:p>
                            <html:p>This function was introduced in Qt 4.3.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtendian.html#qFromBigEndian">qFromBigEndian</html:a>(),
                                    <html:a href="qtendian.html#qFromLittleEndian"
                                    >qFromLittleEndian</html:a>(), and <html:a
                                    href="qtendian.html#qToLittleEndian"
                                >qToLittleEndian</html:a>().</html:p>
                            <!-- @@@qToBigEndian -->
                            <!-- $$$qToBigEndian$$$qToBigEndianT -->
                            <html:h3 class="fn" id="qToBigEndian-2"><html:a name="qToBigEndian-2"
                                    ></html:a><html:span class="type">T</html:span>
                                <html:span class="name">qToBigEndian</html:span>(<html:span
                                    class="type">T</html:span><html:i> src</html:i>)</html:h3>
                            <html:p>This is an overloaded function.</html:p>
                            <html:p>Converts <html:i>src</html:i> from host byte order and returns
                                the number in big-endian byte order representation of that number.
                                On CPU architectures where the host byte order is little-endian
                                (such as x86) this will return <html:i>src</html:i> with the byte
                                order swapped; otherwise it will return <html:i>src</html:i>
                                unmodified.</html:p>
                            <html:p>This function was introduced in Qt 4.3.</html:p>
                            <!-- @@@qToBigEndian -->
                            <!-- $$$qToLittleEndian[overload1]$$$qToLittleEndianTuchar* -->
                            <html:h3 class="fn" id="qToLittleEndian"><html:a name="qToLittleEndian"
                                    ></html:a><html:span class="type">void</html:span>
                                <html:span class="name">qToLittleEndian</html:span>(<html:span
                                    class="type">T</html:span><html:i> src</html:i>, <html:span
                                    class="type"><html:a href="qtglobal.html#uchar-typedef"
                                        >uchar</html:a></html:span> *<html:i>
                                dest</html:i>)</html:h3>
                            <html:p>Writes the number <html:i>src</html:i> with template type
                                    <html:code>T</html:code> to the memory location at
                                    <html:i>dest</html:i> in little-endian byte order.</html:p>
                            <html:p>Note that template type <html:code>T</html:code> can only be an
                                integer data type (signed or unsigned).</html:p>
                            <html:p>There are no data alignment constraints for
                                    <html:i>dest</html:i>.</html:p>
                            <html:p>This function was introduced in Qt 4.3.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtendian.html#qFromBigEndian">qFromBigEndian</html:a>(),
                                    <html:a href="qtendian.html#qFromLittleEndian"
                                    >qFromLittleEndian</html:a>(), and <html:a
                                    href="qtendian.html#qToBigEndian"
                                >qToBigEndian</html:a>().</html:p>
                            <!-- @@@qToLittleEndian -->
                            <!-- $$$qToLittleEndian$$$qToLittleEndianT -->
                            <html:h3 class="fn" id="qToLittleEndian-2"><html:a
                                    name="qToLittleEndian-2"></html:a><html:span class="type"
                                    >T</html:span>
                                <html:span class="name">qToLittleEndian</html:span>(<html:span
                                    class="type">T</html:span><html:i> src</html:i>)</html:h3>
                            <html:p>This is an overloaded function.</html:p>
                            <html:p>Converts <html:i>src</html:i> from host byte order and returns
                                the number in little-endian byte order representation of that
                                number. On CPU architectures where the host byte order is big-endian
                                (such as PowerPC) this will return <html:i>src</html:i> with the
                                byte order swapped; otherwise it will return <html:i>src</html:i>
                                unmodified.</html:p>
                            <html:p>This function was introduced in Qt 4.3.</html:p>
                            <!-- @@@qToLittleEndian -->
                        </html:div>
                    </html:div>
                </html:div>
            </html:div>
        </html:div>
        <html:div class="footer">
            <html:p>
                <html:acronym title="Copyright">&#169;</html:acronym> 2015 The Qt Company Ltd.
                Documentation contributions included herein are the copyrights of their respective
                owners.<html:br /> The documentation provided herein is licensed under the terms of
                the <html:a href="http://www.gnu.org/licenses/fdl.html">GNU Free Documentation
                    License version 1.3</html:a> as published by the Free Software
                Foundation.<html:br /> Qt and respective logos are trademarks of The Qt Company Ltd.
                in Finland and/or other countries worldwide. All other trademarks are property of
                their respective owners. </html:p>
        </html:div>
    </html:body>
</html:html>