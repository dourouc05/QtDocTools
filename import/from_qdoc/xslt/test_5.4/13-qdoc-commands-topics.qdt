<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.1-extension qtdoctools-1.0"
            xml:lang="en">
   <db:title>Topic Commands</db:title>
   <db:para>A topic command tells QDoc which source code element is
                                    being documented. Some topic commands allow you to create
                                    documentation pages that aren't tied to any underlying source
                                    code element.</db:para>
   <db:para>When QDoc processes a QDoc comment, it tries to connect the
                                    comment to an element in the source code by first looking for a
                                    topic command that names the source code element. If there is no
                                    topic command, QDoc tries to connect the comment to the source
                                    code element that immediately follows the comment. If it can't
                                    do either of these and if there is no topic command that
                                    indicates the comment does not have an underlying source code
                                    element (e.g. <db:link xlink:href="13-qdoc-commands-topics.html#page-command">\page</db:link>), then the comment is discarded.</db:para>
   <db:para>The name of the
                                    entity being documented is usually the only argument for a topic
                                    command. Use the complete name. Sometimes there can be a second
                                    parameter in the argument. See e.g. <db:link xlink:href="13-qdoc-commands-topics.html#page-command">\page</db:link>.</db:para>
   <db:programlisting>\enumQComboBox::InsertPolicy</db:programlisting>
   <db:para>The <db:link xlink:href="13-qdoc-commands-topics.html#fn-command">\fn</db:link> command is a special case. For the <db:link xlink:href="13-qdoc-commands-topics.html#fn-command">\fn</db:link>
                                    command, use the function's signature including the class
                                    qualifier.</db:para>
   <db:programlisting>\fn voidQGraphicsWidget::setWindowFlags(Qt::WindowFlags wFlags)</db:programlisting>
   <db:para>A topic command can appear anywhere in a comment but must
                                    stand alone on its own line. It is good practice is to let the
                                    topic command be the first line of the comment. If the argument
                                    spans several lines, make sure that each line (except the last
                                    one) is ended with a backslash. Moreover, QDoc counts
                                    parentheses, which means that if it encounters a '(' it
                                    considers everything until the closing ')' as its
                                    argument.</db:para>
   <db:para>If a topic command is repeated with different arguments, the
                                    same documentation will appear for both the units.</db:para>
   <db:programlisting>/*! \fn void PreviewWindow::setWindowFlags() \fn void ControllerWindow::setWindowFlags() Sets the
                                    widgets flags using the
                                        QWidget::setWindowFlags() function. Then runs through the
                                    available window flags,
                                    creating a text that contains the names of the flags that
                                    matches the flags parameter, displaying the text in the widgets text
                                        editor.*/</db:programlisting>
   <db:para>The <db:code>PreviewWindow::setWindowFlags()</db:code>
                                    and <db:code>ControllerWindow::setWindowFlags()</db:code>
                                    functions will get the same documentation.</db:para>
   <db:section xml:id="class">
      <db:title>\class</db:title>
      <db:para>The \class command is for documenting a C++ class. The
                                    argument is the complete name of the class. The command tells
                                    QDoc that a class is part of the public API, and lets you enter
                                    a detailed description.</db:para>
      <db:programlisting>/*! \classQMap::iterator \brief The QMap::iterator class provides an STL-style non-const iterator forQMap and QMultiMap.QMap features both
                                        \l{STL-style
                                    iterators} and \l{Java-style iterators}. The STL-style iterators ...*/</db:programlisting>
      <db:para>The HTML documentation for the named class is written to a
                                        <db:code>.html</db:code> file named from the class name,
                                    in lower case, and with the double colon qualifier(s) replaced
                                    with '-'. For example, the documentation for the
                                        <db:code>QMap::Iterator</db:code> class is written to
                                        <db:code>qmap-iterator.html</db:code>.</db:para>
      <db:para>The file contains the
                                    class description from the \class comment, plus the
                                    documentation generated from QDoc comments for all the class
                                    members: a list of the class's types, properties, functions,
                                    signals, and slots.</db:para>
      <db:para>In addition to the detailed description of the class, the
                                    \class comment typically contains a <db:link xlink:href="11-qdoc-commands-specialcontent.html#brief-command">\brief</db:link> command and one or more <db:link xlink:href="03-qdoc-commands-markup.html">Markup
                                    Commands</db:link>. See the \class command for any of the Qt
                                    class for examples. Here is a very simple example:</db:para>
      <db:programlisting>/*! \class PreviewWindow \brief The PreviewWindow
                                        class is a custom
                                        widget. displaying
                                    the names of its currently set window flags in a read-only text editor. \ingroup miscellaneous The
                                    PreviewWindow class
                                    inherits QWidget. The widget displays the names of its window
                                    flags set with the \l {function} {setWindowFlags()}
                                        function. It is also
                                    provided with a QPushButton that closes the
                                        window.... \sa QWidget*/</db:programlisting>
      <db:para>The way QDoc renders this \class will depend a lot on your
                                        <db:code>style.css</db:code> file, but the general
                                    outline of the class reference page will look like
                                    this:</db:para>
      <db:blockquote>
         <db:bridgehead renderas="sect1">PreviewWindow Class Reference</db:bridgehead>
         <db:para>The PreviewWindow class is a custom widget displaying
                                        the names of its currently set window flags in a read-only
                                        text editor. <db:link xlink:href="13-qdoc-commands-topics.html#preview-window">More...</db:link>
         </db:para>
         <db:bridgehead renderas="sect3">Properties</db:bridgehead>
         <db:itemizedlist>
            <db:listitem>
               <db:para>52 properties inherited from <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>1 property inherited from <db:code><db:link xlink:href="qtcore/qobject.html">QObject</db:link></db:code>
               </db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:bridgehead renderas="sect3">Public Functions</db:bridgehead>
         <db:itemizedlist>
            <db:listitem>
               <db:para>
                  <db:link xlink:href="13-qdoc-commands-topics.html#constructor">PreviewWindow</db:link>
                  <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code>
                                            *parent = 0)</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>void <db:link xlink:href="13-qdoc-commands-topics.html#function">setWindowFlags</db:link>
                  <db:code><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::WindowFlags</db:link></db:code> flags)</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:itemizedlist>
            <db:listitem>
               <db:para>183 public functions inherited from <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>28 public functions inherited from <db:code><db:link xlink:href="qtcore/qobject.html">QObject</db:link></db:code>
               </db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:bridgehead renderas="sect3">Public Slots</db:bridgehead>
         <db:itemizedlist>
            <db:listitem>
               <db:para>17 public slots inherited from <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>1 public slot inherited from <db:code><db:link xlink:href="qtcore/qobject.html">QObject</db:link></db:code>
               </db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:bridgehead renderas="sect3">Additional Inherited Members</db:bridgehead>
         <db:itemizedlist>
            <db:listitem>
               <db:para>1 signal inherited from <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>1 signal inherited from <db:code><db:link xlink:href="qtcore/qobject.html">QObject</db:link></db:code>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>4 static public members inherited from <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>4 static public members inherited from <db:code><db:link xlink:href="qtcore/qobject.html">QObject</db:link></db:code>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>39 protected functions inherited from <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>7 protected functions inherited from <db:code><db:link xlink:href="qtcore/qobject.html">QObject</db:link></db:code>
               </db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:bridgehead renderas="sect1">&#x97;</db:bridgehead>
         <db:bridgehead renderas="sect2">Detailed Description</db:bridgehead>
         <db:para>The PreviewWindow class is a custom widget displaying
                                        the names of its currently set window flags in a read-only
                                        text editor.</db:para>
         <db:para>The PreviewWindow class inherits <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code>. The
                                        widget displays the names of its window flags set with the
                                            <db:link xlink:href="13-qdoc-commands-topics.html#function">setWindowFlags()</db:link> function. It is also provided
                                        with a <db:code><db:link xlink:href="qtwidgets/qpushbutton.html">QPushButton</db:link></db:code> that closes the window.</db:para>
         <db:para>...</db:para>
         <db:para>See also <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code>.</db:para>
         <db:bridgehead renderas="sect1">&#x97;</db:bridgehead>
         <db:bridgehead renderas="sect2">Member Function Documentation</db:bridgehead>
         <db:bridgehead renderas="sect3">PreviewWindow(QWidget *parent = 0)</db:bridgehead>
         <db:para>Constructs a preview window widget with
                                            <db:emphasis>parent</db:emphasis>.</db:para>
         <db:bridgehead renderas="sect3">setWindowFlags(Qt::WindowFlags flags)</db:bridgehead>
         <db:para>Sets the widgets flags using the <db:code><db:link xlink:href="qtwidgets/qwidget.html#windowFlags-prop">QWidget::setWindowFlags</db:link>()</db:code> function.</db:para>
         <db:para>Then runs through the available window flags, creating a
                                        text that contains the names of the flags that matches the
                                        flags parameter, displaying the text in the widgets text
                                        editor.</db:para>
      </db:blockquote>
   </db:section>
   <db:section xml:id="enum">
      <db:title>\enum</db:title>
      <db:para>The \enum command is for documenting a C++ enum type. The
                                    argument is the full name of the enum type.</db:para>
      <db:para>The enum values are documented in the \enum comment using
                                    the <db:link xlink:href="10-qdoc-commands-tablesandlists.html#value-command">\value</db:link> command. If an enum value is not documented
                                    with \value, QDoc emits a warning. These warnings can be avoided
                                    using the <db:link xlink:href="10-qdoc-commands-tablesandlists.html#omitvalue-command">\omitvalue</db:link> command to tell QDoc that an enum value
                                    should not be documented. The enum documentation will be
                                    included on the class reference page, header file page, or
                                    namespace page where the enum type is defined. For example,
                                    consider the enum type <db:code>Corner</db:code> in the Qt
                                    namespace:</db:para>
      <db:programlisting>enum Corner {
                                    TopLeftCorner =0x00000, TopRightCorner =0x00001, BottomLeftCorner =0x00002, BottomRightCorner =0x00003#if defined(QT3_SUPPORT)
                                        &amp;&amp; !defined(Q_MOC_RUN),TopLeft = TopLeftCorner, TopRight = TopRightCorner, BottomLeft = BottomLeftCorner, BottomRight = BottomRightCorner #endif };</db:programlisting>
      <db:para>This enum can be cocumented this way:</db:para>
      <db:programlisting>/*! \enumQt::Corner This enum type specifies a corner in a rectangle:
                                    \value TopLeftCorner The top-left corner of the rectangle. \value TopRightCorner The
                                        top-right corner of
                                    the rectangle. \value
                                    BottomLeftCorner The bottom-left corner of the rectangle. \value BottomRightCorner The
                                        bottom-right corner
                                    of the rectangle.
                                    \omitvalue TopLeft \omitvalue TopRight \omitvalue BottomLeft
                                    \omitvalue BottomRight */</db:programlisting>
      <db:para>Note the inclusion of the namespace qualifier. QDoc will
                                    render this enum type in <db:code>qt.html</db:code> like
                                    this:</db:para>
      <db:blockquote>
         <db:bridgehead renderas="sect3">enum
                                        Qt::Corner</db:bridgehead>
         <db:para>This enum type specifies a corner in a
                                        rectangle:</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>Qt::TopLeftCorner</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x00000</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The top-left corner of the
                                                  rectangle.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>Qt::TopRightCorner</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x00001</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The top-right corner of the
                                                  rectangle.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>Qt::BottomLeftCorner</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x00002</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The bottom-left corner of the
                                                  rectangle.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>Qt::BottomRightCorner</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x00003</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The bottom-right corner of the
                                                  rectangle.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:blockquote>
      <db:para>See also <db:link xlink:href="10-qdoc-commands-tablesandlists.html#value-command">\value</db:link> and <db:link xlink:href="10-qdoc-commands-tablesandlists.html#omitvalue-command">\omitvalue</db:link>.</db:para>
   </db:section>
   <db:section xml:id="example">
      <db:title>\example</db:title>
      <db:para>The \example command is for documenting an example. The
                                    argument is the example's path relative to omne of the paths
                                    listed in the <db:link xlink:href="22-qdoc-configuration-generalvariables.html#exampledirs-variable">exampledirs</db:link> variable in the QDoc configuration
                                    file.</db:para>
      <db:para>The documentation page will be output to
                                        <db:code>path-to-example</db:code>.html. QDoc will add a
                                    list of all the example's source files at the top of the
                                    page.</db:para>
      <db:para>For example, if <db:link xlink:href="22-qdoc-configuration-generalvariables.html#exampledirs-variable">exampledirs</db:link> contains
                                        <db:code>$QTDIR/examples/widgets/imageviewer</db:code>,
                                    then</db:para>
      <db:programlisting>/*! \example widgets/imageviewer \title ImageViewer
                                    Example \subtitle The example shows how to combine QLabel and QScrollArea to display an
                                        image....*/</db:programlisting>
      <db:para>QDoc renders this example in
                                    widgets-imageviewer.html:</db:para>
      <db:blockquote>
         <db:bridgehead renderas="sect1">Image Viewer
                                        Example</db:bridgehead>
         <db:para>Files:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>
                  <db:link xlink:href="http://doc.qt.io/qt-5/qtwidgets-widgets-imageviewer-imageviewer-cpp.html">widgets/imageviewer/imageviewer.cpp</db:link>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:link xlink:href="http://doc.qt.io/qt-5/qtwidgets-widgets-imageviewer-imageviewer-h.html">widgets/imageviewer/imageviewer.h</db:link>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:link xlink:href="http://doc.qt.io/qt-5/qtwidgets-widgets-imageviewer-main-cpp.html">widgets/imageviewer/main.cpp</db:link>
               </db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:para>The example shows how to combine <db:code><db:link xlink:href="qtwidgets/qlabel.html">QLabel</db:link></db:code> and <db:code><db:link xlink:href="qtwidgets/qscrollarea.html">QScrollArea</db:link></db:code>
                                        to display an image.</db:para>
         <db:para>...</db:para>
      </db:blockquote>
   </db:section>
   <db:section xml:id="externalpage">
      <db:title>\externalpage</db:title>
      <db:para>The \externalpage command assigns a title to an external
                                    URL.</db:para>
      <db:programlisting>/*! \externalpage http://doc.qt.io/ \title Qt Documentation Site */</db:programlisting>
      <db:para>This allows you to include a link to the external page in
                                    your documentation this way:</db:para>
      <db:programlisting>/*! At the \l {Qt Documentation Site} you can find
                                    the latest documentation forQt,Qt Creator, the Qt
                                    SDK and much more.*/</db:programlisting>
      <db:para>QDoc renders this as:</db:para>
      <db:blockquote>
         <db:para>At the <db:link xlink:href="http://doc.qt.io/">Qt
                                            Documentation Site</db:link> you can find the latest
                                        documentation for Qt, Qt Creator, the Qt SDK and much
                                        more.</db:para>
      </db:blockquote>
      <db:para>To achieve the same result without using the \externalpage
                                    command, you would have to hard-code the address into your
                                    documentation:</db:para>
      <db:programlisting>/*! At the \l {http://doc.qt.io/}{Qt Documentation
                                        Site} you can find the latest documentation
                                        forQt,Qt Creator, the Qt
                                    SDK and much more.*/</db:programlisting>
      <db:para>The \externalpage command makes it easier to maintain the
                                    documentation. If the address changes, you only need to change
                                    the argument of the \externalpage command.</db:para>
   </db:section>
   <db:section xml:id="fn-function">
      <db:title>\fn (function)</db:title>
      <db:para>The \fn command is for documenting a function. The argument
                                    is the function's signature, including its return type,
                                    const-ness, and list of formal arguments with types. If the
                                    named function doesn't exist, QDoc emits a warning.</db:para>
      <db:note>
         <db:para>The \fn command is QDoc's default
                                    command: when no topic command can be found in a QDoc comment,
                                    QDoc tries to tie the documentation to the following code as if
                                    it is the documentation for a function. Hence, it is normally
                                    not necessary to include this command when documenting a
                                    function, if the function's QDoc comment is written immediately
                                    above the function implementation in the
                                        <db:code>.cpp</db:code> file. But it must be present
                                    when documenting an inline function in the
                                        <db:code>.cpp</db:code> file that is implemented in the
                                        <db:code>.h</db:code> file.</db:para>
      </db:note>
      <db:programlisting>/*! \fn bool QToolBar::isAreaAllowed(Qt::ToolBarArea area) const Returns \c trueifthis toolbar is dockable
                                    in the given \a area; otherwise returns \c false.*/</db:programlisting>
      <db:para>QDoc renders this as:</db:para>
      <db:blockquote>
         <db:bridgehead renderas="sect3">bool QToolBar::isAreaAllowed(Qt::ToolBarArea area)
                                        const </db:bridgehead>
         <db:para>Returns <db:code>true</db:code> if this toolbar is
                                        dockable in the given <db:emphasis>area</db:emphasis>; otherwise
                                        returns <db:code>false</db:code>.</db:para>
      </db:blockquote>
      <db:para>See also <db:link xlink:href="18-qdoc-commands-relating.html#overload-command">\overload</db:link>.</db:para>
   </db:section>
   <db:section xml:id="group">
      <db:title>\group</db:title>
      <db:para>The \group command creates a separate page that lists the
                                    classes belonging to the group. The argument is the group
                                    name.</db:para>
      <db:para>A class is included in a group by using the <db:link xlink:href="19-qdoc-commands-grouping.html#ingroup-command">\ingroup</db:link> command. Overview pages can also be
                                    related to a group using the same command, but the list of
                                    overview pages must be requested explicitly using the <db:link xlink:href="12-0-qdoc-commands-miscellaneous.html#generatelist-command">\generatelist</db:link> command (see example
                                    below).</db:para>
      <db:para>The \group command is typically followed by a <db:link xlink:href="20-qdoc-commands-namingthings.html#title-command">\title</db:link> command and a short introduction to the
                                    group. The HTML page for the group is written to a
                                        <db:code>.html</db:code> file put in
                                        &lt;lower-case&gt;<db:emphasis>group</db:emphasis>.html.</db:para>
      <db:para>Each class name is listed as a link to the class reference
                                    page followed by the text from the class's <db:link xlink:href="11-qdoc-commands-specialcontent.html#brief-command">\brief</db:link> texts.</db:para>
      <db:programlisting>/*! \group io \title
                                        Input/Output and
                                    Networking These classes are used to handle input and output to
                                    and from external devices, processes, files etc., as
                                    well as manipulating files and directories.*/</db:programlisting>
      <db:para>QDoc generates a group page in
                                        <db:code>io.html</db:code> that will look like
                                    this:</db:para>
      <db:blockquote>
         <db:bridgehead renderas="sect1">Input/Output and Networking</db:bridgehead>
         <db:para>These classes are used to handle input and output to and
                                        from external devices, processes, files etc., as well as
                                        manipulating files and directories.</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold"><db:code><db:link xlink:href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</db:link></db:code></db:emphasis>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para> The base functionality common to all
                                                  socket types </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold"><db:code><db:link xlink:href="http://doc.qt.io/qt-5/qbuffer.html">QBuffer</db:link></db:code></db:emphasis>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para> QIODevice interface for a QByteArray
                                                </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold"><db:code><db:link xlink:href="http://doc.qt.io/qt-5/qclipboard.html">QClipboard</db:link></db:code></db:emphasis>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para> Access to the window system clipboard
                                                </db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:blockquote>
      <db:para>Note that overview pages related to the group, must be
                                    listed explicitly using the <db:link xlink:href="12-0-qdoc-commands-miscellaneous.html#generatelist-command">\generatelist</db:link> command with the
                                        <db:code>related</db:code> argument.</db:para>
      <db:programlisting>/*! \group architecture \title
                                    Architecture These documents describe aspects of Qt's
                                        architecture and design, including overviews of core Qt
                                        features and technologies. \generatelist{related} * /
                                    </db:programlisting>
      <db:para>See also <db:link xlink:href="19-qdoc-commands-grouping.html#ingroup-command">\ingroup</db:link> and <db:link xlink:href="12-0-qdoc-commands-miscellaneous.html#generatelist-command">\generatelist</db:link>.</db:para>
   </db:section>
   <db:section xml:id="headerfile">
      <db:title>\headerfile</db:title>
      <db:para>The \headerfile command is for documenting the global
                                    functions, types and macros that are declared in a header file,
                                    but not in a namespace. The argument is the name of the header
                                    file. The HTML page is written to a <db:code>.html</db:code>
                                    file constructed from the header file argument.</db:para>
      <db:para>The documentation for a function, type, or macro that is
                                    declared in the header file being documented, is included in the
                                    header file page using the <db:link xlink:href="18-qdoc-commands-relating.html#relates-command">\relates</db:link> command.</db:para>
      <db:para>If the argument doesn't exist as a header file, the
                                    \headerfile command creates a documentation page for the header
                                    file anyway.</db:para>
      <db:programlisting>/*! \headerfile &lt;QtAlgorithms&gt; \title Generic Algorithms \brief The
                                        &lt;QtAlgorithms&gt; header file provides
                                    generic template-based algorithms.Qt provides a number of global
                                        template functions in
                                    \c &lt;QtAlgorithms&gt; that work on containers
                                    and perform well-know
                                        algorithms.*/</db:programlisting>
      <db:para>QDoc generates a header file page
                                        <db:code>qtalgorithms.html</db:code> that looks like
                                    this:</db:para>
      <db:blockquote>
         <db:bridgehead renderas="sect1">&lt;QtAlgorithms&gt; - Generic
                                            Algorithms</db:bridgehead>
         <db:para>The &lt;qtalgorithms&gt;</db:para>
         <db:bridgehead renderas="sect3">Functions</db:bridgehead>
         <db:itemizedlist>
            <db:listitem>
               <db:para>RandomAccessIterator <db:link xlink:href="http://doc.qt.io/qt-5/qtalgorithms-obsolete.html#qBinaryFind">qBinaryFind</db:link> (RandomAccessIterator begin,
                                            RandomAccessIterator end, const T &amp; value)</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>...</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:bridgehead renderas="sect1">&#x97;</db:bridgehead>
         <db:bridgehead renderas="sect2">Detailed Description</db:bridgehead>
         <db:para>The &lt;qtalgorithms&gt;</db:para>
         <db:para>Qt provides a number of global template functions in
                                            <db:code>&lt;QtAlgorithms&gt;</db:code> that work on
                                        containers and perform well-know algorithms.</db:para>
         <db:para>...</db:para>
      </db:blockquote>
   </db:section>
   <db:section xml:id="macro">
      <db:title>\macro</db:title>
      <db:para>The \macro command is for documenting a C++ macro. The
                                    argument is the macro in one of three styles: function-like
                                    macros like <db:code><db:link xlink:href="qtcore/qtglobal.html#Q_ASSERT">Q_ASSERT</db:link>()</db:code>, declaration-style macros like <db:code><db:link xlink:href="qtcore/qobject.html#Q_PROPERTY">Q_PROPERTY</db:link>()</db:code>,
                                    and macros without parentheses like <db:code><db:link xlink:href="qtcore/qobject.html#Q_OBJECT">Q_OBJECT</db:link></db:code>.</db:para>
      <db:para>The \macro comment must contain a <db:link xlink:href="18-qdoc-commands-relating.html#relates-command">\relates</db:link> command that attaches the macro comment
                                    to a class, header file, or namespace. Otherwise, the
                                    documentation will be lost. Here are three example macro
                                    comments followed by what they might look like in
                                        <db:code>qtglobal.html</db:code> or
                                        <db:code>qobject.html</db:code>:</db:para>
      <db:programlisting>/*! \macro voidQ_ASSERT(bool test) \relates &lt;QtGlobal&gt; Prints a warning message containing the
                                    source code file name and line number if \a test is false.... \sa Q_ASSERT_X(),qFatal(),
                                    {Debugging Techniques} */</db:programlisting>
      <db:blockquote>
         <db:bridgehead renderas="sect3">void Q_ASSERT ( bool test )</db:bridgehead>
         <db:para>Prints a warning message containing the source code file
                                        name and line number if <db:emphasis>test</db:emphasis> is
                                        false.</db:para>
         <db:para>...</db:para>
         <db:para>See also <db:code><db:link xlink:href="qtcore/qtglobal.html#Q_ASSERT_X">Q_ASSERT_X</db:link>()</db:code>, <db:code><db:link xlink:href="qtcore/qtglobal.html#qFatal">qFatal</db:link>()</db:code> and
                                            <db:link xlink:href="qtdoc/testing-and-debugging.html#debugging-techniques">Debugging Techniques</db:link>.</db:para>
      </db:blockquote>
      <db:programlisting>/*! \macro Q_PROPERTY(...)
                                    \relates QObject
                                    This macro declares a QObject
                                        property. The syntax
                                    is: ... \sa {Qt's Property System} * / </db:programlisting>
      <db:blockquote>
         <db:bridgehead renderas="sect3">Q_PROPERTY ( ... )</db:bridgehead>
         <db:para>This macro declares a <db:code><db:link xlink:href="qtcore/qobject.html">QObject</db:link></db:code> property. The syntax is:</db:para>
         <db:para>...</db:para>
         <db:para>See also <db:link xlink:href="qtcore/properties.html#qt-s-property-system">Qt's
                                            Property System</db:link>.</db:para>
      </db:blockquote>
      <db:programlisting>/*! \macro Q_OBJECT \relates
                                        QObject The Q_OBJECT macro must
                                    appear in the private
                                    section of a class
                                    definition that declares its own signals and slots,or that uses other
                                    services provided by Qt's meta-object system. ... \sa {Meta-Object
                                        System}, {Signals and Slots}, {Qt's Property
                                    System} */</db:programlisting>
      <db:blockquote>
         <db:bridgehead renderas="sect3">Q_OBJECT</db:bridgehead>
         <db:para>The <db:code><db:link xlink:href="qtcore/qobject.html#Q_OBJECT">Q_OBJECT</db:link></db:code> macro must appear in the private
                                        section of a class definition that declares its own signals
                                        and slots or that uses other services provided by Qt's
                                        meta-object system.</db:para>
         <db:para>...</db:para>
         <db:para>See also <db:link xlink:href="qtcore/metaobjects.html#meta-object-system">Meta-Object System</db:link>, <db:link xlink:href="qtcore/signalsandslots.html">Signals &amp;
                                            Slots</db:link> and <db:link xlink:href="qtcore/properties.html#qt-s-property-system">Qt's
                                            Property System</db:link>.</db:para>
      </db:blockquote>
   </db:section>
   <db:section xml:id="module">
      <db:title>\module</db:title>
      <db:para>The \module creates a page that lists the classes belonging
                                    to the module specified by the command's argument. A class
                                    included in the module by including the <db:link xlink:href="19-qdoc-commands-grouping.html#inmodule-command">\inmodule</db:link> command in the \class comment.</db:para>
      <db:para>The \module command is typically followed by a <db:link xlink:href="20-qdoc-commands-namingthings.html#title-command">\title</db:link> and a <db:link xlink:href="11-qdoc-commands-specialcontent.html#brief-command">\brief</db:link> command. Each class is listed as a link to
                                    the class reference page followed by the text from the class's
                                        <db:link xlink:href="11-qdoc-commands-specialcontent.html#brief-command">\brief</db:link> command. For example:</db:para>
      <db:programlisting>/*! \module QtNetwork \title Qt Network Module \brief Contains
                                    classes for writing
                                        TCP/IP clients and
                                        servers. The network
                                    module provides classes to make network programming easier and
                                        portable. It offers
                                    both high-level classes
                                    such as QNetworkAccessManager that
                                    implements application-level protocols, and lower-level classes such as QTcpSocket,QTcpServer, and QUdpSocket.*/</db:programlisting>
      <db:para>QDoc renders this in <db:code>qtnetwork.html</db:code>
                                    like this:</db:para>
      <db:blockquote>
         <db:bridgehead renderas="sect1">Qt Network Module</db:bridgehead>
         <db:para>The Qt Network module offers classes that allow you to
                                        write TCP/IP clients and servers.<db:link xlink:href="13-qdoc-commands-topics.html#module-details">More...</db:link>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold"><db:code><db:link xlink:href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</db:link></db:code></db:emphasis>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para> The base functionality common to all
                                                  socket types </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold"><db:code><db:link xlink:href="http://doc.qt.digia.com/4.0/qftp.html">QFtp</db:link></db:code></db:emphasis>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para> Implementation of the FTP protocol
                                                </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>...</db:para>
                  </db:td>
                  <db:td>
                     <db:para>...</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:bridgehead renderas="sect1">&#x97;</db:bridgehead>
         <db:bridgehead renderas="sect2">Detailed Description</db:bridgehead>
         <db:para> The Qt Network module offers classes that allow you to
                                        write TCP/IP clients and servers. </db:para>
         <db:para> The network module provides classes to make network
                                        programming easier and portable. It offers both high-level
                                        classes such as QNetworkAccessManager that implements
                                        application-level protocols, and lower-level classes such as
                                        QTcpSocket, QTcpServer, and QUdpSocket. </db:para>
         <db:para>...</db:para>
      </db:blockquote>
      <db:para>See also <db:link xlink:href="19-qdoc-commands-grouping.html#inmodule-command">\inmodule</db:link>
      </db:para>
   </db:section>
   <db:section xml:id="namespace">
      <db:title>\namespace</db:title>
      <db:para>The \namespace command is for documenting the contents of
                                    the C++ namespace named as its argument. The documentation
                                    outline QDoc generates for a namespace is similar to the outline
                                    it generates for a C++ class.</db:para>
      <db:programlisting>/*! \namespaceQt \brief Contains miscellaneous
                                    identifiers used throughout the Qt
                                        library.*/</db:programlisting>
      <db:para>QDoc renders this in <db:code>qt.html</db:code> like
                                    this:</db:para>
      <db:blockquote>
         <db:bridgehead renderas="sect1">Qt Namespace
                                        Reference</db:bridgehead>
         <db:para>The Qt namespace contains miscellaneous identifiers used
                                        throughout the Qt library. <db:link xlink:href="13-qdoc-commands-topics.html#name">More...</db:link>
         </db:para>
         <db:programlisting>#include &lt;Qt&gt;</db:programlisting>
         <db:itemizedlist>
            <db:listitem>
               <db:para>
                  <db:link xlink:href="http://doc.qt.digia.com/4.0/qt-qt3.html">
                                                Qt 3 support members</db:link>
               </db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:bridgehead renderas="sect3">Types</db:bridgehead>
         <db:itemizedlist>
            <db:listitem>
               <db:para>flags <db:link xlink:href="http://doc.qt.digia.com/4.0/qt.html#AlignmentFlag-enum">Alignment</db:link>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>...</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:bridgehead renderas="sect1">&#x97;</db:bridgehead>
         <db:bridgehead renderas="sect2">Detailed Description</db:bridgehead>
         <db:para>Contains miscellaneous identifiers used throughout the
                                        Qt library.</db:para>
         <db:para>...</db:para>
      </db:blockquote>
   </db:section>
   <db:section xml:id="page">
      <db:title>\page</db:title>
      <db:para>The \page command is for creating a stand-alone
                                    documentation page. The argument can consist of two parts
                                    separated by a space. The first part is the name of the file
                                    where QDoc should store the page. The second part, if present,
                                    is a word that specifies the page type. Currently, the second
                                    part can be one of the following list of words:</db:para>
      <db:itemizedlist>
         <db:listitem>
            <db:para>faq - A frequently asked question.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>howto - A user guide on how to use some components of
                                        the software.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>example - A page that describes a working
                                        example.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>overview - For text pages that provide an overview of
                                        some important subject.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>tutorial - For text pages that are part of a
                                        tutorial.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>api - This is the type of page used for C++ class
                                        references and QML type references. You should never use
                                        this one for the pages you write, because this one is
                                        reserved for qdoc.</db:para>
         </db:listitem>
      </db:itemizedlist>
      <db:para>The page title is set using the <db:link xlink:href="20-qdoc-commands-namingthings.html#title-command">\title</db:link> command.</db:para>
      <db:programlisting>/*! \page aboutqt.html \title About QtQt is a C++ toolkit for cross-platform GUI application development.Qt provides single-source portability across
                                    Microsoft Windows, Mac
                                    OS X, Linux, and all major commercial Unix
                                        variants.Qt provides application developers
                                    with all the functionality needed to build applications with
                                        state-of-the-art graphical user interfaces.Qt is fully object-oriented, easily extensible, and allows true component
                                        programming....*/</db:programlisting>
      <db:para>QDoc renders this page in
                                        <db:code>aboutqt.html</db:code>.</db:para>
   </db:section>
   <db:section xml:id="property">
      <db:title>\property</db:title>
      <db:para>The \property command is for documenting a Qt property. The
                                    argument is the full property name.</db:para>
      <db:para>A property is defined using the <db:code><db:link xlink:href="qtcore/qobject.html#Q_PROPERTY">Q_PROPERTY</db:link>()</db:code>
                                    macro. The macro takes as arguments the property's name and its
                                    set, reset and get functions.</db:para>
      <db:programlisting>Q_PROPERTY(QString
                                    state READ state WRITE setState)</db:programlisting>
      <db:para>The set, reset and get functions don't need to be
                                    documented, documenting the property is sufficient. QDoc will
                                    generate a list of the access function that will appear in the
                                    property documentation which in turn will be located in the
                                    documentation of the class that defines the property.</db:para>
      <db:para>The \property command comment typically includes a <db:link xlink:href="11-qdoc-commands-specialcontent.html#brief-command">\brief</db:link> command. For properties the <db:link xlink:href="11-qdoc-commands-specialcontent.html#brief-command">\brief</db:link> command's argument is a sentence fragment
                                    that will be included in a one line description of the property.
                                    The command follows the same rules for the <db:link xlink:href="11-qdoc-commands-specialcontent.html#brief-property">description</db:link> as the <db:link xlink:href="13-qdoc-commands-topics.html#variable-command">\variable</db:link> command.</db:para>
      <db:programlisting>/*! \property QPushButton::flat \brief Whether the
                                    border is disabled. This
                                        property's default is false. * /
                                    </db:programlisting>
      <db:para>QDoc includes this in
                                        <db:code>qpushbutton.html</db:code> like this:</db:para>
      <db:blockquote>
         <db:bridgehead renderas="sect3">flat : bool</db:bridgehead>
         <db:para>This property holds whether the border is
                                        disabled.</db:para>
         <db:para>This property's default is false.</db:para>
         <db:para>Access functions:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>
                  <db:emphasis role="bold"> bool isFlat () const</db:emphasis>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:emphasis role="bold"> void setFlat ( bool )</db:emphasis>
               </db:para>
            </db:listitem>
         </db:itemizedlist>
      </db:blockquote>
      <db:programlisting>/*! \property QWidget::width \brief The width of the widget
                                    excluding any window frame. See the \l {Window Geometry} documentation
                                        for an overview of
                                    window geometry. \sa
                                        geometry,
                                        height, size
                                        */</db:programlisting>
      <db:para>QDoc includes this in <db:code>qwidget.html</db:code>
                                    like this:</db:para>
      <db:blockquote>
         <db:bridgehead renderas="sect3">width : const int</db:bridgehead>
         <db:para>This property holds the width of the widget excluding
                                        any window frame.</db:para>
         <db:para>See the <db:link xlink:href="qtwidgets/application-windows.html#window-geometry">Window Geometry</db:link> documentation for an overview
                                        of window geometry.</db:para>
         <db:para>Access functions:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>
                  <db:emphasis role="bold"> int width () const</db:emphasis>
               </db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:para>See also <db:link xlink:href="qtwidgets/qwidget.html#geometry-prop">geometry</db:link>, <db:link xlink:href="qtwidgets/qwidget.html#height-prop">height</db:link>, and <db:link xlink:href="qtwidgets/qwidget.html#size-prop">size</db:link>.</db:para>
      </db:blockquote>
   </db:section>
   <db:section xml:id="service">
      <db:title>\service</db:title>
      <db:para>The \service command tells QDoc that a class is a service
                                    class and names the service. The command takes two arguments,
                                    the name of the class and the name of the service. Currently,
                                    this command is not used in the Qt documentation.</db:para>
      <db:programlisting>/*! \service TimeService Time
                                        ...*/class TimeService :
                                        publicQCopObjectService {
                                        ... }</db:programlisting>
      <db:para>See also <db:link xlink:href="13-qdoc-commands-topics.html#class-command">\class</db:link> and <db:link xlink:href="12-0-qdoc-commands-miscellaneous.html#generatelist-command">\generatelist</db:link>.</db:para>
   </db:section>
   <db:section xml:id="qmlattachedproperty">
      <db:title>\qmlattachedproperty</db:title>
      <db:para>The \qmlattachedproperty command is for documenting a QML
                                    property that will be attached to some QML type. See <db:link xlink:href="http://qt-project.org/doc/qt-4.7/qdeclarativeintroduction.html#attached-properties">Attached Properties</db:link>. The argument is the rest of
                                    the line. The argument text should be the property type,
                                    followed by the QML element name where the property is being
                                    declared, the <db:code>::</db:code> qualifier, and finally
                                    the property name. If we have a QML attached property named
                                        <db:code>isCurrentItem</db:code> in QML
                                        <db:code>ListView</db:code>, and the property has type
                                        <db:code>bool</db:code>, the \qmlattachedproperty for it
                                    would look like this:</db:para>
      <db:programlisting>/*! \qmlattachedproperty bool
                                        ListView::isCurrentItem This attached property is \c
                                        trueifthis delegate is the
                                    current item; otherwise false.
                                    It is attached to each instance of the delegate. This property may be used to
                                    adjust the appearance of the current item,for example: \snippet
                                        doc/src/snippets/declarative/listview/listview.qml isCurrentItem */</db:programlisting>
      <db:para>QDoc includes this attached property on the QML reference
                                    page for the <db:link xlink:href="http://qt-project.org/doc/qt-4.7/qml-listview.html#isCurrentItem-prop">ListView</db:link> element.</db:para>
   </db:section>
   <db:section xml:id="qmlattachedsignal">
      <db:title>\qmlattachedsignal</db:title>
      <db:para>The \qmlattachedsignal command is for documenting an
                                    attachable <db:link xlink:href="qtqml/qtqml-syntax-signals.html">signal</db:link>. The \qmlattachedsignal command is used
                                    just like the <db:link xlink:href="13-qdoc-commands-topics.html#qmlsignal-command">\qmlsignal</db:link> command.</db:para>
      <db:para>The argument is the rest of the line. It should be the name
                                    of the QML type where the signal is declared, the
                                        <db:code>::</db:code> qualifier, and finally the signal
                                    name. For example, a QML attached signal named
                                        <db:code>add()</db:code> in the
                                        <db:code>GridView</db:code> element is documented like
                                    this:</db:para>
      <db:programlisting>/*! \qmlattachedsignal
                                        GridView::add() This
                                    attached signal is emitted immediately after an item is added to
                                    the view.*/</db:programlisting>
      <db:para>QDoc includes this documentation on the QML reference page
                                    for the <db:link xlink:href="qtquick/qtquick-draganddrop-example.html#gridview">GridView</db:link> element.</db:para>
   </db:section>
   <db:section xml:id="qmlbasictype">
      <db:title>\qmlbasictype</db:title>
      <db:para>The \qmlbasictype command is for documenting a basic type
                                    for QML. The argument is the type name. The type must be
                                    included in the QML basic types group using the <db:link xlink:href="19-qdoc-commands-grouping.html#ingroup-command">\ingroup</db:link> command as shown below. This will cause
                                    QDoc to include the documentation for the type on the <db:link xlink:href="http://qt-project.org/doc/qt-4.7/qdeclarativebasictypes.html">QML Basic Types</db:link> page. The <db:link xlink:href="11-qdoc-commands-specialcontent.html#brief-command">\brief</db:link> command is also required, because it
                                    appears on the <db:link xlink:href="http://qt-project.org/doc/qt-4.7/qdeclarativebasictypes.html">QML Basic Types</db:link> page as well.</db:para>
      <db:programlisting>/*! \qmlbasictype int \ingroup qmlbasictypes \brief
                                    An integer is a whole number,for example 0,10,or-20. An integer is a whole
                                        number, e.g.0,10,or-20. The possible \c int values range from around
                                        -2000000000 to around 2000000000, although most elements will
                                    only accept a reduced range (which they mention in their
                                        documentation).
                                    Example: \qml Item { width: 100; height: 200 } \endqml \sa {QML Basic Types} */</db:programlisting>
      <db:para>QDoc outputs this as <db:link xlink:href="http://qt-project.org/doc/qt-4.7/qml-int.html">qml-int.html</db:link>.</db:para>
   </db:section>
   <db:section xml:id="qmlclass">
      <db:title>\qmlclass</db:title>
      <db:para>This command is deprecated. Use <db:link xlink:href="13-qdoc-commands-topics.html#qmltype-command">\qmltype</db:link> instead.</db:para>
      <db:para>The \qmlclass command is for documenting a QML type that is
                                    instantiated by a C++ class. The command has two arguments. The
                                    first argument is the name of the QML type. The second argument
                                    is the name of the C++ class that instantiates the QML
                                    type.</db:para>
      <db:programlisting>/*! \qmlclass Transform
                                        QGraphicsTransform \ingroup
                                        qml-transform-elements \since 4.7 \brief Provides a way of building advanced
                                    transformations on Items. The Transform element is a base type which
                                    cannot be instantiated directly. The following concrete Transform types are
                                    available: \list \li \l Rotation \li \l Scale \li \l Translate
                                    \endlist The Transform elements let you create and control
                                    advanced transformations that can be configured independently
                                        using specialized
                                        properties. You can
                                    assign any number of Transform elements to an \l Item. Each Transform is applied in
                                        order, one at a
                                        time.*/</db:programlisting>
      <db:para>This example generates the <db:link xlink:href="http://qt-project.org/doc/qt-4.7/qml-transform.html">QML Transform</db:link> page. The \qmlclass comment should
                                    include the <db:link xlink:href="16-qdoc-commands-status.html#since-command">\since</db:link> command, because all QML types are new. It
                                    should also include the <db:link xlink:href="11-qdoc-commands-specialcontent.html#brief-command">\brief</db:link> command. If a type is a member of a group
                                    of QML types, it should also include one or more <db:link xlink:href="19-qdoc-commands-grouping.html#ingroup-command">\ingroup</db:link> commands.</db:para>
   </db:section>
   <db:section xml:id="qmlmethod">
      <db:title>\qmlmethod</db:title>
      <db:para>The \qmlmethod command is for documenting a QML method. The
                                    argument is the complete method signature, including return type
                                    and parameter names and types.</db:para>
      <db:programlisting>/*! \qmlmethod void TextInput::select(int start,int end) Causes the text
                                    from \a start to \a end to be selected. If either start or end is out of range, the selection is not changed. After having called
                                        this, selectionStart will become
                                    the lesser, and
                                    selectionEnd the greater (regardless of the order passed to
                                        this
                                        method). \sa
                                        selectionStart,
                                    selectionEnd */</db:programlisting>
      <db:para>QDoc includes this documentation on the element reference
                                    page for the <db:link xlink:href="http://qt-project.org/doc/qt-4.7/qml-textinput.html#select-method">TextInput</db:link> element.</db:para>
   </db:section>
   <db:section xml:id="qmltype">
      <db:title>\qmltype</db:title>
      <db:para>The \qmltype command is for documenting a QML type. The
                                    command has one argument, which is the name of the QML
                                    type.</db:para>
      <db:para>If the QML type is instantiated by a C++ class, that class
                                    must be specified using the <db:link xlink:href="13-qdoc-commands-topics.html#instantiates-command">\instantiates</db:link> context command.</db:para>
      <db:programlisting>/*! \qmltype Transform
                                    \instantiates QGraphicsTransform \ingroup
                                        qml-transform-elements \since 4.7 \brief The Transform elements provide a way
                                    to build advanced transformations on Items. The Transform element is a
                                    base type which cannot be instantiated directly. The concrete Transform types
                                    are: \list \li \l Rotation \li \l Scale \li \l Translate
                                    \endlist The Transform elements let you create and control
                                    advanced transformations that can be configured independently
                                        using specialized
                                        properties. You can
                                    assign any number of Transform elements to an \l Item. Each Transform is applied in
                                        order, one at a
                                        time.*/</db:programlisting>
      <db:para>The example generates the <db:link xlink:href="http://qt-project.org/doc/qt-4.7/qml-transform.html">QML Transform</db:link> page. The <db:emphasis>\qmltype</db:emphasis>
                                    comment includes <db:link xlink:href="13-qdoc-commands-topics.html#instantiates-command">\instantiates</db:link> to specify that a Transform is
                                    instantiated by the C++ class <db:code><db:link xlink:href="qtwidgets/qgraphicstransform.html">QGraphicsTransform</db:link></db:code>. A \qmltype comment should
                                    always include a <db:link xlink:href="16-qdoc-commands-status.html#since-command">\since</db:link> command, because all QML types are new. It
                                    should also include a <db:link xlink:href="11-qdoc-commands-specialcontent.html#brief-command">\brief</db:link> description. If a QML type is a member of a
                                    QML type group, the \qmltype comment should include one or more
                                        <db:link xlink:href="19-qdoc-commands-grouping.html#ingroup-command">\ingroup</db:link> commands.</db:para>
   </db:section>
   <db:section xml:id="qmlproperty">
      <db:title>\qmlproperty</db:title>
      <db:para>The \qmlproperty command is for documenting a QML property.
                                    The argument is the rest of the line. The argument text should
                                    be the property type, followed by the QML type name, the
                                        <db:code>::</db:code> qualifier, and finally the
                                    property name. If we have a QML property named
                                        <db:code>x</db:code> in QML type
                                        <db:code>Translate</db:code>, and the property has type
                                        <db:code>real</db:code>, the \qmlproperty for it would
                                    look like this:</db:para>
      <db:programlisting>/*! \qmlproperty real
                                        Translate::x The
                                    translation along the X axis.*/</db:programlisting>
      <db:para>QDoc includes this QML property on the QML reference page
                                    for the <db:link xlink:href="http://qt-project.org/doc/qt-4.7/qml-translate.html">Translate</db:link> element.</db:para>
      <db:para>If the QML property is of enumeration type, or it holds a
                                    bit-wise combination of flags, the <db:link xlink:href="10-qdoc-commands-tablesandlists.html#value-command">\value</db:link> command can be used to document the
                                    acceptable values.</db:para>
   </db:section>
   <db:section xml:id="qmlsignal">
      <db:title>\qmlsignal</db:title>
      <db:para>The \qmlsignal command is for documenting a QML signal. The
                                    argument is the rest of the line. The arguments should be: the
                                    QML type where the signal is declared, the
                                        <db:code>::</db:code> qualifier, and finally the signal
                                    name. If we have a QML signal named
                                        <db:code>clicked()</db:code>, the documentation for it
                                    would look like this:</db:para>
      <db:programlisting>/*! \qmlsignal
                                        UIComponents::Button::clicked() This signal is emitted when the
                                    user clicks the button.
                                    A click is defined as a press followed by a release. The corresponding handler is
                                    \c onClicked.*/</db:programlisting>
      <db:para>QDoc includes this documentation on the QML reference page
                                    for the <db:link xlink:href="http://qt-project.org/doc/qt-4.7/qml-mousearea.html#onEntered-signal">MouseArea</db:link> element.</db:para>
   </db:section>
   <db:section xml:id="qmlmodule">
      <db:title>\qmlmodule</db:title>
      <db:para>Insert the <db:code>\\qmlmodule</db:code> command to
                                    create a <db:code>QML</db:code> module page. A QML module is
                                    a collection of QML types or any related material. This command
                                    is similar to the <db:link xlink:href="13-qdoc-commands-topics.html#group-command">group-command</db:link>.</db:para>
      <db:para>A QML class may belong to a module by inserting the <db:link xlink:href="13-qdoc-commands-topics.html#inqmlmodule-command">\inqmlmodule</db:link> command as a topic command. Every
                                    member of a group must be linked to using the module name and
                                    two colons (<db:code>::</db:code>).</db:para>
      <db:programlisting>\beginqdoc A link to the TabWidget of the UI
                                    Component is \l {UIComponent::TabWidget}. \endqdoc</db:programlisting>
      <db:para>QDoc will generate a page for the module with a listing of
                                    the members of the module.</db:para>
      <db:programlisting> \qmlmodule ClickableComponents This is a list
                                    of the Clickable Components set. A Clickable component responds to a \c
                                    clicked() event.</db:programlisting>
      <db:para>The <db:link xlink:href="qdoc-componentset-example.html">UIComponents</db:link> example demonstrates proper usage of
                                    QDoc commands to document QML types and QML modules.</db:para>
   </db:section>
   <db:section xml:id="inqmlmodule">
      <db:title>\inqmlmodule</db:title>
      <db:para>A QML class may belong to a <db:link xlink:href="13-qdoc-commands-topics.html#qmlmodule-command">QML
                                        module</db:link> by inserting the <db:link xlink:href="13-qdoc-commands-topics.html#inqmlmodule-command">\inqmlmodule</db:link> command as a topic command, with the
                                    module name (without a version number) as the only argument.
                                    Every member of a group must be linked to using the module name
                                    and two colons (<db:code>::</db:code>).</db:para>
      <db:programlisting> \qmltype ClickableButton \inqmlmodule
                                    ClickableComponents A clickable button that responds to the \c
                                    click() event.</db:programlisting>
      <db:para>To link to the <db:code>ClickableButton</db:code>, use
                                    the <db:code>\l
                                        ClickableComponents::ClickableButton</db:code>
                                    format.</db:para>
      <db:para>The <db:link xlink:href="qdoc-componentset-example.html">UIComponents</db:link> example demonstrates proper usage of
                                    QDoc commands to document QML types and QML modules.</db:para>
   </db:section>
   <db:section xml:id="instantiates">
      <db:title>\instantiates</db:title>
      <db:para>The \instantiates command is used in the <db:link xlink:href="13-qdoc-commands-topics.html#qmltype-command">QML
                                        type</db:link> comment of an elemental QML type to specify
                                    the name of the C++ class that instantiates the QML
                                    type.</db:para>
      <db:para>If the QML type is not instantiated by a C++ class, this
                                    command is not used.</db:para>
      <db:programlisting>/*! \qmltype Transform
                                    \instantiates QGraphicsTransform \ingroup
                                        qml-transform-elements \since 4.7 \brief Provides elements provide a way to
                                    build advanced transformations on Items. The Transform element is a
                                    base type which cannot be instantiated directly.*/</db:programlisting>
      <db:para>The example generates the <db:link xlink:href="http://qt-project.org/doc/qt-4.7/qml-transform.html">QML Transform</db:link> page. The <db:emphasis>\qmltype</db:emphasis>
                                    comment includes <db:link xlink:href="13-qdoc-commands-topics.html#instantiates-command">\instantiates</db:link> to specify that a Transform is
                                    instantiated by the C++ class <db:code><db:link xlink:href="qtwidgets/qgraphicstransform.html">QGraphicsTransform</db:link></db:code>. A \qmltype comment
                                    should</db:para>
   </db:section>
   <db:section xml:id="typedef">
      <db:title>\typedef</db:title>
      <db:para>The \typedef command is for documenting a C++ typedef. The
                                    argument is the name of the typedef. The documentation for the
                                    typedef will be included in the reference documentation for the
                                    class, namespace, or header file in which the typedef is
                                    declared. To relate the \typedef to a class, namespace, or
                                    header file, the \typedef comment must contain a <db:link xlink:href="18-qdoc-commands-relating.html#relates-command">\relates</db:link> command.</db:para>
      <db:programlisting>/*! \typedefQObjectList \relates QObject Synonym forQList&lt;QObject&gt;.*/</db:programlisting>
      <db:para>QDoc includes this in <db:code>qobject.html</db:code>
                                    as:</db:para>
      <db:blockquote>
         <db:bridgehead renderas="sect3">typedef QObjectList</db:bridgehead>
         <db:para>Synonym for <db:code><db:link xlink:href="qtcore/qlist.html">QList</db:link>&lt;&gt;</db:code>
            <db:code><db:link xlink:href="qtcore/qobject.html">QObject</db:link></db:code>&gt;.</db:para>
      </db:blockquote>
      <db:para>Another, although more rare, example:</db:para>
      <db:programlisting>/*! \typedefQMsgHandler \relates
                                        QtGlobal This is a
                                        typedeffor a pointer to a
                                    function with the following signature: \code void myMsgHandler(QtMsgType,constchar*); \ endcode \sa
                                        QtMsgType,qInstallMsgHandler() */</db:programlisting>
      <db:para>QDoc includes this in <db:code>qtglobal.html</db:code>
                                    as:</db:para>
      <db:blockquote>
         <db:bridgehead renderas="sect3">typedef QtMsgHandler</db:bridgehead>
         <db:para>This is a typedef for a pointer to a function with the
                                        following signature:</db:para>
         <db:programlisting> void myMsgHandler(QtMsgType, const char
                                            *);</db:programlisting>
         <db:para>See also <db:code><db:link xlink:href="qtcore/qtglobal.html#QtMsgType-enum">QtMsgType</db:link></db:code> and qInstallMsgHandler().</db:para>
      </db:blockquote>
      <db:para>Other typedefs are located on the reference page for the
                                    class that defines them.</db:para>
      <db:programlisting>/*! \typedefQLinkedList::Iterator Qt-style synonym forQList::iterator.*/</db:programlisting>
      <db:para>QDoc includes this one on the reference page for class
                                        <db:code><db:link xlink:href="qtcore/qlinkedlist.html">QLinkedList</db:link></db:code>
                                    as:</db:para>
      <db:blockquote>
         <db:bridgehead renderas="sect3">typedef QLinkedList::Iterator</db:bridgehead>
         <db:para>Qt-style synonym for <db:code><db:link xlink:href="qtcore/qlist-iterator.html">QList::iterator</db:link></db:code>.</db:para>
      </db:blockquote>
   </db:section>
   <db:section xml:id="variable">
      <db:title>\variable</db:title>
      <db:para>The \variable command is for documenting a class member
                                    variable or a constant. The argument is the variable or constant
                                    name. The \variable command comment includes a <db:link xlink:href="11-qdoc-commands-specialcontent.html#brief-command">\brief</db:link> command. QDoc generates the documentation
                                    based on the text from \brief command.</db:para>
      <db:para>The documentation will be located in the in the associated
                                    class, header file, or namespace documentation.</db:para>
      <db:para>In case of a member variable:</db:para>
      <db:programlisting>/*! \variable QStyleOption::palette \brief The palette
                                    that should be used when painting the control */</db:programlisting>
      <db:para>QDoc includes this in qstyleoption.html as:</db:para>
      <db:blockquote>
         <db:bridgehead renderas="sect3"> QPalette
                                         QStyleOption::palette </db:bridgehead>
         <db:para>This variable holds the palette that should be used when
                                        painting the control.</db:para>
      </db:blockquote>
      <db:para>You can also document constants with the \variable command.
                                    For example, suppose you have the <db:code>Type</db:code>
                                    and <db:code>UserType</db:code> constants in the <db:code><db:link xlink:href="qtwidgets/qtreewidgetitem.html">QTreeWidgetItem</db:link></db:code> class:</db:para>
      <db:programlisting>enum {
                                    Type =0, UserType =1000 };</db:programlisting>
      <db:para>For these, the \variable command can be used this
                                    way:</db:para>
      <db:programlisting>/*! \variable QTreeWidgetItem::Type The default type for tree widget items. \sa UserType, type() */</db:programlisting>
      <db:programlisting>/*! \variable QTreeWidgetItem::UserType The minimum value
                                        for custom
                                        types. Values below
                                    UserType are reserved by Qt. \sa Type, type() */</db:programlisting>
      <db:para>QDoc includes these in qtreewidget.html as:</db:para>
      <db:blockquote>
         <db:bridgehead renderas="sect3"> const int QTreeWidgetItem::Type </db:bridgehead>
         <db:para>The default type for tree widget items.</db:para>
         <db:para>See also <db:link xlink:href="qtwidgets/qtreewidgetitem.html#ItemType-enum">UserType</db:link> and <db:link xlink:href="qtwidgets/qtreewidgetitem.html#type">type()</db:link>.</db:para>
         <db:bridgehead renderas="sect3"> const int QTreeWidgetItem::UserType </db:bridgehead>
         <db:para>The minimum value for custom types. Values below
                                        UserType are reserved by Qt.</db:para>
         <db:para>See also <db:link xlink:href="qtwidgets/qtreewidgetitem.html#ItemType-enum">Type</db:link> and <db:link xlink:href="qtwidgets/qtreewidgetitem.html#type">type()</db:link>.</db:para>
      </db:blockquote>
   </db:section>
</db:article>
