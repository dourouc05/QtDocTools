<html:html xmlns:html="http://www.w3.org/1999/xhtml" lang="en">
    <html:head>
        <html:meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
        <!-- qdoc-manual-topiccmds.qdoc -->
        <html:title>Topic Commands | QDoc Manual 5.4</html:title>
        <html:link href="style/offline.css" rel="stylesheet" type="text/css" />
    </html:head>
    <html:body>
        <html:div class="header" id="qtdocheader">
            <html:div class="main">
                <html:div class="main-rounded">
                    <html:div class="navigationbar">
                        <html:ul>
                            <html:li><html:a href="qtdoc/index.html">Qt 5.4</html:a></html:li>
                            <html:li><html:a href="qdoc-index.html">QDoc Manual</html:a></html:li>
                            <html:li>Topic Commands</html:li>
                            <html:li id="buildversion">Qt 5.4.2 Reference Documentation</html:li>
                        </html:ul>
                    </html:div>
                </html:div>
                <html:div class="content">
                    <html:div class="line">
                        <html:div class="content mainContent">
                            <html:link href="27-qdoc-commands-alphabetical.html" rel="prev" />
                            <html:link href="14-qdoc-commands-contextcommands.html" rel="next" />
                            <html:p class="naviNextPrevious headerNavi">
                                <html:a class="prevPage" href="27-qdoc-commands-alphabetical.html"
                                    >Command Index</html:a>
                                <html:a class="nextPage"
                                    href="14-qdoc-commands-contextcommands.html">Context
                                    Commands</html:a>
                            </html:p><html:p> </html:p><html:div class="sidebar">
                                <html:div class="toc">
                                    <html:h3><html:a name="toc">Contents</html:a></html:h3>
                                    <html:ul>
                                        <html:li class="level1"><html:a href="#class"
                                                >\class</html:a></html:li>
                                        <html:li class="level1"><html:a href="#enum"
                                            >\enum</html:a></html:li>
                                        <html:li class="level1"><html:a href="#example"
                                                >\example</html:a></html:li>
                                        <html:li class="level1"><html:a href="#externalpage"
                                                >\externalpage</html:a></html:li>
                                        <html:li class="level1"><html:a href="#fn-function">\fn
                                                (function)</html:a></html:li>
                                        <html:li class="level1"><html:a href="#group"
                                                >\group</html:a></html:li>
                                        <html:li class="level1"><html:a href="#headerfile"
                                                >\headerfile</html:a></html:li>
                                        <html:li class="level1"><html:a href="#macro"
                                                >\macro</html:a></html:li>
                                        <html:li class="level1"><html:a href="#module"
                                                >\module</html:a></html:li>
                                        <html:li class="level1"><html:a href="#namespace"
                                                >\namespace</html:a></html:li>
                                        <html:li class="level1"><html:a href="#page"
                                            >\page</html:a></html:li>
                                        <html:li class="level1"><html:a href="#property"
                                                >\property</html:a></html:li>
                                        <html:li class="level1"><html:a href="#service"
                                                >\service</html:a></html:li>
                                        <html:li class="level1"><html:a href="#qmlattachedproperty"
                                                >\qmlattachedproperty</html:a></html:li>
                                        <html:li class="level1"><html:a href="#qmlattachedsignal"
                                                >\qmlattachedsignal</html:a></html:li>
                                        <html:li class="level1"><html:a href="#qmlbasictype"
                                                >\qmlbasictype</html:a></html:li>
                                        <html:li class="level1"><html:a href="#qmlclass"
                                                >\qmlclass</html:a></html:li>
                                        <html:li class="level1"><html:a href="#qmlmethod"
                                                >\qmlmethod</html:a></html:li>
                                        <html:li class="level1"><html:a href="#qmltype"
                                                >\qmltype</html:a></html:li>
                                        <html:li class="level1"><html:a href="#qmlproperty"
                                                >\qmlproperty</html:a></html:li>
                                        <html:li class="level1"><html:a href="#qmlsignal"
                                                >\qmlsignal</html:a></html:li>
                                        <html:li class="level1"><html:a href="#qmlmodule"
                                                >\qmlmodule</html:a></html:li>
                                        <html:li class="level1"><html:a href="#inqmlmodule"
                                                >\inqmlmodule</html:a></html:li>
                                        <html:li class="level1"><html:a href="#instantiates"
                                                >\instantiates</html:a></html:li>
                                        <html:li class="level1"><html:a href="#typedef"
                                                >\typedef</html:a></html:li>
                                        <html:li class="level1"><html:a href="#variable"
                                                >\variable</html:a></html:li>
                                    </html:ul>
                                </html:div>
                                <html:div class="sidebar-content" id="sidebar-content"
                                ></html:div></html:div>
                            <html:h1 class="title">Topic Commands</html:h1>
                            <html:span class="subtitle"></html:span>
                            <!-- $$$13-qdoc-commands-topics.html-description -->
                            <html:div class="descr">
                                <html:a name="details"></html:a>
                                <html:p>A topic command tells QDoc which source code element is
                                    being documented. Some topic commands allow you to create
                                    documentation pages that aren't tied to any underlying source
                                    code element.</html:p>
                                <html:p>When QDoc processes a QDoc comment, it tries to connect the
                                    comment to an element in the source code by first looking for a
                                    topic command that names the source code element. If there is no
                                    topic command, QDoc tries to connect the comment to the source
                                    code element that immediately follows the comment. If it can't
                                    do either of these and if there is no topic command that
                                    indicates the comment does not have an underlying source code
                                    element (e.g. <html:a
                                        href="13-qdoc-commands-topics.html#page-command"
                                        >\page</html:a>), then the comment is discarded.</html:p>
                                <html:a name="topic-argument"></html:a><html:p>The name of the
                                    entity being documented is usually the only argument for a topic
                                    command. Use the complete name. Sometimes there can be a second
                                    parameter in the argument. See e.g. <html:a
                                        href="13-qdoc-commands-topics.html#page-command"
                                        >\page</html:a>.</html:p>
                                <html:pre class="cpp">\<html:span class="keyword">enum</html:span>
                                    <html:span class="type"><html:a href="qtwidgets/qcombobox.html"
                                            >QComboBox</html:a></html:span><html:span
                                        class="operator">::</html:span>InsertPolicy</html:pre>
                                <html:p>The <html:a href="13-qdoc-commands-topics.html#fn-command"
                                        >\fn</html:a> command is a special case. For the <html:a
                                        href="13-qdoc-commands-topics.html#fn-command">\fn</html:a>
                                    command, use the function's signature including the class
                                    qualifier.</html:p>
                                <html:pre class="cpp">\fn <html:span class="type">void</html:span>
                                    <html:span class="type"><html:a
                                            href="qtwidgets/qgraphicswidget.html"
                                            >QGraphicsWidget</html:a></html:span><html:span
                                        class="operator">::</html:span>setWindowFlags(<html:span
                                        class="type"><html:a href="qtcore/qt.html"
                                        >Qt</html:a></html:span><html:span class="operator"
                                        >::</html:span>WindowFlags wFlags)</html:pre>
                                <html:p>A topic command can appear anywhere in a comment but must
                                    stand alone on its own line. It is good practice is to let the
                                    topic command be the first line of the comment. If the argument
                                    spans several lines, make sure that each line (except the last
                                    one) is ended with a backslash. Moreover, QDoc counts
                                    parentheses, which means that if it encounters a '(' it
                                    considers everything until the closing ')' as its
                                    argument.</html:p>
                                <html:p>If a topic command is repeated with different arguments, the
                                    same documentation will appear for both the units.</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \fn <html:span class="type"
                                        >void</html:span> PreviewWindow<html:span class="operator"
                                        >::</html:span>setWindowFlags() \fn <html:span class="type"
                                        >void</html:span> ControllerWindow<html:span
                                        class="operator">::</html:span>setWindowFlags() Sets the
                                    widgets flags <html:span class="keyword">using</html:span> the
                                        <html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span><html:span class="operator"
                                        >::</html:span>setWindowFlags() function<html:span
                                        class="operator">.</html:span> Then runs through the
                                    available window flags<html:span class="operator">,</html:span>
                                    creating a text that contains the names of the flags that
                                    matches the flags parameter<html:span class="operator"
                                        >,</html:span> displaying the text in the widgets text
                                        editor<html:span class="operator">.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>The <html:code>PreviewWindow::setWindowFlags()</html:code>
                                    and <html:code>ControllerWindow::setWindowFlags()</html:code>
                                    functions will get the same documentation.</html:p>
                                <html:a name="class-command"></html:a><html:a name="class"></html:a>
                                <html:h2 id="class">\class</html:h2>
                                <html:p>The \class command is for documenting a C++ class. The
                                    argument is the complete name of the class. The command tells
                                    QDoc that a class is part of the public API, and lets you enter
                                    a detailed description.</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \<html:span class="keyword"
                                        >class</html:span>
                                    <html:span class="type"><html:a href="qtcore/qmap.html"
                                            >QMap</html:a></html:span><html:span class="operator"
                                        >::</html:span>iterator \brief The <html:span class="type"
                                            ><html:a href="qtcore/qmap.html"
                                        >QMap</html:a></html:span><html:span class="operator"
                                        >::</html:span>iterator <html:span class="keyword"
                                        >class</html:span> provides an STL<html:span
                                        class="operator">-</html:span>style non<html:span
                                        class="operator">-</html:span><html:span class="keyword"
                                        >const</html:span> iterator <html:span class="keyword"
                                        >for</html:span>
                                    <html:span class="type"><html:a href="qtcore/qmap.html"
                                            >QMap</html:a></html:span> and <html:span class="type"
                                            ><html:a href="qtcore/qmultimap.html"
                                        >QMultiMap</html:a></html:span><html:span class="operator"
                                        >.</html:span>
                                    <html:span class="type"><html:a href="qtcore/qmap.html"
                                            >QMap</html:a></html:span> features both
                                        \l{STL<html:span class="operator">-</html:span>style
                                    iterators} and \l{Java<html:span class="operator"
                                    >-</html:span>style iterators}<html:span class="operator"
                                        >.</html:span> The STL<html:span class="operator"
                                        >-</html:span>style iterators <html:span class="operator"
                                        >.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator">.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>The HTML documentation for the named class is written to a
                                        <html:code>.html</html:code> file named from the class name,
                                    in lower case, and with the double colon qualifier(s) replaced
                                    with '-'. For example, the documentation for the
                                        <html:code>QMap::Iterator</html:code> class is written to
                                        <html:code>qmap-iterator.html</html:code>.</html:p>
                                <html:a name="framework"></html:a><html:p>The file contains the
                                    class description from the \class comment, plus the
                                    documentation generated from QDoc comments for all the class
                                    members: a list of the class's types, properties, functions,
                                    signals, and slots.</html:p>
                                <html:p>In addition to the detailed description of the class, the
                                    \class comment typically contains a <html:a
                                        href="11-qdoc-commands-specialcontent.html#brief-command"
                                        >\brief</html:a> command and one or more <html:a
                                        href="03-qdoc-commands-markup.html">Markup
                                    Commands</html:a>. See the \class command for any of the Qt
                                    class for examples. Here is a very simple example:</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \<html:span class="keyword"
                                        >class</html:span> PreviewWindow \brief The PreviewWindow
                                        <html:span class="keyword">class</html:span> is a custom
                                        widget<html:span class="operator">.</html:span> displaying
                                    the names of its currently set window flags in a read<html:span
                                        class="operator">-</html:span>only text editor<html:span
                                        class="operator">.</html:span> \ingroup miscellaneous The
                                    PreviewWindow <html:span class="keyword">class</html:span>
                                    inherits <html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span><html:span class="operator"
                                        >.</html:span> The widget displays the names of its window
                                    flags set with the \l {function} {setWindowFlags()}
                                        function<html:span class="operator">.</html:span> It is also
                                    provided with a <html:span class="type"><html:a
                                            href="qtwidgets/qpushbutton.html"
                                        >QPushButton</html:a></html:span> that closes the
                                        window<html:span class="operator">.</html:span>
                                    <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span> \sa <html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>The way QDoc renders this \class will depend a lot on your
                                        <html:code>style.css</html:code> file, but the general
                                    outline of the class reference page will look like
                                    this:</html:p>
                                <html:blockquote>
                                    <html:h1>PreviewWindow Class Reference</html:h1>
                                    <html:p>The PreviewWindow class is a custom widget displaying
                                        the names of its currently set window flags in a read-only
                                        text editor. <html:a
                                            href="13-qdoc-commands-topics.html#preview-window"
                                            >More...</html:a></html:p>
                                    <html:h3>Properties</html:h3>
                                    <html:ul>
                                        <html:li>52 properties inherited from <html:a
                                                href="qtwidgets/qwidget.html"
                                            >QWidget</html:a></html:li>
                                        <html:li>1 property inherited from <html:a
                                                href="qtcore/qobject.html"
                                            >QObject</html:a></html:li>
                                    </html:ul>
                                    <html:h3>Public Functions</html:h3>
                                    <html:ul>
                                        <html:li><html:a
                                                href="13-qdoc-commands-topics.html#constructor"
                                                >PreviewWindow</html:a>(<html:a
                                                href="qtwidgets/qwidget.html">QWidget</html:a>
                                            *parent = 0)</html:li>
                                        <html:li>void <html:a
                                                href="13-qdoc-commands-topics.html#function"
                                                >setWindowFlags</html:a>(<html:a
                                                href="qtcore/qt.html#WindowType-enum"
                                                >Qt::WindowFlags</html:a> flags)</html:li>
                                    </html:ul>
                                    <html:ul>
                                        <html:li>183 public functions inherited from <html:a
                                                href="qtwidgets/qwidget.html"
                                            >QWidget</html:a></html:li>
                                        <html:li>28 public functions inherited from <html:a
                                                href="qtcore/qobject.html"
                                            >QObject</html:a></html:li>
                                    </html:ul>
                                    <html:h3>Public Slots</html:h3>
                                    <html:ul>
                                        <html:li>17 public slots inherited from <html:a
                                                href="qtwidgets/qwidget.html"
                                            >QWidget</html:a></html:li>
                                        <html:li>1 public slot inherited from <html:a
                                                href="qtcore/qobject.html"
                                            >QObject</html:a></html:li>
                                    </html:ul>
                                    <html:h3>Additional Inherited Members</html:h3>
                                    <html:ul>
                                        <html:li>1 signal inherited from <html:a
                                                href="qtwidgets/qwidget.html"
                                            >QWidget</html:a></html:li>
                                        <html:li>1 signal inherited from <html:a
                                                href="qtcore/qobject.html"
                                            >QObject</html:a></html:li>
                                        <html:li>4 static public members inherited from <html:a
                                                href="qtwidgets/qwidget.html"
                                            >QWidget</html:a></html:li>
                                        <html:li>4 static public members inherited from <html:a
                                                href="qtcore/qobject.html"
                                            >QObject</html:a></html:li>
                                        <html:li>39 protected functions inherited from <html:a
                                                href="qtwidgets/qwidget.html"
                                            >QWidget</html:a></html:li>
                                        <html:li>7 protected functions inherited from <html:a
                                                href="qtcore/qobject.html"
                                            >QObject</html:a></html:li>
                                    </html:ul>
                                    <html:a name="preview-window"></html:a>
                                    <html:hr />
                                    <html:h2>Detailed Description</html:h2>
                                    <html:p>The PreviewWindow class is a custom widget displaying
                                        the names of its currently set window flags in a read-only
                                        text editor.</html:p>
                                    <html:p>The PreviewWindow class inherits <html:a
                                            href="qtwidgets/qwidget.html">QWidget</html:a>. The
                                        widget displays the names of its window flags set with the
                                            <html:a href="13-qdoc-commands-topics.html#function"
                                            >setWindowFlags()</html:a> function. It is also provided
                                        with a <html:a href="qtwidgets/qpushbutton.html"
                                            >QPushButton</html:a> that closes the window.</html:p>
                                    <html:p>...</html:p>
                                    <html:p>See also <html:a href="qtwidgets/qwidget.html"
                                            >QWidget</html:a>.</html:p>
                                    <html:hr />
                                    <html:h2>Member Function Documentation</html:h2>
                                    <html:a name="constructor"></html:a>
                                    <html:h3>PreviewWindow(QWidget *parent = 0)</html:h3>
                                    <html:p>Constructs a preview window widget with
                                            <html:i>parent</html:i>.</html:p>
                                    <html:a name="function"></html:a>
                                    <html:h3>setWindowFlags(Qt::WindowFlags flags)</html:h3>
                                    <html:p>Sets the widgets flags using the <html:a
                                            href="qtwidgets/qwidget.html#windowFlags-prop"
                                            >QWidget::setWindowFlags</html:a>() function.</html:p>
                                    <html:p>Then runs through the available window flags, creating a
                                        text that contains the names of the flags that matches the
                                        flags parameter, displaying the text in the widgets text
                                        editor.</html:p>
                                </html:blockquote>
                                <html:a name="enum-command"></html:a><html:a name="enum"></html:a>
                                <html:h2 id="enum">\enum</html:h2>
                                <html:p>The \enum command is for documenting a C++ enum type. The
                                    argument is the full name of the enum type.</html:p>
                                <html:p>The enum values are documented in the \enum comment using
                                    the <html:a
                                        href="10-qdoc-commands-tablesandlists.html#value-command"
                                        >\value</html:a> command. If an enum value is not documented
                                    with \value, QDoc emits a warning. These warnings can be avoided
                                    using the <html:a
                                        href="10-qdoc-commands-tablesandlists.html#omitvalue-command"
                                        >\omitvalue</html:a> command to tell QDoc that an enum value
                                    should not be documented. The enum documentation will be
                                    included on the class reference page, header file page, or
                                    namespace page where the enum type is defined. For example,
                                    consider the enum type <html:code>Corner</html:code> in the Qt
                                    namespace:</html:p>
                                <html:pre class="cpp">
                                    <html:span class="keyword">enum</html:span> Corner {
                                    TopLeftCorner <html:span class="operator">=</html:span>
                                    <html:span class="number">0x00000</html:span><html:span
                                        class="operator">,</html:span> TopRightCorner <html:span
                                        class="operator">=</html:span>
                                    <html:span class="number">0x00001</html:span><html:span
                                        class="operator">,</html:span> BottomLeftCorner <html:span
                                        class="operator">=</html:span>
                                    <html:span class="number">0x00002</html:span><html:span
                                        class="operator">,</html:span> BottomRightCorner <html:span
                                        class="operator">=</html:span>
                                    <html:span class="number">0x00003</html:span>
                                    <html:span class="preprocessor">#if defined(QT3_SUPPORT)
                                        &amp;&amp; !defined(Q_MOC_RUN)</html:span>
                                    <html:span class="operator">,</html:span>TopLeft <html:span
                                        class="operator">=</html:span> TopLeftCorner<html:span
                                        class="operator">,</html:span> TopRight <html:span
                                        class="operator">=</html:span> TopRightCorner<html:span
                                        class="operator">,</html:span> BottomLeft <html:span
                                        class="operator">=</html:span> BottomLeftCorner<html:span
                                        class="operator">,</html:span> BottomRight <html:span
                                        class="operator">=</html:span> BottomRightCorner <html:span
                                        class="preprocessor">#endif</html:span> };</html:pre>
                                <html:p>This enum can be cocumented this way:</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \<html:span class="keyword"
                                        >enum</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span><html:span class="operator"
                                        >::</html:span>Corner This <html:span class="keyword"
                                        >enum</html:span> type specifies a corner in a rectangle:
                                    \value TopLeftCorner The top<html:span class="operator"
                                        >-</html:span>left corner of the rectangle<html:span
                                        class="operator">.</html:span> \value TopRightCorner The
                                        top<html:span class="operator">-</html:span>right corner of
                                    the rectangle<html:span class="operator">.</html:span> \value
                                    BottomLeftCorner The bottom<html:span class="operator"
                                        >-</html:span>left corner of the rectangle<html:span
                                        class="operator">.</html:span> \value BottomRightCorner The
                                        bottom<html:span class="operator">-</html:span>right corner
                                    of the rectangle<html:span class="operator">.</html:span>
                                    \omitvalue TopLeft \omitvalue TopRight \omitvalue BottomLeft
                                    \omitvalue BottomRight <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>Note the inclusion of the namespace qualifier. QDoc will
                                    render this enum type in <html:code>qt.html</html:code> like
                                    this:</html:p>
                                <html:blockquote>
                                    <html:h3 class="fn"><html:a name="Corner-enum"></html:a>enum
                                        Qt::Corner</html:h3>
                                    <html:p>This enum type specifies a corner in a
                                        rectangle:</html:p>
                                    <html:table border="1" cellpadding="2" cellspacing="1"
                                        width="100%">
                                        <html:tbody>
                                            <html:tr>
                                                <html:th width="25%">Constant</html:th>
                                                <html:th width="15%">Value</html:th>
                                                <html:th width="60%">Description</html:th>
                                            </html:tr>

                                            <html:tr>
                                                <html:td valign="top"
                                                  ><html:tt>Qt::TopLeftCorner</html:tt></html:td>
                                                <html:td align="center" valign="top"
                                                  ><html:tt>0x00000</html:tt></html:td>
                                                <html:td valign="top">The top-left corner of the
                                                  rectangle.</html:td>
                                            </html:tr>

                                            <html:tr>
                                                <html:td valign="top"
                                                  ><html:tt>Qt::TopRightCorner</html:tt></html:td>
                                                <html:td align="center" valign="top"
                                                  ><html:tt>0x00001</html:tt></html:td>
                                                <html:td valign="top">The top-right corner of the
                                                  rectangle.</html:td>
                                            </html:tr>

                                            <html:tr>
                                                <html:td valign="top"
                                                  ><html:tt>Qt::BottomLeftCorner</html:tt></html:td>
                                                <html:td align="center" valign="top"
                                                  ><html:tt>0x00002</html:tt></html:td>
                                                <html:td valign="top">The bottom-left corner of the
                                                  rectangle.</html:td>
                                            </html:tr>

                                            <html:tr>
                                                <html:td valign="top"
                                                  ><html:tt>Qt::BottomRightCorner</html:tt></html:td>
                                                <html:td align="center" valign="top"
                                                  ><html:tt>0x00003</html:tt></html:td>
                                                <html:td valign="top">The bottom-right corner of the
                                                  rectangle.</html:td>
                                            </html:tr>

                                        </html:tbody>
                                    </html:table>
                                </html:blockquote>
                                <html:p>See also <html:a
                                        href="10-qdoc-commands-tablesandlists.html#value-command"
                                        >\value</html:a> and <html:a
                                        href="10-qdoc-commands-tablesandlists.html#omitvalue-command"
                                        >\omitvalue</html:a>.</html:p>
                                <html:a name="example-command"></html:a><html:a name="example"></html:a>
                                <html:h2 id="example">\example</html:h2>
                                <html:p>The \example command is for documenting an example. The
                                    argument is the example's path relative to omne of the paths
                                    listed in the <html:a
                                        href="22-qdoc-configuration-generalvariables.html#exampledirs-variable"
                                        >exampledirs</html:a> variable in the QDoc configuration
                                    file.</html:p>
                                <html:p>The documentation page will be output to
                                        <html:code>path-to-example</html:code>.html. QDoc will add a
                                    list of all the example's source files at the top of the
                                    page.</html:p>
                                <html:p>For example, if <html:a
                                        href="22-qdoc-configuration-generalvariables.html#exampledirs-variable"
                                        >exampledirs</html:a> contains
                                        <html:code>$QTDIR/examples/widgets/imageviewer</html:code>,
                                    then</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \example widgets<html:span
                                        class="operator">/</html:span>imageviewer \title ImageViewer
                                    Example \subtitle The example shows how to combine <html:span
                                        class="type"><html:a href="qtwidgets/qlabel.html"
                                            >QLabel</html:a></html:span> and <html:span class="type"
                                            ><html:a href="qtwidgets/qscrollarea.html"
                                            >QScrollArea</html:a></html:span> to display an
                                        image<html:span class="operator">.</html:span>
                                    <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc renders this example in
                                    widgets-imageviewer.html:</html:p>
                                <html:blockquote>
                                    <html:center><html:h1>Image Viewer
                                        Example</html:h1></html:center>
                                    <html:p>Files:</html:p>
                                    <html:ul>
                                        <html:li><html:a
                                                href="http://doc.qt.io/qt-5/qtwidgets-widgets-imageviewer-imageviewer-cpp.html"
                                                >widgets/imageviewer/imageviewer.cpp</html:a></html:li>
                                        <html:li><html:a
                                                href="http://doc.qt.io/qt-5/qtwidgets-widgets-imageviewer-imageviewer-h.html"
                                                >widgets/imageviewer/imageviewer.h</html:a></html:li>
                                        <html:li><html:a
                                                href="http://doc.qt.io/qt-5/qtwidgets-widgets-imageviewer-main-cpp.html"
                                                >widgets/imageviewer/main.cpp</html:a></html:li>
                                    </html:ul>
                                    <html:p>The example shows how to combine <html:a
                                            href="qtwidgets/qlabel.html">QLabel</html:a> and <html:a
                                            href="qtwidgets/qscrollarea.html">QScrollArea</html:a>
                                        to display an image.</html:p>
                                    <html:p>...</html:p>
                                </html:blockquote>
                                <html:a name="externalpage-command"></html:a><html:a
                                    name="externalpage"></html:a>
                                <html:h2 id="externalpage">\externalpage</html:h2>
                                <html:p>The \externalpage command assigns a title to an external
                                    URL.</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \externalpage http:<html:span
                                        class="comment">//doc.qt.io/</html:span> \title <html:span
                                        class="type"><html:a href="qtcore/qt.html"
                                        >Qt</html:a></html:span> Documentation Site <html:span
                                        class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>This allows you to include a link to the external page in
                                    your documentation this way:</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> At the \l {<html:span
                                        class="type"><html:a href="qtcore/qt.html"
                                        >Qt</html:a></html:span> Documentation Site} you can find
                                    the latest documentation <html:span class="keyword"
                                        >for</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span> Creator<html:span
                                        class="operator">,</html:span> the <html:span class="type"
                                            ><html:a href="qtcore/qt.html">Qt</html:a></html:span>
                                    SDK and much more<html:span class="operator">.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc renders this as:</html:p>
                                <html:blockquote><html:p>At the <html:a href="http://doc.qt.io/">Qt
                                            Documentation Site</html:a> you can find the latest
                                        documentation for Qt, Qt Creator, the Qt SDK and much
                                        more.</html:p>
                                </html:blockquote>
                                <html:p>To achieve the same result without using the \externalpage
                                    command, you would have to hard-code the address into your
                                    documentation:</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> At the \l {http:<html:span
                                        class="comment">//doc.qt.io/}{Qt Documentation
                                        Site}</html:span> you can find the latest documentation
                                        <html:span class="keyword">for</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span> Creator<html:span
                                        class="operator">,</html:span> the <html:span class="type"
                                            ><html:a href="qtcore/qt.html">Qt</html:a></html:span>
                                    SDK and much more<html:span class="operator">.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>The \externalpage command makes it easier to maintain the
                                    documentation. If the address changes, you only need to change
                                    the argument of the \externalpage command.</html:p>
                                <html:a name="fn-command"></html:a><html:a name="fn-function"></html:a>
                                <html:h2 id="fn-function">\fn (function)</html:h2>
                                <html:p>The \fn command is for documenting a function. The argument
                                    is the function's signature, including its return type,
                                    const-ness, and list of formal arguments with types. If the
                                    named function doesn't exist, QDoc emits a warning.</html:p>
                                <html:p><html:b>Note: </html:b>The \fn command is QDoc's default
                                    command: when no topic command can be found in a QDoc comment,
                                    QDoc tries to tie the documentation to the following code as if
                                    it is the documentation for a function. Hence, it is normally
                                    not necessary to include this command when documenting a
                                    function, if the function's QDoc comment is written immediately
                                    above the function implementation in the
                                        <html:code>.cpp</html:code> file. But it must be present
                                    when documenting an inline function in the
                                        <html:code>.cpp</html:code> file that is implemented in the
                                        <html:code>.h</html:code> file.</html:p><html:pre
                                    class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \fn bool <html:span
                                        class="type"><html:a href="qtwidgets/qtoolbar.html"
                                            >QToolBar</html:a></html:span><html:span
                                        class="operator">::</html:span>isAreaAllowed(<html:span
                                        class="type"><html:a href="qtcore/qt.html"
                                        >Qt</html:a></html:span><html:span class="operator"
                                        >::</html:span>ToolBarArea area) <html:span class="keyword"
                                        >const</html:span> Returns \c <html:span class="keyword"
                                        >true</html:span>
                                    <html:span class="keyword">if</html:span>
                                    <html:span class="keyword">this</html:span> toolbar is dockable
                                    in the given \a area; otherwise returns \c <html:span
                                        class="keyword">false</html:span><html:span class="operator"
                                        >.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc renders this as:</html:p>
                                <html:blockquote>
                                    <html:h3>bool QToolBar::isAreaAllowed(Qt::ToolBarArea area)
                                        const </html:h3>
                                    <html:p>Returns <html:code>true</html:code> if this toolbar is
                                        dockable in the given <html:i>area</html:i>; otherwise
                                        returns <html:code>false</html:code>.</html:p>
                                </html:blockquote>
                                <html:p>See also <html:a
                                        href="18-qdoc-commands-relating.html#overload-command"
                                        >\overload</html:a>.</html:p>
                                <html:a name="group-command"></html:a><html:a name="group"></html:a>
                                <html:h2 id="group">\group</html:h2>
                                <html:p>The \group command creates a separate page that lists the
                                    classes belonging to the group. The argument is the group
                                    name.</html:p>
                                <html:p>A class is included in a group by using the <html:a
                                        href="19-qdoc-commands-grouping.html#ingroup-command"
                                        >\ingroup</html:a> command. Overview pages can also be
                                    related to a group using the same command, but the list of
                                    overview pages must be requested explicitly using the <html:a
                                        href="12-0-qdoc-commands-miscellaneous.html#generatelist-command"
                                        >\generatelist</html:a> command (see example
                                    below).</html:p>
                                <html:p>The \group command is typically followed by a <html:a
                                        href="20-qdoc-commands-namingthings.html#title-command"
                                        >\title</html:a> command and a short introduction to the
                                    group. The HTML page for the group is written to a
                                        <html:code>.html</html:code> file put in
                                        &lt;lower-case&gt;<html:i>group</html:i>.html.</html:p>
                                <html:p>Each class name is listed as a link to the class reference
                                    page followed by the text from the class's <html:a
                                        href="11-qdoc-commands-specialcontent.html#brief-command"
                                        >\brief</html:a> texts.</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \group io \title
                                        Input<html:span class="operator">/</html:span>Output and
                                    Networking These classes are used to handle input and output to
                                    and from external devices<html:span class="operator"
                                        >,</html:span> processes<html:span class="operator"
                                        >,</html:span> files etc<html:span class="operator"
                                        >.</html:span><html:span class="operator">,</html:span> as
                                    well as manipulating files and directories<html:span
                                        class="operator">.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc generates a group page in
                                        <html:code>io.html</html:code> that will look like
                                    this:</html:p>
                                <html:blockquote>
                                    <html:h1>Input/Output and Networking</html:h1>
                                    <html:p>These classes are used to handle input and output to and
                                        from external devices, processes, files etc., as well as
                                        manipulating files and directories.</html:p>
                                    <html:p> </html:p><html:table width="100%">
                                        <html:tbody>
                                            <html:tr bgcolor="#e0e0e0" valign="top">
                                                <html:td><html:b>
                                                  <html:a
                                                  href="http://doc.qt.io/qt-5/qabstractsocket.html"
                                                  >QAbstractSocket</html:a>
                                                  </html:b></html:td>
                                                <html:td> The base functionality common to all
                                                  socket types </html:td>
                                            </html:tr>

                                            <html:tr bgcolor="#e0e0e0" valign="top">
                                                <html:td><html:b>
                                                  <html:a href="http://doc.qt.io/qt-5/qbuffer.html"
                                                  >QBuffer</html:a>
                                                  </html:b></html:td>
                                                <html:td> QIODevice interface for a QByteArray
                                                </html:td>
                                            </html:tr>

                                            <html:tr bgcolor="#e0e0e0" valign="top">
                                                <html:td><html:b>
                                                  <html:a
                                                  href="http://doc.qt.io/qt-5/qclipboard.html"
                                                  >QClipboard</html:a>
                                                  </html:b></html:td>
                                                <html:td> Access to the window system clipboard
                                                </html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table>
                                </html:blockquote>
                                <html:p>Note that overview pages related to the group, must be
                                    listed explicitly using the <html:a
                                        href="12-0-qdoc-commands-miscellaneous.html#generatelist-command"
                                        >\generatelist</html:a> command with the
                                        <html:code>related</html:code> argument.</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \group architecture \title
                                    Architecture These documents describe aspects of <html:span
                                        class="type"><html:a href="qtcore/qt.html"
                                        >Qt</html:a></html:span><html:span class="char">'s
                                        architecture and design, including overviews of core Qt
                                        features and technologies. \generatelist{related} * /
                                    </html:span></html:pre>
                                <html:p>See also <html:a
                                        href="19-qdoc-commands-grouping.html#ingroup-command"
                                        >\ingroup</html:a> and <html:a
                                        href="12-0-qdoc-commands-miscellaneous.html#generatelist-command"
                                        >\generatelist</html:a>.</html:p>
                                <html:a name="headerfile-command"></html:a><html:a name="headerfile"></html:a>
                                <html:h2 id="headerfile">\headerfile</html:h2>
                                <html:p>The \headerfile command is for documenting the global
                                    functions, types and macros that are declared in a header file,
                                    but not in a namespace. The argument is the name of the header
                                    file. The HTML page is written to a <html:code>.html</html:code>
                                    file constructed from the header file argument.</html:p>
                                <html:p>The documentation for a function, type, or macro that is
                                    declared in the header file being documented, is included in the
                                    header file page using the <html:a
                                        href="18-qdoc-commands-relating.html#relates-command"
                                        >\relates</html:a> command.</html:p>
                                <html:p>If the argument doesn't exist as a header file, the
                                    \headerfile command creates a documentation page for the header
                                    file anyway.</html:p>
                                <html:pre class="cpp">
                                    <html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \headerfile <html:span
                                        class="operator">&lt;</html:span><html:span class="type"
                                        >QtAlgorithms</html:span><html:span class="operator"
                                        >&gt;</html:span> \title Generic Algorithms \brief The
                                        <html:span class="operator">&lt;</html:span><html:span
                                        class="type">QtAlgorithms</html:span><html:span
                                        class="operator">&gt;</html:span> header file provides
                                    generic <html:span class="keyword"
                                        >template</html:span><html:span class="operator"
                                        >-</html:span>based algorithms<html:span class="operator"
                                        >.</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span> provides a number of global
                                        <html:span class="keyword">template</html:span> functions in
                                    \c <html:span class="operator">&lt;</html:span><html:span
                                        class="type">QtAlgorithms</html:span><html:span
                                        class="operator">&gt;</html:span> that work on containers
                                    and perform well<html:span class="operator">-</html:span>know
                                        algorithms<html:span class="operator">.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc generates a header file page
                                        <html:code>qtalgorithms.html</html:code> that looks like
                                    this:</html:p>
                                <html:blockquote>
                                    <html:center><html:h1>&lt;QtAlgorithms&gt; - Generic
                                            Algorithms</html:h1></html:center>
                                    <html:p>The <html:qtalgorithms> header file provides generic
                                            template-based algorithms. <html:a
                                                href="13-qdoc-commands-topics.html#header-command"
                                                >More...</html:a>
                                        </html:qtalgorithms></html:p>
                                    <html:h3>Functions</html:h3>
                                    <html:ul>
                                        <html:li>RandomAccessIterator <html:a
                                                href="http://doc.qt.io/qt-5/qtalgorithms-obsolete.html#qBinaryFind"
                                                >qBinaryFind</html:a> (RandomAccessIterator begin,
                                            RandomAccessIterator end, const T &amp; value)</html:li>
                                        <html:li>...</html:li>
                                    </html:ul>
                                    <html:hr />
                                    <html:a name="header"></html:a>
                                    <html:h2>Detailed Description</html:h2>
                                    <html:p>The <html:qtalgorithms> header file provides generic
                                            template-based algorithms. </html:qtalgorithms></html:p>
                                    <html:p>Qt provides a number of global template functions in
                                            <html:code>&lt;QtAlgorithms&gt;</html:code> that work on
                                        containers and perform well-know algorithms.</html:p>
                                    <html:p>...</html:p>
                                </html:blockquote>
                                <html:a name="macro-command"></html:a><html:a name="macro"></html:a>
                                <html:h2 id="macro">\macro</html:h2>
                                <html:p>The \macro command is for documenting a C++ macro. The
                                    argument is the macro in one of three styles: function-like
                                    macros like <html:a href="qtcore/qtglobal.html#Q_ASSERT"
                                        >Q_ASSERT</html:a>(), declaration-style macros like <html:a
                                        href="qtcore/qobject.html#Q_PROPERTY">Q_PROPERTY</html:a>(),
                                    and macros without parentheses like <html:a
                                        href="qtcore/qobject.html#Q_OBJECT"
                                    >Q_OBJECT</html:a>.</html:p>
                                <html:p>The \macro comment must contain a <html:a
                                        href="18-qdoc-commands-relating.html#relates-command"
                                        >\relates</html:a> command that attaches the macro comment
                                    to a class, header file, or namespace. Otherwise, the
                                    documentation will be lost. Here are three example macro
                                    comments followed by what they might look like in
                                        <html:code>qtglobal.html</html:code> or
                                        <html:code>qobject.html</html:code>:</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \macro <html:span
                                        class="type">void</html:span>
                                    <html:a href="qtcore/qtglobal.html#Q_ASSERT"
                                    >Q_ASSERT</html:a>(bool test) \relates <html:span
                                        class="operator">&lt;</html:span><html:span class="type"
                                        >QtGlobal</html:span><html:span class="operator"
                                        >&gt;</html:span> Prints a warning message containing the
                                    source code file name and line number <html:span class="keyword"
                                        >if</html:span> \a test is <html:span class="keyword"
                                        >false</html:span><html:span class="operator">.</html:span>
                                    <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span> \sa <html:a
                                        href="qtcore/qtglobal.html#Q_ASSERT_X"
                                        >Q_ASSERT_X</html:a>()<html:span class="operator"
                                        >,</html:span>
                                    <html:a href="qtcore/qtglobal.html#qFatal"
                                        >qFatal</html:a>()<html:span class="operator">,</html:span>
                                    {Debugging Techniques} <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:blockquote>
                                    <html:h3>void Q_ASSERT ( bool <html:i>test</html:i> )</html:h3>
                                    <html:p>Prints a warning message containing the source code file
                                        name and line number if <html:i>test</html:i> is
                                        false.</html:p>
                                    <html:p>...</html:p>
                                    <html:p>See also <html:a href="qtcore/qtglobal.html#Q_ASSERT_X"
                                            >Q_ASSERT_X</html:a>(), <html:a
                                            href="qtcore/qtglobal.html#qFatal">qFatal</html:a>() and
                                            <html:a
                                            href="qtdoc/testing-and-debugging.html#debugging-techniques"
                                            >Debugging Techniques</html:a>.</html:p>
                                </html:blockquote>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \macro <html:a
                                        href="qtcore/qobject.html#Q_PROPERTY"
                                        >Q_PROPERTY</html:a>(<html:span class="operator"
                                        >.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator">.</html:span>)
                                    \relates <html:span class="type"><html:a
                                            href="qtcore/qobject.html">QObject</html:a></html:span>
                                    This macro declares a <html:span class="type"><html:a
                                            href="qtcore/qobject.html">QObject</html:a></html:span>
                                        property<html:span class="operator">.</html:span> The syntax
                                    is: <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span> \sa {<html:span class="type"><html:a
                                            href="qtcore/qt.html">Qt</html:a></html:span><html:span
                                        class="char">'s Property System} * / </html:span></html:pre>
                                <html:blockquote>
                                    <html:h3>Q_PROPERTY ( ... )</html:h3>
                                    <html:p>This macro declares a <html:a href="qtcore/qobject.html"
                                            >QObject</html:a> property. The syntax is:</html:p>
                                    <html:p>...</html:p>
                                    <html:p>See also <html:a
                                            href="qtcore/properties.html#qt-s-property-system">Qt's
                                            Property System</html:a>.</html:p>
                                </html:blockquote>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \macro Q_OBJECT \relates
                                        <html:span class="type"><html:a href="qtcore/qobject.html"
                                            >QObject</html:a></html:span> The Q_OBJECT macro must
                                    appear in the <html:span class="keyword">private</html:span>
                                    section of a <html:span class="keyword">class</html:span>
                                    definition that declares its own <html:span class="keyword"
                                        >signals</html:span> and <html:span class="keyword"
                                        >slots</html:span><html:span class="operator">,</html:span>
                                    <html:span class="keyword">or</html:span> that uses other
                                    services provided by <html:span class="type"><html:a
                                            href="qtcore/qt.html">Qt</html:a></html:span><html:span
                                        class="char">'s meta-object system. ... \sa {Meta-Object
                                        System}, {Signals and Slots}, {Qt'</html:span>s Property
                                    System} <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:blockquote>
                                    <html:h3>Q_OBJECT</html:h3>
                                    <html:p>The <html:a href="qtcore/qobject.html#Q_OBJECT"
                                            >Q_OBJECT</html:a> macro must appear in the private
                                        section of a class definition that declares its own signals
                                        and slots or that uses other services provided by Qt's
                                        meta-object system.</html:p>
                                    <html:p>...</html:p>
                                    <html:p>See also <html:a
                                            href="qtcore/metaobjects.html#meta-object-system"
                                            >Meta-Object System</html:a>, <html:a
                                            href="qtcore/signalsandslots.html">Signals &amp;
                                            Slots</html:a> and <html:a
                                            href="qtcore/properties.html#qt-s-property-system">Qt's
                                            Property System</html:a>.</html:p>
                                </html:blockquote>
                                <html:a name="module-command"></html:a><html:a name="module"></html:a>
                                <html:h2 id="module">\module</html:h2>
                                <html:p>The \module creates a page that lists the classes belonging
                                    to the module specified by the command's argument. A class
                                    included in the module by including the <html:a
                                        href="19-qdoc-commands-grouping.html#inmodule-command"
                                        >\inmodule</html:a> command in the \class comment.</html:p>
                                <html:p>The \module command is typically followed by a <html:a
                                        href="20-qdoc-commands-namingthings.html#title-command"
                                        >\title</html:a> and a <html:a
                                        href="11-qdoc-commands-specialcontent.html#brief-command"
                                        >\brief</html:a> command. Each class is listed as a link to
                                    the class reference page followed by the text from the class's
                                        <html:a
                                        href="11-qdoc-commands-specialcontent.html#brief-command"
                                        >\brief</html:a> command. For example:</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \module <html:span
                                        class="type"><html:a href="qtnetwork/qtnetwork-module.html"
                                            >QtNetwork</html:a></html:span> \title <html:span
                                        class="type"><html:a href="qtcore/qt.html"
                                        >Qt</html:a></html:span> Network Module \brief Contains
                                    classes <html:span class="keyword">for</html:span> writing
                                        TCP<html:span class="operator">/</html:span>IP clients and
                                        servers<html:span class="operator">.</html:span> The network
                                    module provides classes to make network programming easier and
                                        portable<html:span class="operator">.</html:span> It offers
                                    both high<html:span class="operator">-</html:span>level classes
                                    such as <html:span class="type"><html:a
                                            href="qtnetwork/qnetworkaccessmanager.html"
                                            >QNetworkAccessManager</html:a></html:span> that
                                    implements application<html:span class="operator"
                                    >-</html:span>level protocols<html:span class="operator"
                                        >,</html:span> and lower<html:span class="operator"
                                        >-</html:span>level classes such as <html:span class="type"
                                            ><html:a href="qtnetwork/qtcpsocket.html"
                                            >QTcpSocket</html:a></html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a href="qtnetwork/qtcpserver.html"
                                            >QTcpServer</html:a></html:span><html:span
                                        class="operator">,</html:span> and <html:span class="type"
                                            ><html:a href="qtnetwork/qudpsocket.html"
                                            >QUdpSocket</html:a></html:span><html:span
                                        class="operator">.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc renders this in <html:code>qtnetwork.html</html:code>
                                    like this:</html:p>
                                <html:blockquote>
                                    <html:h1><html:center>Qt Network Module</html:center></html:h1>
                                    <html:p>The Qt Network module offers classes that allow you to
                                        write TCP/IP clients and servers.<html:a
                                            href="13-qdoc-commands-topics.html#module-details"
                                            >More...</html:a></html:p>
                                    <html:p> </html:p><html:table width="100%">
                                        <html:tbody>
                                            <html:tr bgcolor="#d0d0d0" valign="top">
                                                <html:td><html:b>
                                                  <html:a
                                                  href="http://doc.qt.io/qt-5/qabstractsocket.html"
                                                  >QAbstractSocket</html:a>
                                                  </html:b></html:td>
                                                <html:td> The base functionality common to all
                                                  socket types </html:td>
                                            </html:tr>

                                            <html:tr bgcolor="#d0d0d0" valign="top">
                                                <html:td><html:b>
                                                  <html:a
                                                  href="http://doc.qt.digia.com/4.0/qftp.html"
                                                  >QFtp</html:a>
                                                  </html:b></html:td>
                                                <html:td> Implementation of the FTP protocol
                                                </html:td>
                                            </html:tr>

                                            <html:tr bgcolor="#d0d0d0" valign="top">
                                                <html:td>...</html:td>
                                                <html:td>...</html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table>
                                    <html:p></html:p><html:hr /><html:p></html:p>
                                    <html:a name="module-details"></html:a>
                                    <html:h2>Detailed Description</html:h2>
                                    <html:p> The Qt Network module offers classes that allow you to
                                        write TCP/IP clients and servers. </html:p>
                                    <html:p> The network module provides classes to make network
                                        programming easier and portable. It offers both high-level
                                        classes such as QNetworkAccessManager that implements
                                        application-level protocols, and lower-level classes such as
                                        QTcpSocket, QTcpServer, and QUdpSocket. </html:p>
                                    <html:p>...</html:p>
                                </html:blockquote>
                                <html:p>See also <html:a
                                        href="19-qdoc-commands-grouping.html#inmodule-command"
                                        >\inmodule</html:a></html:p>
                                <html:a name="namespace-command"></html:a><html:a name="namespace"></html:a>
                                <html:h2 id="namespace">\namespace</html:h2>
                                <html:p>The \namespace command is for documenting the contents of
                                    the C++ namespace named as its argument. The documentation
                                    outline QDoc generates for a namespace is similar to the outline
                                    it generates for a C++ class.</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \<html:span class="keyword"
                                        >namespace</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span> \brief Contains miscellaneous
                                    identifiers used throughout the <html:span class="type"><html:a
                                            href="qtcore/qt.html">Qt</html:a></html:span>
                                        library<html:span class="operator">.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc renders this in <html:code>qt.html</html:code> like
                                    this:</html:p>
                                <html:blockquote>
                                    <html:center><html:h1>Qt Namespace
                                        Reference</html:h1></html:center>
                                    <html:p>The Qt namespace contains miscellaneous identifiers used
                                        throughout the Qt library. <html:a
                                            href="13-qdoc-commands-topics.html#name"
                                            >More...</html:a>
                                    </html:p>
                                    <html:pre>#include &lt;Qt&gt;</html:pre>
                                    <html:ul>
                                        <html:li>
                                            <html:a href="http://doc.qt.digia.com/4.0/qt-qt3.html">
                                                Qt 3 support members</html:a></html:li>
                                    </html:ul>
                                    <html:h3>Types</html:h3>
                                    <html:ul>
                                        <html:li>flags <html:a
                                                href="http://doc.qt.digia.com/4.0/qt.html#AlignmentFlag-enum"
                                                >Alignment</html:a></html:li>
                                        <html:li>...</html:li>
                                    </html:ul>
                                    <html:hr />
                                    <html:a name="name"></html:a>
                                    <html:h2>Detailed Description</html:h2>
                                    <html:p>Contains miscellaneous identifiers used throughout the
                                        Qt library.</html:p>
                                    <html:p>...</html:p>
                                </html:blockquote>
                                <html:a name="page-command"></html:a><html:a name="page"></html:a>
                                <html:h2 id="page">\page</html:h2>
                                <html:p>The \page command is for creating a stand-alone
                                    documentation page. The argument can consist of two parts
                                    separated by a space. The first part is the name of the file
                                    where QDoc should store the page. The second part, if present,
                                    is a word that specifies the page type. Currently, the second
                                    part can be one of the following list of words:</html:p>
                                <html:ul>
                                    <html:li>faq - A frequently asked question.</html:li>
                                    <html:li>howto - A user guide on how to use some components of
                                        the software.</html:li>
                                    <html:li>example - A page that describes a working
                                        example.</html:li>
                                    <html:li>overview - For text pages that provide an overview of
                                        some important subject.</html:li>
                                    <html:li>tutorial - For text pages that are part of a
                                        tutorial.</html:li>
                                    <html:li>api - This is the type of page used for C++ class
                                        references and QML type references. You should never use
                                        this one for the pages you write, because this one is
                                        reserved for qdoc.</html:li>
                                </html:ul>
                                <html:p>The page title is set using the <html:a
                                        href="20-qdoc-commands-namingthings.html#title-command"
                                        >\title</html:a> command.</html:p>
                                <html:pre class="cpp">
                                    <html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \page aboutqt<html:span
                                        class="operator">.</html:span>html \title About <html:span
                                        class="type"><html:a href="qtcore/qt.html"
                                        >Qt</html:a></html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span> is a C<html:span
                                        class="operator">+</html:span><html:span class="operator"
                                        >+</html:span> toolkit <html:span class="keyword"
                                        >for</html:span> cross<html:span class="operator"
                                        >-</html:span>platform GUI application development<html:span
                                        class="operator">.</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span> provides single<html:span
                                        class="operator">-</html:span>source portability across
                                    Microsoft Windows<html:span class="operator">,</html:span> Mac
                                    OS X<html:span class="operator">,</html:span> Linux<html:span
                                        class="operator">,</html:span> and all major commercial Unix
                                        variants<html:span class="operator">.</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span> provides application developers
                                    with all the functionality needed to build applications with
                                        state<html:span class="operator">-</html:span>of<html:span
                                        class="operator">-</html:span>the<html:span class="operator"
                                        >-</html:span>art graphical user interfaces<html:span
                                        class="operator">.</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span> is fully object<html:span
                                        class="operator">-</html:span>oriented<html:span
                                        class="operator">,</html:span> easily extensible<html:span
                                        class="operator">,</html:span> and allows <html:span
                                        class="keyword">true</html:span> component
                                        programming<html:span class="operator">.</html:span>
                                    <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc renders this page in
                                        <html:code>aboutqt.html</html:code>.</html:p>
                                <html:a name="property-command"></html:a><html:a name="property"></html:a>
                                <html:h2 id="property">\property</html:h2>
                                <html:p>The \property command is for documenting a Qt property. The
                                    argument is the full property name.</html:p>
                                <html:p>A property is defined using the <html:a
                                        href="qtcore/qobject.html#Q_PROPERTY">Q_PROPERTY</html:a>()
                                    macro. The macro takes as arguments the property's name and its
                                    set, reset and get functions.</html:p>
                                <html:pre class="cpp"><html:a href="qtcore/qobject.html#Q_PROPERTY"
                                        >Q_PROPERTY</html:a>(<html:span class="type"><html:a
                                            href="qtcore/qstring.html">QString</html:a></html:span>
                                    state READ state WRITE setState)</html:pre>
                                <html:p>The set, reset and get functions don't need to be
                                    documented, documenting the property is sufficient. QDoc will
                                    generate a list of the access function that will appear in the
                                    property documentation which in turn will be located in the
                                    documentation of the class that defines the property.</html:p>
                                <html:p>The \property command comment typically includes a <html:a
                                        href="11-qdoc-commands-specialcontent.html#brief-command"
                                        >\brief</html:a> command. For properties the <html:a
                                        href="11-qdoc-commands-specialcontent.html#brief-command"
                                        >\brief</html:a> command's argument is a sentence fragment
                                    that will be included in a one line description of the property.
                                    The command follows the same rules for the <html:a
                                        href="11-qdoc-commands-specialcontent.html#brief-property"
                                        >description</html:a> as the <html:a
                                        href="13-qdoc-commands-topics.html#variable-command"
                                        >\variable</html:a> command.</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \property <html:span
                                        class="type"><html:a href="qtwidgets/qpushbutton.html"
                                            >QPushButton</html:a></html:span><html:span
                                        class="operator">::</html:span>flat \brief Whether the
                                    border is disabled<html:span class="operator">.</html:span> This
                                        property<html:span class="char">'s default is false. * /
                                    </html:span></html:pre>
                                <html:p>QDoc includes this in
                                        <html:code>qpushbutton.html</html:code> like this:</html:p>
                                <html:blockquote>
                                    <html:h3>flat : bool</html:h3>
                                    <html:p>This property holds whether the border is
                                        disabled.</html:p>
                                    <html:p>This property's default is false.</html:p>
                                    <html:p>Access functions:</html:p>
                                    <html:ul>
                                        <html:li><html:b> bool isFlat () const</html:b></html:li>
                                        <html:li><html:b> void setFlat ( bool )</html:b></html:li>
                                    </html:ul>
                                </html:blockquote>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \property <html:span
                                        class="type"><html:a href="qtwidgets/qwidget.html"
                                            >QWidget</html:a></html:span><html:span class="operator"
                                        >::</html:span>width \brief The width of the widget
                                    excluding any window frame<html:span class="operator"
                                        >.</html:span> See the \l {Window Geometry} documentation
                                        <html:span class="keyword">for</html:span> an overview of
                                    window geometry<html:span class="operator">.</html:span> \sa
                                        geometry<html:span class="operator">,</html:span>
                                        height<html:span class="operator">,</html:span> size
                                        <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc includes this in <html:code>qwidget.html</html:code>
                                    like this:</html:p>
                                <html:blockquote>
                                    <html:h3>width : const int</html:h3>
                                    <html:p>This property holds the width of the widget excluding
                                        any window frame.</html:p>
                                    <html:p>See the <html:a
                                            href="qtwidgets/application-windows.html#window-geometry"
                                            >Window Geometry</html:a> documentation for an overview
                                        of window geometry.</html:p>
                                    <html:p>Access functions:</html:p>
                                    <html:ul>
                                        <html:li><html:b> int width () const</html:b></html:li>
                                    </html:ul>
                                    <html:p>See also <html:a
                                            href="qtwidgets/qwidget.html#geometry-prop"
                                            >geometry</html:a>, <html:a
                                            href="qtwidgets/qwidget.html#height-prop"
                                            >height</html:a>, and <html:a
                                            href="qtwidgets/qwidget.html#size-prop"
                                        >size</html:a>.</html:p>
                                </html:blockquote>
                                <html:a name="service-command"></html:a><html:a name="service"></html:a>
                                <html:h2 id="service">\service</html:h2>
                                <html:p>The \service command tells QDoc that a class is a service
                                    class and names the service. The command takes two arguments,
                                    the name of the class and the name of the service. Currently,
                                    this command is not used in the Qt documentation.</html:p>
                                <html:pre class="cpp">
                                    <html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \service TimeService Time
                                        <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span>
                                    <html:span class="keyword">class</html:span> TimeService :
                                        <html:span class="keyword">public</html:span>
                                    <html:span class="type">QCopObjectService</html:span> {
                                        <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span> }</html:pre>
                                <html:p>See also <html:a
                                        href="13-qdoc-commands-topics.html#class-command"
                                        >\class</html:a> and <html:a
                                        href="12-0-qdoc-commands-miscellaneous.html#generatelist-command"
                                        >\generatelist</html:a>.</html:p>
                                <html:a name="qmlattachedproperty-command"></html:a><html:a
                                    name="qmlattachedproperty"></html:a>
                                <html:h2 id="qmlattachedproperty">\qmlattachedproperty</html:h2>
                                <html:p>The \qmlattachedproperty command is for documenting a QML
                                    property that will be attached to some QML type. See <html:a
                                        href="http://qt-project.org/doc/qt-4.7/qdeclarativeintroduction.html#attached-properties"
                                        >Attached Properties</html:a>. The argument is the rest of
                                    the line. The argument text should be the property type,
                                    followed by the QML element name where the property is being
                                    declared, the <html:code>::</html:code> qualifier, and finally
                                    the property name. If we have a QML attached property named
                                        <html:code>isCurrentItem</html:code> in QML
                                        <html:code>ListView</html:code>, and the property has type
                                        <html:code>bool</html:code>, the \qmlattachedproperty for it
                                    would look like this:</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \qmlattachedproperty bool
                                        ListView<html:span class="operator"
                                    >::</html:span>isCurrentItem This attached property is \c
                                        <html:span class="keyword">true</html:span>
                                    <html:span class="keyword">if</html:span>
                                    <html:span class="keyword">this</html:span> delegate is the
                                    current item; otherwise <html:span class="keyword"
                                        >false</html:span><html:span class="operator">.</html:span>
                                    It is attached to each instance of the delegate<html:span
                                        class="operator">.</html:span> This property may be used to
                                    adjust the appearance of the current item<html:span
                                        class="operator">,</html:span>
                                    <html:span class="keyword">for</html:span> example: \snippet
                                        doc<html:span class="operator">/</html:span>src<html:span
                                        class="operator">/</html:span>snippets<html:span
                                        class="operator">/</html:span>declarative<html:span
                                        class="operator">/</html:span>listview<html:span
                                        class="operator">/</html:span>listview<html:span
                                        class="operator">.</html:span>qml isCurrentItem <html:span
                                        class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc includes this attached property on the QML reference
                                    page for the <html:a
                                        href="http://qt-project.org/doc/qt-4.7/qml-listview.html#isCurrentItem-prop"
                                        >ListView</html:a> element.</html:p>
                                <html:a name="qmlattachedsignal-command"></html:a><html:a
                                    name="qmlattachedsignal"></html:a>
                                <html:h2 id="qmlattachedsignal">\qmlattachedsignal</html:h2>
                                <html:p>The \qmlattachedsignal command is for documenting an
                                    attachable <html:a href="qtqml/qtqml-syntax-signals.html"
                                        >signal</html:a>. The \qmlattachedsignal command is used
                                    just like the <html:a
                                        href="13-qdoc-commands-topics.html#qmlsignal-command"
                                        >\qmlsignal</html:a> command.</html:p>
                                <html:p>The argument is the rest of the line. It should be the name
                                    of the QML type where the signal is declared, the
                                        <html:code>::</html:code> qualifier, and finally the signal
                                    name. For example, a QML attached signal named
                                        <html:code>add()</html:code> in the
                                        <html:code>GridView</html:code> element is documented like
                                    this:</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \qmlattachedsignal
                                        GridView<html:span class="operator">::</html:span>add() This
                                    attached signal is emitted immediately after an item is added to
                                    the view<html:span class="operator">.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc includes this documentation on the QML reference page
                                    for the <html:a
                                        href="qtquick/qtquick-draganddrop-example.html#gridview"
                                        >GridView</html:a> element.</html:p>
                                <html:a name="qmlbasictype-command"></html:a><html:a
                                    name="qmlbasictype"></html:a>
                                <html:h2 id="qmlbasictype">\qmlbasictype</html:h2>
                                <html:p>The \qmlbasictype command is for documenting a basic type
                                    for QML. The argument is the type name. The type must be
                                    included in the QML basic types group using the <html:a
                                        href="19-qdoc-commands-grouping.html#ingroup-command"
                                        >\ingroup</html:a> command as shown below. This will cause
                                    QDoc to include the documentation for the type on the <html:a
                                        href="http://qt-project.org/doc/qt-4.7/qdeclarativebasictypes.html"
                                        >QML Basic Types</html:a> page. The <html:a
                                        href="11-qdoc-commands-specialcontent.html#brief-command"
                                        >\brief</html:a> command is also required, because it
                                    appears on the <html:a
                                        href="http://qt-project.org/doc/qt-4.7/qdeclarativebasictypes.html"
                                        >QML Basic Types</html:a> page as well.</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \qmlbasictype <html:span
                                        class="type">int</html:span> \ingroup qmlbasictypes \brief
                                    An integer is a whole number<html:span class="operator"
                                        >,</html:span>
                                    <html:span class="keyword">for</html:span> example <html:span
                                        class="number">0</html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="number">10</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="keyword">or</html:span>
                                    <html:span class="operator">-</html:span><html:span
                                        class="number">20.</html:span> An integer is a whole
                                        number<html:span class="operator">,</html:span> e<html:span
                                        class="operator">.</html:span>g<html:span class="operator"
                                        >.</html:span>
                                    <html:span class="number">0</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">10</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="keyword">or</html:span>
                                    <html:span class="operator">-</html:span><html:span
                                        class="number">20.</html:span> The possible \c <html:span
                                        class="type">int</html:span> values range from around
                                        <html:span class="operator">-</html:span><html:span
                                        class="number">2000000000</html:span> to around <html:span
                                        class="number">2000000000</html:span><html:span
                                        class="operator">,</html:span> although most elements will
                                    only accept a reduced range (which they mention in their
                                        documentation)<html:span class="operator">.</html:span>
                                    Example: \qml Item { width: <html:span class="number"
                                        >100</html:span>; height: <html:span class="number"
                                        >200</html:span> } \endqml \sa {QML Basic Types} <html:span
                                        class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc outputs this as <html:a
                                        href="http://qt-project.org/doc/qt-4.7/qml-int.html"
                                        >qml-int.html</html:a>.</html:p>
                                <html:a name="qmlclass-command"></html:a><html:a name="qmlclass"></html:a>
                                <html:h2 id="qmlclass">\qmlclass</html:h2>
                                <html:p>This command is deprecated. Use <html:a
                                        href="13-qdoc-commands-topics.html#qmltype-command"
                                        >\qmltype</html:a> instead.</html:p>
                                <html:p>The \qmlclass command is for documenting a QML type that is
                                    instantiated by a C++ class. The command has two arguments. The
                                    first argument is the name of the QML type. The second argument
                                    is the name of the C++ class that instantiates the QML
                                    type.</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \qmlclass Transform
                                        <html:span class="type"><html:a
                                            href="qtwidgets/qgraphicstransform.html"
                                            >QGraphicsTransform</html:a></html:span> \ingroup
                                        qml<html:span class="operator"
                                        >-</html:span>transform<html:span class="operator"
                                        >-</html:span>elements \since <html:span class="number"
                                        >4.7</html:span> \brief Provides a way of building advanced
                                    transformations on Items<html:span class="operator"
                                        >.</html:span> The Transform element is a base type which
                                    cannot be instantiated directly<html:span class="operator"
                                        >.</html:span> The following concrete Transform types are
                                    available: \list \li \l Rotation \li \l Scale \li \l Translate
                                    \endlist The Transform elements let you create and control
                                    advanced transformations that can be configured independently
                                        <html:span class="keyword">using</html:span> specialized
                                        properties<html:span class="operator">.</html:span> You can
                                    assign any number of Transform elements to an \l Item<html:span
                                        class="operator">.</html:span> Each Transform is applied in
                                        order<html:span class="operator">,</html:span> one at a
                                        time<html:span class="operator">.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>This example generates the <html:a
                                        href="http://qt-project.org/doc/qt-4.7/qml-transform.html"
                                        >QML Transform</html:a> page. The \qmlclass comment should
                                    include the <html:a
                                        href="16-qdoc-commands-status.html#since-command"
                                        >\since</html:a> command, because all QML types are new. It
                                    should also include the <html:a
                                        href="11-qdoc-commands-specialcontent.html#brief-command"
                                        >\brief</html:a> command. If a type is a member of a group
                                    of QML types, it should also include one or more <html:a
                                        href="19-qdoc-commands-grouping.html#ingroup-command"
                                        >\ingroup</html:a> commands.</html:p>
                                <html:a name="qmlmethod-command"></html:a><html:a name="qmlmethod"></html:a>
                                <html:h2 id="qmlmethod">\qmlmethod</html:h2>
                                <html:p>The \qmlmethod command is for documenting a QML method. The
                                    argument is the complete method signature, including return type
                                    and parameter names and types.</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \qmlmethod <html:span
                                        class="type">void</html:span> TextInput<html:span
                                        class="operator">::</html:span>select(<html:span
                                        class="type">int</html:span> start<html:span
                                        class="operator">,</html:span>
                                    <html:span class="type">int</html:span> end) Causes the text
                                    from \a start to \a end to be selected<html:span
                                        class="operator">.</html:span> If either start <html:span
                                        class="keyword">or</html:span> end is out of range<html:span
                                        class="operator">,</html:span> the selection is <html:span
                                        class="keyword">not</html:span> changed<html:span
                                        class="operator">.</html:span> After having called
                                        <html:span class="keyword">this</html:span><html:span
                                        class="operator">,</html:span> selectionStart will become
                                    the lesser<html:span class="operator">,</html:span> and
                                    selectionEnd the greater (regardless of the order passed to
                                        <html:span class="keyword">this</html:span>
                                        method)<html:span class="operator">.</html:span> \sa
                                        selectionStart<html:span class="operator">,</html:span>
                                    selectionEnd <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc includes this documentation on the element reference
                                    page for the <html:a
                                        href="http://qt-project.org/doc/qt-4.7/qml-textinput.html#select-method"
                                        >TextInput</html:a> element.</html:p>
                                <html:a name="qmltype-command"></html:a><html:a name="qmltype"></html:a>
                                <html:h2 id="qmltype">\qmltype</html:h2>
                                <html:p>The \qmltype command is for documenting a QML type. The
                                    command has one argument, which is the name of the QML
                                    type.</html:p>
                                <html:p>If the QML type is instantiated by a C++ class, that class
                                    must be specified using the <html:a
                                        href="13-qdoc-commands-topics.html#instantiates-command"
                                        >\instantiates</html:a> context command.</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \qmltype Transform
                                    \instantiates <html:span class="type"><html:a
                                            href="qtwidgets/qgraphicstransform.html"
                                            >QGraphicsTransform</html:a></html:span> \ingroup
                                        qml<html:span class="operator"
                                        >-</html:span>transform<html:span class="operator"
                                        >-</html:span>elements \since <html:span class="number"
                                        >4.7</html:span> \brief The Transform elements provide a way
                                    to build advanced transformations on Items<html:span
                                        class="operator">.</html:span> The Transform element is a
                                    base type which cannot be instantiated directly<html:span
                                        class="operator">.</html:span> The concrete Transform types
                                    are: \list \li \l Rotation \li \l Scale \li \l Translate
                                    \endlist The Transform elements let you create and control
                                    advanced transformations that can be configured independently
                                        <html:span class="keyword">using</html:span> specialized
                                        properties<html:span class="operator">.</html:span> You can
                                    assign any number of Transform elements to an \l Item<html:span
                                        class="operator">.</html:span> Each Transform is applied in
                                        order<html:span class="operator">,</html:span> one at a
                                        time<html:span class="operator">.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>The example generates the <html:a
                                        href="http://qt-project.org/doc/qt-4.7/qml-transform.html"
                                        >QML Transform</html:a> page. The <html:i>\qmltype</html:i>
                                    comment includes <html:a
                                        href="13-qdoc-commands-topics.html#instantiates-command"
                                        >\instantiates</html:a> to specify that a Transform is
                                    instantiated by the C++ class <html:a
                                        href="qtwidgets/qgraphicstransform.html"
                                        >QGraphicsTransform</html:a>. A \qmltype comment should
                                    always include a <html:a
                                        href="16-qdoc-commands-status.html#since-command"
                                        >\since</html:a> command, because all QML types are new. It
                                    should also include a <html:a
                                        href="11-qdoc-commands-specialcontent.html#brief-command"
                                        >\brief</html:a> description. If a QML type is a member of a
                                    QML type group, the \qmltype comment should include one or more
                                        <html:a
                                        href="19-qdoc-commands-grouping.html#ingroup-command"
                                        >\ingroup</html:a> commands.</html:p>
                                <html:a name="qmlproperty-command"></html:a><html:a
                                    name="qmlproperty"></html:a>
                                <html:h2 id="qmlproperty">\qmlproperty</html:h2>
                                <html:p>The \qmlproperty command is for documenting a QML property.
                                    The argument is the rest of the line. The argument text should
                                    be the property type, followed by the QML type name, the
                                        <html:code>::</html:code> qualifier, and finally the
                                    property name. If we have a QML property named
                                        <html:code>x</html:code> in QML type
                                        <html:code>Translate</html:code>, and the property has type
                                        <html:code>real</html:code>, the \qmlproperty for it would
                                    look like this:</html:p>
                                <html:pre class="cpp">
                                    <html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \qmlproperty real
                                        Translate<html:span class="operator">::</html:span>x The
                                    translation along the X axis<html:span class="operator"
                                        >.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc includes this QML property on the QML reference page
                                    for the <html:a
                                        href="http://qt-project.org/doc/qt-4.7/qml-translate.html"
                                        >Translate</html:a> element.</html:p>
                                <html:p>If the QML property is of enumeration type, or it holds a
                                    bit-wise combination of flags, the <html:a
                                        href="10-qdoc-commands-tablesandlists.html#value-command"
                                        >\value</html:a> command can be used to document the
                                    acceptable values.</html:p>
                                <html:a name="qmlsignal-command"></html:a><html:a name="qmlsignal"></html:a>
                                <html:h2 id="qmlsignal">\qmlsignal</html:h2>
                                <html:p>The \qmlsignal command is for documenting a QML signal. The
                                    argument is the rest of the line. The arguments should be: the
                                    QML type where the signal is declared, the
                                        <html:code>::</html:code> qualifier, and finally the signal
                                    name. If we have a QML signal named
                                        <html:code>clicked()</html:code>, the documentation for it
                                    would look like this:</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \qmlsignal
                                        UIComponents<html:span class="operator"
                                        >::</html:span>Button<html:span class="operator"
                                        >::</html:span>clicked() This signal is emitted when the
                                    user clicks the button<html:span class="operator">.</html:span>
                                    A click is defined as a press followed by a release<html:span
                                        class="operator">.</html:span> The corresponding handler is
                                    \c onClicked<html:span class="operator">.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc includes this documentation on the QML reference page
                                    for the <html:a
                                        href="http://qt-project.org/doc/qt-4.7/qml-mousearea.html#onEntered-signal"
                                        >MouseArea</html:a> element.</html:p>
                                <html:a name="qmlmodule-command"></html:a><html:a name="qmlmodule"></html:a>
                                <html:h2 id="qmlmodule">\qmlmodule</html:h2>
                                <html:p>Insert the <html:code>\\qmlmodule</html:code> command to
                                    create a <html:code>QML</html:code> module page. A QML module is
                                    a collection of QML types or any related material. This command
                                    is similar to the <html:a
                                        href="13-qdoc-commands-topics.html#group-command"
                                        >group-command</html:a>.</html:p>
                                <html:p>A QML class may belong to a module by inserting the <html:a
                                        href="13-qdoc-commands-topics.html#inqmlmodule-command"
                                        >\inqmlmodule</html:a> command as a topic command. Every
                                    member of a group must be linked to using the module name and
                                    two colons (<html:code>::</html:code>).</html:p>
                                <html:pre class="cpp">\beginqdoc A link to the TabWidget of the UI
                                    Component is \l {UIComponent<html:span class="operator"
                                        >::</html:span>TabWidget}<html:span class="operator"
                                        >.</html:span> \endqdoc</html:pre>
                                <html:p>QDoc will generate a page for the module with a listing of
                                    the members of the module.</html:p>
                                <html:pre class="cpp"> \qmlmodule ClickableComponents This is a list
                                    of the Clickable Components set<html:span class="operator"
                                        >.</html:span> A Clickable component responds to a \c
                                    clicked() event<html:span class="operator"
                                    >.</html:span></html:pre>
                                <html:p>The <html:a href="qdoc-componentset-example.html"
                                        >UIComponents</html:a> example demonstrates proper usage of
                                    QDoc commands to document QML types and QML modules.</html:p>
                                <html:a name="inqmlmodule-command"></html:a><html:a
                                    name="inqmlmodule"></html:a>
                                <html:h2 id="inqmlmodule">\inqmlmodule</html:h2>
                                <html:p>A QML class may belong to a <html:a
                                        href="13-qdoc-commands-topics.html#qmlmodule-command">QML
                                        module</html:a> by inserting the <html:a
                                        href="13-qdoc-commands-topics.html#inqmlmodule-command"
                                        >\inqmlmodule</html:a> command as a topic command, with the
                                    module name (without a version number) as the only argument.
                                    Every member of a group must be linked to using the module name
                                    and two colons (<html:code>::</html:code>).</html:p>
                                <html:pre class="cpp"> \qmltype ClickableButton \inqmlmodule
                                    ClickableComponents A clickable button that responds to the \c
                                    click() event<html:span class="operator"
                                    >.</html:span></html:pre>
                                <html:p>To link to the <html:code>ClickableButton</html:code>, use
                                    the <html:code>\l
                                        ClickableComponents::ClickableButton</html:code>
                                    format.</html:p>
                                <html:p>The <html:a href="qdoc-componentset-example.html"
                                        >UIComponents</html:a> example demonstrates proper usage of
                                    QDoc commands to document QML types and QML modules.</html:p>
                                <html:a name="instantiates-command"></html:a><html:a
                                    name="instantiates"></html:a>
                                <html:h2 id="instantiates">\instantiates</html:h2>
                                <html:p>The \instantiates command is used in the <html:a
                                        href="13-qdoc-commands-topics.html#qmltype-command">QML
                                        type</html:a> comment of an elemental QML type to specify
                                    the name of the C++ class that instantiates the QML
                                    type.</html:p>
                                <html:p>If the QML type is not instantiated by a C++ class, this
                                    command is not used.</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \qmltype Transform
                                    \instantiates <html:span class="type"><html:a
                                            href="qtwidgets/qgraphicstransform.html"
                                            >QGraphicsTransform</html:a></html:span> \ingroup
                                        qml<html:span class="operator"
                                        >-</html:span>transform<html:span class="operator"
                                        >-</html:span>elements \since <html:span class="number"
                                        >4.7</html:span> \brief Provides elements provide a way to
                                    build advanced transformations on Items<html:span
                                        class="operator">.</html:span> The Transform element is a
                                    base type which cannot be instantiated directly<html:span
                                        class="operator">.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>The example generates the <html:a
                                        href="http://qt-project.org/doc/qt-4.7/qml-transform.html"
                                        >QML Transform</html:a> page. The <html:i>\qmltype</html:i>
                                    comment includes <html:a
                                        href="13-qdoc-commands-topics.html#instantiates-command"
                                        >\instantiates</html:a> to specify that a Transform is
                                    instantiated by the C++ class <html:a
                                        href="qtwidgets/qgraphicstransform.html"
                                        >QGraphicsTransform</html:a>. A \qmltype comment
                                    should</html:p>
                                <html:a name="typedef-command"></html:a><html:a name="typedef"></html:a>
                                <html:h2 id="typedef">\typedef</html:h2>
                                <html:p>The \typedef command is for documenting a C++ typedef. The
                                    argument is the name of the typedef. The documentation for the
                                    typedef will be included in the reference documentation for the
                                    class, namespace, or header file in which the typedef is
                                    declared. To relate the \typedef to a class, namespace, or
                                    header file, the \typedef comment must contain a <html:a
                                        href="18-qdoc-commands-relating.html#relates-command"
                                        >\relates</html:a> command.</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \<html:span class="keyword"
                                        >typedef</html:span>
                                    <html:span class="type"><html:a
                                            href="qtcore/qobject.html#QObjectList-typedef"
                                            >QObjectList</html:a></html:span> \relates <html:span
                                        class="type"><html:a href="qtcore/qobject.html"
                                            >QObject</html:a></html:span> Synonym <html:span
                                        class="keyword">for</html:span>
                                    <html:span class="type"><html:a href="qtcore/qlist.html"
                                            >QList</html:a></html:span><html:span class="operator"
                                        >&lt;</html:span><html:span class="type"><html:a
                                            href="qtcore/qobject.html"
                                        >QObject</html:a></html:span><html:span class="operator"
                                        >&gt;</html:span><html:span class="operator">.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc includes this in <html:code>qobject.html</html:code>
                                    as:</html:p>
                                <html:blockquote>
                                    <html:h3>typedef QObjectList</html:h3>
                                    <html:p>Synonym for <html:a href="qtcore/qlist.html"
                                            >QList</html:a>&lt;<html:a href="qtcore/qobject.html"
                                            >QObject</html:a>&gt;.</html:p>
                                </html:blockquote>
                                <html:p>Another, although more rare, example:</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \<html:span class="keyword"
                                        >typedef</html:span>
                                    <html:span class="type">QMsgHandler</html:span> \relates
                                        <html:span class="type">QtGlobal</html:span> This is a
                                        <html:span class="keyword">typedef</html:span>
                                    <html:span class="keyword">for</html:span> a pointer to a
                                    function with the following signature: \code <html:span
                                        class="type">void</html:span> myMsgHandler(<html:span
                                        class="type"><html:a
                                            href="qtcore/qtglobal.html#QtMsgType-enum"
                                            >QtMsgType</html:a></html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="keyword">const</html:span>
                                    <html:span class="type">char</html:span>
                                    <html:span class="operator">*</html:span>); \ endcode \sa
                                        <html:span class="type"><html:a
                                            href="qtcore/qtglobal.html#QtMsgType-enum"
                                            >QtMsgType</html:a></html:span><html:span
                                        class="operator">,</html:span>
                                    <html:a href="qtcore/qtglobal-obsolete.html#qInstallMsgHandler"
                                        >qInstallMsgHandler</html:a>() <html:span class="operator"
                                        >*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc includes this in <html:code>qtglobal.html</html:code>
                                    as:</html:p>
                                <html:blockquote>
                                    <html:h3>typedef QtMsgHandler</html:h3>
                                    <html:p>This is a typedef for a pointer to a function with the
                                        following signature:</html:p>
                                    <html:tt>
                                        <html:pre> void myMsgHandler(QtMsgType, const char
                                            *);</html:pre>
                                    </html:tt>
                                    <html:p>See also <html:a
                                            href="qtcore/qtglobal.html#QtMsgType-enum"
                                            >QtMsgType</html:a> and qInstallMsgHandler().</html:p>
                                </html:blockquote>
                                <html:p>Other typedefs are located on the reference page for the
                                    class that defines them.</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \<html:span class="keyword"
                                        >typedef</html:span>
                                    <html:span class="type"><html:a href="qtcore/qlinkedlist.html"
                                            >QLinkedList</html:a></html:span><html:span
                                        class="operator">::</html:span>Iterator <html:span
                                        class="type"><html:a href="qtcore/qt.html"
                                        >Qt</html:a></html:span><html:span class="operator"
                                        >-</html:span>style synonym <html:span class="keyword"
                                        >for</html:span>
                                    <html:span class="type"><html:a href="qtcore/qlist.html"
                                            >QList</html:a></html:span><html:span class="operator"
                                        >::</html:span>iterator<html:span class="operator"
                                        >.</html:span>
                                    <html:span class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc includes this one on the reference page for class
                                        <html:a href="qtcore/qlinkedlist.html">QLinkedList</html:a>
                                    as:</html:p>
                                <html:blockquote>
                                    <html:h3>typedef QLinkedList::Iterator</html:h3>
                                    <html:p>Qt-style synonym for <html:a
                                            href="qtcore/qlist-iterator.html"
                                            >QList::iterator</html:a>.</html:p>
                                </html:blockquote>
                                <html:a name="variable-command"></html:a><html:a name="variable"></html:a>
                                <html:h2 id="variable">\variable</html:h2>
                                <html:p>The \variable command is for documenting a class member
                                    variable or a constant. The argument is the variable or constant
                                    name. The \variable command comment includes a <html:a
                                        href="11-qdoc-commands-specialcontent.html#brief-command"
                                        >\brief</html:a> command. QDoc generates the documentation
                                    based on the text from \brief command.</html:p>
                                <html:p>The documentation will be located in the in the associated
                                    class, header file, or namespace documentation.</html:p>
                                <html:p>In case of a member variable:</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \variable <html:span
                                        class="type"><html:a href="qtwidgets/qstyleoption.html"
                                            >QStyleOption</html:a></html:span><html:span
                                        class="operator">::</html:span>palette \brief The palette
                                    that should be used when painting the control <html:span
                                        class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc includes this in qstyleoption.html as:</html:p>
                                <html:blockquote>
                                    <html:h3>
                                        <html:a href="http://doc.qt.io/qt-5/qpalette.html"> QPalette
                                        </html:a> QStyleOption::palette </html:h3>
                                    <html:p>This variable holds the palette that should be used when
                                        painting the control.</html:p>
                                </html:blockquote>
                                <html:p>You can also document constants with the \variable command.
                                    For example, suppose you have the <html:code>Type</html:code>
                                    and <html:code>UserType</html:code> constants in the <html:a
                                        href="qtwidgets/qtreewidgetitem.html"
                                        >QTreeWidgetItem</html:a> class:</html:p>
                                <html:pre class="cpp"><html:span class="keyword">enum</html:span> {
                                    Type <html:span class="operator">=</html:span>
                                    <html:span class="number">0</html:span><html:span
                                        class="operator">,</html:span> UserType <html:span
                                        class="operator">=</html:span>
                                    <html:span class="number">1000</html:span> };</html:pre>
                                <html:p>For these, the \variable command can be used this
                                    way:</html:p>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \variable <html:span
                                        class="type"><html:a href="qtwidgets/qtreewidgetitem.html"
                                            >QTreeWidgetItem</html:a></html:span><html:span
                                        class="operator">::</html:span>Type The <html:span
                                        class="keyword">default</html:span> type <html:span
                                        class="keyword">for</html:span> tree widget items<html:span
                                        class="operator">.</html:span> \sa UserType<html:span
                                        class="operator">,</html:span> type() <html:span
                                        class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:pre class="cpp"><html:span class="operator">/</html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">!</html:span> \variable <html:span
                                        class="type"><html:a href="qtwidgets/qtreewidgetitem.html"
                                            >QTreeWidgetItem</html:a></html:span><html:span
                                        class="operator">::</html:span>UserType The minimum value
                                        <html:span class="keyword">for</html:span> custom
                                        types<html:span class="operator">.</html:span> Values below
                                    UserType are reserved by <html:span class="type"><html:a
                                            href="qtcore/qt.html">Qt</html:a></html:span><html:span
                                        class="operator">.</html:span> \sa Type<html:span
                                        class="operator">,</html:span> type() <html:span
                                        class="operator">*</html:span>
                                    <html:span class="operator">/</html:span></html:pre>
                                <html:p>QDoc includes these in qtreewidget.html as:</html:p>
                                <html:blockquote>
                                    <html:h3> const int QTreeWidgetItem::Type </html:h3>
                                    <html:p>The default type for tree widget items.</html:p>
                                    <html:p>See also <html:a
                                            href="qtwidgets/qtreewidgetitem.html#ItemType-enum"
                                            >UserType</html:a> and <html:a
                                            href="qtwidgets/qtreewidgetitem.html#type"
                                            >type()</html:a>.</html:p>
                                    <html:h3> const int QTreeWidgetItem::UserType </html:h3>
                                    <html:p>The minimum value for custom types. Values below
                                        UserType are reserved by Qt.</html:p>
                                    <html:p>See also <html:a
                                            href="qtwidgets/qtreewidgetitem.html#ItemType-enum"
                                            >Type</html:a> and <html:a
                                            href="qtwidgets/qtreewidgetitem.html#type"
                                            >type()</html:a>.</html:p>
                                </html:blockquote>
                            </html:div>
                            <!-- @@@13-qdoc-commands-topics.html -->
                            <html:p class="naviNextPrevious footerNavi">
                                <html:a class="prevPage" href="27-qdoc-commands-alphabetical.html"
                                    >Command Index</html:a>
                                <html:a class="nextPage"
                                    href="14-qdoc-commands-contextcommands.html">Context
                                    Commands</html:a>
                            </html:p>
                        </html:div>
                    </html:div>
                </html:div>
            </html:div>
        </html:div>
        <html:div class="footer">
            <html:p>
                <html:acronym title="Copyright">&#169;</html:acronym> 2015 The Qt Company Ltd.
                Documentation contributions included herein are the copyrights of their respective
                owners.<html:br /> The documentation provided herein is licensed under the terms of
                the <html:a href="http://www.gnu.org/licenses/fdl.html">GNU Free Documentation
                    License version 1.3</html:a> as published by the Free Software
                Foundation.<html:br /> Qt and respective logos are trademarks of The Qt Company Ltd.
                in Finland and/or other countries worldwide. All other trademarks are property of
                their respective owners. </html:p>
        </html:div>
    </html:body>
</html:html>