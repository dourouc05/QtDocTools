<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.0"
            xml:lang="en">
   <db:title>QTest Namespace</db:title>
   <db:funcsynopsis xlink:href="#QBENCHMARK">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QBENCHMARK</db:function>
         </db:funcdef>
         <db:void/>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QBENCHMARK_ONCE">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QBENCHMARK_ONCE</db:function>
         </db:funcdef>
         <db:void/>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QCOMPARE">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QCOMPARE</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>actual</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:parameter>expected</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QEXPECT_FAIL">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QEXPECT_FAIL</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>dataIndex</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:parameter>comment</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:parameter>mode</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QFAIL">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QFAIL</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>message</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QFETCH">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QFETCH</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>type</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:parameter>name</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QFINDTESTDATA">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QFINDTESTDATA</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>filename</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QSKIP">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QSKIP</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>description</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QTEST">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QTEST</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>actual</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:parameter>testElement</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QTEST_APPLESS_MAIN">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QTEST_APPLESS_MAIN</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>TestClass</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QTEST_GUILESS_MAIN">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QTEST_GUILESS_MAIN</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>TestClass</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QTEST_MAIN">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QTEST_MAIN</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>TestClass</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QTRY_COMPARE">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QTRY_COMPARE</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>actual</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:parameter>expected</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QTRY_COMPARE_WITH_TIMEOUT">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QTRY_COMPARE_WITH_TIMEOUT</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>actual</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:parameter>expected</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:parameter>timeout</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QTRY_VERIFY">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QTRY_VERIFY</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>condition</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QTRY_VERIFY_WITH_TIMEOUT">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QTRY_VERIFY_WITH_TIMEOUT</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>condition</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:parameter>timeout</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QVERIFY2">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QVERIFY2</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>condition</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:parameter>message</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QVERIFY">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QVERIFY</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>condition</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QVERIFY_EXCEPTION_THROWN">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QVERIFY_EXCEPTION_THROWN</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>expression</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:parameter>exceptiontype</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#QWARN">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>QWARN</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>message</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:classsynopsis>
      <db:ooclass>
         <db:classname>QTest</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="isNamespace">
          yes
        </db:classsynopsisinfo>
      <db:classsynopsisinfo role="header">#include
                                                  &lt;QTest&gt;</db:classsynopsisinfo>
      <db:classsynopsisinfo role="qmake"> QT +=
                                                testlib</db:classsynopsisinfo>
      <db:methodsynopsis xlink:href="addColumn">
         <db:void/>
         <db:methodname>addColumn</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         char  * 
                                        name ,  T 
                                        *  dummy  = 0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="benchmarkMetricName">
         <db:type>char</db:type>
         <db:methodname>benchmarkMetricName</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QBenchmarkMetric 
                                        metric )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="benchmarkMetricName">
         <db:type>char</db:type>
         <db:methodname>benchmarkMetricName</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QBenchmarkMetric 
                                        metric )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="benchmarkMetricUnit">
         <db:type>char</db:type>
         <db:methodname>benchmarkMetricUnit</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QBenchmarkMetric 
                                        metric )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="benchmarkMetricUnit">
         <db:type>char</db:type>
         <db:methodname>benchmarkMetricUnit</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QBenchmarkMetric 
                                        metric )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="currentAppName">
         <db:type>char</db:type>
         <db:methodname>currentAppName</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="currentDataTag">
         <db:type>char</db:type>
         <db:methodname>currentDataTag</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="currentTestFailed">
         <db:type>bool</db:type>
         <db:methodname>currentTestFailed</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="currentTestFunction">
         <db:type>char</db:type>
         <db:methodname>currentTestFunction</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="ignoreMessage">
         <db:void/>
         <db:methodname>ignoreMessage</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QtMsgType  type ,
                                    const  char  * 
                                        message )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="ignoreMessage-2">
         <db:void/>
         <db:methodname>ignoreMessage</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QtMsgType  type ,
                                    const  QRegularExpression  &amp; 
                                        messagePattern )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyClick">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyClick</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget ,
                                         Qt::Key  key ,
                                         Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyClick-2">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyClick</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget ,
                                         char 
                                        key ,  Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyClick-3">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyClick</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWindow 
                                        *  window ,  Qt::Key  key ,
                                         Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyClick-4">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyClick</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWindow 
                                        *  window ,  char  key ,  Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyClicks">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyClicks</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget ,
                                    const  QString  &amp; 
                                        sequence ,  Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyEvent">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( KeyAction  action ,
                                         QWidget  *  widget ,
                                         Qt::Key  key ,
                                         Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyEvent-2">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( KeyAction  action ,
                                         QWidget  *  widget ,
                                         char 
                                        ascii ,  Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyEvent-3">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( KeyAction  action ,
                                         QWindow  *  window ,
                                         Qt::Key  key ,
                                         Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyEvent-4">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( KeyAction  action ,
                                         QWindow  *  window ,
                                         char 
                                        ascii ,  Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyPress">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyPress</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget ,
                                         Qt::Key  key ,
                                         Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyPress-2">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyPress</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget ,
                                         char 
                                        key ,  Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyPress-3">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyPress</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWindow 
                                        *  window ,  Qt::Key  key ,
                                         Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyPress-4">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyPress</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWindow 
                                        *  window ,  char  key ,  Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyRelease">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyRelease</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget ,
                                         Qt::Key  key ,
                                         Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyRelease-2">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyRelease</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget ,
                                         char 
                                        key ,  Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyRelease-3">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyRelease</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWindow 
                                        *  window ,  Qt::Key  key ,
                                         Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="keyRelease-4">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>keyRelease</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWindow 
                                        *  window ,  char  key ,  Qt::KeyboardModifiers 
                                        modifier  = Qt::NoModifier,  int  delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="mouseClick">
         <db:void/>
         <db:methodname>mouseClick</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget ,
                                         Qt::MouseButton 
                                        button ,  Qt::KeyboardModifiers 
                                        modifier  = 0,  QPoint  pos  =
                                    QPoint(),  int 
                                        delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="mouseClick-2">
         <db:void/>
         <db:methodname>mouseClick</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWindow 
                                        *  window ,  Qt::MouseButton 
                                        button ,  Qt::KeyboardModifiers 
                                        stateKey  = 0,  QPoint  pos  =
                                    QPoint(),  int 
                                        delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="mouseDClick">
         <db:void/>
         <db:methodname>mouseDClick</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget ,
                                         Qt::MouseButton 
                                        button ,  Qt::KeyboardModifiers 
                                        modifier  = 0,  QPoint  pos  =
                                    QPoint(),  int 
                                        delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="mouseDClick-2">
         <db:void/>
         <db:methodname>mouseDClick</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWindow 
                                        *  window ,  Qt::MouseButton 
                                        button ,  Qt::KeyboardModifiers 
                                        stateKey  = 0,  QPoint  pos  =
                                    QPoint(),  int 
                                        delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="mouseMove">
         <db:void/>
         <db:methodname>mouseMove</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget ,
                                         QPoint  pos  =
                                    QPoint(),  int 
                                        delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="mouseMove-2">
         <db:void/>
         <db:methodname>mouseMove</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWindow 
                                        *  window ,  QPoint  pos  =
                                    QPoint(),  int 
                                        delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="mousePress">
         <db:void/>
         <db:methodname>mousePress</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget ,
                                         Qt::MouseButton 
                                        button ,  Qt::KeyboardModifiers 
                                        modifier  = 0,  QPoint  pos  =
                                    QPoint(),  int 
                                        delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="mousePress-2">
         <db:void/>
         <db:methodname>mousePress</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWindow 
                                        *  window ,  Qt::MouseButton 
                                        button ,  Qt::KeyboardModifiers 
                                        stateKey  = 0,  QPoint  pos  =
                                    QPoint(),  int 
                                        delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="mouseRelease">
         <db:void/>
         <db:methodname>mouseRelease</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget ,
                                         Qt::MouseButton 
                                        button ,  Qt::KeyboardModifiers 
                                        modifier  = 0,  QPoint  pos  =
                                    QPoint(),  int 
                                        delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="mouseRelease-2">
         <db:void/>
         <db:methodname>mouseRelease</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWindow 
                                        *  window ,  Qt::MouseButton 
                                        button ,  Qt::KeyboardModifiers 
                                        stateKey  = 0,  QPoint  pos  =
                                    QPoint(),  int 
                                        delay  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="newRow">
         <db:type>QTestData</db:type>
         <db:methodname>newRow</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         char  * 
                                        dataTag )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="qExec">
         <db:type>int</db:type>
         <db:methodname>qExec</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QObject  * 
                                        testObject ,  int  argc  = 0,  char  **  argv  =
                                    0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="qExec-2">
         <db:type>int</db:type>
         <db:methodname>qExec</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QObject  * 
                                        testObject , const  QStringList  &amp; 
                                        arguments )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="qSleep">
         <db:void/>
         <db:methodname>qSleep</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  ms )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="qWait">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>qWait</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  ms )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="qWaitForWindowActive">
         <db:modifier>static</db:modifier>
         <db:type>bool</db:type>
         <db:methodname>qWaitForWindowActive</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWindow  *  window ,
                                         int 
                                        timeout  = 5000)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="qWaitForWindowActive-2">
         <db:modifier>static</db:modifier>
         <db:type>bool</db:type>
         <db:methodname>qWaitForWindowActive</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget ,
                                         int 
                                        timeout  = 1000)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="qWaitForWindowExposed">
         <db:modifier>static</db:modifier>
         <db:type>bool</db:type>
         <db:methodname>qWaitForWindowExposed</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWindow  *  window ,
                                         int 
                                        timeout  = 5000)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="qWaitForWindowExposed-2">
         <db:modifier>static</db:modifier>
         <db:type>bool</db:type>
         <db:methodname>qWaitForWindowExposed</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget ,
                                         int 
                                        timeout  = 1000)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setBenchmarkResult">
         <db:void/>
         <db:methodname>setBenchmarkResult</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qreal  result ,
                                         QBenchmarkMetric 
                                        metric )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toHexRepresentation">
         <db:type>char</db:type>
         <db:methodname>toHexRepresentation</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  char  *  ba ,
                                         int 
                                        length )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         T  &amp; 
                                        value )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString-4">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QLatin1String  &amp; 
                                        string )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString-5">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QString  &amp; 
                                        string )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString-6">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QByteArray  &amp; 
                                    ba )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString-7">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QTime  &amp; 
                                    time )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString-8">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QDate  &amp; 
                                    date )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString-9">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QDateTime  &amp; 
                                        dateTime )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString-10">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QChar  &amp; 
                                        character )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString-11">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QPoint  &amp; 
                                        point )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString-12">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QSize  &amp; 
                                    size )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString-13">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QRect  &amp; 
                                        rectangle )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString-14">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QUrl  &amp; 
                                    url )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString-15">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QPointF  &amp; 
                                        point )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString-16">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QSizeF  &amp; 
                                    size )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString-17">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QRectF  &amp; 
                                        rectangle )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="toString-18">
         <db:type>char</db:type>
         <db:methodname>toString</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QVariant  &amp; 
                                        variant )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="touchEvent">
         <db:type xlink:href="qtest-qtoucheventsequence.html">QTouchEventSequence</db:type>
         <db:methodname>touchEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget ,
                                         QTouchDevice  * 
                                    device ,  bool  autoCommit  =
                                    true)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="touchEvent-2">
         <db:type xlink:href="qtest-qtoucheventsequence.html">QTouchEventSequence</db:type>
         <db:methodname>touchEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWindow 
                                        *  window ,  QTouchDevice  * 
                                    device ,  bool  autoCommit  =
                                    true)</db:exceptionname>
      </db:methodsynopsis>
   </db:classsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The <db:code><db:link xlink:href="qtest.html">QTest</db:link></db:code> namespace
                                    contains all the functions and declarations that are related to
                                    Qt Test.</db:para>
      <db:para>See the <db:link xlink:href="qtest-overview.html">Qt Test
                                        Overview</db:link> for information about how to write unit
                                    tests.</db:para>
   </db:section>
   <db:section xml:id="classes">
      <db:title>Classes</db:title>
      <db:section>
         <db:title>class <db:link xlink:href="qtest-qtoucheventsequence.html">QTouchEventSequence</db:link></db:title>
         <db:para>The <db:code><db:link xlink:href="qtest-qtoucheventsequence.html">QTouchEventSequence</db:link></db:code> class is used to simulate a
                                    sequence of touch events. <db:link xlink:href="qtest-qtoucheventsequence.html#details">More...</db:link>
         </db:para>
      </db:section>
   </db:section>
   <db:section xml:id="types">
      <db:title>Type Documentation</db:title>
      <db:section xml:id="AttributeIndex-enum">
         <db:title>enum QTest::AttributeIndex</db:title>
         <db:para>This enum numbers the different tests.</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_Undefined</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>-1</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_Name</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_Result</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>1</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_Tests</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>2</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_Failures</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>3</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_Errors</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>4</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_Type</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>5</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_Description</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>6</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_PropertyValue</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>7</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_QTestVersion</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>8</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_QtVersion</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>9</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_File</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>10</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_Line</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>11</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_Metric</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>12</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_Tag</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>13</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_Value</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>14</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AI_Iterations</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>15</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="KeyAction-enum">
         <db:title>enum QTest::KeyAction</db:title>
         <db:para>This enum describes possible actions for key
                                    handling.</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::Press</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The key is
                                                  pressed.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::Release</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>1</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The key is
                                                  released.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::Click</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>2</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The key is clicked
                                                  (pressed and released).</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="LogElementType-enum">
         <db:title>enum QTest::LogElementType</db:title>
         <db:para>The enum specifies the kinds of test log messages.</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::LET_Undefined</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>-1</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::LET_Property</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::LET_Properties</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>1</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::LET_Failure</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>2</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::LET_Error</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>3</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::LET_TestCase</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>4</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::LET_TestSuite</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>5</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::LET_Benchmark</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>6</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::LET_SystemError</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>7</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="MouseAction-enum">
         <db:title>enum QTest::MouseAction</db:title>
         <db:para>This enum describes possible actions for mouse
                                    handling.</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::MousePress</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>A mouse button is
                                                  pressed.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::MouseRelease</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>1</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>A mouse button is
                                                  released.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::MouseClick</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>2</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>A mouse button is clicked
                                                  (pressed and released).</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::MouseDClick</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>3</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>A mouse button is double
                                                  clicked (pressed and released twice).</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::MouseMove</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>4</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The mouse pointer has
                                                  moved.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="QBenchmarkMetric-enum">
         <db:title>enum QTest::QBenchmarkMetric</db:title>
         <db:para>This enum lists all the things that can be
                                    benchmarked.</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::FramesPerSecond</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Frames per
                                                  second</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::BitsPerSecond</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>1</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Bits per second</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::BytesPerSecond</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>2</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Bytes per second</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::WalltimeMilliseconds</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>3</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Clock time in
                                                  milliseconds</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::WalltimeNanoseconds</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>7</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Clock time in
                                                  nanoseconds</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::BytesAllocated</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>8</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Memory usage in
                                                  bytes</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::Events</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>6</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Event count</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::CPUTicks</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>4</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>CPU time</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::CPUMigrations</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>9</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Process migrations between
                                                  CPUs</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::CPUCycles</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>10</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>CPU cycles</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::BusCycles</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>11</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Bus cycles</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::StalledCycles</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>12</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Cycles stalled</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::InstructionReads</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>5</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Instruction
                                                  reads</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::Instructions</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>13</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Instructions
                                                  executed</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::BranchInstructions</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>14</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Branch-type
                                                  instructions</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::BranchMisses</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>15</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Branch instructions that
                                                  were mispredicted</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::CacheReferences</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>16</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Cache accesses of any
                                                  type</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::CacheMisses</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>20</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Cache misses of any
                                                  type</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::CacheReads</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>17</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Cache reads /
                                                  loads</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::CacheReadMisses</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>21</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Cache read / load
                                                  misses</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::CacheWrites</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>18</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Cache writes /
                                                  stores</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::CacheWriteMisses</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>22</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Cache write / store
                                                  misses</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::CachePrefetches</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>19</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Cache prefetches</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::CachePrefetchMisses</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>23</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Cache prefetch
                                                  misses</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::ContextSwitches</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>24</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Context switches</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::PageFaults</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>25</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Page faults of any
                                                  type</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::MinorPageFaults</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>26</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Minor page
                                                  faults</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::MajorPageFaults</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>27</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Major page
                                                  faults</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::AlignmentFaults</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>28</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Faults caused due to
                                                  misalignment</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::EmulationFaults</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>29</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Faults that needed
                                                  software emulation</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>Note that <db:code>WalltimeNanoseconds</db:code> and
                                        <db:code>BytesAllocated</db:code> are only provided for
                                    use via <db:code><db:link xlink:href="qtest.html#setBenchmarkResult">setBenchmarkResult</db:link>()</db:code>, and results in those metrics
                                    are not able to be provided automatically by the <db:code><db:link xlink:href="qtest.html">QTest</db:link></db:code> framework.</db:para>
         <db:para>This enum was introduced or modified in Qt 4.7.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#benchmarkMetricName">QTest::benchmarkMetricName</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#benchmarkMetricUnit">QTest::benchmarkMetricUnit</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="TestFailMode-enum">
         <db:title>enum QTest::TestFailMode</db:title>
         <db:para>This enum describes the modes for handling an expected
                                    failure of the <db:code><db:link xlink:href="qtest.html#QVERIFY">QVERIFY</db:link>()</db:code> or <db:code><db:link xlink:href="qtest.html#QCOMPARE">QCOMPARE</db:link>()</db:code> macros.</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::Abort</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>1</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Aborts the execution of
                                                  the test. Use this mode when it doesn't make sense
                                                  to execute the test any further after the expected
                                                  failure.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QTest::Continue</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>2</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Continues execution of the
                                                  test after the expected failure.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QEXPECT_FAIL">QEXPECT_FAIL</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
   </db:section>
   <db:section xml:id="macros">
      <db:title>Macro Documentation</db:title>
      <db:section>
         <db:title>QBENCHMARK</db:title>
         <db:para>This macro is used to measure the performance of code within
                                    a test. The code to be benchmarked is contained within a code
                                    block following this macro.</db:para>
         <db:para>For example:</db:para>
         <db:programlisting>void
                                        TestBenchmark::simple() { QString
                                    str1 =
                                        QLatin1String("This is a test
                                        string"); QString
                                    str2 =
                                        QLatin1String("This is a test
                                        string"); QCOMPARE(str1.localeAwareCompare(str2),0); QBENCHMARK {
                                        str1.localeAwareCompare(str2); } }</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qtest-overview.html#creating-a-benchmark">Creating a
                                        Benchmark</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qttestlib-tutorial5-example.html">Writing a
                                        Benchmark</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QBENCHMARK_ONCE</db:title>
         <db:para>The QBENCHMARK_ONCE macro is for measuring performance of a
                                    code block by running it once.</db:para>
         <db:para>This macro is used to measure the performance of code within
                                    a test. The code to be benchmarked is contained within a code
                                    block following this macro.</db:para>
         <db:para>Unlike QBENCHMARK, the contents of the contained code block
                                    is only run once. The elapsed time will be reported as "0" if
                                    it's to short to be measured by the selected backend.
                                    (Use)</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qtest-overview.html#creating-a-benchmark">Creating a
                                        Benchmark</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qttestlib-tutorial5-example.html">Writing a
                                        Benchmark</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QCOMPARE( actual, expected)</db:title>
         <db:para>The QCOMPARE macro compares an <db:emphasis>actual</db:emphasis> value
                                    to an <db:emphasis>expected</db:emphasis> value using the equals operator.
                                    If <db:emphasis>actual</db:emphasis> and <db:emphasis>expected</db:emphasis> are
                                    identical, execution continues. If not, a failure is recorded in
                                    the test log and the test won't be executed further.</db:para>
         <db:para>In the case of comparing floats and doubles, <db:code><db:link xlink:href="qtcore/qtglobal.html#qFuzzyCompare">qFuzzyCompare</db:link>()</db:code> is used for comparing. This means
                                    that comparing to 0 will likely fail. One solution to this is to
                                    compare to 1, and add 1 to the produced output.</db:para>
         <db:para>QCOMPARE tries to output the contents of the values if the
                                    comparison fails, so it is visible from the test log why the
                                    comparison failed.</db:para>
         <db:para>QCOMPARE is very strict on the data types. Both
                                        <db:emphasis>actual</db:emphasis> and <db:emphasis>expected</db:emphasis> have
                                    to be of the same type, otherwise the test won't compile. This
                                    prohibits unspecified behavior from being introduced; that is
                                    behavior that usually occurs when the compiler implicitly casts
                                    the argument.</db:para>
         <db:para>For your own classes, you can use <db:code><db:link xlink:href="qtest.html#toString">QTest::toString</db:link>()</db:code> to
                                    format values for outputting into the test log.</db:para>
         <db:note>
            <db:para>This macro can only be used in a test
                                    function that is invoked by the test
                                    framework.</db:para>
         </db:note>
         <db:para>Example:</db:para>
         <db:programlisting>QCOMPARE(QString("hello").toUpper(),QString("HELLO"));</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QVERIFY">QVERIFY</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QTRY_COMPARE">QTRY_COMPARE</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#toString">QTest::toString</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QEXPECT_FAIL( dataIndex, comment, mode)</db:title>
         <db:para>The QEXPECT_FAIL() macro marks the next <db:code><db:link xlink:href="qtest.html#QCOMPARE">QCOMPARE</db:link>()</db:code> or <db:code><db:link xlink:href="qtest.html#QVERIFY">QVERIFY</db:link>()</db:code> as an expected
                                    failure. Instead of adding a failure to the test log, an
                                    expected failure will be reported.</db:para>
         <db:para>If a <db:code><db:link xlink:href="qtest.html#QVERIFY">QVERIFY</db:link>()</db:code> or
                                        <db:code><db:link xlink:href="qtest.html#QCOMPARE">QCOMPARE</db:link>()</db:code> is
                                    marked as an expected failure, but passes instead, an unexpected
                                    pass (XPASS) is written to the test log.</db:para>
         <db:para>The parameter <db:emphasis>dataIndex</db:emphasis> describes for which
                                    entry in the test data the failure is expected. Pass an empty
                                    string (<db:code>""</db:code>) if the failure is expected
                                    for all entries or if no test data exists.</db:para>
         <db:para>
            <db:emphasis>comment</db:emphasis> will be appended to the test log
                                    for the expected failure.</db:para>
         <db:para>
            <db:emphasis>mode</db:emphasis> is a <db:code><db:link xlink:href="qtest.html#TestFailMode-enum">QTest::TestFailMode</db:link></db:code> and sets whether the test
                                    should continue to execute or not.</db:para>
         <db:note>
            <db:para> This macro can only be used in a test
                                    function that is invoked by the test framework.</db:para>
         </db:note>
         <db:para>Example 1:</db:para>
         <db:programlisting>QEXPECT_FAIL("","Will fix in the next
                                        release", Continue); QCOMPARE(i,42); QCOMPARE(j,43);</db:programlisting>
         <db:para>In the example above, an expected fail will be written into
                                    the test output if the variable <db:code>i</db:code> is not
                                    42. If the variable <db:code>i</db:code> is 42, an
                                    unexpected pass is written instead. The QEXPECT_FAIL() has no
                                    influence on the second <db:code><db:link xlink:href="qtest.html#QCOMPARE">QCOMPARE</db:link>()</db:code> statement in the example.</db:para>
         <db:para>Example 2:</db:para>
         <db:programlisting>QEXPECT_FAIL("data27","Oh my, this is soooo
                                        broken",
                                    Abort); QCOMPARE(i,42);</db:programlisting>
         <db:para>The above testfunction will not continue executing for the
                                    test data entry <db:code>data27</db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#TestFailMode-enum">QTest::TestFailMode</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QVERIFY">QVERIFY</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QCOMPARE">QCOMPARE</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QFAIL( message)</db:title>
         <db:para>This macro can be used to force a test failure. The test
                                    stops executing and the failure <db:emphasis>message</db:emphasis> is
                                    appended to the test log.</db:para>
         <db:note>
            <db:para> This macro can only be used in a test
                                    function that is invoked by the test framework.</db:para>
         </db:note>
         <db:para>Example:</db:para>
         <db:programlisting>if
                                        (sizeof(int) !=4) QFAIL("This test has not been ported to this
                                        platform yet.");</db:programlisting>
      </db:section>
      <db:section>
         <db:title>QFETCH( type, name)</db:title>
         <db:para>The fetch macro creates a local variable named
                                        <db:emphasis>name</db:emphasis> with the type <db:emphasis>type</db:emphasis> on
                                    the stack. <db:emphasis>name</db:emphasis> has to match the element name
                                    from the test's data. If no such element exists, the test will
                                    assert.</db:para>
         <db:para>Assuming a test has the following data:</db:para>
         <db:programlisting>void
                                        TestQString::toInt_data() { QTest::addColumn&lt;QString&gt;("aString"); QTest::addColumn&lt;int&gt;("expected"); QTest::newRow("positive value") &lt;&lt;"42"&lt;&lt;42; QTest::newRow("negative
                                        value") &lt;&lt;"-42"&lt;&lt;-42; QTest::newRow("zero") &lt;&lt;"0"&lt;&lt;0; }</db:programlisting>
         <db:para>The test data has two elements, a <db:code><db:link xlink:href="qtcore/qstring.html">QString</db:link></db:code> called
                                        <db:code>aString</db:code> and an integer called
                                        <db:code>expected</db:code>. To fetch these values in
                                    the actual test:</db:para>
         <db:programlisting>void
                                        TestQString::toInt()
                                    { QFETCH(QString, aString); QFETCH(int,
                                    expected); QCOMPARE(aString.toInt(), expected); }</db:programlisting>
         <db:para>
            <db:code>aString</db:code> and
                                        <db:code>expected</db:code> are variables on the stack
                                    that are initialized with the current test data.</db:para>
         <db:note>
            <db:para> This macro can only be used in a test
                                    function that is invoked by the test framework. The test
                                    function must have a _data function.</db:para>
         </db:note>
      </db:section>
      <db:section>
         <db:title>QFINDTESTDATA( filename)</db:title>
         <db:para>Returns a <db:code><db:link xlink:href="qtcore/qstring.html">QString</db:link></db:code> for the testdata file referred to by
                                        <db:emphasis>filename</db:emphasis>, or an empty <db:code><db:link xlink:href="qtcore/qstring.html">QString</db:link></db:code> if the testdata
                                    file could not be found.</db:para>
         <db:para>This macro allows the test to load data from an external
                                    file without hardcoding an absolute filename into the test, or
                                    using relative paths which may be error prone.</db:para>
         <db:para>The returned path will be the first path from the following
                                    list which resolves to an existing file or directory:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>
                  <db:emphasis>filename</db:emphasis> relative to <db:code><db:link xlink:href="qtcore/qcoreapplication.html#applicationDirPath">QCoreApplication::applicationDirPath</db:link>()</db:code> (only
                                        if a <db:code><db:link xlink:href="qtcore/qcoreapplication.html">QCoreApplication</db:link></db:code> or <db:code><db:link xlink:href="qtwidgets/qapplication.html">QApplication</db:link></db:code>
                                        object has been created).</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:emphasis>filename</db:emphasis> relative to the test's
                                        standard install directory (<db:code><db:link xlink:href="qtcore/qlibraryinfo.html#LibraryLocation-enum">QLibraryInfo::TestsPath</db:link></db:code> with the lowercased
                                        testcase name appended).</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:emphasis>filename</db:emphasis> relative to the directory
                                        containing the source file from which QFINDTESTDATA is
                                        invoked.</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:para>If the named file/directory does not exist at any of these
                                    locations, a warning is printed to the test log.</db:para>
         <db:para>For example, in this code:</db:para>
         <db:programlisting>// Source:
                                        /home/user/sources/myxmlparser/tests/tst_myxmlparser/tst_myxmlparser.cpp// Build:
                                        /home/user/build/myxmlparser/tests/tst_myxmlparser// Qt:
                                        /usr/local/Qt-5.0.0void
                                        tst_MyXmlParser::parse() { MyXmlParser parser; QString input = QFINDTESTDATA("testxml/simple1.xml");
                                        QVERIFY(parser.parse(input)); }</db:programlisting>
         <db:para>The testdata file will be resolved as the first existing
                                    file from:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>
                  <db:code>/home/user/build/myxmlparser/tests/tst_myxmlparser/testxml/simple1.xml</db:code>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code>/usr/local/Qt-5.0.0/tests/tst_myxmlparser/testxml/simple1.xml</db:code>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code>/home/user/sources/myxmlparser/tests/tst_myxmlparser/testxml/simple1.xml</db:code>
               </db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:para>This allows the test to find its testdata regardless of
                                    whether the test has been installed, and regardless of whether
                                    the test's build tree is equal to the test's source
                                    tree.</db:para>
         <db:note>
            <db:para> reliable detection of testdata from
                                    the source directory requires either that qmake is used, or the
                                        <db:code>QT_TESTCASE_BUILDDIR</db:code> macro is defined
                                    to point to the working directory from which the compiler is
                                    invoked, or only absolute paths to the source files are passed
                                    to the compiler. Otherwise, the absolute path of the source
                                    directory cannot be determined.</db:para>
         </db:note>
         <db:note>
            <db:para> For tests that use the <db:code><db:link xlink:href="qtest.html#QTEST_APPLESS_MAIN">QTEST_APPLESS_MAIN</db:link>()</db:code> macro to generate a
                                        <db:code>main()</db:code> function,
                                        <db:code>QFINDTESTDATA</db:code> will not attempt to
                                    find test data relative to <db:code><db:link xlink:href="qtcore/qcoreapplication.html#applicationDirPath">QCoreApplication::applicationDirPath</db:link>()</db:code>. In
                                    practice, this means that tests using
                                        <db:code>QTEST_APPLESS_MAIN()</db:code> will fail to
                                    find their test data if run from a shadow build tree.</db:para>
         </db:note>
         <db:para>This function was introduced in Qt 5.0.</db:para>
      </db:section>
      <db:section>
         <db:title>QSKIP( description)</db:title>
         <db:para>If called from a test function, the QSKIP() macro stops
                                    execution of the test without adding a failure to the test log.
                                    You can use it to skip tests that wouldn't make sense in the
                                    current configuration. The text <db:emphasis>description</db:emphasis> is
                                    appended to the test log and should contain an explanation of
                                    why the test couldn't be executed.</db:para>
         <db:para>If the test is data-driven, each call to QSKIP() will skip
                                    only the current row of test data, so an unconditional call to
                                    QSKIP will produce one skip message in the test log for each row
                                    of test data.</db:para>
         <db:para>If called from an _data function, the QSKIP() macro will
                                    stop execution of the _data function and will prevent execution
                                    of the associated test function.</db:para>
         <db:para>If called from initTestCase() or initTestCase_data(), the
                                    QSKIP() macro will skip all test and _data functions.</db:para>
         <db:note>
            <db:para> This macro can only be used in a test
                                    function or _data function that is invoked by the test
                                    framework.</db:para>
         </db:note>
         <db:para>Example:</db:para>
         <db:programlisting>if
                                        (!QSqlDatabase::drivers().contains("SQLITE")) QSKIP("This test requires the SQLITE database
                                        driver");</db:programlisting>
      </db:section>
      <db:section>
         <db:title>QTEST( actual, testElement)</db:title>
         <db:para>QTEST() is a convenience macro for <db:code><db:link xlink:href="qtest.html#QCOMPARE">QCOMPARE</db:link>()</db:code> that compares
                                    the value <db:emphasis>actual</db:emphasis> with the element
                                        <db:emphasis>testElement</db:emphasis> from the test's data. If there
                                    is no such element, the test asserts.</db:para>
         <db:para>Apart from that, QTEST() behaves exactly as <db:code><db:link xlink:href="qtest.html#QCOMPARE">QCOMPARE</db:link>()</db:code>.</db:para>
         <db:para>Instead of writing:</db:para>
         <db:programlisting>QFETCH(QString, myString); QCOMPARE(QString("hello").toUpper(), myString);</db:programlisting>
         <db:para>you can write:</db:para>
         <db:programlisting>QTEST(QString("hello").toUpper(),"myString");</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QCOMPARE">QCOMPARE</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QTEST_APPLESS_MAIN( TestClass)</db:title>
         <db:para>Implements a main() function that executes all tests in
                                        <db:emphasis>TestClass</db:emphasis>.</db:para>
         <db:para>Behaves like <db:code><db:link xlink:href="qtest.html#QTEST_MAIN">QTEST_MAIN</db:link>()</db:code>, but doesn't instantiate a <db:code><db:link xlink:href="qtwidgets/qapplication.html">QApplication</db:link></db:code>
                                    object. Use this macro for really simple stand-alone non-GUI
                                    tests.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QTEST_MAIN">QTEST_MAIN</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QTEST_GUILESS_MAIN( TestClass)</db:title>
         <db:para>Implements a main() function that instantiates a <db:code><db:link xlink:href="qtcore/qcoreapplication.html">QCoreApplication</db:link></db:code> object and the
                                        <db:emphasis>TestClass</db:emphasis>, and executes all tests in the
                                    order they were defined. Use this macro to build stand-alone
                                    executables.</db:para>
         <db:para>Behaves like <db:code><db:link xlink:href="qtest.html#QTEST_MAIN">QTEST_MAIN</db:link>()</db:code>, but instantiates a <db:code><db:link xlink:href="qtcore/qcoreapplication.html">QCoreApplication</db:link></db:code> instead of the <db:code><db:link xlink:href="qtwidgets/qapplication.html">QApplication</db:link></db:code>
                                    object. Use this macro if your test case doesn't need
                                    functionality offered by <db:code><db:link xlink:href="qtwidgets/qapplication.html">QApplication</db:link></db:code>,
                                    but the event loop is still necessary.</db:para>
         <db:para>This function was introduced in Qt 5.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QTEST_MAIN">QTEST_MAIN</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QTEST_MAIN( TestClass)</db:title>
         <db:para>Implements a main() function that instantiates an
                                    application object and the <db:emphasis>TestClass</db:emphasis>, and
                                    executes all tests in the order they were defined. Use this
                                    macro to build stand-alone executables.</db:para>
         <db:para>If <db:code>QT_WIDGETS_LIB</db:code> is defined, the
                                    application object will be a <db:code><db:link xlink:href="qtwidgets/qapplication.html">QApplication</db:link></db:code>, if
                                        <db:code>QT_GUI_LIB</db:code> is defined, the
                                    application object will be a <db:code><db:link xlink:href="qtgui/qguiapplication.html">QGuiApplication</db:link></db:code>,
                                    otherwise it will be a <db:code><db:link xlink:href="qtcore/qcoreapplication.html">QCoreApplication</db:link></db:code>. If qmake is used and the
                                    configuration includes <db:code>QT += widgets</db:code>,
                                    then <db:code>QT_WIDGETS_LIB</db:code> will be defined
                                    automatically. Similarly, if qmake is used and the configuration
                                    includes <db:code>QT += gui</db:code>, then
                                        <db:code>QT_GUI_LIB</db:code> will be defined
                                    automatically.</db:para>
         <db:note>
            <db:para> On platforms that have keypad
                                    navigation enabled by default, this macro will forcefully
                                    disable it if <db:code>QT_WIDGETS_LIB</db:code> is defined.
                                    This is done to simplify the usage of key events when writing
                                    autotests. If you wish to write a test case that uses keypad
                                    navigation, you should enable it either in the
                                        <db:code>initTestCase()</db:code> or
                                        <db:code>init()</db:code> functions of your test case by
                                    calling <db:code><db:link xlink:href="qtwidgets/qapplication.html#setNavigationMode">QApplication::setNavigationMode</db:link>()</db:code>.</db:para>
         </db:note>
         <db:para>Example:</db:para>
         <db:programlisting>class
                                    TestQString: publicQObject { ... };
                                    QTEST_MAIN(TestQString)</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QTEST_APPLESS_MAIN">QTEST_APPLESS_MAIN</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QTEST_GUILESS_MAIN">QTEST_GUILESS_MAIN</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#qExec">QTest::qExec</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtwidgets/qapplication.html#setNavigationMode">QApplication::setNavigationMode</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QTRY_COMPARE( actual, expected)</db:title>
         <db:para>Performs a comparison of the <db:emphasis>actual</db:emphasis> and
                                        <db:emphasis>expected</db:emphasis> values by invoking <db:code><db:link xlink:href="qtest.html#QTRY_COMPARE_WITH_TIMEOUT">QTRY_COMPARE_WITH_TIMEOUT</db:link>()</db:code> with a timeout of five
                                    seconds.</db:para>
         <db:note>
            <db:para>This macro can only be used in a test
                                    function that is invoked by the test
                                    framework.</db:para>
         </db:note>
         <db:para>This function was introduced in Qt
                                    5.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QTRY_COMPARE_WITH_TIMEOUT">QTRY_COMPARE_WITH_TIMEOUT</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QCOMPARE">QCOMPARE</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QVERIFY">QVERIFY</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QTRY_VERIFY">QTRY_VERIFY</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QTRY_COMPARE_WITH_TIMEOUT( actual, expected, timeout)</db:title>
         <db:para>The QTRY_COMPARE_WITH_TIMEOUT() macro is similar to <db:code><db:link xlink:href="qtest.html#QCOMPARE">QCOMPARE</db:link>()</db:code>, but performs
                                    the comparison of the <db:emphasis>actual</db:emphasis> and
                                        <db:emphasis>expected</db:emphasis> values repeatedly, until either
                                    the two values are equal or the <db:emphasis>timeout</db:emphasis> is
                                    reached. Between each comparison, events will be processed. If
                                    the timeout is reached, a failure is recorded in the test log
                                    and the test won't be executed further.</db:para>
         <db:note>
            <db:para>This macro can only be used in a test
                                    function that is invoked by the test
                                    framework.</db:para>
         </db:note>
         <db:para>This function was introduced in Qt
                                    5.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QTRY_COMPARE">QTRY_COMPARE</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QCOMPARE">QCOMPARE</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QVERIFY">QVERIFY</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QTRY_VERIFY">QTRY_VERIFY</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QTRY_VERIFY( condition)</db:title>
         <db:para>Checks the <db:emphasis>condition</db:emphasis> by invoking <db:code><db:link xlink:href="qtest.html#QTRY_VERIFY_WITH_TIMEOUT">QTRY_VERIFY_WITH_TIMEOUT</db:link>()</db:code> with a timeout of five
                                    seconds.</db:para>
         <db:note>
            <db:para>This macro can only be used in a test
                                    function that is invoked by the test
                                    framework.</db:para>
         </db:note>
         <db:para>This function was introduced in Qt
                                    5.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QTRY_VERIFY_WITH_TIMEOUT">QTRY_VERIFY_WITH_TIMEOUT</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QVERIFY">QVERIFY</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QCOMPARE">QCOMPARE</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QTRY_COMPARE">QTRY_COMPARE</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QTRY_VERIFY_WITH_TIMEOUT( condition, timeout)</db:title>
         <db:para>The QTRY_VERIFY_WITH_TIMEOUT() macro is similar to <db:code><db:link xlink:href="qtest.html#QVERIFY">QVERIFY</db:link>()</db:code>, but checks the
                                        <db:emphasis>condition</db:emphasis> repeatedly, until either the
                                    condition becomes true or the <db:emphasis>timeout</db:emphasis> is
                                    reached. Between each evaluation, events will be processed. If
                                    the timeout is reached, a failure is recorded in the test log
                                    and the test won't be executed further.</db:para>
         <db:note>
            <db:para>This macro can only be used in a test
                                    function that is invoked by the test
                                    framework.</db:para>
         </db:note>
         <db:para>This function was introduced in Qt
                                    5.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QTRY_VERIFY">QTRY_VERIFY</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QVERIFY">QVERIFY</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QCOMPARE">QCOMPARE</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QTRY_COMPARE">QTRY_COMPARE</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QVERIFY2( condition, message)</db:title>
         <db:para>The QVERIFY2() macro behaves exactly like <db:code><db:link xlink:href="qtest.html#QVERIFY">QVERIFY</db:link>()</db:code>, except that it
                                    outputs a verbose <db:emphasis>message</db:emphasis> when
                                        <db:emphasis>condition</db:emphasis> is false. The
                                        <db:emphasis>message</db:emphasis> is a plain C string.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>QVERIFY2(1+1==2,"A breach in basic arithmetic
                                        occurred.");</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QVERIFY">QVERIFY</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QCOMPARE">QCOMPARE</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QVERIFY( condition)</db:title>
         <db:para>The QVERIFY() macro checks whether the
                                        <db:emphasis>condition</db:emphasis> is true or not. If it is true,
                                    execution continues. If not, a failure is recorded in the test
                                    log and the test won't be executed further.</db:para>
         <db:note>
            <db:para> This macro can only be used in a test
                                    function that is invoked by the test framework.</db:para>
         </db:note>
         <db:para>Example:</db:para>
         <db:programlisting>QVERIFY(1+1==2);</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QCOMPARE">QCOMPARE</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtest.html#QTRY_VERIFY">QTRY_VERIFY</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section>
         <db:title>QVERIFY_EXCEPTION_THROWN( expression, exceptiontype)</db:title>
         <db:para>The QVERIFY_EXCEPTION_THROWN macro executes an
                                        <db:emphasis>expression</db:emphasis> and tries to catch an exception
                                    thrown from the <db:emphasis>expression</db:emphasis>. If the
                                        <db:emphasis>expression</db:emphasis> throws an exception and its type
                                    is the same as <db:emphasis>exceptiontype</db:emphasis> or
                                        <db:emphasis>exceptiontype</db:emphasis> is substitutable with the
                                    type of thrown exception (i.e. usually the type of thrown
                                    exception is publically derived from
                                        <db:emphasis>exceptiontype</db:emphasis>) then execution will be
                                    continued. If not-substitutable type of exception is thrown or
                                    the <db:emphasis>expression</db:emphasis> doesn't throw an exception at
                                    all, then a failure will be recorded in the test log and the
                                    test won't be executed further.</db:para>
         <db:note>
            <db:para>This macro can only be used in a test
                                    function that is invoked by the test
                                    framework.</db:para>
         </db:note>
         <db:para>This function was introduced in Qt
                                    5.3.</db:para>
      </db:section>
      <db:section>
         <db:title>QWARN( message)</db:title>
         <db:para>Appends <db:emphasis>message</db:emphasis> as a warning to the test
                                    log. This macro can be used anywhere in your tests.</db:para>
         <db:note>
            <db:para> This function is <db:link xlink:href="qtdoc/threads-reentrancy.html#thread-safe">thread-safe</db:link>.</db:para>
         </db:note>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Obsolete Members</db:title>
      <db:section xml:id="obsolete_func">
         <db:title>Function Documentation</db:title>
         <db:section xml:id="qWaitForWindowShown">
            <db:title>[static] bool QTest::qWaitForWindowShown(<db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:title>
            <db:para>Waits for <db:emphasis>timeout</db:emphasis> milliseconds or until the <db:emphasis>widget</db:emphasis>'s window is exposed. Returns <db:code>true</db:code> if <db:code>widget</db:code>'s window is exposed within <db:emphasis>timeout</db:emphasis> milliseconds, otherwise returns <db:code>false</db:code>.</db:para>
            <db:para>This function does the same as <db:code><db:link xlink:href="qtest.html#qWaitForWindowExposed">qWaitForWindowExposed</db:link>()</db:code>.</db:para>
            <db:para>Example:</db:para>
            <db:programlisting>QWidget widget;
widget.show();
QTest::qWaitForWindowShown(&amp;widget);</db:programlisting>
            <db:para>This function was introduced in  Qt 5.0.</db:para>
            <db:section>
               <db:title>See Also</db:title>
               <db:simplelist type="vert">
                  <db:member>
                     <db:code><db:link xlink:href="qtest.html#qWaitForWindowActive">QTest::qWaitForWindowActive</db:link>()</db:code>
                  </db:member>
                  <db:member>
                     <db:code><db:link xlink:href="qtest.html#qWaitForWindowExposed">QTest::qWaitForWindowExposed</db:link>()</db:code>
                  </db:member>
               </db:simplelist>
            </db:section>
         </db:section>
      </db:section>
   </db:section>
</db:article>
