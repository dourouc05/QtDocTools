<html:html xmlns:html="http://www.w3.org/1999/xhtml" lang="en">
    <html:head>
        <html:meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
        <!-- stylesheet.qdoc -->
        <html:title>The Style Sheet Syntax | Qt Widgets 5.4</html:title>
        <html:link href="style/offline.css" rel="stylesheet" type="text/css" />
    </html:head>
    <html:body>
        <html:div class="header" id="qtdocheader">
            <html:div class="main">
                <html:div class="main-rounded">
                    <html:div class="navigationbar">
                        <html:ul>
                            <html:li><html:a href="qtdoc/index.html">Qt 5.4</html:a></html:li>
                            <html:li><html:a href="qtwidgets-index.html">Qt
                                Widgets</html:a></html:li>
                            <html:li>The Style Sheet Syntax</html:li>
                            <html:li id="buildversion">Qt 5.4.2 Reference Documentation</html:li>
                        </html:ul>
                    </html:div>
                </html:div>
                <html:div class="content">
                    <html:div class="line">
                        <html:div class="content mainContent">
                            <html:link href="stylesheet.html" rel="prev" />
                            <html:link href="stylesheet-designer.html" rel="next" />
                            <html:p class="naviNextPrevious headerNavi">
                                <html:a class="prevPage" href="stylesheet.html">Qt Style
                                    Sheets</html:a>
                                <html:a class="nextPage" href="stylesheet-designer.html">Qt Designer
                                    Integration</html:a>
                            </html:p><html:p> </html:p><html:div class="sidebar">
                                <html:div class="toc">
                                    <html:h3><html:a name="toc">Contents</html:a></html:h3>
                                    <html:ul>
                                        <html:li class="level1"><html:a href="#style-rules">Style
                                                Rules</html:a></html:li>
                                        <html:li class="level1"><html:a href="#selector-types"
                                                >Selector Types</html:a></html:li>
                                        <html:li class="level1"><html:a href="#sub-controls"
                                                >Sub-Controls</html:a></html:li>
                                        <html:li class="level1"><html:a href="#pseudo-states"
                                                >Pseudo-States</html:a></html:li>
                                        <html:li class="level1"><html:a href="#conflict-resolution"
                                                >Conflict Resolution</html:a></html:li>
                                        <html:li class="level1"><html:a href="#cascading"
                                                >Cascading</html:a></html:li>
                                        <html:li class="level1"><html:a href="#inheritance"
                                                >Inheritance</html:a></html:li>
                                        <html:li class="level1"><html:a
                                                href="#widgets-inside-c-namespaces">Widgets Inside
                                                C++ Namespaces</html:a></html:li>
                                        <html:li class="level1"><html:a
                                                href="#setting-qobject-properties">Setting QObject
                                                Properties</html:a></html:li>
                                    </html:ul>
                                </html:div>
                                <html:div class="sidebar-content" id="sidebar-content"
                                ></html:div></html:div>
                            <html:h1 class="title">The Style Sheet Syntax</html:h1>
                            <html:span class="subtitle"></html:span>
                            <!-- $$$stylesheet-syntax.html-description -->
                            <html:div class="descr">
                                <html:a name="details"></html:a>
                                <html:p>Qt Style Sheet terminology and syntactic rules are almost
                                    identical to those of HTML CSS. If you already know CSS, you can
                                    probably skim quickly through this section.</html:p>
                                <html:a name="style-rules"></html:a>
                                <html:h2 id="style-rules">Style Rules</html:h2>
                                <html:p>Style sheets consist of a sequence of style rules. A
                                        <html:i>style rule</html:i> is made up of a selector and a
                                    declaration. The <html:i>selector</html:i> specifies which
                                    widgets are affected by the rule; the
                                        <html:i>declaration</html:i> specifies which properties
                                    should be set on the widget. For example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qpushbutton.html">QPushButton</html:a></html:span>
                                    { color: red }</html:pre>
                                <html:p>In the above style rule, <html:code>QPushButton</html:code>
                                    is the selector and <html:code>{ color: red }</html:code> is the
                                    declaration. The rule specifies that <html:a
                                        href="qpushbutton.html">QPushButton</html:a> and its
                                    subclasses (e.g., <html:code>MyPushButton</html:code>) should
                                    use red as their foreground color.</html:p>
                                <html:p>Qt Style Sheet is generally case insensitive (i.e.,
                                        <html:code>color</html:code>, <html:code>Color</html:code>,
                                        <html:code>COLOR</html:code>, and
                                        <html:code>cOloR</html:code> refer to the same property).
                                    The only exceptions are class names, <html:a
                                        href="qtcore/qobject.html#objectName-prop">object
                                        names</html:a>, and Qt property names, which are case
                                    sensitive.</html:p>
                                <html:p>Several selectors can be specified for the same declaration,
                                    using commas (<html:code>,</html:code>) to separate the
                                    selectors. For example, the rule</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qpushbutton.html"
                                        >QPushButton</html:a></html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="type"><html:a href="qlineedit.html"
                                            >QLineEdit</html:a></html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a href="qcombobox.html"
                                            >QComboBox</html:a></html:span> { color: red
                                    }</html:pre>
                                <html:p>is equivalent to this sequence of three rules:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qpushbutton.html">QPushButton</html:a></html:span>
                                    { color: red } <html:span class="type"><html:a
                                            href="qlineedit.html">QLineEdit</html:a></html:span> {
                                    color: red } <html:span class="type"><html:a
                                            href="qcombobox.html">QComboBox</html:a></html:span> {
                                    color: red }</html:pre>
                                <html:p>The declaration part of a style rule is a list of
                                            <html:code><html:i>property</html:i>:
                                            <html:i>value</html:i></html:code> pairs, enclosed in
                                    braces (<html:code>{}</html:code>) and separated with
                                    semicolons. For example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qpushbutton.html">QPushButton</html:a></html:span>
                                    { color: red; background<html:span class="operator"
                                        >-</html:span>color: white }</html:pre>
                                <html:p>See the <html:a
                                        href="stylesheet-reference.html#list-of-properties">List of
                                        Properties</html:a> section below for the list of properties
                                    provided by Qt widgets.</html:p>
                                <html:a name="selector-types"></html:a>
                                <html:h2 id="selector-types">Selector Types</html:h2>
                                <html:p>All the examples so far used the simplest type of selector,
                                    the Type Selector. Qt Style Sheets support all the <html:a
                                        href="http://www.w3.org/TR/REC-CSS2/selector.html#q1"
                                        >selectors defined in CSS2</html:a>. The table below
                                    summarizes the most useful types of selectors.</html:p>
                                <html:div class="table"><html:table class="generic" width="100%">
                                        <html:thead>
                                            <html:tr class="qt-style">
                                                <html:th>Selector</html:th>
                                                <html:th>Example</html:th>
                                                <html:th>Explanation</html:th>
                                            </html:tr>
                                        </html:thead>
                                        <html:tbody>
                                            <html:tr class="odd" valign="top">
                                                <html:td>Universal Selector</html:td>
                                                <html:td><html:code>*</html:code></html:td>
                                                <html:td>Matches all widgets.</html:td>
                                            </html:tr>
                                            <html:tr class="even" valign="top">
                                                <html:td>Type Selector</html:td>
                                                <html:td><html:code>QPushButton</html:code></html:td>
                                                <html:td>Matches instances of <html:a
                                                  href="qpushbutton.html">QPushButton</html:a> and
                                                  of its subclasses.</html:td>
                                            </html:tr>
                                            <html:tr class="odd" valign="top">
                                                <html:td>Property Selector</html:td>
                                                <html:td><html:code>QPushButton[flat="false"]</html:code></html:td>
                                                <html:td>Matches instances of <html:a
                                                  href="qpushbutton.html">QPushButton</html:a> that
                                                  are not <html:a href="qpushbutton.html#flat-prop"
                                                  >flat</html:a>. You may use this selector to test
                                                  for any Qt <html:a
                                                  href="qtcore/properties.html#qt-s-property-system"
                                                  >property</html:a> that supports <html:a
                                                  href="qtcore/qvariant.html#toString"
                                                  >QVariant::toString</html:a>() (see the <html:a
                                                  href="qtcore/qvariant.html#toString"
                                                  >toString()</html:a> function documentation for
                                                  details). In addition, the special
                                                  <html:code>class</html:code> property is
                                                  supported, for the name of the class.<html:p>This
                                                  selector may also be used to test dynamic
                                                  properties. For more information on customization
                                                  using dynamic properties, refer to <html:a
                                                  href="stylesheet-examples.html#customizing-using-dynamic-properties"
                                                  >Customizing Using Dynamic
                                                  Properties</html:a>.</html:p>
                                                  <html:p>Instead of <html:code>=</html:code>, you
                                                  can also use <html:code>~=</html:code> to test
                                                  whether a Qt property of type <html:a
                                                  href="qtcore/qstringlist.html"
                                                  >QStringList</html:a> contains a given <html:a
                                                  href="qtcore/qstring.html"
                                                  >QString</html:a>.</html:p>
                                                  <html:p><html:b>Warning:</html:b> If the value of
                                                  the Qt property changes after the style sheet has
                                                  been set, it might be necessary to force a style
                                                  sheet recomputation. One way to achieve this is to
                                                  unset the style sheet and set it again.</html:p>
                                                </html:td>
                                            </html:tr>
                                            <html:tr class="even" valign="top">
                                                <html:td>Class Selector</html:td>
                                                <html:td><html:code>.QPushButton</html:code></html:td>
                                                <html:td>Matches instances of <html:a
                                                  href="qpushbutton.html">QPushButton</html:a>, but
                                                  not of its subclasses.<html:p>This is equivalent
                                                  to
                                                  <html:code>*[class~="QPushButton"]</html:code>.</html:p>
                                                </html:td>
                                            </html:tr>
                                            <html:tr class="odd" valign="top">
                                                <html:td>ID <html:a name="id-selector"></html:a>
                                                  Selector</html:td>
                                                <html:td><html:code>QPushButton#okButton</html:code></html:td>
                                                <html:td>Matches all <html:a href="qpushbutton.html"
                                                  >QPushButton</html:a> instances whose <html:a
                                                  href="qtcore/qobject.html#objectName-prop">object
                                                  name</html:a> is
                                                  <html:code>okButton</html:code>.</html:td>
                                            </html:tr>
                                            <html:tr class="even" valign="top">
                                                <html:td>Descendant Selector</html:td>
                                                <html:td><html:code>QDialog
                                                  QPushButton</html:code></html:td>
                                                <html:td>Matches all instances of <html:a
                                                  href="qpushbutton.html">QPushButton</html:a> that
                                                  are descendants (children, grandchildren, etc.) of
                                                  a <html:a href="qdialog.html"
                                                  >QDialog</html:a>.</html:td>
                                            </html:tr>
                                            <html:tr class="odd" valign="top">
                                                <html:td>Child Selector</html:td>
                                                <html:td><html:code>QDialog &gt;
                                                  QPushButton</html:code></html:td>
                                                <html:td>Matches all instances of <html:a
                                                  href="qpushbutton.html">QPushButton</html:a> that
                                                  are direct children of a <html:a
                                                  href="qdialog.html">QDialog</html:a>.</html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table></html:div>
                                <html:a name="sub-controls"></html:a>
                                <html:h2 id="sub-controls">Sub-Controls</html:h2>
                                <html:p>For styling complex widgets, it is necessary to access
                                    subcontrols of the widget, such as the drop-down button of a
                                        <html:a href="qcombobox.html">QComboBox</html:a> or the up
                                    and down arrows of a <html:a href="qspinbox.html"
                                        >QSpinBox</html:a>. Selectors may contain
                                        <html:i>subcontrols</html:i> that make it possible to
                                    restrict the application of a rule to specific widget
                                    subcontrols. For example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qcombobox.html"
                                        >QComboBox</html:a></html:span><html:span class="operator"
                                        >::</html:span>drop<html:span class="operator"
                                    >-</html:span>down { image: url(dropdown<html:span
                                        class="operator">.</html:span>png) }</html:pre>
                                <html:p>The above rule styles the drop-down button of all <html:a
                                        href="qcombobox.html">QComboBox</html:a>es. Although the
                                    double-colon (<html:code>::</html:code>) syntax is reminiscent
                                    of CSS3 Pseudo-Elements, Qt Sub-Controls differ conceptually
                                    from these and have different cascading semantics.</html:p>
                                <html:p>Sub-controls are always positioned with respect to another
                                    element - a reference element. This reference element could be
                                    the widget or another Sub-control. For example, the <html:a
                                        href="stylesheet-reference.html#drop-down-sub"
                                        >::drop-down</html:a> of a <html:a href="qcombobox.html"
                                        >QComboBox</html:a> is placed, by default, in the top right
                                    corner of the Padding rectangle of the <html:a
                                        href="qcombobox.html">QComboBox</html:a>. The <html:a
                                        href="stylesheet-reference.html#drop-down-sub"
                                        >::drop-down</html:a> is placed, by default, in the Center
                                    of the Contents rectangle of the <html:a
                                        href="stylesheet-reference.html#drop-down-sub"
                                        >::drop-down</html:a> Sub-control. See the <html:a
                                        href="stylesheet-reference.html#list-of-stylable-widgets"
                                        >List of Stylable Widgets</html:a> below for the
                                    Sub-controls to use to style a widget and their default
                                    positions.</html:p>
                                <html:p>The origin rectangle to be used can be changed using the
                                        <html:a
                                        href="stylesheet-reference.html#subcontrol-origin-prop"
                                        >subcontrol-origin</html:a> property. For example, if we
                                    want to place the drop-down in the margin rectangle of the
                                        <html:a href="qcombobox.html">QComboBox</html:a> instead of
                                    the default Padding rectangle, we can specify:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qcombobox.html">QComboBox</html:a></html:span> {
                                        margin<html:span class="operator">-</html:span>right:
                                        <html:span class="number">20px</html:span>; } <html:span
                                        class="type"><html:a href="qcombobox.html"
                                            >QComboBox</html:a></html:span><html:span
                                        class="operator">::</html:span>drop<html:span
                                        class="operator">-</html:span>down { subcontrol<html:span
                                        class="operator">-</html:span>origin: margin; }</html:pre>
                                <html:p>The alignment of the drop-down within the Margin rectangle
                                    is changed using <html:a
                                        href="stylesheet-reference.html#subcontrol-position-prop"
                                        >subcontrol-position</html:a> property.</html:p>
                                <html:p>The <html:a href="stylesheet-reference.html#width-prop"
                                        >width</html:a> and <html:a
                                        href="stylesheet-reference.html#height-prop">height</html:a>
                                    properties can be used to control the size of the Sub-control.
                                    Note that setting a <html:a
                                        href="stylesheet-reference.html#image-prop">image</html:a>
                                    implicitly sets the size of a Sub-control.</html:p>
                                <html:p>The relative positioning scheme (<html:a
                                        href="stylesheet-reference.html#position-prop"
                                        >position</html:a> : relative), allows the position of the
                                    Sub-Control to be offset from its initial position. For example,
                                    when the <html:a href="qcombobox.html">QComboBox</html:a>'s
                                    drop-down button is pressed, we might like the arrow inside to
                                    be offset to give a "pressed" effect. To achieve this, we can
                                    specify:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qcombobox.html"
                                        >QComboBox</html:a></html:span><html:span class="operator"
                                        >::</html:span>down<html:span class="operator"
                                    >-</html:span>arrow { image: url(down_arrow<html:span
                                        class="operator">.</html:span>png); } <html:span
                                        class="type"><html:a href="qcombobox.html"
                                            >QComboBox</html:a></html:span><html:span
                                        class="operator">::</html:span>down<html:span
                                        class="operator">-</html:span>arrow:pressed { position:
                                    relative; top: <html:span class="number">1px</html:span>; left:
                                        <html:span class="number">1px</html:span>; }</html:pre>
                                <html:p>The absolute positioning scheme (<html:a
                                        href="stylesheet-reference.html#position-prop"
                                        >position</html:a> : absolute), allows the position and size
                                    of the Sub-control to be changed with respect to the reference
                                    element.</html:p>
                                <html:p>Once positioned, they are treated the same as widgets and
                                    can be styled using the <html:a
                                        href="stylesheet-customizing.html#box-model">box
                                        model</html:a>.</html:p>
                                <html:p>See the <html:a
                                        href="stylesheet-reference.html#list-of-sub-controls">List
                                        of Sub-Controls</html:a> below for a list of supported
                                    sub-controls, and <html:a
                                        href="stylesheet-examples.html#customizing-the-qpushbutton-s-menu-indicator-sub-control"
                                        >Customizing the QPushButton's Menu Indicator
                                        Sub-Control</html:a> for a realistic example.</html:p>
                                <html:p><html:b>Note: </html:b>With complex widgets such as <html:a
                                        href="qcombobox.html">QComboBox</html:a> and <html:a
                                        href="qscrollbar.html">QScrollBar</html:a>, if one property
                                    or sub-control is customized, <html:b>all</html:b> the other
                                    properties or sub-controls must be customized as
                                    well.</html:p><html:a name="pseudo-states"></html:a>
                                <html:h2 id="pseudo-states">Pseudo-States</html:h2>
                                <html:p>Selectors may contain <html:i>pseudo-states</html:i> that
                                    denote that restrict the application of the rule based on the
                                    widget's state. Pseudo-states appear at the end of the selector,
                                    with a colon (<html:code>:</html:code>) in between. For example,
                                    the following rule applies when the mouse hovers over a <html:a
                                        href="qpushbutton.html">QPushButton</html:a>:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qpushbutton.html"
                                    >QPushButton</html:a></html:span>:hover { color: white
                                    }</html:pre>
                                <html:p>Pseudo-states can be negated using the exclamation operator.
                                    For example, the following rule applies when the mouse does not
                                    hover over a <html:a href="qradiobutton.html"
                                        >QRadioButton</html:a>:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qradiobutton.html"
                                        >QRadioButton</html:a></html:span>:<html:span
                                        class="operator">!</html:span>hover { color: red
                                    }</html:pre>
                                <html:p>Pseudo-states can be chained, in which case a logical AND is
                                    implied. For example, the following rule applies to when the
                                    mouse hovers over a checked <html:a href="qcheckbox.html"
                                        >QCheckBox</html:a>:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qcheckbox.html"
                                    >QCheckBox</html:a></html:span>:hover:checked { color: white
                                    }</html:pre>
                                <html:p>Negated Pseudo-states may appear in Pseudo-state chains. For
                                    example, the following rule applies when the mouse hovers over a
                                        <html:a href="qpushbutton.html">QPushButton</html:a> that is
                                    not pressed:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qpushbutton.html"
                                        >QPushButton</html:a></html:span>:hover:<html:span
                                        class="operator">!</html:span>pressed { color: blue;
                                    }</html:pre>
                                <html:p>If needed, logical OR can be expressed using the comma
                                    operator:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qcheckbox.html"
                                        >QCheckBox</html:a></html:span>:hover<html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a href="qcheckbox.html"
                                            >QCheckBox</html:a></html:span>:checked { color: white
                                    }</html:pre>
                                <html:p>Pseudo-states can appear in combination with subcontrols.
                                    For example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qcombobox.html"
                                        >QComboBox</html:a></html:span><html:span class="operator"
                                        >::</html:span>drop<html:span class="operator"
                                    >-</html:span>down:hover { image: url(dropdown_bright<html:span
                                        class="operator">.</html:span>png) }</html:pre>
                                <html:p>See the <html:a
                                        href="stylesheet-reference.html#list-of-pseudo-states">List
                                        of Pseudo-States</html:a> section below for the list of
                                    pseudo-states provided by Qt widgets.</html:p>
                                <html:a name="conflict-resolution"></html:a>
                                <html:h2 id="conflict-resolution">Conflict Resolution</html:h2>
                                <html:p>Conflicts arise when several style rules specify the same
                                    properties with different values. Consider the following style
                                    sheet:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qpushbutton.html"
                                        >QPushButton</html:a></html:span><html:span
                                        class="preprocessor">#okButton { color: gray }</html:span>
                                    <html:span class="type"><html:a href="qpushbutton.html"
                                            >QPushButton</html:a></html:span> { color: red
                                    }</html:pre>
                                <html:p>Both rules match <html:a href="qpushbutton.html"
                                        >QPushButton</html:a> instances called
                                        <html:code>okButton</html:code> and there is a conflict for
                                    the <html:code>color</html:code> property. To resolve this
                                    conflict, we must take into account the
                                        <html:i>specificity</html:i> of the selectors. In the above
                                    example, <html:code>QPushButton#okButton</html:code> is
                                    considered more specific than
                                    <html:code>QPushButton</html:code>, because it (usually) refers
                                    to a single object, not to all instances of a class.</html:p>
                                <html:p>Similarly, selectors with pseudo-states are more specific
                                    than ones that do not specify pseudo-states. Thus, the following
                                    style sheet specifies that a <html:a href="qpushbutton.html"
                                        >QPushButton</html:a> should have white text when the mouse
                                    is hovering over it, otherwise red text:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qpushbutton.html"
                                    >QPushButton</html:a></html:span>:hover { color: white }
                                        <html:span class="type"><html:a href="qpushbutton.html"
                                            >QPushButton</html:a></html:span> { color: red
                                    }</html:pre>
                                <html:p>Here's a tricky one:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qpushbutton.html"
                                    >QPushButton</html:a></html:span>:hover { color: white }
                                        <html:span class="type"><html:a href="qpushbutton.html"
                                            >QPushButton</html:a></html:span>:enabled { color: red
                                    }</html:pre>
                                <html:p>Here, both selectors have the same specificity, so if the
                                    mouse hovers over the button while it is enabled, the second
                                    rule takes precedence. If we want the text to be white in that
                                    case, we can reorder the rules like this:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qpushbutton.html"
                                    >QPushButton</html:a></html:span>:enabled { color: red }
                                        <html:span class="type"><html:a href="qpushbutton.html"
                                            >QPushButton</html:a></html:span>:hover { color: white
                                    }</html:pre>
                                <html:p>Alternatively, we can make the first rule more
                                    specific:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qpushbutton.html"
                                    >QPushButton</html:a></html:span>:hover:enabled { color: white }
                                        <html:span class="type"><html:a href="qpushbutton.html"
                                            >QPushButton</html:a></html:span>:enabled { color: red
                                    }</html:pre>
                                <html:p>A similar issue arises in conjunction with Type Selectors.
                                    Consider the following example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qpushbutton.html">QPushButton</html:a></html:span>
                                    { color: red } <html:span class="type"><html:a
                                            href="qabstractbutton.html"
                                        >QAbstractButton</html:a></html:span> { color: gray
                                    }</html:pre>
                                <html:p>Both rules apply to <html:a href="qpushbutton.html"
                                        >QPushButton</html:a> instances (since <html:a
                                        href="qpushbutton.html">QPushButton</html:a> inherits
                                        <html:a href="qabstractbutton.html"
                                    >QAbstractButton</html:a>) and there is a conflict for the
                                        <html:a href="stylesheet-reference.html#color-prop"
                                        >color</html:a> property. Because <html:a
                                        href="qpushbutton.html">QPushButton</html:a> inherits
                                        <html:a href="qabstractbutton.html"
                                    >QAbstractButton</html:a>, it might be tempting to assume that
                                        <html:code>QPushButton</html:code> is more specific than
                                        <html:code>QAbstractButton</html:code>. However, for style
                                    sheet computations, all Type Selectors have the same
                                    specificity, and the rule that appears last takes precedence. In
                                    other words, <html:a href="stylesheet-reference.html#color-prop"
                                        >color</html:a> is set to <html:code>gray</html:code> for
                                    all <html:a href="qabstractbutton.html"
                                    >QAbstractButton</html:a>s, including <html:a
                                        href="qpushbutton.html">QPushButton</html:a>s. If we really
                                    want <html:a href="qpushbutton.html">QPushButton</html:a>s to
                                    have red text, we can always reorder the rules.</html:p>
                                <html:p>For determining the specificity of a rule, Qt Style Sheets
                                    follow the <html:a
                                        href="http://www.w3.org/TR/REC-CSS2/cascade.html#specificity"
                                        >CSS2 Specification</html:a>:</html:p>
                                <html:blockquote><html:p><html:i>A selector's specificity is
                                            calculated as follows:</html:i></html:p>
                                    <html:ul>
                                        <html:li><html:i>count the number of ID attributes in the
                                                selector (= a)</html:i></html:li>
                                        <html:li><html:i>count the number of other attributes and
                                                pseudo-classes in the selector (=
                                            b)</html:i></html:li>
                                        <html:li><html:i>count the number of element names in the
                                                selector (= c)</html:i></html:li>
                                        <html:li><html:i>ignore pseudo-elements [i.e., <html:a
                                                  href="stylesheet-reference.html#subcontrols"
                                                  >subcontrols</html:a>].</html:i></html:li>
                                    </html:ul>
                                    <html:p><html:i>Concatenating the three numbers a-b-c (in a
                                            number system with a large base) gives the
                                            specificity.</html:i></html:p>
                                    <html:p><html:i>Some examples:</html:i></html:p>
                                    <html:pre class="cpp"><html:span class="operator">*</html:span>
                                        {} <html:span class="comment">/* a=0 b=0 c=0 -&gt;
                                            specificity = 0 */</html:span> LI {} <html:span
                                            class="comment">/* a=0 b=0 c=1 -&gt; specificity = 1
                                            */</html:span> UL LI {} <html:span class="comment">/*
                                            a=0 b=0 c=2 -&gt; specificity = 2 */</html:span> UL
                                            OL<html:span class="operator">+</html:span>LI {}
                                            <html:span class="comment">/* a=0 b=0 c=3 -&gt;
                                            specificity = 3 */</html:span> H1 <html:span
                                            class="operator">+</html:span>
                                        <html:span class="operator">*</html:span><html:span
                                            class="operator">[</html:span>REL<html:span
                                            class="operator">=</html:span>up<html:span
                                            class="operator">]</html:span>{} <html:span
                                            class="comment">/* a=0 b=1 c=1 -&gt; specificity = 11
                                            */</html:span> UL OL LI<html:span class="operator"
                                            >.</html:span>red {} <html:span class="comment">/* a=0
                                            b=1 c=3 -&gt; specificity = 13 */</html:span>
                                            LI<html:span class="operator">.</html:span>red<html:span
                                            class="operator">.</html:span>level {} <html:span
                                            class="comment">/* a=0 b=2 c=1 -&gt; specificity = 21
                                            */</html:span>
                                        <html:span class="preprocessor">#x34y {} /* a=1 b=0 c=0
                                            -&gt; specificity = 100 */</html:span></html:pre>
                                </html:blockquote>
                                <html:a name="cascading"></html:a>
                                <html:h2 id="cascading">Cascading</html:h2>
                                <html:p>Style sheets can be set on the <html:a
                                        href="qapplication.html">QApplication</html:a>, on parent
                                    widgets, and on child widgets. An arbitrary widget's effective
                                    style sheet is obtained by merging the style sheets set on the
                                    widget's ancestors (parent, grandparent, etc.), as well as any
                                    style sheet set on the <html:a href="qapplication.html"
                                        >QApplication</html:a>.</html:p>
                                <html:p>When conflicts arise, the widget's own style sheet is always
                                    preferred to any inherited style sheet, irrespective of the
                                    specificity of the conflicting rules. Likewise, the parent
                                    widget's style sheet is preferred to the grandparent's,
                                    etc.</html:p>
                                <html:p>One consequence of this is that setting a style rule on a
                                    widget automatically gives it precedence over other rules
                                    specified in the ancestor widgets' style sheets or the <html:a
                                        href="qapplication.html">QApplication</html:a> style sheet.
                                    Consider the following example. First, we set a style sheet on
                                    the <html:a href="qapplication.html"
                                    >QApplication</html:a>:</html:p>
                                <html:pre class="cpp">qApp<html:span class="operator"
                                        >-</html:span><html:span class="operator"
                                        >&gt;</html:span>setStyleSheet(<html:span class="string"
                                        >"QPushButton { color: white }"</html:span>);</html:pre>
                                <html:p>Then we set a style sheet on a <html:a
                                        href="qpushbutton.html">QPushButton</html:a>
                                    object:</html:p>
                                <html:pre class="cpp">myPushButton<html:span class="operator"
                                        >-</html:span><html:span class="operator"
                                        >&gt;</html:span>setStyleSheet(<html:span class="string">"*
                                        { color: blue }"</html:span>);</html:pre>
                                <html:p>The style sheet on the <html:a href="qpushbutton.html"
                                        >QPushButton</html:a> forces the <html:a
                                        href="qpushbutton.html">QPushButton</html:a> (and any child
                                    widget) to have blue text, in spite of the more specific rule
                                    set provided by the application-wide style sheet.</html:p>
                                <html:p>The result would have been the same if we had
                                    written</html:p>
                                <html:pre class="cpp">myPushButton<html:span class="operator"
                                        >-</html:span><html:span class="operator"
                                        >&gt;</html:span>setStyleSheet(<html:span class="string"
                                        >"color: blue"</html:span>);</html:pre>
                                <html:p>except that if the <html:a href="qpushbutton.html"
                                        >QPushButton</html:a> had children (which is unlikely), the
                                    style sheet would have no impact on them.</html:p>
                                <html:p>Style sheet cascading is a complex topic. Refer to the
                                        <html:a
                                        href="http://www.w3.org/TR/CSS2/cascade.html#cascade">CSS2
                                        Specification</html:a> for the gory details. Be aware that
                                    Qt currently doesn't implement
                                    <html:code>!important</html:code>.</html:p>
                                <html:a name="inheritance"></html:a>
                                <html:h2 id="inheritance">Inheritance</html:h2>
                                <html:p>In classic CSS, when font and color of an item is not
                                    explicitly set, it gets automatically inherited from the parent.
                                    When using Qt Style Sheets, a widget does <html:b>not</html:b>
                                    automatically inherit its font and color setting from its parent
                                    widget.</html:p>
                                <html:p>For example, consider a <html:a href="qpushbutton.html"
                                        >QPushButton</html:a> inside a <html:a href="qgroupbox.html"
                                        >QGroupBox</html:a>:</html:p>
                                <html:pre class="cpp">qApp<html:span class="operator"
                                        >-</html:span><html:span class="operator"
                                        >&gt;</html:span>setStyleSheet(<html:span class="string"
                                        >"QGroupBox { color: red; } "</html:span>);</html:pre>
                                <html:p>The <html:a href="qpushbutton.html">QPushButton</html:a>
                                    does not have an explicit color set. Hence, instead of
                                    inheriting color of its parent <html:a href="qgroupbox.html"
                                        >QGroupBox</html:a>, it has the system color. If we want to
                                    set the color on a <html:a href="qgroupbox.html"
                                        >QGroupBox</html:a> and its children, we can write:</html:p>
                                <html:pre class="cpp">qApp<html:span class="operator"
                                        >-</html:span><html:span class="operator"
                                        >&gt;</html:span>setStyleSheet(<html:span class="string"
                                        >"QGroupBox, QGroupBox * { color: red;
                                    }"</html:span>);</html:pre>
                                <html:p>In contrast, setting a font and propagate using <html:a
                                        href="qwidget.html#font-prop">QWidget::setFont</html:a>()
                                    and <html:a href="qwidget.html#palette-prop"
                                        >QWidget::setPalette</html:a>() propagates to child
                                    widgets.</html:p>
                                <html:a name="widgets-inside-c-namespaces"></html:a>
                                <html:h2 id="widgets-inside-c-namespaces">Widgets Inside C++
                                    Namespaces</html:h2>
                                <html:p>The Type Selector can be used to style widgets of a
                                    particular type. For example,</html:p>
                                <html:pre class="cpp"><html:span class="keyword">class</html:span>
                                    MyPushButton : <html:span class="keyword">public</html:span>
                                    <html:span class="type"><html:a href="qpushbutton.html"
                                            >QPushButton</html:a></html:span> { <html:span
                                        class="comment">// ...</html:span> } <html:span
                                        class="comment">// ...</html:span> qApp<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>setStyleSheet(<html:span class="string"
                                        >"MyPushButton { background: yellow;
                                    }"</html:span>);</html:pre>
                                <html:p>Qt Style Sheet uses QObject::className() of the widget to
                                    determine when to apply the Type Selector. When custom widgets
                                    are inside namespaces, the QObject::className() returns
                                    &lt;namespace&gt;::&lt;classname&gt;. This conflicts with the
                                    syntax for <html:a href="stylesheet-syntax.html#sub-controls"
                                        >Sub-Controls</html:a>. To overcome this problem, when using
                                    the Type Selector for widgets inside namespaces, we must replace
                                    the "::" with "--". For example,</html:p>
                                <html:pre class="cpp"><html:span class="keyword"
                                        >namespace</html:span> ns { <html:span class="keyword"
                                        >class</html:span> MyPushButton : <html:span class="keyword"
                                        >public</html:span>
                                    <html:span class="type"><html:a href="qpushbutton.html"
                                            >QPushButton</html:a></html:span> { <html:span
                                        class="comment">// ...</html:span> } } <html:span
                                        class="comment">// ...</html:span> qApp<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>setStyleSheet(<html:span class="string"
                                        >"ns--MyPushButton { background: yellow;
                                    }"</html:span>);</html:pre>
                                <html:a name="setting-qobject-properties"></html:a>
                                <html:h2 id="setting-qobject-properties">Setting QObject
                                    Properties</html:h2>
                                <html:p>From 4.3 and above, any designable <html:a
                                        href="qtcore/qobject.html#Q_PROPERTY">Q_PROPERTY</html:a>
                                    can be set using the qproperty-&lt;property name&gt;
                                    syntax.</html:p>
                                <html:p>For example,</html:p>
                                <html:pre class="cpp">MyLabel { qproperty<html:span class="operator"
                                        >-</html:span>pixmap: url(pixmap<html:span class="operator"
                                        >.</html:span>png); } MyGroupBox { qproperty<html:span
                                        class="operator">-</html:span>titleColor: rgb(<html:span
                                        class="number">100</html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="number">200</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">100</html:span>); } <html:span
                                        class="type"><html:a href="qpushbutton.html"
                                            >QPushButton</html:a></html:span> { qproperty<html:span
                                        class="operator">-</html:span>iconSize: <html:span
                                        class="number">20px</html:span>
                                    <html:span class="number">20px</html:span>; }</html:pre>
                                <html:p>If the property references an enum declared with <html:a
                                        href="qtcore/qobject.html#Q_ENUMS">Q_ENUMS</html:a>, you
                                    should reference its constants by name, i.e., not their numeric
                                    value.</html:p>
                            </html:div>
                            <!-- @@@stylesheet-syntax.html -->
                            <html:p class="naviNextPrevious footerNavi">
                                <html:a class="prevPage" href="stylesheet.html">Qt Style
                                    Sheets</html:a>
                                <html:a class="nextPage" href="stylesheet-designer.html">Qt Designer
                                    Integration</html:a>
                            </html:p>
                        </html:div>
                    </html:div>
                </html:div>
            </html:div>
        </html:div>
        <html:div class="footer">
            <html:p>
                <html:acronym title="Copyright">&#169;</html:acronym> 2015 The Qt Company Ltd.
                Documentation contributions included herein are the copyrights of their respective
                owners.<html:br /> The documentation provided herein is licensed under the terms of
                the <html:a href="http://www.gnu.org/licenses/fdl.html">GNU Free Documentation
                    License version 1.3</html:a> as published by the Free Software
                Foundation.<html:br /> Qt and respective logos are trademarks of The Qt Company Ltd.
                in Finland and/or other countries worldwide. All other trademarks are property of
                their respective owners. </html:p>
        </html:div>
    </html:body>
</html:html>