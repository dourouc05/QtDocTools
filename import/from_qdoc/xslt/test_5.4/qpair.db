<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.0"
            xml:lang="en">
   <db:title>QPair Class</db:title>
   <db:classsynopsis>
      <db:ooclass>
         <db:classname>QPair</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="header">#include
                                                  &lt;QPair&gt;</db:classsynopsisinfo>
      <db:classsynopsisinfo role="qmake"> QT +=
                                                core</db:classsynopsisinfo>
      <db:fieldsynopsis>
         <db:modifier>(public variable)</db:modifier>
         <db:type>T1</db:type>
         <db:varname>first</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(public variable)</db:modifier>
         <db:type>T2</db:type>
         <db:varname>second</db:varname>
      </db:fieldsynopsis>
      <db:constructorsynopsis xlink:href="#QPair">
         <db:methodname>QPair</db:methodname>
         <db:void/>
      </db:constructorsynopsis>
      <db:constructorsynopsis xlink:href="#QPair-2">
         <db:methodname>QPair</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  T1 
                                        &amp;  value1 , const  T2  &amp;  value2 )</db:exceptionname>
      </db:constructorsynopsis>
      <db:constructorsynopsis xlink:href="#QPair-3">
         <db:methodname>QPair</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QPair &lt; TT1 ,  TT2 &gt; &amp;  p )</db:exceptionname>
      </db:constructorsynopsis>
      <db:constructorsynopsis xlink:href="#QPair-4">
         <db:methodname>QPair</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QPair &lt; TT1 ,  TT2 &gt; &amp;&amp;  p )</db:exceptionname>
      </db:constructorsynopsis>
      <db:methodsynopsis xlink:href="operator-eq">
         <db:type xlink:href="qpair.html#QPair">QPair</db:type>
         <db:methodname>operator=</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QPair &lt; TT1 ,  TT2 &gt; &amp;  p )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="operator-eq-2">
         <db:type xlink:href="qpair.html#QPair">QPair</db:type>
         <db:methodname>operator=</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QPair &lt; TT1 ,  TT2 &gt; &amp;&amp;  p )</db:exceptionname>
      </db:methodsynopsis>
   </db:classsynopsis>
   <db:funcsynopsis xlink:href="#qMakePair">
      <db:funcprototype>
         <db:funcdef>
            <db:type>QPair&lt;T1&lt;T2&gt;&gt;</db:type>
            <db:function>qMakePair</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>T1&lt;T2&gt;</db:type>
            <db:parameter>value1</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>T2&lt;T1&lt;T2&gt;&gt;</db:type>
            <db:parameter>value1</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>T2</db:type>
            <db:parameter>value2</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#operator-not-eq-17">
      <db:funcprototype>
         <db:funcdef>
            <db:type>bool</db:type>
            <db:function>operator!=</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>QPair&lt;T1&lt;T2&lt;QPair&lt;T1&lt;T2&gt;&gt;&gt;&gt;&gt;</db:type>
            <db:parameter>p1</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>T2&lt;QPair&lt;T1&lt;T2&gt;&gt;&gt;</db:type>
            <db:parameter>p1</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>QPair&lt;T1&lt;T2&gt;&gt;</db:type>
            <db:parameter>p2</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>T2</db:type>
            <db:parameter>p2</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#operator-lt-5">
      <db:funcprototype>
         <db:funcdef>
            <db:type>bool</db:type>
            <db:function>operator&lt;</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>QPair&lt;T1&lt;T2&lt;QPair&lt;T1&lt;T2&gt;&gt;&gt;&gt;&gt;</db:type>
            <db:parameter>p1</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>T2&lt;QPair&lt;T1&lt;T2&gt;&gt;&gt;</db:type>
            <db:parameter>p1</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>QPair&lt;T1&lt;T2&gt;&gt;</db:type>
            <db:parameter>p2</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>T2</db:type>
            <db:parameter>p2</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#operator-lt-lt-11">
      <db:funcprototype>
         <db:funcdef>
            <db:type xlink:href="qdatastream.html">QDataStream</db:type>
            <db:function>operator&lt;&lt;</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>QDataStream&lt;QPair&lt;T1&lt;T2&gt;&gt;&gt;</db:type>
            <db:parameter>out</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>QPair&lt;T1&lt;T2&gt;&gt;</db:type>
            <db:parameter>pair</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>T2</db:type>
            <db:parameter>pair</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#operator-lt-eq-2">
      <db:funcprototype>
         <db:funcdef>
            <db:type>bool</db:type>
            <db:function>operator&lt;=</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>QPair&lt;T1&lt;T2&lt;QPair&lt;T1&lt;T2&gt;&gt;&gt;&gt;&gt;</db:type>
            <db:parameter>p1</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>T2&lt;QPair&lt;T1&lt;T2&gt;&gt;&gt;</db:type>
            <db:parameter>p1</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>QPair&lt;T1&lt;T2&gt;&gt;</db:type>
            <db:parameter>p2</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>T2</db:type>
            <db:parameter>p2</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#operator-eq-eq-25">
      <db:funcprototype>
         <db:funcdef>
            <db:type>bool</db:type>
            <db:function>operator==</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>QPair&lt;T1&lt;T2&lt;QPair&lt;T1&lt;T2&gt;&gt;&gt;&gt;&gt;</db:type>
            <db:parameter>p1</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>T2&lt;QPair&lt;T1&lt;T2&gt;&gt;&gt;</db:type>
            <db:parameter>p1</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>QPair&lt;T1&lt;T2&gt;&gt;</db:type>
            <db:parameter>p2</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>T2</db:type>
            <db:parameter>p2</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#operator-gt-2">
      <db:funcprototype>
         <db:funcdef>
            <db:type>bool</db:type>
            <db:function>operator&gt;</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>QPair&lt;T1&lt;T2&lt;QPair&lt;T1&lt;T2&gt;&gt;&gt;&gt;&gt;</db:type>
            <db:parameter>p1</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>T2&lt;QPair&lt;T1&lt;T2&gt;&gt;&gt;</db:type>
            <db:parameter>p1</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>QPair&lt;T1&lt;T2&gt;&gt;</db:type>
            <db:parameter>p2</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>T2</db:type>
            <db:parameter>p2</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#operator-gt-eq-2">
      <db:funcprototype>
         <db:funcdef>
            <db:type>bool</db:type>
            <db:function>operator&gt;=</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>QPair&lt;T1&lt;T2&lt;QPair&lt;T1&lt;T2&gt;&gt;&gt;&gt;&gt;</db:type>
            <db:parameter>p1</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>T2&lt;QPair&lt;T1&lt;T2&gt;&gt;&gt;</db:type>
            <db:parameter>p1</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>QPair&lt;T1&lt;T2&gt;&gt;</db:type>
            <db:parameter>p2</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>T2</db:type>
            <db:parameter>p2</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#operator-gt-gt-11">
      <db:funcprototype>
         <db:funcdef>
            <db:type xlink:href="qdatastream.html">QDataStream</db:type>
            <db:function>operator&gt;&gt;</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>QDataStream&lt;QPair&lt;T1&lt;T2&gt;&gt;&gt;</db:type>
            <db:parameter>in</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>QPair&lt;T1&lt;T2&gt;&gt;</db:type>
            <db:parameter>pair</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>T2</db:type>
            <db:parameter>pair</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The <db:code><db:link xlink:href="qpair.html">QPair</db:link></db:code> class is a
                                    template class that stores a pair of items.</db:para>
      <db:para>
         <db:code><db:link xlink:href="qpair.html">QPair</db:link>&lt;T1, T2&gt;</db:code> can
                                    be used in your application if the STL
                                        <db:code>pair</db:code> type is not available. It stores
                                    one value of type T1 and one value of type T2. It can be used as
                                    a return value for a function that needs to return two values,
                                    or as the value type of a <db:link xlink:href="containers.html">generic
                                        container</db:link>.</db:para>
      <db:para>Here's an example of a <db:code><db:link xlink:href="qpair.html">QPair</db:link></db:code> that stores one <db:code><db:link xlink:href="qstring.html">QString</db:link></db:code> and one <db:code>double</db:code>
                                    value:</db:para>
      <db:programlisting>QPair&lt;QString,double&gt; pair;</db:programlisting>
      <db:para>The components are accessible as public data members called
                                        <db:link xlink:href="qpair.html#first-var">first</db:link> and
                                        <db:link xlink:href="qpair.html#second-var">second</db:link>. For
                                    example:</db:para>
      <db:programlisting>pair.first ="pi"; pair.second =3.14159265358979323846;</db:programlisting>
      <db:para>
         <db:code><db:link xlink:href="qpair.html">QPair</db:link></db:code>'s template data
                                    types (T1 and T2) must be <db:link xlink:href="containers.html#assignable-data-types">assignable data
                                        types</db:link>. You cannot, for example, store a <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code> as a value;
                                    instead, store a <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code> *. A few functions have additional
                                    requirements; these requirements are documented on a
                                    per-function basis.</db:para>
      <db:section>
         <db:title>See Also</db:title>
         <db:simplelist type="vert">
            <db:member>
               <db:link xlink:href="containers.html">Container Classes</db:link>
            </db:member>
         </db:simplelist>
      </db:section>
   </db:section>
   <db:section xml:id="types">
      <db:title>Member Type Documentation</db:title>
      <db:section xml:id="first_type-typedef">
         <db:title>typedef QPair::first_type</db:title>
         <db:para>The type of the first element in the pair (T1).</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qpair.html#first-var">first</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="second_type-typedef">
         <db:title>typedef QPair::second_type</db:title>
         <db:para>The type of the second element in the pair (T2).</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qpair.html#second-var">second</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
   </db:section>
   <db:section xml:id="func">
      <db:title>Member Function Documentation</db:title>
      <db:section xml:id="QPair">
         <db:title>QPair::QPair()</db:title>
         <db:para>Constructs an empty pair. The <db:code>first</db:code>
                                    and <db:code>second</db:code> elements are initialized with
                                        <db:link xlink:href="containers.html#default-constructed-value">default-constructed value</db:link>s.</db:para>
      </db:section>
      <db:section xml:id="QPair-2">
         <db:title>QPair::QPair(const T1 &amp; value1, const T2 &amp; value2)</db:title>
         <db:para>Constructs a pair and initializes the
                                        <db:code>first</db:code> element with
                                        <db:emphasis>value1</db:emphasis> and the
                                        <db:code>second</db:code> element with
                                        <db:emphasis>value2</db:emphasis>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpair.html#qMakePair">qMakePair</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="QPair-3">
         <db:title>QPair::QPair(const <db:link xlink:href="qpair.html#QPair">QPair</db:link></db:title>
         <db:para>Constructs a pair from the other pair <db:emphasis>p</db:emphasis>, of
                                    types TT1 and TT2. This constructor will fail if
                                        <db:code>first</db:code> cannot be initialized from
                                        <db:code>p.first</db:code> or if
                                        <db:code>second</db:code> cannot be initialized from
                                        <db:code>p.second</db:code>.</db:para>
         <db:para>This function was introduced in Qt 5.2.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpair.html#qMakePair">qMakePair</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="QPair-4">
         <db:title>QPair::QPair(<db:link xlink:href="qpair.html#QPair">QPair</db:link></db:title>
         <db:para/>
      </db:section>
      <db:section xml:id="operator-eq">
         <db:title><db:link xlink:href="qpair.html#QPair">QPair</db:link><db:link xlink:href="qpair.html#QPair">QPair</db:link></db:title>
         <db:para>Copies the pair <db:emphasis>p</db:emphasis> onto this pair.</db:para>
         <db:para>This function was introduced in Qt 5.2.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpair.html#qMakePair">qMakePair</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="operator-eq-2">
         <db:title><db:link xlink:href="qpair.html#QPair">QPair</db:link><db:link xlink:href="qpair.html#QPair">QPair</db:link></db:title>
         <db:para/>
      </db:section>
   </db:section>
   <db:section xml:id="relnonmem">
      <db:title>Related Non-Members</db:title>
      <db:section xml:id="qMakePair">
         <db:title><db:link xlink:href="qpair.html#QPair">QPair</db:link></db:title>
         <db:para>Returns a <db:code><db:link xlink:href="qpair.html">QPair</db:link>&lt;T1,
                                    T2&gt;</db:code> that contains <db:emphasis>value1</db:emphasis> and
                                        <db:emphasis>value2</db:emphasis>. Example:</db:para>
         <db:programlisting>QList&lt;QPair&lt;int,double&gt;&gt; list;
                                        list.append(qMakePair(66,3.14159));</db:programlisting>
         <db:para>This is equivalent to <db:code><db:link xlink:href="qpair.html">QPair</db:link>&lt;T1, T2&gt;</db:code>(<db:emphasis>value1</db:emphasis>,
                                        <db:emphasis>value2</db:emphasis>), but usually requires less
                                    typing.</db:para>
      </db:section>
      <db:section xml:id="operator-not-eq-17">
         <db:title>bool operator!=(const <db:link xlink:href="qpair.html#QPair">QPair</db:link><db:link xlink:href="qpair.html#QPair">QPair</db:link></db:title>
         <db:para>Returns <db:code>true</db:code> if <db:emphasis>p1</db:emphasis>
                                    is not equal to <db:emphasis>p2</db:emphasis>; otherwise returns false.
                                    Two pairs compare as not equal if their
                                        <db:code>first</db:code> data members are not equal or
                                    if their <db:code>second</db:code> data members are not
                                    equal.</db:para>
         <db:para>This function requires the T1 and T2 types to have an
                                    implementation of <db:code>operator==()</db:code>.</db:para>
      </db:section>
      <db:section xml:id="operator-lt-5">
         <db:title>bool operator&lt;(const <db:link xlink:href="qpair.html#QPair">QPair</db:link><db:link xlink:href="qpair.html#QPair">QPair</db:link></db:title>
         <db:para>Returns <db:code>true</db:code> if <db:emphasis>p1</db:emphasis>
                                    is less than <db:emphasis>p2</db:emphasis>; otherwise returns false. The
                                    comparison is done on the <db:code>first</db:code> members
                                    of <db:emphasis>p1</db:emphasis> and <db:emphasis>p2</db:emphasis>; if they compare
                                    equal, the <db:code>second</db:code> members are compared to
                                    break the tie.</db:para>
         <db:para>This function requires the T1 and T2 types to have an
                                    implementation of
                                    <db:code>operator&lt;()</db:code>.</db:para>
      </db:section>
      <db:section xml:id="operator-lt-lt-11">
         <db:title><db:link xlink:href="qdatastream.html">QDataStream</db:link><db:link xlink:href="qdatastream.html">QDataStream</db:link><db:link xlink:href="qpair.html#QPair">QPair</db:link></db:title>
         <db:para>Writes the pair <db:emphasis>pair</db:emphasis> to stream
                                        <db:emphasis>out</db:emphasis>.</db:para>
         <db:para>This function requires the T1 and T2 types to implement
                                        <db:code>operator&lt;&lt;()</db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="datastreamformat.html">Serializing Qt Data
                                        Types</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="operator-lt-eq-2">
         <db:title>bool operator&lt;=(const <db:link xlink:href="qpair.html#QPair">QPair</db:link><db:link xlink:href="qpair.html#QPair">QPair</db:link></db:title>
         <db:para>Returns <db:code>true</db:code> if <db:emphasis>p1</db:emphasis>
                                    is less than or equal to <db:emphasis>p2</db:emphasis>; otherwise returns
                                        <db:code>false</db:code>. The comparison is done on the
                                        <db:code>first</db:code> members of <db:emphasis>p1</db:emphasis>
                                    and <db:emphasis>p2</db:emphasis>; if they compare equal, the
                                        <db:code>second</db:code> members are compared to break
                                    the tie.</db:para>
         <db:para>This function requires the T1 and T2 types to have an
                                    implementation of
                                    <db:code>operator&lt;()</db:code>.</db:para>
      </db:section>
      <db:section xml:id="operator-eq-eq-25">
         <db:title>bool operator==(const <db:link xlink:href="qpair.html#QPair">QPair</db:link><db:link xlink:href="qpair.html#QPair">QPair</db:link></db:title>
         <db:para>Returns <db:code>true</db:code> if <db:emphasis>p1</db:emphasis>
                                    is equal to <db:emphasis>p2</db:emphasis>; otherwise returns
                                        <db:code>false</db:code>. Two pairs compare equal if
                                    their <db:code>first</db:code> data members compare equal
                                    and if their <db:code>second</db:code> data members compare
                                    equal.</db:para>
         <db:para>This function requires the T1 and T2 types to have an
                                    implementation of <db:code>operator==()</db:code>.</db:para>
      </db:section>
      <db:section xml:id="operator-gt-2">
         <db:title>bool operator&gt;(const <db:link xlink:href="qpair.html#QPair">QPair</db:link><db:link xlink:href="qpair.html#QPair">QPair</db:link></db:title>
         <db:para>Returns <db:code>true</db:code> if <db:emphasis>p1</db:emphasis>
                                    is greater than <db:emphasis>p2</db:emphasis>; otherwise returns false.
                                    The comparison is done on the <db:code>first</db:code>
                                    members of <db:emphasis>p1</db:emphasis> and <db:emphasis>p2</db:emphasis>; if they
                                    compare equal, the <db:code>second</db:code> members are
                                    compared to break the tie.</db:para>
         <db:para>This function requires the T1 and T2 types to have an
                                    implementation of
                                    <db:code>operator&lt;()</db:code>.</db:para>
      </db:section>
      <db:section xml:id="operator-gt-eq-2">
         <db:title>bool operator&gt;=(const <db:link xlink:href="qpair.html#QPair">QPair</db:link><db:link xlink:href="qpair.html#QPair">QPair</db:link></db:title>
         <db:para>Returns <db:code>true</db:code> if <db:emphasis>p1</db:emphasis>
                                    is greater than or equal to <db:emphasis>p2</db:emphasis>; otherwise
                                    returns <db:code>false</db:code>. The comparison is done on
                                    the <db:code>first</db:code> members of <db:emphasis>p1</db:emphasis>
                                    and <db:emphasis>p2</db:emphasis>; if they compare equal, the
                                        <db:code>second</db:code> members are compared to break
                                    the tie.</db:para>
         <db:para>This function requires the T1 and T2 types to have an
                                    implementation of
                                    <db:code>operator&lt;()</db:code>.</db:para>
      </db:section>
      <db:section xml:id="operator-gt-gt-11">
         <db:title><db:link xlink:href="qdatastream.html">QDataStream</db:link><db:link xlink:href="qdatastream.html">QDataStream</db:link><db:link xlink:href="qpair.html#QPair">QPair</db:link></db:title>
         <db:para>Reads a pair from stream <db:emphasis>in</db:emphasis> into
                                        <db:emphasis>pair</db:emphasis>.</db:para>
         <db:para>This function requires the T1 and T2 types to implement
                                        <db:code>operator&gt;&gt;()</db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="datastreamformat.html">Serializing Qt Data
                                        Types</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
   </db:section>
   <db:section xml:id="vars">
      <db:title>Member Variable Documentation</db:title>
      <db:section xml:id="first-var">
         <db:title>T1 QPair::first</db:title>
         <db:para>The first element in the pair.</db:para>
      </db:section>
      <db:section xml:id="second-var">
         <db:title>T2 QPair::second</db:title>
         <db:para>The second element in the pair.</db:para>
      </db:section>
   </db:section>
</db:article>
