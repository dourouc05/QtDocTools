<html:html xmlns:html="http://www.w3.org/1999/xhtml" lang="en">
    <html:head>
        <html:meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
        <!-- qglobal.cpp -->
        <html:title>&lt;QtGlobal&gt; - Global Qt Declarations | Qt Core 5.4</html:title>
        <html:link href="style/offline.css" rel="stylesheet" type="text/css" />
    </html:head>
    <html:body>
        <html:div class="header" id="qtdocheader">
            <html:div class="main">
                <html:div class="main-rounded">
                    <html:div class="navigationbar">
                        <html:ul>
                            <html:li><html:a href="qtdoc/index.html">Qt 5.4</html:a></html:li>
                            <html:li><html:a href="qtcore-index.html">Qt Core</html:a></html:li>
                            <html:li>&lt;QtGlobal&gt; - Global Qt Declarations</html:li>
                            <html:li id="buildversion">Qt 5.4.2 Reference Documentation</html:li>
                        </html:ul>
                    </html:div>
                </html:div>
                <html:div class="content">
                    <html:div class="line">
                        <html:div class="content mainContent">
                            <html:div class="sidebar">
                                <html:div class="toc">
                                    <html:h3><html:a name="toc">Contents</html:a></html:h3>
                                    <html:ul>
                                        <html:li class="level1"><html:a href="#types"
                                            >Types</html:a></html:li>
                                        <html:li class="level1"><html:a href="#functions"
                                                >Functions</html:a></html:li>
                                        <html:li class="level1"><html:a href="#macros"
                                                >Macros</html:a></html:li>
                                    </html:ul>
                                </html:div>
                                <html:div class="sidebar-content" id="sidebar-content"
                                ></html:div></html:div>
                            <html:h1 class="title">&lt;QtGlobal&gt; - Global Qt
                                Declarations</html:h1>
                            <html:span class="subtitle"></html:span>
                            <!-- $$$<QtGlobal>-brief -->
                            <html:p>The &lt;QtGlobal&gt; header file includes the fundamental global
                                declarations. It is included by most other Qt header files. <html:a
                                    href="#details">More...</html:a></html:p>
                            <!-- @@@<QtGlobal> -->
                            <html:ul>
                                <html:li><html:a href="qtglobal-obsolete.html">Obsolete
                                        members</html:a></html:li>
                            </html:ul>
                            <html:a name="Types"></html:a>
                            <html:h2 id="Types">Types</html:h2>
                            <html:div class="table"><html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#QFunctionPointer-typedef"
                                                  >QFunctionPointer</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#QtMessageHandler-typedef"
                                                  >QtMessageHandler</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> enum </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#QtMsgType-enum"
                                                  >QtMsgType</html:a></html:b> { QtDebugMsg,
                                                QtWarningMsg, QtCriticalMsg, QtFatalMsg, QtSystemMsg
                                                }</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qint8-typedef"
                                                  >qint8</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qint16-typedef"
                                                  >qint16</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qint32-typedef"
                                                  >qint32</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qint64-typedef"
                                                  >qint64</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qintptr-typedef"
                                                  >qintptr</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qlonglong-typedef"
                                                  >qlonglong</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qptrdiff-typedef"
                                                  >qptrdiff</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qreal-typedef"
                                                  >qreal</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#quint8-typedef"
                                                  >quint8</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#quint16-typedef"
                                                  >quint16</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#quint32-typedef"
                                                  >quint32</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#quint64-typedef"
                                                  >quint64</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#quintptr-typedef"
                                                  >quintptr</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qulonglong-typedef"
                                                  >qulonglong</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#uchar-typedef"
                                                  >uchar</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#uint-typedef"
                                                  >uint</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#ulong-typedef"
                                                  >ulong</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#ushort-typedef"
                                                  >ushort</html:a></html:b></html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div>
                            <html:a name="Functions"></html:a>
                            <html:h2 id="Functions">Functions</html:h2>
                            <html:div class="table"><html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> T </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qAbsx"
                                                  >qAbs</html:a></html:b>(const T &amp;<html:i>
                                                  value</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> const
                                                T &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qBound"
                                                  >qBound</html:a></html:b>(const T &amp;<html:i>
                                                  min</html:i>, const T &amp;<html:i>
                                                value</html:i>, const T &amp;<html:i>
                                                max</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qEnvironmentVariableIsEmpty"
                                                  >qEnvironmentVariableIsEmpty</html:a></html:b>(const
                                                char *<html:i> varName</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qEnvironmentVariableIsSet"
                                                  >qEnvironmentVariableIsSet</html:a></html:b>(const
                                                char *<html:i> varName</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                quint32 </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qFloatDistance"
                                                  >qFloatDistance</html:a></html:b>(float<html:i>
                                                  a</html:i>, float<html:i> b</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                quint64 </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qFloatDistance-2"
                                                  >qFloatDistance</html:a></html:b>(double<html:i>
                                                  a</html:i>, double<html:i> b</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                QString </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qFormatLogMessage"
                                                  >qFormatLogMessage</html:a></html:b>(QtMsgType<html:i>
                                                  type</html:i>, const QMessageLogContext
                                                  &amp;<html:i> context</html:i>, const QString
                                                  &amp;<html:i> str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qFuzzyCompare"
                                                  >qFuzzyCompare</html:a></html:b>(double<html:i>
                                                  p1</html:i>, double<html:i> p2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qFuzzyCompare-3"
                                                  >qFuzzyCompare</html:a></html:b>(float<html:i>
                                                  p1</html:i>, float<html:i> p2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> double </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qInf"
                                                  >qInf</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                QtMessageHandler </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qInstallMessageHandler"
                                                  >qInstallMessageHandler</html:a></html:b>(QtMessageHandler<html:i>
                                                  handler</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qIsFinite"
                                                  >qIsFinite</html:a></html:b>(double<html:i>
                                                  d</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qIsFinite-2"
                                                  >qIsFinite</html:a></html:b>(float<html:i>
                                                  f</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qIsInf"
                                                  >qIsInf</html:a></html:b>(double<html:i>
                                                  d</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qIsInf-2"
                                                  >qIsInf</html:a></html:b>(float<html:i>
                                                f</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qIsNaN"
                                                  >qIsNaN</html:a></html:b>(double<html:i>
                                                  d</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qIsNaN-2"
                                                  >qIsNaN</html:a></html:b>(float<html:i>
                                                f</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> const
                                                T &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qMaxx"
                                                  >qMax</html:a></html:b>(const T &amp;<html:i>
                                                  value1</html:i>, const T &amp;<html:i>
                                                  value2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> const
                                                T &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qMinx"
                                                  >qMin</html:a></html:b>(const T &amp;<html:i>
                                                  value1</html:i>, const T &amp;<html:i>
                                                  value2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> double </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qQNaN"
                                                  >qQNaN</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> qint64 </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qRound64"
                                                  >qRound64</html:a></html:b>(qreal<html:i>
                                                  value</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qRound"
                                                  >qRound</html:a></html:b>(qreal<html:i>
                                                  value</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> double </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qSNaN"
                                                  >qSNaN</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qSetMessagePattern"
                                                  >qSetMessagePattern</html:a></html:b>(const
                                                QString &amp;<html:i> pattern</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> const
                                                char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qVersion"
                                                  >qVersion</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> T * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#q_check_ptr"
                                                  >q_check_ptr</html:a></html:b>(T *<html:i>
                                                  pointer</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qgetenv"
                                                  >qgetenv</html:a></html:b>(const char *<html:i>
                                                  varName</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qputenv"
                                                  >qputenv</html:a></html:b>(const char *<html:i>
                                                  varName</html:i>, const QByteArray &amp;<html:i>
                                                  value</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qrand"
                                                  >qrand</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qsrand"
                                                  >qsrand</html:a></html:b>(uint<html:i>
                                                  seed</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                QString </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qtTrId"
                                                  >qtTrId</html:a></html:b>(const char *<html:i>
                                                  id</html:i>, int<html:i> n</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qunsetenv"
                                                  >qunsetenv</html:a></html:b>(const char *<html:i>
                                                  varName</html:i>)</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div>
                            <html:a name="Macros"></html:a>
                            <html:h2 id="Macros">Macros</html:h2>
                            <html:div class="table"><html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#QT_DISABLE_DEPRECATED_BEFORE"
                                                  >QT_DISABLE_DEPRECATED_BEFORE</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#QT_POINTER_SIZE"
                                                  >QT_POINTER_SIZE</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#QT_REQUIRE_VERSION"
                                                  >QT_REQUIRE_VERSION</html:a></html:b>(int<html:i>
                                                  argc</html:i>, char **<html:i> argv</html:i>,
                                                const char *<html:i> version</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#QT_TRANSLATE_NOOP3"
                                                  >QT_TRANSLATE_NOOP3</html:a></html:b>(<html:i>
                                                  context</html:i>, <html:i> sourceText</html:i>,
                                                  <html:i> comment</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#QT_TRANSLATE_NOOP"
                                                  >QT_TRANSLATE_NOOP</html:a></html:b>(<html:i>
                                                  context</html:i>, <html:i>
                                                sourceText</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#QT_TRID_NOOP"
                                                  >QT_TRID_NOOP</html:a></html:b>(<html:i>
                                                  id</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#QT_TR_NOOP"
                                                  >QT_TR_NOOP</html:a></html:b>(<html:i>
                                                  sourceText</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#QT_VERSION"
                                                  >QT_VERSION</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#QT_VERSION_CHECK"
                                                  >QT_VERSION_CHECK</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#QT_VERSION_STR"
                                                  >QT_VERSION_STR</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_ASSERT"
                                                  >Q_ASSERT</html:a></html:b>(bool<html:i>
                                                  test</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_ASSERT_X"
                                                  >Q_ASSERT_X</html:a></html:b>(bool<html:i>
                                                  test</html:i>, const char *<html:i>
                                                where</html:i>, const char *<html:i>
                                                what</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_ASSUME"
                                                  >Q_ASSUME</html:a></html:b>(bool<html:i>
                                                  expr</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_BIG_ENDIAN"
                                                  >Q_BIG_ENDIAN</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_BYTE_ORDER"
                                                  >Q_BYTE_ORDER</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_BOR"
                                                  >Q_CC_BOR</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_CDS"
                                                  >Q_CC_CDS</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_COMEAU"
                                                  >Q_CC_COMEAU</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_DEC"
                                                  >Q_CC_DEC</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_EDG"
                                                  >Q_CC_EDG</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_GHS"
                                                  >Q_CC_GHS</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_GNU"
                                                  >Q_CC_GNU</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_HIGHC"
                                                  >Q_CC_HIGHC</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_HPACC"
                                                  >Q_CC_HPACC</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_INTEL"
                                                  >Q_CC_INTEL</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_KAI"
                                                  >Q_CC_KAI</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_MIPS"
                                                  >Q_CC_MIPS</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_MSVC"
                                                  >Q_CC_MSVC</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_OC"
                                                  >Q_CC_OC</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_PGI"
                                                  >Q_CC_PGI</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_SUN"
                                                  >Q_CC_SUN</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_SYM"
                                                  >Q_CC_SYM</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_USLC"
                                                  >Q_CC_USLC</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CC_WAT"
                                                  >Q_CC_WAT</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_CHECK_PTRx"
                                                  >Q_CHECK_PTR</html:a></html:b>(void *<html:i>
                                                  pointer</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_DECLARE_TYPEINFO"
                                                  >Q_DECLARE_TYPEINFO</html:a></html:b>(<html:i>
                                                  Type</html:i>, <html:i> Flags</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_DECL_CONSTEXPR"
                                                  >Q_DECL_CONSTEXPR</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_DECL_EXPORT"
                                                  >Q_DECL_EXPORT</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_DECL_FINAL"
                                                  >Q_DECL_FINAL</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_DECL_IMPORT"
                                                  >Q_DECL_IMPORT</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_DECL_NOEXCEPT"
                                                  >Q_DECL_NOEXCEPT</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_DECL_NOEXCEPT_EXPR"
                                                  >Q_DECL_NOEXCEPT_EXPR</html:a></html:b>(<html:i>
                                                  x</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_DECL_NOTHROW"
                                                  >Q_DECL_NOTHROW</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_DECL_OVERRIDE"
                                                  >Q_DECL_OVERRIDE</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_FOREACH"
                                                  >Q_FOREACH</html:a></html:b>(<html:i>
                                                  variable</html:i>, <html:i>
                                                container</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_FOREVER"
                                                  >Q_FOREVER</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_FORWARD_DECLARE_CF_TYPE"
                                                  >Q_FORWARD_DECLARE_CF_TYPE</html:a></html:b>(<html:i>
                                                  type</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_FORWARD_DECLARE_MUTABLE_CF_TYPE"
                                                  >Q_FORWARD_DECLARE_MUTABLE_CF_TYPE</html:a></html:b>(<html:i>
                                                  type</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_FORWARD_DECLARE_OBJC_CLASS"
                                                  >Q_FORWARD_DECLARE_OBJC_CLASS</html:a></html:b>(<html:i>
                                                  classname</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> const
                                                char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_FUNC_INFO"
                                                  >Q_FUNC_INFO</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> qint64 </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_INT64_C"
                                                  >Q_INT64_C</html:a></html:b>(<html:i>
                                                  literal</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_LIKELY"
                                                  >Q_LIKELY</html:a></html:b>(<html:i>
                                                expr</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_LITTLE_ENDIAN"
                                                  >Q_LITTLE_ENDIAN</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_AIX"
                                                  >Q_OS_AIX</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_ANDROID"
                                                  >Q_OS_ANDROID</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_BSD4"
                                                  >Q_OS_BSD4</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_BSDI"
                                                  >Q_OS_BSDI</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_CYGWIN"
                                                  >Q_OS_CYGWIN</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_DARWIN"
                                                  >Q_OS_DARWIN</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_DGUX"
                                                  >Q_OS_DGUX</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_DYNIX"
                                                  >Q_OS_DYNIX</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_FREEBSD"
                                                  >Q_OS_FREEBSD</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_HPUX"
                                                  >Q_OS_HPUX</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_HURD"
                                                  >Q_OS_HURD</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_IOS"
                                                  >Q_OS_IOS</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_IRIX"
                                                  >Q_OS_IRIX</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_LINUX"
                                                  >Q_OS_LINUX</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_LYNX"
                                                  >Q_OS_LYNX</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_MAC"
                                                  >Q_OS_MAC</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_NETBSD"
                                                  >Q_OS_NETBSD</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_OPENBSD"
                                                  >Q_OS_OPENBSD</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_OSF"
                                                  >Q_OS_OSF</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_OSX"
                                                  >Q_OS_OSX</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_QNX"
                                                  >Q_OS_QNX</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_RELIANT"
                                                  >Q_OS_RELIANT</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_SCO"
                                                  >Q_OS_SCO</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_SOLARIS"
                                                  >Q_OS_SOLARIS</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_ULTRIX"
                                                  >Q_OS_ULTRIX</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_UNIX"
                                                  >Q_OS_UNIX</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_OS_UNIXWARE"
                                                  >Q_OS_UNIXWARE</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_WIN32"
                                                  >Q_OS_WIN32</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_WIN64"
                                                  >Q_OS_WIN64</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_WIN"
                                                  >Q_OS_WIN</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_WINCE"
                                                  >Q_OS_WINCE</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_OS_WINPHONE"
                                                  >Q_OS_WINPHONE</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_OS_WINRT"
                                                  >Q_OS_WINRT</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_X86"
                                                  >Q_PROCESSOR_X86</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_S390"
                                                  >Q_PROCESSOR_S390</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_ALPHA"
                                                  >Q_PROCESSOR_ALPHA</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_ARM"
                                                  >Q_PROCESSOR_ARM</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_ARM_V5"
                                                  >Q_PROCESSOR_ARM_V5</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_ARM_V6"
                                                  >Q_PROCESSOR_ARM_V6</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_ARM_V7"
                                                  >Q_PROCESSOR_ARM_V7</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_AVR32"
                                                  >Q_PROCESSOR_AVR32</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_BLACKFIN"
                                                  >Q_PROCESSOR_BLACKFIN</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_IA64"
                                                  >Q_PROCESSOR_IA64</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_MIPS"
                                                  >Q_PROCESSOR_MIPS</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_MIPS_32"
                                                  >Q_PROCESSOR_MIPS_32</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_MIPS_64"
                                                  >Q_PROCESSOR_MIPS_64</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_MIPS_I"
                                                  >Q_PROCESSOR_MIPS_I</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_MIPS_II"
                                                  >Q_PROCESSOR_MIPS_II</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_MIPS_III"
                                                  >Q_PROCESSOR_MIPS_III</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_MIPS_IV"
                                                  >Q_PROCESSOR_MIPS_IV</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_MIPS_V"
                                                  >Q_PROCESSOR_MIPS_V</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_POWER"
                                                  >Q_PROCESSOR_POWER</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_POWER_32"
                                                  >Q_PROCESSOR_POWER_32</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_POWER_64"
                                                  >Q_PROCESSOR_POWER_64</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_S390_X"
                                                  >Q_PROCESSOR_S390_X</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_SH"
                                                  >Q_PROCESSOR_SH</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_SH_4A"
                                                  >Q_PROCESSOR_SH_4A</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_SPARC"
                                                  >Q_PROCESSOR_SPARC</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_SPARC_V9"
                                                  >Q_PROCESSOR_SPARC_V9</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_X86_32"
                                                  >Q_PROCESSOR_X86_32</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_PROCESSOR_X86_64"
                                                  >Q_PROCESSOR_X86_64</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign">
                                                quint64 </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_UINT64_C"
                                                  >Q_UINT64_C</html:a></html:b>(<html:i>
                                                  literal</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_UNLIKELY"
                                                  >Q_UNLIKELY</html:a></html:b>(<html:i>
                                                  expr</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#Q_UNREACHABLE"
                                                  >Q_UNREACHABLE</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#Q_UNUSED"
                                                  >Q_UNUSED</html:a></html:b>(<html:i>
                                                name</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#foreach"
                                                  >foreach</html:a></html:b>(<html:i>
                                                  variable</html:i>, <html:i>
                                                container</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#forever"
                                                  >forever</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qCritical"
                                                  >qCritical</html:a></html:b>(const char *<html:i>
                                                  message</html:i>, ...)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qDebug"
                                                  >qDebug</html:a></html:b>(const char *<html:i>
                                                  message</html:i>, ...)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qFatal"
                                                  >qFatal</html:a></html:b>(const char *<html:i>
                                                  message</html:i>, ...)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qMove"
                                                  >qMove</html:a></html:b>(<html:i>
                                                x</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> const
                                                char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qPrintable"
                                                  >qPrintable</html:a></html:b>(const QString
                                                  &amp;<html:i> str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> const
                                                char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtglobal.html#qUtf8Printable"
                                                  >qUtf8Printable</html:a></html:b>(const QString
                                                  &amp;<html:i> str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft topAlign rightAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtglobal.html#qWarning"
                                                  >qWarning</html:a></html:b>(const char *<html:i>
                                                  message</html:i>, ...)</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div>
                            <!-- $$$<QtGlobal>-description -->
                            <html:div class="descr">
                                <html:a name="details"></html:a>
                                <html:p>The global declarations include <html:a
                                        href="qtglobal.html#types">types</html:a>, <html:a
                                        href="qtglobal.html#functions">functions</html:a> and
                                        <html:a href="qtglobal.html#macros"
                                    >macros</html:a>.</html:p>
                                <html:p>The type definitions are partly convenience definitions for
                                    basic types (some of which guarantee certain bit-sizes on all
                                    platforms supported by Qt), partly types related to Qt message
                                    handling. The functions are related to generating messages, Qt
                                    version handling and comparing and adjusting object values. And
                                    finally, some of the declared macros enable programmers to add
                                    compiler or platform specific code to their applications, while
                                    others are convenience macros for larger operations.</html:p>
                                <html:a name="types"></html:a>
                                <html:h2 id="types">Types</html:h2>
                                <html:p>The header file declares several type definitions that
                                    guarantee a specified bit-size on all platforms supported by Qt
                                    for various basic types, for example <html:a
                                        href="qtglobal.html#qint8-typedef">qint8</html:a> which is a
                                    signed char guaranteed to be 8-bit on all platforms supported by
                                    Qt. The header file also declares the <html:a
                                        href="qtglobal.html#qlonglong-typedef">qlonglong</html:a>
                                    type definition for <html:code>long long int</html:code>
                                        (<html:code>__int64</html:code> on Windows).</html:p>
                                <html:p>Several convenience type definitions are declared: <html:a
                                        href="qtglobal.html#qreal-typedef">qreal</html:a> for
                                        <html:code>double</html:code>, <html:a
                                        href="qtglobal.html#uchar-typedef">uchar</html:a> for
                                        <html:code>unsigned</html:code> char, <html:a
                                        href="qtglobal.html#uint-typedef">uint</html:a> for
                                        <html:code>unsigned</html:code> int, <html:a
                                        href="qtglobal.html#ulong-typedef">ulong</html:a> for
                                        <html:code>unsigned</html:code> long and <html:a
                                        href="qtglobal.html#ushort-typedef">ushort</html:a> for
                                        <html:code>unsigned</html:code> short.</html:p>
                                <html:p>Finally, the <html:a href="qtglobal.html#QtMsgType-enum"
                                        >QtMsgType</html:a> definition identifies the various
                                    messages that can be generated and sent to a Qt message handler;
                                        <html:a href="qtglobal.html#QtMessageHandler-typedef"
                                        >QtMessageHandler</html:a> is a type definition for a
                                    pointer to a function with the signature <html:code>void
                                        myMessageHandler(QtMsgType, const QMessageLogContext &amp;,
                                        const char *)</html:code>. <html:a
                                        href="qmessagelogcontext.html">QMessageLogContext</html:a>
                                    class contains the line, file, and function the message was
                                    logged at. This information is created by the <html:a
                                        href="qmessagelogger.html">QMessageLogger</html:a>
                                    class.</html:p>
                                <html:a name="functions"></html:a>
                                <html:h2 id="functions">Functions</html:h2>
                                <html:p>The &lt;QtGlobal&gt; header file contains several functions
                                    comparing and adjusting an object's value. These functions take
                                    a template type as argument: You can retrieve the absolute value
                                    of an object using the <html:a href="qtglobal.html#qAbsx"
                                        >qAbs</html:a>() function, and you can bound a given
                                    object's value by given minimum and maximum values using the
                                        <html:a href="qtglobal.html#qBound">qBound</html:a>()
                                    function. You can retrieve the minimum and maximum of two given
                                    objects using <html:a href="qtglobal.html#qMinx">qMin</html:a>()
                                    and <html:a href="qtglobal.html#qMaxx">qMax</html:a>()
                                    respectively. All these functions return a corresponding
                                    template type; the template types can be replaced by any other
                                    type.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type">int</html:span>
                                    myValue <html:span class="operator">=</html:span>
                                    <html:span class="number">10</html:span>; <html:span
                                        class="type">int</html:span> minValue <html:span
                                        class="operator">=</html:span>
                                    <html:span class="number">2</html:span>; <html:span class="type"
                                        >int</html:span> maxValue <html:span class="operator"
                                        >=</html:span>
                                    <html:span class="number">6</html:span>; <html:span class="type"
                                        >int</html:span> boundedValue <html:span class="operator"
                                        >=</html:span>
                                    <html:a href="qtglobal.html#qBound"
                                        >qBound</html:a>(minValue<html:span class="operator"
                                        >,</html:span> myValue<html:span class="operator"
                                        >,</html:span> maxValue); <html:span class="comment">//
                                        boundedValue == 6</html:span></html:pre>
                                <html:p>&lt;QtGlobal&gt; also contains functions that generate
                                    messages from the given string argument: <html:a
                                        href="qtglobal.html#qCritical">qCritical</html:a>(), <html:a
                                        href="qtglobal.html#qDebug">qDebug</html:a>(), <html:a
                                        href="qtglobal.html#qFatal">qFatal</html:a>() and <html:a
                                        href="qtglobal.html#qWarning">qWarning</html:a>(). These
                                    functions call the message handler with the given
                                    message.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="keyword">if</html:span>
                                        (<html:span class="operator">!</html:span>driver()<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>isOpen() <html:span class="operator"
                                        >|</html:span><html:span class="operator">|</html:span>
                                        driver()<html:span class="operator">-</html:span><html:span
                                        class="operator">&gt;</html:span>isOpenError()) { <html:a
                                        href="qtglobal.html#qWarning">qWarning</html:a>(<html:span
                                        class="string">"QSqlQuery::exec: database not
                                        open"</html:span>); <html:span class="keyword"
                                        >return</html:span>
                                    <html:span class="keyword">false</html:span>; }</html:pre>
                                <html:p>The remaining functions are <html:a
                                        href="qtglobal.html#qRound">qRound</html:a>() and <html:a
                                        href="qtglobal.html#qRound64">qRound64</html:a>(), which
                                    both accept a <html:a href="qtglobal.html#qreal-typedef"
                                        >qreal</html:a> value as their argument returning the value
                                    rounded up to the nearest integer and 64-bit integer
                                    respectively, the <html:a
                                        href="qtglobal.html#qInstallMessageHandler"
                                        >qInstallMessageHandler</html:a>() function which installs
                                    the given <html:a href="qtglobal.html#QtMessageHandler-typedef"
                                        >QtMessageHandler</html:a>, and the <html:a
                                        href="qtglobal.html#qVersion">qVersion</html:a>() function
                                    which returns the version number of Qt at run-time as a
                                    string.</html:p>
                                <html:a name="macros"></html:a>
                                <html:h2 id="macros">Macros</html:h2>
                                <html:p>The &lt;QtGlobal&gt; header file provides a range of macros
                                    (Q_CC_*) that are defined if the application is compiled using
                                    the specified platforms. For example, the <html:a
                                        href="qtglobal.html#Q_CC_SUN">Q_CC_SUN</html:a> macro is
                                    defined if the application is compiled using Forte Developer, or
                                    Sun Studio C++. The header file also declares a range of macros
                                    (Q_OS_*) that are defined for the specified platforms. For
                                    example, <html:a href="qtglobal.html#Q_OS_UNIX"
                                        >Q_OS_UNIX</html:a> which is defined for the Unix-based
                                    systems.</html:p>
                                <html:p>The purpose of these macros is to enable programmers to add
                                    compiler or platform specific code to their
                                    application.</html:p>
                                <html:p>The remaining macros are convenience macros for larger
                                    operations: The <html:a href="qtglobal.html#QT_TRANSLATE_NOOP"
                                        >QT_TRANSLATE_NOOP</html:a>() and <html:a
                                        href="qtglobal.html#QT_TR_NOOP">QT_TR_NOOP</html:a>() macros
                                    provide the possibility of marking text for dynamic translation,
                                    i.e. translation without changing the stored source text. The
                                        <html:a href="qtglobal.html#Q_ASSERT">Q_ASSERT</html:a>()
                                    and <html:a href="qtglobal.html#Q_ASSERT_X"
                                    >Q_ASSERT_X</html:a>() enables warning messages of various level
                                    of refinement. The <html:a href="qtglobal.html#Q_FOREACH"
                                        >Q_FOREACH</html:a>() and <html:a
                                        href="qtglobal.html#foreach">foreach</html:a>() macros
                                    implement Qt's foreach loop.</html:p>
                                <html:p>The <html:a href="qtglobal.html#Q_INT64_C"
                                        >Q_INT64_C</html:a>() and <html:a
                                        href="qtglobal.html#Q_UINT64_C">Q_UINT64_C</html:a>() macros
                                    wrap signed and unsigned 64-bit integer literals in a
                                    platform-independent way. The <html:a
                                        href="qtglobal.html#Q_CHECK_PTRx">Q_CHECK_PTR</html:a>()
                                    macro prints a warning containing the source code's file name
                                    and line number, saying that the program ran out of memory, if
                                    the pointer is 0. The <html:a href="qtglobal.html#qPrintable"
                                        >qPrintable</html:a>() and <html:a
                                        href="qtglobal.html#qUtf8Printable"
                                    >qUtf8Printable</html:a>() macros represent an easy way of
                                    printing text.</html:p>
                                <html:p>Finally, the <html:a href="qtglobal.html#QT_POINTER_SIZE"
                                        >QT_POINTER_SIZE</html:a> macro expands to the size of a
                                    pointer in bytes, and the <html:a
                                        href="qtglobal.html#QT_VERSION">QT_VERSION</html:a> and
                                        <html:a href="qtglobal.html#QT_VERSION_STR"
                                        >QT_VERSION_STR</html:a> macros expand to a numeric value or
                                    a string, respectively, specifying Qt's version number, i.e the
                                    version the application is compiled against.</html:p>
                            </html:div>
                            <html:p><html:b>See also </html:b><html:a href="qtalgorithms.html"
                                    >&lt;QtAlgorithms&gt;</html:a> and <html:a href="qsysinfo.html"
                                    >QSysInfo</html:a>.</html:p>
                            <!-- @@@<QtGlobal> -->
                            <html:h2>Type Documentation</html:h2>
                            <!-- $$$QFunctionPointer -->
                            <html:h3 class="fn" id="QFunctionPointer-typedef"><html:a
                                    name="QFunctionPointer-typedef"></html:a>typedef <html:span
                                    class="name">QFunctionPointer</html:span></html:h3>
                            <html:p>This is a typedef for <html:code>void (*)()</html:code>, a
                                pointer to a function that takes no arguments and returns
                                void.</html:p>
                            <!-- @@@QFunctionPointer -->
                            <!-- $$$QtMessageHandler -->
                            <html:h3 class="fn" id="QtMessageHandler-typedef"><html:a
                                    name="QtMessageHandler-typedef"></html:a>typedef <html:span
                                    class="name">QtMessageHandler</html:span></html:h3>
                            <html:p>This is a typedef for a pointer to a function with the following
                                signature:</html:p>
                            <html:pre class="cpp"><html:span class="type">void</html:span>
                                    myMessageHandler(<html:span class="type"><html:a
                                        href="qtglobal.html#QtMsgType-enum"
                                    >QtMsgType</html:a></html:span><html:span class="operator"
                                    >,</html:span>
                                <html:span class="keyword">const</html:span>
                                <html:span class="type"><html:a href="qmessagelogcontext.html"
                                        >QMessageLogContext</html:a></html:span>
                                <html:span class="operator">&amp;</html:span><html:span
                                    class="operator">,</html:span>
                                <html:span class="keyword">const</html:span>
                                <html:span class="type"><html:a href="qstring.html"
                                    >QString</html:a></html:span>
                                <html:span class="operator">&amp;</html:span>);</html:pre>
                            <html:p>This typedef was introduced in Qt 5.0.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#QtMsgType-enum">QtMsgType</html:a> and
                                    <html:a href="qtglobal.html#qInstallMessageHandler"
                                    >qInstallMessageHandler</html:a>().</html:p>
                            <!-- @@@QtMessageHandler -->
                            <!-- $$$QtMsgType$$$QtDebugMsg$$$QtWarningMsg$$$QtCriticalMsg$$$QtFatalMsg$$$QtSystemMsg -->
                            <html:h3 class="fn" id="QtMsgType-enum"><html:a name="QtMsgType-enum"
                                ></html:a>enum <html:span class="name"
                                >QtMsgType</html:span></html:h3>
                            <html:p>This enum describes the messages that can be sent to a message
                                handler (<html:a href="qtglobal.html#QtMessageHandler-typedef"
                                    >QtMessageHandler</html:a>). You can use the enum to identify
                                and associate the various message types with the appropriate
                                actions.</html:p>
                            <html:div class="table"><html:table class="valuelist">
                                    <html:tbody>
                                        <html:tr class="odd" valign="top">
                                            <html:th class="tblConst">Constant</html:th>
                                            <html:th class="tblval">Value</html:th>
                                            <html:th class="tbldscr">Description</html:th>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="topAlign"
                                                  ><html:code>QtDebugMsg</html:code></html:td>
                                            <html:td class="topAlign"
                                                ><html:code>0</html:code></html:td>
                                            <html:td class="topAlign">A message generated by the
                                                  <html:a href="qtglobal.html#qDebug"
                                                  >qDebug</html:a>() function.</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="topAlign"
                                                  ><html:code>QtWarningMsg</html:code></html:td>
                                            <html:td class="topAlign"
                                                ><html:code>1</html:code></html:td>
                                            <html:td class="topAlign">A message generated by the
                                                  <html:a href="qtglobal.html#qWarning"
                                                  >qWarning</html:a>() function.</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="topAlign"
                                                  ><html:code>QtCriticalMsg</html:code></html:td>
                                            <html:td class="topAlign"
                                                ><html:code>2</html:code></html:td>
                                            <html:td class="topAlign">A message generated by the
                                                  <html:a href="qtglobal.html#qCritical"
                                                  >qCritical</html:a>() function.</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="topAlign"
                                                  ><html:code>QtFatalMsg</html:code></html:td>
                                            <html:td class="topAlign"
                                                ><html:code>3</html:code></html:td>
                                            <html:td class="topAlign">A message generated by the
                                                  <html:a href="qtglobal.html#qFatal"
                                                  >qFatal</html:a>() function.</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="topAlign"
                                                  ><html:code>QtSystemMsg</html:code></html:td>
                                            <html:td class="topAlign"
                                                  ><html:code>QtCriticalMsg</html:code></html:td>
                                            <html:td class="topAlign">&#160;</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#QtMessageHandler-typedef"
                                    >QtMessageHandler</html:a> and <html:a
                                    href="qtglobal.html#qInstallMessageHandler"
                                    >qInstallMessageHandler</html:a>().</html:p>
                            <!-- @@@QtMsgType -->
                            <!-- $$$qint8 -->
                            <html:h3 class="fn" id="qint8-typedef"><html:a name="qint8-typedef"
                                ></html:a>typedef <html:span class="name"
                                >qint8</html:span></html:h3>
                            <html:p>Typedef for <html:code>signed char</html:code>. This type is
                                guaranteed to be 8-bit on all platforms supported by Qt.</html:p>
                            <!-- @@@qint8 -->
                            <!-- $$$qint16 -->
                            <html:h3 class="fn" id="qint16-typedef"><html:a name="qint16-typedef"
                                ></html:a>typedef <html:span class="name"
                                >qint16</html:span></html:h3>
                            <html:p>Typedef for <html:code>signed short</html:code>. This type is
                                guaranteed to be 16-bit on all platforms supported by Qt.</html:p>
                            <!-- @@@qint16 -->
                            <!-- $$$qint32 -->
                            <html:h3 class="fn" id="qint32-typedef"><html:a name="qint32-typedef"
                                ></html:a>typedef <html:span class="name"
                                >qint32</html:span></html:h3>
                            <html:p>Typedef for <html:code>signed int</html:code>. This type is
                                guaranteed to be 32-bit on all platforms supported by Qt.</html:p>
                            <!-- @@@qint32 -->
                            <!-- $$$qint64 -->
                            <html:h3 class="fn" id="qint64-typedef"><html:a name="qint64-typedef"
                                ></html:a>typedef <html:span class="name"
                                >qint64</html:span></html:h3>
                            <html:p>Typedef for <html:code>long long int</html:code>
                                    (<html:code>__int64</html:code> on Windows). This type is
                                guaranteed to be 64-bit on all platforms supported by Qt.</html:p>
                            <html:p>Literals of this type can be created using the <html:a
                                    href="qtglobal.html#Q_INT64_C">Q_INT64_C</html:a>()
                                macro:</html:p>
                            <html:pre class="cpp"><html:span class="type">qint64</html:span> value
                                    <html:span class="operator">=</html:span>
                                <html:a href="qtglobal.html#Q_INT64_C">Q_INT64_C</html:a>(<html:span
                                    class="number">932838457459459</html:span>);</html:pre>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#Q_INT64_C"
                                    >Q_INT64_C</html:a>(), <html:a
                                    href="qtglobal.html#quint64-typedef">quint64</html:a>, and
                                    <html:a href="qtglobal.html#qlonglong-typedef"
                                    >qlonglong</html:a>.</html:p>
                            <!-- @@@qint64 -->
                            <!-- $$$qintptr -->
                            <html:h3 class="fn" id="qintptr-typedef"><html:a name="qintptr-typedef"
                                ></html:a>typedef <html:span class="name"
                                >qintptr</html:span></html:h3>
                            <html:p>Integral type for representing pointers in a signed integer
                                (useful for hashing, etc.).</html:p>
                            <html:p>Typedef for either qint32 or qint64. This type is guaranteed to
                                be the same size as a pointer on all platforms supported by Qt. On a
                                system with 32-bit pointers, qintptr is a typedef for qint32; on a
                                system with 64-bit pointers, qintptr is a typedef for
                                qint64.</html:p>
                            <html:p>Note that qintptr is signed. Use quintptr for unsigned
                                values.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#qptrdiff-typedef">qptrdiff</html:a>, <html:a
                                    href="qtglobal.html#qint32-typedef">qint32</html:a>, and <html:a
                                    href="qtglobal.html#qint64-typedef">qint64</html:a>.</html:p>
                            <!-- @@@qintptr -->
                            <!-- $$$qlonglong -->
                            <html:h3 class="fn" id="qlonglong-typedef"><html:a
                                    name="qlonglong-typedef"></html:a>typedef <html:span
                                    class="name">qlonglong</html:span></html:h3>
                            <html:p>Typedef for <html:code>long long int</html:code>
                                    (<html:code>__int64</html:code> on Windows). This is the same as
                                    <html:a href="qtglobal.html#qint64-typedef"
                                >qint64</html:a>.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#qulonglong-typedef">qulonglong</html:a> and
                                    <html:a href="qtglobal.html#qint64-typedef"
                                >qint64</html:a>.</html:p>
                            <!-- @@@qlonglong -->
                            <!-- $$$qptrdiff -->
                            <html:h3 class="fn" id="qptrdiff-typedef"><html:a
                                    name="qptrdiff-typedef"></html:a>typedef <html:span class="name"
                                    >qptrdiff</html:span></html:h3>
                            <html:p>Integral type for representing pointer differences.</html:p>
                            <html:p>Typedef for either qint32 or qint64. This type is guaranteed to
                                be the same size as a pointer on all platforms supported by Qt. On a
                                system with 32-bit pointers, quintptr is a typedef for quint32; on a
                                system with 64-bit pointers, quintptr is a typedef for
                                quint64.</html:p>
                            <html:p>Note that qptrdiff is signed. Use quintptr for unsigned
                                values.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#quintptr-typedef">quintptr</html:a>, <html:a
                                    href="qtglobal.html#qint32-typedef">qint32</html:a>, and <html:a
                                    href="qtglobal.html#qint64-typedef">qint64</html:a>.</html:p>
                            <!-- @@@qptrdiff -->
                            <!-- $$$qreal -->
                            <html:h3 class="fn" id="qreal-typedef"><html:a name="qreal-typedef"
                                ></html:a>typedef <html:span class="name"
                                >qreal</html:span></html:h3>
                            <html:p>Typedef for <html:code>double</html:code> unless Qt is
                                configured with the <html:code>-qreal float</html:code>
                                option.</html:p>
                            <!-- @@@qreal -->
                            <!-- $$$quint8 -->
                            <html:h3 class="fn" id="quint8-typedef"><html:a name="quint8-typedef"
                                ></html:a>typedef <html:span class="name"
                                >quint8</html:span></html:h3>
                            <html:p>Typedef for <html:code>unsigned char</html:code>. This type is
                                guaranteed to be 8-bit on all platforms supported by Qt.</html:p>
                            <!-- @@@quint8 -->
                            <!-- $$$quint16 -->
                            <html:h3 class="fn" id="quint16-typedef"><html:a name="quint16-typedef"
                                ></html:a>typedef <html:span class="name"
                                >quint16</html:span></html:h3>
                            <html:p>Typedef for <html:code>unsigned short</html:code>. This type is
                                guaranteed to be 16-bit on all platforms supported by Qt.</html:p>
                            <!-- @@@quint16 -->
                            <!-- $$$quint32 -->
                            <html:h3 class="fn" id="quint32-typedef"><html:a name="quint32-typedef"
                                ></html:a>typedef <html:span class="name"
                                >quint32</html:span></html:h3>
                            <html:p>Typedef for <html:code>unsigned int</html:code>. This type is
                                guaranteed to be 32-bit on all platforms supported by Qt.</html:p>
                            <!-- @@@quint32 -->
                            <!-- $$$quint64 -->
                            <html:h3 class="fn" id="quint64-typedef"><html:a name="quint64-typedef"
                                ></html:a>typedef <html:span class="name"
                                >quint64</html:span></html:h3>
                            <html:p>Typedef for <html:code>unsigned long long int</html:code>
                                    (<html:code>unsigned __int64</html:code> on Windows). This type
                                is guaranteed to be 64-bit on all platforms supported by
                                Qt.</html:p>
                            <html:p>Literals of this type can be created using the <html:a
                                    href="qtglobal.html#Q_UINT64_C">Q_UINT64_C</html:a>()
                                macro:</html:p>
                            <html:pre class="cpp"><html:span class="type">quint64</html:span> value
                                    <html:span class="operator">=</html:span>
                                <html:a href="qtglobal.html#Q_UINT64_C"
                                    >Q_UINT64_C</html:a>(<html:span class="number"
                                    >932838457459459</html:span>);</html:pre>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#Q_UINT64_C">Q_UINT64_C</html:a>(), <html:a
                                    href="qtglobal.html#qint64-typedef">qint64</html:a>, and <html:a
                                    href="qtglobal.html#qulonglong-typedef"
                                >qulonglong</html:a>.</html:p>
                            <!-- @@@quint64 -->
                            <!-- $$$quintptr -->
                            <html:h3 class="fn" id="quintptr-typedef"><html:a
                                    name="quintptr-typedef"></html:a>typedef <html:span class="name"
                                    >quintptr</html:span></html:h3>
                            <html:p>Integral type for representing pointers in an unsigned integer
                                (useful for hashing, etc.).</html:p>
                            <html:p>Typedef for either quint32 or quint64. This type is guaranteed
                                to be the same size as a pointer on all platforms supported by Qt.
                                On a system with 32-bit pointers, quintptr is a typedef for quint32;
                                on a system with 64-bit pointers, quintptr is a typedef for
                                quint64.</html:p>
                            <html:p>Note that quintptr is unsigned. Use qptrdiff for signed
                                values.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#qptrdiff-typedef">qptrdiff</html:a>, <html:a
                                    href="qtglobal.html#quint32-typedef">quint32</html:a>, and
                                    <html:a href="qtglobal.html#quint64-typedef"
                                >quint64</html:a>.</html:p>
                            <!-- @@@quintptr -->
                            <!-- $$$qulonglong -->
                            <html:h3 class="fn" id="qulonglong-typedef"><html:a
                                    name="qulonglong-typedef"></html:a>typedef <html:span
                                    class="name">qulonglong</html:span></html:h3>
                            <html:p>Typedef for <html:code>unsigned long long int</html:code>
                                    (<html:code>unsigned __int64</html:code> on Windows). This is
                                the same as <html:a href="qtglobal.html#quint64-typedef"
                                    >quint64</html:a>.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#quint64-typedef">quint64</html:a> and
                                    <html:a href="qtglobal.html#qlonglong-typedef"
                                    >qlonglong</html:a>.</html:p>
                            <!-- @@@qulonglong -->
                            <!-- $$$uchar -->
                            <html:h3 class="fn" id="uchar-typedef"><html:a name="uchar-typedef"
                                ></html:a>typedef <html:span class="name"
                                >uchar</html:span></html:h3>
                            <html:p>Convenience typedef for <html:code>unsigned
                                char</html:code>.</html:p>
                            <!-- @@@uchar -->
                            <!-- $$$uint -->
                            <html:h3 class="fn" id="uint-typedef"><html:a name="uint-typedef"
                                ></html:a>typedef <html:span class="name">uint</html:span></html:h3>
                            <html:p>Convenience typedef for <html:code>unsigned
                                int</html:code>.</html:p>
                            <!-- @@@uint -->
                            <!-- $$$ulong -->
                            <html:h3 class="fn" id="ulong-typedef"><html:a name="ulong-typedef"
                                ></html:a>typedef <html:span class="name"
                                >ulong</html:span></html:h3>
                            <html:p>Convenience typedef for <html:code>unsigned
                                long</html:code>.</html:p>
                            <!-- @@@ulong -->
                            <!-- $$$ushort -->
                            <html:h3 class="fn" id="ushort-typedef"><html:a name="ushort-typedef"
                                ></html:a>typedef <html:span class="name"
                                >ushort</html:span></html:h3>
                            <html:p>Convenience typedef for <html:code>unsigned
                                short</html:code>.</html:p>
                            <!-- @@@ushort -->
                            <html:h2>Function Documentation</html:h2>
                            <!-- $$$qAbs[overload1]$$$qAbsconstT& -->
                            <html:h3 class="fn" id="qAbsx"><html:a name="qAbsx"></html:a><html:span
                                    class="type">T</html:span>
                                <html:span class="name">qAbs</html:span>(const <html:span
                                    class="type">T</html:span> &amp;<html:i>
                                value</html:i>)</html:h3>
                            <html:p>Compares <html:i>value</html:i> to the 0 of type T and returns
                                the absolute value. Thus if T is <html:i>double</html:i>, then
                                    <html:i>value</html:i> is compared to <html:i>(double)
                                    0</html:i>.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="type">int</html:span>
                                absoluteValue; <html:span class="type">int</html:span> myValue
                                    <html:span class="operator">=</html:span>
                                <html:span class="operator">-</html:span><html:span class="number"
                                    >4</html:span>; absoluteValue <html:span class="operator"
                                    >=</html:span> qAbs(myValue); <html:span class="comment">//
                                    absoluteValue == 4</html:span></html:pre>
                            <!-- @@@qAbs -->
                            <!-- $$$qBound[overload1]$$$qBoundconstT&constT&constT& -->
                            <html:h3 class="fn" id="qBound"><html:a name="qBound"></html:a>const
                                    <html:span class="type">T</html:span> &amp; <html:span
                                    class="name">qBound</html:span>(const <html:span class="type"
                                    >T</html:span> &amp;<html:i> min</html:i>, const <html:span
                                    class="type">T</html:span> &amp;<html:i> value</html:i>, const
                                    <html:span class="type">T</html:span> &amp;<html:i>
                                max</html:i>)</html:h3>
                            <html:p>Returns <html:i>value</html:i> bounded by <html:i>min</html:i>
                                and <html:i>max</html:i>. This is equivalent to <html:a
                                    href="qtglobal.html#qMaxx">qMax</html:a>(<html:i>min</html:i>,
                                    <html:a href="qtglobal.html#qMinx"
                                    >qMin</html:a>(<html:i>value</html:i>,
                                <html:i>max</html:i>)).</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="type">int</html:span> myValue
                                    <html:span class="operator">=</html:span>
                                <html:span class="number">10</html:span>; <html:span class="type"
                                    >int</html:span> minValue <html:span class="operator"
                                    >=</html:span>
                                <html:span class="number">2</html:span>; <html:span class="type"
                                    >int</html:span> maxValue <html:span class="operator"
                                    >=</html:span>
                                <html:span class="number">6</html:span>; <html:span class="type"
                                    >int</html:span> boundedValue <html:span class="operator"
                                    >=</html:span> qBound(minValue<html:span class="operator"
                                    >,</html:span> myValue<html:span class="operator">,</html:span>
                                maxValue); <html:span class="comment">// boundedValue ==
                                    6</html:span></html:pre>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#qMinx"
                                    >qMin</html:a>() and <html:a href="qtglobal.html#qMaxx"
                                    >qMax</html:a>().</html:p>
                            <!-- @@@qBound -->
                            <!-- $$$qEnvironmentVariableIsEmpty[overload1]$$$qEnvironmentVariableIsEmptyconstchar* -->
                            <html:h3 class="fn" id="qEnvironmentVariableIsEmpty"><html:a
                                    name="qEnvironmentVariableIsEmpty"></html:a><html:span
                                    class="type">bool</html:span>
                                <html:span class="name"
                                >qEnvironmentVariableIsEmpty</html:span>(const <html:span
                                    class="type">char</html:span> *<html:i>
                                varName</html:i>)</html:h3>
                            <html:p>Returns whether the environment variable
                                    <html:i>varName</html:i> is empty.</html:p>
                            <html:p>Equivalent to</html:p>
                            <html:pre class="cpp"><html:a href="qtglobal.html#qgetenv"
                                    >qgetenv</html:a>(varName)<html:span class="operator"
                                    >.</html:span>isEmpty()</html:pre>
                            <html:p>except that it's potentially much faster, and can't throw
                                exceptions.</html:p>
                            <html:p>This function was introduced in Qt 5.1.</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#qgetenv"
                                    >qgetenv</html:a>() and <html:a
                                    href="qtglobal.html#qEnvironmentVariableIsSet"
                                    >qEnvironmentVariableIsSet</html:a>().</html:p>
                            <!-- @@@qEnvironmentVariableIsEmpty -->
                            <!-- $$$qEnvironmentVariableIsSet[overload1]$$$qEnvironmentVariableIsSetconstchar* -->
                            <html:h3 class="fn" id="qEnvironmentVariableIsSet"><html:a
                                    name="qEnvironmentVariableIsSet"></html:a><html:span
                                    class="type">bool</html:span>
                                <html:span class="name">qEnvironmentVariableIsSet</html:span>(const
                                    <html:span class="type">char</html:span> *<html:i>
                                    varName</html:i>)</html:h3>
                            <html:p>Returns whether the environment variable
                                    <html:i>varName</html:i> is set.</html:p>
                            <html:p>Equivalent to</html:p>
                            <html:pre class="cpp"><html:span class="operator">!</html:span><html:a
                                    href="qtglobal.html#qgetenv">qgetenv</html:a>(varName)<html:span
                                    class="operator">.</html:span>isNull()</html:pre>
                            <html:p>except that it's potentially much faster, and can't throw
                                exceptions.</html:p>
                            <html:p>This function was introduced in Qt 5.1.</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#qgetenv"
                                    >qgetenv</html:a>() and <html:a
                                    href="qtglobal.html#qEnvironmentVariableIsEmpty"
                                    >qEnvironmentVariableIsEmpty</html:a>().</html:p>
                            <!-- @@@qEnvironmentVariableIsSet -->
                            <!-- $$$qFloatDistance[overload1]$$$qFloatDistancefloatfloat -->
                            <html:h3 class="fn" id="qFloatDistance"><html:a name="qFloatDistance"
                                    ></html:a><html:span class="type"><html:a
                                        href="qtglobal.html#quint32-typedef"
                                    >quint32</html:a></html:span>
                                <html:span class="name">qFloatDistance</html:span>(<html:span
                                    class="type">float</html:span><html:i> a</html:i>, <html:span
                                    class="type">float</html:span><html:i> b</html:i>)</html:h3>
                            <html:p>Returns the number of representable floating-point numbers
                                between <html:i>a</html:i> and <html:i>b</html:i>.</html:p>
                            <html:p>This function provides an alternative way of doing approximated
                                comparisons of floating-point numbers similar to <html:a
                                    href="qtglobal.html#qFuzzyCompare">qFuzzyCompare</html:a>().
                                However, it returns the distance between two numbers, which gives
                                the caller a possibility to choose the accepted error. Errors are
                                relative, so for instance the distance between 1.0E-5 and 1.00001E-5
                                will give 110, while the distance between 1.0E36 and 1.00001E36 will
                                give 127.</html:p>
                            <html:p>This function is useful if a floating point comparison requires
                                a certain precision. Therefore, if <html:i>a</html:i> and
                                    <html:i>b</html:i> are equal it will return 0. The maximum value
                                it will return for 32-bit floating point numbers is 4,278,190,078.
                                This is the distance between <html:code>-FLT_MAX</html:code> and
                                    <html:code>+FLT_MAX</html:code>.</html:p>
                            <html:p>The function does not give meaningful results if any of the
                                arguments are <html:code>Infinite</html:code> or
                                    <html:code>NaN</html:code>. You can check for this by calling
                                    <html:a href="qtglobal.html#qIsFinite"
                                >qIsFinite</html:a>().</html:p>
                            <html:p>The return value can be considered as the "error", so if you for
                                instance want to compare two 32-bit floating point numbers and all
                                you need is an approximated 24-bit precision, you can use this
                                function like this:</html:p>
                            <html:pre class="cpp"><html:span class="keyword">if</html:span>
                                    (qFloatDistance(a<html:span class="operator">,</html:span> b)
                                    <html:span class="operator">&lt;</html:span> (<html:span
                                    class="number">1</html:span>
                                <html:span class="operator">&lt;</html:span><html:span
                                    class="operator">&lt;</html:span>
                                <html:span class="number">7</html:span>)) { <html:span
                                    class="comment">// The last 7 bits are not</html:span>
                                <html:span class="comment">// significant</html:span>
                                <html:span class="comment">// precise enough</html:span>
                                }</html:pre>
                            <html:p>This function was introduced in Qt 5.2.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#qFuzzyCompare"
                                >qFuzzyCompare</html:a>().</html:p>
                            <!-- @@@qFloatDistance -->
                            <!-- $$$qFloatDistance$$$qFloatDistancedoubledouble -->
                            <html:h3 class="fn" id="qFloatDistance-2"><html:a
                                    name="qFloatDistance-2"></html:a><html:span class="type"><html:a
                                        href="qtglobal.html#quint64-typedef"
                                    >quint64</html:a></html:span>
                                <html:span class="name">qFloatDistance</html:span>(<html:span
                                    class="type">double</html:span><html:i> a</html:i>, <html:span
                                    class="type">double</html:span><html:i> b</html:i>)</html:h3>
                            <html:p>Returns the number of representable floating-point numbers
                                between <html:i>a</html:i> and <html:i>b</html:i>.</html:p>
                            <html:p>This function serves the same purpose as
                                    <html:code>qFloatDistance(float, float)</html:code>, but returns
                                the distance between two <html:code>double</html:code> numbers.
                                Since the range is larger than for two <html:code>float</html:code>
                                numbers (<html:code>[-DBL_MAX,DBL_MAX]</html:code>), the return type
                                is quint64.</html:p>
                            <html:p>This function was introduced in Qt 5.2.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#qFuzzyCompare"
                                >qFuzzyCompare</html:a>().</html:p>
                            <!-- @@@qFloatDistance -->
                            <!-- $$$qFormatLogMessage[overload1]$$$qFormatLogMessageQtMsgTypeconstQMessageLogContext&constQString& -->
                            <html:h3 class="fn" id="qFormatLogMessage"><html:a
                                    name="qFormatLogMessage"></html:a><html:span class="type"
                                        ><html:a href="qstring.html">QString</html:a></html:span>
                                <html:span class="name">qFormatLogMessage</html:span>(<html:span
                                    class="type"><html:a href="qtglobal.html#QtMsgType-enum"
                                        >QtMsgType</html:a></html:span><html:i> type</html:i>, const
                                    <html:span class="type"><html:a href="qmessagelogcontext.html"
                                        >QMessageLogContext</html:a></html:span> &amp;<html:i>
                                    context</html:i>, const <html:span class="type"><html:a
                                        href="qstring.html">QString</html:a></html:span>
                                    &amp;<html:i> str</html:i>)</html:h3>
                            <html:p>Generates a formatted string out of the <html:i>type</html:i>,
                                    <html:i>context</html:i>, <html:i>str</html:i>
                                arguments.</html:p>
                            <html:p>qFormatLogMessage returns a <html:a href="qstring.html"
                                    >QString</html:a> that is formatted according to the current
                                message pattern. It can be used by custom message handlers to format
                                output similar to Qt's default message handler.</html:p>
                            <html:p>The function is thread-safe.</html:p>
                            <html:p>This function was introduced in Qt 5.4.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#qInstallMessageHandler"
                                    >qInstallMessageHandler</html:a>() and <html:a
                                    href="qtglobal.html#qSetMessagePattern"
                                    >qSetMessagePattern</html:a>().</html:p>
                            <!-- @@@qFormatLogMessage -->
                            <!-- $$$qFuzzyCompare[overload1]$$$qFuzzyComparedoubledouble -->
                            <html:h3 class="fn" id="qFuzzyCompare"><html:a name="qFuzzyCompare"
                                    ></html:a><html:code>[static] </html:code><html:span
                                    class="type">bool</html:span>
                                <html:span class="name">qFuzzyCompare</html:span>(<html:span
                                    class="type">double</html:span><html:i> p1</html:i>, <html:span
                                    class="type">double</html:span><html:i> p2</html:i>)</html:h3>
                            <html:p>Compares the floating point value <html:i>p1</html:i> and
                                    <html:i>p2</html:i> and returns <html:code>true</html:code> if
                                they are considered equal, otherwise
                                <html:code>false</html:code>.</html:p>
                            <html:p>Note that comparing values where either <html:i>p1</html:i> or
                                    <html:i>p2</html:i> is 0.0 will not work. The solution to this
                                is to compare against values greater than or equal to 1.0.</html:p>
                            <html:pre class="cpp">
                                <html:span class="comment">// Instead of comparing with
                                    0.0</html:span> qFuzzyCompare(<html:span class="number"
                                    >0.0</html:span><html:span class="operator"
                                    >,</html:span><html:span class="number"
                                    >1.0e</html:span><html:span class="operator"
                                    >-</html:span><html:span class="number">200</html:span>);
                                    <html:span class="comment">// This will return false</html:span>
                                <html:span class="comment">// Compare adding 1 to both values will
                                    fix the problem</html:span> qFuzzyCompare(<html:span
                                    class="number">1</html:span>
                                <html:span class="operator">+</html:span>
                                <html:span class="number">0.0</html:span><html:span class="operator"
                                    >,</html:span>
                                <html:span class="number">1</html:span>
                                <html:span class="operator">+</html:span>
                                <html:span class="number">1.0e</html:span><html:span
                                    class="operator">-</html:span><html:span class="number"
                                    >200</html:span>); <html:span class="comment">// This will
                                    return true</html:span></html:pre>
                            <html:p>The two numbers are compared in a relative way, where the
                                exactness is stronger the smaller the numbers are.</html:p>
                            <html:p><html:b>Note:</html:b> This function is <html:a
                                    href="qtdoc/threads-reentrancy.html#thread-safe"
                                    >thread-safe</html:a>.</html:p>
                            <html:p>This function was introduced in Qt 4.4.</html:p>
                            <!-- @@@qFuzzyCompare -->
                            <!-- $$$qFuzzyCompare$$$qFuzzyComparefloatfloat -->
                            <html:h3 class="fn" id="qFuzzyCompare-3"><html:a name="qFuzzyCompare-3"
                                    ></html:a><html:code>[static] </html:code><html:span
                                    class="type">bool</html:span>
                                <html:span class="name">qFuzzyCompare</html:span>(<html:span
                                    class="type">float</html:span><html:i> p1</html:i>, <html:span
                                    class="type">float</html:span><html:i> p2</html:i>)</html:h3>
                            <html:p>Compares the floating point value <html:i>p1</html:i> and
                                    <html:i>p2</html:i> and returns <html:code>true</html:code> if
                                they are considered equal, otherwise
                                <html:code>false</html:code>.</html:p>
                            <html:p>The two numbers are compared in a relative way, where the
                                exactness is stronger the smaller the numbers are.</html:p>
                            <html:p><html:b>Note:</html:b> This function is <html:a
                                    href="qtdoc/threads-reentrancy.html#thread-safe"
                                    >thread-safe</html:a>.</html:p>
                            <html:p>This function was introduced in Qt 4.4.</html:p>
                            <!-- @@@qFuzzyCompare -->
                            <!-- $$$qInf[overload1]$$$qInf -->
                            <html:h3 class="fn" id="qInf"><html:a name="qInf"></html:a><html:span
                                    class="type">double</html:span>
                                <html:span class="name">qInf</html:span>()</html:h3>
                            <html:p>Returns the bit pattern for an infinite number as a
                                double.</html:p>
                            <!-- @@@qInf -->
                            <!-- $$$qInstallMessageHandler[overload1]$$$qInstallMessageHandlerQtMessageHandler -->
                            <html:h3 class="fn" id="qInstallMessageHandler"><html:a
                                    name="qInstallMessageHandler"></html:a><html:span class="type"
                                        ><html:a href="qtglobal.html#QtMessageHandler-typedef"
                                        >QtMessageHandler</html:a></html:span>
                                <html:span class="name"
                                    >qInstallMessageHandler</html:span>(<html:span class="type"
                                        ><html:a href="qtglobal.html#QtMessageHandler-typedef"
                                        >QtMessageHandler</html:a></html:span><html:i>
                                    handler</html:i>)</html:h3>
                            <html:p>Installs a Qt message <html:i>handler</html:i> which has been
                                defined previously. Returns a pointer to the previous message
                                handler.</html:p>
                            <html:p>The message handler is a function that prints out debug
                                messages, warnings, critical and fatal error messages. The Qt
                                library (debug mode) contains hundreds of warning messages that are
                                printed when internal errors (usually invalid function arguments)
                                occur. Qt built in release mode also contains such warnings unless
                                QT_NO_WARNING_OUTPUT and/or QT_NO_DEBUG_OUTPUT have been set during
                                compilation. If you implement your own message handler, you get
                                total control of these messages.</html:p>
                            <html:p>The default message handler prints the message to the standard
                                output under X11 or to the debugger under Windows. If it is a fatal
                                message, the application aborts immediately.</html:p>
                            <html:p>Only one message handler can be defined, since this is usually
                                done on an application-wide basis to control debug output.</html:p>
                            <html:p>To restore the message handler, call
                                    <html:code>qInstallMessageHandler(0)</html:code>.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="preprocessor">#include
                                    &lt;qapplication.h&gt;</html:span>
                                <html:span class="preprocessor">#include &lt;stdio.h&gt;</html:span>
                                <html:span class="preprocessor">#include
                                    &lt;stdlib.h&gt;</html:span>
                                <html:span class="type">void</html:span> myMessageOutput(<html:span
                                    class="type"><html:a href="qtglobal.html#QtMsgType-enum"
                                        >QtMsgType</html:a></html:span> type<html:span
                                    class="operator">,</html:span>
                                <html:span class="keyword">const</html:span>
                                <html:span class="type"><html:a href="qmessagelogcontext.html"
                                        >QMessageLogContext</html:a></html:span>
                                <html:span class="operator">&amp;</html:span>context<html:span
                                    class="operator">,</html:span>
                                <html:span class="keyword">const</html:span>
                                <html:span class="type"><html:a href="qstring.html"
                                    >QString</html:a></html:span>
                                <html:span class="operator">&amp;</html:span>msg) { <html:span
                                    class="type"><html:a href="qbytearray.html"
                                    >QByteArray</html:a></html:span> localMsg <html:span
                                    class="operator">=</html:span> msg<html:span class="operator"
                                    >.</html:span>toLocal8Bit(); <html:span class="keyword"
                                    >switch</html:span> (type) { <html:span class="keyword"
                                    >case</html:span>
                                <html:span class="type"><html:a href="qtglobal.html#QtMsgType-enum"
                                        >QtDebugMsg</html:a></html:span>: fprintf(stderr<html:span
                                    class="operator">,</html:span>
                                <html:span class="string">"Debug: %s (%s:%u,
                                    %s)\n"</html:span><html:span class="operator">,</html:span>
                                    localMsg<html:span class="operator"
                                    >.</html:span>constData()<html:span class="operator"
                                    >,</html:span> context<html:span class="operator"
                                    >.</html:span>file<html:span class="operator">,</html:span>
                                    context<html:span class="operator">.</html:span>line<html:span
                                    class="operator">,</html:span> context<html:span
                                    class="operator">.</html:span>function); <html:span
                                    class="keyword">break</html:span>; <html:span class="keyword"
                                    >case</html:span>
                                <html:span class="type"><html:a href="qtglobal.html#QtMsgType-enum"
                                        >QtWarningMsg</html:a></html:span>: fprintf(stderr<html:span
                                    class="operator">,</html:span>
                                <html:span class="string">"Warning: %s (%s:%u,
                                    %s)\n"</html:span><html:span class="operator">,</html:span>
                                    localMsg<html:span class="operator"
                                    >.</html:span>constData()<html:span class="operator"
                                    >,</html:span> context<html:span class="operator"
                                    >.</html:span>file<html:span class="operator">,</html:span>
                                    context<html:span class="operator">.</html:span>line<html:span
                                    class="operator">,</html:span> context<html:span
                                    class="operator">.</html:span>function); <html:span
                                    class="keyword">break</html:span>; <html:span class="keyword"
                                    >case</html:span>
                                <html:span class="type"><html:a href="qtglobal.html#QtMsgType-enum"
                                        >QtCriticalMsg</html:a></html:span>:
                                    fprintf(stderr<html:span class="operator">,</html:span>
                                <html:span class="string">"Critical: %s (%s:%u,
                                    %s)\n"</html:span><html:span class="operator">,</html:span>
                                    localMsg<html:span class="operator"
                                    >.</html:span>constData()<html:span class="operator"
                                    >,</html:span> context<html:span class="operator"
                                    >.</html:span>file<html:span class="operator">,</html:span>
                                    context<html:span class="operator">.</html:span>line<html:span
                                    class="operator">,</html:span> context<html:span
                                    class="operator">.</html:span>function); <html:span
                                    class="keyword">break</html:span>; <html:span class="keyword"
                                    >case</html:span>
                                <html:span class="type"><html:a href="qtglobal.html#QtMsgType-enum"
                                        >QtFatalMsg</html:a></html:span>: fprintf(stderr<html:span
                                    class="operator">,</html:span>
                                <html:span class="string">"Fatal: %s (%s:%u,
                                    %s)\n"</html:span><html:span class="operator">,</html:span>
                                    localMsg<html:span class="operator"
                                    >.</html:span>constData()<html:span class="operator"
                                    >,</html:span> context<html:span class="operator"
                                    >.</html:span>file<html:span class="operator">,</html:span>
                                    context<html:span class="operator">.</html:span>line<html:span
                                    class="operator">,</html:span> context<html:span
                                    class="operator">.</html:span>function); abort(); } } <html:span
                                    class="type">int</html:span> main(<html:span class="type"
                                    >int</html:span> argc<html:span class="operator">,</html:span>
                                <html:span class="type">char</html:span>
                                <html:span class="operator">*</html:span><html:span class="operator"
                                    >*</html:span>argv) { qInstallMessageHandler(myMessageOutput);
                                    <html:span class="type"><html:a
                                        href="qtwidgets/qapplication.html"
                                    >QApplication</html:a></html:span> app(argc<html:span
                                    class="operator">,</html:span> argv); <html:span
                                    class="operator">.</html:span><html:span class="operator"
                                    >.</html:span><html:span class="operator">.</html:span>
                                <html:span class="keyword">return</html:span> app<html:span
                                    class="operator">.</html:span>exec(); }</html:pre>
                            <html:p>This function was introduced in Qt 5.0.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#QtMessageHandler-typedef"
                                    >QtMessageHandler</html:a>, <html:a
                                    href="qtglobal.html#QtMsgType-enum">QtMsgType</html:a>, <html:a
                                    href="qtglobal.html#qDebug">qDebug</html:a>(), <html:a
                                    href="qtglobal.html#qWarning">qWarning</html:a>(), <html:a
                                    href="qtglobal.html#qCritical">qCritical</html:a>(), <html:a
                                    href="qtglobal.html#qFatal">qFatal</html:a>(), and <html:a
                                    href="qtdoc/testing-and-debugging.html#debugging-techniques"
                                    >Debugging Techniques</html:a>.</html:p>
                            <!-- @@@qInstallMessageHandler -->
                            <!-- $$$qIsFinite[overload1]$$$qIsFinitedouble -->
                            <html:h3 class="fn" id="qIsFinite"><html:a name="qIsFinite"
                                    ></html:a><html:span class="type">bool</html:span>
                                <html:span class="name">qIsFinite</html:span>(<html:span
                                    class="type">double</html:span><html:i> d</html:i>)</html:h3>
                            <html:p>Returns <html:code>true</html:code> if the double
                                    <html:i>d</html:i> is a finite number.</html:p>
                            <!-- @@@qIsFinite -->
                            <!-- $$$qIsFinite$$$qIsFinitefloat -->
                            <html:h3 class="fn" id="qIsFinite-2"><html:a name="qIsFinite-2"
                                    ></html:a><html:span class="type">bool</html:span>
                                <html:span class="name">qIsFinite</html:span>(<html:span
                                    class="type">float</html:span><html:i> f</html:i>)</html:h3>
                            <html:p>Returns <html:code>true</html:code> if the float
                                    <html:i>f</html:i> is a finite number.</html:p>
                            <!-- @@@qIsFinite -->
                            <!-- $$$qIsInf[overload1]$$$qIsInfdouble -->
                            <html:h3 class="fn" id="qIsInf"><html:a name="qIsInf"
                                    ></html:a><html:span class="type">bool</html:span>
                                <html:span class="name">qIsInf</html:span>(<html:span class="type"
                                    >double</html:span><html:i> d</html:i>)</html:h3>
                            <html:p>Returns <html:code>true</html:code> if the double
                                    <html:i>d</html:i> is equivalent to infinity.</html:p>
                            <!-- @@@qIsInf -->
                            <!-- $$$qIsInf$$$qIsInffloat -->
                            <html:h3 class="fn" id="qIsInf-2"><html:a name="qIsInf-2"
                                    ></html:a><html:span class="type">bool</html:span>
                                <html:span class="name">qIsInf</html:span>(<html:span class="type"
                                    >float</html:span><html:i> f</html:i>)</html:h3>
                            <html:p>Returns <html:code>true</html:code> if the float
                                    <html:i>f</html:i> is equivalent to infinity.</html:p>
                            <!-- @@@qIsInf -->
                            <!-- $$$qIsNaN[overload1]$$$qIsNaNdouble -->
                            <html:h3 class="fn" id="qIsNaN"><html:a name="qIsNaN"
                                    ></html:a><html:span class="type">bool</html:span>
                                <html:span class="name">qIsNaN</html:span>(<html:span class="type"
                                    >double</html:span><html:i> d</html:i>)</html:h3>
                            <html:p>Returns <html:code>true</html:code> if the double
                                    <html:i>d</html:i> is not a number (NaN).</html:p>
                            <!-- @@@qIsNaN -->
                            <!-- $$$qIsNaN$$$qIsNaNfloat -->
                            <html:h3 class="fn" id="qIsNaN-2"><html:a name="qIsNaN-2"
                                    ></html:a><html:span class="type">bool</html:span>
                                <html:span class="name">qIsNaN</html:span>(<html:span class="type"
                                    >float</html:span><html:i> f</html:i>)</html:h3>
                            <html:p>Returns <html:code>true</html:code> if the float
                                    <html:i>f</html:i> is not a number (NaN).</html:p>
                            <!-- @@@qIsNaN -->
                            <!-- $$$qMax[overload1]$$$qMaxconstT&constT& -->
                            <html:h3 class="fn" id="qMaxx"><html:a name="qMaxx"></html:a>const
                                    <html:span class="type">T</html:span> &amp; <html:span
                                    class="name">qMax</html:span>(const <html:span class="type"
                                    >T</html:span> &amp;<html:i> value1</html:i>, const <html:span
                                    class="type">T</html:span> &amp;<html:i>
                                value2</html:i>)</html:h3>
                            <html:p>Returns the maximum of <html:i>value1</html:i> and
                                    <html:i>value2</html:i>.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="type">int</html:span> myValue
                                    <html:span class="operator">=</html:span>
                                <html:span class="number">6</html:span>; <html:span class="type"
                                    >int</html:span> yourValue <html:span class="operator"
                                    >=</html:span>
                                <html:span class="number">4</html:span>; <html:span class="type"
                                    >int</html:span> maxValue <html:span class="operator"
                                    >=</html:span> qMax(myValue<html:span class="operator"
                                    >,</html:span> yourValue); <html:span class="comment">//
                                    maxValue == myValue</html:span></html:pre>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#qMinx"
                                    >qMin</html:a>() and <html:a href="qtglobal.html#qBound"
                                    >qBound</html:a>().</html:p>
                            <!-- @@@qMax -->
                            <!-- $$$qMin[overload1]$$$qMinconstT&constT& -->
                            <html:h3 class="fn" id="qMinx"><html:a name="qMinx"></html:a>const
                                    <html:span class="type">T</html:span> &amp; <html:span
                                    class="name">qMin</html:span>(const <html:span class="type"
                                    >T</html:span> &amp;<html:i> value1</html:i>, const <html:span
                                    class="type">T</html:span> &amp;<html:i>
                                value2</html:i>)</html:h3>
                            <html:p>Returns the minimum of <html:i>value1</html:i> and
                                    <html:i>value2</html:i>.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="type">int</html:span> myValue
                                    <html:span class="operator">=</html:span>
                                <html:span class="number">6</html:span>; <html:span class="type"
                                    >int</html:span> yourValue <html:span class="operator"
                                    >=</html:span>
                                <html:span class="number">4</html:span>; <html:span class="type"
                                    >int</html:span> minValue <html:span class="operator"
                                    >=</html:span> qMin(myValue<html:span class="operator"
                                    >,</html:span> yourValue); <html:span class="comment">//
                                    minValue == yourValue</html:span></html:pre>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#qMaxx"
                                    >qMax</html:a>() and <html:a href="qtglobal.html#qBound"
                                    >qBound</html:a>().</html:p>
                            <!-- @@@qMin -->
                            <!-- $$$qQNaN[overload1]$$$qQNaN -->
                            <html:h3 class="fn" id="qQNaN"><html:a name="qQNaN"></html:a><html:span
                                    class="type">double</html:span>
                                <html:span class="name">qQNaN</html:span>()</html:h3>
                            <html:p>Returns the bit pattern of a quiet NaN as a double.</html:p>
                            <!-- @@@qQNaN -->
                            <!-- $$$qRound64[overload1]$$$qRound64qreal -->
                            <html:h3 class="fn" id="qRound64"><html:a name="qRound64"
                                    ></html:a><html:span class="type"><html:a
                                        href="qtglobal.html#qint64-typedef"
                                    >qint64</html:a></html:span>
                                <html:span class="name">qRound64</html:span>(<html:span class="type"
                                        ><html:a href="qtglobal.html#qreal-typedef"
                                    >qreal</html:a></html:span><html:i> value</html:i>)</html:h3>
                            <html:p>Rounds <html:i>value</html:i> to the nearest 64-bit
                                integer.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="type"><html:a
                                        href="qtglobal.html#qreal-typedef"
                                    >qreal</html:a></html:span> valueA <html:span class="operator"
                                    >=</html:span>
                                <html:span class="number">42949672960.3</html:span>; <html:span
                                    class="type"><html:a href="qtglobal.html#qreal-typedef"
                                        >qreal</html:a></html:span> valueB <html:span
                                    class="operator">=</html:span>
                                <html:span class="number">42949672960.7</html:span>; <html:span
                                    class="type"><html:a href="qtglobal.html#qint64-typedef"
                                        >qint64</html:a></html:span> roundedValueA <html:span
                                    class="operator">=</html:span> qRound64(valueA); <html:span
                                    class="comment">// roundedValueA = 42949672960</html:span>
                                <html:span class="type"><html:a href="qtglobal.html#qint64-typedef"
                                        >qint64</html:a></html:span> roundedValueB <html:span
                                    class="operator">=</html:span> qRound64(valueB); <html:span
                                    class="comment">// roundedValueB =
                                42949672961</html:span></html:pre>
                            <!-- @@@qRound64 -->
                            <!-- $$$qRound[overload1]$$$qRoundqreal -->
                            <html:h3 class="fn" id="qRound"><html:a name="qRound"
                                    ></html:a><html:span class="type">int</html:span>
                                <html:span class="name">qRound</html:span>(<html:span class="type"
                                        ><html:a href="qtglobal.html#qreal-typedef"
                                    >qreal</html:a></html:span><html:i> value</html:i>)</html:h3>
                            <html:p>Rounds <html:i>value</html:i> to the nearest integer.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="type"><html:a
                                        href="qtglobal.html#qreal-typedef"
                                    >qreal</html:a></html:span> valueA <html:span class="operator"
                                    >=</html:span>
                                <html:span class="number">2.3</html:span>; <html:span class="type"
                                        ><html:a href="qtglobal.html#qreal-typedef"
                                    >qreal</html:a></html:span> valueB <html:span class="operator"
                                    >=</html:span>
                                <html:span class="number">2.7</html:span>; <html:span class="type"
                                    >int</html:span> roundedValueA <html:span class="operator"
                                    >=</html:span> qRound(valueA); <html:span class="comment">//
                                    roundedValueA = 2</html:span>
                                <html:span class="type">int</html:span> roundedValueB <html:span
                                    class="operator">=</html:span> qRound(valueB); <html:span
                                    class="comment">// roundedValueB = 3</html:span></html:pre>
                            <!-- @@@qRound -->
                            <!-- $$$qSNaN[overload1]$$$qSNaN -->
                            <html:h3 class="fn" id="qSNaN"><html:a name="qSNaN"></html:a><html:span
                                    class="type">double</html:span>
                                <html:span class="name">qSNaN</html:span>()</html:h3>
                            <html:p>Returns the bit pattern of a signalling NaN as a
                                double.</html:p>
                            <!-- @@@qSNaN -->
                            <!-- $$$qSetMessagePattern[overload1]$$$qSetMessagePatternconstQString& -->
                            <html:h3 class="fn" id="qSetMessagePattern"><html:a
                                    name="qSetMessagePattern"></html:a><html:span class="type"
                                    >void</html:span>
                                <html:span class="name">qSetMessagePattern</html:span>(const
                                    <html:span class="type"><html:a href="qstring.html"
                                        >QString</html:a></html:span> &amp;<html:i>
                                pattern</html:i>)</html:h3>
                            <html:p>Changes the output of the default message handler.</html:p>
                            <html:p>Allows to tweak the output of <html:a
                                    href="qtglobal.html#qDebug">qDebug</html:a>(), <html:a
                                    href="qtglobal.html#qWarning">qWarning</html:a>(), <html:a
                                    href="qtglobal.html#qCritical">qCritical</html:a>() and <html:a
                                    href="qtglobal.html#qFatal">qFatal</html:a>().</html:p>
                            <html:p>Following placeholders are supported:</html:p>
                            <html:div class="table"><html:table class="generic">
                                    <html:thead>
                                        <html:tr class="qt-style">
                                            <html:th>Placeholder</html:th>
                                            <html:th>Description</html:th>
                                        </html:tr>
                                    </html:thead>
                                    <html:tbody>
                                        <html:tr class="odd" valign="top">
                                            <html:td><html:code>%{appname}</html:code></html:td>
                                            <html:td><html:a
                                                  href="qcoreapplication.html#applicationName-prop"
                                                  >QCoreApplication::applicationName</html:a>()</html:td>
                                        </html:tr>
                                        <html:tr class="even" valign="top">
                                            <html:td><html:code>%{category}</html:code></html:td>
                                            <html:td>Logging category</html:td>
                                        </html:tr>
                                        <html:tr class="odd" valign="top">
                                            <html:td><html:code>%{file}</html:code></html:td>
                                            <html:td>Path to source file</html:td>
                                        </html:tr>
                                        <html:tr class="even" valign="top">
                                            <html:td><html:code>%{function}</html:code></html:td>
                                            <html:td>Function</html:td>
                                        </html:tr>
                                        <html:tr class="odd" valign="top">
                                            <html:td><html:code>%{line}</html:code></html:td>
                                            <html:td>Line in source file</html:td>
                                        </html:tr>
                                        <html:tr class="even" valign="top">
                                            <html:td><html:code>%{message}</html:code></html:td>
                                            <html:td>The actual message</html:td>
                                        </html:tr>
                                        <html:tr class="odd" valign="top">
                                            <html:td><html:code>%{pid}</html:code></html:td>
                                            <html:td><html:a
                                                  href="qcoreapplication.html#applicationPid"
                                                  >QCoreApplication::applicationPid</html:a>()</html:td>
                                        </html:tr>
                                        <html:tr class="even" valign="top">
                                            <html:td><html:code>%{threadid}</html:code></html:td>
                                            <html:td>ID of current thread</html:td>
                                        </html:tr>
                                        <html:tr class="odd" valign="top">
                                            <html:td><html:code>%{type}</html:code></html:td>
                                            <html:td>"debug", "warning", "critical" or
                                                "fatal"</html:td>
                                        </html:tr>
                                        <html:tr class="even" valign="top">
                                            <html:td><html:code>%{time
                                                process}</html:code></html:td>
                                            <html:td>time of the message, in seconds since the
                                                process started (the token "process" is
                                                literal)</html:td>
                                        </html:tr>
                                        <html:tr class="odd" valign="top">
                                            <html:td><html:code>%{time
                                                [format]}</html:code></html:td>
                                            <html:td>system time when the message occurred,
                                                formatted by passing the
                                                  <html:code>format</html:code> to <html:a
                                                  href="qdatetime.html#toString"
                                                  >QDateTime::toString</html:a>(). If the format is
                                                not specified, the format of <html:a
                                                  href="qt.html#DateFormat-enum"
                                                  >Qt::ISODate</html:a> is used.</html:td>
                                        </html:tr>
                                        <html:tr class="even" valign="top">
                                            <html:td><html:code>%{backtrace [depth=N]
                                                  [separator="..."]}</html:code></html:td>
                                            <html:td>A backtrace with the number of frames specified
                                                by the optional <html:code>depth</html:code>
                                                parameter (defaults to 5), and separated by the
                                                optional <html:code>separator</html:code> parameter
                                                (defaults to "|"). This expansion is available only
                                                on some platforms (currently only platfoms using
                                                glibc). Names are only known for exported functions.
                                                If you want to see the name of every function in
                                                your application, use <html:code>QMAKE_LFLAGS +=
                                                  -rdynamic</html:code>. When reading backtraces,
                                                take into account that frames might be missing due
                                                to inlining or tail call optimization.</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div>
                            <html:p>You can also use conditionals on the type of the message using
                                    <html:code>%{if-debug}</html:code>,
                                    <html:code>%{if-warning}</html:code>,
                                    <html:code>%{if-critical}</html:code> or
                                    <html:code>%{if-fatal}</html:code> followed by an
                                    <html:code>%{endif}</html:code>. What is inside the
                                    <html:code>%{if-*}</html:code> and
                                    <html:code>%{endif}</html:code> will only be printed if the type
                                matches.</html:p>
                            <html:p>Finally, text inside <html:code>%{if-category}</html:code> ...
                                    <html:code>%{endif}</html:code> is only printed if the category
                                is not the default one.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp">QT_MESSAGE_PATTERN<html:span class="operator"
                                    >=</html:span><html:span class="string">"[%{time yyyyMMdd
                                    h:mm:ss.zzz t}
                                    %{if-debug}D%{endif}%{if-warning}W%{endif}%{if-critical}C%{endif}%{if-fatal}F%{endif}]
                                    %{file}:%{line} - %{message}"</html:span></html:pre>
                            <html:p>The default <html:i>pattern</html:i> is
                                "%{if-category}%{category}: %{endif}%{message}".</html:p>
                            <html:p>The <html:i>pattern</html:i> can also be changed at runtime by
                                setting the QT_MESSAGE_PATTERN environment variable; if both
                                qSetMessagePattern() is called and QT_MESSAGE_PATTERN is set, the
                                environment variable takes precedence.</html:p>
                            <html:p>Custom message handlers can use <html:a
                                    href="qtglobal.html#qFormatLogMessage"
                                    >qFormatLogMessage</html:a>() to take <html:i>pattern</html:i>
                                into account.</html:p>
                            <html:p>This function was introduced in Qt 5.0.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#qInstallMessageHandler"
                                    >qInstallMessageHandler</html:a>() and <html:a
                                    href="qtdoc/testing-and-debugging.html#debugging-techniques"
                                    >Debugging Techniques</html:a>.</html:p>
                            <!-- @@@qSetMessagePattern -->
                            <!-- $$$qVersion[overload1]$$$qVersion -->
                            <html:h3 class="fn" id="qVersion"><html:a name="qVersion"></html:a>const
                                    <html:span class="type">char</html:span> * <html:span
                                    class="name">qVersion</html:span>()</html:h3>
                            <html:p>Returns the version number of Qt at run-time as a string (for
                                example, "4.1.2"). This may be a different version than the version
                                the application was compiled against.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#QT_VERSION_STR"
                                >QT_VERSION_STR</html:a>.</html:p>
                            <!-- @@@qVersion -->
                            <!-- $$$q_check_ptr[overload1]$$$q_check_ptrT* -->
                            <html:h3 class="fn" id="q_check_ptr"><html:a name="q_check_ptr"
                                    ></html:a><html:span class="type">T</html:span> * <html:span
                                    class="name">q_check_ptr</html:span>(<html:span class="type"
                                    >T</html:span> *<html:i> pointer</html:i>)</html:h3>
                            <html:p>Uses <html:a href="qtglobal.html#Q_CHECK_PTRx"
                                    >Q_CHECK_PTR</html:a> on <html:i>pointer</html:i>, then returns
                                    <html:i>pointer</html:i>.</html:p>
                            <html:p>This can be used as an inline version of <html:a
                                    href="qtglobal.html#Q_CHECK_PTRx">Q_CHECK_PTR</html:a>.</html:p>
                            <!-- @@@q_check_ptr -->
                            <!-- $$$qgetenv[overload1]$$$qgetenvconstchar* -->
                            <html:h3 class="fn" id="qgetenv"><html:a name="qgetenv"
                                    ></html:a><html:span class="type"><html:a href="qbytearray.html"
                                        >QByteArray</html:a></html:span>
                                <html:span class="name">qgetenv</html:span>(const <html:span
                                    class="type">char</html:span> *<html:i>
                                varName</html:i>)</html:h3>
                            <html:p>Returns the value of the environment variable with name
                                    <html:i>varName</html:i>. To get the variable string, use
                                    <html:a href="qbytearray.html#constData"
                                    >QByteArray::constData</html:a>().</html:p>
                            <html:p><html:b>Note: </html:b>qgetenv() was introduced because getenv()
                                from the standard C library was deprecated in VC2005 (and later
                                versions). qgetenv() uses the new replacement function in VC, and
                                calls the standard C library's implementation on all other
                                platforms.</html:p><html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#qputenv">qputenv</html:a>(), <html:a
                                    href="qtglobal.html#qEnvironmentVariableIsSet"
                                    >qEnvironmentVariableIsSet</html:a>(), and <html:a
                                    href="qtglobal.html#qEnvironmentVariableIsEmpty"
                                    >qEnvironmentVariableIsEmpty</html:a>().</html:p>
                            <!-- @@@qgetenv -->
                            <!-- $$$qputenv[overload1]$$$qputenvconstchar*constQByteArray& -->
                            <html:h3 class="fn" id="qputenv"><html:a name="qputenv"
                                    ></html:a><html:span class="type">bool</html:span>
                                <html:span class="name">qputenv</html:span>(const <html:span
                                    class="type">char</html:span> *<html:i> varName</html:i>, const
                                    <html:span class="type"><html:a href="qbytearray.html"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    value</html:i>)</html:h3>
                            <html:p>This function sets the <html:i>value</html:i> of the environment
                                variable named <html:i>varName</html:i>. It will create the variable
                                if it does not exist. It returns 0 if the variable could not be
                                set.</html:p>
                            <html:p>Calling qputenv with an empty value removes the environment
                                variable on Windows, and makes it set (but empty) on Unix. Prefer
                                using <html:a href="qtglobal.html#qunsetenv">qunsetenv</html:a>()
                                for fully portable behavior.</html:p>
                            <html:p><html:b>Note: </html:b>qputenv() was introduced because putenv()
                                from the standard C library was deprecated in VC2005 (and later
                                versions). qputenv() uses the replacement function in VC, and calls
                                the standard C library's implementation on all other
                                platforms.</html:p><html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#qgetenv">qgetenv</html:a>().</html:p>
                            <!-- @@@qputenv -->
                            <!-- $$$qrand[overload1]$$$qrand -->
                            <html:h3 class="fn" id="qrand"><html:a name="qrand"></html:a><html:span
                                    class="type">int</html:span>
                                <html:span class="name">qrand</html:span>()</html:h3>
                            <html:p>Thread-safe version of the standard C++
                                    <html:code>rand()</html:code> function.</html:p>
                            <html:p>Returns a value between 0 and <html:code>RAND_MAX</html:code>
                                (defined in <html:code>&lt;cstdlib&gt;</html:code> and
                                    <html:code>&lt;stdlib.h&gt;</html:code>), the next number in the
                                current sequence of pseudo-random integers.</html:p>
                            <html:p>Use <html:code>qsrand()</html:code> to initialize the
                                pseudo-random number generator with a seed value.</html:p>
                            <html:p>This function was introduced in Qt 4.2.</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#qsrand"
                                    >qsrand</html:a>().</html:p>
                            <!-- @@@qrand -->
                            <!-- $$$qsrand[overload1]$$$qsranduint -->
                            <html:h3 class="fn" id="qsrand"><html:a name="qsrand"
                                    ></html:a><html:span class="type">void</html:span>
                                <html:span class="name">qsrand</html:span>(<html:span class="type"
                                        ><html:a href="qtglobal.html#uint-typedef"
                                    >uint</html:a></html:span><html:i> seed</html:i>)</html:h3>
                            <html:p>Thread-safe version of the standard C++
                                    <html:code>srand()</html:code> function.</html:p>
                            <html:p>Sets the argument <html:i>seed</html:i> to be used to generate a
                                new random number sequence of pseudo random integers to be returned
                                by <html:a href="qtglobal.html#qrand">qrand</html:a>().</html:p>
                            <html:p>The sequence of random numbers generated is deterministic per
                                thread. For example, if two threads call qsrand(1) and subsequently
                                calls <html:a href="qtglobal.html#qrand">qrand</html:a>(), the
                                threads will get the same random number sequence.</html:p>
                            <html:p>This function was introduced in Qt 4.2.</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#qrand"
                                    >qrand</html:a>().</html:p>
                            <!-- @@@qsrand -->
                            <!-- $$$qtTrId[overload1]$$$qtTrIdconstchar*int -->
                            <html:h3 class="fn" id="qtTrId"><html:a name="qtTrId"
                                    ></html:a><html:span class="type"><html:a href="qstring.html"
                                        >QString</html:a></html:span>
                                <html:span class="name">qtTrId</html:span>(const <html:span
                                    class="type">char</html:span> *<html:i> id</html:i>, <html:span
                                    class="type">int</html:span><html:i> n</html:i> = -1)</html:h3>
                            <html:p>The qtTrId function finds and returns a translated
                                string.</html:p>
                            <html:p>Returns a translated string identified by <html:i>id</html:i>.
                                If no matching string is found, the id itself is returned. This
                                should not happen under normal conditions.</html:p>
                            <html:p>If <html:i>n</html:i> &gt;= 0, all occurrences of
                                    <html:code>%n</html:code> in the resulting string are replaced
                                with a decimal representation of <html:i>n</html:i>. In addition,
                                depending on <html:i>n</html:i>'s value, the translation text may
                                vary.</html:p>
                            <html:p>Meta data and comments can be passed as documented for <html:a
                                    href="qobject.html#tr">QObject::tr</html:a>(). In addition, it
                                is possible to supply a source string template like that:</html:p>
                            <html:p><html:code>//% &lt;C string&gt;</html:code></html:p>
                            <html:p>or</html:p>
                            <html:p><html:code>\begincomment% &lt;C string&gt;
                                    \endcomment</html:code></html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp">
                                <html:span class="comment">//% "%n fooish bar(s)
                                    found.\n"</html:span>
                                <html:span class="comment">//% "Do you want to
                                    continue?"</html:span>
                                <html:span class="type"><html:a href="qstring.html"
                                    >QString</html:a></html:span> text <html:span class="operator"
                                    >=</html:span> qtTrId(<html:span class="string"
                                    >"qtn_foo_bar"</html:span><html:span class="operator"
                                    >,</html:span> n);</html:pre>
                            <html:p>Creating QM files suitable for use with this function requires
                                passing the <html:code>-idbased</html:code> option to the
                                    <html:code>lrelease</html:code> tool.</html:p>
                            <html:p><html:b>Warning:</html:b> This method is reentrant only if all
                                translators are installed <html:i>before</html:i> calling this
                                method. Installing or removing translators while performing
                                translations is not supported. Doing so will probably result in
                                crashes or other undesirable behavior.</html:p>
                            <html:p><html:b>Note:</html:b> This function is <html:a
                                    href="qtdoc/threads-reentrancy.html#reentrant"
                                    >reentrant</html:a>.</html:p>
                            <html:p>This function was introduced in Qt 4.6.</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qobject.html#tr"
                                    >QObject::tr</html:a>(), <html:a
                                    href="qcoreapplication.html#translate"
                                    >QCoreApplication::translate</html:a>(), and <html:a
                                    href="qtdoc/internationalization.html">Internationalization with
                                    Qt</html:a>.</html:p>
                            <!-- @@@qtTrId -->
                            <!-- $$$qunsetenv[overload1]$$$qunsetenvconstchar* -->
                            <html:h3 class="fn" id="qunsetenv"><html:a name="qunsetenv"
                                    ></html:a><html:span class="type">bool</html:span>
                                <html:span class="name">qunsetenv</html:span>(const <html:span
                                    class="type">char</html:span> *<html:i>
                                varName</html:i>)</html:h3>
                            <html:p>This function deletes the variable <html:i>varName</html:i> from
                                the environment.</html:p>
                            <html:p>Returns <html:code>true</html:code> on success.</html:p>
                            <html:p>This function was introduced in Qt 5.1.</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#qputenv"
                                    >qputenv</html:a>() and <html:a href="qtglobal.html#qgetenv"
                                    >qgetenv</html:a>().</html:p>
                            <!-- @@@qunsetenv -->
                            <html:h2>Macro Documentation</html:h2>
                            <!-- $$$QT_DISABLE_DEPRECATED_BEFORE[overload1]$$$QT_DISABLE_DEPRECATED_BEFORE -->
                            <html:h3 class="fn" id="QT_DISABLE_DEPRECATED_BEFORE"><html:a
                                    name="QT_DISABLE_DEPRECATED_BEFORE"></html:a><html:span
                                    class="name">QT_DISABLE_DEPRECATED_BEFORE</html:span></html:h3>
                            <html:p>This macro can be defined in the project file to disable
                                functions deprecated in a specified version of Qt or any earlier
                                version. The default version number is 5.0, meaning that functions
                                deprecated in or before Qt 5.0 will not be included.</html:p>
                            <html:p>Examples: When using a future release of Qt 5, set
                                QT_DISABLE_DEPRECATED_BEFORE=0x050100 to disable functions
                                deprecated in Qt 5.1 and earlier. In any release, set
                                QT_DISABLE_DEPRECATED_BEFORE=0x000000 to enable any functions,
                                including the ones deprecated in Qt 5.0</html:p>
                            <!-- @@@QT_DISABLE_DEPRECATED_BEFORE -->
                            <!-- $$$QT_POINTER_SIZE[overload1]$$$QT_POINTER_SIZE -->
                            <html:h3 class="fn" id="QT_POINTER_SIZE"><html:a name="QT_POINTER_SIZE"
                                    ></html:a><html:span class="name"
                                >QT_POINTER_SIZE</html:span></html:h3>
                            <html:p>Expands to the size of a pointer in bytes (4 or 8). This is
                                equivalent to <html:code>sizeof(void *)</html:code> but can be used
                                in a preprocessor directive.</html:p>
                            <!-- @@@QT_POINTER_SIZE -->
                            <!-- $$$QT_REQUIRE_VERSION[overload1]$$$QT_REQUIRE_VERSIONintchar**constchar* -->
                            <html:h3 class="fn" id="QT_REQUIRE_VERSION"><html:a
                                    name="QT_REQUIRE_VERSION"></html:a><html:span class="name"
                                    >QT_REQUIRE_VERSION</html:span>(<html:span class="type"
                                    >int</html:span><html:i> argc</html:i>, <html:span class="type"
                                    >char</html:span> **<html:i> argv</html:i>, const <html:span
                                    class="type">char</html:span> *<html:i>
                                version</html:i>)</html:h3>
                            <html:p>This macro can be used to ensure that the application is run
                                against a recent enough version of Qt. This is especially useful if
                                your application depends on a specific bug fix introduced in a
                                bug-fix release (e.g., 4.0.2).</html:p>
                            <html:p>The <html:i>argc</html:i> and <html:i>argv</html:i> parameters
                                are the <html:code>main()</html:code> function's
                                    <html:code>argc</html:code> and <html:code>argv</html:code>
                                parameters. The <html:i>version</html:i> parameter is a string
                                literal that specifies which version of Qt the application requires
                                (e.g., "4.0.2").</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="preprocessor">#include
                                    &lt;QApplication&gt;</html:span>
                                <html:span class="preprocessor">#include
                                    &lt;QMessageBox&gt;</html:span>
                                <html:span class="type">int</html:span> main(<html:span class="type"
                                    >int</html:span> argc<html:span class="operator">,</html:span>
                                <html:span class="type">char</html:span>
                                <html:span class="operator">*</html:span>argv<html:span
                                    class="operator">[</html:span><html:span class="operator"
                                    >]</html:span>) { QT_REQUIRE_VERSION(argc<html:span
                                    class="operator">,</html:span> argv<html:span class="operator"
                                    >,</html:span>
                                <html:span class="string">"4.0.2"</html:span>) <html:span
                                    class="type"><html:a href="qtwidgets/qapplication.html"
                                        >QApplication</html:a></html:span> app(argc<html:span
                                    class="operator">,</html:span> argv); <html:span
                                    class="operator">.</html:span><html:span class="operator"
                                    >.</html:span><html:span class="operator">.</html:span>
                                <html:span class="keyword">return</html:span> app<html:span
                                    class="operator">.</html:span>exec(); }</html:pre>
                            <!-- @@@QT_REQUIRE_VERSION -->
                            <!-- $$$QT_TRANSLATE_NOOP3[overload1]$$$QT_TRANSLATE_NOOP3 -->
                            <html:h3 class="fn" id="QT_TRANSLATE_NOOP3"><html:a
                                    name="QT_TRANSLATE_NOOP3"></html:a><html:span class="name"
                                    >QT_TRANSLATE_NOOP3</html:span>(<html:i> context</html:i>,
                                    <html:i> sourceText</html:i>, <html:i>
                                comment</html:i>)</html:h3>
                            <html:p>Marks the string literal <html:i>sourceText</html:i> for dynamic
                                translation in the given <html:i>context</html:i> and with
                                    <html:i>comment</html:i>, i.e the stored
                                    <html:i>sourceText</html:i> will not be altered. The
                                    <html:i>context</html:i> is typically a class and also needs to
                                be specified as string literal. The string literal
                                    <html:i>comment</html:i> will be available for translators using
                                e.g. Qt Linguist.</html:p>
                            <html:p>The macro expands to anonymous struct of the two string literals
                                passed as <html:i>sourceText</html:i> and
                                <html:i>comment</html:i>.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="keyword">static</html:span> {
                                    <html:span class="keyword">const</html:span>
                                <html:span class="type">char</html:span>
                                <html:span class="operator">*</html:span>source; <html:span
                                    class="keyword">const</html:span>
                                <html:span class="type">char</html:span>
                                <html:span class="operator">*</html:span>comment; }
                                    greeting_strings<html:span class="operator"
                                    >[</html:span><html:span class="operator">]</html:span>
                                <html:span class="operator">=</html:span> {
                                    QT_TRANSLATE_NOOP3(<html:span class="string"
                                    >"FriendlyConversation"</html:span><html:span class="operator"
                                    >,</html:span>
                                <html:span class="string">"Hello"</html:span><html:span
                                    class="operator">,</html:span>
                                <html:span class="string">"A really friendly
                                    hello"</html:span>)<html:span class="operator">,</html:span>
                                    QT_TRANSLATE_NOOP3(<html:span class="string"
                                    >"FriendlyConversation"</html:span><html:span class="operator"
                                    >,</html:span>
                                <html:span class="string">"Goodbye"</html:span><html:span
                                    class="operator">,</html:span>
                                <html:span class="string">"A really friendly goodbye"</html:span>)
                                }; <html:span class="type"><html:a href="qstring.html"
                                        >QString</html:a></html:span> FriendlyConversation<html:span
                                    class="operator">::</html:span>greeting(<html:span class="type"
                                    >int</html:span> type) { <html:span class="keyword"
                                    >return</html:span> tr(greeting_strings<html:span
                                    class="operator">[</html:span>type<html:span class="operator"
                                    >]</html:span><html:span class="operator"
                                    >.</html:span>source<html:span class="operator">,</html:span>
                                    greeting_strings<html:span class="operator"
                                    >[</html:span>type<html:span class="operator"
                                    >]</html:span><html:span class="operator">.</html:span>comment);
                                } <html:span class="type"><html:a href="qstring.html"
                                        >QString</html:a></html:span> global_greeting(<html:span
                                    class="type">int</html:span> type) { <html:span class="keyword"
                                    >return</html:span> qApp<html:span class="operator"
                                    >-</html:span><html:span class="operator"
                                    >&gt;</html:span>translate(<html:span class="string"
                                    >"FriendlyConversation"</html:span><html:span class="operator"
                                    >,</html:span> greeting_strings<html:span class="operator"
                                    >[</html:span>type<html:span class="operator"
                                    >]</html:span><html:span class="operator"
                                    >.</html:span>source<html:span class="operator">,</html:span>
                                    greeting_strings<html:span class="operator"
                                    >[</html:span>type<html:span class="operator"
                                    >]</html:span><html:span class="operator">.</html:span>comment);
                                }</html:pre>
                            <html:p>This function was introduced in Qt 4.4.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#QT_TR_NOOP">QT_TR_NOOP</html:a>(), <html:a
                                    href="qtglobal.html#QT_TRANSLATE_NOOP"
                                    >QT_TRANSLATE_NOOP</html:a>(), and <html:a
                                    href="qtdoc/internationalization.html">Internationalization with
                                    Qt</html:a>.</html:p>
                            <!-- @@@QT_TRANSLATE_NOOP3 -->
                            <!-- $$$QT_TRANSLATE_NOOP[overload1]$$$QT_TRANSLATE_NOOP -->
                            <html:h3 class="fn" id="QT_TRANSLATE_NOOP"><html:a
                                    name="QT_TRANSLATE_NOOP"></html:a><html:span class="name"
                                    >QT_TRANSLATE_NOOP</html:span>(<html:i> context</html:i>,
                                    <html:i> sourceText</html:i>)</html:h3>
                            <html:p>Marks the string literal <html:i>sourceText</html:i> for dynamic
                                translation in the given <html:i>context</html:i>; i.e, the stored
                                    <html:i>sourceText</html:i> will not be altered. The
                                    <html:i>context</html:i> is typically a class and also needs to
                                be specified as string literal.</html:p>
                            <html:p>The macro expands to <html:i>sourceText</html:i>.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="keyword">static</html:span>
                                <html:span class="keyword">const</html:span>
                                <html:span class="type">char</html:span>
                                <html:span class="operator">*</html:span>greeting_strings<html:span
                                    class="operator">[</html:span><html:span class="operator"
                                    >]</html:span>
                                <html:span class="operator">=</html:span> {
                                    QT_TRANSLATE_NOOP(<html:span class="string"
                                    >"FriendlyConversation"</html:span><html:span class="operator"
                                    >,</html:span>
                                <html:span class="string">"Hello"</html:span>)<html:span
                                    class="operator">,</html:span> QT_TRANSLATE_NOOP(<html:span
                                    class="string">"FriendlyConversation"</html:span><html:span
                                    class="operator">,</html:span>
                                <html:span class="string">"Goodbye"</html:span>) }; <html:span
                                    class="type"><html:a href="qstring.html"
                                    >QString</html:a></html:span> FriendlyConversation<html:span
                                    class="operator">::</html:span>greeting(<html:span class="type"
                                    >int</html:span> type) { <html:span class="keyword"
                                    >return</html:span> tr(greeting_strings<html:span
                                    class="operator">[</html:span>type<html:span class="operator"
                                    >]</html:span>); } <html:span class="type"><html:a
                                        href="qstring.html">QString</html:a></html:span>
                                    global_greeting(<html:span class="type">int</html:span> type) {
                                    <html:span class="keyword">return</html:span> qApp<html:span
                                    class="operator">-</html:span><html:span class="operator"
                                    >&gt;</html:span>translate(<html:span class="string"
                                    >"FriendlyConversation"</html:span><html:span class="operator"
                                    >,</html:span> greeting_strings<html:span class="operator"
                                    >[</html:span>type<html:span class="operator">]</html:span>);
                                }</html:pre>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#QT_TR_NOOP">QT_TR_NOOP</html:a>(), <html:a
                                    href="qtglobal.html#QT_TRANSLATE_NOOP3"
                                    >QT_TRANSLATE_NOOP3</html:a>(), and <html:a
                                    href="qtdoc/internationalization.html">Internationalization with
                                    Qt</html:a>.</html:p>
                            <!-- @@@QT_TRANSLATE_NOOP -->
                            <!-- $$$QT_TRID_NOOP[overload1]$$$QT_TRID_NOOP -->
                            <html:h3 class="fn" id="QT_TRID_NOOP"><html:a name="QT_TRID_NOOP"
                                    ></html:a><html:span class="name"
                                    >QT_TRID_NOOP</html:span>(<html:i> id</html:i>)</html:h3>
                            <html:p>The QT_TRID_NOOP macro marks an id for dynamic
                                translation.</html:p>
                            <html:p>The only purpose of this macro is to provide an anchor for
                                attaching meta data like to <html:a href="qtglobal.html#qtTrId"
                                    >qtTrId</html:a>().</html:p>
                            <html:p>The macro expands to <html:i>id</html:i>.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="keyword">static</html:span>
                                <html:span class="keyword">const</html:span>
                                <html:span class="type">char</html:span>
                                <html:span class="operator">*</html:span>
                                <html:span class="keyword">const</html:span> ids<html:span
                                    class="operator">[</html:span><html:span class="operator"
                                    >]</html:span>
                                <html:span class="operator">=</html:span> { <html:span
                                    class="comment">//% "This is the first text."</html:span>
                                    QT_TRID_NOOP(<html:span class="string"
                                    >"qtn_1st_text"</html:span>)<html:span class="operator"
                                    >,</html:span>
                                <html:span class="comment">//% "This is the second
                                    text."</html:span> QT_TRID_NOOP(<html:span class="string"
                                    >"qtn_2nd_text"</html:span>)<html:span class="operator"
                                    >,</html:span>
                                <html:span class="number">0</html:span> }; <html:span class="type"
                                    >void</html:span> TheClass<html:span class="operator"
                                    >::</html:span>addLabels() { <html:span class="keyword"
                                    >for</html:span> (<html:span class="type">int</html:span> i
                                    <html:span class="operator">=</html:span>
                                <html:span class="number">0</html:span>; ids<html:span
                                    class="operator">[</html:span>i<html:span class="operator"
                                    >]</html:span>; <html:span class="operator"
                                    >+</html:span><html:span class="operator">+</html:span>i)
                                    <html:span class="keyword">new</html:span>
                                <html:span class="type"><html:a href="qtwidgets/qlabel.html"
                                        >QLabel</html:a></html:span>(qtTrId(ids<html:span
                                    class="operator">[</html:span>i<html:span class="operator"
                                    >]</html:span>)<html:span class="operator">,</html:span>
                                <html:span class="keyword">this</html:span>); }</html:pre>
                            <html:p>This function was introduced in Qt 4.6.</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#qtTrId"
                                    >qtTrId</html:a>() and <html:a
                                    href="qtdoc/internationalization.html">Internationalization with
                                    Qt</html:a>.</html:p>
                            <!-- @@@QT_TRID_NOOP -->
                            <!-- $$$QT_TR_NOOP[overload1]$$$QT_TR_NOOP -->
                            <html:h3 class="fn" id="QT_TR_NOOP"><html:a name="QT_TR_NOOP"
                                    ></html:a><html:span class="name"
                                    >QT_TR_NOOP</html:span>(<html:i> sourceText</html:i>)</html:h3>
                            <html:p>Marks the string literal <html:i>sourceText</html:i> for dynamic
                                translation in the current context (class), i.e the stored
                                    <html:i>sourceText</html:i> will not be altered.</html:p>
                            <html:p>The macro expands to <html:i>sourceText</html:i>.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="type"><html:a
                                        href="qstring.html">QString</html:a></html:span>
                                    FriendlyConversation<html:span class="operator"
                                    >::</html:span>greeting(<html:span class="type">int</html:span>
                                type) { <html:span class="keyword">static</html:span>
                                <html:span class="keyword">const</html:span>
                                <html:span class="type">char</html:span>
                                <html:span class="operator">*</html:span>greeting_strings<html:span
                                    class="operator">[</html:span><html:span class="operator"
                                    >]</html:span>
                                <html:span class="operator">=</html:span> { QT_TR_NOOP(<html:span
                                    class="string">"Hello"</html:span>)<html:span class="operator"
                                    >,</html:span> QT_TR_NOOP(<html:span class="string"
                                    >"Goodbye"</html:span>) }; <html:span class="keyword"
                                    >return</html:span> tr(greeting_strings<html:span
                                    class="operator">[</html:span>type<html:span class="operator"
                                    >]</html:span>); }</html:pre>
                            <html:p>The macro QT_TR_NOOP_UTF8() is identical except that it tells
                                lupdate that the source string is encoded in UTF-8. Corresponding
                                variants exist in the <html:a href="qtglobal.html#QT_TRANSLATE_NOOP"
                                    >QT_TRANSLATE_NOOP</html:a>() family of macros, too.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#QT_TRANSLATE_NOOP"
                                    >QT_TRANSLATE_NOOP</html:a>() and <html:a
                                    href="qtdoc/internationalization.html">Internationalization with
                                    Qt</html:a>.</html:p>
                            <!-- @@@QT_TR_NOOP -->
                            <!-- $$$QT_VERSION[overload1]$$$QT_VERSION -->
                            <html:h3 class="fn" id="QT_VERSION"><html:a name="QT_VERSION"
                                    ></html:a><html:span class="name"
                                >QT_VERSION</html:span></html:h3>
                            <html:p>This macro expands a numeric value of the form 0xMMNNPP (MM =
                                major, NN = minor, PP = patch) that specifies Qt's version number.
                                For example, if you compile your application against Qt 4.1.2, the
                                QT_VERSION macro will expand to 0x040102.</html:p>
                            <html:p>You can use QT_VERSION to use the latest Qt features where
                                available.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="preprocessor">#if QT_VERSION
                                    &gt;= 0x040100</html:span>
                                <html:span class="type"><html:a href="qtgui/qicon.html"
                                        >QIcon</html:a></html:span> icon <html:span class="operator"
                                    >=</html:span> style()<html:span class="operator"
                                    >-</html:span><html:span class="operator"
                                    >&gt;</html:span>standardIcon(<html:span class="type"><html:a
                                        href="qtwidgets/qstyle.html"
                                    >QStyle</html:a></html:span><html:span class="operator"
                                    >::</html:span>SP_TrashIcon); <html:span class="preprocessor"
                                    >#else</html:span>
                                <html:span class="type"><html:a href="qtgui/qpixmap.html"
                                        >QPixmap</html:a></html:span> pixmap <html:span
                                    class="operator">=</html:span> style()<html:span
                                    class="operator">-</html:span><html:span class="operator"
                                    >&gt;</html:span>standardPixmap(<html:span class="type"><html:a
                                        href="qtwidgets/qstyle.html"
                                    >QStyle</html:a></html:span><html:span class="operator"
                                    >::</html:span>SP_TrashIcon); <html:span class="type"><html:a
                                        href="qtgui/qicon.html">QIcon</html:a></html:span>
                                icon(pixmap); <html:span class="preprocessor"
                                >#endif</html:span></html:pre>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#QT_VERSION_STR">QT_VERSION_STR</html:a> and
                                    <html:a href="qtglobal.html#qVersion"
                                >qVersion</html:a>().</html:p>
                            <!-- @@@QT_VERSION -->
                            <!-- $$$QT_VERSION_CHECK[overload1]$$$QT_VERSION_CHECK -->
                            <html:h3 class="fn" id="QT_VERSION_CHECK"><html:a
                                    name="QT_VERSION_CHECK"></html:a><html:span class="name"
                                    >QT_VERSION_CHECK</html:span></html:h3>
                            <html:p>Turns the major, minor and patch numbers of a version into an
                                integer, 0xMMNNPP (MM = major, NN = minor, PP = patch). This can be
                                compared with another similarly processed version id.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="preprocessor">#include
                                    &lt;QtGlobal&gt;</html:span>
                                <html:span class="preprocessor">#if (QT_VERSION &gt;=
                                    QT_VERSION_CHECK(5, 0, 0))</html:span>
                                <html:span class="preprocessor">#include
                                    &lt;QtWidgets&gt;</html:span>
                                <html:span class="preprocessor">#else</html:span>
                                <html:span class="preprocessor">#include &lt;QtGui&gt;</html:span>
                                <html:span class="preprocessor">#endif</html:span></html:pre>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#QT_VERSION">QT_VERSION</html:a>.</html:p>
                            <!-- @@@QT_VERSION_CHECK -->
                            <!-- $$$QT_VERSION_STR[overload1]$$$QT_VERSION_STR -->
                            <html:h3 class="fn" id="QT_VERSION_STR"><html:a name="QT_VERSION_STR"
                                    ></html:a><html:span class="name"
                                >QT_VERSION_STR</html:span></html:h3>
                            <html:p>This macro expands to a string that specifies Qt's version
                                number (for example, "4.1.2"). This is the version against which the
                                application is compiled.</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#qVersion"
                                    >qVersion</html:a>() and <html:a href="qtglobal.html#QT_VERSION"
                                    >QT_VERSION</html:a>.</html:p>
                            <!-- @@@QT_VERSION_STR -->
                            <!-- $$$Q_ASSERT[overload1]$$$Q_ASSERTbool -->
                            <html:h3 class="fn" id="Q_ASSERT"><html:a name="Q_ASSERT"
                                    ></html:a><html:span class="type">void</html:span>
                                <html:span class="name">Q_ASSERT</html:span>(<html:span class="type"
                                    >bool</html:span><html:i> test</html:i>)</html:h3>
                            <html:p>Prints a warning message containing the source code file name
                                and line number if <html:i>test</html:i> is
                                    <html:code>false</html:code>.</html:p>
                            <html:p>Q_ASSERT() is useful for testing pre- and post-conditions during
                                development. It does nothing if <html:code>QT_NO_DEBUG</html:code>
                                was defined during compilation.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="comment">// File:
                                    div.cpp</html:span>
                                <html:span class="preprocessor">#include
                                    &lt;QtGlobal&gt;</html:span>
                                <html:span class="type">int</html:span> divide(<html:span
                                    class="type">int</html:span> a<html:span class="operator"
                                    >,</html:span>
                                <html:span class="type">int</html:span> b) { Q_ASSERT(b <html:span
                                    class="operator">!</html:span><html:span class="operator"
                                    >=</html:span>
                                <html:span class="number">0</html:span>); <html:span class="keyword"
                                    >return</html:span> a <html:span class="operator">/</html:span>
                                b; }</html:pre>
                            <html:p>If <html:code>b</html:code> is zero, the Q_ASSERT statement will
                                output the following message using the <html:a
                                    href="qtglobal.html#qFatal">qFatal</html:a>() function:</html:p>
                            <html:pre class="cpp">ASSERT: <html:span class="string">"b !=
                                    0"</html:span> in file div<html:span class="operator"
                                    >.</html:span>cpp<html:span class="operator">,</html:span> line
                                    <html:span class="number">7</html:span></html:pre>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#Q_ASSERT_X">Q_ASSERT_X</html:a>(), <html:a
                                    href="qtglobal.html#qFatal">qFatal</html:a>(), and <html:a
                                    href="qtdoc/testing-and-debugging.html#debugging-techniques"
                                    >Debugging Techniques</html:a>.</html:p>
                            <!-- @@@Q_ASSERT -->
                            <!-- $$$Q_ASSERT_X[overload1]$$$Q_ASSERT_Xboolconstchar*constchar* -->
                            <html:h3 class="fn" id="Q_ASSERT_X"><html:a name="Q_ASSERT_X"
                                    ></html:a><html:span class="type">void</html:span>
                                <html:span class="name">Q_ASSERT_X</html:span>(<html:span
                                    class="type">bool</html:span><html:i> test</html:i>, const
                                    <html:span class="type">char</html:span> *<html:i>
                                    where</html:i>, const <html:span class="type">char</html:span>
                                    *<html:i> what</html:i>)</html:h3>
                            <html:p>Prints the message <html:i>what</html:i> together with the
                                location <html:i>where</html:i>, the source file name and line
                                number if <html:i>test</html:i> is
                                <html:code>false</html:code>.</html:p>
                            <html:p>Q_ASSERT_X is useful for testing pre- and post-conditions during
                                development. It does nothing if <html:code>QT_NO_DEBUG</html:code>
                                was defined during compilation.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="comment">// File:
                                    div.cpp</html:span>
                                <html:span class="preprocessor">#include
                                    &lt;QtGlobal&gt;</html:span>
                                <html:span class="type">int</html:span> divide(<html:span
                                    class="type">int</html:span> a<html:span class="operator"
                                    >,</html:span>
                                <html:span class="type">int</html:span> b) { Q_ASSERT_X(b <html:span
                                    class="operator">!</html:span><html:span class="operator"
                                    >=</html:span>
                                <html:span class="number">0</html:span><html:span class="operator"
                                    >,</html:span>
                                <html:span class="string">"divide"</html:span><html:span
                                    class="operator">,</html:span>
                                <html:span class="string">"division by zero"</html:span>);
                                    <html:span class="keyword">return</html:span> a <html:span
                                    class="operator">/</html:span> b; }</html:pre>
                            <html:p>If <html:code>b</html:code> is zero, the Q_ASSERT_X statement
                                will output the following message using the <html:a
                                    href="qtglobal.html#qFatal">qFatal</html:a>() function:</html:p>
                            <html:pre class="cpp">ASSERT failure in divide: <html:span
                                    class="string">"division by zero"</html:span><html:span
                                    class="operator">,</html:span> file div<html:span
                                    class="operator">.</html:span>cpp<html:span class="operator"
                                    >,</html:span> line <html:span class="number"
                                >7</html:span></html:pre>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#Q_ASSERT"
                                    >Q_ASSERT</html:a>(), <html:a href="qtglobal.html#qFatal"
                                    >qFatal</html:a>(), and <html:a
                                    href="qtdoc/testing-and-debugging.html#debugging-techniques"
                                    >Debugging Techniques</html:a>.</html:p>
                            <!-- @@@Q_ASSERT_X -->
                            <!-- $$$Q_ASSUME[overload1]$$$Q_ASSUMEbool -->
                            <html:h3 class="fn" id="Q_ASSUME"><html:a name="Q_ASSUME"
                                    ></html:a><html:span class="type">void</html:span>
                                <html:span class="name">Q_ASSUME</html:span>(<html:span class="type"
                                    >bool</html:span><html:i> expr</html:i>)</html:h3>
                            <html:p>Causes the compiler to assume that <html:i>expr</html:i> is
                                    <html:code>true</html:code>. This macro is useful for improving
                                code generation, by providing the compiler with hints about
                                conditions that it would not otherwise know about. However, there is
                                no guarantee that the compiler will actually use those
                                hints.</html:p>
                            <html:p>This macro could be considered a "lighter" version of <html:a
                                    href="qtglobal.html#Q_ASSERT">Q_ASSERT</html:a>(). While <html:a
                                    href="qtglobal.html#Q_ASSERT">Q_ASSERT</html:a> will abort the
                                program's execution if the condition is
                                <html:code>false</html:code>, Q_ASSUME will tell the compiler not to
                                generate code for those conditions. Therefore, it is important that
                                the assumptions always hold, otherwise undefined behaviour may
                                occur.</html:p>
                            <html:p>If <html:i>expr</html:i> is a constantly
                                    <html:code>false</html:code> condition, Q_ASSUME will tell the
                                compiler that the current code execution cannot be reached. That is,
                                Q_ASSUME(false) is equivalent to <html:a
                                    href="qtglobal.html#Q_UNREACHABLE"
                                >Q_UNREACHABLE</html:a>().</html:p>
                            <html:p>In debug builds the condition is enforced by an assert to
                                facilitate debugging.</html:p>
                            <html:p><html:b>Note: </html:b><html:a href="qtglobal.html#Q_LIKELY"
                                    >Q_LIKELY</html:a>() tells the compiler that the expression is
                                likely, but not the only possibility. Q_ASSUME tells the compiler
                                that it is the only possibility.</html:p><html:p>This function was
                                introduced in Qt 5.0.</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#Q_ASSERT"
                                    >Q_ASSERT</html:a>(), <html:a href="qtglobal.html#Q_UNREACHABLE"
                                    >Q_UNREACHABLE</html:a>(), and <html:a
                                    href="qtglobal.html#Q_LIKELY">Q_LIKELY</html:a>().</html:p>
                            <!-- @@@Q_ASSUME -->
                            <!-- $$$Q_BIG_ENDIAN[overload1]$$$Q_BIG_ENDIAN -->
                            <html:h3 class="fn" id="Q_BIG_ENDIAN"><html:a name="Q_BIG_ENDIAN"
                                    ></html:a><html:span class="name"
                                >Q_BIG_ENDIAN</html:span></html:h3>
                            <html:p>This macro represents a value you can compare to the macro
                                    <html:a href="qtglobal.html#Q_BYTE_ORDER">Q_BYTE_ORDER</html:a>
                                to determine the endian-ness of your system. In a big-endian system,
                                the most significant byte is stored at the lowest address. The other
                                bytes follow in decreasing order of significance.</html:p>
                            <html:pre class="cpp"><html:span class="preprocessor">#if Q_BYTE_ORDER
                                    == Q_BIG_ENDIAN</html:span>
                                <html:span class="operator">.</html:span><html:span class="operator"
                                    >.</html:span><html:span class="operator">.</html:span>
                                <html:span class="preprocessor">#endif</html:span></html:pre>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#Q_BYTE_ORDER">Q_BYTE_ORDER</html:a> and
                                    <html:a href="qtglobal.html#Q_LITTLE_ENDIAN"
                                    >Q_LITTLE_ENDIAN</html:a>.</html:p>
                            <!-- @@@Q_BIG_ENDIAN -->
                            <!-- $$$Q_BYTE_ORDER[overload1]$$$Q_BYTE_ORDER -->
                            <html:h3 class="fn" id="Q_BYTE_ORDER"><html:a name="Q_BYTE_ORDER"
                                    ></html:a><html:span class="name"
                                >Q_BYTE_ORDER</html:span></html:h3>
                            <html:p>This macro can be used to determine the byte order your system
                                uses for storing data in memory. i.e., whether your system is
                                little-endian or big-endian. It is set by Qt to one of the macros
                                    <html:a href="qtglobal.html#Q_LITTLE_ENDIAN"
                                    >Q_LITTLE_ENDIAN</html:a> or <html:a
                                    href="qtglobal.html#Q_BIG_ENDIAN">Q_BIG_ENDIAN</html:a>. You
                                normally won't need to worry about endian-ness, but you might, for
                                example if you need to know which byte of an integer or UTF-16
                                character is stored in the lowest address. Endian-ness is important
                                in networking, where computers with different values for
                                Q_BYTE_ORDER must pass data back and forth.</html:p>
                            <html:p>Use this macro as in the following examples.</html:p>
                            <html:pre class="cpp"><html:span class="preprocessor">#if Q_BYTE_ORDER
                                    == Q_BIG_ENDIAN</html:span>
                                <html:span class="operator">.</html:span><html:span class="operator"
                                    >.</html:span><html:span class="operator">.</html:span>
                                <html:span class="preprocessor">#endif</html:span>
                                <html:span class="keyword">or</html:span>
                                <html:span class="preprocessor">#if Q_BYTE_ORDER ==
                                    Q_LITTLE_ENDIAN</html:span>
                                <html:span class="operator">.</html:span><html:span class="operator"
                                    >.</html:span><html:span class="operator">.</html:span>
                                <html:span class="preprocessor">#endif</html:span></html:pre>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#Q_BIG_ENDIAN">Q_BIG_ENDIAN</html:a> and
                                    <html:a href="qtglobal.html#Q_LITTLE_ENDIAN"
                                    >Q_LITTLE_ENDIAN</html:a>.</html:p>
                            <!-- @@@Q_BYTE_ORDER -->
                            <!-- $$$Q_CC_BOR[overload1]$$$Q_CC_BOR -->
                            <html:h3 class="fn" id="Q_CC_BOR"><html:a name="Q_CC_BOR"
                                    ></html:a><html:span class="name">Q_CC_BOR</html:span></html:h3>
                            <html:p>Defined if the application is compiled using Borland/Turbo
                                C++.</html:p>
                            <!-- @@@Q_CC_BOR -->
                            <!-- $$$Q_CC_CDS[overload1]$$$Q_CC_CDS -->
                            <html:h3 class="fn" id="Q_CC_CDS"><html:a name="Q_CC_CDS"
                                    ></html:a><html:span class="name">Q_CC_CDS</html:span></html:h3>
                            <html:p>Defined if the application is compiled using Reliant
                                C++.</html:p>
                            <!-- @@@Q_CC_CDS -->
                            <!-- $$$Q_CC_COMEAU[overload1]$$$Q_CC_COMEAU -->
                            <html:h3 class="fn" id="Q_CC_COMEAU"><html:a name="Q_CC_COMEAU"
                                    ></html:a><html:span class="name"
                                >Q_CC_COMEAU</html:span></html:h3>
                            <html:p>Defined if the application is compiled using Comeau
                                C++.</html:p>
                            <!-- @@@Q_CC_COMEAU -->
                            <!-- $$$Q_CC_DEC[overload1]$$$Q_CC_DEC -->
                            <html:h3 class="fn" id="Q_CC_DEC"><html:a name="Q_CC_DEC"
                                    ></html:a><html:span class="name">Q_CC_DEC</html:span></html:h3>
                            <html:p>Defined if the application is compiled using DEC C++.</html:p>
                            <!-- @@@Q_CC_DEC -->
                            <!-- $$$Q_CC_EDG[overload1]$$$Q_CC_EDG -->
                            <html:h3 class="fn" id="Q_CC_EDG"><html:a name="Q_CC_EDG"
                                    ></html:a><html:span class="name">Q_CC_EDG</html:span></html:h3>
                            <html:p>Defined if the application is compiled using Edison Design Group
                                C++.</html:p>
                            <!-- @@@Q_CC_EDG -->
                            <!-- $$$Q_CC_GHS[overload1]$$$Q_CC_GHS -->
                            <html:h3 class="fn" id="Q_CC_GHS"><html:a name="Q_CC_GHS"
                                    ></html:a><html:span class="name">Q_CC_GHS</html:span></html:h3>
                            <html:p>Defined if the application is compiled using Green Hills
                                Optimizing C++ Compilers.</html:p>
                            <!-- @@@Q_CC_GHS -->
                            <!-- $$$Q_CC_GNU[overload1]$$$Q_CC_GNU -->
                            <html:h3 class="fn" id="Q_CC_GNU"><html:a name="Q_CC_GNU"
                                    ></html:a><html:span class="name">Q_CC_GNU</html:span></html:h3>
                            <html:p>Defined if the application is compiled using GNU C++.</html:p>
                            <!-- @@@Q_CC_GNU -->
                            <!-- $$$Q_CC_HIGHC[overload1]$$$Q_CC_HIGHC -->
                            <html:h3 class="fn" id="Q_CC_HIGHC"><html:a name="Q_CC_HIGHC"
                                    ></html:a><html:span class="name"
                                >Q_CC_HIGHC</html:span></html:h3>
                            <html:p>Defined if the application is compiled using MetaWare High
                                C/C++.</html:p>
                            <!-- @@@Q_CC_HIGHC -->
                            <!-- $$$Q_CC_HPACC[overload1]$$$Q_CC_HPACC -->
                            <html:h3 class="fn" id="Q_CC_HPACC"><html:a name="Q_CC_HPACC"
                                    ></html:a><html:span class="name"
                                >Q_CC_HPACC</html:span></html:h3>
                            <html:p>Defined if the application is compiled using HP aC++.</html:p>
                            <!-- @@@Q_CC_HPACC -->
                            <!-- $$$Q_CC_INTEL[overload1]$$$Q_CC_INTEL -->
                            <html:h3 class="fn" id="Q_CC_INTEL"><html:a name="Q_CC_INTEL"
                                    ></html:a><html:span class="name"
                                >Q_CC_INTEL</html:span></html:h3>
                            <html:p>Defined if the application is compiled using Intel C++ for
                                Linux, Intel C++ for Windows.</html:p>
                            <!-- @@@Q_CC_INTEL -->
                            <!-- $$$Q_CC_KAI[overload1]$$$Q_CC_KAI -->
                            <html:h3 class="fn" id="Q_CC_KAI"><html:a name="Q_CC_KAI"
                                    ></html:a><html:span class="name">Q_CC_KAI</html:span></html:h3>
                            <html:p>Defined if the application is compiled using KAI C++.</html:p>
                            <!-- @@@Q_CC_KAI -->
                            <!-- $$$Q_CC_MIPS[overload1]$$$Q_CC_MIPS -->
                            <html:h3 class="fn" id="Q_CC_MIPS"><html:a name="Q_CC_MIPS"
                                    ></html:a><html:span class="name"
                                >Q_CC_MIPS</html:span></html:h3>
                            <html:p>Defined if the application is compiled using MIPSpro
                                C++.</html:p>
                            <!-- @@@Q_CC_MIPS -->
                            <!-- $$$Q_CC_MSVC[overload1]$$$Q_CC_MSVC -->
                            <html:h3 class="fn" id="Q_CC_MSVC"><html:a name="Q_CC_MSVC"
                                    ></html:a><html:span class="name"
                                >Q_CC_MSVC</html:span></html:h3>
                            <html:p>Defined if the application is compiled using Microsoft Visual
                                C/C++, Intel C++ for Windows.</html:p>
                            <!-- @@@Q_CC_MSVC -->
                            <!-- $$$Q_CC_OC[overload1]$$$Q_CC_OC -->
                            <html:h3 class="fn" id="Q_CC_OC"><html:a name="Q_CC_OC"
                                    ></html:a><html:span class="name">Q_CC_OC</html:span></html:h3>
                            <html:p>Defined if the application is compiled using CenterLine
                                C++.</html:p>
                            <!-- @@@Q_CC_OC -->
                            <!-- $$$Q_CC_PGI[overload1]$$$Q_CC_PGI -->
                            <html:h3 class="fn" id="Q_CC_PGI"><html:a name="Q_CC_PGI"
                                    ></html:a><html:span class="name">Q_CC_PGI</html:span></html:h3>
                            <html:p>Defined if the application is compiled using Portland Group
                                C++.</html:p>
                            <!-- @@@Q_CC_PGI -->
                            <!-- $$$Q_CC_SUN[overload1]$$$Q_CC_SUN -->
                            <html:h3 class="fn" id="Q_CC_SUN"><html:a name="Q_CC_SUN"
                                    ></html:a><html:span class="name">Q_CC_SUN</html:span></html:h3>
                            <html:p>Defined if the application is compiled using Forte Developer, or
                                Sun Studio C++.</html:p>
                            <!-- @@@Q_CC_SUN -->
                            <!-- $$$Q_CC_SYM[overload1]$$$Q_CC_SYM -->
                            <html:h3 class="fn" id="Q_CC_SYM"><html:a name="Q_CC_SYM"
                                    ></html:a><html:span class="name">Q_CC_SYM</html:span></html:h3>
                            <html:p>Defined if the application is compiled using Digital Mars C/C++
                                (used to be Symantec C++).</html:p>
                            <!-- @@@Q_CC_SYM -->
                            <!-- $$$Q_CC_USLC[overload1]$$$Q_CC_USLC -->
                            <html:h3 class="fn" id="Q_CC_USLC"><html:a name="Q_CC_USLC"
                                    ></html:a><html:span class="name"
                                >Q_CC_USLC</html:span></html:h3>
                            <html:p>Defined if the application is compiled using SCO OUDK and
                                UDK.</html:p>
                            <!-- @@@Q_CC_USLC -->
                            <!-- $$$Q_CC_WAT[overload1]$$$Q_CC_WAT -->
                            <html:h3 class="fn" id="Q_CC_WAT"><html:a name="Q_CC_WAT"
                                    ></html:a><html:span class="name">Q_CC_WAT</html:span></html:h3>
                            <html:p>Defined if the application is compiled using Watcom
                                C++.</html:p>
                            <!-- @@@Q_CC_WAT -->
                            <!-- $$$Q_CHECK_PTR[overload1]$$$Q_CHECK_PTRvoid* -->
                            <html:h3 class="fn" id="Q_CHECK_PTRx"><html:a name="Q_CHECK_PTRx"
                                    ></html:a><html:span class="type">void</html:span>
                                <html:span class="name">Q_CHECK_PTR</html:span>(<html:span
                                    class="type">void</html:span> *<html:i>
                                pointer</html:i>)</html:h3>
                            <html:p>If <html:i>pointer</html:i> is 0, prints a warning message
                                containing the source code's file name and line number, saying that
                                the program ran out of memory.</html:p>
                            <html:p>Q_CHECK_PTR does nothing if <html:code>QT_NO_DEBUG</html:code>
                                was defined during compilation.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="type">int</html:span>
                                <html:span class="operator">*</html:span>a; Q_CHECK_PTR(a <html:span
                                    class="operator">=</html:span>
                                <html:span class="keyword">new</html:span>
                                <html:span class="type">int</html:span><html:span class="operator"
                                    >[</html:span><html:span class="number">80</html:span><html:span
                                    class="operator">]</html:span>); <html:span class="comment">//
                                    WRONG!</html:span> a <html:span class="operator">=</html:span>
                                <html:span class="keyword">new</html:span> (nothrow) <html:span
                                    class="type">int</html:span><html:span class="operator"
                                    >[</html:span><html:span class="number">80</html:span><html:span
                                    class="operator">]</html:span>; <html:span class="comment">//
                                    Right</html:span> Q_CHECK_PTR(a);</html:pre>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#qWarning"
                                    >qWarning</html:a>() and <html:a
                                    href="qtdoc/testing-and-debugging.html#debugging-techniques"
                                    >Debugging Techniques</html:a>.</html:p>
                            <!-- @@@Q_CHECK_PTR -->
                            <!-- $$$Q_DECLARE_TYPEINFO[overload1]$$$Q_DECLARE_TYPEINFO -->
                            <html:h3 class="fn" id="Q_DECLARE_TYPEINFO"><html:a
                                    name="Q_DECLARE_TYPEINFO"></html:a><html:span class="name"
                                    >Q_DECLARE_TYPEINFO</html:span>(<html:i> Type</html:i>, <html:i>
                                    Flags</html:i>)</html:h3>
                            <html:p>You can use this macro to specify information about a custom
                                type <html:i>Type</html:i>. With accurate type information, Qt's
                                    <html:a href="containers.html">generic containers</html:a> can
                                choose appropriate storage methods and algorithms.</html:p>
                            <html:p><html:i>Flags</html:i> can be one of the following:</html:p>
                            <html:ul>
                                <html:li><html:code>Q_PRIMITIVE_TYPE</html:code> specifies that
                                        <html:i>Type</html:i> is a POD (plain old data) type with no
                                    constructor or destructor, or else a type where every bit
                                    pattern is a valid object and memcpy() creates a valid
                                    independent copy of the object.</html:li>
                                <html:li><html:code>Q_MOVABLE_TYPE</html:code> specifies that
                                        <html:i>Type</html:i> has a constructor and/or a destructor
                                    but can be moved in memory using
                                    <html:code>memcpy()</html:code>.</html:li>
                                <html:li><html:code>Q_COMPLEX_TYPE</html:code> (the default)
                                    specifies that <html:i>Type</html:i> has constructors and/or a
                                    destructor and that it may not be moved in memory.</html:li>
                            </html:ul>
                            <html:p>Example of a "primitive" type:</html:p>
                            <html:pre class="cpp"><html:span class="keyword">struct</html:span>
                                Point2D { <html:span class="type">int</html:span> x; <html:span
                                    class="type">int</html:span> y; };
                                    Q_DECLARE_TYPEINFO(Point2D<html:span class="operator"
                                    >,</html:span> Q_PRIMITIVE_TYPE);</html:pre>
                            <html:p>An example of a non-POD "primitive" type is <html:a
                                    href="quuid.html">QUuid</html:a>: Even though <html:a
                                    href="quuid.html">QUuid</html:a> has constructors (and therefore
                                isn't POD), every bit pattern still represents a valid object, and
                                memcpy() can be used to create a valid independent copy of a <html:a
                                    href="quuid.html">QUuid</html:a> object.</html:p>
                            <html:p>Example of a movable type:</html:p>
                            <html:pre class="cpp"><html:span class="keyword">class</html:span>
                                Point2D { <html:span class="keyword">public</html:span>: Point2D() {
                                data <html:span class="operator">=</html:span>
                                <html:span class="keyword">new</html:span>
                                <html:span class="type">int</html:span><html:span class="operator"
                                    >[</html:span><html:span class="number">2</html:span><html:span
                                    class="operator">]</html:span>; } Point2D(<html:span
                                    class="keyword">const</html:span> Point2D <html:span
                                    class="operator">&amp;</html:span>other) { <html:span
                                    class="operator">.</html:span><html:span class="operator"
                                    >.</html:span><html:span class="operator">.</html:span> }
                                    <html:span class="operator">~</html:span>Point2D() { <html:span
                                    class="keyword">delete</html:span><html:span class="operator"
                                    >[</html:span><html:span class="operator">]</html:span> data; }
                                Point2D <html:span class="operator">&amp;</html:span><html:span
                                    class="keyword">operator</html:span><html:span class="operator"
                                    >=</html:span>(<html:span class="keyword">const</html:span>
                                Point2D <html:span class="operator">&amp;</html:span>other) {
                                    <html:span class="operator">.</html:span><html:span
                                    class="operator">.</html:span><html:span class="operator"
                                    >.</html:span> } <html:span class="type">int</html:span> x()
                                    <html:span class="keyword">const</html:span> { <html:span
                                    class="keyword">return</html:span> data<html:span
                                    class="operator">[</html:span><html:span class="number"
                                    >0</html:span><html:span class="operator">]</html:span>; }
                                    <html:span class="type">int</html:span> y() <html:span
                                    class="keyword">const</html:span> { <html:span class="keyword"
                                    >return</html:span> data<html:span class="operator"
                                    >[</html:span><html:span class="number">1</html:span><html:span
                                    class="operator">]</html:span>; } <html:span class="keyword"
                                    >private</html:span>: <html:span class="type">int</html:span>
                                <html:span class="operator">*</html:span>data; };
                                    Q_DECLARE_TYPEINFO(Point2D<html:span class="operator"
                                    >,</html:span> Q_MOVABLE_TYPE);</html:pre>
                            <!-- @@@Q_DECLARE_TYPEINFO -->
                            <!-- $$$Q_DECL_CONSTEXPR[overload1]$$$Q_DECL_CONSTEXPR -->
                            <html:h3 class="fn" id="Q_DECL_CONSTEXPR"><html:a
                                    name="Q_DECL_CONSTEXPR"></html:a><html:span class="name"
                                    >Q_DECL_CONSTEXPR</html:span></html:h3>
                            <html:p>This macro can be used to declare variable that should be
                                constructed at compile-time, or an inline function that can be
                                computed at compile-time.</html:p>
                            <html:p>It expands to "constexpr" if your compiler supports that C++11
                                keyword, or to nothing otherwise.</html:p>
                            <!-- @@@Q_DECL_CONSTEXPR -->
                            <!-- $$$Q_DECL_EXPORT[overload1]$$$Q_DECL_EXPORT -->
                            <html:h3 class="fn" id="Q_DECL_EXPORT"><html:a name="Q_DECL_EXPORT"
                                    ></html:a><html:span class="name"
                                >Q_DECL_EXPORT</html:span></html:h3>
                            <html:p>This macro marks a symbol for shared library export (see <html:a
                                    href="qtdoc/sharedlibrary.html">Creating Shared
                                    Libraries</html:a>).</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#Q_DECL_IMPORT"
                                >Q_DECL_IMPORT</html:a>.</html:p>
                            <!-- @@@Q_DECL_EXPORT -->
                            <!-- $$$Q_DECL_FINAL[overload1]$$$Q_DECL_FINAL -->
                            <html:h3 class="fn" id="Q_DECL_FINAL"><html:a name="Q_DECL_FINAL"
                                    ></html:a><html:span class="name"
                                >Q_DECL_FINAL</html:span></html:h3>
                            <html:p>This macro can be used to declare an overriding virtual or a
                                class as "final", with Java semantics. Further-derived classes can
                                then no longer override this virtual function, or inherit from this
                                class, respectively.</html:p>
                            <html:p>It expands to "final" if your compiler supports that C++11
                                contextual keyword, or something non-standard if your compiler
                                supports something close enough to the C++11 semantics, or to
                                nothing otherwise.</html:p>
                            <html:p>The macro goes at the end of the function, usually after the
                                    <html:code>const</html:code>, if any:</html:p>
                            <html:pre class="cpp"><html:span class="comment">// more-derived classes
                                    no longer permitted to override this:</html:span>
                                <html:span class="keyword">virtual</html:span>
                                <html:span class="type">void</html:span> MyWidget<html:span
                                    class="operator">::</html:span>paintEvent(<html:span
                                    class="type"><html:a href="qtgui/qpaintevent.html"
                                        >QPaintEvent</html:a></html:span><html:span class="operator"
                                    >*</html:span>) Q_DECL_FINAL;</html:pre>
                            <html:p>For classes, it goes in front of the <html:code>:</html:code> in
                                the class definition, if any:</html:p>
                            <html:pre class="cpp"><html:span class="keyword">class</html:span>
                                <html:span class="type"><html:a href="qrect.html"
                                    >QRect</html:a></html:span> Q_DECL_FINAL { <html:span
                                    class="comment">// cannot be derived from</html:span>
                                <html:span class="comment">// ...</html:span> };</html:pre>
                            <html:p>This function was introduced in Qt 5.0.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#Q_DECL_OVERRIDE"
                                >Q_DECL_OVERRIDE</html:a>.</html:p>
                            <!-- @@@Q_DECL_FINAL -->
                            <!-- $$$Q_DECL_IMPORT[overload1]$$$Q_DECL_IMPORT -->
                            <html:h3 class="fn" id="Q_DECL_IMPORT"><html:a name="Q_DECL_IMPORT"
                                    ></html:a><html:span class="name"
                                >Q_DECL_IMPORT</html:span></html:h3>
                            <html:p>This macro declares a symbol to be an import from a shared
                                library (see <html:a href="qtdoc/sharedlibrary.html">Creating Shared
                                    Libraries</html:a>).</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#Q_DECL_EXPORT"
                                >Q_DECL_EXPORT</html:a>.</html:p>
                            <!-- @@@Q_DECL_IMPORT -->
                            <!-- $$$Q_DECL_NOEXCEPT[overload1]$$$Q_DECL_NOEXCEPT -->
                            <html:h3 class="fn" id="Q_DECL_NOEXCEPT"><html:a name="Q_DECL_NOEXCEPT"
                                    ></html:a><html:span class="name"
                                >Q_DECL_NOEXCEPT</html:span></html:h3>
                            <html:p>This macro marks a function as never throwing. If the function
                                does nevertheless throw, the behaviour is defined: std::terminate()
                                is called.</html:p>
                            <html:p>The macro expands to C++11 noexcept, if available, or to nothing
                                otherwise.</html:p>
                            <html:p>If you need the operator version of C++11 noexcept, use <html:a
                                    href="qtglobal.html#Q_DECL_NOEXCEPT_EXPR"
                                    >Q_DECL_NOEXCEPT_EXPR</html:a>(x).</html:p>
                            <html:p>If you don't need C++11 noexcept semantics, e.g. because your
                                function can't possibly throw, don't use this macro, use <html:a
                                    href="qtglobal.html#Q_DECL_NOTHROW">Q_DECL_NOTHROW</html:a>
                                instead.</html:p>
                            <html:p>This function was introduced in Qt 5.0.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#Q_DECL_NOTHROW">Q_DECL_NOTHROW</html:a> and
                                    <html:a href="qtglobal.html#Q_DECL_NOEXCEPT_EXPR"
                                    >Q_DECL_NOEXCEPT_EXPR</html:a>().</html:p>
                            <!-- @@@Q_DECL_NOEXCEPT -->
                            <!-- $$$Q_DECL_NOEXCEPT_EXPR[overload1]$$$Q_DECL_NOEXCEPT_EXPR -->
                            <html:h3 class="fn" id="Q_DECL_NOEXCEPT_EXPR"><html:a
                                    name="Q_DECL_NOEXCEPT_EXPR"></html:a><html:span class="name"
                                    >Q_DECL_NOEXCEPT_EXPR</html:span>(<html:i> x</html:i>)</html:h3>
                            <html:p>This macro marks a function as non-throwing if
                                    <html:i>x</html:i> is <html:code>true</html:code>. If the
                                function does nevertheless throw, the behaviour is defined:
                                std::terminate() is called.</html:p>
                            <html:p>The macro expands to C++11 noexcept(x), if available, or to
                                nothing otherwise.</html:p>
                            <html:p>If you need the always-true version of C++11 noexcept, use
                                    <html:a href="qtglobal.html#Q_DECL_NOEXCEPT"
                                    >Q_DECL_NOEXCEPT</html:a>.</html:p>
                            <html:p>If you don't need C++11 noexcept semantics, e.g. because your
                                function can't possibly throw, don't use this macro, use <html:a
                                    href="qtglobal.html#Q_DECL_NOTHROW">Q_DECL_NOTHROW</html:a>
                                instead.</html:p>
                            <html:p>This function was introduced in Qt 5.0.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#Q_DECL_NOTHROW">Q_DECL_NOTHROW</html:a> and
                                    <html:a href="qtglobal.html#Q_DECL_NOEXCEPT"
                                    >Q_DECL_NOEXCEPT</html:a>.</html:p>
                            <!-- @@@Q_DECL_NOEXCEPT_EXPR -->
                            <!-- $$$Q_DECL_NOTHROW[overload1]$$$Q_DECL_NOTHROW -->
                            <html:h3 class="fn" id="Q_DECL_NOTHROW"><html:a name="Q_DECL_NOTHROW"
                                    ></html:a><html:span class="name"
                                >Q_DECL_NOTHROW</html:span></html:h3>
                            <html:p>This macro marks a function as never throwing, under no
                                circumstances. If the function does nevertheless throw, the
                                behaviour is undefined.</html:p>
                            <html:p>The macro expands to either "throw()", if that has some benefit
                                on the compiler, or to C++11 noexcept, if available, or to nothing
                                otherwise.</html:p>
                            <html:p>If you need C++11 noexcept semantics, don't use this macro, use
                                    <html:a href="qtglobal.html#Q_DECL_NOEXCEPT"
                                    >Q_DECL_NOEXCEPT</html:a>/<html:a
                                    href="qtglobal.html#Q_DECL_NOEXCEPT_EXPR"
                                    >Q_DECL_NOEXCEPT_EXPR</html:a> instead.</html:p>
                            <html:p>This function was introduced in Qt 5.0.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#Q_DECL_NOEXCEPT">Q_DECL_NOEXCEPT</html:a>
                                and <html:a href="qtglobal.html#Q_DECL_NOEXCEPT_EXPR"
                                    >Q_DECL_NOEXCEPT_EXPR</html:a>().</html:p>
                            <!-- @@@Q_DECL_NOTHROW -->
                            <!-- $$$Q_DECL_OVERRIDE[overload1]$$$Q_DECL_OVERRIDE -->
                            <html:h3 class="fn" id="Q_DECL_OVERRIDE"><html:a name="Q_DECL_OVERRIDE"
                                    ></html:a><html:span class="name"
                                >Q_DECL_OVERRIDE</html:span></html:h3>
                            <html:p>This macro can be used to declare an overriding virtual
                                function. Use of this markup will allow the compiler to generate an
                                error if the overriding virtual function does not in fact override
                                anything.</html:p>
                            <html:p>It expands to "override" if your compiler supports that C++11
                                contextual keyword, or to nothing otherwise.</html:p>
                            <html:p>The macro goes at the end of the function, usually after the
                                    <html:code>const</html:code>, if any:</html:p>
                            <html:pre class="cpp"><html:span class="comment">// generate error if
                                    this doesn't actually override anything:</html:span>
                                <html:span class="keyword">virtual</html:span>
                                <html:span class="type">void</html:span> MyWidget<html:span
                                    class="operator">::</html:span>paintEvent(<html:span
                                    class="type"><html:a href="qtgui/qpaintevent.html"
                                        >QPaintEvent</html:a></html:span><html:span class="operator"
                                    >*</html:span>) Q_DECL_OVERRIDE;</html:pre>
                            <html:p>This function was introduced in Qt 5.0.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#Q_DECL_FINAL"
                                >Q_DECL_FINAL</html:a>.</html:p>
                            <!-- @@@Q_DECL_OVERRIDE -->
                            <!-- $$$Q_FOREACH[overload1]$$$Q_FOREACH -->
                            <html:h3 class="fn" id="Q_FOREACH"><html:a name="Q_FOREACH"
                                    ></html:a><html:span class="name">Q_FOREACH</html:span>(<html:i>
                                    variable</html:i>, <html:i> container</html:i>)</html:h3>
                            <html:p>Same as foreach(<html:i>variable</html:i>,
                                    <html:i>container</html:i>).</html:p>
                            <html:p>This macro is available even when
                                    <html:code>no_keywords</html:code> is specified using the
                                    <html:code>.pro</html:code> file's <html:code>CONFIG</html:code>
                                variable.</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#foreach"
                                    >foreach</html:a>().</html:p>
                            <!-- @@@Q_FOREACH -->
                            <!-- $$$Q_FOREVER[overload1]$$$Q_FOREVER -->
                            <html:h3 class="fn" id="Q_FOREVER"><html:a name="Q_FOREVER"
                                    ></html:a><html:span class="name"
                                >Q_FOREVER</html:span></html:h3>
                            <html:p>Same as <html:a href="qtglobal.html#forever"
                                >forever</html:a>.</html:p>
                            <html:p>This macro is available even when
                                    <html:code>no_keywords</html:code> is specified using the
                                    <html:code>.pro</html:code> file's <html:code>CONFIG</html:code>
                                variable.</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#foreach"
                                    >foreach</html:a>().</html:p>
                            <!-- @@@Q_FOREVER -->
                            <!-- $$$Q_FORWARD_DECLARE_CF_TYPE[overload1]$$$Q_FORWARD_DECLARE_CF_TYPE -->
                            <html:h3 class="fn" id="Q_FORWARD_DECLARE_CF_TYPE"><html:a
                                    name="Q_FORWARD_DECLARE_CF_TYPE"></html:a><html:span
                                    class="name">Q_FORWARD_DECLARE_CF_TYPE</html:span>(<html:i>
                                    type</html:i>)</html:h3>
                            <html:p>Forward-declares a Core Foundation <html:i>type</html:i>. This
                                includes the actual type and the ref type. For example,
                                Q_FORWARD_DECLARE_CF_TYPE(CFString) declares __CFString and
                                CFStringRef.</html:p>
                            <html:p>This function was introduced in Qt 5.2.</html:p>
                            <!-- @@@Q_FORWARD_DECLARE_CF_TYPE -->
                            <!-- $$$Q_FORWARD_DECLARE_MUTABLE_CF_TYPE[overload1]$$$Q_FORWARD_DECLARE_MUTABLE_CF_TYPE -->
                            <html:h3 class="fn" id="Q_FORWARD_DECLARE_MUTABLE_CF_TYPE"><html:a
                                    name="Q_FORWARD_DECLARE_MUTABLE_CF_TYPE"></html:a><html:span
                                    class="name"
                                    >Q_FORWARD_DECLARE_MUTABLE_CF_TYPE</html:span>(<html:i>
                                    type</html:i>)</html:h3>
                            <html:p>Forward-declares a mutable Core Foundation
                                <html:i>type</html:i>. This includes the actual type and the ref
                                type. For example,
                                Q_FORWARD_DECLARE_MUTABLE_CF_TYPE(CFMutableString) declares
                                __CFMutableString and CFMutableStringRef.</html:p>
                            <html:p>This function was introduced in Qt 5.2.</html:p>
                            <!-- @@@Q_FORWARD_DECLARE_MUTABLE_CF_TYPE -->
                            <!-- $$$Q_FORWARD_DECLARE_OBJC_CLASS[overload1]$$$Q_FORWARD_DECLARE_OBJC_CLASS -->
                            <html:h3 class="fn" id="Q_FORWARD_DECLARE_OBJC_CLASS"><html:a
                                    name="Q_FORWARD_DECLARE_OBJC_CLASS"></html:a><html:span
                                    class="name">Q_FORWARD_DECLARE_OBJC_CLASS</html:span>(<html:i>
                                    classname</html:i>)</html:h3>
                            <html:p>Forward-declares an Objective-C <html:i>classname</html:i> in a
                                manner such that it can be compiled as either Objective-C or
                                C++.</html:p>
                            <html:p>This is primarily intended for use in header files that may be
                                included by both Objective-C and C++ source files.</html:p>
                            <html:p>This function was introduced in Qt 5.2.</html:p>
                            <!-- @@@Q_FORWARD_DECLARE_OBJC_CLASS -->
                            <!-- $$$Q_FUNC_INFO[overload1]$$$Q_FUNC_INFO -->
                            <html:h3 class="fn" id="Q_FUNC_INFO"><html:a name="Q_FUNC_INFO"
                                ></html:a>const <html:span class="type">char</html:span> *
                                    <html:span class="name">Q_FUNC_INFO</html:span>()</html:h3>
                            <html:p>Expands to a string that describe the function the macro resides
                                in. How this string looks more specifically is compiler dependent.
                                With GNU GCC it is typically the function signature, while with
                                other compilers it might be the line and column number.</html:p>
                            <html:p>Q_FUNC_INFO can be conveniently used with <html:a
                                    href="qtglobal.html#qDebug">qDebug</html:a>(). For example, this
                                function:</html:p>
                            <html:pre class="cpp"><html:span class="keyword"
                                    >template</html:span><html:span class="operator"
                                    >&lt;</html:span><html:span class="keyword">typename</html:span>
                                    TInputType<html:span class="operator">&gt;</html:span>
                                <html:span class="keyword">const</html:span> TInputType <html:span
                                    class="operator">&amp;</html:span>myMin(<html:span
                                    class="keyword">const</html:span> TInputType <html:span
                                    class="operator">&amp;</html:span>value1<html:span
                                    class="operator">,</html:span>
                                <html:span class="keyword">const</html:span> TInputType <html:span
                                    class="operator">&amp;</html:span>value2) { <html:a
                                    href="qtglobal.html#qDebug">qDebug</html:a>() <html:span
                                    class="operator">&lt;</html:span><html:span class="operator"
                                    >&lt;</html:span> Q_FUNC_INFO <html:span class="operator"
                                    >&lt;</html:span><html:span class="operator">&lt;</html:span>
                                <html:span class="string">"was called with value1:"</html:span>
                                <html:span class="operator">&lt;</html:span><html:span
                                    class="operator">&lt;</html:span> value1 <html:span
                                    class="operator">&lt;</html:span><html:span class="operator"
                                    >&lt;</html:span>
                                <html:span class="string">"value2:"</html:span>
                                <html:span class="operator">&lt;</html:span><html:span
                                    class="operator">&lt;</html:span> value2; <html:span
                                    class="keyword">if</html:span>(value1 <html:span
                                    class="operator">&lt;</html:span> value2) <html:span
                                    class="keyword">return</html:span> value1; <html:span
                                    class="keyword">else</html:span>
                                <html:span class="keyword">return</html:span> value2; }</html:pre>
                            <html:p>when instantiated with the integer type, will with the GCC
                                compiler produce:</html:p>
                            <html:p><html:code>const TInputType&amp; myMin(const TInputType&amp;,
                                    const TInputType&amp;) [with TInputType = int] was called with
                                    value1: 3 value2: 4</html:code></html:p>
                            <html:p>If this macro is used outside a function, the behavior is
                                undefined.</html:p>
                            <!-- @@@Q_FUNC_INFO -->
                            <!-- $$$Q_INT64_C[overload1]$$$Q_INT64_C -->
                            <html:h3 class="fn" id="Q_INT64_C"><html:a name="Q_INT64_C"
                                    ></html:a><html:span class="type"><html:a
                                        href="qtglobal.html#qint64-typedef"
                                    >qint64</html:a></html:span>
                                <html:span class="name">Q_INT64_C</html:span>(<html:i>
                                    literal</html:i>)</html:h3>
                            <html:p>Wraps the signed 64-bit integer <html:i>literal</html:i> in a
                                platform-independent way.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="type"><html:a
                                        href="qtglobal.html#qint64-typedef"
                                    >qint64</html:a></html:span> value <html:span class="operator"
                                    >=</html:span> Q_INT64_C(<html:span class="number"
                                    >932838457459459</html:span>);</html:pre>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#qint64-typedef">qint64</html:a> and <html:a
                                    href="qtglobal.html#Q_UINT64_C">Q_UINT64_C</html:a>().</html:p>
                            <!-- @@@Q_INT64_C -->
                            <!-- $$$Q_LIKELY[overload1]$$$Q_LIKELY -->
                            <html:h3 class="fn" id="Q_LIKELY"><html:a name="Q_LIKELY"
                                    ></html:a><html:span class="name">Q_LIKELY</html:span>(<html:i>
                                    expr</html:i>)</html:h3>
                            <html:p>Hints to the compiler that the enclosed condition,
                                    <html:i>expr</html:i>, is likely to evaluate to
                                    <html:code>true</html:code>.</html:p>
                            <html:p>Use of this macro can help the compiler to optimize the
                                code.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp">
                                <html:span class="comment">// the condition inside the "if" will be
                                    successful most of the times</html:span>
                                <html:span class="keyword">for</html:span> (<html:span class="type"
                                    >int</html:span> i <html:span class="operator">=</html:span>
                                <html:span class="number">1</html:span>; i <html:span
                                    class="operator">&lt;</html:span><html:span class="operator"
                                    >=</html:span>
                                <html:span class="number">365</html:span>; i<html:span
                                    class="operator">+</html:span><html:span class="operator"
                                    >+</html:span>) { <html:span class="keyword">if</html:span>
                                (Q_LIKELY(isWorkingDay(i))) { <html:span class="operator"
                                    >.</html:span><html:span class="operator"
                                    >.</html:span><html:span class="operator">.</html:span> }
                                    <html:span class="operator">.</html:span><html:span
                                    class="operator">.</html:span><html:span class="operator"
                                    >.</html:span> }</html:pre>
                            <html:p>This function was introduced in Qt 4.8.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#Q_UNLIKELY">Q_UNLIKELY</html:a>().</html:p>
                            <!-- @@@Q_LIKELY -->
                            <!-- $$$Q_LITTLE_ENDIAN[overload1]$$$Q_LITTLE_ENDIAN -->
                            <html:h3 class="fn" id="Q_LITTLE_ENDIAN"><html:a name="Q_LITTLE_ENDIAN"
                                    ></html:a><html:span class="name"
                                >Q_LITTLE_ENDIAN</html:span></html:h3>
                            <html:p>This macro represents a value you can compare to the macro
                                    <html:a href="qtglobal.html#Q_BYTE_ORDER">Q_BYTE_ORDER</html:a>
                                to determine the endian-ness of your system. In a little-endian
                                system, the least significant byte is stored at the lowest address.
                                The other bytes follow in increasing order of significance.</html:p>
                            <html:pre class="cpp"><html:span class="preprocessor">#if Q_BYTE_ORDER
                                    == Q_LITTLE_ENDIAN</html:span>
                                <html:span class="operator">.</html:span><html:span class="operator"
                                    >.</html:span><html:span class="operator">.</html:span>
                                <html:span class="preprocessor">#endif</html:span></html:pre>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#Q_BYTE_ORDER">Q_BYTE_ORDER</html:a> and
                                    <html:a href="qtglobal.html#Q_BIG_ENDIAN"
                                >Q_BIG_ENDIAN</html:a>.</html:p>
                            <!-- @@@Q_LITTLE_ENDIAN -->
                            <!-- $$$Q_OS_AIX[overload1]$$$Q_OS_AIX -->
                            <html:h3 class="fn" id="Q_OS_AIX"><html:a name="Q_OS_AIX"
                                    ></html:a><html:span class="name">Q_OS_AIX</html:span></html:h3>
                            <html:p>Defined on AIX.</html:p>
                            <!-- @@@Q_OS_AIX -->
                            <!-- $$$Q_OS_ANDROID[overload1]$$$Q_OS_ANDROID -->
                            <html:h3 class="fn" id="Q_OS_ANDROID"><html:a name="Q_OS_ANDROID"
                                    ></html:a><html:span class="name"
                                >Q_OS_ANDROID</html:span></html:h3>
                            <html:p>Defined on Android.</html:p>
                            <!-- @@@Q_OS_ANDROID -->
                            <!-- $$$Q_OS_BSD4[overload1]$$$Q_OS_BSD4 -->
                            <html:h3 class="fn" id="Q_OS_BSD4"><html:a name="Q_OS_BSD4"
                                    ></html:a><html:span class="name"
                                >Q_OS_BSD4</html:span></html:h3>
                            <html:p>Defined on Any BSD 4.4 system.</html:p>
                            <!-- @@@Q_OS_BSD4 -->
                            <!-- $$$Q_OS_BSDI[overload1]$$$Q_OS_BSDI -->
                            <html:h3 class="fn" id="Q_OS_BSDI"><html:a name="Q_OS_BSDI"
                                    ></html:a><html:span class="name"
                                >Q_OS_BSDI</html:span></html:h3>
                            <html:p>Defined on BSD/OS.</html:p>
                            <!-- @@@Q_OS_BSDI -->
                            <!-- $$$Q_OS_CYGWIN[overload1]$$$Q_OS_CYGWIN -->
                            <html:h3 class="fn" id="Q_OS_CYGWIN"><html:a name="Q_OS_CYGWIN"
                                    ></html:a><html:span class="name"
                                >Q_OS_CYGWIN</html:span></html:h3>
                            <html:p>Defined on Cygwin.</html:p>
                            <!-- @@@Q_OS_CYGWIN -->
                            <!-- $$$Q_OS_DARWIN[overload1]$$$Q_OS_DARWIN -->
                            <html:h3 class="fn" id="Q_OS_DARWIN"><html:a name="Q_OS_DARWIN"
                                    ></html:a><html:span class="name"
                                >Q_OS_DARWIN</html:span></html:h3>
                            <html:p>Defined on Darwin-based operating systems such as OS X and iOS,
                                including any open source version(s) of Darwin.</html:p>
                            <!-- @@@Q_OS_DARWIN -->
                            <!-- $$$Q_OS_DGUX[overload1]$$$Q_OS_DGUX -->
                            <html:h3 class="fn" id="Q_OS_DGUX"><html:a name="Q_OS_DGUX"
                                    ></html:a><html:span class="name"
                                >Q_OS_DGUX</html:span></html:h3>
                            <html:p>Defined on DG/UX.</html:p>
                            <!-- @@@Q_OS_DGUX -->
                            <!-- $$$Q_OS_DYNIX[overload1]$$$Q_OS_DYNIX -->
                            <html:h3 class="fn" id="Q_OS_DYNIX"><html:a name="Q_OS_DYNIX"
                                    ></html:a><html:span class="name"
                                >Q_OS_DYNIX</html:span></html:h3>
                            <html:p>Defined on DYNIX/ptx.</html:p>
                            <!-- @@@Q_OS_DYNIX -->
                            <!-- $$$Q_OS_FREEBSD[overload1]$$$Q_OS_FREEBSD -->
                            <html:h3 class="fn" id="Q_OS_FREEBSD"><html:a name="Q_OS_FREEBSD"
                                    ></html:a><html:span class="name"
                                >Q_OS_FREEBSD</html:span></html:h3>
                            <html:p>Defined on FreeBSD.</html:p>
                            <!-- @@@Q_OS_FREEBSD -->
                            <!-- $$$Q_OS_HPUX[overload1]$$$Q_OS_HPUX -->
                            <html:h3 class="fn" id="Q_OS_HPUX"><html:a name="Q_OS_HPUX"
                                    ></html:a><html:span class="name"
                                >Q_OS_HPUX</html:span></html:h3>
                            <html:p>Defined on HP-UX.</html:p>
                            <!-- @@@Q_OS_HPUX -->
                            <!-- $$$Q_OS_HURD[overload1]$$$Q_OS_HURD -->
                            <html:h3 class="fn" id="Q_OS_HURD"><html:a name="Q_OS_HURD"
                                    ></html:a><html:span class="name"
                                >Q_OS_HURD</html:span></html:h3>
                            <html:p>Defined on GNU Hurd.</html:p>
                            <!-- @@@Q_OS_HURD -->
                            <!-- $$$Q_OS_IOS[overload1]$$$Q_OS_IOS -->
                            <html:h3 class="fn" id="Q_OS_IOS"><html:a name="Q_OS_IOS"
                                    ></html:a><html:span class="name">Q_OS_IOS</html:span></html:h3>
                            <html:p>Defined on iOS.</html:p>
                            <!-- @@@Q_OS_IOS -->
                            <!-- $$$Q_OS_IRIX[overload1]$$$Q_OS_IRIX -->
                            <html:h3 class="fn" id="Q_OS_IRIX"><html:a name="Q_OS_IRIX"
                                    ></html:a><html:span class="name"
                                >Q_OS_IRIX</html:span></html:h3>
                            <html:p>Defined on SGI Irix.</html:p>
                            <!-- @@@Q_OS_IRIX -->
                            <!-- $$$Q_OS_LINUX[overload1]$$$Q_OS_LINUX -->
                            <html:h3 class="fn" id="Q_OS_LINUX"><html:a name="Q_OS_LINUX"
                                    ></html:a><html:span class="name"
                                >Q_OS_LINUX</html:span></html:h3>
                            <html:p>Defined on Linux.</html:p>
                            <!-- @@@Q_OS_LINUX -->
                            <!-- $$$Q_OS_LYNX[overload1]$$$Q_OS_LYNX -->
                            <html:h3 class="fn" id="Q_OS_LYNX"><html:a name="Q_OS_LYNX"
                                    ></html:a><html:span class="name"
                                >Q_OS_LYNX</html:span></html:h3>
                            <html:p>Defined on LynxOS.</html:p>
                            <!-- @@@Q_OS_LYNX -->
                            <!-- $$$Q_OS_MAC[overload1]$$$Q_OS_MAC -->
                            <html:h3 class="fn" id="Q_OS_MAC"><html:a name="Q_OS_MAC"
                                    ></html:a><html:span class="name">Q_OS_MAC</html:span></html:h3>
                            <html:p>Defined on Darwin-based operating systems distributed by Apple,
                                which currently includes OS X and iOS, but not the open source
                                version.</html:p>
                            <!-- @@@Q_OS_MAC -->
                            <!-- $$$Q_OS_NETBSD[overload1]$$$Q_OS_NETBSD -->
                            <html:h3 class="fn" id="Q_OS_NETBSD"><html:a name="Q_OS_NETBSD"
                                    ></html:a><html:span class="name"
                                >Q_OS_NETBSD</html:span></html:h3>
                            <html:p>Defined on NetBSD.</html:p>
                            <!-- @@@Q_OS_NETBSD -->
                            <!-- $$$Q_OS_OPENBSD[overload1]$$$Q_OS_OPENBSD -->
                            <html:h3 class="fn" id="Q_OS_OPENBSD"><html:a name="Q_OS_OPENBSD"
                                    ></html:a><html:span class="name"
                                >Q_OS_OPENBSD</html:span></html:h3>
                            <html:p>Defined on OpenBSD.</html:p>
                            <!-- @@@Q_OS_OPENBSD -->
                            <!-- $$$Q_OS_OSF[overload1]$$$Q_OS_OSF -->
                            <html:h3 class="fn" id="Q_OS_OSF"><html:a name="Q_OS_OSF"
                                    ></html:a><html:span class="name">Q_OS_OSF</html:span></html:h3>
                            <html:p>Defined on HP Tru64 UNIX.</html:p>
                            <!-- @@@Q_OS_OSF -->
                            <!-- $$$Q_OS_OSX[overload1]$$$Q_OS_OSX -->
                            <html:h3 class="fn" id="Q_OS_OSX"><html:a name="Q_OS_OSX"
                                    ></html:a><html:span class="name">Q_OS_OSX</html:span></html:h3>
                            <html:p>Defined on OS X.</html:p>
                            <!-- @@@Q_OS_OSX -->
                            <!-- $$$Q_OS_QNX[overload1]$$$Q_OS_QNX -->
                            <html:h3 class="fn" id="Q_OS_QNX"><html:a name="Q_OS_QNX"
                                    ></html:a><html:span class="name">Q_OS_QNX</html:span></html:h3>
                            <html:p>Defined on QNX Neutrino.</html:p>
                            <!-- @@@Q_OS_QNX -->
                            <!-- $$$Q_OS_RELIANT[overload1]$$$Q_OS_RELIANT -->
                            <html:h3 class="fn" id="Q_OS_RELIANT"><html:a name="Q_OS_RELIANT"
                                    ></html:a><html:span class="name"
                                >Q_OS_RELIANT</html:span></html:h3>
                            <html:p>Defined on Reliant UNIX.</html:p>
                            <!-- @@@Q_OS_RELIANT -->
                            <!-- $$$Q_OS_SCO[overload1]$$$Q_OS_SCO -->
                            <html:h3 class="fn" id="Q_OS_SCO"><html:a name="Q_OS_SCO"
                                    ></html:a><html:span class="name">Q_OS_SCO</html:span></html:h3>
                            <html:p>Defined on SCO OpenServer 5.</html:p>
                            <!-- @@@Q_OS_SCO -->
                            <!-- $$$Q_OS_SOLARIS[overload1]$$$Q_OS_SOLARIS -->
                            <html:h3 class="fn" id="Q_OS_SOLARIS"><html:a name="Q_OS_SOLARIS"
                                    ></html:a><html:span class="name"
                                >Q_OS_SOLARIS</html:span></html:h3>
                            <html:p>Defined on Sun Solaris.</html:p>
                            <!-- @@@Q_OS_SOLARIS -->
                            <!-- $$$Q_OS_ULTRIX[overload1]$$$Q_OS_ULTRIX -->
                            <html:h3 class="fn" id="Q_OS_ULTRIX"><html:a name="Q_OS_ULTRIX"
                                    ></html:a><html:span class="name"
                                >Q_OS_ULTRIX</html:span></html:h3>
                            <html:p>Defined on DEC Ultrix.</html:p>
                            <!-- @@@Q_OS_ULTRIX -->
                            <!-- $$$Q_OS_UNIX[overload1]$$$Q_OS_UNIX -->
                            <html:h3 class="fn" id="Q_OS_UNIX"><html:a name="Q_OS_UNIX"
                                    ></html:a><html:span class="name"
                                >Q_OS_UNIX</html:span></html:h3>
                            <html:p>Defined on Any UNIX BSD/SYSV system.</html:p>
                            <!-- @@@Q_OS_UNIX -->
                            <!-- $$$Q_OS_UNIXWARE[overload1]$$$Q_OS_UNIXWARE -->
                            <html:h3 class="fn" id="Q_OS_UNIXWARE"><html:a name="Q_OS_UNIXWARE"
                                    ></html:a><html:span class="name"
                                >Q_OS_UNIXWARE</html:span></html:h3>
                            <html:p>Defined on UnixWare 7, Open UNIX 8.</html:p>
                            <!-- @@@Q_OS_UNIXWARE -->
                            <!-- $$$Q_OS_WIN32[overload1]$$$Q_OS_WIN32 -->
                            <html:h3 class="fn" id="Q_OS_WIN32"><html:a name="Q_OS_WIN32"
                                    ></html:a><html:span class="name"
                                >Q_OS_WIN32</html:span></html:h3>
                            <html:p>Defined on 32-bit and 64-bit versions of Windows (not on Windows
                                CE).</html:p>
                            <!-- @@@Q_OS_WIN32 -->
                            <!-- $$$Q_OS_WIN64[overload1]$$$Q_OS_WIN64 -->
                            <html:h3 class="fn" id="Q_OS_WIN64"><html:a name="Q_OS_WIN64"
                                    ></html:a><html:span class="name"
                                >Q_OS_WIN64</html:span></html:h3>
                            <html:p>Defined on 64-bit versions of Windows.</html:p>
                            <!-- @@@Q_OS_WIN64 -->
                            <!-- $$$Q_OS_WIN[overload1]$$$Q_OS_WIN -->
                            <html:h3 class="fn" id="Q_OS_WIN"><html:a name="Q_OS_WIN"
                                    ></html:a><html:span class="name">Q_OS_WIN</html:span></html:h3>
                            <html:p>Defined on all supported versions of Windows. That is, if
                                    <html:a href="qtglobal.html#Q_OS_WIN32">Q_OS_WIN32</html:a>,
                                    <html:a href="qtglobal.html#Q_OS_WIN64">Q_OS_WIN64</html:a> or
                                    <html:a href="qtglobal.html#Q_OS_WINCE">Q_OS_WINCE</html:a> is
                                defined.</html:p>
                            <!-- @@@Q_OS_WIN -->
                            <!-- $$$Q_OS_WINCE[overload1]$$$Q_OS_WINCE -->
                            <html:h3 class="fn" id="Q_OS_WINCE"><html:a name="Q_OS_WINCE"
                                    ></html:a><html:span class="name"
                                >Q_OS_WINCE</html:span></html:h3>
                            <html:p>Defined on Windows CE.</html:p>
                            <!-- @@@Q_OS_WINCE -->
                            <!-- $$$Q_OS_WINPHONE[overload1]$$$Q_OS_WINPHONE -->
                            <html:h3 class="fn" id="Q_OS_WINPHONE"><html:a name="Q_OS_WINPHONE"
                                    ></html:a><html:span class="name"
                                >Q_OS_WINPHONE</html:span></html:h3>
                            <html:p>Defined on Windows Phone 8.</html:p>
                            <!-- @@@Q_OS_WINPHONE -->
                            <!-- $$$Q_OS_WINRT[overload1]$$$Q_OS_WINRT -->
                            <html:h3 class="fn" id="Q_OS_WINRT"><html:a name="Q_OS_WINRT"
                                    ></html:a><html:span class="name"
                                >Q_OS_WINRT</html:span></html:h3>
                            <html:p>Defined for Windows Runtime (Windows Store apps) on Windows 8,
                                Windows RT, and Windows Phone 8.</html:p>
                            <!-- @@@Q_OS_WINRT -->
                            <!-- $$$Q_PROCESSOR_X86[overload1]$$$Q_PROCESSOR_X86 -->
                            <html:h3 class="fn" id="Q_PROCESSOR_X86"><html:a name="Q_PROCESSOR_X86"
                                    ></html:a><html:span class="name"
                                >Q_PROCESSOR_X86</html:span></html:h3>
                            <html:p>Defined if the application is compiled for x86 processors. Qt
                                currently supports two x86 variants: <html:a
                                    href="qtglobal.html#Q_PROCESSOR_X86_32"
                                    >Q_PROCESSOR_X86_32</html:a> and <html:a
                                    href="qtglobal.html#Q_PROCESSOR_X86_64"
                                    >Q_PROCESSOR_X86_64</html:a>.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_X86 -->
                            <!-- $$$Q_PROCESSOR_S390[overload1]$$$Q_PROCESSOR_S390 -->
                            <html:h3 class="fn" id="Q_PROCESSOR_S390"><html:a
                                    name="Q_PROCESSOR_S390"></html:a><html:span class="name"
                                    >Q_PROCESSOR_S390</html:span></html:h3>
                            <html:p>Defined if the application is compiled for S/390 processors. Qt
                                supports one optional variant of S/390: <html:a
                                    href="qtglobal.html#Q_PROCESSOR_S390_X"
                                    >Q_PROCESSOR_S390_X</html:a>.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_S390 -->
                            <!-- $$$Q_PROCESSOR_ALPHA[overload1]$$$Q_PROCESSOR_ALPHA -->
                            <html:h3 class="fn" id="Q_PROCESSOR_ALPHA"><html:a
                                    name="Q_PROCESSOR_ALPHA"></html:a><html:span class="name"
                                    >Q_PROCESSOR_ALPHA</html:span></html:h3>
                            <html:p>Defined if the application is compiled for Alpha
                                processors.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_ALPHA -->
                            <!-- $$$Q_PROCESSOR_ARM[overload1]$$$Q_PROCESSOR_ARM -->
                            <html:h3 class="fn" id="Q_PROCESSOR_ARM"><html:a name="Q_PROCESSOR_ARM"
                                    ></html:a><html:span class="name"
                                >Q_PROCESSOR_ARM</html:span></html:h3>
                            <html:p>Defined if the application is compiled for ARM processors. Qt
                                currently supports three optional ARM revisions: <html:a
                                    href="qtglobal.html#Q_PROCESSOR_ARM_V5"
                                    >Q_PROCESSOR_ARM_V5</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_ARM_V6"
                                    >Q_PROCESSOR_ARM_V6</html:a>, and <html:a
                                    href="qtglobal.html#Q_PROCESSOR_ARM_V7"
                                    >Q_PROCESSOR_ARM_V7</html:a>.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_ARM -->
                            <!-- $$$Q_PROCESSOR_ARM_V5[overload1]$$$Q_PROCESSOR_ARM_V5 -->
                            <html:h3 class="fn" id="Q_PROCESSOR_ARM_V5"><html:a
                                    name="Q_PROCESSOR_ARM_V5"></html:a><html:span class="name"
                                    >Q_PROCESSOR_ARM_V5</html:span></html:h3>
                            <html:p>Defined if the application is compiled for ARMv5 processors. The
                                    <html:a href="qtglobal.html#Q_PROCESSOR_ARM"
                                    >Q_PROCESSOR_ARM</html:a> macro is also defined when
                                Q_PROCESSOR_ARM_V5 is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_ARM_V5 -->
                            <!-- $$$Q_PROCESSOR_ARM_V6[overload1]$$$Q_PROCESSOR_ARM_V6 -->
                            <html:h3 class="fn" id="Q_PROCESSOR_ARM_V6"><html:a
                                    name="Q_PROCESSOR_ARM_V6"></html:a><html:span class="name"
                                    >Q_PROCESSOR_ARM_V6</html:span></html:h3>
                            <html:p>Defined if the application is compiled for ARMv6 processors. The
                                    <html:a href="qtglobal.html#Q_PROCESSOR_ARM"
                                    >Q_PROCESSOR_ARM</html:a> and <html:a
                                    href="qtglobal.html#Q_PROCESSOR_ARM_V5"
                                    >Q_PROCESSOR_ARM_V5</html:a> macros are also defined when
                                Q_PROCESSOR_ARM_V6 is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_ARM_V6 -->
                            <!-- $$$Q_PROCESSOR_ARM_V7[overload1]$$$Q_PROCESSOR_ARM_V7 -->
                            <html:h3 class="fn" id="Q_PROCESSOR_ARM_V7"><html:a
                                    name="Q_PROCESSOR_ARM_V7"></html:a><html:span class="name"
                                    >Q_PROCESSOR_ARM_V7</html:span></html:h3>
                            <html:p>Defined if the application is compiled for ARMv7 processors. The
                                    <html:a href="qtglobal.html#Q_PROCESSOR_ARM"
                                    >Q_PROCESSOR_ARM</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_ARM_V5"
                                    >Q_PROCESSOR_ARM_V5</html:a>, and <html:a
                                    href="qtglobal.html#Q_PROCESSOR_ARM_V6"
                                    >Q_PROCESSOR_ARM_V6</html:a> macros are also defined when
                                Q_PROCESSOR_ARM_V7 is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_ARM_V7 -->
                            <!-- $$$Q_PROCESSOR_AVR32[overload1]$$$Q_PROCESSOR_AVR32 -->
                            <html:h3 class="fn" id="Q_PROCESSOR_AVR32"><html:a
                                    name="Q_PROCESSOR_AVR32"></html:a><html:span class="name"
                                    >Q_PROCESSOR_AVR32</html:span></html:h3>
                            <html:p>Defined if the application is compiled for AVR32
                                processors.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_AVR32 -->
                            <!-- $$$Q_PROCESSOR_BLACKFIN[overload1]$$$Q_PROCESSOR_BLACKFIN -->
                            <html:h3 class="fn" id="Q_PROCESSOR_BLACKFIN"><html:a
                                    name="Q_PROCESSOR_BLACKFIN"></html:a><html:span class="name"
                                    >Q_PROCESSOR_BLACKFIN</html:span></html:h3>
                            <html:p>Defined if the application is compiled for Blackfin
                                processors.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_BLACKFIN -->
                            <!-- $$$Q_PROCESSOR_IA64[overload1]$$$Q_PROCESSOR_IA64 -->
                            <html:h3 class="fn" id="Q_PROCESSOR_IA64"><html:a
                                    name="Q_PROCESSOR_IA64"></html:a><html:span class="name"
                                    >Q_PROCESSOR_IA64</html:span></html:h3>
                            <html:p>Defined if the application is compiled for IA-64 processors.
                                This includes all Itanium and Itanium 2 processors.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_IA64 -->
                            <!-- $$$Q_PROCESSOR_MIPS[overload1]$$$Q_PROCESSOR_MIPS -->
                            <html:h3 class="fn" id="Q_PROCESSOR_MIPS"><html:a
                                    name="Q_PROCESSOR_MIPS"></html:a><html:span class="name"
                                    >Q_PROCESSOR_MIPS</html:span></html:h3>
                            <html:p>Defined if the application is compiled for MIPS processors. Qt
                                currently supports seven MIPS revisions: <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_I"
                                    >Q_PROCESSOR_MIPS_I</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_II"
                                    >Q_PROCESSOR_MIPS_II</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_III"
                                    >Q_PROCESSOR_MIPS_III</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_IV"
                                    >Q_PROCESSOR_MIPS_IV</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_V"
                                    >Q_PROCESSOR_MIPS_V</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_32"
                                    >Q_PROCESSOR_MIPS_32</html:a>, and <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_64"
                                    >Q_PROCESSOR_MIPS_64</html:a>.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_MIPS -->
                            <!-- $$$Q_PROCESSOR_MIPS_32[overload1]$$$Q_PROCESSOR_MIPS_32 -->
                            <html:h3 class="fn" id="Q_PROCESSOR_MIPS_32"><html:a
                                    name="Q_PROCESSOR_MIPS_32"></html:a><html:span class="name"
                                    >Q_PROCESSOR_MIPS_32</html:span></html:h3>
                            <html:p>Defined if the application is compiled for MIPS32 processors.
                                The <html:a href="qtglobal.html#Q_PROCESSOR_MIPS"
                                    >Q_PROCESSOR_MIPS</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_I"
                                    >Q_PROCESSOR_MIPS_I</html:a>, and <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_II"
                                    >Q_PROCESSOR_MIPS_II</html:a> macros are also defined when
                                Q_PROCESSOR_MIPS_32 is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_MIPS_32 -->
                            <!-- $$$Q_PROCESSOR_MIPS_64[overload1]$$$Q_PROCESSOR_MIPS_64 -->
                            <html:h3 class="fn" id="Q_PROCESSOR_MIPS_64"><html:a
                                    name="Q_PROCESSOR_MIPS_64"></html:a><html:span class="name"
                                    >Q_PROCESSOR_MIPS_64</html:span></html:h3>
                            <html:p>Defined if the application is compiled for MIPS64 processors.
                                The <html:a href="qtglobal.html#Q_PROCESSOR_MIPS"
                                    >Q_PROCESSOR_MIPS</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_I"
                                    >Q_PROCESSOR_MIPS_I</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_II"
                                    >Q_PROCESSOR_MIPS_II</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_III"
                                    >Q_PROCESSOR_MIPS_III</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_IV"
                                    >Q_PROCESSOR_MIPS_IV</html:a>, and <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_V"
                                    >Q_PROCESSOR_MIPS_V</html:a> macros are also defined when
                                Q_PROCESSOR_MIPS_64 is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_MIPS_64 -->
                            <!-- $$$Q_PROCESSOR_MIPS_I[overload1]$$$Q_PROCESSOR_MIPS_I -->
                            <html:h3 class="fn" id="Q_PROCESSOR_MIPS_I"><html:a
                                    name="Q_PROCESSOR_MIPS_I"></html:a><html:span class="name"
                                    >Q_PROCESSOR_MIPS_I</html:span></html:h3>
                            <html:p>Defined if the application is compiled for MIPS-I processors.
                                The <html:a href="qtglobal.html#Q_PROCESSOR_MIPS"
                                    >Q_PROCESSOR_MIPS</html:a> macro is also defined when
                                Q_PROCESSOR_MIPS_I is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_MIPS_I -->
                            <!-- $$$Q_PROCESSOR_MIPS_II[overload1]$$$Q_PROCESSOR_MIPS_II -->
                            <html:h3 class="fn" id="Q_PROCESSOR_MIPS_II"><html:a
                                    name="Q_PROCESSOR_MIPS_II"></html:a><html:span class="name"
                                    >Q_PROCESSOR_MIPS_II</html:span></html:h3>
                            <html:p>Defined if the application is compiled for MIPS-II processors.
                                The <html:a href="qtglobal.html#Q_PROCESSOR_MIPS"
                                    >Q_PROCESSOR_MIPS</html:a> and <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_I"
                                    >Q_PROCESSOR_MIPS_I</html:a> macros are also defined when
                                Q_PROCESSOR_MIPS_II is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_MIPS_II -->
                            <!-- $$$Q_PROCESSOR_MIPS_III[overload1]$$$Q_PROCESSOR_MIPS_III -->
                            <html:h3 class="fn" id="Q_PROCESSOR_MIPS_III"><html:a
                                    name="Q_PROCESSOR_MIPS_III"></html:a><html:span class="name"
                                    >Q_PROCESSOR_MIPS_III</html:span></html:h3>
                            <html:p>Defined if the application is compiled for MIPS-III processors.
                                The <html:a href="qtglobal.html#Q_PROCESSOR_MIPS"
                                    >Q_PROCESSOR_MIPS</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_I"
                                    >Q_PROCESSOR_MIPS_I</html:a>, and <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_II"
                                    >Q_PROCESSOR_MIPS_II</html:a> macros are also defined when
                                Q_PROCESSOR_MIPS_III is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_MIPS_III -->
                            <!-- $$$Q_PROCESSOR_MIPS_IV[overload1]$$$Q_PROCESSOR_MIPS_IV -->
                            <html:h3 class="fn" id="Q_PROCESSOR_MIPS_IV"><html:a
                                    name="Q_PROCESSOR_MIPS_IV"></html:a><html:span class="name"
                                    >Q_PROCESSOR_MIPS_IV</html:span></html:h3>
                            <html:p>Defined if the application is compiled for MIPS-IV processors.
                                The <html:a href="qtglobal.html#Q_PROCESSOR_MIPS"
                                    >Q_PROCESSOR_MIPS</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_I"
                                    >Q_PROCESSOR_MIPS_I</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_II"
                                    >Q_PROCESSOR_MIPS_II</html:a>, and <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_III"
                                    >Q_PROCESSOR_MIPS_III</html:a> macros are also defined when
                                Q_PROCESSOR_MIPS_IV is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_MIPS_IV -->
                            <!-- $$$Q_PROCESSOR_MIPS_V[overload1]$$$Q_PROCESSOR_MIPS_V -->
                            <html:h3 class="fn" id="Q_PROCESSOR_MIPS_V"><html:a
                                    name="Q_PROCESSOR_MIPS_V"></html:a><html:span class="name"
                                    >Q_PROCESSOR_MIPS_V</html:span></html:h3>
                            <html:p>Defined if the application is compiled for MIPS-V processors.
                                The <html:a href="qtglobal.html#Q_PROCESSOR_MIPS"
                                    >Q_PROCESSOR_MIPS</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_I"
                                    >Q_PROCESSOR_MIPS_I</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_II"
                                    >Q_PROCESSOR_MIPS_II</html:a>, <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_III"
                                    >Q_PROCESSOR_MIPS_III</html:a>, and <html:a
                                    href="qtglobal.html#Q_PROCESSOR_MIPS_IV"
                                    >Q_PROCESSOR_MIPS_IV</html:a> macros are also defined when
                                Q_PROCESSOR_MIPS_V is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_MIPS_V -->
                            <!-- $$$Q_PROCESSOR_POWER[overload1]$$$Q_PROCESSOR_POWER -->
                            <html:h3 class="fn" id="Q_PROCESSOR_POWER"><html:a
                                    name="Q_PROCESSOR_POWER"></html:a><html:span class="name"
                                    >Q_PROCESSOR_POWER</html:span></html:h3>
                            <html:p>Defined if the application is compiled for POWER processors. Qt
                                currently supports two Power variants: <html:a
                                    href="qtglobal.html#Q_PROCESSOR_POWER_32"
                                    >Q_PROCESSOR_POWER_32</html:a> and <html:a
                                    href="qtglobal.html#Q_PROCESSOR_POWER_64"
                                    >Q_PROCESSOR_POWER_64</html:a>.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_POWER -->
                            <!-- $$$Q_PROCESSOR_POWER_32[overload1]$$$Q_PROCESSOR_POWER_32 -->
                            <html:h3 class="fn" id="Q_PROCESSOR_POWER_32"><html:a
                                    name="Q_PROCESSOR_POWER_32"></html:a><html:span class="name"
                                    >Q_PROCESSOR_POWER_32</html:span></html:h3>
                            <html:p>Defined if the application is compiled for 32-bit Power
                                processors. The <html:a href="qtglobal.html#Q_PROCESSOR_POWER"
                                    >Q_PROCESSOR_POWER</html:a> macro is also defined when
                                Q_PROCESSOR_POWER_32 is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_POWER_32 -->
                            <!-- $$$Q_PROCESSOR_POWER_64[overload1]$$$Q_PROCESSOR_POWER_64 -->
                            <html:h3 class="fn" id="Q_PROCESSOR_POWER_64"><html:a
                                    name="Q_PROCESSOR_POWER_64"></html:a><html:span class="name"
                                    >Q_PROCESSOR_POWER_64</html:span></html:h3>
                            <html:p>Defined if the application is compiled for 64-bit Power
                                processors. The <html:a href="qtglobal.html#Q_PROCESSOR_POWER"
                                    >Q_PROCESSOR_POWER</html:a> macro is also defined when
                                Q_PROCESSOR_POWER_64 is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_POWER_64 -->
                            <!-- $$$Q_PROCESSOR_S390_X[overload1]$$$Q_PROCESSOR_S390_X -->
                            <html:h3 class="fn" id="Q_PROCESSOR_S390_X"><html:a
                                    name="Q_PROCESSOR_S390_X"></html:a><html:span class="name"
                                    >Q_PROCESSOR_S390_X</html:span></html:h3>
                            <html:p>Defined if the application is compiled for S/390x processors.
                                The <html:a href="qtglobal.html#Q_PROCESSOR_S390"
                                    >Q_PROCESSOR_S390</html:a> macro is also defined when
                                Q_PROCESSOR_S390_X is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_S390_X -->
                            <!-- $$$Q_PROCESSOR_SH[overload1]$$$Q_PROCESSOR_SH -->
                            <html:h3 class="fn" id="Q_PROCESSOR_SH"><html:a name="Q_PROCESSOR_SH"
                                    ></html:a><html:span class="name"
                                >Q_PROCESSOR_SH</html:span></html:h3>
                            <html:p>Defined if the application is compiled for SuperH processors. Qt
                                currently supports one SuperH revision: <html:a
                                    href="qtglobal.html#Q_PROCESSOR_SH_4A"
                                    >Q_PROCESSOR_SH_4A</html:a>.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_SH -->
                            <!-- $$$Q_PROCESSOR_SH_4A[overload1]$$$Q_PROCESSOR_SH_4A -->
                            <html:h3 class="fn" id="Q_PROCESSOR_SH_4A"><html:a
                                    name="Q_PROCESSOR_SH_4A"></html:a><html:span class="name"
                                    >Q_PROCESSOR_SH_4A</html:span></html:h3>
                            <html:p>Defined if the application is compiled for SuperH 4A processors.
                                The <html:a href="qtglobal.html#Q_PROCESSOR_SH"
                                    >Q_PROCESSOR_SH</html:a> macro is also defined when
                                Q_PROCESSOR_SH_4A is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_SH_4A -->
                            <!-- $$$Q_PROCESSOR_SPARC[overload1]$$$Q_PROCESSOR_SPARC -->
                            <html:h3 class="fn" id="Q_PROCESSOR_SPARC"><html:a
                                    name="Q_PROCESSOR_SPARC"></html:a><html:span class="name"
                                    >Q_PROCESSOR_SPARC</html:span></html:h3>
                            <html:p>Defined if the application is compiled for SPARC processors. Qt
                                currently supports one optional SPARC revision: <html:a
                                    href="qtglobal.html#Q_PROCESSOR_SPARC_V9"
                                    >Q_PROCESSOR_SPARC_V9</html:a>.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_SPARC -->
                            <!-- $$$Q_PROCESSOR_SPARC_V9[overload1]$$$Q_PROCESSOR_SPARC_V9 -->
                            <html:h3 class="fn" id="Q_PROCESSOR_SPARC_V9"><html:a
                                    name="Q_PROCESSOR_SPARC_V9"></html:a><html:span class="name"
                                    >Q_PROCESSOR_SPARC_V9</html:span></html:h3>
                            <html:p>Defined if the application is compiled for SPARC V9 processors.
                                The <html:a href="qtglobal.html#Q_PROCESSOR_SPARC"
                                    >Q_PROCESSOR_SPARC</html:a> macro is also defined when
                                Q_PROCESSOR_SPARC_V9 is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_SPARC_V9 -->
                            <!-- $$$Q_PROCESSOR_X86_32[overload1]$$$Q_PROCESSOR_X86_32 -->
                            <html:h3 class="fn" id="Q_PROCESSOR_X86_32"><html:a
                                    name="Q_PROCESSOR_X86_32"></html:a><html:span class="name"
                                    >Q_PROCESSOR_X86_32</html:span></html:h3>
                            <html:p>Defined if the application is compiled for 32-bit x86
                                processors. This includes all i386, i486, i586, and i686 processors.
                                The <html:a href="qtglobal.html#Q_PROCESSOR_X86"
                                    >Q_PROCESSOR_X86</html:a> macro is also defined when
                                Q_PROCESSOR_X86_32 is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_X86_32 -->
                            <!-- $$$Q_PROCESSOR_X86_64[overload1]$$$Q_PROCESSOR_X86_64 -->
                            <html:h3 class="fn" id="Q_PROCESSOR_X86_64"><html:a
                                    name="Q_PROCESSOR_X86_64"></html:a><html:span class="name"
                                    >Q_PROCESSOR_X86_64</html:span></html:h3>
                            <html:p>Defined if the application is compiled for 64-bit x86
                                processors. This includes all AMD64, Intel 64, and other x86_64/x64
                                processors. The <html:a href="qtglobal.html#Q_PROCESSOR_X86"
                                    >Q_PROCESSOR_X86</html:a> macro is also defined when
                                Q_PROCESSOR_X86_64 is defined.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qsysinfo.html#buildCpuArchitecture"
                                    >QSysInfo::buildCpuArchitecture</html:a>().</html:p>
                            <!-- @@@Q_PROCESSOR_X86_64 -->
                            <!-- $$$Q_UINT64_C[overload1]$$$Q_UINT64_C -->
                            <html:h3 class="fn" id="Q_UINT64_C"><html:a name="Q_UINT64_C"
                                    ></html:a><html:span class="type"><html:a
                                        href="qtglobal.html#quint64-typedef"
                                    >quint64</html:a></html:span>
                                <html:span class="name">Q_UINT64_C</html:span>(<html:i>
                                    literal</html:i>)</html:h3>
                            <html:p>Wraps the unsigned 64-bit integer <html:i>literal</html:i> in a
                                platform-independent way.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="type"><html:a
                                        href="qtglobal.html#quint64-typedef"
                                    >quint64</html:a></html:span> value <html:span class="operator"
                                    >=</html:span> Q_UINT64_C(<html:span class="number"
                                    >932838457459459</html:span>);</html:pre>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#quint64-typedef">quint64</html:a> and
                                    <html:a href="qtglobal.html#Q_INT64_C"
                                >Q_INT64_C</html:a>().</html:p>
                            <!-- @@@Q_UINT64_C -->
                            <!-- $$$Q_UNLIKELY[overload1]$$$Q_UNLIKELY -->
                            <html:h3 class="fn" id="Q_UNLIKELY"><html:a name="Q_UNLIKELY"
                                    ></html:a><html:span class="name"
                                    >Q_UNLIKELY</html:span>(<html:i> expr</html:i>)</html:h3>
                            <html:p>Hints to the compiler that the enclosed condition,
                                    <html:i>expr</html:i>, is likely to evaluate to
                                    <html:code>false</html:code>.</html:p>
                            <html:p>Use of this macro can help the compiler to optimize the
                                code.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp">bool readConfiguration(<html:span class="keyword"
                                    >const</html:span>
                                <html:span class="type"><html:a href="qfile.html"
                                    >QFile</html:a></html:span>
                                <html:span class="operator">&amp;</html:span>file) { <html:span
                                    class="comment">// We expect to be asked to read an existing
                                    file</html:span>
                                <html:span class="keyword">if</html:span> (Q_UNLIKELY(<html:span
                                    class="operator">!</html:span>file<html:span class="operator"
                                    >.</html:span>exists())) { <html:a href="qtglobal.html#qWarning"
                                    >qWarning</html:a>() <html:span class="operator"
                                    >&lt;</html:span><html:span class="operator">&lt;</html:span>
                                <html:span class="string">"File not found"</html:span>; <html:span
                                    class="keyword">return</html:span>
                                <html:span class="keyword">false</html:span>; } <html:span
                                    class="operator">.</html:span><html:span class="operator"
                                    >.</html:span><html:span class="operator">.</html:span>
                                <html:span class="keyword">return</html:span>
                                <html:span class="keyword">true</html:span>; }</html:pre>
                            <html:p>This function was introduced in Qt 4.8.</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#Q_LIKELY"
                                    >Q_LIKELY</html:a>().</html:p>
                            <!-- @@@Q_UNLIKELY -->
                            <!-- $$$Q_UNREACHABLE[overload1]$$$Q_UNREACHABLE -->
                            <html:h3 class="fn" id="Q_UNREACHABLE"><html:a name="Q_UNREACHABLE"
                                    ></html:a><html:span class="type">void</html:span>
                                <html:span class="name">Q_UNREACHABLE</html:span>()</html:h3>
                            <html:p>Tells the compiler that the current point cannot be reached by
                                any execution, so it may optimize any code paths leading here as
                                dead code, as well as code continuing from here.</html:p>
                            <html:p>This macro is useful to mark impossible conditions. For example,
                                given the following enum:</html:p>
                            <html:pre class="cpp">
                                <html:span class="keyword">enum</html:span> Shapes {
                                    Rectangle<html:span class="operator">,</html:span>
                                    Triangle<html:span class="operator">,</html:span>
                                    Circle<html:span class="operator">,</html:span> NumShapes
                                };</html:pre>
                            <html:p>One can write a switch table like so:</html:p>
                            <html:pre class="cpp">
                                <html:span class="keyword">switch</html:span> (shape) { <html:span
                                    class="keyword">case</html:span> Rectangle: <html:span
                                    class="keyword">return</html:span> rectangle(); <html:span
                                    class="keyword">case</html:span> Triangle: <html:span
                                    class="keyword">return</html:span> triangle(); <html:span
                                    class="keyword">case</html:span> Circle: <html:span
                                    class="keyword">return</html:span> circle(); <html:span
                                    class="keyword">case</html:span> NumShapes: Q_UNREACHABLE();
                                    <html:span class="keyword">break</html:span>; }</html:pre>
                            <html:p>The advantage of inserting Q_UNREACHABLE() at that point is that
                                the compiler is told not to generate code for a shape variable
                                containing that value. If the macro is missing, the compiler will
                                still generate the necessary comparisons for that value. If the case
                                label were removed, some compilers could produce a warning that some
                                enum values were not checked.</html:p>
                            <html:p>By using this macro in impossible conditions, code coverage may
                                be improved as dead code paths may be eliminated.</html:p>
                            <html:p>In debug builds the condition is enforced by an assert to
                                facilitate debugging.</html:p>
                            <html:p>This function was introduced in Qt 5.0.</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#Q_ASSERT"
                                    >Q_ASSERT</html:a>(), <html:a href="qtglobal.html#Q_ASSUME"
                                    >Q_ASSUME</html:a>(), and <html:a href="qtglobal.html#qFatal"
                                    >qFatal</html:a>().</html:p>
                            <!-- @@@Q_UNREACHABLE -->
                            <!-- $$$Q_UNUSED[overload1]$$$Q_UNUSED -->
                            <html:h3 class="fn" id="Q_UNUSED"><html:a name="Q_UNUSED"
                                    ></html:a><html:span class="name">Q_UNUSED</html:span>(<html:i>
                                    name</html:i>)</html:h3>
                            <html:p>Indicates to the compiler that the parameter with the specified
                                    <html:i>name</html:i> is not used in the body of a function.
                                This can be used to suppress compiler warnings while allowing
                                functions to be defined with meaningful parameter names in their
                                signatures.</html:p>
                            <!-- @@@Q_UNUSED -->
                            <!-- $$$foreach[overload1]$$$foreach -->
                            <html:h3 class="fn" id="foreach"><html:a name="foreach"
                                    ></html:a><html:span class="name">foreach</html:span>(<html:i>
                                    variable</html:i>, <html:i> container</html:i>)</html:h3>
                            <html:p>This macro is used to implement Qt's
                                    <html:code>foreach</html:code> loop. The
                                    <html:i>variable</html:i> parameter is a variable name or
                                variable definition; the <html:i>container</html:i> parameter is a
                                Qt container whose value type corresponds to the type of the
                                variable. See <html:a href="containers.html#the-foreach-keyword">The
                                    foreach Keyword</html:a> for details.</html:p>
                            <html:p>If you're worried about namespace pollution, you can disable
                                this macro by adding the following line to your
                                    <html:code>.pro</html:code> file:</html:p>
                            <html:pre class="cpp">CONFIG <html:span class="operator"
                                    >+</html:span><html:span class="operator">=</html:span>
                                no_keywords</html:pre>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#Q_FOREACH"
                                    >Q_FOREACH</html:a>().</html:p>
                            <!-- @@@foreach -->
                            <!-- $$$forever[overload1]$$$forever -->
                            <html:h3 class="fn" id="forever"><html:a name="forever"
                                    ></html:a><html:span class="name">forever</html:span></html:h3>
                            <html:p>This macro is provided for convenience for writing infinite
                                loops.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp">forever { <html:span class="operator"
                                    >.</html:span><html:span class="operator"
                                    >.</html:span><html:span class="operator">.</html:span>
                                }</html:pre>
                            <html:p>It is equivalent to <html:code>for (;;)</html:code>.</html:p>
                            <html:p>If you're worried about namespace pollution, you can disable
                                this macro by adding the following line to your
                                    <html:code>.pro</html:code> file:</html:p>
                            <html:pre class="cpp">CONFIG <html:span class="operator"
                                    >+</html:span><html:span class="operator">=</html:span>
                                no_keywords</html:pre>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#Q_FOREVER"
                                    >Q_FOREVER</html:a>.</html:p>
                            <!-- @@@forever -->
                            <!-- $$$qCritical[overload1]$$$qCriticalconstchar*... -->
                            <html:h3 class="fn" id="qCritical"><html:a name="qCritical"
                                    ></html:a><html:span class="name">qCritical</html:span>(const
                                    <html:span class="type">char</html:span> *<html:i>
                                    message</html:i>, ...)</html:h3>
                            <html:p>Calls the message handler with the critical message
                                    <html:i>message</html:i>. If no message handler has been
                                installed, the message is printed to stderr. Under Windows, the
                                message is sent to the debugger. On Blackberry the message is sent
                                to slogger2.</html:p>
                            <html:p>It exits if the environment variable QT_FATAL_CRITICALS is not
                                empty.</html:p>
                            <html:p>This function takes a format string and a list of arguments,
                                similar to the C printf() function. The format should be a Latin-1
                                string.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="type">void</html:span>
                                    load(<html:span class="keyword">const</html:span>
                                <html:span class="type"><html:a href="qstring.html"
                                    >QString</html:a></html:span>
                                <html:span class="operator">&amp;</html:span>fileName) { <html:span
                                    class="type"><html:a href="qfile.html"
                                    >QFile</html:a></html:span> file(fileName); <html:span
                                    class="keyword">if</html:span> (<html:span class="operator"
                                    >!</html:span>file<html:span class="operator"
                                >.</html:span>exists()) qCritical(<html:span class="string">"File
                                    '%s' does not exist!"</html:span><html:span class="operator"
                                    >,</html:span> qUtf8Printable(fileName)); }</html:pre>
                            <html:p>If you include &lt;QtDebug&gt;, a more convenient syntax is also
                                available:</html:p>
                            <html:pre class="cpp">qCritical() <html:span class="operator"
                                    >&lt;</html:span><html:span class="operator">&lt;</html:span>
                                <html:span class="string">"Brush:"</html:span>
                                <html:span class="operator">&lt;</html:span><html:span
                                    class="operator">&lt;</html:span> myQBrush <html:span
                                    class="operator">&lt;</html:span><html:span class="operator"
                                    >&lt;</html:span>
                                <html:span class="string">"Other value:"</html:span>
                                <html:span class="operator">&lt;</html:span><html:span
                                    class="operator">&lt;</html:span> i;</html:pre>
                            <html:p>A space is inserted between the items, and a newline is appended
                                at the end.</html:p>
                            <html:p>To suppress the output at runtime, install your own message
                                handler with <html:a href="qtglobal.html#qInstallMessageHandler"
                                    >qInstallMessageHandler</html:a>().</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#qDebug"
                                    >qDebug</html:a>(), <html:a href="qtglobal.html#qWarning"
                                    >qWarning</html:a>(), <html:a href="qtglobal.html#qFatal"
                                    >qFatal</html:a>(), <html:a
                                    href="qtglobal.html#qInstallMessageHandler"
                                    >qInstallMessageHandler</html:a>(), and <html:a
                                    href="qtdoc/testing-and-debugging.html#debugging-techniques"
                                    >Debugging Techniques</html:a>.</html:p>
                            <!-- @@@qCritical -->
                            <!-- $$$qDebug[overload1]$$$qDebugconstchar*... -->
                            <html:h3 class="fn" id="qDebug"><html:a name="qDebug"
                                    ></html:a><html:span class="name">qDebug</html:span>(const
                                    <html:span class="type">char</html:span> *<html:i>
                                    message</html:i>, ...)</html:h3>
                            <html:p>Calls the message handler with the debug message
                                    <html:i>message</html:i>. If no message handler has been
                                installed, the message is printed to stderr. Under Windows, the
                                message is sent to the console, if it is a console application;
                                otherwise, it is sent to the debugger. On Blackberry the message is
                                sent to slogger2. This function does nothing if
                                    <html:code>QT_NO_DEBUG_OUTPUT</html:code> was defined during
                                compilation.</html:p>
                            <html:p>If you pass the function a format string and a list of
                                arguments, it works in similar way to the C printf() function. The
                                format should be a Latin-1 string.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp">qDebug(<html:span class="string">"Items in list:
                                    %d"</html:span><html:span class="operator">,</html:span>
                                    myList<html:span class="operator"
                                >.</html:span>size());</html:pre>
                            <html:p>If you include <html:code>&lt;QtDebug&gt;</html:code>, a more
                                convenient syntax is also available:</html:p>
                            <html:pre class="cpp">qDebug() <html:span class="operator"
                                    >&lt;</html:span><html:span class="operator">&lt;</html:span>
                                <html:span class="string">"Brush:"</html:span>
                                <html:span class="operator">&lt;</html:span><html:span
                                    class="operator">&lt;</html:span> myQBrush <html:span
                                    class="operator">&lt;</html:span><html:span class="operator"
                                    >&lt;</html:span>
                                <html:span class="string">"Other value:"</html:span>
                                <html:span class="operator">&lt;</html:span><html:span
                                    class="operator">&lt;</html:span> i;</html:pre>
                            <html:p>With this syntax, the function returns a <html:a
                                    href="qdebug.html">QDebug</html:a> object that is configured to
                                use the <html:a href="qtglobal.html#QtMsgType-enum"
                                    >QtDebugMsg</html:a> message type. It automatically puts a
                                single space between each item, and outputs a newline at the end. It
                                supports many C++ and Qt types.</html:p>
                            <html:p>To suppress the output at run-time, install your own message
                                handler with <html:a href="qtglobal.html#qInstallMessageHandler"
                                    >qInstallMessageHandler</html:a>().</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#qWarning"
                                    >qWarning</html:a>(), <html:a href="qtglobal.html#qCritical"
                                    >qCritical</html:a>(), <html:a href="qtglobal.html#qFatal"
                                    >qFatal</html:a>(), <html:a
                                    href="qtglobal.html#qInstallMessageHandler"
                                    >qInstallMessageHandler</html:a>(), and <html:a
                                    href="qtdoc/testing-and-debugging.html#debugging-techniques"
                                    >Debugging Techniques</html:a>.</html:p>
                            <!-- @@@qDebug -->
                            <!-- $$$qFatal[overload1]$$$qFatalconstchar*... -->
                            <html:h3 class="fn" id="qFatal"><html:a name="qFatal"
                                    ></html:a><html:span class="name">qFatal</html:span>(const
                                    <html:span class="type">char</html:span> *<html:i>
                                    message</html:i>, ...)</html:h3>
                            <html:p>Calls the message handler with the fatal message
                                    <html:i>message</html:i>. If no message handler has been
                                installed, the message is printed to stderr. Under Windows, the
                                message is sent to the debugger. On Blackberry the message is sent
                                to slogger2.</html:p>
                            <html:p>If you are using the <html:b>default message handler</html:b>
                                this function will abort on Unix systems to create a core dump. On
                                Windows, for debug builds, this function will report a _CRT_ERROR
                                enabling you to connect a debugger to the application.</html:p>
                            <html:p>This function takes a format string and a list of arguments,
                                similar to the C printf() function.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="type">int</html:span>
                                    divide(<html:span class="type">int</html:span> a<html:span
                                    class="operator">,</html:span>
                                <html:span class="type">int</html:span> b) { <html:span
                                    class="keyword">if</html:span> (b <html:span class="operator"
                                    >=</html:span><html:span class="operator">=</html:span>
                                <html:span class="number">0</html:span>) <html:span class="comment"
                                    >// program error</html:span> qFatal(<html:span class="string"
                                    >"divide: cannot divide by zero"</html:span>); <html:span
                                    class="keyword">return</html:span> a <html:span class="operator"
                                    >/</html:span> b; }</html:pre>
                            <html:p>To suppress the output at runtime, install your own message
                                handler with <html:a href="qtglobal.html#qInstallMessageHandler"
                                    >qInstallMessageHandler</html:a>().</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#qDebug"
                                    >qDebug</html:a>(), <html:a href="qtglobal.html#qCritical"
                                    >qCritical</html:a>(), <html:a href="qtglobal.html#qWarning"
                                    >qWarning</html:a>(), <html:a
                                    href="qtglobal.html#qInstallMessageHandler"
                                    >qInstallMessageHandler</html:a>(), and <html:a
                                    href="qtdoc/testing-and-debugging.html#debugging-techniques"
                                    >Debugging Techniques</html:a>.</html:p>
                            <!-- @@@qFatal -->
                            <!-- $$$qMove[overload1]$$$qMove -->
                            <html:h3 class="fn" id="qMove"><html:a name="qMove"></html:a><html:span
                                    class="name">qMove</html:span>(<html:i> x</html:i>)</html:h3>
                            <html:p>It expands to "std::move" if your compiler supports that C++11
                                function, or to nothing otherwise.</html:p>
                            <html:p>qMove takes an rvalue reference to its parameter
                                    <html:i>x</html:i>, and converts it to an xvalue.</html:p>
                            <!-- @@@qMove -->
                            <!-- $$$qPrintable[overload1]$$$qPrintableconstQString& -->
                            <html:h3 class="fn" id="qPrintable"><html:a name="qPrintable"
                                ></html:a>const <html:span class="type">char</html:span> *
                                    <html:span class="name">qPrintable</html:span>(const <html:span
                                    class="type"><html:a href="qstring.html"
                                    >QString</html:a></html:span> &amp;<html:i>
                                str</html:i>)</html:h3>
                            <html:p>Returns <html:i>str</html:i> as a <html:code>const char
                                    *</html:code>. This is equivalent to
                                <html:i>str</html:i>.toLocal8Bit().constData().</html:p>
                            <html:p>The char pointer will be invalid after the statement in which
                                qPrintable() is used. This is because the array returned by <html:a
                                    href="qstring.html#toLocal8Bit">QString::toLocal8Bit</html:a>()
                                will fall out of scope.</html:p>
                            <html:p><html:b>Note: </html:b><html:a href="qtglobal.html#qDebug"
                                    >qDebug</html:a>(), <html:a href="qtglobal.html#qWarning"
                                    >qWarning</html:a>(), <html:a href="qtglobal.html#qCritical"
                                    >qCritical</html:a>(), <html:a href="qtglobal.html#qFatal"
                                    >qFatal</html:a>() expect %s arguments to be UTF-8 encoded,
                                while qPrintable() converts to local 8-bit encoding. Therefore
                                    <html:a href="qtglobal.html#qUtf8Printable"
                                    >qUtf8Printable</html:a>() should be used for logging strings
                                instead of qPrintable().</html:p><html:p><html:b>See also
                                    </html:b><html:a href="qtglobal.html#qUtf8Printable"
                                    >qUtf8Printable</html:a>().</html:p>
                            <!-- @@@qPrintable -->
                            <!-- $$$qUtf8Printable[overload1]$$$qUtf8PrintableconstQString& -->
                            <html:h3 class="fn" id="qUtf8Printable"><html:a name="qUtf8Printable"
                                ></html:a>const <html:span class="type">char</html:span> *
                                    <html:span class="name">qUtf8Printable</html:span>(const
                                    <html:span class="type"><html:a href="qstring.html"
                                        >QString</html:a></html:span> &amp;<html:i>
                                str</html:i>)</html:h3>
                            <html:p>Returns <html:i>str</html:i> as a <html:code>const char
                                    *</html:code>. This is equivalent to
                                <html:i>str</html:i>.toUtf8().constData().</html:p>
                            <html:p>The char pointer will be invalid after the statement in which
                                qUtf8Printable() is used. This is because the array returned by
                                    <html:a href="qstring.html#toUtf8">QString::toUtf8</html:a>()
                                will fall out of scope.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:a href="qtglobal.html#qWarning"
                                    >qWarning</html:a>(<html:span class="string">"%s:
                                    %s"</html:span><html:span class="operator">,</html:span>
                                    qUtf8Printable(key)<html:span class="operator">,</html:span>
                                qUtf8Printable(value));</html:pre>
                            <html:p>This function was introduced in Qt 5.4.</html:p>
                            <html:p><html:b>See also </html:b><html:a
                                    href="qtglobal.html#qPrintable">qPrintable</html:a>(), <html:a
                                    href="qtglobal.html#qDebug">qDebug</html:a>(), <html:a
                                    href="qtglobal.html#qWarning">qWarning</html:a>(), <html:a
                                    href="qtglobal.html#qCritical">qCritical</html:a>(), and <html:a
                                    href="qtglobal.html#qFatal">qFatal</html:a>().</html:p>
                            <!-- @@@qUtf8Printable -->
                            <!-- $$$qWarning[overload1]$$$qWarningconstchar*... -->
                            <html:h3 class="fn" id="qWarning"><html:a name="qWarning"
                                    ></html:a><html:span class="name">qWarning</html:span>(const
                                    <html:span class="type">char</html:span> *<html:i>
                                    message</html:i>, ...)</html:h3>
                            <html:p>Calls the message handler with the warning message
                                    <html:i>message</html:i>. If no message handler has been
                                installed, the message is printed to stderr. Under Windows, the
                                message is sent to the debugger. On Blackberry the message is sent
                                to slogger2. This function does nothing if
                                    <html:code>QT_NO_WARNING_OUTPUT</html:code> was defined during
                                compilation; it exits if the environment variable
                                    <html:code>QT_FATAL_WARNINGS</html:code> is not empty.</html:p>
                            <html:p>This function takes a format string and a list of arguments,
                                similar to the C printf() function. The format should be a Latin-1
                                string.</html:p>
                            <html:p>Example:</html:p>
                            <html:pre class="cpp"><html:span class="type">void</html:span>
                                    f(<html:span class="type">int</html:span> c) { <html:span
                                    class="keyword">if</html:span> (c <html:span class="operator"
                                    >&gt;</html:span>
                                <html:span class="number">200</html:span>) qWarning(<html:span
                                    class="string">"f: bad argument, c == %d"</html:span><html:span
                                    class="operator">,</html:span> c); }</html:pre>
                            <html:p>If you include &lt;QtDebug&gt;, a more convenient syntax is also
                                available:</html:p>
                            <html:pre class="cpp">qWarning() <html:span class="operator"
                                    >&lt;</html:span><html:span class="operator">&lt;</html:span>
                                <html:span class="string">"Brush:"</html:span>
                                <html:span class="operator">&lt;</html:span><html:span
                                    class="operator">&lt;</html:span> myQBrush <html:span
                                    class="operator">&lt;</html:span><html:span class="operator"
                                    >&lt;</html:span>
                                <html:span class="string">"Other value:"</html:span>
                                <html:span class="operator">&lt;</html:span><html:span
                                    class="operator">&lt;</html:span> i;</html:pre>
                            <html:p>This syntax inserts a space between each item, and appends a
                                newline at the end.</html:p>
                            <html:p>To suppress the output at runtime, install your own message
                                handler with <html:a href="qtglobal.html#qInstallMessageHandler"
                                    >qInstallMessageHandler</html:a>().</html:p>
                            <html:p><html:b>See also </html:b><html:a href="qtglobal.html#qDebug"
                                    >qDebug</html:a>(), <html:a href="qtglobal.html#qCritical"
                                    >qCritical</html:a>(), <html:a href="qtglobal.html#qFatal"
                                    >qFatal</html:a>(), <html:a
                                    href="qtglobal.html#qInstallMessageHandler"
                                    >qInstallMessageHandler</html:a>(), and <html:a
                                    href="qtdoc/testing-and-debugging.html#debugging-techniques"
                                    >Debugging Techniques</html:a>.</html:p>
                            <!-- @@@qWarning -->
                        </html:div>
                    </html:div>
                </html:div>
            </html:div>
        </html:div>
        <html:div class="footer">
            <html:p>
                <html:acronym title="Copyright">&#169;</html:acronym> 2015 The Qt Company Ltd.
                Documentation contributions included herein are the copyrights of their respective
                owners.<html:br /> The documentation provided herein is licensed under the terms of
                the <html:a href="http://www.gnu.org/licenses/fdl.html">GNU Free Documentation
                    License version 1.3</html:a> as published by the Free Software
                Foundation.<html:br /> Qt and respective logos are trademarks of The Qt Company Ltd.
                in Finland and/or other countries worldwide. All other trademarks are property of
                their respective owners. </html:p>
        </html:div>
    </html:body>
</html:html>