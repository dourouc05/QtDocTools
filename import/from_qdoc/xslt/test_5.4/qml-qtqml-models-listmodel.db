<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.1"
            xml:lang="en">
   <db:title>ListModel QML Type</db:title>
   <db:classsynopsis xlink:href="qml-qtqml-models-listmodel.db">
      <db:ooclass>
         <db:classname>ListModel</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="import">import QtQml.Models 2.1</db:classsynopsisinfo>
      <db:fieldsynopsis xlink:href="#count-prop">
         <db:type>int</db:type>
         <db:varname>count</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#dynamicRoles-prop">
         <db:type>bool</db:type>
         <db:varname>dynamicRoles</db:varname>
      </db:fieldsynopsis>
      <db:methodsynopsis xlink:href="#append-method">
         <db:void/>
         <db:methodname>append</db:methodname>
         <db:methodparam rep="norepeat" choice="req">
            <db:type>jsobject</db:type>
            <db:parameter>dict</db:parameter>
         </db:methodparam>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#clear-method">
         <db:void/>
         <db:methodname>clear</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#get-method">
         <db:type>object</db:type>
         <db:methodname>get</db:methodname>
         <db:methodparam rep="norepeat" choice="req">
            <db:type>int</db:type>
            <db:parameter>index</db:parameter>
         </db:methodparam>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#insert-method">
         <db:void/>
         <db:methodname>insert</db:methodname>
         <db:methodparam rep="norepeat" choice="req">
            <db:type>int</db:type>
            <db:parameter>index</db:parameter>
         </db:methodparam>
         <db:methodparam rep="norepeat" choice="req">
            <db:type>jsobject</db:type>
            <db:parameter>dict</db:parameter>
         </db:methodparam>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#move-method">
         <db:void/>
         <db:methodname>move</db:methodname>
         <db:methodparam rep="norepeat" choice="req">
            <db:type>int</db:type>
            <db:parameter>from</db:parameter>
         </db:methodparam>
         <db:methodparam rep="norepeat" choice="req">
            <db:type>int</db:type>
            <db:parameter>to</db:parameter>
         </db:methodparam>
         <db:methodparam rep="norepeat" choice="req">
            <db:type>int</db:type>
            <db:parameter>n</db:parameter>
         </db:methodparam>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#remove-method">
         <db:void/>
         <db:methodname>remove</db:methodname>
         <db:methodparam rep="norepeat" choice="req">
            <db:type>int</db:type>
            <db:parameter>index</db:parameter>
         </db:methodparam>
         <db:methodparam rep="norepeat" choice="req">
            <db:type>int</db:type>
            <db:parameter>count</db:parameter>
         </db:methodparam>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#set-method">
         <db:void/>
         <db:methodname>set</db:methodname>
         <db:methodparam rep="norepeat" choice="req">
            <db:type>int</db:type>
            <db:parameter>index</db:parameter>
         </db:methodparam>
         <db:methodparam rep="norepeat" choice="req">
            <db:type>jsobject</db:type>
            <db:parameter>dict</db:parameter>
         </db:methodparam>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setProperty-method">
         <db:void/>
         <db:methodname>setProperty</db:methodname>
         <db:methodparam rep="norepeat" choice="req">
            <db:type>int</db:type>
            <db:parameter>index</db:parameter>
         </db:methodparam>
         <db:methodparam rep="norepeat" choice="req">
            <db:type>string</db:type>
            <db:parameter>property</db:parameter>
         </db:methodparam>
         <db:methodparam rep="norepeat" choice="req">
            <db:type xlink:href="qml-variant.html">variant</db:type>
            <db:parameter>value</db:parameter>
         </db:methodparam>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#sync-method">
         <db:void/>
         <db:methodname>sync</db:methodname>
         <db:void/>
      </db:methodsynopsis>
   </db:classsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The <db:link xlink:href="qml-qtqml-models-listmodel.db">ListModel</db:link> is a simple container of <db:link xlink:href="qml-qtqml-models-listelement.db">ListElement</db:link>
                                definitions, each containing data roles. The contents can be defined
                                dynamically, or explicitly in QML.</db:para>
      <db:para>The number of elements in the model can be obtained from its
                                    <db:link xlink:href="qml-qtqml-models-listmodel.db#count-prop">count</db:link> property. A number of familiar methods are also
                                provided to manipulate the contents of the model, including <db:link xlink:href="qml-qtqml-models-listmodel.db#append-method">append()</db:link>, <db:link xlink:href="qml-qtqml-models-listmodel.db#insert-method">insert()</db:link>, <db:link xlink:href="qml-qtqml-models-listmodel.db#move-method">move()</db:link>, <db:link xlink:href="qml-qtqml-models-listmodel.db#remove-method">remove()</db:link> and <db:link xlink:href="qml-qtqml-models-listmodel.db#set-method">set()</db:link>. These methods accept dictionaries as their
                                arguments; these are translated to <db:link xlink:href="qml-qtqml-models-listelement.db">ListElement</db:link>
                                objects by the model.</db:para>
      <db:para>Elements can be manipulated via the model using the <db:link xlink:href="qml-qtqml-models-listmodel.db#setProperty-method">setProperty()</db:link> method, which allows the roles of the
                                specified element to be set and changed.</db:para>
      <db:section xml:id="example-usage">
         <db:title>Example Usage</db:title>
         <db:para>The following example shows a <db:link xlink:href="qml-qtqml-models-listmodel.db">ListModel</db:link>
                                containing three elements, with the roles "name" and
                                "cost".</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:imageobject>
                  <db:imagedata fileref="images/listmodel.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:programlisting language="qml">import QtQuick 2.0 ListModel { id: fruitModelListElement { name: "Apple"cost: 2.45 } ListElement { name: "Orange"cost: 3.25 } ListElement { name: "Banana"cost: 1.95 } }</db:programlisting>
         <db:para>Roles (properties) in each element must begin with a lower-case
                                letter and should be common to all elements in a model. The <db:link xlink:href="qml-qtqml-models-listelement.db">ListElement</db:link>
                                documentation provides more guidelines for how elements should be
                                defined.</db:para>
         <db:para>Since the example model contains an <db:code>id</db:code>
                                property, it can be referenced by views, such as the <db:link xlink:href="qml-qtquick-listview.db">ListView</db:link> in
                                this example:</db:para>
         <db:programlisting language="qml">import QtQuick 2.0 Rectangle { width: 200;
                                    height: 200ListModel { id: fruitModel
                                ... } Component { id: fruitDelegateRow { spacing: 10Text { text: name }
                                    Text { text: '$'+cost } } } ListView { anchors.fill: parentmodel: fruitModeldelegate: fruitDelegate } }</db:programlisting>
         <db:para>It is possible for roles to contain list data. In the following
                                example we create a list of fruit attributes:</db:para>
         <db:programlisting language="qml">ListModel { id: fruitModelListElement { name: "Apple"cost: 2.45attributes: [ ListElement { description: "Core" }, ListElement { description: "Deciduous" } ] } ListElement { name: "Orange"cost: 3.25attributes: [ ListElement { description: "Citrus" } ] } ListElement { name: "Banana"cost: 1.95attributes: [ ListElement { description: "Tropical" }, ListElement { description: "Seedless" } ] } }</db:programlisting>
         <db:para>The delegate displays all the fruit attributes:</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:imageobject>
                  <db:imagedata fileref="images/listmodel-nested.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:programlisting language="qml">Component { id: fruitDelegateItem { width: 200;
                                    height: 50Text { id: nameField;
                                    text: name } Text { text: '$'+cost; anchors.left: nameField.right
                                } Row
                                { anchors.top: nameField.bottomspacing: 5Text { text: "Attributes:" } Repeater { model: attributesText { text: description } } } } }</db:programlisting>
      </db:section>
      <db:section xml:id="modifying-list-models">
         <db:title>Modifying List Models</db:title>
         <db:para>The content of a <db:link xlink:href="qml-qtqml-models-listmodel.db">ListModel</db:link> may be created and modified using the
                                    <db:link xlink:href="qml-qtqml-models-listmodel.db#clear-method">clear()</db:link>, <db:link xlink:href="qml-qtqml-models-listmodel.db#append-method">append()</db:link>, <db:link xlink:href="qml-qtqml-models-listmodel.db#set-method">set()</db:link>, <db:link xlink:href="qml-qtqml-models-listmodel.db#insert-method">insert()</db:link> and <db:link xlink:href="qml-qtqml-models-listmodel.db#setProperty-method">setProperty()</db:link> methods. For example:</db:para>
         <db:programlisting language="qml">Component { id: fruitDelegateItem { width: 200;
                                    height: 50Text { text: name }
                                    Text { text: '$'+cost; anchors.right: parent.right }
                                    // Double the price when
                                    clicked.MouseArea { anchors.fill: parentonClicked: fruitModel.setProperty(index, "cost", cost*2) } } }</db:programlisting>
         <db:para>Note that when creating content dynamically the set of available
                                properties cannot be changed once set. Whatever properties are first
                                added to the model are the only permitted properties in the
                                model.</db:para>
      </db:section>
      <db:section xml:id="using-threaded-list-models-with-workerscript">
         <db:title>Using
                                Threaded List Models with WorkerScript</db:title>
         <db:para>
            <db:link xlink:href="qml-qtqml-models-listmodel.db">ListModel</db:link> can be used together with <db:link xlink:href="qml-workerscript.db">WorkerScript</db:link> access a list
                                model from multiple threads. This is useful if list modifications
                                are synchronous and take some time: the list operations can be moved
                                to a different thread to avoid blocking of the main GUI
                                thread.</db:para>
         <db:para>Here is an example that uses <db:link xlink:href="qml-workerscript.db">WorkerScript</db:link> to
                                periodically append the current time to a list model:</db:para>
         <db:programlisting language="qml">Timer { id: timerinterval: 2000; repeat: truerunning: truetriggeredOnStart: trueonTriggered: { var msg = {'action': 'appendCurrentTime', 'model':
                                    listModel}; worker.sendMessage(msg); } }</db:programlisting>
         <db:para>The included file, <db:code>dataloader.js</db:code>, looks
                                like this:</db:para>
         <db:programlisting language="js">WorkerScript.onMessage=function(msg) { if (msg.action=='appendCurrentTime') { var
                                    data = {'time': new
                                    Date().toTimeString()}; msg.model.append(data);
                                    msg.model.sync();
                                    // updates the changes to the
                                    list } }</db:programlisting>
         <db:para>The timer in the main example sends messages to the worker
                                script by calling <db:link xlink:href="qml-workerscript.db#sendMessage-method">WorkerScript::sendMessage()</db:link>. When this message is
                                received, <db:code>WorkerScript.onMessage()</db:code> is invoked
                                in <db:code>dataloader.js</db:code>, which appends the current
                                time to the list model.</db:para>
         <db:para>Note the call to <db:link xlink:href="qml-qtqml-models-listmodel.db#sync-method">sync()</db:link> from the external thread. You must call <db:link xlink:href="qml-qtqml-models-listmodel.db#sync-method">sync()</db:link> or else the changes made to the list from that
                                thread will not be reflected in the list model in the main
                                thread.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qtquick-modelviewsdata-modelview.db#qml-data-models">Data Models</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtquick-threading-example.db">Qt Quick Examples
                                    - Threading</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtqml-index.db">Qt
                                    QML</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
   </db:section>
   <db:section xml:id="prop">
      <db:title>Properties Documentation</db:title>
      <db:section xml:id="count-prop">
         <db:title>count : int</db:title>
         <db:para>The number of data entries in the model.</db:para>
      </db:section>
      <db:section xml:id="dynamicRoles-prop">
         <db:title>dynamicRoles : bool</db:title>
         <db:para>By default, the type of a role is fixed the first
                                        time the role is used. For example, if you create a role
                                        called "data" and assign a number to it, you can no longer
                                        assign a string to the "data" role. However, when the
                                        dynamicRoles property is enabled, the type of a given role
                                        is not fixed and can be different between elements.</db:para>
         <db:para>The dynamicRoles property must be set before any data is
                                        added to the <db:link xlink:href="qml-qtqml-models-listmodel.db">ListModel</db:link>, and must be set from the main
                                        thread.</db:para>
         <db:para>A <db:link xlink:href="qml-qtqml-models-listmodel.db">ListModel</db:link> that has data statically defined
                                        (via the <db:link xlink:href="qml-qtqml-models-listelement.db">ListElement</db:link> QML syntax) cannot have the
                                        dynamicRoles property enabled.</db:para>
         <db:para>There is a significant performance cost to using a
                                            <db:link xlink:href="qml-qtqml-models-listmodel.db">ListModel</db:link> with dynamic roles enabled. The cost
                                        varies from platform to platform but is typically somewhere
                                        between 4-6x slower than using static role types.</db:para>
         <db:para>Due to the performance cost of using dynamic roles, they
                                        are disabled by default.</db:para>
      </db:section>
   </db:section>
   <db:section xml:id="qml-meths">
      <db:title>Methods Documentation</db:title>
      <db:section xml:id="append-method">
         <db:title>append(jsobject<db:emphasis>
                                                  dict</db:emphasis>)</db:title>
         <db:para>Adds a new item to the end of the list model, with
                                        the values in <db:emphasis>dict</db:emphasis>.</db:para>
         <db:programlisting>fruitModel.append({"cost": 5.95,"name":"Pizza"})</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qml-qtqml-models-listmodel.db#set-method">set()</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qml-qtqml-models-listmodel.db#remove-method">remove()</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="clear-method">
         <db:title>clear()</db:title>
         <db:para>Deletes all content from the model.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qml-qtqml-models-listmodel.db#append-method">append()</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qml-qtqml-models-listmodel.db#remove-method">remove()</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="get-method">
         <db:title>get(int<db:emphasis>
                                                  index</db:emphasis>)</db:title>
         <db:para>Returns the item at <db:emphasis>index</db:emphasis> in the
                                        list model. This allows the item data to be accessed or
                                        modified from JavaScript:</db:para>
         <db:programlisting>Component.onCompleted: { fruitModel.append({"cost": 5.95,"name":"Jackfruit"});
                                            console.log(fruitModel.get(0).cost); fruitModel.get(0).cost =10.95; }</db:programlisting>
         <db:para>The <db:emphasis>index</db:emphasis> must be an element in the
                                        list.</db:para>
         <db:para>Note that properties of the returned object that are
                                        themselves objects will also be models, and this get()
                                        method is used to access elements:</db:para>
         <db:programlisting> fruitModel.append(...,"attributes":
                                            [{"name":"spikes","value":"7mm"}, {"name":"color","value":"green"}]); fruitModel.get(0).attributes.get(1).value; // ==
                                            "green"</db:programlisting>
         <db:warning>
            <db:para> The returned object is not
                                        guaranteed to remain valid. It should not be used in <db:link xlink:href="qtqml-syntax-propertybinding.db">property
                                            bindings</db:link>.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qml-qtqml-models-listmodel.db#append-method">append()</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="insert-method">
         <db:title>insert(int<db:emphasis>
                                                  index</db:emphasis>, jsobject<db:emphasis>
                                                  dict</db:emphasis>)</db:title>
         <db:para>Adds a new item to the list model at position
                                            <db:emphasis>index</db:emphasis>, with the values in
                                            <db:emphasis>dict</db:emphasis>.</db:para>
         <db:programlisting>fruitModel.insert(2,
                                            {"cost":
                                            5.95,"name":"Pizza"})</db:programlisting>
         <db:para>The <db:emphasis>index</db:emphasis> must be to an existing item
                                        in the list, or one past the end of the list (equivalent to
                                        append).</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qml-qtqml-models-listmodel.db#set-method">set()</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qml-qtqml-models-listmodel.db#append-method">append()</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="move-method">
         <db:title>move(int<db:emphasis>
                                                  from</db:emphasis>, int<db:emphasis> to</db:emphasis>, int<db:emphasis>
                                                  n</db:emphasis>)</db:title>
         <db:para>Moves <db:emphasis>n</db:emphasis> items
                                            <db:emphasis>from</db:emphasis> one position <db:emphasis>to</db:emphasis>
                                        another.</db:para>
         <db:para>The from and to ranges must exist; for example, to move
                                        the first 3 items to the end of the list:</db:para>
         <db:programlisting>fruitModel.move(0,
                                            fruitModel.count
                                            -3,3)</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qml-qtqml-models-listmodel.db#append-method">append()</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="remove-method">
         <db:title>remove(int<db:emphasis>
                                                  index</db:emphasis>, int<db:emphasis> count</db:emphasis> =
                                                  1)</db:title>
         <db:para>Deletes the content at <db:emphasis>index</db:emphasis> from
                                        the model.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qml-qtqml-models-listmodel.db#clear-method">clear()</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="set-method">
         <db:title>set(int<db:emphasis> index</db:emphasis>,
                                                  jsobject<db:emphasis>
                                                  dict</db:emphasis>)</db:title>
         <db:para>Changes the item at <db:emphasis>index</db:emphasis> in the
                                        list model with the values in <db:emphasis>dict</db:emphasis>.
                                        Properties not appearing in <db:emphasis>dict</db:emphasis> are left
                                        unchanged.</db:para>
         <db:programlisting>fruitModel.set(3,
                                            {"cost":
                                            5.95,"name":"Pizza"})</db:programlisting>
         <db:para>If <db:emphasis>index</db:emphasis> is equal to count() then a new
                                        item is appended to the list. Otherwise,
                                            <db:emphasis>index</db:emphasis> must be an element in the
                                        list.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qml-qtqml-models-listmodel.db#append-method">append()</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setProperty-method">
         <db:title>setProperty(int<db:emphasis>
                                                  index</db:emphasis>, string<db:emphasis> property</db:emphasis>,
                                                  <db:link xlink:href="qml-variant.db">variant</db:link><db:emphasis>
                                                  value</db:emphasis>)</db:title>
         <db:para>Changes the <db:emphasis>property</db:emphasis> of the item
                                        at <db:emphasis>index</db:emphasis> in the list model to
                                            <db:emphasis>value</db:emphasis>.</db:para>
         <db:programlisting>fruitModel.setProperty(3,"cost",5.95)</db:programlisting>
         <db:para>The <db:emphasis>index</db:emphasis> must be an element in the
                                        list.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qml-qtqml-models-listmodel.db#append-method">append()</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="sync-method">
         <db:title>sync()</db:title>
         <db:para>Writes any unsaved changes to the list model after
                                        it has been modified from a worker script.</db:para>
      </db:section>
   </db:section>
</db:article>
