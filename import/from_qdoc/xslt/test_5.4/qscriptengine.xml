<html:html xmlns:html="http://www.w3.org/1999/xhtml" lang="en">
    <html:head>
        <html:meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
        <!-- qscriptengine.cpp -->
        <html:title>QScriptEngine Class | Qt Script </html:title>
        <html:link href="style/offline.css" rel="stylesheet" type="text/css" />
    </html:head>
    <html:body>
        <html:div class="header" id="qtdocheader">
            <html:div class="main">
                <html:div class="main-rounded">
                    <html:div class="navigationbar">
                        <html:ul>
                            <html:li><html:a href="qtdoc/index.html">Qt 5.4</html:a></html:li>
                            <html:li><html:a href="qtscript-index.html">Qt Script</html:a></html:li>
                            <html:li><html:a href="qtscript-module.html">C++
                                Classes</html:a></html:li>
                            <html:li>QScriptEngine</html:li>
                            <html:li id="buildversion">Qt 5.4.2 Reference Documentation</html:li>
                        </html:ul>
                    </html:div>
                </html:div>
                <html:div class="content">
                    <html:div class="line">
                        <html:div class="content mainContent">
                            <html:div class="sidebar">
                                <html:div class="toc">
                                    <html:h3><html:a name="toc">Contents</html:a></html:h3>
                                    <html:ul>
                                        <html:li class="level1"><html:a href="#public-types">Public
                                                Types</html:a></html:li>
                                        <html:li class="level1"><html:a href="#public-functions"
                                                >Public Functions</html:a></html:li>
                                        <html:li class="level1"><html:a href="#signals"
                                                >Signals</html:a></html:li>
                                        <html:li class="level1"><html:a
                                                href="#static-public-members">Static Public
                                                Members</html:a></html:li>
                                        <html:li class="level1"><html:a href="#related-non-members"
                                                >Related Non-Members</html:a></html:li>
                                        <html:li class="level1"><html:a href="#macros"
                                                >Macros</html:a></html:li>
                                        <html:li class="level1"><html:a href="#details">Detailed
                                                Description</html:a></html:li>
                                        <html:li class="level2"><html:a href="#evaluating-scripts"
                                                >Evaluating Scripts</html:a></html:li>
                                        <html:li class="level2"><html:a href="#engine-configuration"
                                                >Engine Configuration</html:a></html:li>
                                        <html:li class="level2"><html:a href="#script-exceptions"
                                                >Script Exceptions</html:a></html:li>
                                        <html:li class="level2"><html:a
                                                href="#script-object-creation">Script Object
                                                Creation</html:a></html:li>
                                        <html:li class="level2"><html:a href="#qobject-integration"
                                                >QObject Integration</html:a></html:li>
                                        <html:li class="level2"><html:a
                                                href="#support-for-custom-c-types">Support for
                                                Custom C++ Types</html:a></html:li>
                                        <html:li class="level2"><html:a href="#importing-extensions"
                                                >Importing Extensions</html:a></html:li>
                                        <html:li class="level2"><html:a href="#native-functions"
                                                >Native Functions</html:a></html:li>
                                        <html:li class="level2"><html:a href="#long-running-scripts"
                                                >Long-running Scripts</html:a></html:li>
                                        <html:li class="level2"><html:a href="#garbage-collection"
                                                >Garbage Collection</html:a></html:li>
                                        <html:li class="level2"><html:a
                                                href="#core-debugging-tracing-facilities">Core
                                                Debugging/Tracing Facilities</html:a></html:li>
                                    </html:ul>
                                </html:div>
                                <html:div class="sidebar-content" id="sidebar-content"></html:div>
                            </html:div>
                            <html:h1 class="title">QScriptEngine Class</html:h1>
                            <!-- $$$QScriptEngine-brief -->
                            <html:p>The <html:a href="qscriptengine.html">QScriptEngine</html:a>
                                class provides an environment for evaluating Qt Script code. <html:a
                                    href="#details">More...</html:a></html:p>
                            <!-- @@@QScriptEngine -->
                            <html:div class="table">
                                <html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                Header:</html:td>
                                            <html:td class="memItemRight bottomAlign">
                                                <html:span class="preprocessor">#include
                                                  &lt;QScriptEngine&gt;</html:span>
                                            </html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                qmake:</html:td>
                                            <html:td class="memItemRight bottomAlign"> QT +=
                                                script</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                Since:</html:td>
                                            <html:td class="memItemRight bottomAlign"> Qt
                                                4.3</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                Inherits:</html:td>
                                            <html:td class="memItemRight bottomAlign">
                                                <html:a href="qtcore/qobject.html"
                                                >QObject</html:a></html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table>
                            </html:div>
                            <html:p><html:b>Note:</html:b> All functions in this class are <html:a
                                    href="qtdoc/threads-reentrancy.html#reentrant"
                                    >reentrant</html:a>.</html:p>
                            <html:ul>
                                <html:li><html:a href="qscriptengine-members.html">List of all
                                        members, including inherited members</html:a></html:li>
                                <html:li><html:a href="qscriptengine-obsolete.html">Obsolete
                                        members</html:a></html:li>
                            </html:ul>
                            <html:a name="public-types"></html:a>
                            <html:h2 id="public-types">Public Types</html:h2>
                            <html:div class="table">
                                <html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#FunctionSignature-typedef"
                                                  >FunctionSignature</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#FunctionWithArgSignature-typedef"
                                                  >FunctionWithArgSignature</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> enum </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#QObjectWrapOption-enum"
                                                  >QObjectWrapOption</html:a></html:b> {
                                                ExcludeChildObjects, ExcludeSuperClassMethods,
                                                ExcludeSuperClassProperties,
                                                ExcludeSuperClassContents, ...,
                                                SkipMethodsInEnumeration }</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> flags </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#QObjectWrapOption-enum"
                                                  >QObjectWrapOptions</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> enum </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#ValueOwnership-enum"
                                                  >ValueOwnership</html:a></html:b> { QtOwnership,
                                                ScriptOwnership, AutoOwnership }</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table>
                            </html:div>
                            <html:a name="public-functions"></html:a>
                            <html:h2 id="public-functions">Public Functions</html:h2>
                            <html:div class="table">
                                <html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#QScriptEngine"
                                                  >QScriptEngine</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#QScriptEngine-2"
                                                  >QScriptEngine</html:a></html:b>(QObject *<html:i>
                                                  parent</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                virtual </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#dtor.QScriptEngine"
                                                  >~QScriptEngine</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#abortEvaluation"
                                                  >abortEvaluation</html:a></html:b>(const
                                                QScriptValue &amp;<html:i> result</html:i> =
                                                QScriptValue())</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptEngineAgent * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qscriptengine.html#agent"
                                                  >agent</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QStringList </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#availableExtensions"
                                                  >availableExtensions</html:a></html:b>()
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#clearExceptions"
                                                  >clearExceptions</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#collectGarbage"
                                                  >collectGarbage</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptContext * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#currentContext"
                                                  >currentContext</html:a></html:b>()
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#defaultPrototype"
                                                  >defaultPrototype</html:a></html:b>(int<html:i>
                                                  metaTypeId</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#evaluate"
                                                  >evaluate</html:a></html:b>(const QString
                                                  &amp;<html:i> program</html:i>, const QString
                                                  &amp;<html:i> fileName</html:i> = QString(),
                                                  int<html:i> lineNumber</html:i> = 1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#evaluate-2"
                                                  >evaluate</html:a></html:b>(const QScriptProgram
                                                  &amp;<html:i> program</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> T </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#fromScriptValue"
                                                  >fromScriptValue</html:a></html:b>(const
                                                QScriptValue &amp;<html:i> value</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#globalObject"
                                                  >globalObject</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#hasUncaughtException"
                                                  >hasUncaughtException</html:a></html:b>()
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#importExtension"
                                                  >importExtension</html:a></html:b>(const QString
                                                  &amp;<html:i> extension</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QStringList </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#importedExtensions"
                                                  >importedExtensions</html:a></html:b>()
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#installTranslatorFunctions"
                                                  >installTranslatorFunctions</html:a></html:b>(const
                                                QScriptValue &amp;<html:i> object</html:i> =
                                                QScriptValue())</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#isEvaluating"
                                                  >isEvaluating</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#newArray"
                                                  >newArray</html:a></html:b>(uint<html:i>
                                                  length</html:i> = 0)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qscriptengine.html#newDate"
                                                  >newDate</html:a></html:b>(qsreal<html:i>
                                                  value</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#newDate-2"
                                                  >newDate</html:a></html:b>(const QDateTime
                                                  &amp;<html:i> value</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#newFunction"
                                                  >newFunction</html:a></html:b>(FunctionSignature<html:i>
                                                  fun</html:i>, int<html:i> length</html:i> =
                                                0)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#newFunction-2"
                                                  >newFunction</html:a></html:b>(FunctionSignature<html:i>
                                                  fun</html:i>, const QScriptValue &amp;<html:i>
                                                  prototype</html:i>, int<html:i> length</html:i> =
                                                0)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#newObject"
                                                  >newObject</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#newObject-2"
                                                  >newObject</html:a></html:b>(QScriptClass
                                                  *<html:i> scriptClass</html:i>, const QScriptValue
                                                  &amp;<html:i> data</html:i> =
                                                QScriptValue())</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#newQMetaObject"
                                                  >newQMetaObject</html:a></html:b>(const
                                                QMetaObject *<html:i> metaObject</html:i>, const
                                                QScriptValue &amp;<html:i> ctor</html:i> =
                                                QScriptValue())</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#newQObject"
                                                  >newQObject</html:a></html:b>(QObject *<html:i>
                                                  object</html:i>, ValueOwnership<html:i>
                                                  ownership</html:i> = QtOwnership, const
                                                QObjectWrapOptions &amp;<html:i> options</html:i> =
                                                0)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#newQObject-2"
                                                  >newQObject</html:a></html:b>(const QScriptValue
                                                  &amp;<html:i> scriptObject</html:i>, QObject
                                                  *<html:i> qtObject</html:i>,
                                                  ValueOwnership<html:i> ownership</html:i> =
                                                QtOwnership, const QObjectWrapOptions &amp;<html:i>
                                                  options</html:i> = 0)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#newRegExp"
                                                  >newRegExp</html:a></html:b>(const QRegExp
                                                  &amp;<html:i> regexp</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#newRegExp-2"
                                                  >newRegExp</html:a></html:b>(const QString
                                                  &amp;<html:i> pattern</html:i>, const QString
                                                  &amp;<html:i> flags</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#newVariant"
                                                  >newVariant</html:a></html:b>(const QVariant
                                                  &amp;<html:i> value</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#newVariant-2"
                                                  >newVariant</html:a></html:b>(const QScriptValue
                                                  &amp;<html:i> object</html:i>, const QVariant
                                                  &amp;<html:i> value</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#nullValue"
                                                  >nullValue</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#popContext"
                                                  >popContext</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#processEventsInterval"
                                                  >processEventsInterval</html:a></html:b>()
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptContext * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#pushContext"
                                                  >pushContext</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#reportAdditionalMemoryCost"
                                                  >reportAdditionalMemoryCost</html:a></html:b>(int<html:i>
                                                  size</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#scriptValueFromQMetaObject"
                                                  >scriptValueFromQMetaObject</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#setAgent"
                                                  >setAgent</html:a></html:b>(QScriptEngineAgent
                                                  *<html:i> agent</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#setDefaultPrototype"
                                                  >setDefaultPrototype</html:a></html:b>(int<html:i>
                                                  metaTypeId</html:i>, const QScriptValue
                                                  &amp;<html:i> prototype</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#setGlobalObject"
                                                  >setGlobalObject</html:a></html:b>(const
                                                QScriptValue &amp;<html:i>
                                                object</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#setProcessEventsInterval"
                                                  >setProcessEventsInterval</html:a></html:b>(int<html:i>
                                                  interval</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#toObject"
                                                  >toObject</html:a></html:b>(const QScriptValue
                                                  &amp;<html:i> value</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#toScriptValue"
                                                  >toScriptValue</html:a></html:b>(const T
                                                  &amp;<html:i> value</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptString </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#toStringHandle"
                                                  >toStringHandle</html:a></html:b>(const QString
                                                  &amp;<html:i> str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#uncaughtException"
                                                  >uncaughtException</html:a></html:b>()
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QStringList </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#uncaughtExceptionBacktrace"
                                                  >uncaughtExceptionBacktrace</html:a></html:b>()
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#uncaughtExceptionLineNumber"
                                                  >uncaughtExceptionLineNumber</html:a></html:b>()
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#undefinedValue"
                                                  >undefinedValue</html:a></html:b>()</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table>
                            </html:div>
                            <html:ul>
                                <html:li class="fn">31 public functions inherited from <html:a
                                        href="qtcore/qobject.html#public-functions"
                                    >QObject</html:a></html:li>
                            </html:ul>
                            <html:a name="signals"></html:a>
                            <html:h2 id="signals">Signals</html:h2>
                            <html:div class="table">
                                <html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#signalHandlerException"
                                                  >signalHandlerException</html:a></html:b>(const
                                                QScriptValue &amp;<html:i>
                                                exception</html:i>)</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table>
                            </html:div>
                            <html:ul>
                                <html:li class="fn">2 signals inherited from <html:a
                                        href="qtcore/qobject.html#signals"
                                    >QObject</html:a></html:li>
                            </html:ul>
                            <html:a name="static-public-members"></html:a>
                            <html:h2 id="static-public-members">Static Public Members</html:h2>
                            <html:div class="table">
                                <html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptSyntaxCheckResult </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#checkSyntax"
                                                  >checkSyntax</html:a></html:b>(const QString
                                                  &amp;<html:i> program</html:i>)</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table>
                            </html:div>
                            <html:ul>
                                <html:li class="fn">10 static public members inherited from <html:a
                                        href="qtcore/qobject.html#static-public-members"
                                        >QObject</html:a></html:li>
                            </html:ul>
                            <html:a name="related-non-members"></html:a>
                            <html:h2 id="related-non-members">Related Non-Members</html:h2>
                            <html:div class="table">
                                <html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#FunctionSignature-typedef"
                                                  >FunctionSignature</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                typedef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#FunctionWithArgSignature-typedef"
                                                  >FunctionWithArgSignature</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#qScriptConnect"
                                                  >qScriptConnect</html:a></html:b>(QObject
                                                  *<html:i> sender</html:i>, const char *<html:i>
                                                  signal</html:i>, const QScriptValue &amp;<html:i>
                                                  receiver</html:i>, const QScriptValue
                                                  &amp;<html:i> function</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#qScriptDisconnect"
                                                  >qScriptDisconnect</html:a></html:b>(QObject
                                                  *<html:i> sender</html:i>, const char *<html:i>
                                                  signal</html:i>, const QScriptValue &amp;<html:i>
                                                  receiver</html:i>, const QScriptValue
                                                  &amp;<html:i> function</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#qScriptRegisterMetaType"
                                                  >qScriptRegisterMetaType</html:a></html:b>(QScriptEngine
                                                  *<html:i> engine</html:i>, QScriptValue(* ) (
                                                QScriptEngine *, const T &amp; t )<html:i>
                                                  toScriptValue</html:i>, void(* ) ( const
                                                QScriptValue &amp;, T &amp; t )<html:i>
                                                  fromScriptValue</html:i>, const QScriptValue
                                                  &amp;<html:i> prototype</html:i> =
                                                QScriptValue())</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#qScriptRegisterSequenceMetaType"
                                                  >qScriptRegisterSequenceMetaType</html:a></html:b>(QScriptEngine
                                                  *<html:i> engine</html:i>, const QScriptValue
                                                  &amp;<html:i> prototype</html:i> =
                                                QScriptValue())</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QScriptValue </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#qScriptValueFromSequence"
                                                  >qScriptValueFromSequence</html:a></html:b>(QScriptEngine
                                                  *<html:i> engine</html:i>, const Container
                                                  &amp;<html:i> container</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#qScriptValueToSequence"
                                                  >qScriptValueToSequence</html:a></html:b>(const
                                                QScriptValue &amp;<html:i> value</html:i>, Container
                                                  &amp;<html:i> container</html:i>)</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table>
                            </html:div>
                            <html:a name="macros"></html:a>
                            <html:h2 id="macros">Macros</html:h2>
                            <html:div class="table">
                                <html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qscriptengine.html#Q_SCRIPT_DECLARE_QMETAOBJECT"
                                                  >Q_SCRIPT_DECLARE_QMETAOBJECT</html:a></html:b>(<html:i>
                                                  QMetaObject</html:i>, <html:i>
                                                ArgType</html:i>)</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table>
                            </html:div>
                            <html:h3>Additional Inherited Members</html:h3>
                            <html:ul>
                                <html:li class="fn">1 property inherited from <html:a
                                        href="qtcore/qobject.html#properties"
                                    >QObject</html:a></html:li>
                                <html:li class="fn">1 public slot inherited from <html:a
                                        href="qtcore/qobject.html#public-slots"
                                    >QObject</html:a></html:li>
                                <html:li class="fn">1 public variable inherited from <html:a
                                        href="qtcore/qobject.html#public-variables"
                                    >QObject</html:a></html:li>
                                <html:li class="fn">9 protected functions inherited from <html:a
                                        href="qtcore/qobject.html#protected-functions"
                                        >QObject</html:a></html:li>
                                <html:li class="fn">2 protected variables inherited from <html:a
                                        href="qtcore/qobject.html#protected-variables"
                                        >QObject</html:a></html:li>
                            </html:ul>
                            <html:a name="details"></html:a>
                            <!-- $$$QScriptEngine-description -->
                            <html:div class="descr">
                                <html:h2 id="details">Detailed Description</html:h2>
                                <html:p>The <html:a href="qscriptengine.html">QScriptEngine</html:a>
                                    class provides an environment for evaluating Qt Script
                                    code.</html:p>
                                <html:p>See the <html:a href="qtscript-index.html">Qt
                                        Script</html:a> documentation for information about the Qt
                                    Script language, and how to get started with scripting your C++
                                    application.</html:p>
                                <html:a name="evaluating-scripts"></html:a>
                                <html:h3>Evaluating Scripts</html:h3>
                                <html:p>Use <html:a href="qscriptengine.html#evaluate"
                                        >evaluate</html:a>() to evaluate script code; this is the
                                    C++ equivalent of the built-in script function
                                        <html:code>eval()</html:code>.</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qscriptengine.html#QScriptEngine"
                                            >QScriptEngine</html:a></html:span> myEngine; <html:span
                                        class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> three <html:span
                                        class="operator">=</html:span> myEngine<html:span
                                        class="operator">.</html:span><html:a
                                        href="qscriptengine.html#evaluate"
                                        >evaluate</html:a>(<html:span class="string">"1 +
                                        2"</html:span>);</html:pre>
                                <html:p><html:a href="qscriptengine.html#evaluate"
                                    >evaluate</html:a>() returns a <html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a> that holds the result of the
                                    evaluation. The <html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a> class provides functions for
                                    converting the result to various C++ types (e.g. <html:a
                                        href="qscriptvalue.html#toString"
                                        >QScriptValue::toString</html:a>() and <html:a
                                        href="qscriptvalue.html#toNumber"
                                        >QScriptValue::toNumber</html:a>()).</html:p>
                                <html:p>The following code snippet shows how a script function can
                                    be defined and then invoked from C++ using <html:a
                                        href="qscriptvalue.html#call"
                                    >QScriptValue::call</html:a>():</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> fun <html:span
                                        class="operator">=</html:span> myEngine<html:span
                                        class="operator">.</html:span><html:a
                                        href="qscriptengine.html#evaluate"
                                        >evaluate</html:a>(<html:span class="string">"(function(a,
                                        b) { return a + b; })"</html:span>); <html:span class="type"
                                        >QScriptValueList</html:span> args; args <html:span
                                        class="operator">&lt;</html:span><html:span class="operator"
                                        >&lt;</html:span>
                                    <html:span class="number">1</html:span>
                                    <html:span class="operator">&lt;</html:span><html:span
                                        class="operator">&lt;</html:span>
                                    <html:span class="number">2</html:span>; <html:span class="type"
                                            ><html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> threeAgain <html:span
                                        class="operator">=</html:span> fun<html:span
                                        class="operator">.</html:span>call(<html:span class="type"
                                            ><html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span>()<html:span
                                        class="operator">,</html:span> args);</html:pre>
                                <html:p>As can be seen from the above snippets, a script is provided
                                    to the engine in the form of a string. One common way of loading
                                    scripts is by reading the contents of a file and passing it to
                                        <html:a href="qscriptengine.html#evaluate"
                                    >evaluate</html:a>():</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qtcore/qstring.html">QString</html:a></html:span>
                                    fileName <html:span class="operator">=</html:span>
                                    <html:span class="string">"helloworld.qs"</html:span>;
                                        <html:span class="type"><html:a href="qtcore/qfile.html"
                                            >QFile</html:a></html:span> scriptFile(fileName);
                                        <html:span class="keyword">if</html:span> (<html:span
                                        class="operator">!</html:span>scriptFile<html:span
                                        class="operator">.</html:span>open(<html:span class="type"
                                            ><html:a href="qtcore/qiodevice.html"
                                        >QIODevice</html:a></html:span><html:span class="operator"
                                        >::</html:span>ReadOnly)) <html:span class="comment">//
                                        handle error</html:span>
                                    <html:span class="type"><html:a href="qtcore/qtextstream.html"
                                            >QTextStream</html:a></html:span> stream(<html:span
                                        class="operator">&amp;</html:span>scriptFile); <html:span
                                        class="type"><html:a href="qtcore/qstring.html"
                                            >QString</html:a></html:span> contents <html:span
                                        class="operator">=</html:span> stream<html:span
                                        class="operator">.</html:span>readAll();
                                        scriptFile<html:span class="operator">.</html:span>close();
                                        myEngine<html:span class="operator">.</html:span><html:a
                                        href="qscriptengine.html#evaluate"
                                        >evaluate</html:a>(contents<html:span class="operator"
                                        >,</html:span> fileName);</html:pre>
                                <html:p>Here we pass the name of the file as the second argument to
                                        <html:a href="qscriptengine.html#evaluate"
                                    >evaluate</html:a>(). This does not affect evaluation in any
                                    way; the second argument is a general-purpose string that is
                                    used to identify the script for debugging purposes (for example,
                                    our filename will now show up in any <html:a
                                        href="qscriptengine.html#uncaughtExceptionBacktrace"
                                        >uncaughtExceptionBacktrace</html:a>() involving the
                                    script).</html:p>
                                <html:a name="engine-configuration"></html:a>
                                <html:h3>Engine Configuration</html:h3>
                                <html:p>The <html:a href="qscriptengine.html#globalObject"
                                        >globalObject</html:a>() function returns the <html:b>Global
                                        Object</html:b> associated with the script engine.
                                    Properties of the Global Object are accessible from any script
                                    code (i.e. they are global variables). Typically, before
                                    evaluating "user" scripts, you will want to configure a script
                                    engine by adding one or more properties to the Global
                                    Object:</html:p>
                                <html:pre class="cpp">myEngine<html:span class="operator"
                                        >.</html:span><html:a href="qscriptengine.html#globalObject"
                                        >globalObject</html:a>()<html:span class="operator"
                                        >.</html:span><html:a href="qtcore/qobject.html#setProperty"
                                        >setProperty</html:a>(<html:span class="string"
                                        >"myNumber"</html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="number">123</html:span>); <html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator">.</html:span>
                                    <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> myNumberPlusOne
                                        <html:span class="operator">=</html:span> myEngine<html:span
                                        class="operator">.</html:span><html:a
                                        href="qscriptengine.html#evaluate"
                                        >evaluate</html:a>(<html:span class="string">"myNumber +
                                        1"</html:span>);</html:pre>
                                <html:p>Adding custom properties to the scripting environment is one
                                    of the standard means of providing a scripting API that is
                                    specific to your application. Usually these custom properties
                                    are objects created by the <html:a
                                        href="qscriptengine.html#newQObject">newQObject</html:a>()
                                    or <html:a href="qscriptengine.html#newObject"
                                        >newObject</html:a>() functions, or constructor functions
                                    created by <html:a href="qscriptengine.html#newFunction"
                                        >newFunction</html:a>().</html:p>
                                <html:a name="script-exceptions"></html:a>
                                <html:h3>Script Exceptions</html:h3>
                                <html:p><html:a href="qscriptengine.html#evaluate"
                                    >evaluate</html:a>() can throw a script exception (e.g. due to a
                                    syntax error); in that case, the return value is the value that
                                    was thrown (typically an <html:code>Error</html:code> object).
                                    You can check whether the evaluation caused an exception by
                                    calling <html:a href="qscriptengine.html#hasUncaughtException"
                                        >hasUncaughtException</html:a>(). In that case, you can call
                                    toString() on the error object to obtain an error message. The
                                    current uncaught exception is also available through <html:a
                                        href="qscriptengine.html#uncaughtException"
                                        >uncaughtException</html:a>(). Calling <html:a
                                        href="qscriptengine.html#clearExceptions"
                                        >clearExceptions</html:a>() will cause any uncaught
                                    exceptions to be cleared.</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> result <html:span
                                        class="operator">=</html:span> myEngine<html:span
                                        class="operator">.</html:span><html:a
                                        href="qscriptengine.html#evaluate"
                                        >evaluate</html:a>(<html:span class="operator"
                                        >.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator">.</html:span>);
                                        <html:span class="keyword">if</html:span>
                                        (myEngine<html:span class="operator"
                                    >.</html:span>hasUncaughtException()) { <html:span class="type"
                                        >int</html:span> line <html:span class="operator"
                                        >=</html:span> myEngine<html:span class="operator"
                                        >.</html:span>uncaughtExceptionLineNumber(); <html:a
                                        href="qtcore/qtglobal.html#qDebug">qDebug</html:a>()
                                        <html:span class="operator">&lt;</html:span><html:span
                                        class="operator">&lt;</html:span>
                                    <html:span class="string">"uncaught exception at
                                        line"</html:span>
                                    <html:span class="operator">&lt;</html:span><html:span
                                        class="operator">&lt;</html:span> line <html:span
                                        class="operator">&lt;</html:span><html:span class="operator"
                                        >&lt;</html:span>
                                    <html:span class="string">":"</html:span>
                                    <html:span class="operator">&lt;</html:span><html:span
                                        class="operator">&lt;</html:span> result<html:span
                                        class="operator">.</html:span>toString(); }</html:pre>
                                <html:p>The <html:a href="qscriptengine.html#checkSyntax"
                                        >checkSyntax</html:a>() function can be used to determine
                                    whether code can be usefully passed to <html:a
                                        href="qscriptengine.html#evaluate"
                                    >evaluate</html:a>().</html:p>
                                <html:a name="script-object-creation"></html:a>
                                <html:h3>Script Object Creation</html:h3>
                                <html:p>Use <html:a href="qscriptengine.html#newObject"
                                        >newObject</html:a>() to create a standard Qt Script object;
                                    this is the C++ equivalent of the script statement
                                        <html:code>new Object()</html:code>. You can use the
                                    object-specific functionality in <html:a
                                        href="qscriptvalue.html">QScriptValue</html:a> to manipulate
                                    the script object (e.g. <html:a
                                        href="qscriptvalue.html#setProperty"
                                        >QScriptValue::setProperty</html:a>()). Similarly, use
                                        <html:a href="qscriptengine.html#newArray"
                                    >newArray</html:a>() to create a Qt Script array object. Use
                                        <html:a href="qscriptengine.html#newDate">newDate</html:a>()
                                    to create a <html:code>Date</html:code> object, and <html:a
                                        href="qscriptengine.html#newRegExp">newRegExp</html:a>() to
                                    create a <html:code>RegExp</html:code> object.</html:p>
                                <html:a name="qobject-integration"></html:a>
                                <html:h3>QObject Integration</html:h3>
                                <html:p>Use <html:a href="qscriptengine.html#newQObject"
                                        >newQObject</html:a>() to wrap a <html:a
                                        href="qtcore/qobject.html">QObject</html:a> (or subclass)
                                    pointer. <html:a href="qscriptengine.html#newQObject"
                                        >newQObject</html:a>() returns a proxy script object;
                                    properties, children, and signals and slots of the <html:a
                                        href="qtcore/qobject.html">QObject</html:a> are available as
                                    properties of the proxy object. No binding code is needed
                                    because it is done dynamically using the Qt meta object
                                    system.</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qtwidgets/qpushbutton.html"
                                        >QPushButton</html:a></html:span> button; <html:span
                                        class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> scriptButton
                                        <html:span class="operator">=</html:span> myEngine<html:span
                                        class="operator">.</html:span><html:a
                                        href="qscriptengine.html#newQObject"
                                        >newQObject</html:a>(<html:span class="operator"
                                        >&amp;</html:span>button); myEngine<html:span
                                        class="operator">.</html:span><html:a
                                        href="qscriptengine.html#globalObject"
                                        >globalObject</html:a>()<html:span class="operator"
                                        >.</html:span><html:a href="qtcore/qobject.html#setProperty"
                                        >setProperty</html:a>(<html:span class="string"
                                        >"button"</html:span><html:span class="operator"
                                        >,</html:span> scriptButton); myEngine<html:span
                                        class="operator">.</html:span><html:a
                                        href="qscriptengine.html#evaluate"
                                        >evaluate</html:a>(<html:span class="string"
                                        >"button.checkable = true"</html:span>); <html:a
                                        href="qtcore/qtglobal.html#qDebug">qDebug</html:a>()
                                        <html:span class="operator">&lt;</html:span><html:span
                                        class="operator">&lt;</html:span> scriptButton<html:span
                                        class="operator">.</html:span><html:a
                                        href="qtcore/qobject.html#property"
                                        >property</html:a>(<html:span class="string"
                                        >"checkable"</html:span>)<html:span class="operator"
                                        >.</html:span>toBoolean(); scriptButton<html:span
                                        class="operator">.</html:span><html:a
                                        href="qtcore/qobject.html#property"
                                        >property</html:a>(<html:span class="string"
                                        >"show"</html:span>)<html:span class="operator"
                                        >.</html:span>call(); <html:span class="comment">// call the
                                        show() slot</html:span></html:pre>
                                <html:p>Use <html:a href="qscriptengine.html#qScriptConnect"
                                        >qScriptConnect</html:a>() to connect a C++ signal to a
                                    script function; this is the Qt Script equivalent of <html:a
                                        href="qtcore/qobject.html#connect"
                                    >QObject::connect</html:a>(). When a script function is invoked
                                    in response to a C++ signal, it can cause a script exception;
                                    you can connect to the <html:a
                                        href="qscriptengine.html#signalHandlerException"
                                        >signalHandlerException</html:a>() signal to catch such an
                                    exception.</html:p>
                                <html:p>Use <html:a href="qscriptengine.html#newQMetaObject"
                                        >newQMetaObject</html:a>() to wrap a <html:a
                                        href="qtcore/qmetaobject.html">QMetaObject</html:a>; this
                                    gives you a "script representation" of a <html:a
                                        href="qtcore/qobject.html">QObject</html:a>-based class.
                                        <html:a href="qscriptengine.html#newQMetaObject"
                                        >newQMetaObject</html:a>() returns a proxy script object;
                                    enum values of the class are available as properties of the
                                    proxy object. You can also specify a function that will be used
                                    to construct objects of the class (e.g. when the constructor is
                                    invoked from a script). For classes that have a "standard" Qt
                                    constructor, Qt Script can provide a default script constructor
                                    for you; see <html:a
                                        href="qscriptengine.html#scriptValueFromQMetaObject"
                                        >scriptValueFromQMetaObject</html:a>().</html:p>
                                <html:p>See <html:a href="qtqml/qtjavascript.html">Making
                                        Applications Scriptable</html:a> for more information on the
                                        <html:a href="qtcore/qobject.html">QObject</html:a>
                                    integration.</html:p>
                                <html:a name="support-for-custom-c-types"></html:a>
                                <html:h3>Support for Custom C++ Types</html:h3>
                                <html:p>Use <html:a href="qscriptengine.html#newVariant"
                                        >newVariant</html:a>() to wrap a <html:a
                                        href="qtcore/qvariant.html">QVariant</html:a>. This can be
                                    used to store values of custom (non-<html:a
                                        href="qtcore/qobject.html">QObject</html:a>) C++ types that
                                    have been registered with the Qt meta-type system. To make such
                                    types scriptable, you typically associate a prototype (delegate)
                                    object with the C++ type by calling <html:a
                                        href="qscriptengine.html#setDefaultPrototype"
                                        >setDefaultPrototype</html:a>(); the prototype object
                                    defines the scripting API for the C++ type. Unlike the <html:a
                                        href="qtcore/qobject.html">QObject</html:a> integration,
                                    there is no automatic binding possible here; i.e. you have to
                                    create the scripting API yourself, for example by using the
                                        <html:a href="qscriptable.html">QScriptable</html:a>
                                    class.</html:p>
                                <html:p>Use <html:a href="qscriptengine.html#fromScriptValue"
                                        >fromScriptValue</html:a>() to cast from a <html:a
                                        href="qscriptvalue.html">QScriptValue</html:a> to another
                                    type, and <html:a href="qscriptengine.html#toScriptValue"
                                        >toScriptValue</html:a>() to create a <html:a
                                        href="qscriptvalue.html">QScriptValue</html:a> from another
                                    value. You can specify how the conversion of C++ types is to be
                                    performed with <html:a
                                        href="qscriptengine.html#qScriptRegisterMetaType"
                                        >qScriptRegisterMetaType</html:a>() and <html:a
                                        href="qscriptengine.html#qScriptRegisterSequenceMetaType"
                                        >qScriptRegisterSequenceMetaType</html:a>(). By default, Qt
                                    Script will use <html:a href="qtcore/qvariant.html"
                                        >QVariant</html:a> to store values of custom types.</html:p>
                                <html:a name="importing-extensions"></html:a>
                                <html:h3>Importing Extensions</html:h3>
                                <html:p>Use <html:a href="qscriptengine.html#importExtension"
                                        >importExtension</html:a>() to import plugin-based
                                    extensions into the engine. Call <html:a
                                        href="qscriptengine.html#availableExtensions"
                                        >availableExtensions</html:a>() to obtain a list naming all
                                    the available extensions, and <html:a
                                        href="qscriptengine.html#importedExtensions"
                                        >importedExtensions</html:a>() to obtain a list naming only
                                    those extensions that have been imported.</html:p>
                                <html:p>Call <html:a href="qscriptengine.html#pushContext"
                                        >pushContext</html:a>() to open up a new variable scope, and
                                        <html:a href="qscriptengine.html#popContext"
                                        >popContext</html:a>() to close the current scope. This is
                                    useful if you are implementing an extension that evaluates
                                    script code containing temporary variable definitions (e.g.
                                        <html:code>var foo = 123;</html:code>) that are safe to
                                    discard when evaluation has completed.</html:p>
                                <html:a name="native-functions"></html:a>
                                <html:h3>Native Functions</html:h3>
                                <html:p>Use <html:a href="qscriptengine.html#newFunction"
                                        >newFunction</html:a>() to wrap native (C++) functions,
                                    including constructors for your own custom types, so that these
                                    can be invoked from script code. Such functions must have the
                                    signature <html:a
                                        href="qscriptengine.html#FunctionSignature-typedef"
                                        >QScriptEngine::FunctionSignature</html:a>. You may then
                                    pass the function as argument to <html:a
                                        href="qscriptengine.html#newFunction"
                                    >newFunction</html:a>(). Here is an example of a function that
                                    returns the sum of its first two arguments:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> myAdd(<html:span
                                        class="type"><html:a href="qscriptcontext.html"
                                            >QScriptContext</html:a></html:span>
                                    <html:span class="operator">*</html:span>context<html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a
                                            href="qscriptengine.html#QScriptEngine"
                                            >QScriptEngine</html:a></html:span>
                                    <html:span class="operator">*</html:span>engine) { <html:span
                                        class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> a <html:span
                                        class="operator">=</html:span> context<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>argument(<html:span class="number"
                                        >0</html:span>); <html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> b <html:span
                                        class="operator">=</html:span> context<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>argument(<html:span class="number"
                                        >1</html:span>); <html:span class="keyword"
                                        >return</html:span> a<html:span class="operator"
                                        >.</html:span>toNumber() <html:span class="operator"
                                        >+</html:span> b<html:span class="operator"
                                    >.</html:span>toNumber(); }</html:pre>
                                <html:p>To expose this function to script code, you can set it as a
                                    property of the Global Object:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> fun <html:span
                                        class="operator">=</html:span> myEngine<html:span
                                        class="operator">.</html:span><html:a
                                        href="qscriptengine.html#newFunction"
                                    >newFunction</html:a>(myAdd); myEngine<html:span
                                        class="operator">.</html:span><html:a
                                        href="qscriptengine.html#globalObject"
                                        >globalObject</html:a>()<html:span class="operator"
                                        >.</html:span><html:a href="qtcore/qobject.html#setProperty"
                                        >setProperty</html:a>(<html:span class="string"
                                        >"myAdd"</html:span><html:span class="operator"
                                        >,</html:span> fun);</html:pre>
                                <html:p>Once this is done, script code can call your function in the
                                    exact same manner as a "normal" script function:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> result <html:span
                                        class="operator">=</html:span> myEngine<html:span
                                        class="operator">.</html:span><html:a
                                        href="qscriptengine.html#evaluate"
                                        >evaluate</html:a>(<html:span class="string"
                                        >"myAdd(myNumber, 1)"</html:span>);</html:pre>
                                <html:a name="long-running-scripts"></html:a>
                                <html:h3>Long-running Scripts</html:h3>
                                <html:p>If you need to evaluate possibly long-running scripts from
                                    the main (GUI) thread, you should first call <html:a
                                        href="qscriptengine.html#setProcessEventsInterval"
                                        >setProcessEventsInterval</html:a>() to make sure that the
                                    GUI stays responsive. You can abort a currently running script
                                    by calling <html:a href="qscriptengine.html#abortEvaluation"
                                        >abortEvaluation</html:a>(). You can determine whether an
                                    engine is currently running a script by calling <html:a
                                        href="qscriptengine.html#isEvaluating"
                                    >isEvaluating</html:a>().</html:p>
                                <html:a name="garbage-collection"></html:a>
                                <html:h3>Garbage Collection</html:h3>
                                <html:p>Qt Script objects may be garbage collected when they are no
                                    longer referenced. There is no guarantee as to when automatic
                                    garbage collection will take place.</html:p>
                                <html:p>The <html:a href="qscriptengine.html#collectGarbage"
                                        >collectGarbage</html:a>() function can be called to
                                    explicitly request garbage collection.</html:p>
                                <html:p>The <html:a
                                        href="qscriptengine.html#reportAdditionalMemoryCost"
                                        >reportAdditionalMemoryCost</html:a>() function can be
                                    called to indicate that a Qt Script object occupies memory that
                                    isn't managed by the scripting environment. Reporting the
                                    additional cost makes it more likely that the garbage collector
                                    will be triggered. This can be useful, for example, when many
                                    custom, native Qt Script objects are allocated.</html:p>
                                <html:a name="core-debugging-tracing-facilities"></html:a>
                                <html:h3>Core Debugging/Tracing Facilities</html:h3>
                                <html:p>Since Qt 4.4, you can be notified of events pertaining to
                                    script execution (e.g. script function calls and statement
                                    execution) through the <html:a href="qscriptengineagent.html"
                                        >QScriptEngineAgent</html:a> interface; see the <html:a
                                        href="qscriptengine.html#setAgent">setAgent</html:a>()
                                    function. This can be used to implement debugging and profiling
                                    of a <html:a href="qscriptengine.html"
                                    >QScriptEngine</html:a>.</html:p>
                            </html:div>
                            <html:p><html:b>See also </html:b><html:a href="qscriptvalue.html"
                                    >QScriptValue</html:a>, <html:a href="qscriptcontext.html"
                                    >QScriptContext</html:a>, and <html:a
                                    href="qscriptengineagent.html"
                                >QScriptEngineAgent</html:a>.</html:p>
                            <!-- @@@QScriptEngine -->
                            <html:div class="types">
                                <html:h2>Member Type Documentation</html:h2>
                                <!-- $$$FunctionSignature -->
                                <html:h3 class="fn" id="FunctionSignature-typedef"><html:a
                                        name="FunctionSignature-typedef"></html:a>typedef
                                        QScriptEngine::<html:span class="name"
                                        >FunctionSignature</html:span></html:h3>
                                <html:p>The function signature <html:code>QScriptValue
                                        f(QScriptContext *, QScriptEngine *)</html:code>.</html:p>
                                <html:p>A function with such a signature can be passed to <html:a
                                        href="qscriptengine.html#newFunction"
                                        >QScriptEngine::newFunction</html:a>() to wrap the
                                    function.</html:p>
                                <!-- @@@FunctionSignature -->
                                <!-- $$$FunctionWithArgSignature -->
                                <html:h3 class="fn-2" id="FunctionWithArgSignature-typedef"><html:a
                                        name="FunctionWithArgSignature-typedef"></html:a>typedef
                                        QScriptEngine::<html:span class="name"
                                        >FunctionWithArgSignature</html:span></html:h3>
                                <html:p>The function signature <html:code>QScriptValue
                                        f(QScriptContext *, QScriptEngine *, void
                                    *)</html:code>.</html:p>
                                <html:p>A function with such a signature can be passed to <html:a
                                        href="qscriptengine.html#newFunction"
                                        >QScriptEngine::newFunction</html:a>() to wrap the
                                    function.</html:p>
                                <!-- @@@FunctionWithArgSignature -->
                                <!-- $$$QObjectWrapOption$$$ExcludeChildObjects$$$ExcludeSuperClassMethods$$$ExcludeSuperClassProperties$$$ExcludeSuperClassContents$$$SkipMethodsInEnumeration$$$ExcludeDeleteLater$$$ExcludeSlots$$$AutoCreateDynamicProperties$$$PreferExistingWrapperObject -->
                                <html:h3 class="flags" id="QObjectWrapOption-enum"><html:a
                                        name="QObjectWrapOption-enum"></html:a>enum
                                        QScriptEngine::<html:span class="name"
                                        >QObjectWrapOption</html:span><html:br />flags
                                        QScriptEngine::<html:span class="name"
                                        >QObjectWrapOptions</html:span></html:h3>
                                <html:p>These flags specify options when wrapping a <html:a
                                        href="qtcore/qobject.html">QObject</html:a> pointer with
                                        <html:a href="qscriptengine.html#newQObject"
                                        >newQObject</html:a>().</html:p>
                                <html:div class="table">
                                    <html:table class="valuelist">
                                        <html:tbody>
                                            <html:tr class="odd" valign="top">
                                                <html:th class="tblConst">Constant</html:th>
                                                <html:th class="tblval">Value</html:th>
                                                <html:th class="tbldscr">Description</html:th>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QScriptEngine::ExcludeChildObjects</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0x0001</html:code></html:td>
                                                <html:td class="topAlign">The script object will not
                                                  expose child objects as properties.</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QScriptEngine::ExcludeSuperClassMethods</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0x0002</html:code></html:td>
                                                <html:td class="topAlign">The script object will not
                                                  expose signals and slots inherited from the
                                                  superclass.</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QScriptEngine::ExcludeSuperClassProperties</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0x0004</html:code></html:td>
                                                <html:td class="topAlign">The script object will not
                                                  expose properties inherited from the
                                                  superclass.</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QScriptEngine::ExcludeSuperClassContents</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0x0006</html:code></html:td>
                                                <html:td class="topAlign">Shorthand form for
                                                  ExcludeSuperClassMethods |
                                                  ExcludeSuperClassProperties</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QScriptEngine::ExcludeDeleteLater</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0x0010</html:code></html:td>
                                                <html:td class="topAlign">The script object will not
                                                  expose the <html:a
                                                  href="qtcore/qobject.html#deleteLater"
                                                  >QObject::deleteLater</html:a>() slot.</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QScriptEngine::ExcludeSlots</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0x0020</html:code></html:td>
                                                <html:td class="topAlign">The script object will not
                                                  expose the <html:a href="qtcore/qobject.html"
                                                  >QObject</html:a>'s slots.</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QScriptEngine::AutoCreateDynamicProperties</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0x0100</html:code></html:td>
                                                <html:td class="topAlign">Properties that don't
                                                  already exist in the <html:a
                                                  href="qtcore/qobject.html">QObject</html:a> will
                                                  be created as dynamic properties of that object,
                                                  rather than as properties of the script
                                                  object.</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QScriptEngine::PreferExistingWrapperObject</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0x0200</html:code></html:td>
                                                <html:td class="topAlign">If a wrapper object with
                                                  the requested configuration already exists, return
                                                  that object.</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QScriptEngine::SkipMethodsInEnumeration</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0x0008</html:code></html:td>
                                                <html:td class="topAlign">Don't include methods
                                                  (signals and slots) when enumerating the object's
                                                  properties.</html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table>
                                </html:div>
                                <html:p>The QObjectWrapOptions type is a typedef for <html:a
                                        href="qtcore/qflags.html"
                                    >QFlags</html:a>&lt;QObjectWrapOption&gt;. It stores an OR
                                    combination of QObjectWrapOption values.</html:p>
                                <!-- @@@QObjectWrapOption -->
                                <!-- $$$ValueOwnership$$$QtOwnership$$$ScriptOwnership$$$AutoOwnership -->
                                <html:h3 class="fn-3" id="ValueOwnership-enum"><html:a
                                        name="ValueOwnership-enum"></html:a>enum
                                        QScriptEngine::<html:span class="name"
                                        >ValueOwnership</html:span></html:h3>
                                <html:p>This enum specifies the ownership when wrapping a C++ value,
                                    e.g. by using <html:a href="qscriptengine.html#newQObject"
                                        >newQObject</html:a>().</html:p>
                                <html:div class="table">
                                    <html:table class="valuelist">
                                        <html:tbody>
                                            <html:tr class="odd" valign="top">
                                                <html:th class="tblConst">Constant</html:th>
                                                <html:th class="tblval">Value</html:th>
                                                <html:th class="tbldscr">Description</html:th>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QScriptEngine::QtOwnership</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0</html:code></html:td>
                                                <html:td class="topAlign">The standard Qt ownership
                                                  rules apply, i.e. the associated object will never
                                                  be explicitly deleted by the script engine. This
                                                  is the default. (<html:a
                                                  href="qtcore/qobject.html">QObject</html:a>
                                                  ownership is explained in <html:a
                                                  href="qtcore/objecttrees.html">Object Trees &amp;
                                                  Ownership</html:a>.)</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QScriptEngine::ScriptOwnership</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>1</html:code></html:td>
                                                <html:td class="topAlign">The value is owned by the
                                                  script environment. The associated data will be
                                                  deleted when appropriate (i.e. after the garbage
                                                  collector has discovered that there are no more
                                                  live references to the value).</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QScriptEngine::AutoOwnership</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>2</html:code></html:td>
                                                <html:td class="topAlign">If the associated object
                                                  has a parent, the Qt ownership rules apply
                                                  (QtOwnership); otherwise, the object is owned by
                                                  the script environment
                                                  (ScriptOwnership).</html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table>
                                </html:div>
                                <!-- @@@ValueOwnership -->
                            </html:div>
                            <html:div class="func">
                                <html:h2>Member Function Documentation</html:h2>
                                <!-- $$$QScriptEngine[overload1]$$$QScriptEngine -->
                                <html:h3 class="fn-4" id="QScriptEngine"><html:a
                                        name="QScriptEngine"></html:a>QScriptEngine::<html:span
                                        class="name">QScriptEngine</html:span>()</html:h3>
                                <html:p>Constructs a <html:a href="qscriptengine.html"
                                        >QScriptEngine</html:a> object.</html:p>
                                <html:p>The <html:a href="qscriptengine.html#globalObject"
                                        >globalObject</html:a>() is initialized to have properties
                                    as described in <html:a
                                        href="http://www.ecma-international.org/publications/standards/Ecma-262.htm"
                                        >ECMA-262</html:a>, Section 15.1.</html:p>
                                <!-- @@@QScriptEngine -->
                                <!-- $$$QScriptEngine$$$QScriptEngineQObject* -->
                                <html:h3 class="fn-5" id="QScriptEngine-2"><html:a
                                        name="QScriptEngine-2"></html:a>QScriptEngine::<html:span
                                        class="name">QScriptEngine</html:span>(<html:span
                                        class="type"><html:a href="qtcore/qobject.html#QObject"
                                            >QObject</html:a></html:span> *<html:i>
                                    parent</html:i>)</html:h3>
                                <html:p>Constructs a <html:a href="qscriptengine.html"
                                        >QScriptEngine</html:a> object with the given
                                        <html:i>parent</html:i>.</html:p>
                                <html:p>The <html:a href="qscriptengine.html#globalObject"
                                        >globalObject</html:a>() is initialized to have properties
                                    as described in <html:a
                                        href="http://www.ecma-international.org/publications/standards/Ecma-262.htm"
                                        >ECMA-262</html:a>, Section 15.1.</html:p>
                                <!-- @@@QScriptEngine -->
                                <!-- $$$~QScriptEngine[overload1]$$$~QScriptEngine -->
                                <html:h3 class="fn-6" id="dtor.QScriptEngine"><html:a
                                        name="dtor.QScriptEngine"></html:a><html:code>[virtual]
                                        </html:code>QScriptEngine::<html:span class="name"
                                        >~QScriptEngine</html:span>()</html:h3>
                                <html:p>Destroys this <html:a href="qscriptengine.html"
                                        >QScriptEngine</html:a>.</html:p>
                                <!-- @@@~QScriptEngine -->
                                <!-- $$$abortEvaluation[overload1]$$$abortEvaluationconstQScriptValue& -->
                                <html:h3 class="fn-7" id="abortEvaluation"><html:a
                                        name="abortEvaluation"></html:a><html:span class="type"
                                        >void</html:span> QScriptEngine::<html:span class="name"
                                        >abortEvaluation</html:span>(const <html:span class="type"
                                            ><html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> &amp;<html:i>
                                        result</html:i> = QScriptValue())</html:h3>
                                <html:p>Aborts any script evaluation currently taking place in this
                                    engine. The given <html:i>result</html:i> is passed back as the
                                    result of the evaluation (i.e. it is returned from the call to
                                        <html:a href="qscriptengine.html#evaluate"
                                    >evaluate</html:a>() being aborted).</html:p>
                                <html:p>If the engine isn't evaluating a script (i.e. <html:a
                                        href="qscriptengine.html#isEvaluating"
                                    >isEvaluating</html:a>() returns false), this function does
                                    nothing.</html:p>
                                <html:p>Call this function if you need to abort a running script for
                                    some reason, e.g. when you have detected that the script has
                                    been running for several seconds without completing.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#evaluate">evaluate</html:a>(),
                                        <html:a href="qscriptengine.html#isEvaluating"
                                        >isEvaluating</html:a>(), and <html:a
                                        href="qscriptengine.html#setProcessEventsInterval"
                                        >setProcessEventsInterval</html:a>().</html:p>
                                <!-- @@@abortEvaluation -->
                                <!-- $$$agent[overload1]$$$agent -->
                                <html:h3 class="fn-8" id="agent"><html:a name="agent"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptengineagent.html"
                                            >QScriptEngineAgent</html:a></html:span> *
                                        QScriptEngine::<html:span class="name">agent</html:span>()
                                    const</html:h3>
                                <html:p>Returns the agent currently installed on this engine, or 0
                                    if no agent is installed.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#setAgent"
                                    >setAgent</html:a>().</html:p>
                                <!-- @@@agent -->
                                <!-- $$$availableExtensions[overload1]$$$availableExtensions -->
                                <html:h3 class="fn-9" id="availableExtensions"><html:a
                                        name="availableExtensions"></html:a><html:span class="type"
                                            ><html:a href="qtcore/qstringlist.html"
                                            >QStringList</html:a></html:span>
                                        QScriptEngine::<html:span class="name"
                                        >availableExtensions</html:span>() const</html:h3>
                                <html:p>Returns a list naming the available extensions that can be
                                    imported using the <html:a
                                        href="qscriptengine.html#importExtension"
                                        >importExtension</html:a>() function. This list includes
                                    extensions that have been imported.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#importExtension"
                                        >importExtension</html:a>() and <html:a
                                        href="qscriptengine.html#importedExtensions"
                                        >importedExtensions</html:a>().</html:p>
                                <!-- @@@availableExtensions -->
                                <!-- $$$checkSyntax[overload1]$$$checkSyntaxconstQString& -->
                                <html:h3 class="fn-10" id="checkSyntax"><html:a name="checkSyntax"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type"><html:a href="qscriptsyntaxcheckresult.html"
                                            >QScriptSyntaxCheckResult</html:a></html:span>
                                        QScriptEngine::<html:span class="name"
                                        >checkSyntax</html:span>(const <html:span class="type"
                                            ><html:a href="qtcore/qstring.html"
                                        >QString</html:a></html:span> &amp;<html:i>
                                    program</html:i>)</html:h3>
                                <html:p>Checks the syntax of the given <html:i>program</html:i>.
                                    Returns a <html:a href="qscriptsyntaxcheckresult.html"
                                        >QScriptSyntaxCheckResult</html:a> object that contains the
                                    result of the check.</html:p>
                                <html:p>This function was introduced in Qt 4.5.</html:p>
                                <!-- @@@checkSyntax -->
                                <!-- $$$clearExceptions[overload1]$$$clearExceptions -->
                                <html:h3 class="fn-11" id="clearExceptions"><html:a
                                        name="clearExceptions"></html:a><html:span class="type"
                                        >void</html:span> QScriptEngine::<html:span class="name"
                                        >clearExceptions</html:span>()</html:h3>
                                <html:p>Clears any uncaught exceptions in this engine.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#hasUncaughtException"
                                        >hasUncaughtException</html:a>().</html:p>
                                <!-- @@@clearExceptions -->
                                <!-- $$$collectGarbage[overload1]$$$collectGarbage -->
                                <html:h3 class="fn-12" id="collectGarbage"><html:a
                                        name="collectGarbage"></html:a><html:span class="type"
                                        >void</html:span> QScriptEngine::<html:span class="name"
                                        >collectGarbage</html:span>()</html:h3>
                                <html:p>Runs the garbage collector.</html:p>
                                <html:p>The garbage collector will attempt to reclaim memory by
                                    locating and disposing of objects that are no longer reachable
                                    in the script environment.</html:p>
                                <html:p>Normally you don't need to call this function; the garbage
                                    collector will automatically be invoked when the <html:a
                                        href="qscriptengine.html">QScriptEngine</html:a> decides
                                    that it's wise to do so (i.e. when a certain number of new
                                    objects have been created). However, you can call this function
                                    to explicitly request that garbage collection should be
                                    performed as soon as possible.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#reportAdditionalMemoryCost"
                                        >reportAdditionalMemoryCost</html:a>().</html:p>
                                <!-- @@@collectGarbage -->
                                <!-- $$$currentContext[overload1]$$$currentContext -->
                                <html:h3 class="fn-13" id="currentContext"><html:a
                                        name="currentContext"></html:a><html:span class="type"
                                            ><html:a href="qscriptcontext.html"
                                            >QScriptContext</html:a></html:span> *
                                        QScriptEngine::<html:span class="name"
                                        >currentContext</html:span>() const</html:h3>
                                <html:p>Returns the current context.</html:p>
                                <html:p>The current context is typically accessed to retrieve the
                                    arguments and `this' object in native functions; for
                                    convenience, it is available as the first argument in <html:a
                                        href="qscriptengine.html#FunctionSignature-typedef"
                                        >QScriptEngine::FunctionSignature</html:a>.</html:p>
                                <!-- @@@currentContext -->
                                <!-- $$$defaultPrototype[overload1]$$$defaultPrototypeint -->
                                <html:h3 class="fn-14" id="defaultPrototype"><html:a
                                        name="defaultPrototype"></html:a><html:span class="type"
                                            ><html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">defaultPrototype</html:span>(<html:span
                                        class="type">int</html:span><html:i> metaTypeId</html:i>)
                                    const</html:h3>
                                <html:p>Returns the default prototype associated with the given
                                        <html:i>metaTypeId</html:i>, or an invalid <html:a
                                        href="qscriptvalue.html">QScriptValue</html:a> if no default
                                    prototype has been set.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#setDefaultPrototype"
                                        >setDefaultPrototype</html:a>().</html:p>
                                <!-- @@@defaultPrototype -->
                                <!-- $$$evaluate[overload1]$$$evaluateconstQString&constQString&int -->
                                <html:h3 class="fn-15" id="evaluate"><html:a name="evaluate"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">evaluate</html:span>(const <html:span
                                        class="type"><html:a href="qtcore/qstring.html"
                                            >QString</html:a></html:span> &amp;<html:i>
                                        program</html:i>, const <html:span class="type"><html:a
                                            href="qtcore/qstring.html">QString</html:a></html:span>
                                        &amp;<html:i> fileName</html:i> = QString(), <html:span
                                        class="type">int</html:span><html:i> lineNumber</html:i> =
                                    1)</html:h3>
                                <html:p>Evaluates <html:i>program</html:i>, using
                                        <html:i>lineNumber</html:i> as the base line number, and
                                    returns the result of the evaluation.</html:p>
                                <html:p>The script code will be evaluated in the current
                                    context.</html:p>
                                <html:p>The evaluation of <html:i>program</html:i> can cause an
                                    exception in the engine; in this case the return value will be
                                    the exception that was thrown (typically an
                                        <html:code>Error</html:code> object). You can call <html:a
                                        href="qscriptengine.html#hasUncaughtException"
                                        >hasUncaughtException</html:a>() to determine if an
                                    exception occurred in the last call to evaluate().</html:p>
                                <html:p><html:i>lineNumber</html:i> is used to specify a starting
                                    line number for <html:i>program</html:i>; line number
                                    information reported by the engine that pertain to this
                                    evaluation (e.g. <html:a
                                        href="qscriptengine.html#uncaughtExceptionLineNumber"
                                        >uncaughtExceptionLineNumber</html:a>()) will be based on
                                    this argument. For example, if <html:i>program</html:i> consists
                                    of two lines of code, and the statement on the second line
                                    causes a script exception, <html:a
                                        href="qscriptengine.html#uncaughtExceptionLineNumber"
                                        >uncaughtExceptionLineNumber</html:a>() would return the
                                    given <html:i>lineNumber</html:i> plus one. When no starting
                                    line number is specified, line numbers will be 1-based.</html:p>
                                <html:p><html:i>fileName</html:i> is used for error reporting. For
                                    example in error objects the file name is accessible through the
                                    "fileName" property if it's provided with this
                                    function.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine-obsolete.html#canEvaluate"
                                        >canEvaluate</html:a>(), <html:a
                                        href="qscriptengine.html#hasUncaughtException"
                                        >hasUncaughtException</html:a>(), <html:a
                                        href="qscriptengine.html#isEvaluating"
                                    >isEvaluating</html:a>(), and <html:a
                                        href="qscriptengine.html#abortEvaluation"
                                        >abortEvaluation</html:a>().</html:p>
                                <!-- @@@evaluate -->
                                <!-- $$$evaluate$$$evaluateconstQScriptProgram& -->
                                <html:h3 class="fn-16" id="evaluate-2"><html:a name="evaluate-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">evaluate</html:span>(const <html:span
                                        class="type"><html:a href="qscriptprogram.html"
                                            >QScriptProgram</html:a></html:span> &amp;<html:i>
                                        program</html:i>)</html:h3>
                                <html:p>Evaluates the given <html:i>program</html:i> and returns the
                                    result of the evaluation.</html:p>
                                <html:p>This function was introduced in Qt 4.7.</html:p>
                                <!-- @@@evaluate -->
                                <!-- $$$fromScriptValue[overload1]$$$fromScriptValueconstQScriptValue& -->
                                <html:h3 class="fn-17" id="fromScriptValue"><html:a
                                        name="fromScriptValue"></html:a><html:span class="type"
                                        >T</html:span> QScriptEngine::<html:span class="name"
                                        >fromScriptValue</html:span>(const <html:span class="type"
                                            ><html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> &amp;<html:i>
                                        value</html:i>)</html:h3>
                                <html:p>Returns the given <html:i>value</html:i> converted to the
                                    template type <html:code>T</html:code>.</html:p>
                                <html:p>Note that <html:code>T</html:code> must be known to <html:a
                                        href="qtcore/qmetatype.html">QMetaType</html:a>.</html:p>
                                <html:p>See <html:a
                                        href="qtscript-index.html#conversion-between-qt-script-and-c-types"
                                        >Conversion Between Qt Script and C++ Types</html:a> for a
                                    description of the built-in type conversion provided by Qt
                                    Script.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#toScriptValue"
                                        >toScriptValue</html:a>() and <html:a
                                        href="qscriptengine.html#qScriptRegisterMetaType"
                                        >qScriptRegisterMetaType</html:a>().</html:p>
                                <!-- @@@fromScriptValue -->
                                <!-- $$$globalObject[overload1]$$$globalObject -->
                                <html:h3 class="fn-18" id="globalObject"><html:a name="globalObject"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">globalObject</html:span>() const</html:h3>
                                <html:p>Returns this engine's Global Object.</html:p>
                                <html:p>By default, the Global Object contains the built-in objects
                                    that are part of <html:a
                                        href="http://www.ecma-international.org/publications/standards/Ecma-262.htm"
                                        >ECMA-262</html:a>, such as Math, Date and String.
                                    Additionally, you can set properties of the Global Object to
                                    make your own extensions available to all script code. Non-local
                                    variables in script code will be created as properties of the
                                    Global Object, as well as local variables in global
                                    code.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#setGlobalObject"
                                        >setGlobalObject</html:a>().</html:p>
                                <!-- @@@globalObject -->
                                <!-- $$$hasUncaughtException[overload1]$$$hasUncaughtException -->
                                <html:h3 class="fn-19" id="hasUncaughtException"><html:a
                                        name="hasUncaughtException"></html:a><html:span class="type"
                                        >bool</html:span> QScriptEngine::<html:span class="name"
                                        >hasUncaughtException</html:span>() const</html:h3>
                                <html:p>Returns true if the last script evaluation resulted in an
                                    uncaught exception; otherwise returns false.</html:p>
                                <html:p>The exception state is cleared when <html:a
                                        href="qscriptengine.html#evaluate">evaluate</html:a>() is
                                    called.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#uncaughtException"
                                        >uncaughtException</html:a>() and <html:a
                                        href="qscriptengine.html#uncaughtExceptionLineNumber"
                                        >uncaughtExceptionLineNumber</html:a>().</html:p>
                                <!-- @@@hasUncaughtException -->
                                <!-- $$$importExtension[overload1]$$$importExtensionconstQString& -->
                                <html:h3 class="fn-20" id="importExtension"><html:a
                                        name="importExtension"></html:a><html:span class="type"
                                            ><html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">importExtension</html:span>(const <html:span
                                        class="type"><html:a href="qtcore/qstring.html"
                                            >QString</html:a></html:span> &amp;<html:i>
                                        extension</html:i>)</html:h3>
                                <html:p>Imports the given <html:i>extension</html:i> into this
                                        <html:a href="qscriptengine.html">QScriptEngine</html:a>.
                                    Returns <html:a href="qscriptengine.html#undefinedValue"
                                        >undefinedValue</html:a>() if the extension was successfully
                                    imported. You can call <html:a
                                        href="qscriptengine.html#hasUncaughtException"
                                        >hasUncaughtException</html:a>() to check if an error
                                    occurred; in that case, the return value is the value that was
                                    thrown by the exception (usually an <html:code>Error</html:code>
                                    object).</html:p>
                                <html:p><html:a href="qscriptengine.html">QScriptEngine</html:a>
                                    ensures that a particular extension is only imported once;
                                    subsequent calls to importExtension() with the same extension
                                    name will do nothing and return <html:a
                                        href="qscriptengine.html#undefinedValue"
                                        >undefinedValue</html:a>().</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#availableExtensions"
                                        >availableExtensions</html:a>(), <html:a
                                        href="qscriptextensionplugin.html"
                                        >QScriptExtensionPlugin</html:a>, and <html:a
                                        href="qtscriptextensions.html">Creating Qt Script
                                        Extensions</html:a>.</html:p>
                                <!-- @@@importExtension -->
                                <!-- $$$importedExtensions[overload1]$$$importedExtensions -->
                                <html:h3 class="fn-21" id="importedExtensions"><html:a
                                        name="importedExtensions"></html:a><html:span class="type"
                                            ><html:a href="qtcore/qstringlist.html"
                                            >QStringList</html:a></html:span>
                                        QScriptEngine::<html:span class="name"
                                        >importedExtensions</html:span>() const</html:h3>
                                <html:p>Returns a list naming the extensions that have been imported
                                    using the <html:a href="qscriptengine.html#importExtension"
                                        >importExtension</html:a>() function.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#availableExtensions"
                                        >availableExtensions</html:a>().</html:p>
                                <!-- @@@importedExtensions -->
                                <!-- $$$installTranslatorFunctions[overload1]$$$installTranslatorFunctionsconstQScriptValue& -->
                                <html:h3 class="fn-22" id="installTranslatorFunctions"><html:a
                                        name="installTranslatorFunctions"></html:a><html:span
                                        class="type">void</html:span> QScriptEngine::<html:span
                                        class="name">installTranslatorFunctions</html:span>(const
                                        <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> &amp;<html:i>
                                        object</html:i> = QScriptValue())</html:h3>
                                <html:p>Installs translator functions on the given
                                        <html:i>object</html:i>, or on the Global Object if no
                                    object is specified.</html:p>
                                <html:p>The relation between Qt Script translator functions and C++
                                    translator functions is described in the following
                                    table:</html:p>
                                <html:div class="table">
                                    <html:table class="generic">
                                        <html:thead>
                                            <html:tr class="qt-style">
                                                <html:th>Script Function</html:th>
                                                <html:th>Corresponding C++ Function</html:th>
                                            </html:tr>
                                        </html:thead>
                                        <html:tbody>
                                            <html:tr class="odd" valign="top">
                                                <html:td>qsTr()</html:td>
                                                <html:td><html:a href="qtcore/qobject.html#tr"
                                                  >QObject::tr</html:a>()</html:td>
                                            </html:tr>
                                            <html:tr class="even" valign="top">
                                                <html:td><html:a
                                                  href="qtcore/qtglobal.html#QT_TR_NOOP"
                                                  >QT_TR_NOOP</html:a>()</html:td>
                                                <html:td><html:a
                                                  href="qtcore/qtglobal.html#QT_TR_NOOP"
                                                  >QT_TR_NOOP</html:a>()</html:td>
                                            </html:tr>
                                            <html:tr class="odd" valign="top">
                                                <html:td>qsTranslate()</html:td>
                                                <html:td><html:a
                                                  href="qtcore/qcoreapplication.html#translate"
                                                  >QCoreApplication::translate</html:a>()</html:td>
                                            </html:tr>
                                            <html:tr class="even" valign="top">
                                                <html:td><html:a
                                                  href="qtcore/qtglobal.html#QT_TRANSLATE_NOOP"
                                                  >QT_TRANSLATE_NOOP</html:a>()</html:td>
                                                <html:td><html:a
                                                  href="qtcore/qtglobal.html#QT_TRANSLATE_NOOP"
                                                  >QT_TRANSLATE_NOOP</html:a>()</html:td>
                                            </html:tr>
                                            <html:tr class="odd" valign="top">
                                                <html:td>qsTrId() (since 4.7)</html:td>
                                                <html:td><html:a href="qtcore/qtglobal.html#qtTrId"
                                                  >qtTrId</html:a>()</html:td>
                                            </html:tr>
                                            <html:tr class="even" valign="top">
                                                <html:td><html:a
                                                  href="qtcore/qtglobal.html#QT_TRID_NOOP"
                                                  >QT_TRID_NOOP</html:a>() (since 4.7)</html:td>
                                                <html:td><html:a
                                                  href="qtcore/qtglobal.html#QT_TRID_NOOP"
                                                  >QT_TRID_NOOP</html:a>()</html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table>
                                </html:div>
                                <html:p>This function was introduced in Qt 4.5.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtdoc/internationalization.html">Internationalization
                                        with Qt</html:a>.</html:p>
                                <!-- @@@installTranslatorFunctions -->
                                <!-- $$$isEvaluating[overload1]$$$isEvaluating -->
                                <html:h3 class="fn-23" id="isEvaluating"><html:a name="isEvaluating"
                                        ></html:a><html:span class="type">bool</html:span>
                                        QScriptEngine::<html:span class="name"
                                        >isEvaluating</html:span>() const</html:h3>
                                <html:p>Returns true if this engine is currently evaluating a
                                    script, otherwise returns false.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#evaluate">evaluate</html:a>() and
                                        <html:a href="qscriptengine.html#abortEvaluation"
                                        >abortEvaluation</html:a>().</html:p>
                                <!-- @@@isEvaluating -->
                                <!-- $$$newArray[overload1]$$$newArrayuint -->
                                <html:h3 class="fn-24" id="newArray"><html:a name="newArray"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">newArray</html:span>(<html:span class="type"
                                            ><html:a href="qtcore/qtglobal.html#uint-typedef"
                                            >uint</html:a></html:span><html:i> length</html:i> =
                                    0)</html:h3>
                                <html:p>Creates a Qt Script object of class Array with the given
                                        <html:i>length</html:i>.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#newObject"
                                    >newObject</html:a>().</html:p>
                                <!-- @@@newArray -->
                                <!-- $$$newDate[overload1]$$$newDateqsreal -->
                                <html:h3 class="fn-25" id="newDate"><html:a name="newDate"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">newDate</html:span>(<html:span class="type"
                                        >qsreal</html:span><html:i> value</html:i>)</html:h3>
                                <html:p>Creates a Qt Script object of class Date with the given
                                        <html:i>value</html:i> (the number of milliseconds since 01
                                    January 1970, UTC).</html:p>
                                <!-- @@@newDate -->
                                <!-- $$$newDate$$$newDateconstQDateTime& -->
                                <html:h3 class="fn-26" id="newDate-2"><html:a name="newDate-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">newDate</html:span>(const <html:span
                                        class="type"><html:a href="qtcore/qdatetime.html"
                                            >QDateTime</html:a></html:span> &amp;<html:i>
                                        value</html:i>)</html:h3>
                                <html:p>Creates a Qt Script object of class Date from the given
                                        <html:i>value</html:i>.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptvalue.html#toDateTime"
                                        >QScriptValue::toDateTime</html:a>().</html:p>
                                <!-- @@@newDate -->
                                <!-- $$$newFunction[overload1]$$$newFunctionFunctionSignatureint -->
                                <html:h3 class="fn-27" id="newFunction"><html:a name="newFunction"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">newFunction</html:span>(<html:span class="type"
                                            ><html:a
                                            href="qscriptengine.html#FunctionSignature-typedef"
                                            >FunctionSignature</html:a></html:span><html:i>
                                        fun</html:i>, <html:span class="type"
                                        >int</html:span><html:i> length</html:i> = 0)</html:h3>
                                <html:p>Creates a <html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a> that wraps a native (C++) function.
                                        <html:i>fun</html:i> must be a C++ function with signature
                                        <html:a href="qscriptengine.html#FunctionSignature-typedef"
                                        >QScriptEngine::FunctionSignature</html:a>.
                                        <html:i>length</html:i> is the number of arguments that
                                        <html:i>fun</html:i> expects; this becomes the
                                        <html:code>length</html:code> property of the created
                                        <html:a href="qscriptvalue.html"
                                    >QScriptValue</html:a>.</html:p>
                                <html:p>Note that <html:i>length</html:i> only gives an indication
                                    of the number of arguments that the function expects; an actual
                                    invocation of a function can include any number of arguments.
                                    You can check the <html:a
                                        href="qscriptcontext.html#argumentCount"
                                        >argumentCount()</html:a> of the <html:a
                                        href="qscriptcontext.html">QScriptContext</html:a>
                                    associated with the invocation to determine the actual number of
                                    arguments passed.</html:p>
                                <html:p>A <html:code>prototype</html:code> property is automatically
                                    created for the resulting function object, to provide for the
                                    possibility that the function will be used as a
                                    constructor.</html:p>
                                <html:p>By combining newFunction() and the property flags <html:a
                                        href="qscriptvalue.html#PropertyFlag-enum"
                                        >QScriptValue::PropertyGetter</html:a> and <html:a
                                        href="qscriptvalue.html#PropertyFlag-enum"
                                        >QScriptValue::PropertySetter</html:a>, you can create
                                    script object properties that behave like normal properties in
                                    script code, but are in fact accessed through functions
                                    (analogous to how properties work in <html:a
                                        href="qtcore/properties.html#qt-s-property-system">Qt's
                                        Property System</html:a>). Example:</html:p>
                                <html:pre class="cpp"><html:span class="keyword">static</html:span>
                                    <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> getSetFoo(<html:span
                                        class="type"><html:a href="qscriptcontext.html"
                                            >QScriptContext</html:a></html:span>
                                    <html:span class="operator">*</html:span>context<html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a
                                            href="qscriptengine.html#QScriptEngine"
                                            >QScriptEngine</html:a></html:span>
                                    <html:span class="operator">*</html:span>engine) { <html:span
                                        class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> callee <html:span
                                        class="operator">=</html:span> context<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>callee(); <html:span class="keyword"
                                        >if</html:span> (context<html:span class="operator"
                                        >-</html:span><html:span class="operator"
                                    >&gt;</html:span>argumentCount() <html:span class="operator"
                                        >=</html:span><html:span class="operator">=</html:span>
                                    <html:span class="number">1</html:span>) <html:span
                                        class="comment">// writing?</html:span> callee<html:span
                                        class="operator">.</html:span>setProperty(<html:span
                                        class="string">"value"</html:span><html:span
                                        class="operator">,</html:span> context<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>argument(<html:span class="number"
                                        >0</html:span>)); <html:span class="keyword"
                                        >return</html:span> callee<html:span class="operator"
                                        >.</html:span>property(<html:span class="string"
                                        >"value"</html:span>); } <html:span class="operator"
                                        >.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator">.</html:span>
                                    <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> object <html:span
                                        class="operator">=</html:span> engine<html:span
                                        class="operator">.</html:span><html:a
                                        href="qscriptengine.html#newObject">newObject</html:a>();
                                        object<html:span class="operator">.</html:span><html:a
                                        href="qtcore/qobject.html#setProperty"
                                        >setProperty</html:a>(<html:span class="string"
                                        >"foo"</html:span><html:span class="operator">,</html:span>
                                        engine<html:span class="operator"
                                        >.</html:span>newFunction(getSetFoo)<html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span><html:span
                                        class="operator">::</html:span>PropertyGetter <html:span
                                        class="operator">|</html:span>
                                    <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span><html:span
                                        class="operator">::</html:span>PropertySetter);</html:pre>
                                <html:p>When the property <html:code>foo</html:code> of the script
                                    object is subsequently accessed in script code,
                                        <html:code>getSetFoo()</html:code> will be invoked to handle
                                    the access. In this particular case, we chose to store the
                                    "real" value of <html:code>foo</html:code> as a property of the
                                    accessor function itself; you are of course free to do whatever
                                    you like in this function.</html:p>
                                <html:p>In the above example, a single native function was used to
                                    handle both reads and writes to the property; the argument count
                                    is used to determine if we are handling a read or write. You can
                                    also use two separate functions; just specify the relevant flag
                                        (<html:a href="qscriptvalue.html#PropertyFlag-enum"
                                        >QScriptValue::PropertyGetter</html:a> or <html:a
                                        href="qscriptvalue.html#PropertyFlag-enum"
                                        >QScriptValue::PropertySetter</html:a>) when setting the
                                    property, e.g.:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> object <html:span
                                        class="operator">=</html:span> engine<html:span
                                        class="operator">.</html:span><html:a
                                        href="qscriptengine.html#newObject">newObject</html:a>();
                                        object<html:span class="operator">.</html:span><html:a
                                        href="qtcore/qobject.html#setProperty"
                                        >setProperty</html:a>(<html:span class="string"
                                        >"foo"</html:span><html:span class="operator">,</html:span>
                                        engine<html:span class="operator"
                                        >.</html:span>newFunction(getFoo)<html:span class="operator"
                                        >,</html:span>
                                    <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span><html:span
                                        class="operator">::</html:span>PropertyGetter);
                                        object<html:span class="operator">.</html:span><html:a
                                        href="qtcore/qobject.html#setProperty"
                                        >setProperty</html:a>(<html:span class="string"
                                        >"foo"</html:span><html:span class="operator">,</html:span>
                                        engine<html:span class="operator"
                                        >.</html:span>newFunction(setFoo)<html:span class="operator"
                                        >,</html:span>
                                    <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span><html:span
                                        class="operator">::</html:span>PropertySetter);</html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptvalue.html#call"
                                    >QScriptValue::call</html:a>().</html:p>
                                <!-- @@@newFunction -->
                                <!-- $$$newFunction$$$newFunctionFunctionSignatureconstQScriptValue&int -->
                                <html:h3 class="fn-28" id="newFunction-2"><html:a
                                        name="newFunction-2"></html:a><html:span class="type"
                                            ><html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">newFunction</html:span>(<html:span class="type"
                                            ><html:a
                                            href="qscriptengine.html#FunctionSignature-typedef"
                                            >FunctionSignature</html:a></html:span><html:i>
                                        fun</html:i>, const <html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> &amp;<html:i>
                                        prototype</html:i>, <html:span class="type"
                                        >int</html:span><html:i> length</html:i> = 0)</html:h3>
                                <html:p>Creates a constructor function from <html:i>fun</html:i>,
                                    with the given <html:i>length</html:i>. The
                                        <html:code>prototype</html:code> property of the resulting
                                    function is set to be the given <html:i>prototype</html:i>. The
                                        <html:code>constructor</html:code> property of
                                        <html:i>prototype</html:i> is set to be the resulting
                                    function.</html:p>
                                <html:p>When a function is called as a constructor (e.g.
                                        <html:code>new Foo()</html:code>), the `this' object
                                    associated with the function call is the new object that the
                                    function is expected to initialize; the prototype of this
                                    default constructed object will be the function's public
                                        <html:code>prototype</html:code> property. If you always
                                    want the function to behave as a constructor (e.g.
                                        <html:code>Foo()</html:code> should also create a new
                                    object), or if you need to create your own object rather than
                                    using the default `this' object, you should make sure that the
                                    prototype of your object is set correctly; either by setting it
                                    manually, or, when wrapping a custom type, by having registered
                                    the <html:a href="qscriptengine.html#defaultPrototype"
                                        >defaultPrototype</html:a>() of that type. Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> Foo(<html:span
                                        class="type"><html:a href="qscriptcontext.html"
                                            >QScriptContext</html:a></html:span>
                                    <html:span class="operator">*</html:span>context<html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a
                                            href="qscriptengine.html#QScriptEngine"
                                            >QScriptEngine</html:a></html:span>
                                    <html:span class="operator">*</html:span>engine) { <html:span
                                        class="keyword">if</html:span> (context<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>calledAsConstructor()) { <html:span
                                        class="comment">// initialize the new object</html:span>
                                        context<html:span class="operator">-</html:span><html:span
                                        class="operator">&gt;</html:span>thisObject()<html:span
                                        class="operator">.</html:span>setProperty(<html:span
                                        class="string">"bar"</html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span>); <html:span class="comment">//
                                        ...</html:span>
                                    <html:span class="comment">// return a non-object value to
                                        indicate that the</html:span>
                                    <html:span class="comment">// thisObject() should be the result
                                        of the "new Foo()" expression</html:span>
                                    <html:span class="keyword">return</html:span> engine<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>undefinedValue(); } <html:span
                                        class="keyword">else</html:span> { <html:span
                                        class="comment">// not called as "new Foo()", just
                                        "Foo()"</html:span>
                                    <html:span class="comment">// create our own object and return
                                        that one</html:span>
                                    <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> object <html:span
                                        class="operator">=</html:span> engine<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>newObject(); object<html:span
                                        class="operator">.</html:span>setPrototype(context<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>callee()<html:span class="operator"
                                        >.</html:span>property(<html:span class="string"
                                        >"prototype"</html:span>)); object<html:span
                                        class="operator">.</html:span>setProperty(<html:span
                                        class="string">"baz"</html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span>); <html:span class="keyword"
                                        >return</html:span> object; } } <html:span class="operator"
                                        >.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator">.</html:span>
                                    <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> fooProto <html:span
                                        class="operator">=</html:span> engine<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span><html:a href="qscriptengine.html#newObject"
                                        >newObject</html:a>(); fooProto<html:span class="operator"
                                        >.</html:span><html:a href="qtcore/qobject.html#setProperty"
                                        >setProperty</html:a>(<html:span class="string"
                                        >"whatever"</html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span>); engine<html:span class="operator"
                                        >-</html:span><html:span class="operator"
                                        >&gt;</html:span><html:a
                                        href="qscriptengine.html#globalObject"
                                        >globalObject</html:a>()<html:span class="operator"
                                        >.</html:span><html:a href="qtcore/qobject.html#setProperty"
                                        >setProperty</html:a>(<html:span class="string"
                                        >"Foo"</html:span><html:span class="operator">,</html:span>
                                        engine<html:span class="operator">-</html:span><html:span
                                        class="operator">&gt;</html:span>newFunction(Foo<html:span
                                        class="operator">,</html:span> fooProto));</html:pre>
                                <html:p>To wrap a custom type and provide a constructor for it,
                                    you'd typically do something like this:</html:p>
                                <html:pre class="cpp"><html:span class="keyword">class</html:span>
                                    Bar { <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span> }; <html:a
                                        href="qtcore/qmetatype.html#Q_DECLARE_METATYPE"
                                        >Q_DECLARE_METATYPE</html:a>(Bar) <html:span class="type"
                                            ><html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> constructBar(<html:span
                                        class="type"><html:a href="qscriptcontext.html"
                                            >QScriptContext</html:a></html:span>
                                    <html:span class="operator">*</html:span>context<html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a
                                            href="qscriptengine.html#QScriptEngine"
                                            >QScriptEngine</html:a></html:span>
                                    <html:span class="operator">*</html:span>engine) { Bar bar;
                                        <html:span class="comment">// initialize from arguments in
                                        context, if desired</html:span>
                                    <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span>
                                    <html:span class="keyword">return</html:span> engine<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>toScriptValue(bar); } <html:span
                                        class="keyword">class</html:span> BarPrototype : <html:span
                                        class="keyword">public</html:span>
                                    <html:span class="type"><html:a
                                            href="qtcore/qobject.html#QObject"
                                        >QObject</html:a></html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="keyword">public</html:span>
                                    <html:span class="type"><html:a href="qscriptable.html"
                                            >QScriptable</html:a></html:span> { <html:span
                                        class="comment">// provide the scriptable interface of this
                                        type using slots and properties</html:span>
                                    <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span> }; <html:span class="operator"
                                        >.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator">.</html:span>
                                    <html:span class="comment">// create and register the Bar
                                        prototype and constructor in the engine</html:span>
                                    BarPrototype <html:span class="operator"
                                    >*</html:span>barPrototypeObject <html:span class="operator"
                                        >=</html:span>
                                    <html:span class="keyword">new</html:span>
                                        BarPrototype(<html:span class="operator"
                                        >.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator">.</html:span>);
                                        <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> barProto <html:span
                                        class="operator">=</html:span> engine<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span><html:a
                                        href="qscriptengine.html#newQObject"
                                    >newQObject</html:a>(barPrototypeObject); engine<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span><html:a
                                        href="qscriptengine.html#setDefaultPrototype"
                                        >setDefaultPrototype</html:a>(<html:a
                                        href="qtcore/qmetatype.html#qMetaTypeId"
                                        >qMetaTypeId</html:a><html:span class="operator"
                                        >&lt;</html:span>Bar<html:span class="operator"
                                        >&gt;</html:span><html:span class="operator">,</html:span>
                                    barProto); <html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> barCtor <html:span
                                        class="operator">=</html:span> engine<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span><html:a
                                        href="qscriptengine.html#newFunction"
                                        >newFunction</html:a>(constructBar<html:span
                                        class="operator">,</html:span> barProto); engine<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span><html:a
                                        href="qscriptengine.html#globalObject"
                                        >globalObject</html:a>()<html:span class="operator"
                                        >.</html:span><html:a href="qtcore/qobject.html#setProperty"
                                        >setProperty</html:a>(<html:span class="string"
                                        >"Bar"</html:span><html:span class="operator">,</html:span>
                                    barCtor);</html:pre>
                                <!-- @@@newFunction -->
                                <!-- $$$newObject[overload1]$$$newObject -->
                                <html:h3 class="fn-29" id="newObject"><html:a name="newObject"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">newObject</html:span>()</html:h3>
                                <html:p>Creates a Qt Script object of class Object.</html:p>
                                <html:p>The prototype of the created object will be the Object
                                    prototype object.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#newArray">newArray</html:a>() and
                                        <html:a href="qscriptvalue.html#setProperty"
                                        >QScriptValue::setProperty</html:a>().</html:p>
                                <!-- @@@newObject -->
                                <!-- $$$newObject$$$newObjectQScriptClass*constQScriptValue& -->
                                <html:h3 class="fn-30" id="newObject-2"><html:a name="newObject-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">newObject</html:span>(<html:span class="type"
                                            ><html:a href="qscriptclass.html"
                                        >QScriptClass</html:a></html:span> *<html:i>
                                        scriptClass</html:i>, const <html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> &amp;<html:i>
                                        data</html:i> = QScriptValue())</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Creates a Qt Script Object of the given class,
                                        <html:i>scriptClass</html:i>.</html:p>
                                <html:p>The prototype of the created object will be the Object
                                    prototype object.</html:p>
                                <html:p><html:i>data</html:i>, if specified, is set as the internal
                                    data of the new object (using <html:a
                                        href="qscriptvalue.html#setData"
                                        >QScriptValue::setData</html:a>()).</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptvalue.html#scriptClass"
                                        >QScriptValue::scriptClass</html:a>() and <html:a
                                        href="qscriptengine.html#reportAdditionalMemoryCost"
                                        >reportAdditionalMemoryCost</html:a>().</html:p>
                                <!-- @@@newObject -->
                                <!-- $$$newQMetaObject[overload1]$$$newQMetaObjectconstQMetaObject*constQScriptValue& -->
                                <html:h3 class="fn-31" id="newQMetaObject"><html:a
                                        name="newQMetaObject"></html:a><html:span class="type"
                                            ><html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">newQMetaObject</html:span>(const <html:span
                                        class="type"><html:a href="qtcore/qmetaobject.html"
                                            >QMetaObject</html:a></html:span> *<html:i>
                                        metaObject</html:i>, const <html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> &amp;<html:i>
                                        ctor</html:i> = QScriptValue())</html:h3>
                                <html:p>Creates a Qt Script object that represents a <html:a
                                        href="qtcore/qobject.html">QObject</html:a> class, using the
                                    the given <html:i>metaObject</html:i> and constructor
                                        <html:i>ctor</html:i>.</html:p>
                                <html:p>Enums of <html:i>metaObject</html:i> (declared with <html:a
                                        href="qtcore/qobject.html#Q_ENUMS">Q_ENUMS</html:a>) are
                                    available as properties of the created <html:a
                                        href="qscriptvalue.html">QScriptValue</html:a>. When the
                                    class is called as a function, <html:i>ctor</html:i> will be
                                    called to create a new instance of the class.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span>
                                        mySpecialQObjectConstructor(<html:span class="type"><html:a
                                            href="qscriptcontext.html"
                                        >QScriptContext</html:a></html:span>
                                    <html:span class="operator">*</html:span>context<html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a
                                            href="qscriptengine.html#QScriptEngine"
                                            >QScriptEngine</html:a></html:span>
                                    <html:span class="operator">*</html:span>engine) { <html:span
                                        class="type"><html:a href="qtcore/qobject.html#QObject"
                                            >QObject</html:a></html:span>
                                    <html:span class="operator">*</html:span>parent <html:span
                                        class="operator">=</html:span> context<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>argument(<html:span class="number"
                                        >0</html:span>)<html:span class="operator"
                                    >.</html:span>toQObject(); <html:span class="type"><html:a
                                            href="qtcore/qobject.html#QObject"
                                        >QObject</html:a></html:span>
                                    <html:span class="operator">*</html:span>object <html:span
                                        class="operator">=</html:span>
                                    <html:span class="keyword">new</html:span>
                                    <html:span class="type"><html:a
                                            href="qtcore/qobject.html#QObject"
                                        >QObject</html:a></html:span>(parent); <html:span
                                        class="keyword">return</html:span> engine<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>newQObject(object<html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a
                                            href="qscriptengine.html#QScriptEngine"
                                            >QScriptEngine</html:a></html:span><html:span
                                        class="operator">::</html:span>ScriptOwnership); }
                                        <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span>
                                    <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> ctor <html:span
                                        class="operator">=</html:span> engine<html:span
                                        class="operator"
                                    >.</html:span>newFunction(mySpecialQObjectConstructor);
                                        <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> metaObject <html:span
                                        class="operator">=</html:span> engine<html:span
                                        class="operator">.</html:span>newQMetaObject(<html:span
                                        class="operator">&amp;</html:span><html:span class="type"
                                            ><html:a href="qtcore/qobject.html#QObject"
                                            >QObject</html:a></html:span><html:span class="operator"
                                        >::</html:span>staticMetaObject<html:span class="operator"
                                        >,</html:span> ctor); engine<html:span class="operator"
                                        >.</html:span>globalObject()<html:span class="operator"
                                        >.</html:span>setProperty(<html:span class="string"
                                        >"QObject"</html:span><html:span class="operator"
                                        >,</html:span> metaObject); <html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> result <html:span
                                        class="operator">=</html:span> engine<html:span
                                        class="operator">.</html:span>evaluate(<html:span
                                        class="string">"new QObject()"</html:span>);</html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#newQObject">newQObject</html:a>()
                                    and <html:a href="qscriptengine.html#scriptValueFromQMetaObject"
                                        >scriptValueFromQMetaObject</html:a>().</html:p>
                                <!-- @@@newQMetaObject -->
                                <!-- $$$newQObject[overload1]$$$newQObjectQObject*ValueOwnershipconstQObjectWrapOptions& -->
                                <html:h3 class="fn-32" id="newQObject"><html:a name="newQObject"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">newQObject</html:span>(<html:span class="type"
                                            ><html:a href="qtcore/qobject.html#QObject"
                                            >QObject</html:a></html:span> *<html:i> object</html:i>,
                                        <html:span class="type"><html:a
                                            href="qscriptengine.html#ValueOwnership-enum"
                                            >ValueOwnership</html:a></html:span><html:i>
                                        ownership</html:i> = QtOwnership, const <html:span
                                        class="type"><html:a
                                            href="qscriptengine.html#QObjectWrapOption-enum"
                                            >QObjectWrapOptions</html:a></html:span> &amp;<html:i>
                                        options</html:i> = 0)</html:h3>
                                <html:p>Creates a Qt Script object that wraps the given <html:a
                                        href="qtcore/qobject.html">QObject</html:a>
                                    <html:i>object</html:i>, using the given
                                        <html:i>ownership</html:i>. The given
                                        <html:i>options</html:i> control various aspects of the
                                    interaction with the resulting script object.</html:p>
                                <html:p>Signals and slots, properties and children of
                                        <html:i>object</html:i> are available as properties of the
                                    created <html:a href="qscriptvalue.html">QScriptValue</html:a>.
                                    For more information, see the <html:a href="qtscript-index.html"
                                        >Qt Script</html:a> documentation.</html:p>
                                <html:p>If <html:i>object</html:i> is a null pointer, this function
                                    returns <html:a href="qscriptengine.html#nullValue"
                                        >nullValue</html:a>().</html:p>
                                <html:p>If a default prototype has been registered for the
                                        <html:i>object</html:i>'s class (or its superclass,
                                    recursively), the prototype of the new script object will be set
                                    to be that default prototype.</html:p>
                                <html:p>If the given <html:i>object</html:i> is deleted outside of
                                    Qt Script's control, any attempt to access the deleted <html:a
                                        href="qtcore/qobject.html">QObject</html:a>'s members
                                    through the Qt Script wrapper object (either by script code or
                                    C++) will result in a script exception.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptvalue.html#toQObject"
                                        >QScriptValue::toQObject</html:a>() and <html:a
                                        href="qscriptengine.html#reportAdditionalMemoryCost"
                                        >reportAdditionalMemoryCost</html:a>().</html:p>
                                <!-- @@@newQObject -->
                                <!-- $$$newQObject$$$newQObjectconstQScriptValue&QObject*ValueOwnershipconstQObjectWrapOptions& -->
                                <html:h3 class="fn-33" id="newQObject-2"><html:a name="newQObject-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">newQObject</html:span>(const <html:span
                                        class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> &amp;<html:i>
                                        scriptObject</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qobject.html#QObject"
                                        >QObject</html:a></html:span> *<html:i> qtObject</html:i>,
                                        <html:span class="type"><html:a
                                            href="qscriptengine.html#ValueOwnership-enum"
                                            >ValueOwnership</html:a></html:span><html:i>
                                        ownership</html:i> = QtOwnership, const <html:span
                                        class="type"><html:a
                                            href="qscriptengine.html#QObjectWrapOption-enum"
                                            >QObjectWrapOptions</html:a></html:span> &amp;<html:i>
                                        options</html:i> = 0)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Initializes the given <html:i>scriptObject</html:i> to hold
                                    the given <html:i>qtObject</html:i>, and returns the
                                        <html:i>scriptObject</html:i>.</html:p>
                                <html:p>This function enables you to "promote" a plain Qt Script
                                    object (created by the <html:a
                                        href="qscriptengine.html#newObject">newObject</html:a>()
                                    function) to a <html:a href="qtcore/qobject.html"
                                        >QObject</html:a> proxy, or to replace the <html:a
                                        href="qtcore/qobject.html">QObject</html:a> contained inside
                                    an object previously created by the <html:a
                                        href="qscriptengine.html#newQObject">newQObject</html:a>()
                                    function.</html:p>
                                <html:p>The prototype() of the <html:i>scriptObject</html:i> will
                                    remain unchanged.</html:p>
                                <html:p>If <html:i>scriptObject</html:i> is not an object, this
                                    function behaves like the normal <html:a
                                        href="qscriptengine.html#newQObject">newQObject</html:a>(),
                                    i.e. it creates a new script object and returns it.</html:p>
                                <html:p>This function is useful when you want to provide a script
                                    constructor for a <html:a href="qtcore/qobject.html"
                                        >QObject</html:a>-based class. If your constructor is
                                    invoked in a <html:code>new</html:code> expression (<html:a
                                        href="qscriptcontext.html#isCalledAsConstructor"
                                        >QScriptContext::isCalledAsConstructor</html:a>() returns
                                    true), you can pass <html:a
                                        href="qscriptcontext.html#thisObject"
                                        >QScriptContext::thisObject</html:a>() (the default
                                    constructed script object) to this function to initialize the
                                    new object.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#reportAdditionalMemoryCost"
                                        >reportAdditionalMemoryCost</html:a>().</html:p>
                                <!-- @@@newQObject -->
                                <!-- $$$newRegExp[overload1]$$$newRegExpconstQRegExp& -->
                                <html:h3 class="fn-34" id="newRegExp"><html:a name="newRegExp"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">newRegExp</html:span>(const <html:span
                                        class="type"><html:a href="qtcore/qregexp.html"
                                            >QRegExp</html:a></html:span> &amp;<html:i>
                                        regexp</html:i>)</html:h3>
                                <html:p>Creates a Qt Script object of class RegExp with the given
                                        <html:i>regexp</html:i>.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptvalue.html#toRegExp"
                                        >QScriptValue::toRegExp</html:a>().</html:p>
                                <!-- @@@newRegExp -->
                                <!-- $$$newRegExp$$$newRegExpconstQString&constQString& -->
                                <html:h3 class="fn-35" id="newRegExp-2"><html:a name="newRegExp-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">newRegExp</html:span>(const <html:span
                                        class="type"><html:a href="qtcore/qstring.html"
                                            >QString</html:a></html:span> &amp;<html:i>
                                        pattern</html:i>, const <html:span class="type"><html:a
                                            href="qtcore/qstring.html">QString</html:a></html:span>
                                        &amp;<html:i> flags</html:i>)</html:h3>
                                <html:p>Creates a Qt Script object of class RegExp with the given
                                        <html:i>pattern</html:i> and
                                    <html:i>flags</html:i>.</html:p>
                                <html:p>The legal flags are 'g' (global), 'i' (ignore case), and 'm'
                                    (multiline).</html:p>
                                <!-- @@@newRegExp -->
                                <!-- $$$newVariant[overload1]$$$newVariantconstQVariant& -->
                                <html:h3 class="fn-36" id="newVariant"><html:a name="newVariant"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">newVariant</html:span>(const <html:span
                                        class="type"><html:a href="qtcore/qvariant.html"
                                            >QVariant</html:a></html:span> &amp;<html:i>
                                        value</html:i>)</html:h3>
                                <html:p>Creates a Qt Script object holding the given variant
                                        <html:i>value</html:i>.</html:p>
                                <html:p>If a default prototype has been registered with the meta
                                    type id of <html:i>value</html:i>, then the prototype of the
                                    created object will be that prototype; otherwise, the prototype
                                    will be the Object prototype object.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#setDefaultPrototype"
                                        >setDefaultPrototype</html:a>(), <html:a
                                        href="qscriptvalue.html#toVariant"
                                        >QScriptValue::toVariant</html:a>(), and <html:a
                                        href="qscriptengine.html#reportAdditionalMemoryCost"
                                        >reportAdditionalMemoryCost</html:a>().</html:p>
                                <!-- @@@newVariant -->
                                <!-- $$$newVariant$$$newVariantconstQScriptValue&constQVariant& -->
                                <html:h3 class="fn-37" id="newVariant-2"><html:a name="newVariant-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">newVariant</html:span>(const <html:span
                                        class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> &amp;<html:i>
                                        object</html:i>, const <html:span class="type"><html:a
                                            href="qtcore/qvariant.html"
                                        >QVariant</html:a></html:span> &amp;<html:i>
                                    value</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Initializes the given Qt Script <html:i>object</html:i> to
                                    hold the given variant <html:i>value</html:i>, and returns the
                                        <html:i>object</html:i>.</html:p>
                                <html:p>This function enables you to "promote" a plain Qt Script
                                    object (created by the <html:a
                                        href="qscriptengine.html#newObject">newObject</html:a>()
                                    function) to a variant, or to replace the variant contained
                                    inside an object previously created by the <html:a
                                        href="qscriptengine.html#newVariant">newVariant</html:a>()
                                    function.</html:p>
                                <html:p>The prototype() of the <html:i>object</html:i> will remain
                                    unchanged.</html:p>
                                <html:p>If <html:i>object</html:i> is not an object, this function
                                    behaves like the normal <html:a
                                        href="qscriptengine.html#newVariant">newVariant</html:a>(),
                                    i.e. it creates a new script object and returns it.</html:p>
                                <html:p>This function is useful when you want to provide a script
                                    constructor for a C++ type. If your constructor is invoked in a
                                        <html:code>new</html:code> expression (<html:a
                                        href="qscriptcontext.html#isCalledAsConstructor"
                                        >QScriptContext::isCalledAsConstructor</html:a>() returns
                                    true), you can pass <html:a
                                        href="qscriptcontext.html#thisObject"
                                        >QScriptContext::thisObject</html:a>() (the default
                                    constructed script object) to this function to initialize the
                                    new object.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#reportAdditionalMemoryCost"
                                        >reportAdditionalMemoryCost</html:a>().</html:p>
                                <!-- @@@newVariant -->
                                <!-- $$$nullValue[overload1]$$$nullValue -->
                                <html:h3 class="fn-38" id="nullValue"><html:a name="nullValue"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">nullValue</html:span>()</html:h3>
                                <html:p>Returns a <html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a> of the primitive type Null.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#undefinedValue"
                                        >undefinedValue</html:a>().</html:p>
                                <!-- @@@nullValue -->
                                <!-- $$$popContext[overload1]$$$popContext -->
                                <html:h3 class="fn-39" id="popContext"><html:a name="popContext"
                                        ></html:a><html:span class="type">void</html:span>
                                        QScriptEngine::<html:span class="name"
                                        >popContext</html:span>()</html:h3>
                                <html:p>Pops the current execution context and restores the previous
                                    one. This function must be used in conjunction with <html:a
                                        href="qscriptengine.html#pushContext"
                                    >pushContext</html:a>().</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#pushContext"
                                    >pushContext</html:a>().</html:p>
                                <!-- @@@popContext -->
                                <!-- $$$processEventsInterval[overload1]$$$processEventsInterval -->
                                <html:h3 class="fn-40" id="processEventsInterval"><html:a
                                        name="processEventsInterval"></html:a><html:span
                                        class="type">int</html:span> QScriptEngine::<html:span
                                        class="name">processEventsInterval</html:span>()
                                    const</html:h3>
                                <html:p>Returns the interval in milliseconds between calls to
                                        <html:a href="qtcore/qcoreapplication.html#processEvents"
                                        >QCoreApplication::processEvents</html:a>() while the
                                    interpreter is running.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#setProcessEventsInterval"
                                        >setProcessEventsInterval</html:a>().</html:p>
                                <!-- @@@processEventsInterval -->
                                <!-- $$$pushContext[overload1]$$$pushContext -->
                                <html:h3 class="fn-41" id="pushContext"><html:a name="pushContext"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptcontext.html"
                                        >QScriptContext</html:a></html:span> *
                                        QScriptEngine::<html:span class="name"
                                        >pushContext</html:span>()</html:h3>
                                <html:p>Enters a new execution context and returns the associated
                                        <html:a href="qscriptcontext.html">QScriptContext</html:a>
                                    object.</html:p>
                                <html:p>Once you are done with the context, you should call <html:a
                                        href="qscriptengine.html#popContext">popContext</html:a>()
                                    to restore the old context.</html:p>
                                <html:p>By default, the `this' object of the new context is the
                                    Global Object. The context's <html:a
                                        href="qscriptcontext.html#callee">callee</html:a>() will be
                                    invalid.</html:p>
                                <html:p>This function is useful when you want to evaluate script
                                    code as if it were the body of a function. You can use the
                                    context's <html:a href="qscriptcontext.html#activationObject"
                                        >activationObject</html:a>() to initialize local variables
                                    that will be available to scripts. Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qscriptengine.html#QScriptEngine"
                                            >QScriptEngine</html:a></html:span> engine; <html:span
                                        class="type"><html:a href="qscriptcontext.html"
                                            >QScriptContext</html:a></html:span>
                                    <html:span class="operator">*</html:span>context <html:span
                                        class="operator">=</html:span> engine<html:span
                                        class="operator">.</html:span>pushContext();
                                        context<html:span class="operator">-</html:span><html:span
                                        class="operator"
                                        >&gt;</html:span>activationObject()<html:span
                                        class="operator">.</html:span>setProperty(<html:span
                                        class="string">"myArg"</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">123</html:span>); engine<html:span
                                        class="operator">.</html:span>evaluate(<html:span
                                        class="string">"var tmp = myArg + 42"</html:span>);
                                        <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span> engine<html:span class="operator"
                                        >.</html:span>popContext();</html:pre>
                                <html:p>In the above example, the new variable "tmp" defined in the
                                    script will be local to the context; in other words, the script
                                    doesn't have any effect on the global environment.</html:p>
                                <html:p>Returns 0 in case of stack overflow</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#popContext"
                                    >popContext</html:a>().</html:p>
                                <!-- @@@pushContext -->
                                <!-- $$$reportAdditionalMemoryCost[overload1]$$$reportAdditionalMemoryCostint -->
                                <html:h3 class="fn-42" id="reportAdditionalMemoryCost"><html:a
                                        name="reportAdditionalMemoryCost"></html:a><html:span
                                        class="type">void</html:span> QScriptEngine::<html:span
                                        class="name"
                                        >reportAdditionalMemoryCost</html:span>(<html:span
                                        class="type">int</html:span><html:i>
                                    size</html:i>)</html:h3>
                                <html:p>Reports an additional memory cost of the given
                                        <html:i>size</html:i>, measured in bytes, to the garbage
                                    collector.</html:p>
                                <html:p>This function can be called to indicate that a Qt Script
                                    object has memory associated with it that isn't managed by Qt
                                    Script itself. Reporting the additional cost makes it more
                                    likely that the garbage collector will be triggered.</html:p>
                                <html:p>Note that if the additional memory is shared with objects
                                    outside the scripting environment, the cost should not be
                                    reported, since collecting the Qt Script object would not cause
                                    the memory to be freed anyway.</html:p>
                                <html:p>Negative <html:i>size</html:i> values are ignored, i.e. this
                                    function can't be used to report that the additional memory has
                                    been deallocated.</html:p>
                                <html:p>This function was introduced in Qt 4.7.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#collectGarbage"
                                        >collectGarbage</html:a>().</html:p>
                                <!-- @@@reportAdditionalMemoryCost -->
                                <!-- $$$scriptValueFromQMetaObject[overload1]$$$scriptValueFromQMetaObject -->
                                <html:h3 class="fn-43" id="scriptValueFromQMetaObject"><html:a
                                        name="scriptValueFromQMetaObject"></html:a><html:span
                                        class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span>
                                        QScriptEngine::<html:span class="name"
                                        >scriptValueFromQMetaObject</html:span>()</html:h3>
                                <html:p>Creates a <html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a> that represents the Qt class
                                        <html:code>T</html:code>.</html:p>
                                <html:p>This function is used in combination with one of the <html:a
                                        href="qscriptengine.html#Q_SCRIPT_DECLARE_QMETAOBJECT"
                                        >Q_SCRIPT_DECLARE_QMETAOBJECT</html:a>() macro.
                                    Example:</html:p>
                                <html:pre class="cpp"><html:a
                                        href="qscriptengine.html#Q_SCRIPT_DECLARE_QMETAOBJECT"
                                        >Q_SCRIPT_DECLARE_QMETAOBJECT</html:a>(<html:span
                                        class="type"><html:a href="qtwidgets/qlineedit.html"
                                            >QLineEdit</html:a></html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a href="qtwidgets/qwidget.html"
                                            >QWidget</html:a></html:span><html:span class="operator"
                                        >*</html:span>) <html:span class="operator"
                                        >.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator">.</html:span>
                                    <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> lineEditClass
                                        <html:span class="operator">=</html:span> engine<html:span
                                        class="operator"
                                        >.</html:span>scriptValueFromQMetaObject<html:span
                                        class="operator">&lt;</html:span><html:span class="type"
                                            ><html:a href="qtwidgets/qlineedit.html"
                                            >QLineEdit</html:a></html:span><html:span
                                        class="operator">&gt;</html:span>(); engine<html:span
                                        class="operator">.</html:span><html:a
                                        href="qscriptengine.html#globalObject"
                                        >globalObject</html:a>()<html:span class="operator"
                                        >.</html:span><html:a href="qtcore/qobject.html#setProperty"
                                        >setProperty</html:a>(<html:span class="string"
                                        >"QLineEdit"</html:span><html:span class="operator"
                                        >,</html:span> lineEditClass);</html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#newQMetaObject"
                                        >QScriptEngine::newQMetaObject</html:a>().</html:p>
                                <!-- @@@scriptValueFromQMetaObject -->
                                <!-- $$$setAgent[overload1]$$$setAgentQScriptEngineAgent* -->
                                <html:h3 class="fn-44" id="setAgent"><html:a name="setAgent"
                                        ></html:a><html:span class="type">void</html:span>
                                        QScriptEngine::<html:span class="name"
                                        >setAgent</html:span>(<html:span class="type"><html:a
                                            href="qscriptengineagent.html"
                                            >QScriptEngineAgent</html:a></html:span> *<html:i>
                                        agent</html:i>)</html:h3>
                                <html:p>Installs the given <html:i>agent</html:i> on this engine.
                                    The agent will be notified of various events pertaining to
                                    script execution. This is useful when you want to find out
                                    exactly what the engine is doing, e.g. when <html:a
                                        href="qscriptengine.html#evaluate">evaluate</html:a>() is
                                    called. The agent interface is the basis of tools like debuggers
                                    and profilers.</html:p>
                                <html:p>The engine maintains ownership of the
                                    <html:i>agent</html:i>.</html:p>
                                <html:p>Calling this function will replace the existing agent, if
                                    any.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#agent">agent</html:a>().</html:p>
                                <!-- @@@setAgent -->
                                <!-- $$$setDefaultPrototype[overload1]$$$setDefaultPrototypeintconstQScriptValue& -->
                                <html:h3 class="fn-45" id="setDefaultPrototype"><html:a
                                        name="setDefaultPrototype"></html:a><html:span class="type"
                                        >void</html:span> QScriptEngine::<html:span class="name"
                                        >setDefaultPrototype</html:span>(<html:span class="type"
                                        >int</html:span><html:i> metaTypeId</html:i>, const
                                        <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> &amp;<html:i>
                                        prototype</html:i>)</html:h3>
                                <html:p>Sets the default prototype of the C++ type identified by the
                                    given <html:i>metaTypeId</html:i> to
                                    <html:i>prototype</html:i>.</html:p>
                                <html:p>The default prototype provides a script interface for values
                                    of type <html:i>metaTypeId</html:i> when a value of that type is
                                    accessed from script code. Whenever the script engine
                                    (implicitly or explicitly) creates a <html:a
                                        href="qscriptvalue.html">QScriptValue</html:a> from a value
                                    of type <html:i>metaTypeId</html:i>, the default prototype will
                                    be set as the <html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a>'s prototype.</html:p>
                                <html:p>The <html:i>prototype</html:i> object itself may be
                                    constructed using one of two principal techniques; the simplest
                                    is to subclass <html:a href="qscriptable.html"
                                        >QScriptable</html:a>, which enables you to define the
                                    scripting API of the type through <html:a
                                        href="qtcore/qobject.html">QObject</html:a> properties and
                                    slots. Another possibility is to create a script object by
                                    calling <html:a href="qscriptengine.html#newObject"
                                        >newObject</html:a>(), and populate the object with the
                                    desired properties (e.g. native functions wrapped with <html:a
                                        href="qscriptengine.html#newFunction"
                                    >newFunction</html:a>()).</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#defaultPrototype"
                                        >defaultPrototype</html:a>(), <html:a
                                        href="qscriptengine.html#qScriptRegisterMetaType"
                                        >qScriptRegisterMetaType</html:a>(), <html:a
                                        href="qscriptable.html">QScriptable</html:a>, and <html:a
                                        href="qtscript-script-defaultprototypes-example.html"
                                        >Default Prototypes Example</html:a>.</html:p>
                                <!-- @@@setDefaultPrototype -->
                                <!-- $$$setGlobalObject[overload1]$$$setGlobalObjectconstQScriptValue& -->
                                <html:h3 class="fn-46" id="setGlobalObject"><html:a
                                        name="setGlobalObject"></html:a><html:span class="type"
                                        >void</html:span> QScriptEngine::<html:span class="name"
                                        >setGlobalObject</html:span>(const <html:span class="type"
                                            ><html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> &amp;<html:i>
                                        object</html:i>)</html:h3>
                                <html:p>Sets this engine's Global Object to be the given
                                        <html:i>object</html:i>. If <html:i>object</html:i> is not a
                                    valid script object, this function does nothing.</html:p>
                                <html:p>When setting a custom global object, you may want to use
                                        <html:a href="qscriptvalueiterator.html"
                                        >QScriptValueIterator</html:a> to copy the properties of the
                                    standard Global Object; alternatively, you can set the internal
                                    prototype of your custom object to be the original Global
                                    Object.</html:p>
                                <html:p>This function was introduced in Qt 4.5.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#globalObject"
                                    >globalObject</html:a>().</html:p>
                                <!-- @@@setGlobalObject -->
                                <!-- $$$setProcessEventsInterval[overload1]$$$setProcessEventsIntervalint -->
                                <html:h3 class="fn-47" id="setProcessEventsInterval"><html:a
                                        name="setProcessEventsInterval"></html:a><html:span
                                        class="type">void</html:span> QScriptEngine::<html:span
                                        class="name">setProcessEventsInterval</html:span>(<html:span
                                        class="type">int</html:span><html:i>
                                    interval</html:i>)</html:h3>
                                <html:p>Sets the interval between calls to <html:a
                                        href="qtcore/qcoreapplication.html#processEvents"
                                        >QCoreApplication::processEvents</html:a> to
                                        <html:i>interval</html:i> milliseconds.</html:p>
                                <html:p>While the interpreter is running, all event processing is by
                                    default blocked. This means for instance that the gui will not
                                    be updated and timers will not be fired. To allow event
                                    processing during interpreter execution one can specify the
                                    processing interval to be a positive value, indicating the
                                    number of milliseconds between each time <html:a
                                        href="qtcore/qcoreapplication.html#processEvents"
                                        >QCoreApplication::processEvents</html:a>() is
                                    called.</html:p>
                                <html:p>The default value is -1, which disables event processing
                                    during interpreter execution.</html:p>
                                <html:p>You can use <html:a
                                        href="qtcore/qcoreapplication.html#postEvent"
                                        >QCoreApplication::postEvent</html:a>() to post an event
                                    that performs custom processing at the next interval. For
                                    example, you could keep track of the total running time of the
                                    script and call <html:a
                                        href="qscriptengine.html#abortEvaluation"
                                        >abortEvaluation</html:a>() when you detect that the script
                                    has been running for a long time without completing.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#processEventsInterval"
                                        >processEventsInterval</html:a>().</html:p>
                                <!-- @@@setProcessEventsInterval -->
                                <!-- $$$signalHandlerException[overload1]$$$signalHandlerExceptionconstQScriptValue& -->
                                <html:h3 class="fn-48" id="signalHandlerException"><html:a
                                        name="signalHandlerException"></html:a><html:code>[signal]
                                        </html:code><html:span class="type">void</html:span>
                                        QScriptEngine::<html:span class="name"
                                        >signalHandlerException</html:span>(const <html:span
                                        class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> &amp;<html:i>
                                        exception</html:i>)</html:h3>
                                <html:p>This signal is emitted when a script function connected to a
                                    signal causes an <html:i>exception</html:i>.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#qScriptConnect"
                                        >qScriptConnect</html:a>().</html:p>
                                <!-- @@@signalHandlerException -->
                                <!-- $$$toObject[overload1]$$$toObjectconstQScriptValue& -->
                                <html:h3 class="fn-49" id="toObject"><html:a name="toObject"
                                        ></html:a><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">toObject</html:span>(const <html:span
                                        class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> &amp;<html:i>
                                        value</html:i>)</html:h3>
                                <html:p>Converts the given <html:i>value</html:i> to an object, if
                                    such a conversion is possible; otherwise returns an invalid
                                        <html:a href="qscriptvalue.html">QScriptValue</html:a>. The
                                    conversion is performed according to the following
                                    table:</html:p>
                                <html:div class="table">
                                    <html:table class="generic">
                                        <html:thead>
                                            <html:tr class="qt-style">
                                                <html:th>Input Type</html:th>
                                                <html:th>Result</html:th>
                                            </html:tr>
                                        </html:thead>
                                        <html:tbody>
                                            <html:tr class="odd" valign="top">
                                                <html:td>Undefined</html:td>
                                                <html:td>An invalid <html:a href="qscriptvalue.html"
                                                  >QScriptValue</html:a>.</html:td>
                                            </html:tr>
                                            <html:tr class="even" valign="top">
                                                <html:td>Null</html:td>
                                                <html:td>An invalid <html:a href="qscriptvalue.html"
                                                  >QScriptValue</html:a>.</html:td>
                                            </html:tr>
                                            <html:tr class="odd" valign="top">
                                                <html:td>Boolean</html:td>
                                                <html:td>A new Boolean object whose internal value
                                                  is set to the value of the boolean.</html:td>
                                            </html:tr>
                                            <html:tr class="even" valign="top">
                                                <html:td>Number</html:td>
                                                <html:td>A new Number object whose internal value is
                                                  set to the value of the number.</html:td>
                                            </html:tr>
                                            <html:tr class="odd" valign="top">
                                                <html:td>String</html:td>
                                                <html:td>A new String object whose internal value is
                                                  set to the value of the string.</html:td>
                                            </html:tr>
                                            <html:tr class="even" valign="top">
                                                <html:td>Object</html:td>
                                                <html:td>The result is the object itself (no
                                                  conversion).</html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table>
                                </html:div>
                                <html:p>This function was introduced in Qt 4.5.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#newObject"
                                    >newObject</html:a>().</html:p>
                                <!-- @@@toObject -->
                                <!-- $$$toScriptValue[overload1]$$$toScriptValueconstT& -->
                                <html:h3 class="fn-50" id="toScriptValue"><html:a
                                        name="toScriptValue"></html:a><html:span class="type"
                                            ><html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">toScriptValue</html:span>(const <html:span
                                        class="type">T</html:span> &amp;<html:i>
                                    value</html:i>)</html:h3>
                                <html:p>Creates a <html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a> with the given
                                    <html:i>value</html:i>.</html:p>
                                <html:p>Note that the template type <html:code>T</html:code> must be
                                    known to <html:a href="qtcore/qmetatype.html"
                                    >QMetaType</html:a>.</html:p>
                                <html:p>See <html:a
                                        href="qtscript-index.html#conversion-between-qt-script-and-c-types"
                                        >Conversion Between Qt Script and C++ Types</html:a> for a
                                    description of the built-in type conversion provided by Qt
                                    Script. By default, the types that are not specially handled by
                                    Qt Script are represented as QVariants (e.g. the
                                        <html:i>value</html:i> is passed to <html:a
                                        href="qscriptengine.html#newVariant">newVariant</html:a>());
                                    you can change this behavior by installing your own type
                                    conversion functions with <html:a
                                        href="qscriptengine.html#qScriptRegisterMetaType"
                                        >qScriptRegisterMetaType</html:a>().</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#fromScriptValue"
                                        >fromScriptValue</html:a>() and <html:a
                                        href="qscriptengine.html#qScriptRegisterMetaType"
                                        >qScriptRegisterMetaType</html:a>().</html:p>
                                <!-- @@@toScriptValue -->
                                <!-- $$$toStringHandle[overload1]$$$toStringHandleconstQString& -->
                                <html:h3 class="fn-51" id="toStringHandle"><html:a
                                        name="toStringHandle"></html:a><html:span class="type"
                                            ><html:a href="qscriptstring.html"
                                            >QScriptString</html:a></html:span>
                                        QScriptEngine::<html:span class="name"
                                        >toStringHandle</html:span>(const <html:span class="type"
                                            ><html:a href="qtcore/qstring.html"
                                        >QString</html:a></html:span> &amp;<html:i>
                                    str</html:i>)</html:h3>
                                <html:p>Returns a handle that represents the given string,
                                        <html:i>str</html:i>.</html:p>
                                <html:p><html:a href="qscriptstring.html">QScriptString</html:a> can
                                    be used to quickly look up properties, and compare property
                                    names, of script objects.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptvalue.html#property"
                                        >QScriptValue::property</html:a>().</html:p>
                                <!-- @@@toStringHandle -->
                                <!-- $$$uncaughtException[overload1]$$$uncaughtException -->
                                <html:h3 class="fn-52" id="uncaughtException"><html:a
                                        name="uncaughtException"></html:a><html:span class="type"
                                            ><html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">uncaughtException</html:span>() const</html:h3>
                                <html:p>Returns the current uncaught exception, or an invalid
                                        <html:a href="qscriptvalue.html">QScriptValue</html:a> if
                                    there is no uncaught exception.</html:p>
                                <html:p>The exception value is typically an
                                        <html:code>Error</html:code> object; in that case, you can
                                    call toString() on the return value to obtain an error
                                    message.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#hasUncaughtException"
                                        >hasUncaughtException</html:a>() and <html:a
                                        href="qscriptengine.html#uncaughtExceptionLineNumber"
                                        >uncaughtExceptionLineNumber</html:a>().</html:p>
                                <!-- @@@uncaughtException -->
                                <!-- $$$uncaughtExceptionBacktrace[overload1]$$$uncaughtExceptionBacktrace -->
                                <html:h3 class="fn-53" id="uncaughtExceptionBacktrace"><html:a
                                        name="uncaughtExceptionBacktrace"></html:a><html:span
                                        class="type"><html:a href="qtcore/qstringlist.html"
                                            >QStringList</html:a></html:span>
                                        QScriptEngine::<html:span class="name"
                                        >uncaughtExceptionBacktrace</html:span>() const</html:h3>
                                <html:p>Returns a human-readable backtrace of the last uncaught
                                    exception.</html:p>
                                <html:p>It is in the form <html:code>&lt;function-name&gt;() at
                                        &lt;file-name&gt;:&lt;line-number&gt;</html:code>.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#uncaughtException"
                                        >uncaughtException</html:a>().</html:p>
                                <!-- @@@uncaughtExceptionBacktrace -->
                                <!-- $$$uncaughtExceptionLineNumber[overload1]$$$uncaughtExceptionLineNumber -->
                                <html:h3 class="fn-54" id="uncaughtExceptionLineNumber"><html:a
                                        name="uncaughtExceptionLineNumber"></html:a><html:span
                                        class="type">int</html:span> QScriptEngine::<html:span
                                        class="name">uncaughtExceptionLineNumber</html:span>()
                                    const</html:h3>
                                <html:p>Returns the line number where the last uncaught exception
                                    occurred.</html:p>
                                <html:p>Line numbers are 1-based, unless a different base was
                                    specified as the second argument to <html:a
                                        href="qscriptengine.html#evaluate"
                                    >evaluate</html:a>().</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#hasUncaughtException"
                                        >hasUncaughtException</html:a>().</html:p>
                                <!-- @@@uncaughtExceptionLineNumber -->
                                <!-- $$$undefinedValue[overload1]$$$undefinedValue -->
                                <html:h3 class="fn-55" id="undefinedValue"><html:a
                                        name="undefinedValue"></html:a><html:span class="type"
                                            ><html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> QScriptEngine::<html:span
                                        class="name">undefinedValue</html:span>()</html:h3>
                                <html:p>Returns a <html:a href="qscriptvalue.html"
                                        >QScriptValue</html:a> of the primitive type
                                    Undefined.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#nullValue"
                                    >nullValue</html:a>().</html:p>
                                <!-- @@@undefinedValue -->
                            </html:div>
                            <html:div class="relnonmem">
                                <html:h2>Related Non-Members</html:h2>
                                <!-- $$$FunctionSignature -->
                                <html:h3 class="fn-56" id="FunctionSignature-typedef-2"><html:a
                                        name="FunctionSignature-typedef-2"></html:a>typedef
                                        QScriptEngine::<html:span class="name"
                                        >FunctionSignature</html:span></html:h3>
                                <html:p>The function signature <html:code>QScriptValue
                                        f(QScriptContext *, QScriptEngine *)</html:code>.</html:p>
                                <html:p>A function with such a signature can be passed to <html:a
                                        href="qscriptengine.html#newFunction"
                                        >QScriptEngine::newFunction</html:a>() to wrap the
                                    function.</html:p>
                                <!-- @@@FunctionSignature -->
                                <!-- $$$FunctionWithArgSignature -->
                                <html:h3 class="fn-57" id="FunctionWithArgSignature-typedef-2"
                                        ><html:a name="FunctionWithArgSignature-typedef-2"
                                    ></html:a>typedef QScriptEngine::<html:span class="name"
                                        >FunctionWithArgSignature</html:span></html:h3>
                                <html:p>The function signature <html:code>QScriptValue
                                        f(QScriptContext *, QScriptEngine *, void
                                    *)</html:code>.</html:p>
                                <html:p>A function with such a signature can be passed to <html:a
                                        href="qscriptengine.html#newFunction"
                                        >QScriptEngine::newFunction</html:a>() to wrap the
                                    function.</html:p>
                                <!-- @@@FunctionWithArgSignature -->
                                <!-- $$$qScriptConnect[overload1]$$$qScriptConnectQObject*constchar*constQScriptValue&constQScriptValue& -->
                                <html:h3 class="fn-58" id="qScriptConnect"><html:a
                                        name="qScriptConnect"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">qScriptConnect</html:span>(<html:span
                                        class="type"><html:a href="qtcore/qobject.html#QObject"
                                            >QObject</html:a></html:span> *<html:i> sender</html:i>,
                                    const <html:span class="type">char</html:span> *<html:i>
                                        signal</html:i>, const <html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> &amp;<html:i>
                                        receiver</html:i>, const <html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> &amp;<html:i>
                                        function</html:i>)</html:h3>
                                <html:p>Creates a connection from the <html:i>signal</html:i> in the
                                        <html:i>sender</html:i> to the given
                                        <html:i>function</html:i>. If <html:i>receiver</html:i> is
                                    an object, it will act as the `this' object when the signal
                                    handler function is invoked. Returns true if the connection
                                    succeeds; otherwise returns false.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#qScriptDisconnect"
                                        >qScriptDisconnect</html:a>() and <html:a
                                        href="qscriptengine.html#signalHandlerException"
                                        >QScriptEngine::signalHandlerException</html:a>().</html:p>
                                <!-- @@@qScriptConnect -->
                                <!-- $$$qScriptDisconnect[overload1]$$$qScriptDisconnectQObject*constchar*constQScriptValue&constQScriptValue& -->
                                <html:h3 class="fn-59" id="qScriptDisconnect"><html:a
                                        name="qScriptDisconnect"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">qScriptDisconnect</html:span>(<html:span
                                        class="type"><html:a href="qtcore/qobject.html#QObject"
                                            >QObject</html:a></html:span> *<html:i> sender</html:i>,
                                    const <html:span class="type">char</html:span> *<html:i>
                                        signal</html:i>, const <html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> &amp;<html:i>
                                        receiver</html:i>, const <html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> &amp;<html:i>
                                        function</html:i>)</html:h3>
                                <html:p>Disconnects the <html:i>signal</html:i> in the
                                        <html:i>sender</html:i> from the given
                                        (<html:i>receiver</html:i>, <html:i>function</html:i>) pair.
                                    Returns true if the connection is successfully broken; otherwise
                                    returns false.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#qScriptConnect"
                                        >qScriptConnect</html:a>().</html:p>
                                <!-- @@@qScriptDisconnect -->
                                <!-- $$$qScriptRegisterMetaType[overload1]$$$qScriptRegisterMetaTypeQScriptEngine*QScriptValue(*)(QScriptEngine*,constT&t)void(*)(constQScriptValue&,T&t)constQScriptValue& -->
                                <html:h3 class="fn-60" id="qScriptRegisterMetaType"><html:a
                                        name="qScriptRegisterMetaType"></html:a><html:span
                                        class="type">int</html:span>
                                    <html:span class="name"
                                        >qScriptRegisterMetaType</html:span>(<html:span class="type"
                                            ><html:a href="qscriptengine.html#QScriptEngine"
                                            >QScriptEngine</html:a></html:span> *<html:i>
                                        engine</html:i>, <html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span>(* ) ( <html:span
                                        class="type"><html:a href="qscriptengine.html#QScriptEngine"
                                            >QScriptEngine</html:a></html:span> *, const <html:span
                                        class="type">T</html:span> &amp; <html:span class="type"
                                        >t</html:span> )<html:i> toScriptValue</html:i>, <html:span
                                        class="type">void</html:span>(* ) ( const <html:span
                                        class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> &amp;, <html:span
                                        class="type">T</html:span> &amp; <html:span class="type"
                                        >t</html:span> )<html:i> fromScriptValue</html:i>, const
                                        <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> &amp;<html:i>
                                        prototype</html:i> = QScriptValue())</html:h3>
                                <html:p>Registers the type <html:code>T</html:code> in the given
                                        <html:i>engine</html:i>. <html:i>toScriptValue</html:i> must
                                    be a function that will convert from a value of type
                                        <html:code>T</html:code> to a <html:a
                                        href="qscriptvalue.html">QScriptValue</html:a>, and
                                        <html:i>fromScriptValue</html:i> a function that does the
                                    opposite. <html:i>prototype</html:i>, if valid, is the prototype
                                    that's set on QScriptValues returned by
                                        <html:i>toScriptValue</html:i>.</html:p>
                                <html:p>Returns the internal ID used by <html:a
                                        href="qtcore/qmetatype.html">QMetaType</html:a>.</html:p>
                                <html:p>You only need to call this function if you want to provide
                                    custom conversion of values of type <html:code>T</html:code>,
                                    i.e. if the default <html:a href="qtcore/qvariant.html"
                                        >QVariant</html:a>-based representation and conversion is
                                    not appropriate. (Note that custom <html:a
                                        href="qtcore/qobject.html">QObject</html:a>-derived types
                                    also fall in this category; e.g. for a <html:a
                                        href="qtcore/qobject.html">QObject</html:a>-derived class
                                    called MyObject, you probably want to define conversion
                                    functions for MyObject* that utilize <html:a
                                        href="qscriptengine.html#newQObject"
                                        >QScriptEngine::newQObject</html:a>() and <html:a
                                        href="qscriptvalue.html#toQObject"
                                        >QScriptValue::toQObject</html:a>().)</html:p>
                                <html:p>If you only want to define a common script interface for
                                    values of type <html:code>T</html:code>, and don't care how
                                    those values are represented (i.e. storing them in QVariants is
                                    fine), use <html:a href="qscriptengine.html#setDefaultPrototype"
                                        >setDefaultPrototype</html:a>() instead; this will minimize
                                    conversion costs.</html:p>
                                <html:p>You need to declare the custom type first with <html:a
                                        href="qtcore/qmetatype.html#Q_DECLARE_METATYPE"
                                        >Q_DECLARE_METATYPE</html:a>().</html:p>
                                <html:p>After a type has been registered, you can convert from a
                                        <html:a href="qscriptvalue.html">QScriptValue</html:a> to
                                    that type using <html:a
                                        href="qscriptengine.html#fromScriptValue"
                                        >fromScriptValue</html:a>(), and create a <html:a
                                        href="qscriptvalue.html">QScriptValue</html:a> from a value
                                    of that type using <html:a
                                        href="qscriptengine.html#toScriptValue"
                                        >toScriptValue</html:a>(). The engine will take care of
                                    calling the proper conversion function when calling C++ slots,
                                    and when getting or setting a C++ property; i.e. the custom type
                                    may be used seamlessly on both the C++ side and the script
                                    side.</html:p>
                                <html:p>The following is an example of how to use this function. We
                                    will specify custom conversion of our type
                                        <html:code>MyStruct</html:code>. Here's the C++
                                    type:</html:p>
                                <html:pre class="cpp"><html:span class="keyword">struct</html:span>
                                    MyStruct { <html:span class="type">int</html:span> x; <html:span
                                        class="type">int</html:span> y; };</html:pre>
                                <html:p>We must declare it so that the type will be known to <html:a
                                        href="qtcore/qmetatype.html">QMetaType</html:a>:</html:p>
                                <html:pre class="cpp">Q_DECLARE_METATYPE(MyStruct)</html:pre>
                                <html:p>Next, the <html:code>MyStruct</html:code> conversion
                                    functions. We represent the <html:code>MyStruct</html:code>
                                    value as a script object and just copy the properties:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> toScriptValue(<html:span
                                        class="type"><html:a href="qscriptengine.html"
                                            >QScriptEngine</html:a></html:span>
                                    <html:span class="operator">*</html:span>engine<html:span
                                        class="operator">,</html:span>
                                    <html:span class="keyword">const</html:span> MyStruct <html:span
                                        class="operator">&amp;</html:span>s) { <html:span
                                        class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> obj <html:span
                                        class="operator">=</html:span> engine<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>newObject(); obj<html:span class="operator"
                                        >.</html:span>setProperty(<html:span class="string"
                                        >"x"</html:span><html:span class="operator">,</html:span>
                                        s<html:span class="operator">.</html:span>x); obj<html:span
                                        class="operator">.</html:span>setProperty(<html:span
                                        class="string">"y"</html:span><html:span class="operator"
                                        >,</html:span> s<html:span class="operator">.</html:span>y);
                                        <html:span class="keyword">return</html:span> obj; }
                                        <html:span class="type">void</html:span>
                                        fromScriptValue(<html:span class="keyword">const</html:span>
                                    <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span>
                                    <html:span class="operator">&amp;</html:span>obj<html:span
                                        class="operator">,</html:span> MyStruct <html:span
                                        class="operator">&amp;</html:span>s) { s<html:span
                                        class="operator">.</html:span>x <html:span class="operator"
                                        >=</html:span> obj<html:span class="operator"
                                        >.</html:span>property(<html:span class="string"
                                        >"x"</html:span>)<html:span class="operator"
                                    >.</html:span>toInt32(); s<html:span class="operator"
                                        >.</html:span>y <html:span class="operator">=</html:span>
                                        obj<html:span class="operator"
                                        >.</html:span>property(<html:span class="string"
                                        >"y"</html:span>)<html:span class="operator"
                                    >.</html:span>toInt32(); }</html:pre>
                                <html:p>Now we can register <html:code>MyStruct</html:code> with the
                                    engine:</html:p>
                                <html:pre class="cpp">qScriptRegisterMetaType(engine<html:span
                                        class="operator">,</html:span> toScriptValue<html:span
                                        class="operator">,</html:span> fromScriptValue);</html:pre>
                                <html:p>Working with <html:code>MyStruct</html:code> values is now
                                    easy:</html:p>
                                <html:pre class="cpp">MyStruct s <html:span class="operator"
                                        >=</html:span> qscriptvalue_cast<html:span class="operator"
                                        >&lt;</html:span>MyStruct<html:span class="operator"
                                        >&gt;</html:span>(context<html:span class="operator"
                                        >-</html:span><html:span class="operator"
                                        >&gt;</html:span>argument(<html:span class="number"
                                        >0</html:span>)); <html:span class="operator"
                                        >.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator">.</html:span>
                                    MyStruct s2; s2<html:span class="operator">.</html:span>x
                                        <html:span class="operator">=</html:span> s<html:span
                                        class="operator">.</html:span>x <html:span class="operator"
                                        >+</html:span>
                                    <html:span class="number">10</html:span>; s2<html:span
                                        class="operator">.</html:span>y <html:span class="operator"
                                        >=</html:span> s<html:span class="operator">.</html:span>y
                                        <html:span class="operator">+</html:span>
                                    <html:span class="number">20</html:span>; <html:span
                                        class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> v <html:span
                                        class="operator">=</html:span> engine<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>toScriptValue(s2);</html:pre>
                                <html:p>If you want to be able to construct values of your custom
                                    type from script code, you have to register a constructor
                                    function for the type. For example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> createMyStruct(<html:span
                                        class="type"><html:a href="qscriptcontext.html"
                                            >QScriptContext</html:a></html:span>
                                    <html:span class="operator">*</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a href="qscriptengine.html"
                                            >QScriptEngine</html:a></html:span>
                                    <html:span class="operator">*</html:span>engine) { MyStruct s;
                                        s<html:span class="operator">.</html:span>x <html:span
                                        class="operator">=</html:span>
                                    <html:span class="number">123</html:span>; s<html:span
                                        class="operator">.</html:span>y <html:span class="operator"
                                        >=</html:span>
                                    <html:span class="number">456</html:span>; <html:span
                                        class="keyword">return</html:span> engine<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>toScriptValue(s); } <html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator">.</html:span>
                                    <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> ctor <html:span
                                        class="operator">=</html:span> engine<html:span
                                        class="operator">.</html:span>newFunction(createMyStruct);
                                        engine<html:span class="operator"
                                        >.</html:span>globalObject()<html:span class="operator"
                                        >.</html:span>setProperty(<html:span class="string"
                                        >"MyStruct"</html:span><html:span class="operator"
                                        >,</html:span> ctor);</html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#qScriptRegisterSequenceMetaType"
                                        >qScriptRegisterSequenceMetaType</html:a>() and <html:a
                                        href="qtcore/qmetatype.html#qRegisterMetaType"
                                        >qRegisterMetaType</html:a>().</html:p>
                                <!-- @@@qScriptRegisterMetaType -->
                                <!-- $$$qScriptRegisterSequenceMetaType[overload1]$$$qScriptRegisterSequenceMetaTypeQScriptEngine*constQScriptValue& -->
                                <html:h3 class="fn-61" id="qScriptRegisterSequenceMetaType"><html:a
                                        name="qScriptRegisterSequenceMetaType"></html:a><html:span
                                        class="type">int</html:span>
                                    <html:span class="name"
                                        >qScriptRegisterSequenceMetaType</html:span>(<html:span
                                        class="type"><html:a href="qscriptengine.html#QScriptEngine"
                                            >QScriptEngine</html:a></html:span> *<html:i>
                                        engine</html:i>, const <html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> &amp;<html:i>
                                        prototype</html:i> = QScriptValue())</html:h3>
                                <html:p>Registers the sequence type <html:code>T</html:code> in the
                                    given <html:i>engine</html:i>. This function provides conversion
                                    functions that convert between <html:code>T</html:code> and Qt
                                    Script <html:code>Array</html:code> objects.
                                        <html:code>T</html:code> must provide a const_iterator class
                                    and begin(), end() and push_back() functions. If
                                        <html:i>prototype</html:i> is valid, it will be set as the
                                    prototype of <html:code>Array</html:code> objects due to
                                    conversion from <html:code>T</html:code>; otherwise, the
                                    standard <html:code>Array</html:code> prototype will be
                                    used.</html:p>
                                <html:p>Returns the internal ID used by <html:a
                                        href="qtcore/qmetatype.html">QMetaType</html:a>.</html:p>
                                <html:p>You need to declare the container type first with <html:a
                                        href="qtcore/qmetatype.html#Q_DECLARE_METATYPE"
                                        >Q_DECLARE_METATYPE</html:a>(). If the element type isn't a
                                    standard Qt/C++ type, it must be declared using <html:a
                                        href="qtcore/qmetatype.html#Q_DECLARE_METATYPE"
                                        >Q_DECLARE_METATYPE</html:a>() as well. Example:</html:p>
                                <html:pre class="cpp">Q_DECLARE_METATYPE(<html:span class="type"
                                            ><html:a href="qtcore/qvector.html"
                                        >QVector</html:a></html:span><html:span class="operator"
                                        >&lt;</html:span><html:span class="type"
                                        >int</html:span><html:span class="operator"
                                    >&gt;</html:span>) <html:span class="operator"
                                        >.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator">.</html:span>
                                        qScriptRegisterSequenceMetaType<html:span class="operator"
                                        >&lt;</html:span><html:span class="type"><html:a
                                            href="qtcore/qvector.html"
                                        >QVector</html:a></html:span><html:span class="operator"
                                        >&lt;</html:span><html:span class="type"
                                        >int</html:span><html:span class="operator">&gt;</html:span>
                                    <html:span class="operator">&gt;</html:span>(engine); <html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator">.</html:span>
                                    <html:span class="type"><html:a href="qtcore/qvector.html"
                                            >QVector</html:a></html:span><html:span class="operator"
                                        >&lt;</html:span><html:span class="type"
                                        >int</html:span><html:span class="operator">&gt;</html:span>
                                    v <html:span class="operator">=</html:span>
                                        qscriptvalue_cast<html:span class="operator"
                                        >&lt;</html:span><html:span class="type"><html:a
                                            href="qtcore/qvector.html"
                                        >QVector</html:a></html:span><html:span class="operator"
                                        >&lt;</html:span><html:span class="type"
                                        >int</html:span><html:span class="operator">&gt;</html:span>
                                    <html:span class="operator">&gt;</html:span>(engine<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>evaluate(<html:span class="string">"[5, 1,
                                        3, 2]"</html:span>)); <html:a
                                        href="qtcore/qtalgorithms-obsolete.html#qSort"
                                        >qSort</html:a>(v<html:span class="operator"
                                        >.</html:span>begin()<html:span class="operator"
                                        >,</html:span> v<html:span class="operator"
                                    >.</html:span>end()); <html:span class="type"><html:a
                                            href="qscriptvalue.html"
                                        >QScriptValue</html:a></html:span> a <html:span
                                        class="operator">=</html:span> engine<html:span
                                        class="operator">-</html:span><html:span class="operator"
                                        >&gt;</html:span>toScriptValue(v); <html:a
                                        href="qtcore/qtglobal.html#qDebug">qDebug</html:a>()
                                        <html:span class="operator">&lt;</html:span><html:span
                                        class="operator">&lt;</html:span> a<html:span
                                        class="operator">.</html:span>toString(); <html:span
                                        class="comment">// outputs "[1, 2, 3,
                                    5]"</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#qScriptRegisterMetaType"
                                        >qScriptRegisterMetaType</html:a>().</html:p>
                                <!-- @@@qScriptRegisterSequenceMetaType -->
                                <!-- $$$qScriptValueFromSequence[overload1]$$$qScriptValueFromSequenceQScriptEngine*constContainer& -->
                                <html:h3 class="fn-62" id="qScriptValueFromSequence"><html:a
                                        name="qScriptValueFromSequence"></html:a><html:span
                                        class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span>
                                    <html:span class="name"
                                        >qScriptValueFromSequence</html:span>(<html:span
                                        class="type"><html:a href="qscriptengine.html#QScriptEngine"
                                            >QScriptEngine</html:a></html:span> *<html:i>
                                        engine</html:i>, const <html:span class="type"
                                        >Container</html:span> &amp;<html:i>
                                    container</html:i>)</html:h3>
                                <html:p>Creates an array in the form of a <html:a
                                        href="qscriptvalue.html">QScriptValue</html:a> using the
                                    given <html:i>engine</html:i> with the given
                                        <html:i>container</html:i> of template type
                                        <html:code>Container</html:code>.</html:p>
                                <html:p>The <html:code>Container</html:code> type must provide a
                                        <html:code>const_iterator</html:code> class to enable the
                                    contents of the container to be copied into the array.</html:p>
                                <html:p>Additionally, the type of each element in the sequence
                                    should be suitable for conversion to a <html:a
                                        href="qscriptvalue.html">QScriptValue</html:a>. See <html:a
                                        href="qtscript-index.html#conversion-between-qt-script-and-c-types"
                                        >Conversion Between Qt Script and C++ Types</html:a> for
                                    more information about the restrictions on types that can be
                                    used with <html:a href="qscriptvalue.html"
                                    >QScriptValue</html:a>.</html:p>
                                <html:p>This function was introduced in Qt 4.3.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptengine.html#fromScriptValue"
                                        >QScriptEngine::fromScriptValue</html:a>().</html:p>
                                <!-- @@@qScriptValueFromSequence -->
                                <!-- $$$qScriptValueToSequence[overload1]$$$qScriptValueToSequenceconstQScriptValue&Container& -->
                                <html:h3 class="fn-63" id="qScriptValueToSequence"><html:a
                                        name="qScriptValueToSequence"></html:a><html:span
                                        class="type">void</html:span>
                                    <html:span class="name">qScriptValueToSequence</html:span>(const
                                        <html:span class="type"><html:a href="qscriptvalue.html"
                                            >QScriptValue</html:a></html:span> &amp;<html:i>
                                        value</html:i>, <html:span class="type"
                                        >Container</html:span> &amp;<html:i>
                                    container</html:i>)</html:h3>
                                <html:p>Copies the elements in the sequence specified by
                                        <html:i>value</html:i> to the given
                                        <html:i>container</html:i> of template type
                                        <html:code>Container</html:code>.</html:p>
                                <html:p>The <html:i>value</html:i> used is typically an array, but
                                    any container can be copied as long as it provides a
                                        <html:code>length</html:code> property describing how many
                                    elements it contains.</html:p>
                                <html:p>Additionally, the type of each element in the sequence must
                                    be suitable for conversion to a C++ type from a <html:a
                                        href="qscriptvalue.html">QScriptValue</html:a>. See <html:a
                                        href="qtscript-index.html#conversion-between-qt-script-and-c-types"
                                        >Conversion Between Qt Script and C++ Types</html:a> for
                                    more information about the restrictions on types that can be
                                    used with <html:a href="qscriptvalue.html"
                                    >QScriptValue</html:a>.</html:p>
                                <html:p>This function was introduced in Qt 4.3.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qscriptvalue.html#qscriptvalue_cast"
                                        >qscriptvalue_cast</html:a>().</html:p>
                                <!-- @@@qScriptValueToSequence -->
                            </html:div>
                            <html:div class="macros">
                                <html:h2>Macro Documentation</html:h2>
                                <!-- $$$Q_SCRIPT_DECLARE_QMETAOBJECT[overload1]$$$Q_SCRIPT_DECLARE_QMETAOBJECT -->
                                <html:h3 class="fn-64" id="Q_SCRIPT_DECLARE_QMETAOBJECT"><html:a
                                        name="Q_SCRIPT_DECLARE_QMETAOBJECT"></html:a><html:span
                                        class="name"
                                        >Q_SCRIPT_DECLARE_QMETAOBJECT</html:span>(<html:i>
                                        QMetaObject</html:i>, <html:i> ArgType</html:i>)</html:h3>
                                <html:p>Declares the given <html:i>QMetaObject</html:i>. Used in
                                    combination with <html:a
                                        href="qscriptengine.html#scriptValueFromQMetaObject"
                                        >QScriptEngine::scriptValueFromQMetaObject</html:a>() to
                                    make enums and instantiation of <html:i>QMetaObject</html:i>
                                    available to script code. The constructor generated by this
                                    macro takes a single argument of type <html:i>ArgType</html:i>;
                                    typically the argument is the parent type of the new instance,
                                    in which case <html:i>ArgType</html:i> is
                                        <html:code>QWidget*</html:code> or
                                        <html:code>QObject*</html:code>. Objects created by the
                                    constructor will have <html:a
                                        href="qscriptengine.html#ValueOwnership-enum"
                                        >QScriptEngine::AutoOwnership</html:a> ownership.</html:p>
                                <html:p>This function was introduced in Qt 4.3.</html:p>
                                <!-- @@@Q_SCRIPT_DECLARE_QMETAOBJECT -->
                            </html:div>
                        </html:div>
                    </html:div>
                </html:div>
            </html:div>
        </html:div>
        <html:div class="footer">
            <html:p>
                <html:acronym title="Copyright">&#169;</html:acronym> 2015 The Qt Company Ltd.
                Documentation contributions included herein are the copyrights of their respective
                owners.<html:br /> The documentation provided herein is licensed under the terms of
                the <html:a href="http://www.gnu.org/licenses/fdl.html">GNU Free Documentation
                    License version 1.3</html:a> as published by the Free Software
                Foundation.<html:br /> Qt and respective logos are trademarks of The Qt Company Ltd.
                in Finland and/or other countries worldwide. All other trademarks are property of
                their respective owners. </html:p>
        </html:div></html:body>
</html:html>