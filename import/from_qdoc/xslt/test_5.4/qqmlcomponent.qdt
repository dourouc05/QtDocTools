<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.1-extension qtdoctools-1.0"
            xml:lang="en">
   <db:title>QQmlComponent Class</db:title>
   <db:classsynopsis>
      <db:ooclass>
         <db:classname>QQmlComponent</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="header">#include
                                                  &lt;QQmlComponent&gt;</db:classsynopsisinfo>
      <db:classsynopsisinfo role="qmake"> QT +=
                                                qml</db:classsynopsisinfo>
      <db:classsynopsisinfo role="inherits">
         <db:link xlink:href="qtcore/qobject.html">QObject</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="since"> Qt
                                                5.0</db:classsynopsisinfo>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:type>
         <db:varname>progress</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qqmlcomponent.html#Status-enum">Status</db:type>
         <db:varname>status</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qurl.html">QUrl</db:type>
         <db:varname>url</db:varname>
      </db:fieldsynopsis>
      <db:constructorsynopsis xlink:href="#QQmlComponent">
         <db:methodname>QQmlComponent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QQmlEngine 
                                        *  engine ,  QObject  *  parent  =
                                    0)</db:exceptionname>
      </db:constructorsynopsis>
      <db:constructorsynopsis xlink:href="#QQmlComponent-3">
         <db:methodname>QQmlComponent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QQmlEngine  * 
                                        engine , const  QString 
                                        &amp;  fileName ,  QObject  *  parent 
                                    = 0)</db:exceptionname>
      </db:constructorsynopsis>
      <db:constructorsynopsis xlink:href="#QQmlComponent-4">
         <db:methodname>QQmlComponent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QQmlEngine  * 
                                        engine , const  QString 
                                        &amp;  fileName ,  CompilationMode 
                                        mode ,  QObject  *  parent  =
                                    0)</db:exceptionname>
      </db:constructorsynopsis>
      <db:constructorsynopsis xlink:href="#QQmlComponent-5">
         <db:methodname>QQmlComponent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QQmlEngine  * 
                                        engine , const  QUrl 
                                        &amp;  url ,  QObject  *  parent  =
                                    0)</db:exceptionname>
      </db:constructorsynopsis>
      <db:constructorsynopsis xlink:href="#QQmlComponent-6">
         <db:methodname>QQmlComponent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QQmlEngine  * 
                                        engine , const  QUrl 
                                        &amp;  url ,  CompilationMode 
                                        mode ,  QObject  *  parent  =
                                    0)</db:exceptionname>
      </db:constructorsynopsis>
      <db:destructorsynopsis xlink:href="dtor.QQmlComponent">
         <db:methodname>~QQmlComponent</db:methodname>
         <db:void/>
      </db:destructorsynopsis>
      <db:methodsynopsis xlink:href="beginCreate">
         <db:type xlink:href="qtcore/qobject.html#QObject">QObject</db:type>
         <db:methodname>beginCreate</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QQmlContext 
                                        *  publicContext )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="completeCreate">
         <db:void/>
         <db:methodname>completeCreate</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="create">
         <db:type xlink:href="qtcore/qobject.html#QObject">QObject</db:type>
         <db:methodname>create</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QQmlContext 
                                        *  context  = 0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="create-2">
         <db:void/>
         <db:methodname>create</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QQmlIncubator  &amp; 
                                        incubator ,  QQmlContext 
                                        *  context  = 0,  QQmlContext  * 
                                        forContext  = 0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="creationContext">
         <db:type xlink:href="qqmlcontext.html">QQmlContext</db:type>
         <db:methodname>creationContext</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="errors">
         <db:type>QList&lt;QQmlError&gt;</db:type>
         <db:methodname>errors</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="isError">
         <db:type>bool</db:type>
         <db:methodname>isError</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="isLoading">
         <db:type>bool</db:type>
         <db:methodname>isLoading</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="isNull">
         <db:type>bool</db:type>
         <db:methodname>isNull</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="isReady">
         <db:type>bool</db:type>
         <db:methodname>isReady</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="loadUrl">
         <db:void/>
         <db:methodname>loadUrl</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QUrl  &amp; 
                                    url )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="loadUrl-2">
         <db:void/>
         <db:methodname>loadUrl</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QUrl  &amp;  url ,
                                         CompilationMode 
                                        mode )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setData">
         <db:void/>
         <db:methodname>setData</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QByteArray  &amp; 
                                        data , const  QUrl 
                                        &amp;  url )</db:exceptionname>
      </db:methodsynopsis>
      <db:enumsynopsis xlink:href="#CompilationMode-enum">
         <db:enumname>CompilationMode</db:enumname>
         <db:enumitem>
            <db:enumidentifier>QQmlComponent::PreferSynchronous</db:enumidentifier>
            <db:enumvalue>0</db:enumvalue>
         </db:enumitem>
         <db:enumitem>
            <db:enumidentifier>QQmlComponent::Asynchronous</db:enumidentifier>
            <db:enumvalue>1</db:enumvalue>
         </db:enumitem>
      </db:enumsynopsis>
      <db:enumsynopsis xlink:href="#Status-enum">
         <db:enumname>Status</db:enumname>
         <db:enumitem>
            <db:enumidentifier>QQmlComponent::Null</db:enumidentifier>
            <db:enumvalue>0</db:enumvalue>
         </db:enumitem>
         <db:enumitem>
            <db:enumidentifier>QQmlComponent::Ready</db:enumidentifier>
            <db:enumvalue>1</db:enumvalue>
         </db:enumitem>
         <db:enumitem>
            <db:enumidentifier>QQmlComponent::Loading</db:enumidentifier>
            <db:enumvalue>2</db:enumvalue>
         </db:enumitem>
         <db:enumitem>
            <db:enumidentifier>QQmlComponent::Error</db:enumidentifier>
            <db:enumvalue>3</db:enumvalue>
         </db:enumitem>
      </db:enumsynopsis>
   </db:classsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code>
                                    class encapsulates a QML component definition</db:para>
      <db:para>Components are reusable, encapsulated QML types with
                                    well-defined interfaces.</db:para>
      <db:para>A <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code>
                                    instance can be created from a QML file. For example, if there
                                    is a <db:code>main.qml</db:code> file like this:</db:para>
      <db:programlisting language="qml">import QtQuick 2.0 Item { width: 200height: 200 }</db:programlisting>
      <db:para>The following code loads this QML file as a component,
                                    creates an instance of this component using <db:code><db:link xlink:href="qqmlcomponent.html#create">create</db:link>()</db:code>, and then
                                    queries the <db:link xlink:href="qtquick/qml-qtquick-item.html">Item</db:link>'s <db:link xlink:href="qtquick/qml-qtquick-item.html#width-prop">width</db:link> value:</db:para>
      <db:programlisting>QQmlEngine*engine =newQQmlEngine; QQmlComponent
                                        component(engine,QUrl::fromLocalFile("main.qml")); QObject*myObject = component.create();
                                        QQuickItem*item = qobject_cast&lt;QQuickItem*&gt;(myObject); int width = item-&gt;width(); // width =
                                        200</db:programlisting>
      <db:para>To create instances of a component in code where a <db:code><db:link xlink:href="qqmlengine.html">QQmlEngine</db:link></db:code> instance is not
                                    available, you can use <db:code><db:link xlink:href="qqmlengine.html#qmlContext">qmlContext</db:link>()</db:code> or <db:code><db:link xlink:href="qqmlengine.html#qmlEngine">qmlEngine</db:link>()</db:code>. For
                                    example, in the scenario below, child items are being created
                                    within a <db:code><db:link xlink:href="qtquick/qquickitem.html">QQuickItem</db:link></db:code> subclass:</db:para>
      <db:programlisting>void
                                        MyCppItem::init() {
                                        QQmlEngine*engine = qmlEngine(this); // Or:// QQmlEngine *engine =
                                        qmlContext(this)-&gt;engine();QQmlComponent
                                        component(engine,QUrl::fromLocalFile("MyItem.qml")); QQuickItem*childItem = qobject_cast&lt;QQuickItem*&gt;(component.create()); childItem-&gt;setParentItem(this); }</db:programlisting>
      <db:para>Note that these functions will return
                                        <db:code>null</db:code> when called inside the
                                    constructor of a <db:code><db:link xlink:href="qtcore/qobject.html">QObject</db:link></db:code> subclass, as the instance will not yet
                                    have a context nor engine.</db:para>
      <db:para>If the URL passed to <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code> is a network resource, or if the QML
                                    document references a network resource, the <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code> has to
                                    fetch the network data before it is able to create objects. In
                                    this case, the <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code> will have a <db:link xlink:href="qqmlcomponent.html#Status-enum">Loading</db:link>
         <db:link xlink:href="qqmlcomponent.html#status-prop">status</db:link>.
                                    An application will have to wait until the component is <db:link xlink:href="qqmlcomponent.html#Status-enum">Ready</db:link> before
                                    calling <db:code><db:link xlink:href="qqmlcomponent.html#create">QQmlComponent::create</db:link>()</db:code>.</db:para>
      <db:para>The following example shows how to load a QML file from a
                                    network resource. After creating the <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code>, it tests
                                    whether the component is loading. If it is, it connects to the
                                        <db:code><db:link xlink:href="qqmlcomponent.html#status-prop">QQmlComponent::statusChanged</db:link>()</db:code> signal and
                                    otherwise calls the <db:code>continueLoading()</db:code>
                                    method directly. Note that <db:code><db:link xlink:href="qqmlcomponent.html#isLoading">QQmlComponent::isLoading</db:link>()</db:code> may be false for a
                                    network component if the component has been cached and is ready
                                    immediately.</db:para>
      <db:programlisting>MyApplication::MyApplication() { // ... component =newQQmlComponent(engine,QUrl("http://www.example.com/main.qml")); if (component-&gt;isLoading()) QObject::connect(component, SIGNAL(statusChanged(QQmlComponent::Status)),this, SLOT(continueLoading()));
                                        else
                                    continueLoading(); } void
                                        MyApplication::continueLoading() { if (component-&gt;isError()) { qWarning()
                                        &lt;&lt; component-&gt;errors(); } else { QObject*myObject = component-&gt;create(); } }</db:programlisting>
      <db:para>Note that the <db:link xlink:href="qtdoc/qtquick-porting-qt5.html#qt-quick-1">Qt Quick
                                        1</db:link> version is named QDeclarativeComponent.</db:para>
   </db:section>
   <db:section xml:id="types">
      <db:title>Member Type Documentation</db:title>
      <db:section xml:id="CompilationMode-enum">
         <db:title>enum QQmlComponent::CompilationMode</db:title>
         <db:para>Specifies whether the <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code> should load the component
                                    immediately, or asynchonously.</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QQmlComponent::PreferSynchronous</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Prefer loading/compiling
                                                  the component immediately, blocking the thread.
                                                  This is not always possible; for example, remote
                                                  URLs will always load asynchronously.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QQmlComponent::Asynchronous</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>1</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Load/compile the component
                                                  in a background thread.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="Status-enum">
         <db:title>enum QQmlComponent::Status</db:title>
         <db:para>Specifies the loading status of the <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code>.</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QQmlComponent::Null</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>This <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code>
                                                  has no data. Call <db:code><db:link xlink:href="qqmlcomponent.html#loadUrl">loadUrl</db:link>()</db:code> or <db:code><db:link xlink:href="qqmlcomponent.html#setData">setData</db:link>()</db:code> to add QML content.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QQmlComponent::Ready</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>1</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>This <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code>
                                                  is ready and <db:code><db:link xlink:href="qqmlcomponent.html#create">create</db:link>()</db:code>
                                                  may be called.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QQmlComponent::Loading</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>2</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>This <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code>
                                                  is loading network data.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QQmlComponent::Error</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>3</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>An error has occurred.
                                                  Call <db:code><db:link xlink:href="qqmlcomponent.html#errors">errors</db:link>()</db:code> to retrieve a list of {<db:code><db:link xlink:href="qqmlerror.html">QQmlError</db:link></db:code>}{errors}.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
   </db:section>
   <db:section xml:id="prop">
      <db:title>Property Documentation</db:title>
      <db:section xml:id="progress-prop">
         <db:title>progress : const <db:link xlink:href="qtcore/qtglobal.html#qreal-typedef">qreal</db:link></db:title>
         <db:para>The progress of loading the component, from 0.0 (nothing
                                    loaded) to 1.0 (finished).</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  qreal </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">progress</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">progressChanged</db:emphasis>(qreal<db:emphasis>
                                                  progress</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="status-prop">
         <db:title>status : const <db:link xlink:href="qqmlcomponent.html#Status-enum">Status</db:link></db:title>
         <db:para>The component's current <db:link xlink:href="qqmlcomponent.html#Status-enum">status</db:link>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  Status </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">status</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">statusChanged</db:emphasis>(QQmlComponent::Status<db:emphasis>
                                                  status</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="url-prop">
         <db:title>url : const <db:link xlink:href="qtcore/qurl.html">QUrl</db:link></db:title>
         <db:para>The component URL. This is the URL passed to either the
                                    constructor, or the <db:code><db:link xlink:href="qqmlcomponent.html#loadUrl">loadUrl</db:link>()</db:code>, or <db:code><db:link xlink:href="qqmlcomponent.html#setData">setData</db:link>()</db:code>
                                    methods.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  QUrl </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">url</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
   </db:section>
   <db:section xml:id="func">
      <db:title>Member Function Documentation</db:title>
      <db:section xml:id="QQmlComponent">
         <db:title>QQmlComponent::QQmlComponent(<db:link xlink:href="qqmlengine.html">QQmlEngine</db:link><db:link xlink:href="qtcore/qobject.html#QObject">QObject</db:link></db:title>
         <db:para>Create a <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code> with no data and give it the
                                    specified <db:emphasis>engine</db:emphasis> and <db:emphasis>parent</db:emphasis>.
                                    Set the data with <db:code><db:link xlink:href="qqmlcomponent.html#setData">setData</db:link>()</db:code>.</db:para>
      </db:section>
      <db:section xml:id="QQmlComponent-3">
         <db:title>QQmlComponent::QQmlComponent(<db:link xlink:href="qqmlengine.html">QQmlEngine</db:link><db:link xlink:href="qtcore/qstring.html">QString</db:link><db:link xlink:href="qtcore/qobject.html#QObject">QObject</db:link></db:title>
         <db:para>Create a <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code> from the given
                                        <db:emphasis>fileName</db:emphasis> and give it the specified
                                        <db:emphasis>parent</db:emphasis> and
                                    <db:emphasis>engine</db:emphasis>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qqmlcomponent.html#loadUrl">loadUrl</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="QQmlComponent-4">
         <db:title>QQmlComponent::QQmlComponent(<db:link xlink:href="qqmlengine.html">QQmlEngine</db:link><db:link xlink:href="qtcore/qstring.html">QString</db:link><db:link xlink:href="qqmlcomponent.html#CompilationMode-enum">CompilationMode</db:link><db:link xlink:href="qtcore/qobject.html#QObject">QObject</db:link></db:title>
         <db:para>Create a <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code> from the given
                                        <db:emphasis>fileName</db:emphasis> and give it the specified
                                        <db:emphasis>parent</db:emphasis> and <db:emphasis>engine</db:emphasis>. If
                                        <db:emphasis>mode</db:emphasis> is <db:link xlink:href="qqmlcomponent.html#CompilationMode-enum">Asynchronous</db:link>, the component will be loaded and
                                    compiled asynchronously.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qqmlcomponent.html#loadUrl">loadUrl</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="QQmlComponent-5">
         <db:title>QQmlComponent::QQmlComponent(<db:link xlink:href="qqmlengine.html">QQmlEngine</db:link><db:link xlink:href="qtcore/qurl.html">QUrl</db:link><db:link xlink:href="qtcore/qobject.html#QObject">QObject</db:link></db:title>
         <db:para>Create a <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code> from the given <db:emphasis>url</db:emphasis>
                                    and give it the specified <db:emphasis>parent</db:emphasis> and
                                        <db:emphasis>engine</db:emphasis>.</db:para>
         <db:para>Ensure that the URL provided is full and correct, in
                                    particular, use <db:code><db:link xlink:href="qtcore/qurl.html#fromLocalFile">QUrl::fromLocalFile</db:link>()</db:code> when loading a file from the
                                    local filesystem.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qqmlcomponent.html#loadUrl">loadUrl</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="QQmlComponent-6">
         <db:title>QQmlComponent::QQmlComponent(<db:link xlink:href="qqmlengine.html">QQmlEngine</db:link><db:link xlink:href="qtcore/qurl.html">QUrl</db:link><db:link xlink:href="qqmlcomponent.html#CompilationMode-enum">CompilationMode</db:link><db:link xlink:href="qtcore/qobject.html#QObject">QObject</db:link></db:title>
         <db:para>Create a <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code> from the given <db:emphasis>url</db:emphasis>
                                    and give it the specified <db:emphasis>parent</db:emphasis> and
                                        <db:emphasis>engine</db:emphasis>. If <db:emphasis>mode</db:emphasis> is <db:link xlink:href="qqmlcomponent.html#CompilationMode-enum">Asynchronous</db:link>, the component will be loaded and
                                    compiled asynchronously.</db:para>
         <db:para>Ensure that the URL provided is full and correct, in
                                    particular, use <db:code><db:link xlink:href="qtcore/qurl.html#fromLocalFile">QUrl::fromLocalFile</db:link>()</db:code> when loading a file from the
                                    local filesystem.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qqmlcomponent.html#loadUrl">loadUrl</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="dtor.QQmlComponent">
         <db:title>[virtual] QQmlComponent::~QQmlComponent()</db:title>
         <db:para>Destruct the <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code>.</db:para>
      </db:section>
      <db:section xml:id="beginCreate">
         <db:title>[virtual] <db:link xlink:href="qtcore/qobject.html#QObject">QObject</db:link><db:link xlink:href="qqmlcontext.html">QQmlContext</db:link></db:title>
         <db:para>This method provides advanced control over component
                                    instance creation. In general, programmers should use <db:code><db:link xlink:href="qqmlcomponent.html#create">QQmlComponent::create</db:link>()</db:code> to create a
                                    component.</db:para>
         <db:para>Create an object instance from this component. Returns 0 if
                                    creation failed. <db:emphasis>publicContext</db:emphasis> specifies the
                                    context within which to create the object instance.</db:para>
         <db:para>When <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code> constructs an instance, it occurs in
                                    three steps:</db:para>
         <db:orderedlist numeration="arabic">
            <db:listitem>
               <db:para>The object hierarchy is created, and constant values
                                        are assigned.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Property bindings are evaluated for the first
                                        time.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>If applicable, <db:code><db:link xlink:href="qqmlparserstatus.html#componentComplete">QQmlParserStatus::componentComplete</db:link>()</db:code> is
                                        called on objects.</db:para>
            </db:listitem>
         </db:orderedlist>
         <db:para>QQmlComponent::beginCreate() differs from <db:code><db:link xlink:href="qqmlcomponent.html#create">QQmlComponent::create</db:link>()</db:code> in that it only performs
                                    step 1. <db:code><db:link xlink:href="qqmlcomponent.html#completeCreate">QQmlComponent::completeCreate</db:link>()</db:code> must be called to
                                    complete steps 2 and 3.</db:para>
         <db:para>This breaking point is sometimes useful when using attached
                                    properties to communicate information to an instantiated
                                    component, as it allows their initial values to be configured
                                    before property bindings take effect.</db:para>
         <db:para>The ownership of the returned object instance is transferred
                                    to the caller.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qqmlcomponent.html#completeCreate">completeCreate</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qqmlengine.html#ObjectOwnership-enum">QQmlEngine::ObjectOwnership</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="completeCreate">
         <db:title>[virtual] void QQmlComponent::completeCreate()</db:title>
         <db:para>This method provides advanced control over component
                                    instance creation. In general, programmers should use <db:code><db:link xlink:href="qqmlcomponent.html#create">QQmlComponent::create</db:link>()</db:code> to create a
                                    component.</db:para>
         <db:para>This function completes the component creation begun with
                                        <db:code><db:link xlink:href="qqmlcomponent.html#beginCreate">QQmlComponent::beginCreate</db:link>()</db:code> and must be called
                                    afterwards.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qqmlcomponent.html#beginCreate">beginCreate</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="create">
         <db:title>[virtual] <db:link xlink:href="qtcore/qobject.html#QObject">QObject</db:link><db:link xlink:href="qqmlcontext.html">QQmlContext</db:link></db:title>
         <db:para>Create an object instance from this component. Returns 0 if
                                    creation failed. <db:emphasis>context</db:emphasis> specifies the context
                                    within which to create the object instance.</db:para>
         <db:para>If <db:emphasis>context</db:emphasis> is 0 (the default), it will
                                    create the instance in the engine' s <db:link xlink:href="qqmlengine.html#rootContext">root
                                    context</db:link>.</db:para>
         <db:para>The ownership of the returned object instance is transferred
                                    to the caller.</db:para>
         <db:para>If the object being created from this component is a visual
                                    item, it must have a visual parent, which can be set by calling
                                        <db:code><db:link xlink:href="qtquick/qquickitem.html#parent-prop">QQuickItem::setParentItem</db:link>()</db:code>. See <db:link xlink:href="qtquick/qtquick-visualcanvas-visualparent.html">Concepts - Visual Parent in Qt Quick</db:link> for more
                                    details.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qqmlengine.html#ObjectOwnership-enum">QQmlEngine::ObjectOwnership</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="create-2">
         <db:title>void QQmlComponent::create(<db:link xlink:href="qqmlincubator.html">QQmlIncubator</db:link><db:link xlink:href="qqmlcontext.html">QQmlContext</db:link><db:link xlink:href="qqmlcontext.html">QQmlContext</db:link></db:title>
         <db:para>Create an object instance from this component using the
                                    provided <db:emphasis>incubator</db:emphasis>. <db:emphasis>context</db:emphasis>
                                    specifies the context within which to create the object
                                    instance.</db:para>
         <db:para>If <db:emphasis>context</db:emphasis> is 0 (the default), it will
                                    create the instance in the engine's <db:link xlink:href="qqmlengine.html#rootContext">root
                                    context</db:link>.</db:para>
         <db:para>
            <db:emphasis>forContext</db:emphasis> specifies a context that this
                                    object creation depends upon. If the <db:emphasis>forContext</db:emphasis>
                                    is being created asynchronously, and the <db:code><db:link xlink:href="qqmlincubator.html#IncubationMode-enum">QQmlIncubator::IncubationMode</db:link></db:code> is <db:code><db:link xlink:href="qqmlincubator.html#IncubationMode-enum">QQmlIncubator::AsynchronousIfNested</db:link></db:code>, this object
                                    will also be created asynchronously. If
                                        <db:emphasis>forContext</db:emphasis> is 0 (the default), the
                                        <db:emphasis>context</db:emphasis> will be used for this
                                    decision.</db:para>
         <db:para>The created object and its creation status are available via
                                    the <db:emphasis>incubator</db:emphasis>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qqmlincubator.html">QQmlIncubator</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="creationContext">
         <db:title><db:link xlink:href="qqmlcontext.html">QQmlContext</db:link></db:title>
         <db:para>Returns the <db:code><db:link xlink:href="qqmlcontext.html">QQmlContext</db:link></db:code> the component was created in. This is
                                    only valid for components created directly from QML.</db:para>
      </db:section>
      <db:section xml:id="errors">
         <db:title><db:link xlink:href="qtcore/qlist.html">QList</db:link><db:link xlink:href="qqmlerror.html">QQmlError</db:link></db:title>
         <db:para>Return the list of errors that occurred during the last
                                    compile or create operation. An empty list is returned if
                                        <db:code><db:link xlink:href="qqmlcomponent.html#isError">isError</db:link>()</db:code>
                                    is not set.</db:para>
      </db:section>
      <db:section xml:id="isError">
         <db:title>bool QQmlComponent::isError() const</db:title>
         <db:para>Returns true if <db:code><db:link xlink:href="qqmlcomponent.html#status-prop">status</db:link>()</db:code> ==
                                        <db:code><db:link xlink:href="qqmlcomponent.html#Status-enum">QQmlComponent::Error</db:link></db:code>.</db:para>
      </db:section>
      <db:section xml:id="isLoading">
         <db:title>bool QQmlComponent::isLoading() const</db:title>
         <db:para>Returns true if <db:code><db:link xlink:href="qqmlcomponent.html#status-prop">status</db:link>()</db:code> ==
                                        <db:code><db:link xlink:href="qqmlcomponent.html#Status-enum">QQmlComponent::Loading</db:link></db:code>.</db:para>
      </db:section>
      <db:section xml:id="isNull">
         <db:title>bool QQmlComponent::isNull() const</db:title>
         <db:para>Returns true if <db:code><db:link xlink:href="qqmlcomponent.html#status-prop">status</db:link>()</db:code> ==
                                        <db:code><db:link xlink:href="qqmlcomponent.html#Status-enum">QQmlComponent::Null</db:link></db:code>.</db:para>
      </db:section>
      <db:section xml:id="isReady">
         <db:title>bool QQmlComponent::isReady() const</db:title>
         <db:para>Returns true if <db:code><db:link xlink:href="qqmlcomponent.html#status-prop">status</db:link>()</db:code> ==
                                        <db:code><db:link xlink:href="qqmlcomponent.html#Status-enum">QQmlComponent::Ready</db:link></db:code>.</db:para>
      </db:section>
      <db:section xml:id="loadUrl">
         <db:title>[slot] void QQmlComponent::loadUrl(const <db:link xlink:href="qtcore/qurl.html">QUrl</db:link></db:title>
         <db:para>Load the <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code> from the provided
                                        <db:emphasis>url</db:emphasis>.</db:para>
         <db:para>Ensure that the URL provided is full and correct, in
                                    particular, use <db:code><db:link xlink:href="qtcore/qurl.html#fromLocalFile">QUrl::fromLocalFile</db:link>()</db:code> when loading a file from the
                                    local filesystem.</db:para>
      </db:section>
      <db:section xml:id="loadUrl-2">
         <db:title>[slot] void QQmlComponent::loadUrl(const <db:link xlink:href="qtcore/qurl.html">QUrl</db:link><db:link xlink:href="qqmlcomponent.html#CompilationMode-enum">CompilationMode</db:link></db:title>
         <db:para>Load the <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code> from the provided
                                        <db:emphasis>url</db:emphasis>. If <db:emphasis>mode</db:emphasis> is <db:link xlink:href="qqmlcomponent.html#CompilationMode-enum">Asynchronous</db:link>, the component will be loaded and
                                    compiled asynchronously.</db:para>
         <db:para>Ensure that the URL provided is full and correct, in
                                    particular, use <db:code><db:link xlink:href="qtcore/qurl.html#fromLocalFile">QUrl::fromLocalFile</db:link>()</db:code> when loading a file from the
                                    local filesystem.</db:para>
      </db:section>
      <db:section xml:id="setData">
         <db:title>[slot] void QQmlComponent::setData(const <db:link xlink:href="qtcore/qbytearray.html">QByteArray</db:link><db:link xlink:href="qtcore/qurl.html">QUrl</db:link></db:title>
         <db:para>Sets the <db:code><db:link xlink:href="qqmlcomponent.html">QQmlComponent</db:link></db:code> to use the given QML
                                        <db:emphasis>data</db:emphasis>. If <db:emphasis>url</db:emphasis> is provided,
                                    it is used to set the component name and to provide a base path
                                    for items resolved by this component.</db:para>
      </db:section>
   </db:section>
</db:article>
