<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.1-extension qtdoctools-1.0"
            xml:lang="en">
   <db:title>Text Markup</db:title>
   <db:para>The text formatting commands indicate how text is to be
                                    rendered.</db:para>
   <db:section xml:id="a-parameter-marker">
      <db:title>\a (parameter marker)</db:title>
      <db:para>The \a command tells QDoc the next word is a formal
                                    parameter name.</db:para>
      <db:para>A warning is emitted when a formal parameter is not
                                    documented or is misspelled, so when you document a function you
                                    should mention each formal parameter by name in the function
                                    description, preceded by the \a command. The parameter name is
                                    then rendered in italics.</db:para>
      <db:programlisting>/*! Constructs a line edit
                                    containing the text \a contents. The \a parent parameter is sent to the
                                        QWidget constructor.*/QLineEdit::QLineEdit(constQString&amp;contents,QWidget*parent) :QWidget(parent) { ...
                                    }</db:programlisting>
      <db:para>QDoc renders this as:</db:para>
      <db:blockquote>
         <db:para>
            <db:emphasis role="bold"><db:code><db:link xlink:href="qtwidgets/qlineedit.html">QLineEdit::QLineEdit</db:link></db:code> ( const <db:code><db:link xlink:href="qtcore/qstring.html">QString</db:link></db:code> &amp;
                                            contents, <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code> *parent )</db:emphasis>
         </db:para>
         <db:para>Constructs a line edit containing the text
                                            <db:emphasis>contents</db:emphasis>. The <db:emphasis>parent</db:emphasis>
                                        parameter is sent to the <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code>
                                        constructor.</db:para>
      </db:blockquote>
      <db:para>The formal parameter name may be enclosed between curly
                                    brackets, but that isn't required.</db:para>
      <db:section>
         <db:title>See Also</db:title>
         <db:simplelist type="vert">
            <db:member>
               <db:link xlink:href="04-qdoc-commands-textmarkup.html#b">\b</db:link>
            </db:member>
         </db:simplelist>
      </db:section>
   </db:section>
   <db:section xml:id="c-code-font">
      <db:title>\c (code font)</db:title>
      <db:para>The \c command is used for rendering variable names,
                                    user-defined class names, and C++ keywords (for example,
                                        <db:code>int</db:code> and <db:code>for</db:code>)
                                    in the code font.</db:para>
      <db:para>The command renders its argument using a monospace font. For
                                    example:</db:para>
      <db:programlisting>/*! The \c AnalogClock class provides a clock widget
                                    with hour and minute hands that is automatically updated every
                                    few seconds.*/</db:programlisting>
      <db:para>QDoc renders this as:</db:para>
      <db:blockquote>
         <db:para>The <db:code>AnalogClock</db:code>
                                        class provides a clock widget with hour and minute hands,
                                        which are automatically updated every few seconds.</db:para>
      </db:blockquote>
      <db:para>If the text to be rendered in the code font contains spaces,
                                    enclose the entire text in curly brackets.</db:para>
      <db:programlisting>\c {QLineEdit::QLineEdit(constQString&amp;contents,QWidget*parent) :QWidget(parent)}</db:programlisting>
      <db:para>QDoc renders this as:</db:para>
      <db:blockquote>
         <db:para>
            <db:code>QLineEdit::QLineEdit(const
                                            QString &amp;contents, QWidget *parent)
                                            :QWidget(parent)</db:code>
         </db:para>
      </db:blockquote>
      <db:para>The \c command accepts the special character
                                        <db:code>\</db:code> within its argument, which renders
                                    it as a normal character. So if you want to use nested commands,
                                    you must use the <db:link xlink:href="04-qdoc-commands-textmarkup.html#tt-command">teletype
                                        (\tt)</db:link> command instead.</db:para>
      <db:para>See also <db:link xlink:href="04-qdoc-commands-textmarkup.html#tt-command">\tt</db:link> and <db:link xlink:href="06-qdoc-commands-includecodeinline.html#code-command">\code</db:link>.</db:para>
   </db:section>
   <db:section xml:id="div">
      <db:title>\div</db:title>
      <db:para>The \div and \enddiv commands delimit a large or small block
                                    of text (which may include other QDoc commands) to which special
                                    formatting attributes should be applied.</db:para>
      <db:para>An argument must be provided in curly braces, as in the qdoc
                                    comment shown below. The argument is not interpreted but is used
                                    as attribute(s) of the tag that is output by qdoc.</db:para>
      <db:para>For example, we might want to render an inline image so that
                                    it floats to the right of the current block of text:</db:para>
      <db:programlisting>/*! \div {class="float-right"} \inlineimage qml-column.png \enddiv */</db:programlisting>
      <db:para>If qdoc is generating HTML, it will translate these commands
                                    to:</db:para>
      <db:programlisting>&lt;div class="float-right"&gt;&lt;p&gt;&lt;img src="images/qml-column.png"/&gt;&lt;/p&gt;&lt;/div&gt;</db:programlisting>
      <db:para>For HTML, the attribute value <db:emphasis>float-right</db:emphasis>
                                    then will refer to a clause in the style.css file, which in this
                                    case could be:</db:para>
      <db:programlisting> div.float-right { float:
                                    right; margin-left:
                                        2em }</db:programlisting>
      <db:para>If qdoc is generating DITA XML, it will translate the
                                    commands to:</db:para>
      <db:programlisting>&lt;sectiondiv
                                        outputclass="float-right"&gt;&lt;p&gt;&lt;fig&gt;&lt;image href="images/qml-column.png" placement="inline"/&gt;&lt;/fig&gt;&lt;/p&gt;&lt;/sectiondiv&gt;</db:programlisting>
      <db:para>Your DITA XML publishing program must then recognize the
                                        <db:emphasis>outputclass</db:emphasis> attribute value.</db:para>
      <db:note>
         <db:para>Note that the <db:emphasis role="bold">\div</db:emphasis>
                                    command can be nested.</db:para>
      </db:note>
      <db:para>Below you can find an
                                    example taken from the index.qdoc file used to generate
                                    index.html for Qt 4.7:</db:para>
      <db:programlisting> \div {class="indexbox
                                        guide"} \div {class="heading"} Qt Developer
                                    Guide \enddiv \div {class="indexboxcont
                                        indexboxbar"} \div {class="section
                                        indexIcon"} \emptyspan \enddiv \div {class="section"} Qt is a
                                        cross-platform
                                    application and UI framework. Using Qt, you can write web-enabled applications once and
                                    deploy them across desktop, mobile and embedded operating systems without
                                    rewriting the source code. \enddiv \div {class="section
                                        sectionlist"} \list \li \l{Getting Started} \li
                                    \l{Installation} {Installation} \li \l{how-to-learn-qt.html} {How to learn Qt}
                                    \li \l{tutorials.html}
                                    {Tutorials} \li \l{Qt Examples}
                                    {Examples} \li \l{qt4-7-intro.html} {What's new in Qt
                                        4.7} \endlist \enddiv \enddiv \enddiv
                                    </db:programlisting>
      <db:para>When all the class attribute values are defined as they are
                                    in the style.css file that is used for rendering the Qt
                                    documentation, the above example is rendered as:</db:para>
      <db:para>Qt Developer Guide</db:para>
      <db:para>Qt is a cross-platform
                                                application and UI framework. Using Qt, you can
                                                write web-enabled applications once and deploy them
                                                across desktop, mobile and embedded operating
                                                systems without rewriting the source code.</db:para>
      <db:itemizedlist>
         <db:listitem>
            <db:para>Getting Started</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Installation</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>How to learn Qt</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Tutorials</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Examples</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>What's new in Qt 4.7</db:para>
         </db:listitem>
      </db:itemizedlist>
      <db:para>When generating
                                    DITA XML, qdoc outputs the nested <db:emphasis>div</db:emphasis> commands
                                    as:</db:para>
      <db:programlisting>&lt;sectiondiv outputclass="indexbox guide"&gt;&lt;sectiondiv
                                        outputclass="heading"&gt;&lt;p&gt;Qt
                                    Developer Guide&lt;/p&gt;&lt;/sectiondiv&gt;&lt;sectiondiv
                                        outputclass="indexboxcont
                                        indexboxbar"&gt;&lt;sectiondiv
                                        outputclass="section
                                        indexIcon"/&gt;&lt;sectiondiv
                                        outputclass="section"&gt;&lt;p&gt;Qt
                                    is a cross-platform
                                    application and UI framework. Using Qt, you can write web-enabled applications once and
                                    deploy them across desktop, mobile and embedded operating systems without
                                    rewriting the source code.&lt;/p&gt;&lt;/sectiondiv&gt;&lt;sectiondiv
                                        outputclass="section
                                        sectionlist"&gt;&lt;ul&gt;&lt;li&gt;&lt;xref href="gettingstarted.xml#id-606ee7a8-219b-47b7-8f94-91bc8c76e54c"&gt;Getting started&lt;/xref&gt;&lt;/li&gt;&lt;li&gt;&lt;xref href="installation.xml#id-075c20e2-aa1e-4f88-a316-a46517e50443"&gt;Installation&lt;/xref&gt;&lt;/li&gt;&lt;li&gt;&lt;xref href="how-to-learn-qt.xml#id-49f509b5-52f9-4cd9-9921-74217b9a5182"&gt;How to learn Qt&lt;/xref&gt;&lt;/li&gt;&lt;li&gt;&lt;xref href="tutorials.xml#id-a737f955-a904-455f-b4aa-0dc69ed5a64f"&gt;Tutorials&lt;/xref&gt;&lt;/li&gt;&lt;li&gt;&lt;xref href="all-examples.xml#id-98d95159-d65b-4706-b08f-13d80080448d"&gt;Examples&lt;/xref&gt;&lt;/li&gt;&lt;li&gt;&lt;xref href="qt4-7-intro.xml#id-519ae0e3-4242-4c2a-b2be-e05d1e95f177"&gt;What's new in Qt 4.7&lt;/xref&gt; &lt;/li&gt; &lt;/ul&gt;
                                        &lt;/sectiondiv&gt; &lt;/sectiondiv&gt; &lt;/sectiondiv&gt;
                                    </db:programlisting>
      <db:para>Your DITA XML publishing program must recognize the values
                                    of the <db:emphasis>outputclass</db:emphasis> attribute.</db:para>
      <db:para>See also <db:link xlink:href="04-qdoc-commands-textmarkup.html#span-command">\span</db:link>.</db:para>
   </db:section>
   <db:section xml:id="span">
      <db:title>\span</db:title>
      <db:para>The \span command applies special formatting to a small
                                    block of text.</db:para>
      <db:para>Two arguments must be provided, each argument in curly
                                    braces, as shown in the QDoc comment below. The first argument
                                    is not interpreted, but specifies the formatting attribute(s) of
                                    the tag output by QDoc. The second argument is the text to be
                                    rendered with the special formatting attributes.</db:para>
      <db:para>For example, we might want to render the first word of each
                                    element in a numeric list in blue.</db:para>
      <db:programlisting>/*! Global variables with complex
                                    types: \list 1 \li \span
                                        {class="variableName"} {mutableComplex1} in
                                        globals.cpp at line
                                        14 \li \span
                                        {class="variableName"} {mutableComplex2} in
                                        globals.cpp at line
                                        15 \li \span
                                        {class="variableName"} {constComplex1} in
                                        globals.cpp at line
                                        16 \li \span
                                        {class="variableName"} {constComplex2} in
                                        globals.cpp at line
                                        17 \endlist */</db:programlisting>
      <db:para>Class <db:emphasis>variableName</db:emphasis> refers to a clause in
                                    your style.css.</db:para>
      <db:programlisting>.variableName {
                                        font-family:
                                    courier; color: blue }</db:programlisting>
      <db:para>Using the <db:emphasis>variableName</db:emphasis> clause shown above,
                                    the example is rendered as:</db:para>
      <db:para>Global variables with complex types:</db:para>
      <db:orderedlist numeration="arabic">
         <db:listitem>
            <db:para>mutableComplex1 in globals.cpp at line
                                        14</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>mutableComplex2 in globals.cpp at line
                                        15</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>constComplex1 in globals.cpp at line
                                        16</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>constComplex2 in globals.cpp at line
                                        17</db:para>
         </db:listitem>
      </db:orderedlist>
      <db:note>
         <db:para>The <db:emphasis role="bold">span</db:emphasis> command
                                    does not cause a new paragraph to be
                                    started.</db:para>
      </db:note>
      <db:para>See also <db:link xlink:href="04-qdoc-commands-textmarkup.html#div-command">\div</db:link>.</db:para>
   </db:section>
   <db:section xml:id="tt-teletype-font">
      <db:title>\tt (teletype font)</db:title>
      <db:para>The \tt command renders its argument in a monospace font.
                                    This command behaves just like the <db:link xlink:href="04-qdoc-commands-textmarkup.html#c-command">\c</db:link> command, except that \tt allows you to nest
                                    QDoc commands within the argument (e.g. <db:link xlink:href="04-qdoc-commands-textmarkup.html#e-command">\e</db:link>, <db:link xlink:href="04-qdoc-commands-textmarkup.html#b-command">\b</db:link> and <db:link xlink:href="04-qdoc-commands-textmarkup.html#underline-command">\underline</db:link>).</db:para>
      <db:programlisting>/*! After having populated the
                                    main container with child widgets, \c setupUi() scans the main
                                        container's list of slots for names
                                        with the form \tt{on_\e{objectName}_\e{signalName}().} * /
                                    </db:programlisting>
      <db:para>QDoc renders this as:</db:para>
      <db:blockquote>
         <db:para>After having populated the main container
                                        with child widgets, <db:code>setupUi()</db:code> scans
                                        the main container's list of slots for names with the form
                                                <db:code>on_<db:replaceable>objectName</db:replaceable>_<db:replaceable>signalName</db:replaceable>().</db:code>
         </db:para>
      </db:blockquote>
      <db:para>If the text to be rendered in the code font contains spaces,
                                    enclose the entire text in curly brackets.</db:para>
      <db:programlisting>\tt {QLineEdit::QLineEdit(constQString&amp;contents,QWidget*parent) :QWidget(parent)}</db:programlisting>
      <db:para>QDoc renders this as:</db:para>
      <db:blockquote>
         <db:para>
            <db:code><db:link xlink:href="qtwidgets/qlineedit.html">QLineEdit::QLineEdit</db:link><db:link xlink:href="qtcore/qstring.html">QString</db:link>
                                            &amp;contents, <db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link> *parent) :<db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code>
         </db:para>
      </db:blockquote>
      <db:para>See also <db:link xlink:href="04-qdoc-commands-textmarkup.html#c-command">\c</db:link>.</db:para>
   </db:section>
   <db:section xml:id="b">
      <db:title>\b</db:title>
      <db:para>The \b command renders its argument in bold font. This
                                    command used to be called \bold.</db:para>
      <db:programlisting>/*! This is regular text; \b
                                        {this text is
                                    rendered using the \\b
                                        command}.*/</db:programlisting>
      <db:para>QDoc renders this as:</db:para>
      <db:blockquote>
         <db:para>This is regular text; <db:emphasis role="bold">this text is
                                            rendered using the \b command</db:emphasis>.</db:para>
      </db:blockquote>
   </db:section>
   <db:section xml:id="e-emphasis-italics-new-5-3-2012">
      <db:title>\e (emphasis, italics)
                                        </db:title>
      <db:para>The \e command renders its argument in a special font,
                                    normally italics. This command used to be called \i, which is
                                    now deprecated. Use <db:emphasis>for</db:emphasis> italics.</db:para>
      <db:para>If the argument contains spaces or other punctuation,
                                    enclose the argument in curly brackets.</db:para>
      <db:programlisting>/*! Here, we render \e {a few words} in
                                        italics.*/</db:programlisting>
      <db:para>QDoc renders this as:</db:para>
      <db:blockquote>
         <db:para>Here, we render <db:emphasis>a few
                                            words</db:emphasis> in italics.</db:para>
      </db:blockquote>
      <db:para>If you want to use other QDoc commands within an argument
                                    that contains spaces, you always need to enclose the argument in
                                    braces. But QDoc is smart enough to count parentheses [3], so
                                    you don't need braces in cases like this:</db:para>
      <db:programlisting>/*! An argument can sometimes
                                    contain whitespaces,for example: \e
                                        QPushButton(tr("A Brand New Button")) */</db:programlisting>
      <db:para>QDoc renders this as:</db:para>
      <db:blockquote>
         <db:para>An argument can sometimes contain
                                        whitespaces, for example: <db:emphasis>QPushButton(tr("A Brand
                                            New Button"))</db:emphasis>
         </db:para>
      </db:blockquote>
      <db:para>Finally, trailing punctuation is not included in an argument
                                    [4], nor is "'s" [5]</db:para>
      <db:informaltable>
         <db:tbody>
            <db:tr>
               <db:th>
                  <db:para/>
               </db:th>
               <db:th>
                  <db:para>QDoc Syntax</db:para>
               </db:th>
               <db:th>
                  <db:para>Generated Documentation</db:para>
               </db:th>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>1</db:para>
               </db:td>
               <db:td>
                  <db:para>A variation of a command button is a \e menu
                                                button.</db:para>
               </db:td>
               <db:td>
                  <db:para>A variation of a command button is a
                                                  <db:emphasis>menu</db:emphasis> button.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>2</db:para>
               </db:td>
               <db:td>
                  <db:para>The QPushButton widget provides a \e {command
                                                button}.</db:para>
               </db:td>
               <db:td>
                  <db:para>The QPushButton widget provides a
                                                  <db:emphasis>command button</db:emphasis>.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>3</db:para>
               </db:td>
               <db:td>
                  <db:para>Another class of buttons are option buttons \e
                                                (see QRadioButton).</db:para>
               </db:td>
               <db:td>
                  <db:para>Another class of buttons are option buttons
                                                  <db:emphasis> (see QRadioButton)</db:emphasis>.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>4</db:para>
               </db:td>
               <db:td>
                  <db:para>A push button emits the signal \e
                                                clicked().</db:para>
               </db:td>
               <db:td>
                  <db:para>A push button emits the signal
                                                  <db:emphasis>clicked</db:emphasis>().</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>5</db:para>
               </db:td>
               <db:td>
                  <db:para>The \e QPushButton's checked property is false
                                                by default.</db:para>
               </db:td>
               <db:td>
                  <db:para>The <db:emphasis>QPushButton</db:emphasis>'s checked
                                                property is false by default.</db:para>
               </db:td>
            </db:tr>
         </db:tbody>
      </db:informaltable>
   </db:section>
   <db:section xml:id="sub">
      <db:title>\sub</db:title>
      <db:para>The \sub command renders its argument lower than the
                                    baseline of the regular text, using a smaller font.</db:para>
      <db:programlisting>/*! Definition (Range): Consider
                                    the sequence {x\sub n}\sub {n &gt;1} . The set {x\sub 2, x\sub 3,
                                    x\sub 4,...} =
                                    {x\sub n ; n =2,3,4,...} is called the range of the
                                        sequence.*/</db:programlisting>
      <db:para>QDoc renders this as:</db:para>
      <db:blockquote>
         <db:para>Definition (Range): Consider the sequence
                                            {x<db:subscript>n</db:subscript>}<db:subscript>n &gt; 1</db:subscript> .
                                        The set</db:para>
         <db:para>{x<db:subscript>2</db:subscript>, x<db:subscript>3</db:subscript>,
                                            x<db:subscript>4</db:subscript>, ...} = {x<db:subscript>n</db:subscript>
                                        ; n = 2, 3, 4, ...}</db:para>
         <db:para>is called the range of the sequence.</db:para>
      </db:blockquote>
      <db:para>If the argument contains spaces or other punctuation,
                                    enclose the argument in curly brackets.</db:para>
   </db:section>
   <db:section xml:id="sup">
      <db:title>\sup</db:title>
      <db:para>The \sup command renders its argument higher than the
                                    baseline of the regular text, using a smaller font.</db:para>
      <db:programlisting>/*! The series 1+ a + a\sup 2+ a\sup 3+ a\sup 4+... is called the \i {geometric series}.*/</db:programlisting>
      <db:para>QDoc renders this as:</db:para>
      <db:blockquote>
         <db:para>The series</db:para>
         <db:para>1 + a + a<db:superscript>2</db:superscript> +
                                            a<db:superscript>3</db:superscript> + a<db:superscript>4</db:superscript> +
                                        ...</db:para>
         <db:para>is called the <db:emphasis>geometric
                                        series</db:emphasis>.</db:para>
      </db:blockquote>
      <db:para>If the argument contains spaces or other punctuation,
                                    enclose the argument in curly brackets.</db:para>
   </db:section>
   <db:section xml:id="uicontrol">
      <db:title>\uicontrol</db:title>
      <db:para>The \uicontrol command is used to mark content as being used
                                    for UI control elements. When using HTML, the output is rendered
                                    in bold. When using DITA XML the content is enclosed in a
                                        <db:code>uicontrol</db:code> tag.</db:para>
   </db:section>
   <db:section xml:id="underline">
      <db:title>\underline</db:title>
      <db:para>The \underline command renders its argument
                                    underlined.</db:para>
      <db:programlisting>/*! The \underline {F}ile menu
                                    gives the users the possibility to edit an existing
                                        file,or save a newor modified
                                        file, and exit the
                                        application.*/</db:programlisting>
      <db:para>QDoc renders this as:</db:para>
      <db:blockquote>
         <db:para>The <db:accel>F</db:accel>ile menu gives the
                                        users the possibility to edit an existing file, or save a
                                        new or modified file, and exit the application.</db:para>
      </db:blockquote>
      <db:para>If the argument contains spaces or other punctuation,
                                    enclose the argument in curly brackets.</db:para>
   </db:section>
   <db:section xml:id="double-backslash">
      <db:title>\\ (double backslash)</db:title>
      <db:para>The \\ command expands to a double backslash.</db:para>
      <db:para>QDoc commands always start with a single backslash. To
                                    display a single backslash in the text you need to type two
                                    backslashes. If you want to display two backslashes, you need to
                                    type four.</db:para>
      <db:programlisting>/*! The \\\\ command is useful
                                        if you want a
                                    backslash to appear verbatim,for example, writing
                                        C:\\windows\\home\\.*/</db:programlisting>
      <db:para>QDoc renders this as:</db:para>
      <db:blockquote>
         <db:para>The \\ command is useful if you want a
                                        backslash to appear verbatim, for example, writing
                                        C:\windows\home\.</db:para>
      </db:blockquote>
      <db:para>However, if you want your text to appear in a monospace font
                                    as well, you can use the <db:link xlink:href="04-qdoc-commands-textmarkup.html#c-command">\c</db:link> command instead, which accepts and renders the
                                    backslash as any other character. For example:</db:para>
      <db:programlisting>/*! The \\c command is useful
                                        if you want a
                                    backslash to appear verbatim, and the word that contains it written in a
                                    monospace font, like
                                        this: \c
                                        {C:\windows\home\}.*/</db:programlisting>
      <db:para>QDoc renders this as:</db:para>
      <db:blockquote>
         <db:para>The \c command is useful if you want a
                                        backslash to appear verbatim, and the word that contains it
                                        written in a monospace font, like this:
                                            <db:code>C:\windows\home\</db:code>.</db:para>
      </db:blockquote>
   </db:section>
</db:article>
