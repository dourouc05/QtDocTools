<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.1-extension qtdoctools-1.0"
            xml:lang="en">
   <db:title>QWidget Class</db:title>
   <db:classsynopsis xlink:href="qwidget.db">
      <db:ooclass>
         <db:classname>QWidget</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="header">#include &lt;QWidget&gt;</db:classsynopsisinfo>
      <db:classsynopsisinfo role="qmake"> QT += widgets</db:classsynopsisinfo>
      <db:classsynopsisinfo role="inherits">
         <db:link xlink:href="qtcore/qobject.html">QObject</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inherits">
         <db:link xlink:href="qtgui/qpaintdevice.html">QPaintDevice</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qabstractbutton.html">QAbstractButton</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qabstractslider.html">QAbstractSlider</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qabstractspinbox.html">QAbstractSpinBox</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qcalendarwidget.html">QCalendarWidget</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qcombobox.html">QComboBox</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qdesktopwidget.html">QDesktopWidget</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qdialog.html">QDialog</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qdialogbuttonbox.html">QDialogButtonBox</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qdockwidget.html">QDockWidget</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qfocusframe.html">QFocusFrame</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qframe.html">QFrame</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qgroupbox.html">QGroupBox</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qkeysequenceedit.html">QKeySequenceEdit</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qlineedit.html">QLineEdit</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qmaccocoaviewcontainer.html">QMacCocoaViewContainer</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qmacnativewidget.html">QMacNativeWidget</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qmainwindow.html">QMainWindow</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qmdisubwindow.html">QMdiSubWindow</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qmenu.html">QMenu</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qmenubar.html">QMenuBar</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qopenglwidget.html">QOpenGLWidget</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qprogressbar.html">QProgressBar</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qrubberband.html">QRubberBand</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qsizegrip.html">QSizeGrip</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qsplashscreen.html">QSplashScreen</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qsplitterhandle.html">QSplitterHandle</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qstatusbar.html">QStatusBar</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qtabbar.html">QTabBar</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qtabwidget.html">QTabWidget</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qtoolbar.html">QToolBar</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qwizardpage.html">QWizardPage</db:link>
      </db:classsynopsisinfo>
      <db:fieldsynopsis xlink:href="#acceptDrops-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>acceptDrops</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#accessibleDescription-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qstring.html">QString</db:type>
         <db:varname>accessibleDescription</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#accessibleName-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qstring.html">QString</db:type>
         <db:varname>accessibleName</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#autoFillBackground-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>autoFillBackground</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#baseSize-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qsize.html">QSize</db:type>
         <db:varname>baseSize</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#childrenRect-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qrect.html">QRect</db:type>
         <db:varname>childrenRect</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#childrenRegion-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtgui/qregion.html">QRegion</db:type>
         <db:varname>childrenRegion</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#contextMenuPolicy-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qt.html#ContextMenuPolicy-enum">Qt::ContextMenuPolicy</db:type>
         <db:varname>contextMenuPolicy</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#cursor-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtgui/qcursor.html">QCursor</db:type>
         <db:varname>cursor</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#enabled-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>enabled</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#focus-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>focus</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#focusPolicy-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qt.html#FocusPolicy-enum">Qt::FocusPolicy</db:type>
         <db:varname>focusPolicy</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#font-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtgui/qfont.html">QFont</db:type>
         <db:varname>font</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#frameGeometry-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qrect.html">QRect</db:type>
         <db:varname>frameGeometry</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#frameSize-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qsize.html">QSize</db:type>
         <db:varname>frameSize</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#fullScreen-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>fullScreen</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#geometry-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qrect.html">QRect</db:type>
         <db:varname>geometry</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#height-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>height</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#inputMethodHints-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qt.html#InputMethodHint-enum">Qt::InputMethodHints</db:type>
         <db:varname>inputMethodHints</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#isActiveWindow-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>isActiveWindow</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#layoutDirection-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qt.html#LayoutDirection-enum">Qt::LayoutDirection</db:type>
         <db:varname>layoutDirection</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#locale-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qlocale.html">QLocale</db:type>
         <db:varname>locale</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#maximized-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>maximized</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#maximumHeight-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>maximumHeight</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#maximumSize-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qsize.html">QSize</db:type>
         <db:varname>maximumSize</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#maximumWidth-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>maximumWidth</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#minimized-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>minimized</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#minimumHeight-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>minimumHeight</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#minimumSize-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qsize.html">QSize</db:type>
         <db:varname>minimumSize</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#minimumSizeHint-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qsize.html">QSize</db:type>
         <db:varname>minimumSizeHint</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#minimumWidth-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>minimumWidth</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#modal-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>modal</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#mouseTracking-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>mouseTracking</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#normalGeometry-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qrect.html">QRect</db:type>
         <db:varname>normalGeometry</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#palette-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtgui/qpalette.html">QPalette</db:type>
         <db:varname>palette</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#pos-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qpoint.html">QPoint</db:type>
         <db:varname>pos</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#rect-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qrect.html">QRect</db:type>
         <db:varname>rect</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#size-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qsize.html">QSize</db:type>
         <db:varname>size</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#sizeHint-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qsize.html">QSize</db:type>
         <db:varname>sizeHint</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#sizeIncrement-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qsize.html">QSize</db:type>
         <db:varname>sizeIncrement</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#sizePolicy-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qsizepolicy.html">QSizePolicy</db:type>
         <db:varname>sizePolicy</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#statusTip-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qstring.html">QString</db:type>
         <db:varname>statusTip</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#styleSheet-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qstring.html">QString</db:type>
         <db:varname>styleSheet</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#toolTip-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qstring.html">QString</db:type>
         <db:varname>toolTip</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#toolTipDuration-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>toolTipDuration</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#updatesEnabled-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>updatesEnabled</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#visible-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>visible</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#whatsThis-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qstring.html">QString</db:type>
         <db:varname>whatsThis</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#width-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>width</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#windowFilePath-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qstring.html">QString</db:type>
         <db:varname>windowFilePath</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#windowFlags-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qt.html#WindowType-enum">Qt::WindowFlags</db:type>
         <db:varname>windowFlags</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#windowIcon-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtgui/qicon.html">QIcon</db:type>
         <db:varname>windowIcon</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#windowIconText-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qstring.html">QString</db:type>
         <db:varname>windowIconText</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#windowModality-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qt.html#WindowModality-enum">Qt::WindowModality</db:type>
         <db:varname>windowModality</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#windowModified-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>bool</db:type>
         <db:varname>windowModified</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#windowOpacity-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>double</db:type>
         <db:varname>windowOpacity</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#windowTitle-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qtcore/qstring.html">QString</db:type>
         <db:varname>windowTitle</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#x-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>x</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis xlink:href="#y-prop">
         <db:modifier>(Qt property)</db:modifier>
         <db:type>int</db:type>
         <db:varname>y</db:varname>
      </db:fieldsynopsis>
      <db:constructorsynopsis xlink:href="#QWidget">
         <db:methodname>QWidget</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  parent  = 0,  Qt::WindowFlags  f  = 0)</db:exceptionname>
      </db:constructorsynopsis>
      <db:destructorsynopsis xlink:href="#dtor.QWidget">
         <db:methodname>~QWidget</db:methodname>
         <db:void/>
      </db:destructorsynopsis>
      <db:methodsynopsis xlink:href="#actionEvent">
         <db:void/>
         <db:methodname>actionEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QActionEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#actions">
         <db:type>QList&lt;QAction&gt;</db:type>
         <db:methodname>actions</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#activateWindow">
         <db:void/>
         <db:methodname>activateWindow</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#addAction">
         <db:void/>
         <db:methodname>addAction</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QAction  *  action )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#addActions">
         <db:void/>
         <db:methodname>addActions</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QList &lt; QAction  *&gt;  actions )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#adjustSize">
         <db:void/>
         <db:methodname>adjustSize</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#backgroundRole">
         <db:type xlink:href="qtgui/qpalette.html#ColorRole-enum">QPalette::ColorRole</db:type>
         <db:methodname>backgroundRole</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#backingStore">
         <db:type xlink:href="qtgui/qbackingstore.html">QBackingStore</db:type>
         <db:methodname>backingStore</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#changeEvent">
         <db:void/>
         <db:methodname>changeEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#childAt">
         <db:type xlink:href="qwidget.html#QWidget">QWidget</db:type>
         <db:methodname>childAt</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  x ,  int  y ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#childAt-2">
         <db:type xlink:href="qwidget.html#QWidget">QWidget</db:type>
         <db:methodname>childAt</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QPoint  &amp;  p ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#clearFocus">
         <db:void/>
         <db:methodname>clearFocus</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#clearMask">
         <db:void/>
         <db:methodname>clearMask</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#close">
         <db:type>bool</db:type>
         <db:methodname>close</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#closeEvent">
         <db:void/>
         <db:methodname>closeEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QCloseEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#contentsMargins">
         <db:type xlink:href="qtcore/qmargins.html">QMargins</db:type>
         <db:methodname>contentsMargins</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#contentsRect">
         <db:type xlink:href="qtcore/qrect.html">QRect</db:type>
         <db:methodname>contentsRect</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#contextMenuEvent">
         <db:void/>
         <db:methodname>contextMenuEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QContextMenuEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#create">
         <db:void/>
         <db:methodname>create</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( WId  window  = 0,  bool  initializeWindow  = true,  bool  destroyOldWindow  = true)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#createWindowContainer">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qwidget.html#QWidget">QWidget</db:type>
         <db:methodname>createWindowContainer</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWindow  *  window ,  QWidget  *  parent  = 0,  Qt::WindowFlags  flags  = 0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#customContextMenuRequested">
         <db:void/>
         <db:methodname>customContextMenuRequested</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QPoint  &amp;  pos )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#destroy">
         <db:void/>
         <db:methodname>destroy</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( bool  destroyWindow  = true,  bool  destroySubWindows  = true)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#dragEnterEvent">
         <db:void/>
         <db:methodname>dragEnterEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QDragEnterEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#dragLeaveEvent">
         <db:void/>
         <db:methodname>dragLeaveEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QDragLeaveEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#dragMoveEvent">
         <db:void/>
         <db:methodname>dragMoveEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QDragMoveEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#dropEvent">
         <db:void/>
         <db:methodname>dropEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QDropEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#effectiveWinId">
         <db:type>WId</db:type>
         <db:methodname>effectiveWinId</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#ensurePolished">
         <db:void/>
         <db:methodname>ensurePolished</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#enterEvent">
         <db:void/>
         <db:methodname>enterEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#event">
         <db:type>bool</db:type>
         <db:methodname>event</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#find">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qwidget.html#QWidget">QWidget</db:type>
         <db:methodname>find</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( WId  id )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#focusInEvent">
         <db:void/>
         <db:methodname>focusInEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QFocusEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#focusNextChild">
         <db:type>bool</db:type>
         <db:methodname>focusNextChild</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#focusNextPrevChild">
         <db:type>bool</db:type>
         <db:methodname>focusNextPrevChild</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( bool  next )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#focusOutEvent">
         <db:void/>
         <db:methodname>focusOutEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QFocusEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#focusPreviousChild">
         <db:type>bool</db:type>
         <db:methodname>focusPreviousChild</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#focusProxy">
         <db:type xlink:href="qwidget.html#QWidget">QWidget</db:type>
         <db:methodname>focusProxy</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#focusWidget">
         <db:type xlink:href="qwidget.html#QWidget">QWidget</db:type>
         <db:methodname>focusWidget</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#fontInfo">
         <db:type xlink:href="qtgui/qfontinfo.html">QFontInfo</db:type>
         <db:methodname>fontInfo</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#fontMetrics">
         <db:type xlink:href="qtgui/qfontmetrics.html">QFontMetrics</db:type>
         <db:methodname>fontMetrics</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#foregroundRole">
         <db:type xlink:href="qtgui/qpalette.html#ColorRole-enum">QPalette::ColorRole</db:type>
         <db:methodname>foregroundRole</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#getContentsMargins">
         <db:void/>
         <db:methodname>getContentsMargins</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  *  left ,  int  *  top ,  int  *  right ,  int  *  bottom ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#grab">
         <db:type xlink:href="qtgui/qpixmap.html">QPixmap</db:type>
         <db:methodname>grab</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QRect  &amp;  rectangle  = QRect( QPoint( 0, 0 ), QSize( -1, -1 ) ))</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#grabGesture">
         <db:void/>
         <db:methodname>grabGesture</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( Qt::GestureType  gesture ,  Qt::GestureFlags  flags  = Qt::GestureFlags())</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#grabKeyboard">
         <db:void/>
         <db:methodname>grabKeyboard</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#grabMouse">
         <db:void/>
         <db:methodname>grabMouse</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#grabMouse-2">
         <db:void/>
         <db:methodname>grabMouse</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QCursor  &amp;  cursor )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#grabShortcut">
         <db:type>int</db:type>
         <db:methodname>grabShortcut</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QKeySequence  &amp;  key ,  Qt::ShortcutContext  context  = Qt::WindowShortcut)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#graphicsEffect">
         <db:type xlink:href="qgraphicseffect.html">QGraphicsEffect</db:type>
         <db:methodname>graphicsEffect</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#graphicsProxyWidget">
         <db:type xlink:href="qgraphicsproxywidget.html">QGraphicsProxyWidget</db:type>
         <db:methodname>graphicsProxyWidget</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#hasEditFocus">
         <db:type>bool</db:type>
         <db:methodname>hasEditFocus</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#hasHeightForWidth">
         <db:type>bool</db:type>
         <db:methodname>hasHeightForWidth</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#heightForWidth">
         <db:type>int</db:type>
         <db:methodname>heightForWidth</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  w ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#hide">
         <db:void/>
         <db:methodname>hide</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#hideEvent">
         <db:void/>
         <db:methodname>hideEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QHideEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#initPainter">
         <db:void/>
         <db:methodname>initPainter</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QPainter  *  painter ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#inputMethodEvent">
         <db:void/>
         <db:methodname>inputMethodEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QInputMethodEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#inputMethodQuery">
         <db:type xlink:href="qtcore/qvariant.html">QVariant</db:type>
         <db:methodname>inputMethodQuery</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( Qt::InputMethodQuery  query ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#insertAction">
         <db:void/>
         <db:methodname>insertAction</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QAction  *  before ,  QAction  *  action )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#insertActions">
         <db:void/>
         <db:methodname>insertActions</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QAction  *  before ,  QList &lt; QAction  *&gt;  actions )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#isAncestorOf">
         <db:type>bool</db:type>
         <db:methodname>isAncestorOf</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QWidget  *  child ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#isEnabledTo">
         <db:type>bool</db:type>
         <db:methodname>isEnabledTo</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QWidget  *  ancestor ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#isHidden">
         <db:type>bool</db:type>
         <db:methodname>isHidden</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#isVisibleTo">
         <db:type>bool</db:type>
         <db:methodname>isVisibleTo</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QWidget  *  ancestor ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#isWindow">
         <db:type>bool</db:type>
         <db:methodname>isWindow</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#keyPressEvent">
         <db:void/>
         <db:methodname>keyPressEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QKeyEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#keyReleaseEvent">
         <db:void/>
         <db:methodname>keyReleaseEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QKeyEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#keyboardGrabber">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qwidget.html#QWidget">QWidget</db:type>
         <db:methodname>keyboardGrabber</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#layout">
         <db:type xlink:href="qlayout.html">QLayout</db:type>
         <db:methodname>layout</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#leaveEvent">
         <db:void/>
         <db:methodname>leaveEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#lower">
         <db:void/>
         <db:methodname>lower</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#macCGHandle">
         <db:type xlink:href="qtcore/qt.html#HANDLE-typedef">Qt::HANDLE</db:type>
         <db:methodname>macCGHandle</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#macQDHandle">
         <db:type xlink:href="qtcore/qt.html#HANDLE-typedef">Qt::HANDLE</db:type>
         <db:methodname>macQDHandle</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#mapFrom">
         <db:type xlink:href="qtcore/qpoint.html">QPoint</db:type>
         <db:methodname>mapFrom</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QWidget  *  parent , const  QPoint  &amp;  pos ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#mapFromGlobal">
         <db:type xlink:href="qtcore/qpoint.html">QPoint</db:type>
         <db:methodname>mapFromGlobal</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QPoint  &amp;  pos ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#mapFromParent">
         <db:type xlink:href="qtcore/qpoint.html">QPoint</db:type>
         <db:methodname>mapFromParent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QPoint  &amp;  pos ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#mapTo">
         <db:type xlink:href="qtcore/qpoint.html">QPoint</db:type>
         <db:methodname>mapTo</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QWidget  *  parent , const  QPoint  &amp;  pos ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#mapToGlobal">
         <db:type xlink:href="qtcore/qpoint.html">QPoint</db:type>
         <db:methodname>mapToGlobal</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QPoint  &amp;  pos ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#mapToParent">
         <db:type xlink:href="qtcore/qpoint.html">QPoint</db:type>
         <db:methodname>mapToParent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QPoint  &amp;  pos ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#mask">
         <db:type xlink:href="qtgui/qregion.html">QRegion</db:type>
         <db:methodname>mask</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#metric">
         <db:type>int</db:type>
         <db:methodname>metric</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( PaintDeviceMetric  m ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#mouseDoubleClickEvent">
         <db:void/>
         <db:methodname>mouseDoubleClickEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QMouseEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#mouseGrabber">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qwidget.html#QWidget">QWidget</db:type>
         <db:methodname>mouseGrabber</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#mouseMoveEvent">
         <db:void/>
         <db:methodname>mouseMoveEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QMouseEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#mousePressEvent">
         <db:void/>
         <db:methodname>mousePressEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QMouseEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#mouseReleaseEvent">
         <db:void/>
         <db:methodname>mouseReleaseEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QMouseEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#moveEvent">
         <db:void/>
         <db:methodname>moveEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QMoveEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#nativeEvent">
         <db:type>bool</db:type>
         <db:methodname>nativeEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QByteArray  &amp;  eventType ,  void  *  message ,  long  *  result )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#nativeParentWidget">
         <db:type xlink:href="qwidget.html#QWidget">QWidget</db:type>
         <db:methodname>nativeParentWidget</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#nextInFocusChain">
         <db:type xlink:href="qwidget.html#QWidget">QWidget</db:type>
         <db:methodname>nextInFocusChain</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#overrideWindowFlags">
         <db:void/>
         <db:methodname>overrideWindowFlags</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( Qt::WindowFlags  flags )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#paintEngine">
         <db:type xlink:href="qtgui/qpaintengine.html">QPaintEngine</db:type>
         <db:methodname>paintEngine</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#paintEvent">
         <db:void/>
         <db:methodname>paintEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QPaintEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#parentWidget">
         <db:type xlink:href="qwidget.html#QWidget">QWidget</db:type>
         <db:methodname>parentWidget</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#previousInFocusChain">
         <db:type xlink:href="qwidget.html#QWidget">QWidget</db:type>
         <db:methodname>previousInFocusChain</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#raise">
         <db:void/>
         <db:methodname>raise</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#redirected">
         <db:type xlink:href="qtgui/qpaintdevice.html#QPaintDevice">QPaintDevice</db:type>
         <db:methodname>redirected</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QPoint  *  offset ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#releaseKeyboard">
         <db:void/>
         <db:methodname>releaseKeyboard</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#releaseMouse">
         <db:void/>
         <db:methodname>releaseMouse</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#releaseShortcut">
         <db:void/>
         <db:methodname>releaseShortcut</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  id )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#removeAction">
         <db:void/>
         <db:methodname>removeAction</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QAction  *  action )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#render">
         <db:void/>
         <db:methodname>render</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QPaintDevice  *  target , const  QPoint  &amp;  targetOffset  = QPoint(), const  QRegion  &amp;  sourceRegion  = QRegion(),  RenderFlags  renderFlags  = RenderFlags( DrawWindowBackground | DrawChildren ))</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#render-2">
         <db:void/>
         <db:methodname>render</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QPainter  *  painter , const  QPoint  &amp;  targetOffset  = QPoint(), const  QRegion  &amp;  sourceRegion  = QRegion(),  RenderFlags  renderFlags  = RenderFlags( DrawWindowBackground | DrawChildren ))</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#repaint">
         <db:void/>
         <db:methodname>repaint</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#repaint-2">
         <db:void/>
         <db:methodname>repaint</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  x ,  int  y ,  int  w ,  int  h )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#repaint-3">
         <db:void/>
         <db:methodname>repaint</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QRect  &amp;  rect )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#repaint-4">
         <db:void/>
         <db:methodname>repaint</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QRegion  &amp;  rgn )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#resizeEvent">
         <db:void/>
         <db:methodname>resizeEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QResizeEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#restoreGeometry">
         <db:type>bool</db:type>
         <db:methodname>restoreGeometry</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QByteArray  &amp;  geometry )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#saveGeometry">
         <db:type xlink:href="qtcore/qbytearray.html">QByteArray</db:type>
         <db:methodname>saveGeometry</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#scroll">
         <db:void/>
         <db:methodname>scroll</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  dx ,  int  dy )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#scroll-2">
         <db:void/>
         <db:methodname>scroll</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  dx ,  int  dy , const  QRect  &amp;  r )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setAttribute">
         <db:void/>
         <db:methodname>setAttribute</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( Qt::WidgetAttribute  attribute ,  bool  on  = true)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setBackgroundRole">
         <db:void/>
         <db:methodname>setBackgroundRole</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QPalette::ColorRole  role )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setContentsMargins">
         <db:void/>
         <db:methodname>setContentsMargins</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  left ,  int  top ,  int  right ,  int  bottom )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setContentsMargins-2">
         <db:void/>
         <db:methodname>setContentsMargins</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QMargins  &amp;  margins )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setDisabled">
         <db:void/>
         <db:methodname>setDisabled</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( bool  disable )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setEditFocus">
         <db:void/>
         <db:methodname>setEditFocus</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( bool  enable )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setFixedHeight">
         <db:void/>
         <db:methodname>setFixedHeight</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  h )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setFixedSize">
         <db:void/>
         <db:methodname>setFixedSize</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QSize  &amp;  s )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setFixedSize-2">
         <db:void/>
         <db:methodname>setFixedSize</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  w ,  int  h )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setFixedWidth">
         <db:void/>
         <db:methodname>setFixedWidth</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  w )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setFocus">
         <db:void/>
         <db:methodname>setFocus</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( Qt::FocusReason  reason )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setFocus-2">
         <db:void/>
         <db:methodname>setFocus</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setFocusProxy">
         <db:void/>
         <db:methodname>setFocusProxy</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  w )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setForegroundRole">
         <db:void/>
         <db:methodname>setForegroundRole</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QPalette::ColorRole  role )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setGraphicsEffect">
         <db:void/>
         <db:methodname>setGraphicsEffect</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QGraphicsEffect  *  effect )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setHidden">
         <db:void/>
         <db:methodname>setHidden</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( bool  hidden )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setLayout">
         <db:void/>
         <db:methodname>setLayout</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QLayout  *  layout )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setMask">
         <db:void/>
         <db:methodname>setMask</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QBitmap  &amp;  bitmap )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setMask-2">
         <db:void/>
         <db:methodname>setMask</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QRegion  &amp;  region )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setParent">
         <db:void/>
         <db:methodname>setParent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  parent )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setParent-2">
         <db:void/>
         <db:methodname>setParent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  parent ,  Qt::WindowFlags  f )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setShortcutAutoRepeat">
         <db:void/>
         <db:methodname>setShortcutAutoRepeat</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  id ,  bool  enable  = true)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setShortcutEnabled">
         <db:void/>
         <db:methodname>setShortcutEnabled</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  id ,  bool  enable  = true)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setStyle">
         <db:void/>
         <db:methodname>setStyle</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QStyle  *  style )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setTabOrder">
         <db:modifier>static</db:modifier>
         <db:void/>
         <db:methodname>setTabOrder</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  first ,  QWidget  *  second )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setWindowRole">
         <db:void/>
         <db:methodname>setWindowRole</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QString  &amp;  role )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setWindowState">
         <db:void/>
         <db:methodname>setWindowState</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( Qt::WindowStates  windowState )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setupUi">
         <db:void/>
         <db:methodname>setupUi</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  widget )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#sharedPainter">
         <db:type xlink:href="qtgui/qpainter.html">QPainter</db:type>
         <db:methodname>sharedPainter</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#show">
         <db:void/>
         <db:methodname>show</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#showEvent">
         <db:void/>
         <db:methodname>showEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QShowEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#showFullScreen">
         <db:void/>
         <db:methodname>showFullScreen</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#showMaximized">
         <db:void/>
         <db:methodname>showMaximized</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#showMinimized">
         <db:void/>
         <db:methodname>showMinimized</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#showNormal">
         <db:void/>
         <db:methodname>showNormal</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#stackUnder">
         <db:void/>
         <db:methodname>stackUnder</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWidget  *  w )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#style">
         <db:type xlink:href="qstyle.html">QStyle</db:type>
         <db:methodname>style</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#tabletEvent">
         <db:void/>
         <db:methodname>tabletEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QTabletEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#testAttribute">
         <db:type>bool</db:type>
         <db:methodname>testAttribute</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( Qt::WidgetAttribute  attribute ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#underMouse">
         <db:type>bool</db:type>
         <db:methodname>underMouse</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#ungrabGesture">
         <db:void/>
         <db:methodname>ungrabGesture</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( Qt::GestureType  gesture )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#update">
         <db:void/>
         <db:methodname>update</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#update-2">
         <db:void/>
         <db:methodname>update</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  x ,  int  y ,  int  w ,  int  h )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#update-3">
         <db:void/>
         <db:methodname>update</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QRect  &amp;  rect )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#update-4">
         <db:void/>
         <db:methodname>update</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QRegion  &amp;  rgn )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#updateGeometry">
         <db:void/>
         <db:methodname>updateGeometry</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#updateMicroFocus">
         <db:void/>
         <db:methodname>updateMicroFocus</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#visibleRegion">
         <db:type xlink:href="qtgui/qregion.html">QRegion</db:type>
         <db:methodname>visibleRegion</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#wheelEvent">
         <db:void/>
         <db:methodname>wheelEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QWheelEvent  *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#winId">
         <db:type>WId</db:type>
         <db:methodname>winId</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#window">
         <db:type xlink:href="qwidget.html#QWidget">QWidget</db:type>
         <db:methodname>window</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#windowHandle">
         <db:type xlink:href="qtgui/qwindow.html">QWindow</db:type>
         <db:methodname>windowHandle</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#windowRole">
         <db:type xlink:href="qtcore/qstring.html">QString</db:type>
         <db:methodname>windowRole</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#windowState">
         <db:type xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowStates</db:type>
         <db:methodname>windowState</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#windowType">
         <db:type xlink:href="qtcore/qt.html#WindowType-enum">Qt::WindowType</db:type>
         <db:methodname>windowType</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#x11Info">
         <db:type>QX11Info</db:type>
         <db:methodname>x11Info</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#x11PictureHandle">
         <db:type xlink:href="qtcore/qt.html#HANDLE-typedef">Qt::HANDLE</db:type>
         <db:methodname>x11PictureHandle</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#isEnabledToTLW">
         <db:modifier>(obsolete)</db:modifier>
         <db:type>bool</db:type>
         <db:methodname>isEnabledToTLW</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#isTopLevel">
         <db:modifier>(obsolete)</db:modifier>
         <db:type>bool</db:type>
         <db:methodname>isTopLevel</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#topLevelWidget">
         <db:modifier>(obsolete)</db:modifier>
         <db:type xlink:href="qwidget.html#QWidget">QWidget</db:type>
         <db:methodname>topLevelWidget</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#isEnabledToTLW">
         <db:modifier>(compat)</db:modifier>
         <db:type>bool</db:type>
         <db:methodname>isEnabledToTLW</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#isTopLevel">
         <db:modifier>(compat)</db:modifier>
         <db:type>bool</db:type>
         <db:methodname>isTopLevel</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#topLevelWidget">
         <db:modifier>(compat)</db:modifier>
         <db:type xlink:href="qwidget.html#QWidget">QWidget</db:type>
         <db:methodname>topLevelWidget</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:enumsynopsis xlink:href="#RenderFlag-enum">
         <db:enumname>RenderFlag</db:enumname>
         <db:enumitem>
            <db:enumidentifier>QWidget::DrawWindowBackground</db:enumidentifier>
            <db:enumvalue>0x1</db:enumvalue>
         </db:enumitem>
         <db:enumitem>
            <db:enumidentifier>QWidget::DrawChildren</db:enumidentifier>
            <db:enumvalue>0x2</db:enumvalue>
         </db:enumitem>
         <db:enumitem>
            <db:enumidentifier>QWidget::IgnoreMask</db:enumidentifier>
            <db:enumvalue>0x4</db:enumvalue>
         </db:enumitem>
      </db:enumsynopsis>
   </db:classsynopsis>
   <db:macrosynopsis xlink:href="#QWIDGETSIZE_MAX">
      <db:macroprototype>
         <db:macrodef>
            <db:macro>QWIDGETSIZE_MAX</db:macro>
         </db:macrodef>
         <db:void/>
      </db:macroprototype>
   </db:macrosynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> class is the base class of all user interface objects.</db:para>
      <db:para>The widget is the atom of the user interface: it receives mouse, keyboard and other events from the window system, and paints a representation of itself on the screen. Every widget is rectangular, and they are sorted in a Z-order. A widget is clipped by its parent and by the widgets in front of it.</db:para>
      <db:para>A widget that is not embedded in a parent widget is called a window. Usually, windows have a frame and a title bar, although it is also possible to create windows without such decoration using suitable <db:link xlink:href="qtcore/qt.html#WindowType-enum">window flags</db:link>). In Qt, <db:code><db:link xlink:href="qmainwindow.html">QMainWindow</db:link></db:code> and the various subclasses of <db:code><db:link xlink:href="qdialog.html">QDialog</db:link></db:code> are the most common window types.</db:para>
      <db:para>Every widget's constructor accepts one or two standard arguments:</db:para>
      <db:orderedlist numeration="arabic">
         <db:listitem>
            <db:para>
               <db:code>QWidget *parent = 0</db:code> is the parent of the new widget. If it is 0 (the default), the new widget will be a window. If not, it will be a child of <db:emphasis>parent</db:emphasis>, and be constrained by <db:emphasis>parent</db:emphasis>'s geometry (unless you specify <db:code><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::Window</db:link></db:code> as window flag).</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>
               <db:code>Qt::WindowFlags f = 0</db:code> (where available) sets the window flags; the default is suitable for almost all widgets, but to get, for example, a window without a window system frame, you must use special flags.</db:para>
         </db:listitem>
      </db:orderedlist>
      <db:para>
         <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> has many member functions, but some of them have little direct functionality; for example, <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> has a font property, but never uses this itself. There are many subclasses which provide real functionality, such as <db:code><db:link xlink:href="qlabel.html">QLabel</db:link></db:code>, <db:code><db:link xlink:href="qpushbutton.html">QPushButton</db:link></db:code>, <db:code><db:link xlink:href="qlistwidget.html">QListWidget</db:link></db:code>, and <db:code><db:link xlink:href="qtabwidget.html">QTabWidget</db:link></db:code>.</db:para>
      <db:section xml:id="top-level-and-child-widgets">
         <db:title>Top-Level and Child Widgets</db:title>
         <db:para>A widget without a parent widget is always an independent window (top-level widget). For these widgets, <db:code><db:link xlink:href="qwidget.html#windowTitle-prop">setWindowTitle</db:link>()</db:code> and <db:code><db:link xlink:href="qwidget.html#windowIcon-prop">setWindowIcon</db:link>()</db:code> set the title bar and icon respectively.</db:para>
         <db:para>Non-window widgets are child widgets, displayed within their parent widgets. Most widgets in Qt are mainly useful as child widgets. For example, it is possible to display a button as a top-level window, but most people prefer to put their buttons inside other widgets, such as <db:code><db:link xlink:href="qdialog.html">QDialog</db:link></db:code>.</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:alt>A parent widget containing various child widgets.</db:alt>
               <db:imageobject>
                  <db:imagedata fileref="images/parent-child-widgets.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>The diagram above shows a <db:code><db:link xlink:href="qgroupbox.html">QGroupBox</db:link></db:code> widget being used to hold various child widgets in a layout provided by <db:code><db:link xlink:href="qgridlayout.html">QGridLayout</db:link></db:code>. The <db:code><db:link xlink:href="qlabel.html">QLabel</db:link></db:code> child widgets have been outlined to indicate their full sizes.</db:para>
         <db:para>If you want to use a <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> to hold child widgets you will usually want to add a layout to the parent <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code>. See <db:link xlink:href="layout.html">Layout Management</db:link> for more information.</db:para>
      </db:section>
      <db:section xml:id="composite-widgets">
         <db:title>Composite Widgets</db:title>
         <db:para>When a widget is used as a container to group a number of child widgets, it is known as a composite widget. These can be created by constructing a widget with the required visual properties - a <db:code><db:link xlink:href="qframe.html">QFrame</db:link></db:code>, for example - and adding child widgets to it, usually managed by a layout. The above diagram shows such a composite widget that was created using Qt Designer.</db:para>
         <db:para>Composite widgets can also be created by subclassing a standard widget, such as <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> or <db:code><db:link xlink:href="qframe.html">QFrame</db:link></db:code>, and adding the necessary layout and child widgets in the constructor of the subclass. Many of the <db:link xlink:href="qtdoc/install-wince.html#qt-examples">examples provided with Qt</db:link> use this approach, and it is also covered in the Qt <db:link xlink:href="qtwidgets-index.html#tutorials">Tutorials</db:link>.</db:para>
      </db:section>
      <db:section xml:id="custom-widgets-and-painting">
         <db:title>Custom Widgets and Painting</db:title>
         <db:para>Since <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> is a subclass of <db:code><db:link xlink:href="qtgui/qpaintdevice.html">QPaintDevice</db:link></db:code>, subclasses can be used to display custom content that is composed using a series of painting operations with an instance of the <db:code><db:link xlink:href="qtgui/qpainter.html">QPainter</db:link></db:code> class. This approach contrasts with the canvas-style approach used by the <db:link xlink:href="graphicsview.html#graphics-view">Graphics View Framework</db:link> where items are added to a scene by the application and are rendered by the framework itself.</db:para>
         <db:para>Each widget performs all painting operations from within its <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code> function. This is called whenever the widget needs to be redrawn, either as a result of some external change or when requested by the application.</db:para>
         <db:para>The <db:link xlink:href="qtwidgets-widgets-analogclock-example.html">Analog Clock example</db:link> shows how a simple widget can handle paint events.</db:para>
      </db:section>
      <db:section xml:id="size-hints-and-size-policies">
         <db:title>Size Hints and Size Policies</db:title>
         <db:para>When implementing a new widget, it is almost always useful to reimplement <db:code><db:link xlink:href="qwidget.html#sizeHint-prop">sizeHint</db:link>()</db:code> to provide a reasonable default size for the widget and to set the correct size policy with <db:code><db:link xlink:href="qwidget.html#sizePolicy-prop">setSizePolicy</db:link>()</db:code>.</db:para>
         <db:para>By default, composite widgets which do not provide a size hint will be sized according to the space requirements of their child widgets.</db:para>
         <db:para>The size policy lets you supply good default behavior for the layout management system, so that other widgets can contain and manage yours easily. The default size policy indicates that the size hint represents the preferred size of the widget, and this is often good enough for many widgets.</db:para>
         <db:note>
            <db:para>The size of top-level widgets are constrained to 2/3 of the desktop's height and width. You can <db:code><db:link xlink:href="qwidget.html#size-prop">resize</db:link>()</db:code> the widget manually if these bounds are inadequate.</db:para>
         </db:note>
      </db:section>
      <db:section xml:id="events">
         <db:title>Events</db:title>
         <db:para>Widgets respond to events that are typically caused by user actions. Qt delivers events to widgets by calling specific event handler functions with instances of <db:code><db:link xlink:href="qtcore/qevent.html">QEvent</db:link></db:code> subclasses containing information about each event.</db:para>
         <db:para>If your widget only contains child widgets, you probably do not need to implement any event handlers. If you want to detect a mouse click in a child widget call the child's <db:code><db:link xlink:href="qwidget.html#underMouse">underMouse</db:link>()</db:code> function inside the widget's <db:code><db:link xlink:href="qwidget.html#mousePressEvent">mousePressEvent</db:link>()</db:code>.</db:para>
         <db:para>The <db:link xlink:href="qtwidgets-widgets-scribble-example.html">Scribble example</db:link> implements a wider set of events to handle mouse movement, button presses, and window resizing.</db:para>
         <db:para>You will need to supply the behavior and content for your own widgets, but here is a brief overview of the events that are relevant to <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code>, starting with the most common ones:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code> is called whenever the widget needs to be repainted. Every widget displaying custom content must implement it. Painting using a <db:code><db:link xlink:href="qtgui/qpainter.html">QPainter</db:link></db:code> can only take place in a <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code> or a function called by a <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code>.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#resizeEvent">resizeEvent</db:link>()</db:code> is called when the widget has been resized.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#mousePressEvent">mousePressEvent</db:link>()</db:code> is called when a mouse button is pressed while the mouse cursor is inside the widget, or when the widget has grabbed the mouse using <db:code><db:link xlink:href="qwidget.html#grabMouse">grabMouse</db:link>()</db:code>. Pressing the mouse without releasing it is effectively the same as calling <db:code><db:link xlink:href="qwidget.html#grabMouse">grabMouse</db:link>()</db:code>.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#mouseReleaseEvent">mouseReleaseEvent</db:link>()</db:code> is called when a mouse button is released. A widget receives mouse release events when it has received the corresponding mouse press event. This means that if the user presses the mouse inside <db:emphasis>your</db:emphasis> widget, then drags the mouse somewhere else before releasing the mouse button, <db:emphasis>your</db:emphasis> widget receives the release event. There is one exception: if a popup menu appears while the mouse button is held down, this popup immediately steals the mouse events.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#mouseDoubleClickEvent">mouseDoubleClickEvent</db:link>()</db:code> is called when the user double-clicks in the widget. If the user double-clicks, the widget receives a mouse press event, a mouse release event, (a mouse click event,) a second mouse press, this event and finally a second mouse release event. (Some mouse move events may also be received if the mouse is not held steady during this operation.) It is <db:emphasis>not possible</db:emphasis> to distinguish a click from a double-click until the second click arrives. (This is one reason why most GUI books recommend that double-clicks be an extension of single-clicks, rather than trigger a different action.)</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:para>Widgets that accept keyboard input need to reimplement a few more event handlers:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#keyPressEvent">keyPressEvent</db:link>()</db:code> is called whenever a key is pressed, and again when a key has been held down long enough for it to auto-repeat. The <db:emphasis role="bold">Tab</db:emphasis> and <db:emphasis role="bold">Shift+Tab</db:emphasis> keys are only passed to the widget if they are not used by the focus-change mechanisms. To force those keys to be processed by your widget, you must reimplement <db:code><db:link xlink:href="qwidget.html#event">QWidget::event</db:link>()</db:code>.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#focusInEvent">focusInEvent</db:link>()</db:code> is called when the widget gains keyboard focus (assuming you have called <db:code><db:link xlink:href="qwidget.html#focusPolicy-prop">setFocusPolicy</db:link>()</db:code>). Well-behaved widgets indicate that they own the keyboard focus in a clear but discreet way.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#focusOutEvent">focusOutEvent</db:link>()</db:code> is called when the widget loses keyboard focus.</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:para>You may be required to also reimplement some of the less common event handlers:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#mouseMoveEvent">mouseMoveEvent</db:link>()</db:code> is called whenever the mouse moves while a mouse button is held down. This can be useful during drag and drop operations. If you call <db:link xlink:href="qwidget.html#mouseTracking-prop">setMouseTracking</db:link>, you get mouse move events even when no buttons are held down. (See also the <db:link xlink:href="graphicsview.html#drag-and-drop">Drag and Drop</db:link> guide.)</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#keyReleaseEvent">keyReleaseEvent</db:link>()</db:code> is called whenever a key is released and while it is held down (if the key is auto-repeating). In that case, the widget will receive a pair of key release and key press event for every repeat. The <db:emphasis role="bold">Tab</db:emphasis> and <db:emphasis role="bold">Shift+Tab</db:emphasis> keys are only passed to the widget if they are not used by the focus-change mechanisms. To force those keys to be processed by your widget, you must reimplement <db:code><db:link xlink:href="qwidget.html#event">QWidget::event</db:link>()</db:code>.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#wheelEvent">wheelEvent</db:link>()</db:code> is called whenever the user turns the mouse wheel while the widget has the focus.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#enterEvent">enterEvent</db:link>()</db:code> is called when the mouse enters the widget's screen space. (This excludes screen space owned by any of the widget's children.)</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#leaveEvent">leaveEvent</db:link>()</db:code> is called when the mouse leaves the widget's screen space. If the mouse enters a child widget it will not cause a <db:code><db:link xlink:href="qwidget.html#leaveEvent">leaveEvent</db:link>()</db:code>.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#moveEvent">moveEvent</db:link>()</db:code> is called when the widget has been moved relative to its parent.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#closeEvent">closeEvent</db:link>()</db:code> is called when the user closes the widget (or when <db:code><db:link xlink:href="qwidget.html#close">close</db:link>()</db:code> is called).</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:para>There are also some rather obscure events described in the documentation for <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::Type</db:link></db:code>. To handle these events, you need to reimplement <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code> directly.</db:para>
         <db:para>The default implementation of <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code> handles <db:emphasis role="bold">Tab</db:emphasis> and <db:emphasis role="bold">Shift+Tab</db:emphasis> (to move the keyboard focus), and passes on most of the other events to one of the more specialized handlers above.</db:para>
         <db:para>Events and the mechanism used to deliver them are covered in <db:link xlink:href="qtcore/eventsandfilters.html">The Event System</db:link>.</db:para>
      </db:section>
      <db:section xml:id="groups-of-functions-and-properties">
         <db:title>Groups of Functions and Properties</db:title>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Context</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Functions and Properties</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>Window functions</db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#hide">hide</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#raise">raise</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#lower">lower</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#close">close</db:link>()</db:code>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>Top-level windows</db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:link xlink:href="qwidget.html#windowModified-prop">windowModified</db:link>, <db:link xlink:href="qwidget.html#windowTitle-prop">windowTitle</db:link>, <db:link xlink:href="qwidget.html#windowIcon-prop">windowIcon</db:link>, <db:link xlink:href="qwidget.html#windowIconText-prop">windowIconText</db:link>, <db:link xlink:href="qwidget.html#isActiveWindow-prop">isActiveWindow</db:link>, <db:code><db:link xlink:href="qwidget.html#activateWindow">activateWindow</db:link>()</db:code>, <db:link xlink:href="qwidget.html#minimized-prop">minimized</db:link>, <db:code><db:link xlink:href="qwidget.html#showMinimized">showMinimized</db:link>()</db:code>, <db:link xlink:href="qwidget.html#maximized-prop">maximized</db:link>, <db:code><db:link xlink:href="qwidget.html#showMaximized">showMaximized</db:link>()</db:code>, <db:link xlink:href="qwidget.html#fullScreen-prop">fullScreen</db:link>, <db:code><db:link xlink:href="qwidget.html#showFullScreen">showFullScreen</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#showNormal">showNormal</db:link>()</db:code>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>Window contents</db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code><db:link xlink:href="qwidget.html#update">update</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#repaint">repaint</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#scroll">scroll</db:link>()</db:code>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>Geometry</db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:link xlink:href="qwidget.html#pos-prop">pos</db:link>, <db:code><db:link xlink:href="qwidget.html#x-prop">x</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#y-prop">y</db:link>()</db:code>, <db:link xlink:href="qwidget.html#rect-prop">rect</db:link>, <db:link xlink:href="qwidget.html#size-prop">size</db:link>, <db:code><db:link xlink:href="qwidget.html#width-prop">width</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#height-prop">height</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#pos-prop">move</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#size-prop">resize</db:link>()</db:code>, <db:link xlink:href="qwidget.html#sizePolicy-prop">sizePolicy</db:link>, <db:code><db:link xlink:href="qwidget.html#sizeHint-prop">sizeHint</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#minimumSizeHint-prop">minimumSizeHint</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#updateGeometry">updateGeometry</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#layout">layout</db:link>()</db:code>, <db:link xlink:href="qwidget.html#frameGeometry-prop">frameGeometry</db:link>, <db:link xlink:href="qwidget.html#geometry-prop">geometry</db:link>,
                                                        <db:link xlink:href="qwidget.html#childrenRect-prop">childrenRect</db:link>, <db:link xlink:href="qwidget.html#childrenRegion-prop">childrenRegion</db:link>, <db:code><db:link xlink:href="qwidget.html#adjustSize">adjustSize</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#mapFromGlobal">mapFromGlobal</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#mapToGlobal">mapToGlobal</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#mapFromParent">mapFromParent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#mapToParent">mapToParent</db:link>()</db:code>, <db:link xlink:href="qwidget.html#maximumSize-prop">maximumSize</db:link>, <db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link>, <db:link xlink:href="qwidget.html#sizeIncrement-prop">sizeIncrement</db:link>, <db:link xlink:href="qwidget.html#baseSize-prop">baseSize</db:link>, <db:code><db:link xlink:href="qwidget.html#setFixedSize">setFixedSize</db:link>()</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>Mode</db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:link xlink:href="qwidget.html#visible-prop">visible</db:link>, <db:code><db:link xlink:href="qwidget.html#isVisibleTo">isVisibleTo</db:link>()</db:code>, <db:link xlink:href="qwidget.html#enabled-prop">enabled</db:link>, <db:code><db:link xlink:href="qwidget.html#isEnabledTo">isEnabledTo</db:link>()</db:code>, <db:link xlink:href="qwidget.html#modal-prop">modal</db:link>, <db:code><db:link xlink:href="qwidget.html#isWindow">isWindow</db:link>()</db:code>, <db:link xlink:href="qwidget.html#mouseTracking-prop">mouseTracking</db:link>, <db:link xlink:href="qwidget.html#updatesEnabled-prop">updatesEnabled</db:link>, <db:code><db:link xlink:href="qwidget.html#visibleRegion">visibleRegion</db:link>()</db:code>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>Look and feel</db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code><db:link xlink:href="qwidget.html#style">style</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#setStyle">setStyle</db:link>()</db:code>, <db:link xlink:href="stylesheet.html#stylesheet">styleSheet</db:link>, <db:link xlink:href="qwidget.html#cursor-prop">cursor</db:link>, <db:link xlink:href="stylesheet-reference.html#font">font</db:link>, <db:link xlink:href="qwidget.html#palette-prop">palette</db:link>, <db:code><db:link xlink:href="qwidget.html#backgroundRole">backgroundRole</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#setBackgroundRole">setBackgroundRole</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#fontInfo">fontInfo</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#fontMetrics">fontMetrics</db:link>()</db:code>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>Keyboard focus functions</db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:link xlink:href="qwidget.html#focus-prop">focus</db:link>, <db:link xlink:href="qwidget.html#focusPolicy-prop">focusPolicy</db:link>, <db:code><db:link xlink:href="qwidget.html#setFocus">setFocus</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#clearFocus">clearFocus</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#setTabOrder">setTabOrder</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#setFocusProxy">setFocusProxy</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#focusNextChild">focusNextChild</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#focusPreviousChild">focusPreviousChild</db:link>()</db:code>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>Mouse and keyboard grabbing</db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code><db:link xlink:href="qwidget.html#grabMouse">grabMouse</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#releaseMouse">releaseMouse</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#grabKeyboard">grabKeyboard</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#releaseKeyboard">releaseKeyboard</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#mouseGrabber">mouseGrabber</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#keyboardGrabber">keyboardGrabber</db:link>()</db:code>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>Event handlers</db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#mousePressEvent">mousePressEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#mouseReleaseEvent">mouseReleaseEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#mouseDoubleClickEvent">mouseDoubleClickEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#mouseMoveEvent">mouseMoveEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#keyPressEvent">keyPressEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#keyReleaseEvent">keyReleaseEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#focusInEvent">focusInEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#focusOutEvent">focusOutEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#wheelEvent">wheelEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#enterEvent">enterEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#leaveEvent">leaveEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#moveEvent">moveEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#resizeEvent">resizeEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#closeEvent">closeEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#dragEnterEvent">dragEnterEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#dragMoveEvent">dragMoveEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#dragLeaveEvent">dragLeaveEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#dropEvent">dropEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qtcore/qobject.html#childEvent">childEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#showEvent">showEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#hideEvent">hideEvent</db:link>()</db:code>, <db:code><db:link xlink:href="qtcore/qobject.html#customEvent">customEvent</db:link>()</db:code>. <db:code><db:link xlink:href="qwidget.html#changeEvent">changeEvent</db:link>()</db:code>,</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>System functions</db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code><db:link xlink:href="qwidget.html#parentWidget">parentWidget</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#window">window</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#setParent">setParent</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#winId">winId</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#find">find</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#metric">metric</db:link>()</db:code>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>Interactive help</db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code><db:link xlink:href="qwidget.html#toolTip-prop">setToolTip</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#whatsThis-prop">setWhatsThis</db:link>()</db:code>
                     </db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="widget-style-sheets">
         <db:title>Widget Style Sheets</db:title>
         <db:para>In addition to the standard widget styles for each platform, widgets can also be styled according to rules specified in a <db:link xlink:href="stylesheet.html#stylesheet">style sheet</db:link>. This feature enables you to customize the appearance of specific widgets to provide visual cues to users about their purpose. For example, a button could be styled in a particular way to indicate that it performs a destructive action.</db:para>
         <db:para>The use of widget style sheets is described in more detail in the <db:link xlink:href="stylesheet.html">Qt Style Sheets</db:link> document.</db:para>
      </db:section>
      <db:section xml:id="transparency-and-double-buffering">
         <db:title>Transparency and Double Buffering</db:title>
         <db:para>Since Qt 4.0, <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> automatically double-buffers its painting, so there is no need to write double-buffering code in <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code> to avoid flicker.</db:para>
         <db:para>Since Qt 4.1, the <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_ContentsPropagated</db:link></db:code> widget attribute has been deprecated. Instead, the contents of parent widgets are propagated by default to each of their children as long as <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_PaintOnScreen</db:link></db:code> is not set. Custom widgets can be written to take advantage of this feature by updating irregular regions (to create non-rectangular child widgets), or painting with colors that have less than full alpha component. The following diagram shows how attributes and properties of a custom widget can be fine-tuned to achieve different effects.</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:imageobject>
                  <db:imagedata fileref="images/propagation-custom.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>In the above diagram, a semi-transparent rectangular child widget with an area removed is constructed and added to a parent widget (a <db:code><db:link xlink:href="qlabel.html">QLabel</db:link></db:code> showing a pixmap). Then, different properties and widget attributes are set to achieve different effects:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>The left widget has no additional properties or widget attributes set. This default state suits most custom widgets using transparency, are irregularly-shaped, or do not paint over their entire area with an opaque brush.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>The center widget has the <db:link xlink:href="qwidget.html#autoFillBackground-prop">autoFillBackground</db:link> property set. This property is used with custom widgets that rely on the widget to supply a default background, and do not paint over their entire area with an opaque brush.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>The right widget has the <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_OpaquePaintEvent</db:link></db:code> widget attribute set. This indicates that the widget will paint over its entire area with opaque colors. The widget's area will initially be <db:emphasis>uninitialized</db:emphasis>, represented in the diagram with a red diagonal grid pattern that shines through the overpainted area. The Qt::WA_OpaquePaintArea attribute is useful for widgets that need to paint their own specialized contents quickly and do not need a default filled background.</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:para>To rapidly update custom widgets with simple background colors, such as real-time plotting or graphing widgets, it is better to define a suitable background color (using <db:code><db:link xlink:href="qwidget.html#setBackgroundRole">setBackgroundRole</db:link>()</db:code> with the <db:code><db:link xlink:href="qtgui/qpalette.html#ColorRole-enum">QPalette::Window</db:link></db:code> role), set the <db:link xlink:href="qwidget.html#autoFillBackground-prop">autoFillBackground</db:link> property, and only implement the necessary drawing functionality in the widget's <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code>.</db:para>
         <db:para>To rapidly update custom widgets that constantly paint over their entire areas with opaque content, e.g., video streaming widgets, it is better to set the widget's <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_OpaquePaintEvent</db:link></db:code>, avoiding any unnecessary overhead associated with repainting the widget's background.</db:para>
         <db:para>If a widget has both the <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_OpaquePaintEvent</db:link></db:code> widget attribute <db:emphasis>and</db:emphasis> the <db:link xlink:href="qwidget.html#autoFillBackground-prop">autoFillBackground</db:link> property set, the <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_OpaquePaintEvent</db:link></db:code> attribute takes precedence. Depending on your requirements, you should choose either one of them.</db:para>
         <db:para>Since Qt 4.1, the contents of parent widgets are also propagated to standard Qt widgets. This can lead to some unexpected results if the parent widget is decorated in a non-standard way, as shown in the diagram below.</db:para>
         <db:informalfigure>
            <db:mediaobject>
               <db:imageobject>
                  <db:imagedata fileref="images/propagation-standard.png"/>
               </db:imageobject>
            </db:mediaobject>
         </db:informalfigure>
         <db:para>The scope for customizing the painting behavior of standard Qt widgets, without resorting to subclassing, is slightly less than that possible for custom widgets. Usually, the desired appearance of a standard widget can be achieved by setting its <db:link xlink:href="qwidget.html#autoFillBackground-prop">autoFillBackground</db:link> property.</db:para>
      </db:section>
      <db:section xml:id="creating-translucent-windows">
         <db:title>Creating Translucent Windows</db:title>
         <db:para>Since Qt 4.5, it has been possible to create windows with translucent regions on window systems that support compositing.</db:para>
         <db:para>To enable this feature in a top-level widget, set its <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_TranslucentBackground</db:link></db:code> attribute with <db:code><db:link xlink:href="qwidget.html#setAttribute">setAttribute</db:link>()</db:code> and ensure that its background is painted with non-opaque colors in the regions you want to be partially transparent.</db:para>
         <db:para>Platform notes:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>X11: This feature relies on the use of an X server that supports ARGB visuals and a compositing window manager.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Windows: The widget needs to have the <db:code><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::FramelessWindowHint</db:link></db:code> window flag set for the translucency to work.</db:para>
            </db:listitem>
         </db:itemizedlist>
      </db:section>
      <db:section xml:id="native-widgets-vs-alien-widgets">
         <db:title>Native Widgets vs Alien Widgets</db:title>
         <db:para>Introduced in Qt 4.4, alien widgets are widgets unknown to the windowing system. They do not have a native window handle associated with them. This feature significantly speeds up widget painting, resizing, and removes flicker.</db:para>
         <db:para>Should you require the old behavior with native windows, you can choose one of the following options:</db:para>
         <db:orderedlist numeration="arabic">
            <db:listitem>
               <db:para>Use the <db:code>QT_USE_NATIVE_WINDOWS=1</db:code> in your environment.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Set the <db:code><db:link xlink:href="qtcore/qt.html#ApplicationAttribute-enum">Qt::AA_NativeWindows</db:link></db:code> attribute on your application. All widgets will be native widgets.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Set the <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_NativeWindow</db:link></db:code> attribute on widgets: The widget itself and all of its ancestors will become native (unless <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_DontCreateNativeAncestors</db:link></db:code> is set).</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Call <db:code><db:link xlink:href="qwidget.html#winId">QWidget::winId</db:link></db:code> to enforce a native window (this implies 3).</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Set the <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_PaintOnScreen</db:link></db:code> attribute to enforce a native window (this implies 3).</db:para>
            </db:listitem>
         </db:orderedlist>
      </db:section>
      <db:section>
         <db:title>See Also</db:title>
         <db:simplelist type="vert">
            <db:member>
               <db:code><db:link xlink:href="qtcore/qevent.html">QEvent</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qtgui/qpainter.html">QPainter</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qgridlayout.html">QGridLayout</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qboxlayout.html">QBoxLayout</db:link></db:code>
            </db:member>
         </db:simplelist>
      </db:section>
   </db:section>
   <db:section xml:id="types">
      <db:title>Member Type Documentation</db:title>
      <db:section xml:id="RenderFlag-enum">
         <db:title>enum QWidget::​RenderFlag</db:title>
         <db:bridgehead renderas="sect2">flags QWidget::​RenderFlags</db:bridgehead>
         <db:para>This enum describes how to render the widget when calling <db:code><db:link xlink:href="qwidget.html#render">QWidget::render</db:link>()</db:code>.</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QWidget::DrawWindowBackground</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x1</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>If you enable this option, the widget's background is rendered into the target even if <db:link xlink:href="qwidget.html#autoFillBackground-prop">autoFillBackground</db:link> is not set. By default, this option is enabled.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QWidget::DrawChildren</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x2</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>If you enable this option, the widget's children are rendered recursively into the target. By default, this option is enabled.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QWidget::IgnoreMask</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x4</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>If you enable this option, the widget's <db:code><db:link xlink:href="qwidget.html#mask">QWidget::mask</db:link>()</db:code> is ignored when rendering into the target. By default, this option is disabled.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>This enum was introduced or modified in Qt 4.3.</db:para>
         <db:para>The RenderFlags type is a typedef for <db:code><db:link xlink:href="qtcore/qflags.html">QFlags</db:link>&lt;RenderFlag&gt;</db:code>. It stores an OR combination of RenderFlag values.</db:para>
      </db:section>
   </db:section>
   <db:section xml:id="prop">
      <db:title>Property Documentation</db:title>
      <db:section xml:id="acceptDrops-prop">
         <db:title>acceptDrops : bool</db:title>
         <db:para>This property holds whether drop events are enabled for this widget.</db:para>
         <db:para>Setting this property to true announces to the system that this widget <db:emphasis>may</db:emphasis> be able to accept drop events.</db:para>
         <db:para>If the widget is the desktop (<db:code><db:link xlink:href="qwidget.html#windowType">windowType</db:link>()</db:code> == <db:code><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::Desktop</db:link></db:code>), this may fail if another application is using the desktop; you can call acceptDrops() to test if this occurs.</db:para>
         <db:warning>
            <db:para> Do not modify this property in a drag and drop event handler.</db:para>
         </db:warning>
         <db:para>By default, this property is <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">acceptDrops</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setAcceptDrops</db:emphasis>(bool<db:emphasis> on</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="graphicsview.html#drag-and-drop">Drag and Drop</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="accessibleDescription-prop">
         <db:title>accessibleDescription : <db:link xlink:href="qtcore/qstring.html">QString</db:link></db:title>
         <db:para>This property holds the widget's description as seen by assistive technologies.</db:para>
         <db:para>The accessible description of a widget should convey what a widget does. While the <db:link xlink:href="qwidget.html#accessibleName-prop">accessibleName</db:link> should be a short and consise string (e.g. <db:emphasis role="bold">Save</db:emphasis>), the description should give more context, such as <db:emphasis role="bold">Saves the current document</db:emphasis>.</db:para>
         <db:para>This property has to be <db:link xlink:href="qtdoc/internationalization.html">localized</db:link>.</db:para>
         <db:para>By default, this property contains an empty string and Qt falls back to using the tool tip to provide this information.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QString </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">accessibleDescription</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setAccessibleDescription</db:emphasis>(const QString &amp;<db:emphasis> description</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#accessibleName-prop">QWidget::accessibleName</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qaccessibleinterface.html#text">QAccessibleInterface::text</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="accessibleName-prop">
         <db:title>accessibleName : <db:link xlink:href="qtcore/qstring.html">QString</db:link></db:title>
         <db:para>This property holds the widget's name as seen by assistive technologies.</db:para>
         <db:para>This is the primary name by which assistive technology such as screen readers announce this widget. For most widgets setting this property is not required. For example for <db:code><db:link xlink:href="qpushbutton.html">QPushButton</db:link></db:code> the button's text will be used.</db:para>
         <db:para>It is important to set this property when the widget does not provide any text. For example a button that only contains an icon needs to set this property to work with screen readers. The name should be short and equivalent to the visual information conveyed by the widget.</db:para>
         <db:para>This property has to be <db:link xlink:href="qtdoc/internationalization.html">localized</db:link>.</db:para>
         <db:para>By default, this property contains an empty string.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QString </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">accessibleName</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setAccessibleName</db:emphasis>(const QString &amp;<db:emphasis> name</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#accessibleDescription-prop">QWidget::accessibleDescription</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qaccessibleinterface.html#text">QAccessibleInterface::text</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="autoFillBackground-prop">
         <db:title>autoFillBackground : bool</db:title>
         <db:para>This property holds whether the widget background is filled automatically.</db:para>
         <db:para>If enabled, this property will cause Qt to fill the background of the widget before invoking the paint event. The color used is defined by the <db:code><db:link xlink:href="qtgui/qpalette.html#ColorRole-enum">QPalette::Window</db:link></db:code> color role from the widget's <db:link xlink:href="qtgui/qpalette.html">palette</db:link>.</db:para>
         <db:para>In addition, Windows are always filled with <db:code><db:link xlink:href="qtgui/qpalette.html#ColorRole-enum">QPalette::Window</db:link></db:code>, unless the WA_OpaquePaintEvent or WA_NoSystemBackground attributes are set.</db:para>
         <db:para>This property cannot be turned off (i.e., set to false) if a widget's parent has a static gradient for its background.</db:para>
         <db:warning>
            <db:para> Use this property with caution in conjunction with <db:link xlink:href="stylesheet.html">Qt Style Sheets</db:link>. When a widget has a style sheet with a valid background or a border-image, this property is automatically disabled.</db:para>
         </db:warning>
         <db:para>By default, this property is <db:code>false</db:code>.</db:para>
         <db:para>This property was introduced in Qt 4.1.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">autoFillBackground</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setAutoFillBackground</db:emphasis>(bool<db:emphasis> enabled</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_OpaquePaintEvent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_NoSystemBackground</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#transparency-and-double-buffering">Transparency and Double Buffering</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="baseSize-prop">
         <db:title>baseSize : <db:link xlink:href="qtcore/qsize.html">QSize</db:link></db:title>
         <db:para>This property holds the base size of the widget.</db:para>
         <db:para>The base size is used to calculate a proper widget size if the widget defines <db:code><db:link xlink:href="qwidget.html#sizeIncrement-prop">sizeIncrement</db:link>()</db:code>.</db:para>
         <db:para>By default, for a newly-created widget, this property contains a size with zero width and height.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QSize </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">baseSize</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setBaseSize</db:emphasis>(const QSize &amp;)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setBaseSize</db:emphasis>(int<db:emphasis> basew</db:emphasis>, int<db:emphasis> baseh</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#sizeIncrement-prop">setSizeIncrement</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="childrenRect-prop">
         <db:title>childrenRect : const <db:link xlink:href="qtcore/qrect.html">QRect</db:link></db:title>
         <db:para>This property holds the bounding rectangle of the widget's children.</db:para>
         <db:para>Hidden children are excluded.</db:para>
         <db:para>By default, for a widget with no children, this property contains a rectangle with zero width and height located at the origin.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QRect </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">childrenRect</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#childrenRegion-prop">childrenRegion</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#geometry-prop">geometry</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="childrenRegion-prop">
         <db:title>childrenRegion : const <db:link xlink:href="qtgui/qregion.html">QRegion</db:link></db:title>
         <db:para>This property holds the combined region occupied by the widget's children.</db:para>
         <db:para>Hidden children are excluded.</db:para>
         <db:para>By default, for a widget with no children, this property contains an empty region.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QRegion </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">childrenRegion</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#childrenRect-prop">childrenRect</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#geometry-prop">geometry</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mask">mask</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="contextMenuPolicy-prop">
         <db:title>contextMenuPolicy : <db:link xlink:href="qtcore/qt.html#ContextMenuPolicy-enum">Qt::ContextMenuPolicy</db:link></db:title>
         <db:para>This property holds how the widget shows a context menu.</db:para>
         <db:para>The default value of this property is <db:code><db:link xlink:href="qtcore/qt.html#ContextMenuPolicy-enum">Qt::DefaultContextMenu</db:link></db:code>, which means the <db:code><db:link xlink:href="qwidget.html#contextMenuEvent">contextMenuEvent</db:link>()</db:code> handler is called. Other values are <db:code><db:link xlink:href="qtcore/qt.html#ContextMenuPolicy-enum">Qt::NoContextMenu</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qt.html#ContextMenuPolicy-enum">Qt::PreventContextMenu</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qt.html#ContextMenuPolicy-enum">Qt::ActionsContextMenu</db:link></db:code>, and <db:code><db:link xlink:href="qtcore/qt.html#ContextMenuPolicy-enum">Qt::CustomContextMenu</db:link></db:code>. With <db:code><db:link xlink:href="qtcore/qt.html#ContextMenuPolicy-enum">Qt::CustomContextMenu</db:link></db:code>, the signal <db:code><db:link xlink:href="qwidget.html#customContextMenuRequested">customContextMenuRequested</db:link>()</db:code> is emitted.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> Qt::ContextMenuPolicy </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">contextMenuPolicy</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setContextMenuPolicy</db:emphasis>(Qt::ContextMenuPolicy<db:emphasis> policy</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#contextMenuEvent">contextMenuEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#customContextMenuRequested">customContextMenuRequested</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#actions">actions</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="cursor-prop">
         <db:title>cursor : <db:link xlink:href="qtgui/qcursor.html">QCursor</db:link></db:title>
         <db:para>This property holds the cursor shape for this widget.</db:para>
         <db:para>The mouse cursor will assume this shape when it's over this widget. See the <db:link xlink:href="qtcore/qt.html#CursorShape-enum">list of predefined cursor objects</db:link> for a range of useful shapes.</db:para>
         <db:para>An editor widget might use an I-beam cursor:</db:para>
         <db:programlisting>setCursor(Qt::IBeamCursor);</db:programlisting>
         <db:para>If no cursor has been set, or after a call to unsetCursor(), the parent's cursor is used.</db:para>
         <db:para>By default, this property contains a cursor with the <db:code><db:link xlink:href="qtcore/qt.html#CursorShape-enum">Qt::ArrowCursor</db:link></db:code> shape.</db:para>
         <db:para>Some underlying window implementations will reset the cursor if it leaves a widget even if the mouse is grabbed. If you want to have a cursor set for all widgets, even when outside the window, consider <db:code><db:link xlink:href="qtgui/qguiapplication.html#setOverrideCursor">QApplication::setOverrideCursor</db:link>()</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QCursor </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">cursor</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setCursor</db:emphasis>(const QCursor &amp;)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">unsetCursor</db:emphasis>()</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qguiapplication.html#setOverrideCursor">QApplication::setOverrideCursor</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="enabled-prop">
         <db:title>enabled : bool</db:title>
         <db:para>This property holds whether the widget is enabled.</db:para>
         <db:para>In general an enabled widget handles keyboard and mouse events; a disabled widget does not. An exception is made with <db:code><db:link xlink:href="qabstractbutton.html">QAbstractButton</db:link></db:code>.</db:para>
         <db:para>Some widgets display themselves differently when they are disabled. For example a button might draw its label grayed out. If your widget needs to know when it becomes enabled or disabled, you can use the <db:code><db:link xlink:href="qwidget.html#changeEvent">changeEvent</db:link>()</db:code> with type <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::EnabledChange</db:link></db:code>.</db:para>
         <db:para>Disabling a widget implicitly disables all its children. Enabling respectively enables all child widgets unless they have been explicitly disabled. It it not possible to explicitly enable a child widget which is not a window while its parent widget remains disabled.</db:para>
         <db:para>By default, this property is <db:code>true</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">isEnabled</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setEnabled</db:emphasis>(bool)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#isEnabledTo">isEnabledTo</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qkeyevent.html">QKeyEvent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qmouseevent.html">QMouseEvent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#changeEvent">changeEvent</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="focus-prop">
         <db:title>focus : const bool</db:title>
         <db:para>This property holds whether this widget (or its focus proxy) has the keyboard input focus.</db:para>
         <db:para>By default, this property is <db:code>false</db:code>.</db:para>
         <db:note>
            <db:para>Obtaining the value of this property for a widget is effectively equivalent to checking whether <db:code><db:link xlink:href="qapplication.html#focusWidget">QApplication::focusWidget</db:link>()</db:code> refers to the widget.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">hasFocus</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setFocus">setFocus</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#clearFocus">clearFocus</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusPolicy-prop">setFocusPolicy</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qapplication.html#focusWidget">QApplication::focusWidget</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="focusPolicy-prop">
         <db:title>focusPolicy : <db:link xlink:href="qtcore/qt.html#FocusPolicy-enum">Qt::FocusPolicy</db:link></db:title>
         <db:para>This property holds the way the widget accepts keyboard focus.</db:para>
         <db:para>The policy is <db:code><db:link xlink:href="qtcore/qt.html#FocusPolicy-enum">Qt::TabFocus</db:link></db:code> if the widget accepts keyboard focus by tabbing, <db:code><db:link xlink:href="qtcore/qt.html#FocusPolicy-enum">Qt::ClickFocus</db:link></db:code> if the widget accepts focus by clicking, <db:code><db:link xlink:href="qtcore/qt.html#FocusPolicy-enum">Qt::StrongFocus</db:link></db:code> if it accepts both, and <db:code><db:link xlink:href="qtcore/qt.html#FocusPolicy-enum">Qt::NoFocus</db:link></db:code> (the default) if it does not accept focus at all.</db:para>
         <db:para>You must enable keyboard focus for a widget if it processes keyboard events. This is normally done from the widget's constructor. For instance, the <db:code><db:link xlink:href="qlineedit.html">QLineEdit</db:link></db:code> constructor calls setFocusPolicy(<db:code><db:link xlink:href="qtcore/qt.html#FocusPolicy-enum">Qt::StrongFocus</db:link></db:code>).</db:para>
         <db:para>If the widget has a focus proxy, then the focus policy will be propagated to it.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> Qt::FocusPolicy </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">focusPolicy</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setFocusPolicy</db:emphasis>(Qt::FocusPolicy<db:emphasis> policy</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusInEvent">focusInEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusOutEvent">focusOutEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#keyPressEvent">keyPressEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#keyReleaseEvent">keyReleaseEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#enabled-prop">enabled</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="font-prop">
         <db:title>font : <db:link xlink:href="qtgui/qfont.html">QFont</db:link></db:title>
         <db:para>This property holds the font currently set for the widget.</db:para>
         <db:para>This property describes the widget's requested font. The font is used by the widget's style when rendering standard components, and is available as a means to ensure that custom widgets can maintain consistency with the native platform's look and feel. It's common that different platforms, or different styles, define different fonts for an application.</db:para>
         <db:para>When you assign a new font to a widget, the properties from this font are combined with the widget's default font to form the widget's final font. You can call <db:code><db:link xlink:href="qwidget.html#fontInfo">fontInfo</db:link>()</db:code> to get a copy of the widget's final font. The final font is also used to initialize <db:code><db:link xlink:href="qtgui/qpainter.html">QPainter</db:link></db:code>'s font.</db:para>
         <db:para>The default depends on the system environment. <db:code><db:link xlink:href="qapplication.html">QApplication</db:link></db:code> maintains a system/theme font which serves as a default for all widgets. There may also be special font defaults for certain types of widgets. You can also define default fonts for widgets yourself by passing a custom font and the name of a widget to <db:code><db:link xlink:href="qapplication.html#setFont">QApplication::setFont</db:link>()</db:code>. Finally, the font is matched against Qt's font database to find the best match.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> propagates explicit font properties from parent to child. If you change a specific property on a font and assign that font to a widget, that property will propagate to all the widget's children, overriding any system defaults for that property. Note that fonts by default don't propagate to windows (see <db:code><db:link xlink:href="qwidget.html#isWindow">isWindow</db:link>()</db:code>) unless the <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_WindowPropagation</db:link></db:code> attribute is enabled.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code>'s font propagation is similar to its palette propagation.</db:para>
         <db:para>The current style, which is used to render the content of all standard Qt widgets, is free to choose to use the widget font, or in some cases, to ignore it (partially, or completely). In particular, certain styles like GTK style, Mac style, Windows XP, and Vista style, apply special modifications to the widget font to match the platform's native look and feel. Because of this, assigning properties to a widget's font is not guaranteed to change the appearance of the widget. Instead, you may choose to apply a <db:link xlink:href="stylesheet.html#stylesheet">styleSheet</db:link>.</db:para>
         <db:note>
            <db:para>If <db:link xlink:href="stylesheet.html">Qt Style Sheets</db:link> are used on the same widget as setFont(), style sheets will take precedence if the settings conflict.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> const QFont &amp; </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">font</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setFont</db:emphasis>(const QFont &amp;)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#fontInfo">fontInfo</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#fontMetrics">fontMetrics</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="frameGeometry-prop">
         <db:title>frameGeometry : const <db:link xlink:href="qtcore/qrect.html">QRect</db:link></db:title>
         <db:para>This property holds geometry of the widget relative to its parent including any window frame.</db:para>
         <db:para>See the <db:link xlink:href="application-windows.html#window-geometry">Window Geometry</db:link> documentation for an overview of geometry issues with windows.</db:para>
         <db:para>By default, this property contains a value that depends on the user's platform and screen geometry.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QRect </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">frameGeometry</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#geometry-prop">geometry</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#x-prop">x</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#y-prop">y</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#pos-prop">pos</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="frameSize-prop">
         <db:title>frameSize : const <db:link xlink:href="qtcore/qsize.html">QSize</db:link></db:title>
         <db:para>This property holds the size of the widget including any window frame.</db:para>
         <db:para>By default, this property contains a value that depends on the user's platform and screen geometry.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QSize </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">frameSize</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="fullScreen-prop">
         <db:title>fullScreen : const bool</db:title>
         <db:para>This property holds whether the widget is shown in full screen mode.</db:para>
         <db:para>A widget in full screen mode occupies the whole screen area and does not display window decorations, such as a title bar.</db:para>
         <db:para>By default, this property is <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">isFullScreen</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#windowState">windowState</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#minimized-prop">minimized</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#maximized-prop">maximized</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="geometry-prop">
         <db:title>geometry : <db:link xlink:href="qtcore/qrect.html">QRect</db:link></db:title>
         <db:para>This property holds the geometry of the widget relative to its parent and excluding the window frame.</db:para>
         <db:para>When changing the geometry, the widget, if visible, receives a move event (<db:code><db:link xlink:href="qwidget.html#moveEvent">moveEvent</db:link>()</db:code>) and/or a resize event (<db:code><db:link xlink:href="qwidget.html#resizeEvent">resizeEvent</db:link>()</db:code>) immediately. If the widget is not currently visible, it is guaranteed to receive appropriate events before it is shown.</db:para>
         <db:para>The size component is adjusted if it lies outside the range defined by <db:code><db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link>()</db:code> and <db:code><db:link xlink:href="qwidget.html#maximumSize-prop">maximumSize</db:link>()</db:code>.</db:para>
         <db:warning>
            <db:para> Calling setGeometry() inside <db:code><db:link xlink:href="qwidget.html#resizeEvent">resizeEvent</db:link>()</db:code> or <db:code><db:link xlink:href="qwidget.html#moveEvent">moveEvent</db:link>()</db:code> can lead to infinite recursion.</db:para>
         </db:warning>
         <db:para>See the <db:link xlink:href="application-windows.html#window-geometry">Window Geometry</db:link> documentation for an overview of geometry issues with windows.</db:para>
         <db:para>By default, this property contains a value that depends on the user's platform and screen geometry.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> const QRect &amp; </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">geometry</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setGeometry</db:emphasis>(int<db:emphasis> x</db:emphasis>, int<db:emphasis> y</db:emphasis>, int<db:emphasis> w</db:emphasis>, int<db:emphasis> h</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setGeometry</db:emphasis>(const QRect &amp;)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#frameGeometry-prop">frameGeometry</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#rect-prop">rect</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#pos-prop">move</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#size-prop">resize</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#moveEvent">moveEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#resizeEvent">resizeEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#maximumSize-prop">maximumSize</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="height-prop">
         <db:title>height : const int</db:title>
         <db:para>This property holds the height of the widget excluding any window frame.</db:para>
         <db:para>See the <db:link xlink:href="application-windows.html#window-geometry">Window Geometry</db:link> documentation for an overview of geometry issues with windows.</db:para>
         <db:note>
            <db:para>Do not use this function to find the height of a screen on a <db:link xlink:href="qdesktopwidget.html">multiple screen desktop</db:link>. Read <db:link xlink:href="qdesktopwidget.html#screen-geometry">this note</db:link> for details.</db:para>
         </db:note>
         <db:para>By default, this property contains a value that depends on the user's platform and screen geometry.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">height</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#geometry-prop">geometry</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#width-prop">width</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#size-prop">size</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="inputMethodHints-prop">
         <db:title>inputMethodHints : <db:link xlink:href="qtcore/qt.html#InputMethodHint-enum">Qt::InputMethodHints</db:link></db:title>
         <db:para>This property holds what input method specific hints the widget has.</db:para>
         <db:para>This is only relevant for input widgets. It is used by the input method to retrieve hints as to how the input method should operate. For example, if the <db:code><db:link xlink:href="qtcore/qt.html#InputMethodHint-enum">Qt::ImhFormattedNumbersOnly</db:link></db:code> flag is set, the input method may change its visual components to reflect that only numbers can be entered.</db:para>
         <db:warning>
            <db:para> Some widgets require certain flags in order to work as intended. To set a flag, do <db:code>w-&gt;setInputMethodHints(w-&gt;inputMethodHints()|f)</db:code> instead of <db:code>w-&gt;setInputMethodHints(f)</db:code>.</db:para>
         </db:warning>
         <db:note>
            <db:para>The flags are only hints, so the particular input method implementation is free to ignore them. If you want to be sure that a certain type of characters are entered, you should also set a <db:code><db:link xlink:href="qtgui/qvalidator.html">QValidator</db:link></db:code> on the widget.</db:para>
         </db:note>
         <db:para>The default value is <db:code><db:link xlink:href="qtcore/qt.html#InputMethodHint-enum">Qt::ImhNone</db:link></db:code>.</db:para>
         <db:para>This property was introduced in Qt 4.6.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> Qt::InputMethodHints </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">inputMethodHints</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setInputMethodHints</db:emphasis>(Qt::InputMethodHints<db:emphasis> hints</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#inputMethodQuery">inputMethodQuery</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="isActiveWindow-prop">
         <db:title>isActiveWindow : const bool</db:title>
         <db:para>This property holds whether this widget's window is the active window.</db:para>
         <db:para>The active window is the window that contains the widget that has keyboard focus (The window may still have focus if it has no widgets or none of its widgets accepts keyboard focus).</db:para>
         <db:para>When popup windows are visible, this property is <db:code>true</db:code> for both the active window <db:emphasis>and</db:emphasis> for the popup.</db:para>
         <db:para>By default, this property is <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">isActiveWindow</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#activateWindow">activateWindow</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qapplication.html#activeWindow">QApplication::activeWindow</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="layoutDirection-prop">
         <db:title>layoutDirection : <db:link xlink:href="qtcore/qt.html#LayoutDirection-enum">Qt::LayoutDirection</db:link></db:title>
         <db:para>This property holds the layout direction for this widget.</db:para>
         <db:para>By default, this property is set to <db:code><db:link xlink:href="qtcore/qt.html#LayoutDirection-enum">Qt::LeftToRight</db:link></db:code>.</db:para>
         <db:para>When the layout direction is set on a widget, it will propagate to the widget's children, but not to a child that is a window and not to a child for which setLayoutDirection() has been explicitly called. Also, child widgets added <db:emphasis>after</db:emphasis> setLayoutDirection() has been called for the parent do not inherit the parent's layout direction.</db:para>
         <db:para>This method no longer affects text layout direction since Qt 4.7.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> Qt::LayoutDirection </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">layoutDirection</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setLayoutDirection</db:emphasis>(Qt::LayoutDirection<db:emphasis> direction</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">unsetLayoutDirection</db:emphasis>()</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qguiapplication.html#layoutDirection-prop">QApplication::layoutDirection</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="locale-prop">
         <db:title>locale : <db:link xlink:href="qtcore/qlocale.html">QLocale</db:link></db:title>
         <db:para>This property holds the widget's locale.</db:para>
         <db:para>As long as no special locale has been set, this is either the parent's locale or (if this widget is a top level widget), the default locale.</db:para>
         <db:para>If the widget displays dates or numbers, these should be formatted using the widget's locale.</db:para>
         <db:para>This property was introduced in Qt 4.3.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QLocale </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">locale</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setLocale</db:emphasis>(const QLocale &amp;<db:emphasis> locale</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">unsetLocale</db:emphasis>()</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtcore/qlocale.html">QLocale</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtcore/qlocale.html#setDefault">QLocale::setDefault</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="maximized-prop">
         <db:title>maximized : const bool</db:title>
         <db:para>This property holds whether this widget is maximized.</db:para>
         <db:para>This property is only relevant for windows.</db:para>
         <db:note>
            <db:para>Due to limitations on some window systems, this does not always report the expected results (e.g., if the user on X11 maximizes the window via the window manager, Qt has no way of distinguishing this from any other resize). This is expected to improve as window manager protocols evolve.</db:para>
         </db:note>
         <db:para>By default, this property is <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">isMaximized</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#windowState">windowState</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showMaximized">showMaximized</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#visible-prop">visible</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#hide">hide</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showNormal">showNormal</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#minimized-prop">minimized</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="maximumHeight-prop">
         <db:title>maximumHeight : int</db:title>
         <db:para>This property holds the widget's maximum height in pixels.</db:para>
         <db:para>This property corresponds to the height held by the <db:link xlink:href="qwidget.html#maximumSize-prop">maximumSize</db:link> property.</db:para>
         <db:para>By default, this property contains a value of 16777215.</db:para>
         <db:note>
            <db:para>The definition of the <db:code>QWIDGETSIZE_MAX</db:code> macro limits the maximum size of widgets.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">maximumHeight</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setMaximumHeight</db:emphasis>(int<db:emphasis> maxh</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#maximumSize-prop">maximumSize</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#maximumWidth-prop">maximumWidth</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="maximumSize-prop">
         <db:title>maximumSize : <db:link xlink:href="qtcore/qsize.html">QSize</db:link></db:title>
         <db:para>This property holds the widget's maximum size in pixels.</db:para>
         <db:para>The widget cannot be resized to a larger size than the maximum widget size.</db:para>
         <db:para>By default, this property contains a size in which both width and height have values of 16777215.</db:para>
         <db:note>
            <db:para>The definition of the <db:code>QWIDGETSIZE_MAX</db:code> macro limits the maximum size of widgets.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QSize </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">maximumSize</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setMaximumSize</db:emphasis>(const QSize &amp;)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setMaximumSize</db:emphasis>(int<db:emphasis> maxw</db:emphasis>, int<db:emphasis> maxh</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#maximumWidth-prop">maximumWidth</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#maximumHeight-prop">maximumHeight</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#sizeIncrement-prop">sizeIncrement</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="maximumWidth-prop">
         <db:title>maximumWidth : int</db:title>
         <db:para>This property holds the widget's maximum width in pixels.</db:para>
         <db:para>This property corresponds to the width held by the <db:link xlink:href="qwidget.html#maximumSize-prop">maximumSize</db:link> property.</db:para>
         <db:para>By default, this property contains a value of 16777215.</db:para>
         <db:note>
            <db:para>The definition of the <db:code>QWIDGETSIZE_MAX</db:code> macro limits the maximum size of widgets.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">maximumWidth</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setMaximumWidth</db:emphasis>(int<db:emphasis> maxw</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#maximumSize-prop">maximumSize</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#maximumHeight-prop">maximumHeight</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="minimized-prop">
         <db:title>minimized : const bool</db:title>
         <db:para>This property holds whether this widget is minimized (iconified).</db:para>
         <db:para>This property is only relevant for windows.</db:para>
         <db:para>By default, this property is <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">isMinimized</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showMinimized">showMinimized</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#visible-prop">visible</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#hide">hide</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showNormal">showNormal</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#maximized-prop">maximized</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="minimumHeight-prop">
         <db:title>minimumHeight : int</db:title>
         <db:para>This property holds the widget's minimum height in pixels.</db:para>
         <db:para>This property corresponds to the height held by the <db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link> property.</db:para>
         <db:para>By default, this property has a value of 0.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">minimumHeight</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setMinimumHeight</db:emphasis>(int<db:emphasis> minh</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#minimumWidth-prop">minimumWidth</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="minimumSize-prop">
         <db:title>minimumSize : <db:link xlink:href="qtcore/qsize.html">QSize</db:link></db:title>
         <db:para>This property holds the widget's minimum size.</db:para>
         <db:para>The widget cannot be resized to a smaller size than the minimum widget size. The widget's size is forced to the minimum size if the current size is smaller.</db:para>
         <db:para>The minimum size set by this function will override the minimum size defined by <db:code><db:link xlink:href="qlayout.html">QLayout</db:link></db:code>. In order to unset the minimum size, use a value of <db:code>QSize(0, 0)</db:code>.</db:para>
         <db:para>By default, this property contains a size with zero width and height.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QSize </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">minimumSize</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setMinimumSize</db:emphasis>(const QSize &amp;)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setMinimumSize</db:emphasis>(int<db:emphasis> minw</db:emphasis>, int<db:emphasis> minh</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#minimumWidth-prop">minimumWidth</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#minimumHeight-prop">minimumHeight</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#maximumSize-prop">maximumSize</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#sizeIncrement-prop">sizeIncrement</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="minimumSizeHint-prop">
         <db:title>minimumSizeHint : const <db:link xlink:href="qtcore/qsize.html">QSize</db:link></db:title>
         <db:para>This property holds the recommended minimum size for the widget.</db:para>
         <db:para>If the value of this property is an invalid size, no minimum size is recommended.</db:para>
         <db:para>The default implementation of minimumSizeHint() returns an invalid size if there is no layout for this widget, and returns the layout's minimum size otherwise. Most built-in widgets reimplement minimumSizeHint().</db:para>
         <db:para>
            <db:code><db:link xlink:href="qlayout.html">QLayout</db:link></db:code> will never resize a widget to a size smaller than the minimum size hint unless <db:code><db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link>()</db:code> is set or the size policy is set to QSizePolicy::Ignore. If <db:code><db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link>()</db:code> is set, the minimum size hint will be ignored.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> virtual QSize </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">minimumSizeHint</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtcore/qsize.html#isValid">QSize::isValid</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#size-prop">resize</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#minimumSize-prop">setMinimumSize</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#sizePolicy-prop">sizePolicy</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="minimumWidth-prop">
         <db:title>minimumWidth : int</db:title>
         <db:para>This property holds the widget's minimum width in pixels.</db:para>
         <db:para>This property corresponds to the width held by the <db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link> property.</db:para>
         <db:para>By default, this property has a value of 0.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">minimumWidth</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setMinimumWidth</db:emphasis>(int<db:emphasis> minw</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#minimumHeight-prop">minimumHeight</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="modal-prop">
         <db:title>modal : const bool</db:title>
         <db:para>This property holds whether the widget is a modal widget.</db:para>
         <db:para>This property only makes sense for windows. A modal widget prevents widgets in all other windows from getting any input.</db:para>
         <db:para>By default, this property is <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">isModal</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#isWindow">isWindow</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#windowModality-prop">windowModality</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qdialog.html">QDialog</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="mouseTracking-prop">
         <db:title>mouseTracking : bool</db:title>
         <db:para>This property holds whether mouse tracking is enabled for the widget.</db:para>
         <db:para>If mouse tracking is disabled (the default), the widget only receives mouse move events when at least one mouse button is pressed while the mouse is being moved.</db:para>
         <db:para>If mouse tracking is enabled, the widget receives mouse move events even if no buttons are pressed.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">hasMouseTracking</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setMouseTracking</db:emphasis>(bool<db:emphasis> enable</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseMoveEvent">mouseMoveEvent</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="normalGeometry-prop">
         <db:title>normalGeometry : const <db:link xlink:href="qtcore/qrect.html">QRect</db:link></db:title>
         <db:para>This property holds the geometry of the widget as it will appear when shown as a normal (not maximized or full screen) top-level widget.</db:para>
         <db:para>For child widgets this property always holds an empty rectangle.</db:para>
         <db:para>By default, this property contains an empty rectangle.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QRect </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">normalGeometry</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#windowState">QWidget::windowState</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#geometry-prop">QWidget::geometry</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="palette-prop">
         <db:title>palette : <db:link xlink:href="qtgui/qpalette.html">QPalette</db:link></db:title>
         <db:para>This property holds the widget's palette.</db:para>
         <db:para>This property describes the widget's palette. The palette is used by the widget's style when rendering standard components, and is available as a means to ensure that custom widgets can maintain consistency with the native platform's look and feel. It's common that different platforms, or different styles, have different palettes.</db:para>
         <db:para>When you assign a new palette to a widget, the color roles from this palette are combined with the widget's default palette to form the widget's final palette. The palette entry for the widget's background role is used to fill the widget's background (see <db:code><db:link xlink:href="qwidget.html#autoFillBackground-prop">QWidget::autoFillBackground</db:link></db:code>), and the foreground role initializes <db:code><db:link xlink:href="qtgui/qpainter.html">QPainter</db:link></db:code>'s pen.</db:para>
         <db:para>The default depends on the system environment. <db:code><db:link xlink:href="qapplication.html">QApplication</db:link></db:code> maintains a system/theme palette which serves as a default for all widgets. There may also be special palette defaults for certain types of widgets (e.g., on Windows XP and Vista, all classes that derive from <db:code><db:link xlink:href="qmenubar.html">QMenuBar</db:link></db:code> have a special default palette). You can also define default palettes for widgets yourself by passing a custom palette and the name of a widget to <db:code><db:link xlink:href="qapplication.html#setPalette">QApplication::setPalette</db:link>()</db:code>. Finally, the style always has the option of polishing the palette as it's assigned (see <db:code><db:link xlink:href="qstyle.html#polish">QStyle::polish</db:link>()</db:code>).</db:para>
         <db:para>
            <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> propagates explicit palette roles from parent to child. If you assign a brush or color to a specific role on a palette and assign that palette to a widget, that role will propagate to all the widget's children, overriding any system defaults for that role. Note that palettes by default don't propagate to windows (see <db:code><db:link xlink:href="qwidget.html#isWindow">isWindow</db:link>()</db:code>) unless the <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_WindowPropagation</db:link></db:code> attribute is enabled.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code>'s palette propagation is similar to its font propagation.</db:para>
         <db:para>The current style, which is used to render the content of all standard Qt widgets, is free to choose colors and brushes from the widget palette, or in some cases, to ignore the palette (partially, or completely). In particular, certain styles like GTK style, Mac style, Windows XP, and Vista style, depend on third party APIs to render the content of widgets, and these styles typically do not follow the palette. Because of this, assigning roles to a widget's palette is not guaranteed to change the appearance of the widget. Instead, you may choose to apply a <db:link xlink:href="stylesheet.html#stylesheet">styleSheet</db:link>. You can refer to our Knowledge Base article <db:link xlink:href="http://qt.nokia.com/developer/knowledgebase/22">here</db:link> for more information.</db:para>
         <db:warning>
            <db:para> Do not use this function in conjunction with <db:link xlink:href="stylesheet.html">Qt Style Sheets</db:link>. When using style sheets, the palette of a widget can be customized using the "color", "background-color", "selection-color", "selection-background-color" and "alternate-background-color".</db:para>
         </db:warning>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> const QPalette &amp; </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">palette</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setPalette</db:emphasis>(const QPalette &amp;)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qapplication.html#palette">QApplication::palette</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#font-prop">QWidget::font</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="pos-prop">
         <db:title>pos : <db:link xlink:href="qtcore/qpoint.html">QPoint</db:link></db:title>
         <db:para>This property holds the position of the widget within its parent widget.</db:para>
         <db:para>If the widget is a window, the position is that of the widget on the desktop, including its frame.</db:para>
         <db:para>When changing the position, the widget, if visible, receives a move event (<db:code><db:link xlink:href="qwidget.html#moveEvent">moveEvent</db:link>()</db:code>) immediately. If the widget is not currently visible, it is guaranteed to receive an event before it is shown.</db:para>
         <db:para>By default, this property contains a position that refers to the origin.</db:para>
         <db:warning>
            <db:para> Calling move() or <db:code><db:link xlink:href="qwidget.html#geometry-prop">setGeometry</db:link>()</db:code> inside <db:code><db:link xlink:href="qwidget.html#moveEvent">moveEvent</db:link>()</db:code> can lead to infinite recursion.</db:para>
         </db:warning>
         <db:para>See the <db:link xlink:href="application-windows.html#window-geometry">Window Geometry</db:link> documentation for an overview of geometry issues with windows.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QPoint </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">pos</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">move</db:emphasis>(int<db:emphasis> x</db:emphasis>, int<db:emphasis> y</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">move</db:emphasis>(const QPoint &amp;)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#frameGeometry-prop">frameGeometry</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#size-prop">size</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#x-prop">x</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#y-prop">y</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="rect-prop">
         <db:title>rect : const <db:link xlink:href="qtcore/qrect.html">QRect</db:link></db:title>
         <db:para>This property holds the internal geometry of the widget excluding any window frame.</db:para>
         <db:para>The rect property equals <db:code><db:link xlink:href="qtcore/qrect.html">QRect</db:link></db:code>
            <db:code><db:link xlink:href="qwidget.html#width-prop">width</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#height-prop">height</db:link>()</db:code>).</db:para>
         <db:para>See the <db:link xlink:href="application-windows.html#window-geometry">Window Geometry</db:link> documentation for an overview of geometry issues with windows.</db:para>
         <db:para>By default, this property contains a value that depends on the user's platform and screen geometry.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QRect </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">rect</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#size-prop">size</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="size-prop">
         <db:title>size : <db:link xlink:href="qtcore/qsize.html">QSize</db:link></db:title>
         <db:para>This property holds the size of the widget excluding any window frame.</db:para>
         <db:para>If the widget is visible when it is being resized, it receives a resize event (<db:code><db:link xlink:href="qwidget.html#resizeEvent">resizeEvent</db:link>()</db:code>) immediately. If the widget is not currently visible, it is guaranteed to receive an event before it is shown.</db:para>
         <db:para>The size is adjusted if it lies outside the range defined by <db:code><db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link>()</db:code> and <db:code><db:link xlink:href="qwidget.html#maximumSize-prop">maximumSize</db:link>()</db:code>.</db:para>
         <db:para>By default, this property contains a value that depends on the user's platform and screen geometry.</db:para>
         <db:warning>
            <db:para> Calling resize() or <db:code><db:link xlink:href="qwidget.html#geometry-prop">setGeometry</db:link>()</db:code> inside <db:code><db:link xlink:href="qwidget.html#resizeEvent">resizeEvent</db:link>()</db:code> can lead to infinite recursion.</db:para>
         </db:warning>
         <db:note>
            <db:para>Setting the size to <db:code>QSize(0, 0)</db:code> will cause the widget to not appear on screen. This also applies to windows.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QSize </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">size</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">resize</db:emphasis>(int<db:emphasis> w</db:emphasis>, int<db:emphasis> h</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">resize</db:emphasis>(const QSize &amp;)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#pos-prop">pos</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#geometry-prop">geometry</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#maximumSize-prop">maximumSize</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#resizeEvent">resizeEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#adjustSize">adjustSize</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="sizeHint-prop">
         <db:title>sizeHint : const <db:link xlink:href="qtcore/qsize.html">QSize</db:link></db:title>
         <db:para>This property holds the recommended size for the widget.</db:para>
         <db:para>If the value of this property is an invalid size, no size is recommended.</db:para>
         <db:para>The default implementation of sizeHint() returns an invalid size if there is no layout for this widget, and returns the layout's preferred size otherwise.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> virtual QSize </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">sizeHint</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtcore/qsize.html#isValid">QSize::isValid</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#minimumSizeHint-prop">minimumSizeHint</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#sizePolicy-prop">sizePolicy</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#minimumSize-prop">setMinimumSize</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#updateGeometry">updateGeometry</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="sizeIncrement-prop">
         <db:title>sizeIncrement : <db:link xlink:href="qtcore/qsize.html">QSize</db:link></db:title>
         <db:para>This property holds the size increment of the widget.</db:para>
         <db:para>When the user resizes the window, the size will move in steps of sizeIncrement().<db:code><db:link xlink:href="qwidget.html#width-prop">width</db:link>()</db:code> pixels horizontally and sizeIncrement.<db:code><db:link xlink:href="qwidget.html#height-prop">height</db:link>()</db:code> pixels vertically, with <db:code><db:link xlink:href="qwidget.html#baseSize-prop">baseSize</db:link>()</db:code> as the basis. Preferred widget sizes are for non-negative integers <db:emphasis>i</db:emphasis> and <db:emphasis>j</db:emphasis>:</db:para>
         <db:programlisting>width =baseSize().width() + i * sizeIncrement().width(); height =baseSize().height() + j * sizeIncrement().height();</db:programlisting>
         <db:para>Note that while you can set the size increment for all widgets, it only affects windows.</db:para>
         <db:para>By default, this property contains a size with zero width and height.</db:para>
         <db:warning>
            <db:para> The size increment has no effect under Windows, and may be disregarded by the window manager on X11.</db:para>
         </db:warning>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QSize </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">sizeIncrement</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setSizeIncrement</db:emphasis>(const QSize &amp;)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setSizeIncrement</db:emphasis>(int<db:emphasis> w</db:emphasis>, int<db:emphasis> h</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#size-prop">size</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#maximumSize-prop">maximumSize</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="sizePolicy-prop">
         <db:title>sizePolicy : <db:link xlink:href="qsizepolicy.html">QSizePolicy</db:link></db:title>
         <db:para>This property holds the default layout behavior of the widget.</db:para>
         <db:para>If there is a <db:code><db:link xlink:href="qlayout.html">QLayout</db:link></db:code> that manages this widget's children, the size policy specified by that layout is used. If there is no such <db:code><db:link xlink:href="qlayout.html">QLayout</db:link></db:code>, the result of this function is used.</db:para>
         <db:para>The default policy is Preferred/Preferred, which means that the widget can be freely resized, but prefers to be the size <db:code><db:link xlink:href="qwidget.html#sizeHint-prop">sizeHint</db:link>()</db:code> returns. Button-like widgets set the size policy to specify that they may stretch horizontally, but are fixed vertically. The same applies to lineedit controls (such as <db:code><db:link xlink:href="qlineedit.html">QLineEdit</db:link></db:code>, <db:code><db:link xlink:href="qspinbox.html">QSpinBox</db:link></db:code> or an editable <db:code><db:link xlink:href="qcombobox.html">QComboBox</db:link></db:code>) and other horizontally orientated widgets (such as <db:code><db:link xlink:href="qprogressbar.html">QProgressBar</db:link></db:code>). <db:code><db:link xlink:href="qtoolbutton.html">QToolButton</db:link></db:code>'s are normally square, so they allow growth in both directions. Widgets that support different directions (such as <db:code><db:link xlink:href="qslider.html">QSlider</db:link></db:code>, <db:code><db:link xlink:href="qscrollbar.html">QScrollBar</db:link></db:code> or QHeader) specify stretching in the respective direction only. Widgets
                                    that can provide scroll bars (usually subclasses of <db:code><db:link xlink:href="qscrollarea.html">QScrollArea</db:link></db:code>) tend to specify that they can use additional space, and that they can make do with less than <db:code><db:link xlink:href="qwidget.html#sizeHint-prop">sizeHint</db:link>()</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QSizePolicy </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">sizePolicy</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setSizePolicy</db:emphasis>(QSizePolicy)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setSizePolicy</db:emphasis>(QSizePolicy::Policy<db:emphasis> horizontal</db:emphasis>, QSizePolicy::Policy<db:emphasis> vertical</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#sizeHint-prop">sizeHint</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlayout.html">QLayout</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qsizepolicy.html">QSizePolicy</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#updateGeometry">updateGeometry</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="statusTip-prop">
         <db:title>statusTip : <db:link xlink:href="qtcore/qstring.html">QString</db:link></db:title>
         <db:para>This property holds the widget's status tip.</db:para>
         <db:para>By default, this property contains an empty string.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QString </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">statusTip</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setStatusTip</db:emphasis>(const QString &amp;)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#toolTip-prop">toolTip</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#whatsThis-prop">whatsThis</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="styleSheet-prop">
         <db:title>styleSheet : <db:link xlink:href="qtcore/qstring.html">QString</db:link></db:title>
         <db:para>This property holds the widget's style sheet.</db:para>
         <db:para>The style sheet contains a textual description of customizations to the widget's style, as described in the <db:link xlink:href="stylesheet.html">Qt Style Sheets</db:link> document.</db:para>
         <db:para>Since Qt 4.5, Qt style sheets fully supports Mac OS X.</db:para>
         <db:warning>
            <db:para> Qt style sheets are currently not supported for custom <db:code><db:link xlink:href="qstyle.html">QStyle</db:link></db:code> subclasses. We plan to address this in some future release.</db:para>
         </db:warning>
         <db:para>This property was introduced in Qt 4.2.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QString </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">styleSheet</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setStyleSheet</db:emphasis>(const QString &amp;<db:emphasis> styleSheet</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setStyle">setStyle</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qapplication.html#styleSheet-prop">QApplication::styleSheet</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="stylesheet.html">Qt Style Sheets</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="toolTip-prop">
         <db:title>toolTip : <db:link xlink:href="qtcore/qstring.html">QString</db:link></db:title>
         <db:para>This property holds the widget's tooltip.</db:para>
         <db:para>Note that by default tooltips are only shown for widgets that are children of the active window. You can change this behavior by setting the attribute <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_AlwaysShowToolTips</db:link></db:code> on the <db:emphasis>window</db:emphasis>, not on the widget with the tooltip.</db:para>
         <db:para>If you want to control a tooltip's behavior, you can intercept the <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code> function and catch the <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::ToolTip</db:link></db:code> event (e.g., if you want to customize the area for which the tooltip should be shown).</db:para>
         <db:para>By default, this property contains an empty string.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QString </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">toolTip</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setToolTip</db:emphasis>(const QString &amp;)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtooltip.html">QToolTip</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#statusTip-prop">statusTip</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#whatsThis-prop">whatsThis</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="toolTipDuration-prop">
         <db:title>toolTipDuration : int</db:title>
         <db:para>This property holds the widget's tooltip duration.</db:para>
         <db:para>Specifies how long time the tooltip will be displayed, in milliseconds. If the value is -1 (default) the duration is calculated depending on the length of the tooltip.</db:para>
         <db:para>This property was introduced in Qt 5.2.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">toolTipDuration</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setToolTipDuration</db:emphasis>(int<db:emphasis> msec</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#toolTip-prop">toolTip</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="updatesEnabled-prop">
         <db:title>updatesEnabled : bool</db:title>
         <db:para>This property holds whether updates are enabled.</db:para>
         <db:para>An updates enabled widget receives paint events and has a system background; a disabled widget does not. This also implies that calling <db:code><db:link xlink:href="qwidget.html#update">update</db:link>()</db:code> and <db:code><db:link xlink:href="qwidget.html#repaint">repaint</db:link>()</db:code> has no effect if updates are disabled.</db:para>
         <db:para>By default, this property is <db:code>true</db:code>.</db:para>
         <db:para>setUpdatesEnabled() is normally used to disable updates for a short period of time, for instance to avoid screen flicker during large changes. In Qt, widgets normally do not generate screen flicker, but on X11 the server might erase regions on the screen when widgets get hidden before they can be replaced by other widgets. Disabling updates solves this.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>setUpdatesEnabled(false); bigVisualChanges(); setUpdatesEnabled(true);</db:programlisting>
         <db:para>Disabling a widget implicitly disables all its children. Enabling a widget enables all child widgets <db:emphasis>except</db:emphasis> top-level widgets or those that have been explicitly disabled. Re-enabling updates implicitly calls <db:code><db:link xlink:href="qwidget.html#update">update</db:link>()</db:code> on the widget.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">updatesEnabled</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setUpdatesEnabled</db:emphasis>(bool<db:emphasis> enable</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="visible-prop">
         <db:title>visible : bool</db:title>
         <db:para>This property holds whether the widget is visible.</db:para>
         <db:para>Calling setVisible(true) or <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code> sets the widget to visible status if all its parent widgets up to the window are visible. If an ancestor is not visible, the widget won't become visible until all its ancestors are shown. If its size or position has changed, Qt guarantees that a widget gets move and resize events just before it is shown. If the widget has not been resized yet, Qt will adjust the widget's size to a useful default using <db:code><db:link xlink:href="qwidget.html#adjustSize">adjustSize</db:link>()</db:code>.</db:para>
         <db:para>Calling setVisible(false) or <db:code><db:link xlink:href="qwidget.html#hide">hide</db:link>()</db:code> hides a widget explicitly. An explicitly hidden widget will never become visible, even if all its ancestors become visible, unless you show it.</db:para>
         <db:para>A widget receives show and hide events when its visibility status changes. Between a hide and a show event, there is no need to waste CPU cycles preparing or displaying information to the user. A video application, for example, might simply stop generating new frames.</db:para>
         <db:para>A widget that happens to be obscured by other windows on the screen is considered to be visible. The same applies to iconified windows and windows that exist on another virtual desktop (on platforms that support this concept). A widget receives spontaneous show and hide events when its mapping status is changed by the window system, e.g. a spontaneous hide event when the user minimizes the window, and a spontaneous show event when the window is restored again.</db:para>
         <db:para>You almost never have to reimplement the setVisible() function. If you need to change some settings before a widget is shown, use <db:code><db:link xlink:href="qwidget.html#showEvent">showEvent</db:link>()</db:code> instead. If you need to do some delayed initialization use the Polish event delivered to the <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code> function.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">isVisible</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> virtual void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setVisible</db:emphasis>(bool<db:emphasis> visible</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#hide">hide</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#isHidden">isHidden</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#isVisibleTo">isVisibleTo</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#minimized-prop">isMinimized</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showEvent">showEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#hideEvent">hideEvent</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="whatsThis-prop">
         <db:title>whatsThis : <db:link xlink:href="qtcore/qstring.html">QString</db:link></db:title>
         <db:para>This property holds the widget's What's This help text.</db:para>
         <db:para>By default, this property contains an empty string.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QString </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">whatsThis</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setWhatsThis</db:emphasis>(const QString &amp;)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwhatsthis.html">QWhatsThis</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#toolTip-prop">QWidget::toolTip</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#statusTip-prop">QWidget::statusTip</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="width-prop">
         <db:title>width : const int</db:title>
         <db:para>This property holds the width of the widget excluding any window frame.</db:para>
         <db:para>See the <db:link xlink:href="application-windows.html#window-geometry">Window Geometry</db:link> documentation for an overview of geometry issues with windows.</db:para>
         <db:note>
            <db:para>Do not use this function to find the width of a screen on a <db:link xlink:href="qdesktopwidget.html">multiple screen desktop</db:link>. Read <db:link xlink:href="qdesktopwidget.html#screen-geometry">this note</db:link> for details.</db:para>
         </db:note>
         <db:para>By default, this property contains a value that depends on the user's platform and screen geometry.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">width</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#geometry-prop">geometry</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#height-prop">height</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#size-prop">size</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="windowFilePath-prop">
         <db:title>windowFilePath : <db:link xlink:href="qtcore/qstring.html">QString</db:link></db:title>
         <db:para>This property holds the file path associated with a widget.</db:para>
         <db:para>This property only makes sense for windows. It associates a file path with a window. If you set the file path, but have not set the window title, Qt sets the window title to the file name of the specified path, obtained using <db:code><db:link xlink:href="qtcore/qfileinfo.html#fileName">QFileInfo::fileName</db:link>()</db:code>.</db:para>
         <db:para>If the window title is set at any point, then the window title takes precedence and will be shown instead of the file path string.</db:para>
         <db:para>Additionally, on Mac OS X, this has an added benefit that it sets the <db:link xlink:href="http://developer.apple.com/documentation/UserExperience/Conceptual/OSXHIGuidelines/XHIGWindows/chapter_17_section_3.html">proxy icon</db:link> for the window, assuming that the file path exists.</db:para>
         <db:para>If no file path is set, this property contains an empty string.</db:para>
         <db:para>By default, this property contains an empty string.</db:para>
         <db:para>This property was introduced in Qt 4.4.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QString </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">windowFilePath</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setWindowFilePath</db:emphasis>(const QString &amp;<db:emphasis> filePath</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#windowTitle-prop">windowTitle</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#windowIcon-prop">windowIcon</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="windowFlags-prop">
         <db:title>windowFlags : <db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::WindowFlags</db:link></db:title>
         <db:para>Window flags are a combination of a type (e.g. <db:code><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::Dialog</db:link></db:code>) and zero or more hints to the window system (e.g. <db:code><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::FramelessWindowHint</db:link></db:code>).</db:para>
         <db:para>If the widget had type <db:code><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::Widget</db:link></db:code> or <db:code><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::SubWindow</db:link></db:code> and becomes a window (<db:code><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::Window</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::Dialog</db:link></db:code>, etc.), it is put at position (0, 0) on the desktop. If the widget is a window and becomes a <db:code><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::Widget</db:link></db:code> or <db:code><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::SubWindow</db:link></db:code>, it is put at position (0, 0) relative to its parent widget.</db:para>
         <db:note>
            <db:para>This function calls <db:code><db:link xlink:href="qwidget.html#setParent">setParent</db:link>()</db:code> when changing the flags for a window, causing the widget to be hidden. You must call <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code> to make the widget visible again..</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> Qt::WindowFlags </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">windowFlags</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setWindowFlags</db:emphasis>(Qt::WindowFlags<db:emphasis> type</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#windowType">windowType</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtwidgets-widgets-windowflags-example.html">Window Flags Example</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="windowIcon-prop">
         <db:title>windowIcon : <db:link xlink:href="qtgui/qicon.html">QIcon</db:link></db:title>
         <db:para>This property holds the widget's icon.</db:para>
         <db:para>This property only makes sense for windows. If no icon has been set, windowIcon() returns the application icon (<db:code><db:link xlink:href="qapplication.html#windowIcon-prop">QApplication::windowIcon</db:link>()</db:code>).</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QIcon </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">windowIcon</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setWindowIcon</db:emphasis>(const QIcon &amp;<db:emphasis> icon</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">windowIconChanged</db:emphasis>(const QIcon &amp;<db:emphasis> icon</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#windowIconText-prop">windowIconText</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#windowTitle-prop">windowTitle</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="windowIconText-prop">
         <db:title>windowIconText : <db:link xlink:href="qtcore/qstring.html">QString</db:link></db:title>
         <db:para>This property holds the widget's icon text.</db:para>
         <db:para>This property only makes sense for windows. If no icon text has been set, this functions returns an empty string.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QString </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">windowIconText</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setWindowIconText</db:emphasis>(const QString &amp;)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">windowIconTextChanged</db:emphasis>(const QString &amp;<db:emphasis> iconText</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#windowIcon-prop">windowIcon</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#windowTitle-prop">windowTitle</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="windowModality-prop">
         <db:title>windowModality : <db:link xlink:href="qtcore/qt.html#WindowModality-enum">Qt::WindowModality</db:link></db:title>
         <db:para>This property holds which windows are blocked by the modal widget.</db:para>
         <db:para>This property only makes sense for windows. A modal widget prevents widgets in other windows from getting input. The value of this property controls which windows are blocked when the widget is visible. Changing this property while the window is visible has no effect; you must <db:code><db:link xlink:href="qwidget.html#hide">hide</db:link>()</db:code> the widget first, then <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code> it again.</db:para>
         <db:para>By default, this property is <db:code><db:link xlink:href="qtcore/qt.html#WindowModality-enum">Qt::NonModal</db:link></db:code>.</db:para>
         <db:para>This property was introduced in Qt 4.1.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> Qt::WindowModality </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">windowModality</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setWindowModality</db:emphasis>(Qt::WindowModality<db:emphasis> windowModality</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#isWindow">isWindow</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#modal-prop">QWidget::modal</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qdialog.html">QDialog</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="windowModified-prop">
         <db:title>windowModified : bool</db:title>
         <db:para>This property holds whether the document shown in the window has unsaved changes.</db:para>
         <db:para>A modified window is a window whose content has changed but has not been saved to disk. This flag will have different effects varied by the platform. On Mac OS X the close button will have a modified look; on other platforms, the window title will have an '*' (asterisk).</db:para>
         <db:para>The window title must contain a "[*]" placeholder, which indicates where the '*' should appear. Normally, it should appear right after the file name (e.g., "document1.txt[*] - Text Editor"). If the window isn't modified, the placeholder is simply removed.</db:para>
         <db:para>Note that if a widget is set as modified, all its ancestors will also be set as modified. However, if you call <db:code>setWindowModified(false)</db:code> on a widget, this will not propagate to its parent because other children of the parent might have been modified.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> bool </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">isWindowModified</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setWindowModified</db:emphasis>(bool)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#windowTitle-prop">windowTitle</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtwidgets-mainwindows-application-example.html">Application Example</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtwidgets-mainwindows-sdi-example.html">SDI Example</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtwidgets-mainwindows-mdi-example.html">MDI Example</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="windowOpacity-prop">
         <db:title>windowOpacity : double</db:title>
         <db:para>This property holds the level of opacity for the window.</db:para>
         <db:para>The valid range of opacity is from 1.0 (completely opaque) to 0.0 (completely transparent).</db:para>
         <db:para>By default the value of this property is 1.0.</db:para>
         <db:para>This feature is available on Embedded Linux, Mac OS X, Windows, and X11 platforms that support the Composite extension.</db:para>
         <db:para>This feature is not available on Windows CE.</db:para>
         <db:para>Note that under X11 you need to have a composite manager running, and the X11 specific _NET_WM_WINDOW_OPACITY atom needs to be supported by the window manager you are using.</db:para>
         <db:warning>
            <db:para> Changing this property from opaque to transparent might issue a paint event that needs to be processed before the window is displayed correctly. This affects mainly the use of QPixmap::grabWindow(). Also note that semi-transparent windows update and resize significantly slower than opaque windows.</db:para>
         </db:warning>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> qreal </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">windowOpacity</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setWindowOpacity</db:emphasis>(qreal<db:emphasis> level</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setMask">setMask</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="windowTitle-prop">
         <db:title>windowTitle : <db:link xlink:href="qtcore/qstring.html">QString</db:link></db:title>
         <db:para>This property holds the window title (caption).</db:para>
         <db:para>This property only makes sense for top-level widgets, such as windows and dialogs. If no caption has been set, the title is based of the <db:link xlink:href="qwidget.html#windowFilePath-prop">windowFilePath</db:link>. If neither of these is set, then the title is an empty string.</db:para>
         <db:para>If you use the <db:link xlink:href="qwidget.html#windowModified-prop">windowModified</db:link> mechanism, the window title must contain a "[*]" placeholder, which indicates where the '*' should appear. Normally, it should appear right after the file name (e.g., "document1.txt[*] - Text Editor"). If the <db:link xlink:href="qwidget.html#windowModified-prop">windowModified</db:link> property is <db:code>false</db:code> (the default), the placeholder is simply removed.</db:para>
         <db:para>On some desktop platforms (including Windows and Unix), the application name (from <db:code><db:link xlink:href="qtgui/qguiapplication.html#applicationDisplayName-prop">QGuiApplication::applicationDisplayName</db:link></db:code>) is added at the end of the window title, if set. This is done by the QPA plugin, so it is shown to the user, but isn't part of the windowTitle string.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> QString </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">windowTitle</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setWindowTitle</db:emphasis>(const QString &amp;)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">windowTitleChanged</db:emphasis>(const QString &amp;<db:emphasis> title</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#windowIcon-prop">windowIcon</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#windowIconText-prop">windowIconText</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#windowModified-prop">windowModified</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#windowFilePath-prop">windowFilePath</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="x-prop">
         <db:title>x : const int</db:title>
         <db:para>This property holds the x coordinate of the widget relative to its parent including any window frame.</db:para>
         <db:para>See the <db:link xlink:href="application-windows.html#window-geometry">Window Geometry</db:link> documentation for an overview of geometry issues with windows.</db:para>
         <db:para>By default, this property has a value of 0.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">x</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#frameGeometry-prop">frameGeometry</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#y-prop">y</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#pos-prop">pos</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="y-prop">
         <db:title>y : const int</db:title>
         <db:para>This property holds the y coordinate of the widget relative to its parent and including any window frame.</db:para>
         <db:para>See the <db:link xlink:href="application-windows.html#window-geometry">Window Geometry</db:link> documentation for an overview of geometry issues with windows.</db:para>
         <db:para>By default, this property has a value of 0.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para> int </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">y</db:emphasis>() const</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#frameGeometry-prop">frameGeometry</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#x-prop">x</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#pos-prop">pos</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
   </db:section>
   <db:section xml:id="func">
      <db:title>Member Function Documentation</db:title>
      <db:section xml:id="QWidget">
         <db:title>QWidget::​QWidget(<db:link xlink:href="qwidget.html#QWidget">QWidget</db:link><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::WindowFlags</db:link></db:title>
         <db:para>Constructs a widget which is a child of <db:emphasis>parent</db:emphasis>, with widget flags set to <db:emphasis>f</db:emphasis>.</db:para>
         <db:para>If <db:emphasis>parent</db:emphasis> is 0, the new widget becomes a window. If <db:emphasis>parent</db:emphasis> is another widget, this widget becomes a child window inside <db:emphasis>parent</db:emphasis>. The new widget is deleted when its <db:emphasis>parent</db:emphasis> is deleted.</db:para>
         <db:para>The widget flags argument, <db:emphasis>f</db:emphasis>, is normally 0, but it can be set to customize the frame of a window (i.e. <db:emphasis>parent</db:emphasis> must be 0). To customize the frame, use a value composed from the bitwise OR of any of the <db:link xlink:href="qtcore/qt.html#WindowType-enum">window flags</db:link>.</db:para>
         <db:para>If you add a child widget to an already visible widget you must explicitly show the child to make it visible.</db:para>
         <db:para>Note that the X11 version of Qt may not be able to deliver all combinations of style flags on all systems. This is because on X11, Qt can only ask the window manager, and the window manager can override the application's settings. On Windows, Qt can set whatever flags you want.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#windowFlags-prop">windowFlags</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="dtor.QWidget">
         <db:title>QWidget::​~QWidget()</db:title>
         <db:para>Destroys the widget.</db:para>
         <db:para>All this widget's children are deleted first. The application exits if this widget is the main widget.</db:para>
      </db:section>
      <db:section xml:id="actionEvent">
         <db:title>[virtual protected] void QWidget::​actionEvent(<db:link xlink:href="qtgui/qactionevent.html">QActionEvent</db:link></db:title>
         <db:para>This event handler is called with the given <db:emphasis>event</db:emphasis> whenever the widget's actions are changed.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#addAction">addAction</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#insertAction">insertAction</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#removeAction">removeAction</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#actions">actions</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qactionevent.html">QActionEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="actions">
         <db:title><db:link xlink:href="qtcore/qlist.html">QList</db:link><db:link xlink:href="qaction.html">QAction</db:link></db:title>
         <db:para>Returns the (possibly empty) list of this widget's actions.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#contextMenuPolicy-prop">contextMenuPolicy</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#insertAction">insertAction</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#removeAction">removeAction</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="activateWindow">
         <db:title>void QWidget::​activateWindow()</db:title>
         <db:para>Sets the top-level widget containing this widget to be the active window.</db:para>
         <db:para>An active window is a visible top-level window that has the keyboard input focus.</db:para>
         <db:para>This function performs the same operation as clicking the mouse on the title bar of a top-level window. On X11, the result depends on the Window Manager. If you want to ensure that the window is stacked on top as well you should also call <db:code><db:link xlink:href="qwidget.html#raise">raise</db:link>()</db:code>. Note that the window must be visible, otherwise activateWindow() has no effect.</db:para>
         <db:para>On Windows, if you are calling this when the application is not currently the active one then it will not make it the active window. It will change the color of the taskbar entry to indicate that the window has changed in some way. This is because Microsoft does not allow an application to interrupt what the user is currently doing in another application.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#isActiveWindow-prop">isActiveWindow</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#window">window</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="addAction">
         <db:title>void QWidget::​addAction(<db:link xlink:href="qaction.html">QAction</db:link></db:title>
         <db:para>Appends the action <db:emphasis>action</db:emphasis> to this widget's list of actions.</db:para>
         <db:para>All QWidgets have a list of <db:code><db:link xlink:href="qaction.html">QAction</db:link></db:code>s, however they can be represented graphically in many different ways. The default use of the <db:code><db:link xlink:href="qaction.html">QAction</db:link></db:code> list (as returned by <db:code><db:link xlink:href="qwidget.html#actions">actions</db:link>()</db:code>) is to create a context <db:code><db:link xlink:href="qmenu.html">QMenu</db:link></db:code>.</db:para>
         <db:para>A <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> should only have one of each action and adding an action it already has will not cause the same action to be in the widget twice.</db:para>
         <db:para>The ownership of <db:emphasis>action</db:emphasis> is not transferred to this <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#removeAction">removeAction</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#insertAction">insertAction</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#actions">actions</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qmenu.html">QMenu</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="addActions">
         <db:title>void QWidget::​addActions(<db:link xlink:href="qtcore/qlist.html">QList</db:link><db:link xlink:href="qaction.html">QAction</db:link></db:title>
         <db:para>Appends the actions <db:emphasis>actions</db:emphasis> to this widget's list of actions.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#removeAction">removeAction</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qmenu.html">QMenu</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#addAction">addAction</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="adjustSize">
         <db:title>void QWidget::​adjustSize()</db:title>
         <db:para>Adjusts the size of the widget to fit its contents.</db:para>
         <db:para>This function uses <db:code><db:link xlink:href="qwidget.html#sizeHint-prop">sizeHint</db:link>()</db:code> if it is valid, i.e., the size hint's width and height are &gt;= 0. Otherwise, it sets the size to the children rectangle that covers all child widgets (the union of all child widget rectangles).</db:para>
         <db:para>For windows, the screen size is also taken into account. If the <db:code><db:link xlink:href="qwidget.html#sizeHint-prop">sizeHint</db:link>()</db:code> is less than (200, 100) and the size policy is <db:link xlink:href="qsizepolicy.html#Policy-enum">expanding</db:link>, the window will be at least (200, 100). The maximum size of a window is 2/3 of the screen's width and height.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#sizeHint-prop">sizeHint</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#childrenRect-prop">childrenRect</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="backgroundRole">
         <db:title><db:link xlink:href="qtgui/qpalette.html#ColorRole-enum">QPalette::ColorRole</db:link></db:title>
         <db:para>Returns the background role of the widget.</db:para>
         <db:para>The background role defines the brush from the widget's <db:link xlink:href="qwidget.html#palette-prop">palette</db:link> that is used to render the background.</db:para>
         <db:para>If no explicit background role is set, the widget inherts its parent widget's background role.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setBackgroundRole">setBackgroundRole</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#foregroundRole">foregroundRole</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="backingStore">
         <db:title><db:link xlink:href="qtgui/qbackingstore.html">QBackingStore</db:link></db:title>
         <db:para>Returns the <db:code><db:link xlink:href="qtgui/qbackingstore.html">QBackingStore</db:link></db:code> this widget will be drawn into.</db:para>
         <db:para>This function was introduced in Qt 5.0.</db:para>
      </db:section>
      <db:section xml:id="changeEvent">
         <db:title>[virtual protected] void QWidget::​changeEvent(<db:link xlink:href="qtcore/qevent.html">QEvent</db:link></db:title>
         <db:para>This event handler can be reimplemented to handle state changes.</db:para>
         <db:para>The state being changed in this event can be retrieved through the <db:emphasis>event</db:emphasis> supplied.</db:para>
         <db:para>Change events include: <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::ToolBarChange</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::ActivationChange</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::EnabledChange</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::FontChange</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::StyleChange</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::PaletteChange</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::WindowTitleChange</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::IconTextChange</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::ModifiedChange</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::MouseTrackingChange</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::ParentChange</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::WindowStateChange</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::LanguageChange</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::LocaleChange</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::LayoutDirectionChange</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::ReadOnlyChange</db:link></db:code>.</db:para>
      </db:section>
      <db:section xml:id="childAt">
         <db:title><db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Returns the visible child widget at the position (<db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis>) in the widget's coordinate system. If there is no visible child widget at the specified position, the function returns 0.</db:para>
      </db:section>
      <db:section xml:id="childAt-2">
         <db:title><db:link xlink:href="qwidget.html#QWidget">QWidget</db:link><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link></db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Returns the visible child widget at point <db:emphasis>p</db:emphasis> in the widget's own coordinate system.</db:para>
      </db:section>
      <db:section xml:id="clearFocus">
         <db:title>void QWidget::​clearFocus()</db:title>
         <db:para>Takes keyboard input focus from the widget.</db:para>
         <db:para>If the widget has active focus, a <db:link xlink:href="qwidget.html#focusOutEvent">focus out event</db:link> is sent to this widget to tell it that it has lost the focus.</db:para>
         <db:para>This widget must enable focus setting in order to get the keyboard input focus, i.e. it must call <db:code><db:link xlink:href="qwidget.html#focusPolicy-prop">setFocusPolicy</db:link>()</db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focus-prop">hasFocus</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setFocus">setFocus</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusInEvent">focusInEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusOutEvent">focusOutEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusPolicy-prop">setFocusPolicy</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qapplication.html#focusWidget">QApplication::focusWidget</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="clearMask">
         <db:title>void QWidget::​clearMask()</db:title>
         <db:para>Removes any mask set by <db:code><db:link xlink:href="qwidget.html#setMask">setMask</db:link>()</db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setMask">setMask</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="close">
         <db:title>[slot] bool QWidget::​close()</db:title>
         <db:para>Closes this widget. Returns <db:code>true</db:code> if the widget was closed; otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>First it sends the widget a <db:code><db:link xlink:href="qtgui/qcloseevent.html">QCloseEvent</db:link></db:code>. The widget is <db:link xlink:href="qwidget.html#hide">hidden</db:link> if it accepts the close event. If it ignores the event, nothing happens. The default implementation of <db:code><db:link xlink:href="qwidget.html#closeEvent">QWidget::closeEvent</db:link>()</db:code> accepts the close event.</db:para>
         <db:para>If the widget has the <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_DeleteOnClose</db:link></db:code> flag, the widget is also deleted. A close events is delivered to the widget no matter if the widget is visible or not.</db:para>
         <db:para>The <db:code><db:link xlink:href="qtgui/qguiapplication.html#lastWindowClosed">QApplication::lastWindowClosed</db:link>()</db:code> signal is emitted when the last visible primary window (i.e. window with no parent) with the <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_QuitOnClose</db:link></db:code> attribute set is closed. By default this attribute is set for all widgets except transient windows such as splash screens, tool windows, and popup menus.</db:para>
      </db:section>
      <db:section xml:id="closeEvent">
         <db:title>[virtual protected] void QWidget::​closeEvent(<db:link xlink:href="qtgui/qcloseevent.html">QCloseEvent</db:link></db:title>
         <db:para>This event handler is called with the given <db:emphasis>event</db:emphasis> when Qt receives a window close request for a top-level widget from the window system.</db:para>
         <db:para>By default, the event is accepted and the widget is closed. You can reimplement this function to change the way the widget responds to window close requests. For example, you can prevent the window from closing by calling <db:link xlink:href="qtcore/qevent.html#ignore">ignore()</db:link> on all events.</db:para>
         <db:para>Main window applications typically use reimplementations of this function to check whether the user's work has been saved and ask for permission before closing. For example, the <db:link xlink:href="qtwidgets-mainwindows-application-example.html">Application Example</db:link> uses a helper function to determine whether or not to close the window:</db:para>
         <db:programlisting>void MainWindow::closeEvent(QCloseEvent*event) { if (maybeSave()) { writeSettings(); event-&gt;accept(); } else { event-&gt;ignore(); } }</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#hide">hide</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#close">close</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qcloseevent.html">QCloseEvent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtwidgets-mainwindows-application-example.html">Application Example</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="contentsMargins">
         <db:title><db:link xlink:href="qtcore/qmargins.html">QMargins</db:link></db:title>
         <db:para>The contentsMargins function returns the widget's contents margins.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#getContentsMargins">getContentsMargins</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setContentsMargins">setContentsMargins</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#contentsRect">contentsRect</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="contentsRect">
         <db:title><db:link xlink:href="qtcore/qrect.html">QRect</db:link></db:title>
         <db:para>Returns the area inside the widget's margins.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setContentsMargins">setContentsMargins</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#getContentsMargins">getContentsMargins</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="contextMenuEvent">
         <db:title>[virtual protected] void QWidget::​contextMenuEvent(<db:link xlink:href="qtgui/qcontextmenuevent.html">QContextMenuEvent</db:link></db:title>
         <db:para>This event handler, for event <db:emphasis>event</db:emphasis>, can be reimplemented in a subclass to receive widget context menu events.</db:para>
         <db:para>The handler is called when the widget's <db:link xlink:href="qwidget.html#contextMenuPolicy-prop">contextMenuPolicy</db:link> is <db:code><db:link xlink:href="qtcore/qt.html#ContextMenuPolicy-enum">Qt::DefaultContextMenu</db:link></db:code>.</db:para>
         <db:para>The default implementation ignores the context event. See the <db:code><db:link xlink:href="qtgui/qcontextmenuevent.html">QContextMenuEvent</db:link></db:code> documentation for more details.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qcontextmenuevent.html">QContextMenuEvent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#customContextMenuRequested">customContextMenuRequested</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="create">
         <db:title>[protected] void QWidget::​create(WId window = 0, bool initializeWindow = true, bool destroyOldWindow = true)</db:title>
         <db:para>Creates a new widget window if <db:emphasis>window</db:emphasis> is 0, otherwise sets the widget's window to <db:emphasis>window</db:emphasis>.</db:para>
         <db:para>Initializes the window (sets the geometry etc.) if <db:emphasis>initializeWindow</db:emphasis> is true. If <db:emphasis>initializeWindow</db:emphasis> is false, no initialization is performed. This parameter only makes sense if <db:emphasis>window</db:emphasis> is a valid window.</db:para>
         <db:para>Destroys the old window if <db:emphasis>destroyOldWindow</db:emphasis> is true. If <db:emphasis>destroyOldWindow</db:emphasis> is false, you are responsible for destroying the window yourself (using platform native code).</db:para>
         <db:para>The <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> constructor calls create(0,true,true) to create a window for this widget.</db:para>
      </db:section>
      <db:section xml:id="createWindowContainer">
         <db:title>[static] <db:link xlink:href="qwidget.html#QWidget">QWidget</db:link><db:link xlink:href="qtgui/qwindow.html">QWindow</db:link><db:link xlink:href="qwidget.html#QWidget">QWidget</db:link><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::WindowFlags</db:link></db:title>
         <db:para>Creates a <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> that makes it possible to embed <db:emphasis>window</db:emphasis> into a <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code>-based application.</db:para>
         <db:para>The window container is created as a child of <db:emphasis>parent</db:emphasis> and with window flags <db:emphasis>flags</db:emphasis>.</db:para>
         <db:para>Once the window has been embedded into the container, the container will control the window's geometry and visibility. Explicit calls to <db:code><db:link xlink:href="qtgui/qwindow.html#setGeometry">QWindow::setGeometry</db:link>()</db:code>, <db:code><db:link xlink:href="qtgui/qwindow.html#show">QWindow::show</db:link>()</db:code> or <db:code><db:link xlink:href="qtgui/qwindow.html#hide">QWindow::hide</db:link>()</db:code> on an embedded window is not recommended.</db:para>
         <db:para>The container takes over ownership of <db:emphasis>window</db:emphasis>. The window can be removed from the window container with a call to <db:code><db:link xlink:href="qtgui/qwindow.html#setParent">QWindow::setParent</db:link>()</db:code>.</db:para>
         <db:para>The window container is attached as a native child window to the toplevel window it is a child of. When a window container is used as a child of a <db:code><db:link xlink:href="qabstractscrollarea.html">QAbstractScrollArea</db:link></db:code> or <db:code><db:link xlink:href="qmdiarea.html">QMdiArea</db:link></db:code>, it will create a <db:link xlink:href="qwidget.html#native-widgets-vs-alien-widgets">native window</db:link> for every widget in its parent chain to allow for proper stacking and clipping in this use case. Applications with many native child windows may suffer from performance issues.</db:para>
         <db:para>The window container has a number of known limitations:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>Stacking order; The embedded window will stack on top of the widget hierarchy as an opaque box. The stacking order of multiple overlapping window container instances is undefined.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Rendering Integration; The window container does not interoperate with <db:code><db:link xlink:href="qgraphicsproxywidget.html">QGraphicsProxyWidget</db:link></db:code>, <db:code><db:link xlink:href="qwidget.html#render">QWidget::render</db:link>()</db:code> or similar functionality.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Focus Handling; It is possible to let the window container instance have any focus policy and it will delegate focus to the window via a call to <db:code><db:link xlink:href="qtgui/qwindow.html#requestActivate">QWindow::requestActivate</db:link>()</db:code>. However, returning to the normal focus chain from the <db:code><db:link xlink:href="qtgui/qwindow.html">QWindow</db:link></db:code> instance will be up to the <db:code><db:link xlink:href="qtgui/qwindow.html">QWindow</db:link></db:code> instance implementation itself. For instance, when entering a Qt Quick based window with tab focus, it is quite likely that further tab presses will only cycle inside the QML application. Also, whether <db:code><db:link xlink:href="qtgui/qwindow.html#requestActivate">QWindow::requestActivate</db:link>()</db:code> actually gives the window focus, is platform dependent.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Using many window container instances in a <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code>-based application can greatly hurt the overall performance of the application.</db:para>
            </db:listitem>
         </db:itemizedlist>
      </db:section>
      <db:section xml:id="customContextMenuRequested">
         <db:title>[signal] void QWidget::​customContextMenuRequested(const <db:link xlink:href="qtcore/qpoint.html">QPoint</db:link></db:title>
         <db:para>This signal is emitted when the widget's <db:link xlink:href="qwidget.html#contextMenuPolicy-prop">contextMenuPolicy</db:link> is <db:code><db:link xlink:href="qtcore/qt.html#ContextMenuPolicy-enum">Qt::CustomContextMenu</db:link></db:code>, and the user has requested a context menu on the widget. The position <db:emphasis>pos</db:emphasis> is the position of the context menu event that the widget receives. Normally this is in widget coordinates. The exception to this rule is <db:code><db:link xlink:href="qabstractscrollarea.html">QAbstractScrollArea</db:link></db:code> and its subclasses that map the context menu event to coordinates of the <db:link xlink:href="qabstractscrollarea.html#viewport">viewport()</db:link>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapToGlobal">mapToGlobal</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qmenu.html">QMenu</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#contextMenuPolicy-prop">contextMenuPolicy</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="destroy">
         <db:title>[protected] void QWidget::​destroy(bool destroyWindow = true, bool destroySubWindows = true)</db:title>
         <db:para>Frees up window system resources. Destroys the widget window if <db:emphasis>destroyWindow</db:emphasis> is true.</db:para>
         <db:para>destroy() calls itself recursively for all the child widgets, passing <db:emphasis>destroySubWindows</db:emphasis> for the <db:emphasis>destroyWindow</db:emphasis> parameter. To have more control over destruction of subwidgets, destroy subwidgets selectively first.</db:para>
         <db:para>This function is usually called from the <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> destructor.</db:para>
      </db:section>
      <db:section xml:id="dragEnterEvent">
         <db:title>[virtual protected] void QWidget::​dragEnterEvent(<db:link xlink:href="qtgui/qdragenterevent.html">QDragEnterEvent</db:link></db:title>
         <db:para>This event handler is called when a drag is in progress and the mouse enters this widget. The event is passed in the <db:emphasis>event</db:emphasis> parameter.</db:para>
         <db:para>If the event is ignored, the widget won't receive any <db:link xlink:href="qwidget.html#dragMoveEvent">drag move events</db:link>.</db:para>
         <db:para>See the <db:link xlink:href="qtgui/dnd.html">Drag-and-drop documentation</db:link> for an overview of how to provide drag-and-drop in your application.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qdrag.html">QDrag</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qdragenterevent.html">QDragEnterEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="dragLeaveEvent">
         <db:title>[virtual protected] void QWidget::​dragLeaveEvent(<db:link xlink:href="qtgui/qdragleaveevent.html">QDragLeaveEvent</db:link></db:title>
         <db:para>This event handler is called when a drag is in progress and the mouse leaves this widget. The event is passed in the <db:emphasis>event</db:emphasis> parameter.</db:para>
         <db:para>See the <db:link xlink:href="qtgui/dnd.html">Drag-and-drop documentation</db:link> for an overview of how to provide drag-and-drop in your application.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qdrag.html">QDrag</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qdragleaveevent.html">QDragLeaveEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="dragMoveEvent">
         <db:title>[virtual protected] void QWidget::​dragMoveEvent(<db:link xlink:href="qtgui/qdragmoveevent.html">QDragMoveEvent</db:link></db:title>
         <db:para>This event handler is called if a drag is in progress, and when any of the following conditions occur: the cursor enters this widget, the cursor moves within this widget, or a modifier key is pressed on the keyboard while this widget has the focus. The event is passed in the <db:emphasis>event</db:emphasis> parameter.</db:para>
         <db:para>See the <db:link xlink:href="qtgui/dnd.html">Drag-and-drop documentation</db:link> for an overview of how to provide drag-and-drop in your application.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qdrag.html">QDrag</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qdragmoveevent.html">QDragMoveEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="dropEvent">
         <db:title>[virtual protected] void QWidget::​dropEvent(<db:link xlink:href="qtgui/qdropevent.html">QDropEvent</db:link></db:title>
         <db:para>This event handler is called when the drag is dropped on this widget. The event is passed in the <db:emphasis>event</db:emphasis> parameter.</db:para>
         <db:para>See the <db:link xlink:href="qtgui/dnd.html">Drag-and-drop documentation</db:link> for an overview of how to provide drag-and-drop in your application.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qdrag.html">QDrag</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qdropevent.html">QDropEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="effectiveWinId">
         <db:title>WId QWidget::​effectiveWinId() const</db:title>
         <db:para>Returns the effective window system identifier of the widget, i.e. the native parent's window system identifier.</db:para>
         <db:para>If the widget is native, this function returns the native widget ID. Otherwise, the window ID of the first native parent widget, i.e., the top-level widget that contains this widget, is returned.</db:para>
         <db:note>
            <db:para>We recommend that you do not store this value as it is likely to change at run-time.</db:para>
         </db:note>
         <db:para>This function was introduced in Qt 4.4.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#nativeParentWidget">nativeParentWidget</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="ensurePolished">
         <db:title>void QWidget::​ensurePolished() const</db:title>
         <db:para>Ensures that the widget has been polished by <db:code><db:link xlink:href="qstyle.html">QStyle</db:link></db:code> (i.e., has a proper font and palette).</db:para>
         <db:para>
            <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> calls this function after it has been fully constructed but before it is shown the very first time. You can call this function if you want to ensure that the widget is polished before doing an operation, e.g., the correct font size might be needed in the widget's <db:code><db:link xlink:href="qwidget.html#sizeHint-prop">sizeHint</db:link>()</db:code> reimplementation. Note that this function <db:emphasis>is</db:emphasis> called from the default implementation of <db:code><db:link xlink:href="qwidget.html#sizeHint-prop">sizeHint</db:link>()</db:code>.</db:para>
         <db:para>Polishing is useful for final initialization that must happen after all constructors (from base classes as well as from subclasses) have been called.</db:para>
         <db:para>If you need to change some settings when a widget is polished, reimplement <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code> and handle the <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::Polish</db:link></db:code> event type.</db:para>
         <db:note>
            <db:para> The function is declared const so that it can be called from other const functions (e.g., <db:code><db:link xlink:href="qwidget.html#sizeHint-prop">sizeHint</db:link>()</db:code>).</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="enterEvent">
         <db:title>[virtual protected] void QWidget::​enterEvent(<db:link xlink:href="qtcore/qevent.html">QEvent</db:link></db:title>
         <db:para>This event handler can be reimplemented in a subclass to receive widget enter events which are passed in the <db:emphasis>event</db:emphasis> parameter.</db:para>
         <db:para>An event is sent to the widget when the mouse cursor enters the widget.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#leaveEvent">leaveEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseMoveEvent">mouseMoveEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="event">
         <db:title>[virtual protected] bool QWidget::​event(<db:link xlink:href="qtcore/qevent.html">QEvent</db:link></db:title>
         <db:para>Reimplemented from <db:code><db:link xlink:href="qtcore/qobject.html#event">QObject::event</db:link>()</db:code>.</db:para>
         <db:para>This is the main event handler; it handles event <db:emphasis>event</db:emphasis>. You can reimplement this function in a subclass, but we recommend using one of the specialized event handlers instead.</db:para>
         <db:para>Key press and release events are treated differently from other events. event() checks for Tab and Shift+Tab and tries to move the focus appropriately. If there is no widget to move the focus to (or the key press is not Tab or Shift+Tab), event() calls <db:code><db:link xlink:href="qwidget.html#keyPressEvent">keyPressEvent</db:link>()</db:code>.</db:para>
         <db:para>Mouse and tablet event handling is also slightly special: only when the widget is <db:link xlink:href="qwidget.html#enabled-prop">enabled</db:link>, event() will call the specialized handlers such as <db:code><db:link xlink:href="qwidget.html#mousePressEvent">mousePressEvent</db:link>()</db:code>; otherwise it will discard the event.</db:para>
         <db:para>This function returns <db:code>true</db:code> if the event was recognized, otherwise it returns <db:code>false</db:code>. If the recognized event was accepted (see <db:code><db:link xlink:href="qtcore/qevent.html#accepted-prop">QEvent::accepted</db:link></db:code>), any further processing such as event propagation to the parent widget stops.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#closeEvent">closeEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusInEvent">focusInEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusOutEvent">focusOutEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#enterEvent">enterEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#keyPressEvent">keyPressEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#keyReleaseEvent">keyReleaseEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#leaveEvent">leaveEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseDoubleClickEvent">mouseDoubleClickEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseMoveEvent">mouseMoveEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mousePressEvent">mousePressEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseReleaseEvent">mouseReleaseEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#moveEvent">moveEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#resizeEvent">resizeEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtcore/qobject.html#event">QObject::event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtcore/qobject.html#timerEvent">QObject::timerEvent</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="find">
         <db:title>[static] <db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Returns a pointer to the widget with window identifer/handle <db:emphasis>id</db:emphasis>.</db:para>
         <db:para>The window identifier type depends on the underlying window system, see <db:code>qwindowdefs.h</db:code> for the actual definition. If there is no widget with this identifier, 0 is returned.</db:para>
      </db:section>
      <db:section xml:id="focusInEvent">
         <db:title>[virtual protected] void QWidget::​focusInEvent(<db:link xlink:href="qtgui/qfocusevent.html">QFocusEvent</db:link></db:title>
         <db:para>This event handler can be reimplemented in a subclass to receive keyboard focus events (focus received) for the widget. The event is passed in the <db:emphasis>event</db:emphasis> parameter</db:para>
         <db:para>A widget normally must <db:code><db:link xlink:href="qwidget.html#focusPolicy-prop">setFocusPolicy</db:link>()</db:code> to something other than <db:code><db:link xlink:href="qtcore/qt.html#FocusPolicy-enum">Qt::NoFocus</db:link></db:code> in order to receive focus events. (Note that the application programmer can call <db:code><db:link xlink:href="qwidget.html#setFocus">setFocus</db:link>()</db:code> on any widget, even those that do not normally accept focus.)</db:para>
         <db:para>The default implementation updates the widget (except for windows that do not specify a <db:code><db:link xlink:href="qwidget.html#focusPolicy-prop">focusPolicy</db:link>()</db:code>).</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusOutEvent">focusOutEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusPolicy-prop">setFocusPolicy</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#keyPressEvent">keyPressEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#keyReleaseEvent">keyReleaseEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qfocusevent.html">QFocusEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="focusNextChild">
         <db:title>[protected] bool QWidget::​focusNextChild()</db:title>
         <db:para>Finds a new widget to give the keyboard focus to, as appropriate for <db:emphasis role="bold">Tab</db:emphasis>, and returns <db:code>true</db:code> if it can find a new widget, or false if it can't.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusPreviousChild">focusPreviousChild</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="focusNextPrevChild">
         <db:title>[virtual protected] bool QWidget::​focusNextPrevChild(bool next)</db:title>
         <db:para>Finds a new widget to give the keyboard focus to, as appropriate for Tab and Shift+Tab, and returns <db:code>true</db:code> if it can find a new widget, or false if it can't.</db:para>
         <db:para>If <db:emphasis>next</db:emphasis> is true, this function searches forward, if <db:emphasis>next</db:emphasis> is false, it searches backward.</db:para>
         <db:para>Sometimes, you will want to reimplement this function. For example, a web browser might reimplement it to move its "current active link" forward or backward, and call focusNextPrevChild() only when it reaches the last or first link on the "page".</db:para>
         <db:para>Child widgets call focusNextPrevChild() on their parent widgets, but only the window that contains the child widgets decides where to redirect focus. By reimplementing this function for an object, you thus gain control of focus traversal for all child widgets.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusNextChild">focusNextChild</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusPreviousChild">focusPreviousChild</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="focusOutEvent">
         <db:title>[virtual protected] void QWidget::​focusOutEvent(<db:link xlink:href="qtgui/qfocusevent.html">QFocusEvent</db:link></db:title>
         <db:para>This event handler can be reimplemented in a subclass to receive keyboard focus events (focus lost) for the widget. The events is passed in the <db:emphasis>event</db:emphasis> parameter.</db:para>
         <db:para>A widget normally must <db:code><db:link xlink:href="qwidget.html#focusPolicy-prop">setFocusPolicy</db:link>()</db:code> to something other than <db:code><db:link xlink:href="qtcore/qt.html#FocusPolicy-enum">Qt::NoFocus</db:link></db:code> in order to receive focus events. (Note that the application programmer can call <db:code><db:link xlink:href="qwidget.html#setFocus">setFocus</db:link>()</db:code> on any widget, even those that do not normally accept focus.)</db:para>
         <db:para>The default implementation updates the widget (except for windows that do not specify a <db:code><db:link xlink:href="qwidget.html#focusPolicy-prop">focusPolicy</db:link>()</db:code>).</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusInEvent">focusInEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusPolicy-prop">setFocusPolicy</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#keyPressEvent">keyPressEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#keyReleaseEvent">keyReleaseEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qfocusevent.html">QFocusEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="focusPreviousChild">
         <db:title>[protected] bool QWidget::​focusPreviousChild()</db:title>
         <db:para>Finds a new widget to give the keyboard focus to, as appropriate for <db:emphasis role="bold">Shift+Tab</db:emphasis>, and returns <db:code>true</db:code> if it can find a new widget, or false if it can't.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusNextChild">focusNextChild</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="focusProxy">
         <db:title><db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Returns the focus proxy, or 0 if there is no focus proxy.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setFocusProxy">setFocusProxy</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="focusWidget">
         <db:title><db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Returns the last child of this widget that <db:link xlink:href="qwidget.html#setFocus">setFocus</db:link> had been called on. For top level widgets this is the widget that will get focus in case this window gets activated</db:para>
         <db:para>This is not the same as <db:code><db:link xlink:href="qapplication.html#focusWidget">QApplication::focusWidget</db:link>()</db:code>, which returns the focus widget in the currently active window.</db:para>
      </db:section>
      <db:section xml:id="fontInfo">
         <db:title><db:link xlink:href="qtgui/qfontinfo.html">QFontInfo</db:link></db:title>
         <db:para>Returns the font info for the widget's current font. Equivalent to QFontInto(widget-&gt;<db:code><db:link xlink:href="qwidget.html#font-prop">font</db:link>()</db:code>).</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#font-prop">font</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#fontMetrics">fontMetrics</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#font-prop">setFont</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="fontMetrics">
         <db:title><db:link xlink:href="qtgui/qfontmetrics.html">QFontMetrics</db:link></db:title>
         <db:para>Returns the font metrics for the widget's current font. Equivalent to <db:code><db:link xlink:href="qtgui/qfontmetrics.html">QFontMetrics</db:link></db:code>
            <db:code><db:link xlink:href="qwidget.html#font-prop">font</db:link>()</db:code>).</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#font-prop">font</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#fontInfo">fontInfo</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#font-prop">setFont</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="foregroundRole">
         <db:title><db:link xlink:href="qtgui/qpalette.html#ColorRole-enum">QPalette::ColorRole</db:link></db:title>
         <db:para>Returns the foreground role.</db:para>
         <db:para>The foreground role defines the color from the widget's <db:link xlink:href="qwidget.html#palette-prop">palette</db:link> that is used to draw the foreground.</db:para>
         <db:para>If no explicit foreground role is set, the function returns a role that contrasts with the background role.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setForegroundRole">setForegroundRole</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#backgroundRole">backgroundRole</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="getContentsMargins">
         <db:title>void QWidget::​getContentsMargins(int * left, int * top, int * right, int * bottom) const</db:title>
         <db:para>Returns the widget's contents margins for <db:emphasis>left</db:emphasis>, <db:emphasis>top</db:emphasis>, <db:emphasis>right</db:emphasis>, and <db:emphasis>bottom</db:emphasis>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setContentsMargins">setContentsMargins</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#contentsRect">contentsRect</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="grab">
         <db:title><db:link xlink:href="qtgui/qpixmap.html">QPixmap</db:link><db:link xlink:href="qtcore/qrect.html">QRect</db:link></db:title>
         <db:para>Renders the widget into a pixmap restricted by the given <db:emphasis>rectangle</db:emphasis>. If the widget has any children, then they are also painted in the appropriate positions.</db:para>
         <db:para>If a rectangle with an invalid size is specified (the default), the entire widget is painted.</db:para>
         <db:para>This function was introduced in Qt 5.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#render">render</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qpixmap.html">QPixmap</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="grabGesture">
         <db:title>void QWidget::​grabGesture(<db:link xlink:href="qtcore/qt.html#GestureType-enum">Qt::GestureType</db:link><db:link xlink:href="qtcore/qt.html#GestureFlag-enum">Qt::GestureFlags</db:link></db:title>
         <db:para>Subscribes the widget to a given <db:emphasis>gesture</db:emphasis> with specific <db:emphasis>flags</db:emphasis>.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#ungrabGesture">ungrabGesture</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qgestureevent.html">QGestureEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="grabKeyboard">
         <db:title>void QWidget::​grabKeyboard()</db:title>
         <db:para>Grabs the keyboard input.</db:para>
         <db:para>This widget receives all keyboard events until <db:code><db:link xlink:href="qwidget.html#releaseKeyboard">releaseKeyboard</db:link>()</db:code> is called; other widgets get no keyboard events at all. Mouse events are not affected. Use <db:code><db:link xlink:href="qwidget.html#grabMouse">grabMouse</db:link>()</db:code> if you want to grab that.</db:para>
         <db:para>The focus widget is not affected, except that it doesn't receive any keyboard events. <db:code><db:link xlink:href="qwidget.html#setFocus">setFocus</db:link>()</db:code> moves the focus as usual, but the new focus widget receives keyboard events only after <db:code><db:link xlink:href="qwidget.html#releaseKeyboard">releaseKeyboard</db:link>()</db:code> is called.</db:para>
         <db:para>If a different widget is currently grabbing keyboard input, that widget's grab is released first.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#releaseKeyboard">releaseKeyboard</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#grabMouse">grabMouse</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#releaseMouse">releaseMouse</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusWidget">focusWidget</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="grabMouse">
         <db:title>void QWidget::​grabMouse()</db:title>
         <db:para>Grabs the mouse input.</db:para>
         <db:para>This widget receives all mouse events until <db:code><db:link xlink:href="qwidget.html#releaseMouse">releaseMouse</db:link>()</db:code> is called; other widgets get no mouse events at all. Keyboard events are not affected. Use <db:code><db:link xlink:href="qwidget.html#grabKeyboard">grabKeyboard</db:link>()</db:code> if you want to grab that.</db:para>
         <db:warning>
            <db:para> Bugs in mouse-grabbing applications very often lock the terminal. Use this function with extreme caution, and consider using the <db:code>-nograb</db:code> command line option while debugging.</db:para>
         </db:warning>
         <db:para>It is almost never necessary to grab the mouse when using Qt, as Qt grabs and releases it sensibly. In particular, Qt grabs the mouse when a mouse button is pressed and keeps it until the last button is released.</db:para>
         <db:note>
            <db:para>Only visible widgets can grab mouse input. If <db:code><db:link xlink:href="qwidget.html#visible-prop">isVisible</db:link>()</db:code> returns <db:code>false</db:code> for a widget, that widget cannot call grabMouse().</db:para>
         </db:note>
         <db:note>
            <db:para>
               <db:emphasis role="bold">(Mac OS X developers)</db:emphasis> For <db:emphasis>Cocoa</db:emphasis>, calling grabMouse() on a widget only works when the mouse is inside the frame of that widget. For <db:emphasis>Carbon</db:emphasis>, it works outside the widget's frame as well, like for Windows and X11.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#releaseMouse">releaseMouse</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#grabKeyboard">grabKeyboard</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#releaseKeyboard">releaseKeyboard</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="grabMouse-2">
         <db:title>void QWidget::​grabMouse(const <db:link xlink:href="qtgui/qcursor.html">QCursor</db:link></db:title>
         <db:para>This function overloads <db:code><db:link xlink:href="qwidget.html#grabMouse">grabMouse</db:link>()</db:code>.</db:para>
         <db:para>Grabs the mouse input and changes the cursor shape.</db:para>
         <db:para>The cursor will assume shape <db:emphasis>cursor</db:emphasis> (for as long as the mouse focus is grabbed) and this widget will be the only one to receive mouse events until <db:code><db:link xlink:href="qwidget.html#releaseMouse">releaseMouse</db:link>()</db:code> is called().</db:para>
         <db:warning>
            <db:para> Grabbing the mouse might lock the terminal.</db:para>
         </db:warning>
         <db:note>
            <db:para>
               <db:emphasis role="bold">(Mac OS X developers)</db:emphasis> See the note in <db:code><db:link xlink:href="qwidget.html#grabMouse">QWidget::grabMouse</db:link>()</db:code>.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#releaseMouse">releaseMouse</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#grabKeyboard">grabKeyboard</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#releaseKeyboard">releaseKeyboard</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#cursor-prop">setCursor</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="grabShortcut">
         <db:title>int QWidget::​grabShortcut(const <db:link xlink:href="qtgui/qkeysequence.html">QKeySequence</db:link><db:link xlink:href="qtcore/qt.html#ShortcutContext-enum">Qt::ShortcutContext</db:link></db:title>
         <db:para>Adds a shortcut to Qt's shortcut system that watches for the given <db:emphasis>key</db:emphasis> sequence in the given <db:emphasis>context</db:emphasis>. If the <db:emphasis>context</db:emphasis> is <db:code><db:link xlink:href="qtcore/qt.html#ShortcutContext-enum">Qt::ApplicationShortcut</db:link></db:code>, the shortcut applies to the application as a whole. Otherwise, it is either local to this widget, <db:code><db:link xlink:href="qtcore/qt.html#ShortcutContext-enum">Qt::WidgetShortcut</db:link></db:code>, or to the window itself, <db:code><db:link xlink:href="qtcore/qt.html#ShortcutContext-enum">Qt::WindowShortcut</db:link></db:code>.</db:para>
         <db:para>If the same <db:emphasis>key</db:emphasis> sequence has been grabbed by several widgets, when the <db:emphasis>key</db:emphasis> sequence occurs a <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::Shortcut</db:link></db:code> event is sent to all the widgets to which it applies in a non-deterministic order, but with the ``ambiguous'' flag set to true.</db:para>
         <db:warning>
            <db:para> You should not normally need to use this function; instead create <db:code><db:link xlink:href="qaction.html">QAction</db:link></db:code>s with the shortcut key sequences you require (if you also want equivalent menu options and toolbar buttons), or create <db:code><db:link xlink:href="qshortcut.html">QShortcut</db:link></db:code>s if you just need key sequences. Both <db:code><db:link xlink:href="qaction.html">QAction</db:link></db:code> and <db:code><db:link xlink:href="qshortcut.html">QShortcut</db:link></db:code> handle all the event filtering for you, and provide signals which are triggered when the user triggers the key sequence, so are much easier to use than this low-level function.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#releaseShortcut">releaseShortcut</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setShortcutEnabled">setShortcutEnabled</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="graphicsEffect">
         <db:title><db:link xlink:href="qgraphicseffect.html">QGraphicsEffect</db:link></db:title>
         <db:para>The graphicsEffect function returns a pointer to the widget's graphics effect.</db:para>
         <db:para>If the widget has no graphics effect, 0 is returned.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setGraphicsEffect">setGraphicsEffect</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="graphicsProxyWidget">
         <db:title><db:link xlink:href="qgraphicsproxywidget.html">QGraphicsProxyWidget</db:link></db:title>
         <db:para>Returns the proxy widget for the corresponding embedded widget in a graphics view; otherwise returns 0.</db:para>
         <db:para>This function was introduced in Qt 4.5.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qgraphicsproxywidget.html#createProxyForChildWidget">QGraphicsProxyWidget::createProxyForChildWidget</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qgraphicsscene.html#addWidget">QGraphicsScene::addWidget</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="hasEditFocus">
         <db:title>bool QWidget::​hasEditFocus() const</db:title>
         <db:para>Returns <db:code>true</db:code> if this widget currently has edit focus; otherwise false.</db:para>
         <db:para>This feature is only available in Qt for Embedded Linux.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setEditFocus">setEditFocus</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qapplication-obsolete.html#keypadNavigationEnabled">QApplication::keypadNavigationEnabled</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="hasHeightForWidth">
         <db:title>[virtual] bool QWidget::​hasHeightForWidth() const</db:title>
         <db:para>Returns <db:code>true</db:code> if the widget's preferred height depends on its width; otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>This function was introduced in Qt 5.0.</db:para>
      </db:section>
      <db:section xml:id="heightForWidth">
         <db:title>[virtual] int QWidget::​heightForWidth(int w) const</db:title>
         <db:para>Returns the preferred height for this widget, given the width <db:emphasis>w</db:emphasis>.</db:para>
         <db:para>If this widget has a layout, the default implementation returns the layout's preferred height. if there is no layout, the default implementation returns -1 indicating that the preferred height does not depend on the width.</db:para>
      </db:section>
      <db:section xml:id="hide">
         <db:title>[slot] void QWidget::​hide()</db:title>
         <db:para>Hides the widget. This function is equivalent to <db:link xlink:href="qwidget.html#visible-prop">setVisible</db:link>.</db:para>
         <db:note>
            <db:para>If you are working with <db:code><db:link xlink:href="qdialog.html">QDialog</db:link></db:code> or its subclasses and you invoke the <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code> function after this function, the dialog will be displayed in its original position.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#hideEvent">hideEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#isHidden">isHidden</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#visible-prop">setVisible</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#visible-prop">isVisible</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#close">close</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="hideEvent">
         <db:title>[virtual protected] void QWidget::​hideEvent(<db:link xlink:href="qtgui/qhideevent.html">QHideEvent</db:link></db:title>
         <db:para>This event handler can be reimplemented in a subclass to receive widget hide events. The event is passed in the <db:emphasis>event</db:emphasis> parameter.</db:para>
         <db:para>Hide events are sent to widgets immediately after they have been hidden.</db:para>
         <db:para>Note: A widget receives spontaneous show and hide events when its mapping status is changed by the window system, e.g. a spontaneous hide event when the user minimizes the window, and a spontaneous show event when the window is restored again. After receiving a spontaneous hide event, a widget is still considered visible in the sense of <db:code><db:link xlink:href="qwidget.html#visible-prop">isVisible</db:link>()</db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#visible-prop">visible</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qhideevent.html">QHideEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="initPainter">
         <db:title>[virtual protected] void QWidget::​initPainter(<db:link xlink:href="qtgui/qpainter.html">QPainter</db:link></db:title>
         <db:para>Initializes the <db:emphasis>painter</db:emphasis> pen, background and font to the same as the given widget's. This function is called automatically when the painter is opened on a <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code>.</db:para>
      </db:section>
      <db:section xml:id="inputMethodEvent">
         <db:title>[virtual protected] void QWidget::​inputMethodEvent(<db:link xlink:href="qtgui/qinputmethodevent.html">QInputMethodEvent</db:link></db:title>
         <db:para>This event handler, for event <db:emphasis>event</db:emphasis>, can be reimplemented in a subclass to receive Input Method composition events. This handler is called when the state of the input method changes.</db:para>
         <db:para>Note that when creating custom text editing widgets, the <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_InputMethodEnabled</db:link></db:code> window attribute must be set explicitly (using the <db:code><db:link xlink:href="qwidget.html#setAttribute">setAttribute</db:link>()</db:code> function) in order to receive input method events.</db:para>
         <db:para>The default implementation calls event-&gt;ignore(), which rejects the Input Method event. See the <db:code><db:link xlink:href="qtgui/qinputmethodevent.html">QInputMethodEvent</db:link></db:code> documentation for more details.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qinputmethodevent.html">QInputMethodEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="inputMethodQuery">
         <db:title>[virtual] <db:link xlink:href="qtcore/qvariant.html">QVariant</db:link><db:link xlink:href="qtcore/qt.html#InputMethodQuery-enum">Qt::InputMethodQuery</db:link></db:title>
         <db:para>This method is only relevant for input widgets. It is used by the input method to query a set of properties of the widget to be able to support complex input method operations as support for surrounding text and reconversions.</db:para>
         <db:para>
            <db:emphasis>query</db:emphasis> specifies which property is queried.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#inputMethodEvent">inputMethodEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qinputmethodevent.html">QInputMethodEvent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qinputmethodqueryevent.html">QInputMethodQueryEvent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#inputMethodHints-prop">inputMethodHints</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="insertAction">
         <db:title>void QWidget::​insertAction(<db:link xlink:href="qaction.html">QAction</db:link><db:link xlink:href="qaction.html">QAction</db:link></db:title>
         <db:para>Inserts the action <db:emphasis>action</db:emphasis> to this widget's list of actions, before the action <db:emphasis>before</db:emphasis>. It appends the action if <db:emphasis>before</db:emphasis> is 0 or <db:emphasis>before</db:emphasis> is not a valid action for this widget.</db:para>
         <db:para>A <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> should only have one of each action.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#removeAction">removeAction</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#addAction">addAction</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qmenu.html">QMenu</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#contextMenuPolicy-prop">contextMenuPolicy</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#actions">actions</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="insertActions">
         <db:title>void QWidget::​insertActions(<db:link xlink:href="qaction.html">QAction</db:link><db:link xlink:href="qtcore/qlist.html">QList</db:link><db:link xlink:href="qaction.html">QAction</db:link></db:title>
         <db:para>Inserts the actions <db:emphasis>actions</db:emphasis> to this widget's list of actions, before the action <db:emphasis>before</db:emphasis>. It appends the action if <db:emphasis>before</db:emphasis> is 0 or <db:emphasis>before</db:emphasis> is not a valid action for this widget.</db:para>
         <db:para>A <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> can have at most one of each action.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#removeAction">removeAction</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qmenu.html">QMenu</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#insertAction">insertAction</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#contextMenuPolicy-prop">contextMenuPolicy</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="isAncestorOf">
         <db:title>bool QWidget::​isAncestorOf(const <db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Returns <db:code>true</db:code> if this widget is a parent, (or grandparent and so on to any level), of the given <db:emphasis>child</db:emphasis>, and both widgets are within the same window; otherwise returns <db:code>false</db:code>.</db:para>
      </db:section>
      <db:section xml:id="isEnabledTo">
         <db:title>bool QWidget::​isEnabledTo(const <db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Returns <db:code>true</db:code> if this widget would become enabled if <db:emphasis>ancestor</db:emphasis> is enabled; otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>This is the case if neither the widget itself nor every parent up to but excluding <db:emphasis>ancestor</db:emphasis> has been explicitly disabled.</db:para>
         <db:para>isEnabledTo(0) returns false if this widget or any if its ancestors was explicitly disabled.</db:para>
         <db:para>The word ancestor here means a parent widget within the same window.</db:para>
         <db:para>Therefore isEnabledTo(0) stops at this widget's window, unlike <db:code><db:link xlink:href="qwidget.html#enabled-prop">isEnabled</db:link>()</db:code> which also takes parent windows into considerations.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#enabled-prop">setEnabled</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#enabled-prop">enabled</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="isHidden">
         <db:title>bool QWidget::​isHidden() const</db:title>
         <db:para>Returns <db:code>true</db:code> if the widget is hidden, otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>A hidden widget will only become visible when <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code> is called on it. It will not be automatically shown when the parent is shown.</db:para>
         <db:para>To check visibility, use !<db:code><db:link xlink:href="qwidget.html#visible-prop">isVisible</db:link>()</db:code> instead (notice the exclamation mark).</db:para>
         <db:para>isHidden() implies !<db:code><db:link xlink:href="qwidget.html#visible-prop">isVisible</db:link>()</db:code>, but a widget can be not visible and not hidden at the same time. This is the case for widgets that are children of widgets that are not visible.</db:para>
         <db:para>Widgets are hidden if:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>they were created as independent windows,</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>they were created as children of visible widgets,</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#hide">hide</db:link>()</db:code> or <db:link xlink:href="qwidget.html#visible-prop">setVisible</db:link> was called.</db:para>
            </db:listitem>
         </db:itemizedlist>
      </db:section>
      <db:section xml:id="isVisibleTo">
         <db:title>bool QWidget::​isVisibleTo(const <db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Returns <db:code>true</db:code> if this widget would become visible if <db:emphasis>ancestor</db:emphasis> is shown; otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>The true case occurs if neither the widget itself nor any parent up to but excluding <db:emphasis>ancestor</db:emphasis> has been explicitly hidden.</db:para>
         <db:para>This function will still return true if the widget is obscured by other windows on the screen, but could be physically visible if it or they were to be moved.</db:para>
         <db:para>isVisibleTo(0) is identical to <db:code><db:link xlink:href="qwidget.html#visible-prop">isVisible</db:link>()</db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#hide">hide</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#visible-prop">isVisible</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="isWindow">
         <db:title>bool QWidget::​isWindow() const</db:title>
         <db:para>Returns <db:code>true</db:code> if the widget is an independent window, otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>A window is a widget that isn't visually the child of any other widget and that usually has a frame and a <db:link xlink:href="qwidget.html#windowTitle-prop">window title</db:link>.</db:para>
         <db:para>A window can have a <db:link xlink:href="qwidget.html#parentWidget">parent widget</db:link>. It will then be grouped with its parent and deleted when the parent is deleted, minimized when the parent is minimized etc. If supported by the window manager, it will also have a common taskbar entry with its parent.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qdialog.html">QDialog</db:link></db:code> and <db:code><db:link xlink:href="qmainwindow.html">QMainWindow</db:link></db:code> widgets are by default windows, even if a parent widget is specified in the constructor. This behavior is specified by the <db:code><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::Window</db:link></db:code> flag.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#window">window</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#modal-prop">isModal</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#parentWidget">parentWidget</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="keyPressEvent">
         <db:title>[virtual protected] void QWidget::​keyPressEvent(<db:link xlink:href="qtgui/qkeyevent.html">QKeyEvent</db:link></db:title>
         <db:para>This event handler, for event <db:emphasis>event</db:emphasis>, can be reimplemented in a subclass to receive key press events for the widget.</db:para>
         <db:para>A widget must call <db:code><db:link xlink:href="qwidget.html#focusPolicy-prop">setFocusPolicy</db:link>()</db:code> to accept focus initially and have focus in order to receive a key press event.</db:para>
         <db:para>If you reimplement this handler, it is very important that you call the base class implementation if you do not act upon the key.</db:para>
         <db:para>The default implementation closes popup widgets if the user presses Esc. Otherwise the event is ignored, so that the widget's parent can interpret it.</db:para>
         <db:para>Note that <db:code><db:link xlink:href="qtgui/qkeyevent.html">QKeyEvent</db:link></db:code> starts with isAccepted() == true, so you do not need to call QKeyEvent::accept() - just do not call the base class implementation if you act upon the key.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#keyReleaseEvent">keyReleaseEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusPolicy-prop">setFocusPolicy</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusInEvent">focusInEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusOutEvent">focusOutEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qkeyevent.html">QKeyEvent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtwidgets-widgets-tetrix-example.html">Tetrix Example</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="keyReleaseEvent">
         <db:title>[virtual protected] void QWidget::​keyReleaseEvent(<db:link xlink:href="qtgui/qkeyevent.html">QKeyEvent</db:link></db:title>
         <db:para>This event handler, for event <db:emphasis>event</db:emphasis>, can be reimplemented in a subclass to receive key release events for the widget.</db:para>
         <db:para>A widget must <db:link xlink:href="qwidget.html#focusPolicy-prop">accept focus</db:link> initially and <db:link xlink:href="qwidget.html#focus-prop">have focus</db:link> in order to receive a key release event.</db:para>
         <db:para>If you reimplement this handler, it is very important that you call the base class implementation if you do not act upon the key.</db:para>
         <db:para>The default implementation ignores the event, so that the widget's parent can interpret it.</db:para>
         <db:para>Note that <db:code><db:link xlink:href="qtgui/qkeyevent.html">QKeyEvent</db:link></db:code> starts with isAccepted() == true, so you do not need to call QKeyEvent::accept() - just do not call the base class implementation if you act upon the key.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#keyPressEvent">keyPressEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusPolicy-prop">setFocusPolicy</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusInEvent">focusInEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusOutEvent">focusOutEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qkeyevent.html">QKeyEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="keyboardGrabber">
         <db:title>[static] <db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Returns the widget that is currently grabbing the keyboard input.</db:para>
         <db:para>If no widget in this application is currently grabbing the keyboard, 0 is returned.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#grabMouse">grabMouse</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseGrabber">mouseGrabber</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="layout">
         <db:title><db:link xlink:href="qlayout.html">QLayout</db:link></db:title>
         <db:para>Returns the layout manager that is installed on this widget, or 0 if no layout manager is installed.</db:para>
         <db:para>The layout manager sets the geometry of the widget's children that have been added to the layout.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setLayout">setLayout</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#sizePolicy-prop">sizePolicy</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="layout.html">Layout Management</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="leaveEvent">
         <db:title>[virtual protected] void QWidget::​leaveEvent(<db:link xlink:href="qtcore/qevent.html">QEvent</db:link></db:title>
         <db:para>This event handler can be reimplemented in a subclass to receive widget leave events which are passed in the <db:emphasis>event</db:emphasis> parameter.</db:para>
         <db:para>A leave event is sent to the widget when the mouse cursor leaves the widget.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#enterEvent">enterEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseMoveEvent">mouseMoveEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="lower">
         <db:title>[slot] void QWidget::​lower()</db:title>
         <db:para>Lowers the widget to the bottom of the parent widget's stack.</db:para>
         <db:para>After this call the widget will be visually behind (and therefore obscured by) any overlapping sibling widgets.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#raise">raise</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#stackUnder">stackUnder</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="macCGHandle">
         <db:title><db:link xlink:href="qtcore/qt.html#HANDLE-typedef">Qt::HANDLE</db:link></db:title>
         <db:para/>
      </db:section>
      <db:section xml:id="macQDHandle">
         <db:title><db:link xlink:href="qtcore/qt.html#HANDLE-typedef">Qt::HANDLE</db:link></db:title>
         <db:para/>
      </db:section>
      <db:section xml:id="mapFrom">
         <db:title><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link><db:link xlink:href="qwidget.html#QWidget">QWidget</db:link><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link></db:title>
         <db:para>Translates the widget coordinate <db:emphasis>pos</db:emphasis> from the coordinate system of <db:emphasis>parent</db:emphasis> to this widget's coordinate system. The <db:emphasis>parent</db:emphasis> must not be 0 and must be a parent of the calling widget.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapTo">mapTo</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapFromParent">mapFromParent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapFromGlobal">mapFromGlobal</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#underMouse">underMouse</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="mapFromGlobal">
         <db:title><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link></db:title>
         <db:para>Translates the global screen coordinate <db:emphasis>pos</db:emphasis> to widget coordinates.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapToGlobal">mapToGlobal</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapFrom">mapFrom</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapFromParent">mapFromParent</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="mapFromParent">
         <db:title><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link></db:title>
         <db:para>Translates the parent widget coordinate <db:emphasis>pos</db:emphasis> to widget coordinates.</db:para>
         <db:para>Same as <db:code><db:link xlink:href="qwidget.html#mapFromGlobal">mapFromGlobal</db:link>()</db:code> if the widget has no parent.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapToParent">mapToParent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapFrom">mapFrom</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapFromGlobal">mapFromGlobal</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#underMouse">underMouse</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="mapTo">
         <db:title><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link><db:link xlink:href="qwidget.html#QWidget">QWidget</db:link><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link></db:title>
         <db:para>Translates the widget coordinate <db:emphasis>pos</db:emphasis> to the coordinate system of <db:emphasis>parent</db:emphasis>. The <db:emphasis>parent</db:emphasis> must not be 0 and must be a parent of the calling widget.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapFrom">mapFrom</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapToParent">mapToParent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapToGlobal">mapToGlobal</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#underMouse">underMouse</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="mapToGlobal">
         <db:title><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link></db:title>
         <db:para>Translates the widget coordinate <db:emphasis>pos</db:emphasis> to global screen coordinates. For example, <db:code>mapToGlobal(QPoint(0,0))</db:code> would give the global coordinates of the top-left pixel of the widget.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapFromGlobal">mapFromGlobal</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapTo">mapTo</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapToParent">mapToParent</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="mapToParent">
         <db:title><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link></db:title>
         <db:para>Translates the widget coordinate <db:emphasis>pos</db:emphasis> to a coordinate in the parent widget.</db:para>
         <db:para>Same as <db:code><db:link xlink:href="qwidget.html#mapToGlobal">mapToGlobal</db:link>()</db:code> if the widget has no parent.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapFromParent">mapFromParent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapTo">mapTo</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mapToGlobal">mapToGlobal</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#underMouse">underMouse</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="mask">
         <db:title><db:link xlink:href="qtgui/qregion.html">QRegion</db:link></db:title>
         <db:para>Returns the mask currently set on a widget. If no mask is set the return value will be an empty region.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setMask">setMask</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#clearMask">clearMask</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qregion.html#isEmpty">QRegion::isEmpty</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtwidgets-widgets-shapedclock-example.html">Shaped Clock Example</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="metric">
         <db:title>[virtual protected] int QWidget::​metric(<db:link xlink:href="qtgui/qpaintdevice.html#PaintDeviceMetric-enum">PaintDeviceMetric</db:link></db:title>
         <db:para>Reimplemented from <db:code><db:link xlink:href="qtgui/qpaintdevice.html#metric">QPaintDevice::metric</db:link>()</db:code>.</db:para>
         <db:para>Internal implementation of the virtual <db:code><db:link xlink:href="qtgui/qpaintdevice.html#metric">QPaintDevice::metric</db:link>()</db:code> function.</db:para>
         <db:para>
            <db:emphasis>m</db:emphasis> is the metric to get.</db:para>
      </db:section>
      <db:section xml:id="mouseDoubleClickEvent">
         <db:title>[virtual protected] void QWidget::​mouseDoubleClickEvent(<db:link xlink:href="qtgui/qmouseevent.html">QMouseEvent</db:link></db:title>
         <db:para>This event handler, for event <db:emphasis>event</db:emphasis>, can be reimplemented in a subclass to receive mouse double click events for the widget.</db:para>
         <db:para>The default implementation calls <db:code><db:link xlink:href="qwidget.html#mousePressEvent">mousePressEvent</db:link>()</db:code>.</db:para>
         <db:note>
            <db:para>The widget will also receive mouse press and mouse release events in addition to the double click event. It is up to the developer to ensure that the application interprets these events correctly.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mousePressEvent">mousePressEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseReleaseEvent">mouseReleaseEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseMoveEvent">mouseMoveEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qmouseevent.html">QMouseEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="mouseGrabber">
         <db:title>[static] <db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Returns the widget that is currently grabbing the mouse input.</db:para>
         <db:para>If no widget in this application is currently grabbing the mouse, 0 is returned.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#grabMouse">grabMouse</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#keyboardGrabber">keyboardGrabber</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="mouseMoveEvent">
         <db:title>[virtual protected] void QWidget::​mouseMoveEvent(<db:link xlink:href="qtgui/qmouseevent.html">QMouseEvent</db:link></db:title>
         <db:para>This event handler, for event <db:emphasis>event</db:emphasis>, can be reimplemented in a subclass to receive mouse move events for the widget.</db:para>
         <db:para>If mouse tracking is switched off, mouse move events only occur if a mouse button is pressed while the mouse is being moved. If mouse tracking is switched on, mouse move events occur even if no mouse button is pressed.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qtgui/qmouseevent.html#pos">QMouseEvent::pos</db:link>()</db:code> reports the position of the mouse cursor, relative to this widget. For press and release events, the position is usually the same as the position of the last mouse move event, but it might be different if the user's hand shakes. This is a feature of the underlying window system, not Qt.</db:para>
         <db:para>If you want to show a tooltip immediately, while the mouse is moving (e.g., to get the mouse coordinates with <db:code><db:link xlink:href="qtgui/qmouseevent.html#pos">QMouseEvent::pos</db:link>()</db:code> and show them as a tooltip), you must first enable mouse tracking as described above. Then, to ensure that the tooltip is updated immediately, you must call <db:code><db:link xlink:href="qtooltip.html#showText">QToolTip::showText</db:link>()</db:code> instead of <db:code><db:link xlink:href="qwidget.html#toolTip-prop">setToolTip</db:link>()</db:code> in your implementation of mouseMoveEvent().</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseTracking-prop">setMouseTracking</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mousePressEvent">mousePressEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseReleaseEvent">mouseReleaseEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseDoubleClickEvent">mouseDoubleClickEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qmouseevent.html">QMouseEvent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtwidgets-widgets-scribble-example.html">Scribble Example</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="mousePressEvent">
         <db:title>[virtual protected] void QWidget::​mousePressEvent(<db:link xlink:href="qtgui/qmouseevent.html">QMouseEvent</db:link></db:title>
         <db:para>This event handler, for event <db:emphasis>event</db:emphasis>, can be reimplemented in a subclass to receive mouse press events for the widget.</db:para>
         <db:para>If you create new widgets in the mousePressEvent() the <db:code><db:link xlink:href="qwidget.html#mouseReleaseEvent">mouseReleaseEvent</db:link>()</db:code> may not end up where you expect, depending on the underlying window system (or X11 window manager), the widgets' location and maybe more.</db:para>
         <db:para>The default implementation implements the closing of popup widgets when you click outside the window. For other widget types it does nothing.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseReleaseEvent">mouseReleaseEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseDoubleClickEvent">mouseDoubleClickEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseMoveEvent">mouseMoveEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qmouseevent.html">QMouseEvent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtwidgets-widgets-scribble-example.html">Scribble Example</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="mouseReleaseEvent">
         <db:title>[virtual protected] void QWidget::​mouseReleaseEvent(<db:link xlink:href="qtgui/qmouseevent.html">QMouseEvent</db:link></db:title>
         <db:para>This event handler, for event <db:emphasis>event</db:emphasis>, can be reimplemented in a subclass to receive mouse release events for the widget.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mousePressEvent">mousePressEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseDoubleClickEvent">mouseDoubleClickEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mouseMoveEvent">mouseMoveEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qmouseevent.html">QMouseEvent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtwidgets-widgets-scribble-example.html">Scribble Example</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="moveEvent">
         <db:title>[virtual protected] void QWidget::​moveEvent(<db:link xlink:href="qtgui/qmoveevent.html">QMoveEvent</db:link></db:title>
         <db:para>This event handler can be reimplemented in a subclass to receive widget move events which are passed in the <db:emphasis>event</db:emphasis> parameter. When the widget receives this event, it is already at the new position.</db:para>
         <db:para>The old position is accessible through <db:code><db:link xlink:href="qtgui/qmoveevent.html#oldPos">QMoveEvent::oldPos</db:link>()</db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#resizeEvent">resizeEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#pos-prop">move</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qmoveevent.html">QMoveEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="nativeEvent">
         <db:title>[virtual protected] bool QWidget::​nativeEvent(const <db:link xlink:href="qtcore/qbytearray.html">QByteArray</db:link></db:title>
         <db:para>This special event handler can be reimplemented in a subclass to receive native platform events identified by <db:emphasis>eventType</db:emphasis> which are passed in the <db:emphasis>message</db:emphasis> parameter.</db:para>
         <db:para>In your reimplementation of this function, if you want to stop the event being handled by Qt, return true and set <db:emphasis>result</db:emphasis>. If you return false, this native event is passed back to Qt, which translates the event into a Qt event and sends it to the widget.</db:para>
         <db:note>
            <db:para>Events are only delivered to this event handler if the widget is has a native Window handle.</db:para>
         </db:note>
         <db:note>
            <db:para>This function superseedes the event filter functions x11Event(), winEvent() and macEvent() of Qt 4.</db:para>
         </db:note>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Platform</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Event Type Identifier</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Message Type</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Result Type</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>Windows</db:para>
                  </db:td>
                  <db:td>
                     <db:para>"windows_generic_MSG"</db:para>
                  </db:td>
                  <db:td>
                     <db:para>MSG *</db:para>
                  </db:td>
                  <db:td>
                     <db:para>LRESULT</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section xml:id="nativeParentWidget">
         <db:title><db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Returns the native parent for this widget, i.e. the next ancestor widget that has a system identifier, or 0 if it does not have any native parent.</db:para>
         <db:para>This function was introduced in Qt 4.4.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#effectiveWinId">effectiveWinId</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="nextInFocusChain">
         <db:title><db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Returns the next widget in this widget's focus chain.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#previousInFocusChain">previousInFocusChain</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="overrideWindowFlags">
         <db:title>void QWidget::​overrideWindowFlags(<db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::WindowFlags</db:link></db:title>
         <db:para>Sets the window flags for the widget to <db:emphasis>flags</db:emphasis>, <db:emphasis>without</db:emphasis> telling the window system.</db:para>
         <db:warning>
            <db:para> Do not call this function unless you really know what you're doing.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#windowFlags-prop">setWindowFlags</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="paintEngine">
         <db:title>[virtual] <db:link xlink:href="qtgui/qpaintengine.html">QPaintEngine</db:link></db:title>
         <db:para>Reimplemented from <db:code><db:link xlink:href="qtgui/qpaintdevice.html#paintEngine">QPaintDevice::paintEngine</db:link>()</db:code>.</db:para>
         <db:para>Returns the widget's paint engine.</db:para>
         <db:para>Note that this function should not be called explicitly by the user, since it's meant for reimplementation purposes only. The function is called by Qt internally, and the default implementation may not always return a valid pointer.</db:para>
      </db:section>
      <db:section xml:id="paintEvent">
         <db:title>[virtual protected] void QWidget::​paintEvent(<db:link xlink:href="qtgui/qpaintevent.html">QPaintEvent</db:link></db:title>
         <db:para>This event handler can be reimplemented in a subclass to receive paint events passed in <db:emphasis>event</db:emphasis>.</db:para>
         <db:para>A paint event is a request to repaint all or part of a widget. It can happen for one of the following reasons:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qwidget.html#repaint">repaint</db:link>()</db:code> or <db:code><db:link xlink:href="qwidget.html#update">update</db:link>()</db:code> was invoked,</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>the widget was obscured and has now been uncovered, or</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>many other reasons.</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:para>Many widgets can simply repaint their entire surface when asked to, but some slow widgets need to optimize by painting only the requested region: <db:code><db:link xlink:href="qtgui/qpaintevent.html#region">QPaintEvent::region</db:link>()</db:code>. This speed optimization does not change the result, as painting is clipped to that region during event processing. <db:code><db:link xlink:href="qlistview.html">QListView</db:link></db:code> and <db:code><db:link xlink:href="qtableview.html">QTableView</db:link></db:code> do this, for example.</db:para>
         <db:para>Qt also tries to speed up painting by merging multiple paint events into one. When <db:code><db:link xlink:href="qwidget.html#update">update</db:link>()</db:code> is called several times or the window system sends several paint events, Qt merges these events into one event with a larger region (see <db:code><db:link xlink:href="qtgui/qregion.html#united">QRegion::united</db:link>()</db:code>). The <db:code><db:link xlink:href="qwidget.html#repaint">repaint</db:link>()</db:code> function does not permit this optimization, so we suggest using <db:code><db:link xlink:href="qwidget.html#update">update</db:link>()</db:code> whenever possible.</db:para>
         <db:para>When the paint event occurs, the update region has normally been erased, so you are painting on the widget's background.</db:para>
         <db:para>The background can be set using <db:code><db:link xlink:href="qwidget.html#setBackgroundRole">setBackgroundRole</db:link>()</db:code> and <db:code><db:link xlink:href="qwidget.html#palette-prop">setPalette</db:link>()</db:code>.</db:para>
         <db:para>Since Qt 4.0, <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> automatically double-buffers its painting, so there is no need to write double-buffering code in paintEvent() to avoid flicker.</db:para>
         <db:note>
            <db:para>It is possible to toggle global double buffering by calling<db:code>qt_x11_set_global_double_buffer()</db:code>. For example,</db:para>
         </db:note>
         <db:programlisting>...externvoid qt_x11_set_global_double_buffer(bool); qt_x11_set_global_double_buffer(false); ...</db:programlisting>
         <db:note>
            <db:para>Generally, you should refrain from calling <db:code><db:link xlink:href="qwidget.html#update">update</db:link>()</db:code> or <db:code><db:link xlink:href="qwidget.html#repaint">repaint</db:link>()</db:code> 
               <db:emphasis role="bold">inside</db:emphasis> a paintEvent(). For example, calling <db:code><db:link xlink:href="qwidget.html#update">update</db:link>()</db:code> or <db:code><db:link xlink:href="qwidget.html#repaint">repaint</db:link>()</db:code> on children inside a paintevent() results in undefined behavior; the child may or may not get a paint event.</db:para>
         </db:note>
         <db:warning>
            <db:para> If you are using a custom paint engine without Qt's backingstore, <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_PaintOnScreen</db:link></db:code> must be set. Otherwise, <db:code><db:link xlink:href="qwidget.html#paintEngine">QWidget::paintEngine</db:link>()</db:code> will never be called; the backingstore will be used instead.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#repaint">repaint</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#update">update</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qpainter.html">QPainter</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qpixmap.html">QPixmap</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qpaintevent.html">QPaintEvent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtwidgets-widgets-analogclock-example.html">Analog Clock Example</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="parentWidget">
         <db:title><db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Returns the parent of this widget, or 0 if it does not have any parent widget.</db:para>
      </db:section>
      <db:section xml:id="previousInFocusChain">
         <db:title><db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>The previousInFocusChain function returns the previous widget in this widget's focus chain.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#nextInFocusChain">nextInFocusChain</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="raise">
         <db:title>[slot] void QWidget::​raise()</db:title>
         <db:para>Raises this widget to the top of the parent widget's stack.</db:para>
         <db:para>After this call the widget will be visually in front of any overlapping sibling widgets.</db:para>
         <db:note>
            <db:para>When using <db:code><db:link xlink:href="qwidget.html#activateWindow">activateWindow</db:link>()</db:code>, you can call this function to ensure that the window is stacked on top.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#lower">lower</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#stackUnder">stackUnder</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="redirected">
         <db:title>[virtual protected] <db:link xlink:href="qtgui/qpaintdevice.html#QPaintDevice">QPaintDevice</db:link><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link></db:title>
         <db:para/>
      </db:section>
      <db:section xml:id="releaseKeyboard">
         <db:title>void QWidget::​releaseKeyboard()</db:title>
         <db:para>Releases the keyboard grab.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#grabKeyboard">grabKeyboard</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#grabMouse">grabMouse</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#releaseMouse">releaseMouse</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="releaseMouse">
         <db:title>void QWidget::​releaseMouse()</db:title>
         <db:para>Releases the mouse grab.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#grabMouse">grabMouse</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#grabKeyboard">grabKeyboard</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#releaseKeyboard">releaseKeyboard</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="releaseShortcut">
         <db:title>void QWidget::​releaseShortcut(int id)</db:title>
         <db:para>Removes the shortcut with the given <db:emphasis>id</db:emphasis> from Qt's shortcut system. The widget will no longer receive <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::Shortcut</db:link></db:code> events for the shortcut's key sequence (unless it has other shortcuts with the same key sequence).</db:para>
         <db:warning>
            <db:para> You should not normally need to use this function since Qt's shortcut system removes shortcuts automatically when their parent widget is destroyed. It is best to use <db:code><db:link xlink:href="qaction.html">QAction</db:link></db:code> or <db:code><db:link xlink:href="qshortcut.html">QShortcut</db:link></db:code> to handle shortcuts, since they are easier to use than this low-level function. Note also that this is an expensive operation.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#grabShortcut">grabShortcut</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setShortcutEnabled">setShortcutEnabled</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="removeAction">
         <db:title>void QWidget::​removeAction(<db:link xlink:href="qaction.html">QAction</db:link></db:title>
         <db:para>Removes the action <db:emphasis>action</db:emphasis> from this widget's list of actions.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#insertAction">insertAction</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#actions">actions</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#insertAction">insertAction</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="render">
         <db:title>void QWidget::​render(<db:link xlink:href="qtgui/qpaintdevice.html#QPaintDevice">QPaintDevice</db:link><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link><db:link xlink:href="qtgui/qregion.html">QRegion</db:link><db:link xlink:href="qwidget.html#RenderFlag-enum">RenderFlags</db:link></db:title>
         <db:para>Renders the <db:emphasis>sourceRegion</db:emphasis> of this widget into the <db:emphasis>target</db:emphasis> using <db:emphasis>renderFlags</db:emphasis> to determine how to render. Rendering starts at <db:emphasis>targetOffset</db:emphasis> in the <db:emphasis>target</db:emphasis>. For example:</db:para>
         <db:programlisting>QPixmap pixmap(widget-&gt;size()); widget-&gt;render(&amp;pixmap);</db:programlisting>
         <db:para>If <db:emphasis>sourceRegion</db:emphasis> is a null region, this function will use <db:code><db:link xlink:href="qwidget.html#rect-prop">QWidget::rect</db:link>()</db:code> as the region, i.e. the entire widget.</db:para>
         <db:para>Ensure that you call <db:code><db:link xlink:href="qtgui/qpainter.html#end">QPainter::end</db:link>()</db:code> for the <db:emphasis>target</db:emphasis> device's active painter (if any) before rendering. For example:</db:para>
         <db:programlisting>QPainter painter(this); ... painter.end(); myWidget-&gt;render(this);</db:programlisting>
         <db:note>
            <db:para>To obtain the contents of an OpenGL widget, use QGLWidget::grabFrameBuffer() or QGLWidget::renderPixmap() instead.</db:para>
         </db:note>
         <db:para>This function was introduced in Qt 4.3.</db:para>
      </db:section>
      <db:section xml:id="render-2">
         <db:title>void QWidget::​render(<db:link xlink:href="qtgui/qpainter.html">QPainter</db:link><db:link xlink:href="qtcore/qpoint.html">QPoint</db:link><db:link xlink:href="qtgui/qregion.html">QRegion</db:link><db:link xlink:href="qwidget.html#RenderFlag-enum">RenderFlags</db:link></db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Renders the widget into the <db:emphasis>painter</db:emphasis>'s <db:code><db:link xlink:href="qtgui/qpainter.html#device">QPainter::device</db:link>()</db:code>.</db:para>
         <db:para>Transformations and settings applied to the <db:emphasis>painter</db:emphasis> will be used when rendering.</db:para>
         <db:note>
            <db:para>The <db:emphasis>painter</db:emphasis> must be active. On Mac OS X the widget will be rendered into a <db:code><db:link xlink:href="qtgui/qpixmap.html">QPixmap</db:link></db:code> and then drawn by the <db:emphasis>painter</db:emphasis>.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qpainter.html#device">QPainter::device</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="repaint">
         <db:title>[slot] void QWidget::​repaint()</db:title>
         <db:para>Repaints the widget directly by calling <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code> immediately, unless updates are disabled or the widget is hidden.</db:para>
         <db:para>We suggest only using repaint() if you need an immediate repaint, for example during animation. In almost all circumstances <db:code><db:link xlink:href="qwidget.html#update">update</db:link>()</db:code> is better, as it permits Qt to optimize for speed and minimize flicker.</db:para>
         <db:warning>
            <db:para> If you call repaint() in a function which may itself be called from <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code>, you may get infinite recursion. The <db:code><db:link xlink:href="qwidget.html#update">update</db:link>()</db:code> function never causes recursion.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#update">update</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#updatesEnabled-prop">setUpdatesEnabled</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="repaint-2">
         <db:title>void QWidget::​repaint(int x, int y, int w, int h)</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>This version repaints a rectangle (<db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis>, <db:emphasis>w</db:emphasis>, <db:emphasis>h</db:emphasis>) inside the widget.</db:para>
         <db:para>If <db:emphasis>w</db:emphasis> is negative, it is replaced with <db:code>width() - x</db:code>, and if <db:emphasis>h</db:emphasis> is negative, it is replaced width <db:code>height() - y</db:code>.</db:para>
      </db:section>
      <db:section xml:id="repaint-3">
         <db:title>void QWidget::​repaint(const <db:link xlink:href="qtcore/qrect.html">QRect</db:link></db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>This version repaints a rectangle <db:emphasis>rect</db:emphasis> inside the widget.</db:para>
      </db:section>
      <db:section xml:id="repaint-4">
         <db:title>void QWidget::​repaint(const <db:link xlink:href="qtgui/qregion.html">QRegion</db:link></db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>This version repaints a region <db:emphasis>rgn</db:emphasis> inside the widget.</db:para>
      </db:section>
      <db:section xml:id="resizeEvent">
         <db:title>[virtual protected] void QWidget::​resizeEvent(<db:link xlink:href="qtgui/qresizeevent.html">QResizeEvent</db:link></db:title>
         <db:para>This event handler can be reimplemented in a subclass to receive widget resize events which are passed in the <db:emphasis>event</db:emphasis> parameter. When resizeEvent() is called, the widget already has its new geometry. The old size is accessible through <db:code><db:link xlink:href="qtgui/qresizeevent.html#oldSize">QResizeEvent::oldSize</db:link>()</db:code>.</db:para>
         <db:para>The widget will be erased and receive a paint event immediately after processing the resize event. No drawing need be (or should be) done inside this handler.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#moveEvent">moveEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#size-prop">resize</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qresizeevent.html">QResizeEvent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtwidgets-widgets-scribble-example.html">Scribble Example</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="restoreGeometry">
         <db:title>bool QWidget::​restoreGeometry(const <db:link xlink:href="qtcore/qbytearray.html">QByteArray</db:link></db:title>
         <db:para>Restores the geometry and state top-level widgets stored in the byte array <db:emphasis>geometry</db:emphasis>. Returns <db:code>true</db:code> on success; otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>If the restored geometry is off-screen, it will be modified to be inside the available screen geometry.</db:para>
         <db:para>To restore geometry saved using <db:code><db:link xlink:href="qtcore/qsettings.html">QSettings</db:link></db:code>, you can use code like this:</db:para>
         <db:programlisting>QSettings settings("MyCompany","MyApp"); myWidget-&gt;restoreGeometry(settings.value("myWidget/geometry").toByteArray());</db:programlisting>
         <db:para>See the <db:link xlink:href="application-windows.html#window-geometry">Window Geometry</db:link> documentation for an overview of geometry issues with windows.</db:para>
         <db:para>Use <db:code><db:link xlink:href="qmainwindow.html#restoreState">QMainWindow::restoreState</db:link>()</db:code> to restore the geometry and the state of toolbars and dock widgets.</db:para>
         <db:para>This function was introduced in Qt 4.2.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#saveGeometry">saveGeometry</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtcore/qsettings.html">QSettings</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qmainwindow.html#saveState">QMainWindow::saveState</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qmainwindow.html#restoreState">QMainWindow::restoreState</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="saveGeometry">
         <db:title><db:link xlink:href="qtcore/qbytearray.html">QByteArray</db:link></db:title>
         <db:para>Saves the current geometry and state for top-level widgets.</db:para>
         <db:para>To save the geometry when the window closes, you can implement a close event like this:</db:para>
         <db:programlisting>void MyWidget::closeEvent(QCloseEvent*event) { QSettings settings("MyCompany","MyApp"); settings.setValue("geometry", saveGeometry()); QWidget::closeEvent(event); }</db:programlisting>
         <db:para>See the <db:link xlink:href="application-windows.html#window-geometry">Window Geometry</db:link> documentation for an overview of geometry issues with windows.</db:para>
         <db:para>Use <db:code><db:link xlink:href="qmainwindow.html#saveState">QMainWindow::saveState</db:link>()</db:code> to save the geometry and the state of toolbars and dock widgets.</db:para>
         <db:para>This function was introduced in Qt 4.2.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#restoreGeometry">restoreGeometry</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qmainwindow.html#saveState">QMainWindow::saveState</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qmainwindow.html#restoreState">QMainWindow::restoreState</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="scroll">
         <db:title>void QWidget::​scroll(int dx, int dy)</db:title>
         <db:para>Scrolls the widget including its children <db:emphasis>dx</db:emphasis> pixels to the right and <db:emphasis>dy</db:emphasis> downward. Both <db:emphasis>dx</db:emphasis> and <db:emphasis>dy</db:emphasis> may be negative.</db:para>
         <db:para>After scrolling, the widgets will receive paint events for the areas that need to be repainted. For widgets that Qt knows to be opaque, this is only the newly exposed parts. For example, if an opaque widget is scrolled 8 pixels to the left, only an 8-pixel wide stripe at the right edge needs updating.</db:para>
         <db:para>Since widgets propagate the contents of their parents by default, you need to set the <db:link xlink:href="qwidget.html#autoFillBackground-prop">autoFillBackground</db:link> property, or use <db:code><db:link xlink:href="qwidget.html#setAttribute">setAttribute</db:link>()</db:code> to set the <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_OpaquePaintEvent</db:link></db:code> attribute, to make a widget opaque.</db:para>
         <db:para>For widgets that use contents propagation, a scroll will cause an update of the entire scroll area.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#transparency-and-double-buffering">Transparency and Double Buffering</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="scroll-2">
         <db:title>void QWidget::​scroll(int dx, int dy, const <db:link xlink:href="qtcore/qrect.html">QRect</db:link></db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>This version only scrolls <db:emphasis>r</db:emphasis> and does not move the children of the widget.</db:para>
         <db:para>If <db:emphasis>r</db:emphasis> is empty or invalid, the result is undefined.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qscrollarea.html">QScrollArea</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setAttribute">
         <db:title>void QWidget::​setAttribute(<db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WidgetAttribute</db:link></db:title>
         <db:para>Sets the attribute <db:emphasis>attribute</db:emphasis> on this widget if <db:emphasis>on</db:emphasis> is true; otherwise clears the attribute.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#testAttribute">testAttribute</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setBackgroundRole">
         <db:title>void QWidget::​setBackgroundRole(<db:link xlink:href="qtgui/qpalette.html#ColorRole-enum">QPalette::ColorRole</db:link></db:title>
         <db:para>Sets the background role of the widget to <db:emphasis>role</db:emphasis>.</db:para>
         <db:para>The background role defines the brush from the widget's <db:link xlink:href="qwidget.html#palette-prop">palette</db:link> that is used to render the background.</db:para>
         <db:para>If <db:emphasis>role</db:emphasis> is <db:code><db:link xlink:href="qtgui/qpalette.html#ColorRole-enum">QPalette::NoRole</db:link></db:code>, then the widget inherits its parent's background role.</db:para>
         <db:para>Note that styles are free to choose any color from the palette. You can modify the palette or set a style sheet if you don't achieve the result you want with setBackgroundRole().</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#backgroundRole">backgroundRole</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#foregroundRole">foregroundRole</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setContentsMargins">
         <db:title>void QWidget::​setContentsMargins(int left, int top, int right, int bottom)</db:title>
         <db:para>Sets the margins around the contents of the widget to have the sizes <db:emphasis>left</db:emphasis>, <db:emphasis>top</db:emphasis>, <db:emphasis>right</db:emphasis>, and <db:emphasis>bottom</db:emphasis>. The margins are used by the layout system, and may be used by subclasses to specify the area to draw in (e.g. excluding the frame).</db:para>
         <db:para>Changing the margins will trigger a <db:code><db:link xlink:href="qwidget.html#resizeEvent">resizeEvent</db:link>()</db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#contentsMargins">contentsMargins</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#contentsRect">contentsRect</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#getContentsMargins">getContentsMargins</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setContentsMargins-2">
         <db:title>void QWidget::​setContentsMargins(const <db:link xlink:href="qtcore/qmargins.html">QMargins</db:link></db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>The <db:link xlink:href="qwidget.html#setContentsMargins">setContentsMargins</db:link> function sets the margins around the widget's contents.</db:para>
         <db:para>Sets the margins around the contents of the widget to have the sizes determined by <db:emphasis>margins</db:emphasis>. The margins are used by the layout system, and may be used by subclasses to specify the area to draw in (e.g. excluding the frame).</db:para>
         <db:para>Changing the margins will trigger a <db:code><db:link xlink:href="qwidget.html#resizeEvent">resizeEvent</db:link>()</db:code>.</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#contentsRect">contentsRect</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#getContentsMargins">getContentsMargins</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setDisabled">
         <db:title>[slot] void QWidget::​setDisabled(bool disable)</db:title>
         <db:para>Disables widget input events if <db:emphasis>disable</db:emphasis> is true; otherwise enables input events.</db:para>
         <db:para>See the <db:link xlink:href="qwidget.html#enabled-prop">enabled</db:link> documentation for more information.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#isEnabledTo">isEnabledTo</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qkeyevent.html">QKeyEvent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qmouseevent.html">QMouseEvent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#changeEvent">changeEvent</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setEditFocus">
         <db:title>void QWidget::​setEditFocus(bool enable)</db:title>
         <db:para>If <db:emphasis>enable</db:emphasis> is true, make this widget have edit focus, in which case <db:code><db:link xlink:href="qtcore/qt.html#Key-enum">Qt::Key_Up</db:link></db:code> and <db:code><db:link xlink:href="qtcore/qt.html#Key-enum">Qt::Key_Down</db:link></db:code> will be delivered to the widget normally; otherwise, <db:code><db:link xlink:href="qtcore/qt.html#Key-enum">Qt::Key_Up</db:link></db:code> and <db:code><db:link xlink:href="qtcore/qt.html#Key-enum">Qt::Key_Down</db:link></db:code> are used to change focus.</db:para>
         <db:para>This feature is only available in Qt for Embedded Linux.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#hasEditFocus">hasEditFocus</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qapplication-obsolete.html#keypadNavigationEnabled">QApplication::keypadNavigationEnabled</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setFixedHeight">
         <db:title>void QWidget::​setFixedHeight(int h)</db:title>
         <db:para>Sets both the minimum and maximum heights of the widget to <db:emphasis>h</db:emphasis> without changing the widths. Provided for convenience.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#sizeHint-prop">sizeHint</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#maximumSize-prop">maximumSize</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setFixedSize">setFixedSize</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setFixedSize">
         <db:title>void QWidget::​setFixedSize(const <db:link xlink:href="qtcore/qsize.html">QSize</db:link></db:title>
         <db:para>Sets both the minimum and maximum sizes of the widget to <db:emphasis>s</db:emphasis>, thereby preventing it from ever growing or shrinking.</db:para>
         <db:para>This will override the default size constraints set by <db:code><db:link xlink:href="qlayout.html">QLayout</db:link></db:code>.</db:para>
         <db:para>To remove constraints, set the size to <db:code><db:link xlink:href="qwidget.html#QWIDGETSIZE_MAX">QWIDGETSIZE_MAX</db:link></db:code>.</db:para>
         <db:para>Alternatively, if you want the widget to have a fixed size based on its contents, you can call <db:code><db:link xlink:href="qlayout.html#sizeConstraint-prop">QLayout::setSizeConstraint</db:link></db:code>
            <db:code><db:link xlink:href="qlayout.html#SizeConstraint-enum">QLayout::SetFixedSize</db:link></db:code>);</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#maximumSize-prop">maximumSize</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setFixedSize-2">
         <db:title>void QWidget::​setFixedSize(int w, int h)</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Sets the width of the widget to <db:emphasis>w</db:emphasis> and the height to <db:emphasis>h</db:emphasis>.</db:para>
      </db:section>
      <db:section xml:id="setFixedWidth">
         <db:title>void QWidget::​setFixedWidth(int w)</db:title>
         <db:para>Sets both the minimum and maximum width of the widget to <db:emphasis>w</db:emphasis> without changing the heights. Provided for convenience.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#sizeHint-prop">sizeHint</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#minimumSize-prop">minimumSize</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#maximumSize-prop">maximumSize</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setFixedSize">setFixedSize</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setFocus">
         <db:title>void QWidget::​setFocus(<db:link xlink:href="qtcore/qt.html#FocusReason-enum">Qt::FocusReason</db:link></db:title>
         <db:para>Gives the keyboard input focus to this widget (or its focus proxy) if this widget or one of its parents is the <db:link xlink:href="qwidget.html#isActiveWindow-prop">active window</db:link>. The <db:emphasis>reason</db:emphasis> argument will be passed into any focus event sent from this function, it is used to give an explanation of what caused the widget to get focus. If the window is not active, the widget will be given the focus when the window becomes active.</db:para>
         <db:para>First, a focus about to change event is sent to the focus widget (if any) to tell it that it is about to lose the focus. Then focus is changed, a focus out event is sent to the previous focus item and a focus in event is sent to the new item to tell it that it just received the focus. (Nothing happens if the focus in and focus out widgets are the same.)</db:para>
         <db:note>
            <db:para>On embedded platforms, setFocus() will not cause an input panel to be opened by the input method. If you want this to happen, you have to send a <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::RequestSoftwareInputPanel</db:link></db:code> event to the widget yourself.</db:para>
         </db:note>
         <db:para>setFocus() gives focus to a widget regardless of its focus policy, but does not clear any keyboard grab (see <db:code><db:link xlink:href="qwidget.html#grabKeyboard">grabKeyboard</db:link>()</db:code>).</db:para>
         <db:para>Be aware that if the widget is hidden, it will not accept focus until it is shown.</db:para>
         <db:warning>
            <db:para> If you call setFocus() in a function which may itself be called from <db:code><db:link xlink:href="qwidget.html#focusOutEvent">focusOutEvent</db:link>()</db:code> or <db:code><db:link xlink:href="qwidget.html#focusInEvent">focusInEvent</db:link>()</db:code>, you may get an infinite recursion.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focus-prop">hasFocus</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#clearFocus">clearFocus</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusInEvent">focusInEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusOutEvent">focusOutEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusPolicy-prop">setFocusPolicy</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusWidget">focusWidget</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qapplication.html#focusWidget">QApplication::focusWidget</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#grabKeyboard">grabKeyboard</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#grabMouse">grabMouse</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="focus.html">Keyboard Focus in Widgets</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::RequestSoftwareInputPanel</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setFocus-2">
         <db:title>[slot] void QWidget::​setFocus()</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Gives the keyboard input focus to this widget (or its focus proxy) if this widget or one of its parents is the <db:link xlink:href="qwidget.html#isActiveWindow-prop">active window</db:link>.</db:para>
      </db:section>
      <db:section xml:id="setFocusProxy">
         <db:title>void QWidget::​setFocusProxy(<db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Sets the widget's focus proxy to widget <db:emphasis>w</db:emphasis>. If <db:emphasis>w</db:emphasis> is 0, the function resets this widget to have no focus proxy.</db:para>
         <db:para>Some widgets can "have focus", but create a child widget, such as <db:code><db:link xlink:href="qlineedit.html">QLineEdit</db:link></db:code>, to actually handle the focus. In this case, the widget can set the line edit to be its focus proxy.</db:para>
         <db:para>setFocusProxy() sets the widget which will actually get focus when "this widget" gets it. If there is a focus proxy, <db:code><db:link xlink:href="qwidget.html#setFocus">setFocus</db:link>()</db:code> and <db:code><db:link xlink:href="qwidget.html#focus-prop">hasFocus</db:link>()</db:code> operate on the focus proxy.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusProxy">focusProxy</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setForegroundRole">
         <db:title>void QWidget::​setForegroundRole(<db:link xlink:href="qtgui/qpalette.html#ColorRole-enum">QPalette::ColorRole</db:link></db:title>
         <db:para>Sets the foreground role of the widget to <db:emphasis>role</db:emphasis>.</db:para>
         <db:para>The foreground role defines the color from the widget's <db:link xlink:href="qwidget.html#palette-prop">palette</db:link> that is used to draw the foreground.</db:para>
         <db:para>If <db:emphasis>role</db:emphasis> is <db:code><db:link xlink:href="qtgui/qpalette.html#ColorRole-enum">QPalette::NoRole</db:link></db:code>, the widget uses a foreground role that contrasts with the background role.</db:para>
         <db:para>Note that styles are free to choose any color from the palette. You can modify the palette or set a style sheet if you don't achieve the result you want with setForegroundRole().</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#foregroundRole">foregroundRole</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#backgroundRole">backgroundRole</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setGraphicsEffect">
         <db:title>void QWidget::​setGraphicsEffect(<db:link xlink:href="qgraphicseffect.html">QGraphicsEffect</db:link></db:title>
         <db:para>The setGraphicsEffect function is for setting the widget's graphics effect.</db:para>
         <db:para>Sets <db:emphasis>effect</db:emphasis> as the widget's effect. If there already is an effect installed on this widget, <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> will delete the existing effect before installing the new <db:emphasis>effect</db:emphasis>.</db:para>
         <db:para>If <db:emphasis>effect</db:emphasis> is the installed effect on a different widget, setGraphicsEffect() will remove the effect from the widget and install it on this widget.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> takes ownership of <db:emphasis>effect</db:emphasis>.</db:para>
         <db:note>
            <db:para>This function will apply the effect on itself and all its children.</db:para>
         </db:note>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#graphicsEffect">graphicsEffect</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setHidden">
         <db:title>[slot] void QWidget::​setHidden(bool hidden)</db:title>
         <db:para>Convenience function, equivalent to <db:link xlink:href="qwidget.html#visible-prop">setVisible</db:link>
            <db:emphasis>hidden</db:emphasis>).</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#isHidden">isHidden</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setLayout">
         <db:title>void QWidget::​setLayout(<db:link xlink:href="qlayout.html">QLayout</db:link></db:title>
         <db:para>Sets the layout manager for this widget to <db:emphasis>layout</db:emphasis>.</db:para>
         <db:para>If there already is a layout manager installed on this widget, <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> won't let you install another. You must first delete the existing layout manager (returned by <db:code><db:link xlink:href="qwidget.html#layout">layout</db:link>()</db:code>) before you can call setLayout() with the new layout.</db:para>
         <db:para>If <db:emphasis>layout</db:emphasis> is the layout manager on a different widget, setLayout() will reparent the layout and make it the layout manager for this widget.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>QVBoxLayout*layout =newQVBoxLayout; layout-&gt;addWidget(formWidget); setLayout(layout);</db:programlisting>
         <db:para>An alternative to calling this function is to pass this widget to the layout's constructor.</db:para>
         <db:para>The <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> will take ownership of <db:emphasis>layout</db:emphasis>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#layout">layout</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="layout.html">Layout Management</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setMask">
         <db:title>void QWidget::​setMask(const <db:link xlink:href="qtgui/qbitmap.html">QBitmap</db:link></db:title>
         <db:para>Causes only the pixels of the widget for which <db:emphasis>bitmap</db:emphasis> has a corresponding 1 bit to be visible. If the region includes pixels outside the <db:code><db:link xlink:href="qwidget.html#rect-prop">rect</db:link>()</db:code> of the widget, window system controls in that area may or may not be visible, depending on the platform.</db:para>
         <db:para>Note that this effect can be slow if the region is particularly complex.</db:para>
         <db:para>The following code shows how an image with an alpha channel can be used to generate a mask for a widget:</db:para>
         <db:programlisting>QLabel topLevelLabel; QPixmap pixmap(":/images/tux.png"); topLevelLabel.setPixmap(pixmap); topLevelLabel.setMask(pixmap.mask());</db:programlisting>
         <db:para>The label shown by this code is masked using the image it contains, giving the appearance that an irregularly-shaped image is being drawn directly onto the screen.</db:para>
         <db:para>Masked widgets receive mouse events only on their visible portions.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#mask">mask</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#clearMask">clearMask</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#windowOpacity-prop">windowOpacity</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtwidgets-widgets-shapedclock-example.html">Shaped Clock Example</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setMask-2">
         <db:title>void QWidget::​setMask(const <db:link xlink:href="qtgui/qregion.html">QRegion</db:link></db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Causes only the parts of the widget which overlap <db:emphasis>region</db:emphasis> to be visible. If the region includes pixels outside the <db:code><db:link xlink:href="qwidget.html#rect-prop">rect</db:link>()</db:code> of the widget, window system controls in that area may or may not be visible, depending on the platform.</db:para>
         <db:para>Note that this effect can be slow if the region is particularly complex.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#windowOpacity-prop">windowOpacity</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setParent">
         <db:title>void QWidget::​setParent(<db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Sets the parent of the widget to <db:emphasis>parent</db:emphasis>, and resets the window flags. The widget is moved to position (0, 0) in its new parent.</db:para>
         <db:para>If the new parent widget is in a different window, the reparented widget and its children are appended to the end of the <db:link xlink:href="qwidget.html#focusPolicy-prop">tab chain</db:link> of the new parent widget, in the same internal order as before. If one of the moved widgets had keyboard focus, setParent() calls <db:code><db:link xlink:href="qwidget.html#clearFocus">clearFocus</db:link>()</db:code> for that widget.</db:para>
         <db:para>If the new parent widget is in the same window as the old parent, setting the parent doesn't change the tab order or keyboard focus.</db:para>
         <db:para>If the "new" parent widget is the old parent widget, this function does nothing.</db:para>
         <db:note>
            <db:para>The widget becomes invisible as part of changing its parent, even if it was previously visible. You must call <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code> to make the widget visible again.</db:para>
         </db:note>
         <db:warning>
            <db:para> It is very unlikely that you will ever need this function. If you have a widget that changes its content dynamically, it is far easier to use <db:code><db:link xlink:href="qstackedwidget.html">QStackedWidget</db:link></db:code>.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#windowFlags-prop">setWindowFlags</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setParent-2">
         <db:title>void QWidget::​setParent(<db:link xlink:href="qwidget.html#QWidget">QWidget</db:link><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::WindowFlags</db:link></db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>This function also takes widget flags, <db:emphasis>f</db:emphasis> as an argument.</db:para>
      </db:section>
      <db:section xml:id="setShortcutAutoRepeat">
         <db:title>void QWidget::​setShortcutAutoRepeat(int id, bool enable = true)</db:title>
         <db:para>If <db:emphasis>enable</db:emphasis> is true, auto repeat of the shortcut with the given <db:emphasis>id</db:emphasis> is enabled; otherwise it is disabled.</db:para>
         <db:para>This function was introduced in Qt 4.2.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#grabShortcut">grabShortcut</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#releaseShortcut">releaseShortcut</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setShortcutEnabled">
         <db:title>void QWidget::​setShortcutEnabled(int id, bool enable = true)</db:title>
         <db:para>If <db:emphasis>enable</db:emphasis> is true, the shortcut with the given <db:emphasis>id</db:emphasis> is enabled; otherwise the shortcut is disabled.</db:para>
         <db:warning>
            <db:para> You should not normally need to use this function since Qt's shortcut system enables/disables shortcuts automatically as widgets become hidden/visible and gain or lose focus. It is best to use <db:code><db:link xlink:href="qaction.html">QAction</db:link></db:code> or <db:code><db:link xlink:href="qshortcut.html">QShortcut</db:link></db:code> to handle shortcuts, since they are easier to use than this low-level function.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#grabShortcut">grabShortcut</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#releaseShortcut">releaseShortcut</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setStyle">
         <db:title>void QWidget::​setStyle(<db:link xlink:href="qstyle.html">QStyle</db:link></db:title>
         <db:para>Sets the widget's GUI style to <db:emphasis>style</db:emphasis>. The ownership of the style object is not transferred.</db:para>
         <db:para>If no style is set, the widget uses the application's style, <db:code><db:link xlink:href="qapplication.html#style">QApplication::style</db:link>()</db:code> instead.</db:para>
         <db:para>Setting a widget's style has no effect on existing or future child widgets.</db:para>
         <db:warning>
            <db:para> This function is particularly useful for demonstration purposes, where you want to show Qt's styling capabilities. Real applications should avoid it and use one consistent GUI style instead.</db:para>
         </db:warning>
         <db:warning>
            <db:para> Qt style sheets are currently not supported for custom <db:code><db:link xlink:href="qstyle.html">QStyle</db:link></db:code> subclasses. We plan to address this in some future release.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#style">style</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qstyle.html">QStyle</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qapplication.html#style">QApplication::style</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qapplication.html#setStyle">QApplication::setStyle</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setTabOrder">
         <db:title>[static] void QWidget::​setTabOrder(<db:link xlink:href="qwidget.html#QWidget">QWidget</db:link><db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Puts the <db:emphasis>second</db:emphasis> widget after the <db:emphasis>first</db:emphasis> widget in the focus order.</db:para>
         <db:para>Note that since the tab order of the <db:emphasis>second</db:emphasis> widget is changed, you should order a chain like this:</db:para>
         <db:programlisting>setTabOrder(a, b); // a to b setTabOrder(b, c); // a to b to c setTabOrder(c, d); // a to b to c to d</db:programlisting>
         <db:para>
            <db:emphasis>not</db:emphasis> like this:</db:para>
         <db:programlisting>// WRONG setTabOrder(c, d); // c to d setTabOrder(a, b); // a to b AND c to d setTabOrder(b, c); // a to b to c, but not c to d</db:programlisting>
         <db:para>If <db:emphasis>first</db:emphasis> or <db:emphasis>second</db:emphasis> has a focus proxy, setTabOrder() correctly substitutes the proxy.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#focusPolicy-prop">setFocusPolicy</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setFocusProxy">setFocusProxy</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="focus.html">Keyboard Focus in Widgets</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setWindowRole">
         <db:title>void QWidget::​setWindowRole(const <db:link xlink:href="qtcore/qstring.html">QString</db:link></db:title>
         <db:para>Sets the window's role to <db:emphasis>role</db:emphasis>. This only makes sense for windows on X11.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#windowRole">windowRole</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setWindowState">
         <db:title>void QWidget::​setWindowState(<db:link xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowStates</db:link></db:title>
         <db:para>Sets the window state to <db:emphasis>windowState</db:emphasis>. The window state is a OR'ed combination of <db:code><db:link xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowState</db:link></db:code>: <db:code><db:link xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowMinimized</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowMaximized</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowFullScreen</db:link></db:code>, and <db:code><db:link xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowActive</db:link></db:code>.</db:para>
         <db:para>If the window is not visible (i.e. <db:code><db:link xlink:href="qwidget.html#visible-prop">isVisible</db:link>()</db:code> returns <db:code>false</db:code>), the window state will take effect when <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code> is called. For visible windows, the change is immediate. For example, to toggle between full-screen and normal mode, use the following code:</db:para>
         <db:programlisting>w-&gt;setWindowState(w-&gt;windowState() ^Qt::WindowFullScreen);</db:programlisting>
         <db:para>In order to restore and activate a minimized window (while preserving its maximized and/or full-screen state), use the following:</db:para>
         <db:programlisting>w-&gt;setWindowState((w-&gt;windowState() &amp;~Qt::WindowMinimized) |Qt::WindowActive);</db:programlisting>
         <db:para>Calling this function will hide the widget. You must call <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code> to make the widget visible again.</db:para>
         <db:note>
            <db:para>On some window systems <db:code><db:link xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowActive</db:link></db:code> is not immediate, and may be ignored in certain cases.</db:para>
         </db:note>
         <db:para>When the window state changes, the widget receives a <db:code><db:link xlink:href="qwidget.html#changeEvent">changeEvent</db:link>()</db:code> of type <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::WindowStateChange</db:link></db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowState</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#windowState">windowState</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setupUi">
         <db:title>void QWidget::​setupUi(<db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Sets up the user interface for the specified <db:emphasis>widget</db:emphasis>.</db:para>
         <db:note>
            <db:para>This function is available with widgets that derive from user interface descriptions created using <db:link xlink:href="qtdoc/uic.html#uic">uic</db:link>.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qtdesigner/designer-using-a-ui-file.html">Using a Designer UI File in Your Application</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="sharedPainter">
         <db:title>[virtual protected] <db:link xlink:href="qtgui/qpainter.html">QPainter</db:link></db:title>
         <db:para/>
      </db:section>
      <db:section xml:id="show">
         <db:title>[slot] void QWidget::​show()</db:title>
         <db:para>Shows the widget and its child widgets.</db:para>
         <db:para>This is equivalent to calling <db:code><db:link xlink:href="qwidget.html#showFullScreen">showFullScreen</db:link>()</db:code>, <db:code><db:link xlink:href="qwidget.html#showMaximized">showMaximized</db:link>()</db:code>, or <db:link xlink:href="qwidget.html#visible-prop">setVisible</db:link>, depending on the platform's default behavior for the window flags.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#raise">raise</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showEvent">showEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#hide">hide</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#visible-prop">setVisible</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showMinimized">showMinimized</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showMaximized">showMaximized</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showNormal">showNormal</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#visible-prop">isVisible</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#windowFlags-prop">windowFlags</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="showEvent">
         <db:title>[virtual protected] void QWidget::​showEvent(<db:link xlink:href="qtgui/qshowevent.html">QShowEvent</db:link></db:title>
         <db:para>This event handler can be reimplemented in a subclass to receive widget show events which are passed in the <db:emphasis>event</db:emphasis> parameter.</db:para>
         <db:para>Non-spontaneous show events are sent to widgets immediately before they are shown. The spontaneous show events of windows are delivered afterwards.</db:para>
         <db:para>Note: A widget receives spontaneous show and hide events when its mapping status is changed by the window system, e.g. a spontaneous hide event when the user minimizes the window, and a spontaneous show event when the window is restored again. After receiving a spontaneous hide event, a widget is still considered visible in the sense of <db:code><db:link xlink:href="qwidget.html#visible-prop">isVisible</db:link>()</db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#visible-prop">visible</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qshowevent.html">QShowEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="showFullScreen">
         <db:title>[slot] void QWidget::​showFullScreen()</db:title>
         <db:para>Shows the widget in full-screen mode.</db:para>
         <db:para>Calling this function only affects <db:link xlink:href="qwidget.html#isWindow">windows</db:link>.</db:para>
         <db:para>To return from full-screen mode, call <db:code><db:link xlink:href="qwidget.html#showNormal">showNormal</db:link>()</db:code>.</db:para>
         <db:para>Full-screen mode works fine under Windows, but has certain problems under X. These problems are due to limitations of the ICCCM protocol that specifies the communication between X11 clients and the window manager. ICCCM simply does not understand the concept of non-decorated full-screen windows. Therefore, the best we can do is to request a borderless window and place and resize it to fill the entire screen. Depending on the window manager, this may or may not work. The borderless window is requested using MOTIF hints, which are at least partially supported by virtually all modern window managers.</db:para>
         <db:para>An alternative would be to bypass the window manager entirely and create a window with the <db:code><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::X11BypassWindowManagerHint</db:link></db:code> flag. This has other severe problems though, like totally broken keyboard focus and very strange effects on desktop changes or when the user raises other windows.</db:para>
         <db:para>X11 window managers that follow modern post-ICCCM specifications support full-screen mode properly.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showNormal">showNormal</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showMaximized">showMaximized</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#hide">hide</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#visible-prop">isVisible</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="showMaximized">
         <db:title>[slot] void QWidget::​showMaximized()</db:title>
         <db:para>Shows the widget maximized.</db:para>
         <db:para>Calling this function only affects <db:link xlink:href="qwidget.html#isWindow">windows</db:link>.</db:para>
         <db:para>On X11, this function may not work properly with certain window managers. See the <db:link xlink:href="application-windows.html#window-geometry">Window Geometry</db:link> documentation for an explanation.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setWindowState">setWindowState</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showNormal">showNormal</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showMinimized">showMinimized</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#hide">hide</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#visible-prop">isVisible</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="showMinimized">
         <db:title>[slot] void QWidget::​showMinimized()</db:title>
         <db:para>Shows the widget minimized, as an icon.</db:para>
         <db:para>Calling this function only affects <db:link xlink:href="qwidget.html#isWindow">windows</db:link>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showNormal">showNormal</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showMaximized">showMaximized</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#hide">hide</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#visible-prop">isVisible</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#minimized-prop">isMinimized</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="showNormal">
         <db:title>[slot] void QWidget::​showNormal()</db:title>
         <db:para>Restores the widget after it has been maximized or minimized.</db:para>
         <db:para>Calling this function only affects <db:link xlink:href="qwidget.html#isWindow">windows</db:link>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setWindowState">setWindowState</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showMinimized">showMinimized</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#showMaximized">showMaximized</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#show">show</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#hide">hide</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#visible-prop">isVisible</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="stackUnder">
         <db:title>void QWidget::​stackUnder(<db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Places the widget under <db:emphasis>w</db:emphasis> in the parent widget's stack.</db:para>
         <db:para>To make this work, the widget itself and <db:emphasis>w</db:emphasis> must be siblings.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#raise">raise</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#lower">lower</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="style">
         <db:title><db:link xlink:href="qstyle.html">QStyle</db:link></db:title>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setStyle">QWidget::setStyle</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qapplication.html#setStyle">QApplication::setStyle</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qapplication.html#style">QApplication::style</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="tabletEvent">
         <db:title>[virtual protected] void QWidget::​tabletEvent(<db:link xlink:href="qtgui/qtabletevent.html">QTabletEvent</db:link></db:title>
         <db:para>This event handler, for event <db:emphasis>event</db:emphasis>, can be reimplemented in a subclass to receive tablet events for the widget.</db:para>
         <db:para>If you reimplement this handler, it is very important that you <db:link xlink:href="qtgui/qtabletevent.html">ignore()</db:link> the event if you do not handle it, so that the widget's parent can interpret it.</db:para>
         <db:para>The default implementation ignores the event.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qtabletevent.html">QTabletEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="testAttribute">
         <db:title>bool QWidget::​testAttribute(<db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WidgetAttribute</db:link></db:title>
         <db:para>Returns <db:code>true</db:code> if attribute <db:emphasis>attribute</db:emphasis> is set on this widget; otherwise returns <db:code>false</db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setAttribute">setAttribute</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="underMouse">
         <db:title>bool QWidget::​underMouse() const</db:title>
         <db:para>Returns <db:code>true</db:code> if the widget is under the mouse cursor; otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>This value is not updated properly during drag and drop operations.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#enterEvent">enterEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#leaveEvent">leaveEvent</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="ungrabGesture">
         <db:title>void QWidget::​ungrabGesture(<db:link xlink:href="qtcore/qt.html#GestureType-enum">Qt::GestureType</db:link></db:title>
         <db:para>Unsubscribes the widget from a given <db:emphasis>gesture</db:emphasis> type</db:para>
         <db:para>This function was introduced in Qt 4.6.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#grabGesture">grabGesture</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qgestureevent.html">QGestureEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="update">
         <db:title>[slot] void QWidget::​update()</db:title>
         <db:para>Updates the widget unless updates are disabled or the widget is hidden.</db:para>
         <db:para>This function does not cause an immediate repaint; instead it schedules a paint event for processing when Qt returns to the main event loop. This permits Qt to optimize for more speed and less flicker than a call to <db:code><db:link xlink:href="qwidget.html#repaint">repaint</db:link>()</db:code> does.</db:para>
         <db:para>Calling update() several times normally results in just one <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code> call.</db:para>
         <db:para>Qt normally erases the widget's area before the <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code> call. If the <db:code><db:link xlink:href="qtcore/qt.html#WidgetAttribute-enum">Qt::WA_OpaquePaintEvent</db:link></db:code> widget attribute is set, the widget is responsible for painting all its pixels with an opaque color.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#repaint">repaint</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#paintEvent">paintEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#updatesEnabled-prop">setUpdatesEnabled</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtwidgets-widgets-analogclock-example.html">Analog Clock Example</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="update-2">
         <db:title>void QWidget::​update(int x, int y, int w, int h)</db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>This version updates a rectangle (<db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis>, <db:emphasis>w</db:emphasis>, <db:emphasis>h</db:emphasis>) inside the widget.</db:para>
      </db:section>
      <db:section xml:id="update-3">
         <db:title>void QWidget::​update(const <db:link xlink:href="qtcore/qrect.html">QRect</db:link></db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>This version updates a rectangle <db:emphasis>rect</db:emphasis> inside the widget.</db:para>
      </db:section>
      <db:section xml:id="update-4">
         <db:title>void QWidget::​update(const <db:link xlink:href="qtgui/qregion.html">QRegion</db:link></db:title>
         <db:para>This is an overloaded function.</db:para>
         <db:para>This version repaints a region <db:emphasis>rgn</db:emphasis> inside the widget.</db:para>
      </db:section>
      <db:section xml:id="updateGeometry">
         <db:title>void QWidget::​updateGeometry()</db:title>
         <db:para>Notifies the layout system that this widget has changed and may need to change geometry.</db:para>
         <db:para>Call this function if the <db:code><db:link xlink:href="qwidget.html#sizeHint-prop">sizeHint</db:link>()</db:code> or <db:code><db:link xlink:href="qwidget.html#sizePolicy-prop">sizePolicy</db:link>()</db:code> have changed.</db:para>
         <db:para>For explicitly hidden widgets, updateGeometry() is a no-op. The layout system will be notified as soon as the widget is shown.</db:para>
      </db:section>
      <db:section xml:id="updateMicroFocus">
         <db:title>[protected slot] void QWidget::​updateMicroFocus()</db:title>
         <db:para>Updates the widget's micro focus.</db:para>
      </db:section>
      <db:section xml:id="visibleRegion">
         <db:title><db:link xlink:href="qtgui/qregion.html">QRegion</db:link></db:title>
         <db:para>Returns the unobscured region where paint events can occur.</db:para>
         <db:para>For visible widgets, this is an approximation of the area not covered by other widgets; otherwise, this is an empty region.</db:para>
         <db:para>The <db:code><db:link xlink:href="qwidget.html#repaint">repaint</db:link>()</db:code> function calls this function if necessary, so in general you do not need to call it.</db:para>
      </db:section>
      <db:section xml:id="wheelEvent">
         <db:title>[virtual protected] void QWidget::​wheelEvent(<db:link xlink:href="qtgui/qwheelevent.html">QWheelEvent</db:link></db:title>
         <db:para>This event handler, for event <db:emphasis>event</db:emphasis>, can be reimplemented in a subclass to receive wheel events for the widget.</db:para>
         <db:para>If you reimplement this handler, it is very important that you <db:link xlink:href="qtgui/qwheelevent.html">ignore()</db:link> the event if you do not handle it, so that the widget's parent can interpret it.</db:para>
         <db:para>The default implementation ignores the event.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtgui/qwheelevent.html">QWheelEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="winId">
         <db:title>WId QWidget::​winId() const</db:title>
         <db:para>Returns the window system identifier of the widget.</db:para>
         <db:para>Portable in principle, but if you use it you are probably about to do something non-portable. Be careful.</db:para>
         <db:para>If a widget is non-native (alien) and winId() is invoked on it, that widget will be provided a native handle.</db:para>
         <db:para>On Mac OS X, the type returned depends on which framework Qt was linked against. If Qt is using Carbon, the {WId} is actually an HIViewRef. If Qt is using Cocoa, {WId} is a pointer to an NSView.</db:para>
         <db:para>This value may change at run-time. An event with type <db:code><db:link xlink:href="qtcore/qevent.html#Type-enum">QEvent::WinIdChange</db:link></db:code> will be sent to the widget following a change in window system identifier.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#find">find</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="window">
         <db:title><db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
         <db:para>Returns the window for this widget, i.e. the next ancestor widget that has (or could have) a window-system frame.</db:para>
         <db:para>If the widget is a window, the widget itself is returned.</db:para>
         <db:para>Typical usage is changing the window title:</db:para>
         <db:programlisting>aWidget-&gt;window()-&gt;setWindowTitle("New Window Title");</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#isWindow">isWindow</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="windowHandle">
         <db:title><db:link xlink:href="qtgui/qwindow.html">QWindow</db:link></db:title>
         <db:para>If this is a native widget, return the associated <db:code><db:link xlink:href="qtgui/qwindow.html">QWindow</db:link></db:code>. Otherwise return null.</db:para>
         <db:para>Native widgets include toplevel widgets, QGLWidget, and child widgets on which <db:code><db:link xlink:href="qwidget.html#winId">winId</db:link>()</db:code> was called.</db:para>
         <db:para>This function was introduced in Qt 5.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#winId">winId</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="windowRole">
         <db:title><db:link xlink:href="qtcore/qstring.html">QString</db:link></db:title>
         <db:para>Returns the window's role, or an empty string.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setWindowRole">setWindowRole</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#windowIcon-prop">windowIcon</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qwidget.html#windowTitle-prop">windowTitle</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="windowState">
         <db:title><db:link xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowStates</db:link></db:title>
         <db:para>Returns the current window state. The window state is a OR'ed combination of <db:code><db:link xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowState</db:link></db:code>: <db:code><db:link xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowMinimized</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowMaximized</db:link></db:code>, <db:code><db:link xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowFullScreen</db:link></db:code>, and <db:code><db:link xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowActive</db:link></db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtcore/qt.html#WindowState-enum">Qt::WindowState</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#setWindowState">setWindowState</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="windowType">
         <db:title><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::WindowType</db:link></db:title>
         <db:para>Returns the window type of this widget. This is identical to <db:code><db:link xlink:href="qwidget.html#windowFlags-prop">windowFlags</db:link>()</db:code> &amp; <db:code><db:link xlink:href="qtcore/qt.html#WindowType-enum">Qt::WindowType_Mask</db:link></db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qwidget.html#windowFlags-prop">windowFlags</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="x11Info">
         <db:title>const QX11Info &amp; QWidget::​x11Info() const</db:title>
         <db:para/>
      </db:section>
      <db:section xml:id="x11PictureHandle">
         <db:title><db:link xlink:href="qtcore/qt.html#HANDLE-typedef">Qt::HANDLE</db:link></db:title>
         <db:para/>
      </db:section>
   </db:section>
   <db:section xml:id="macros">
      <db:title>Macro Documentation</db:title>
      <db:section xml:id="QWIDGETSIZE_MAX">
         <db:title>QWIDGETSIZE_MAX</db:title>
         <db:para>Defines the maximum size for a <db:code><db:link xlink:href="qwidget.html">QWidget</db:link></db:code> object.</db:para>
         <db:para>The largest allowed size for a widget is <db:code><db:link xlink:href="qtcore/qsize.html">QSize</db:link></db:code>, i.e. <db:code><db:link xlink:href="qtcore/qsize.html">QSize</db:link></db:code> (16777215,16777215).</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#maximumSize-prop">QWidget::setMaximumSize</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Obsolete Members</db:title>
      <db:section xml:id="obsolete_memfunc">
         <db:title>Member Function Documentation</db:title>
         <db:section xml:id="isEnabledToTLW">
            <db:title>bool QWidget::​isEnabledToTLW() const</db:title>
            <db:para>This function is deprecated. It is equivalent to <db:code><db:link xlink:href="qwidget.html#enabled-prop">isEnabled</db:link>()</db:code>
            </db:para>
         </db:section>
         <db:section xml:id="isTopLevel">
            <db:title>bool QWidget::​isTopLevel() const</db:title>
            <db:para>Use <db:code><db:link xlink:href="qwidget.html#isWindow">isWindow</db:link>()</db:code> instead.</db:para>
         </db:section>
         <db:section xml:id="topLevelWidget">
            <db:title><db:link xlink:href="qwidget.html#QWidget">QWidget</db:link></db:title>
            <db:para>Use <db:code><db:link xlink:href="qwidget.html#window">window</db:link>()</db:code> instead.</db:para>
         </db:section>
      </db:section>
   </db:section>
</db:article>
