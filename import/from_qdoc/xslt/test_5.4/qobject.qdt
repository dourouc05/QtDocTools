<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.1-extension qtdoctools-1.0"
            xml:lang="en">
   <db:title>QObject Class</db:title>
   <db:classsynopsis>
      <db:ooclass>
         <db:classname>QObject</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="header">#include
                                                  &lt;QObject&gt;</db:classsynopsisinfo>
      <db:classsynopsisinfo role="qmake"> QT +=
                                                core</db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qabstractanimation.html">QAbstractAnimation</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qabstracteventdispatcher.html">QAbstractEventDispatcher</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qabstractitemmodel.html">QAbstractItemModel</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qabstractstate.html">QAbstractState</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qabstracttransition.html">QAbstractTransition</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qcoreapplication.html">QCoreApplication</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qeventloop.html">QEventLoop</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qfileselector.html">QFileSelector</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qfilesystemwatcher.html">QFileSystemWatcher</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qfuturewatcher.html">QFutureWatcher</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qiodevice.html">QIODevice</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qitemselectionmodel.html">QItemSelectionModel</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qlibrary.html">QLibrary</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qmimedata.html">QMimeData</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qobjectcleanuphandler.html">QObjectCleanupHandler</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qpluginloader.html">QPluginLoader</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qsettings.html">QSettings</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qsharedmemory.html">QSharedMemory</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qsignalmapper.html">QSignalMapper</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qsocketnotifier.html">QSocketNotifier</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qthread.html">QThread</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qthreadpool.html">QThreadPool</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qtimeline.html">QTimeLine</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qtimer.html">QTimer</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qtranslator.html">QTranslator</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="inheritedBy">
         <db:link xlink:href="qwineventnotifier.html">QWinEventNotifier</db:link>
      </db:classsynopsisinfo>
      <db:fieldsynopsis>
         <db:modifier>(Qt property)</db:modifier>
         <db:type xlink:href="qstring.html">QString</db:type>
         <db:varname>objectName</db:varname>
      </db:fieldsynopsis>
      <db:fieldsynopsis>
         <db:modifier>(public variable)</db:modifier>
         <db:type xlink:href="qmetaobject.html">QMetaObject</db:type>
         <db:varname>staticMetaObject</db:varname>
      </db:fieldsynopsis>
      <db:constructorsynopsis xlink:href="#QObject">
         <db:methodname>QObject</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QObject 
                                        *  parent  = 0)</db:exceptionname>
      </db:constructorsynopsis>
      <db:destructorsynopsis xlink:href="dtor.QObject">
         <db:methodname>~QObject</db:methodname>
         <db:void/>
      </db:destructorsynopsis>
      <db:methodsynopsis xlink:href="blockSignals">
         <db:type>bool</db:type>
         <db:methodname>blockSignals</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( bool  block )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="childEvent">
         <db:void/>
         <db:methodname>childEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QChildEvent 
                                        *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="children">
         <db:type xlink:href="qobject.html#QObjectList-typedef">QObjectList</db:type>
         <db:methodname>children</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="connect">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:type>
         <db:methodname>connect</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QObject  *  sender ,
                                    const  char  * 
                                        signal , const  QObject 
                                        *  receiver , const  char  *  method ,  Qt::ConnectionType 
                                        type  = Qt::AutoConnection)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="connect-2">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:type>
         <db:methodname>connect</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QObject  *  sender ,
                                    const  QMetaMethod  &amp; 
                                        signal , const  QObject 
                                        *  receiver , const  QMetaMethod  &amp; 
                                        method ,  Qt::ConnectionType 
                                        type  = Qt::AutoConnection)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="connect-3">
         <db:type xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:type>
         <db:methodname>connect</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QObject  *  sender ,
                                    const  char  * 
                                        signal , const  char  *  method ,  Qt::ConnectionType 
                                        type  = Qt::AutoConnection) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="connect-4">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:type>
         <db:methodname>connect</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QObject  *  sender ,
                                         PointerToMemberFunction 
                                    signal , const  QObject 
                                        *  receiver ,  PointerToMemberFunction 
                                    method ,  Qt::ConnectionType 
                                        type  = Qt::AutoConnection)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="connect-5">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:type>
         <db:methodname>connect</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QObject  *  sender ,
                                         PointerToMemberFunction 
                                    signal ,  Functor  functor )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="connect-6">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:type>
         <db:methodname>connect</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QObject  *  sender ,
                                         PointerToMemberFunction 
                                    signal , const  QObject 
                                        *  context ,  Functor  functor ,  Qt::ConnectionType 
                                        type  = Qt::AutoConnection)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="connectNotify">
         <db:void/>
         <db:methodname>connectNotify</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QMetaMethod 
                                        &amp;  signal )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="customEvent">
         <db:void/>
         <db:methodname>customEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QEvent  * 
                                        event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="deleteLater">
         <db:void/>
         <db:methodname>deleteLater</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="destroyed">
         <db:void/>
         <db:methodname>destroyed</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QObject  *  obj  =
                                    0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="disconnect">
         <db:modifier>static</db:modifier>
         <db:type>bool</db:type>
         <db:methodname>disconnect</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QObject  *  sender ,
                                    const  char  * 
                                        signal , const  QObject 
                                        *  receiver , const  char  *  method )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="disconnect-2">
         <db:modifier>static</db:modifier>
         <db:type>bool</db:type>
         <db:methodname>disconnect</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QObject  *  sender ,
                                    const  QMetaMethod  &amp; 
                                        signal , const  QObject 
                                        *  receiver , const  QMetaMethod  &amp; 
                                        method )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="disconnect-3">
         <db:modifier>static</db:modifier>
         <db:type>bool</db:type>
         <db:methodname>disconnect</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QMetaObject::Connection 
                                        &amp;  connection )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="disconnect-4">
         <db:type>bool</db:type>
         <db:methodname>disconnect</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  char  *  signal  = 0, const
                                         QObject  * 
                                        receiver  = 0, const  char  *  method  = 0)
                                    const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="disconnect-5">
         <db:type>bool</db:type>
         <db:methodname>disconnect</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QObject 
                                        *  receiver , const  char  *  method  = 0)
                                    const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="disconnect-6">
         <db:modifier>static</db:modifier>
         <db:type>bool</db:type>
         <db:methodname>disconnect</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QObject  *  sender ,
                                         PointerToMemberFunction 
                                    signal , const  QObject 
                                        *  receiver ,  PointerToMemberFunction 
                                    method )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="disconnectNotify">
         <db:void/>
         <db:methodname>disconnectNotify</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QMetaMethod  &amp; 
                                        signal )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="dumpObjectInfo">
         <db:void/>
         <db:methodname>dumpObjectInfo</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="dumpObjectTree">
         <db:void/>
         <db:methodname>dumpObjectTree</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="dynamicPropertyNames">
         <db:type>QList&lt;QByteArray&gt;</db:type>
         <db:methodname>dynamicPropertyNames</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="event">
         <db:type>bool</db:type>
         <db:methodname>event</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QEvent 
                                        *  e )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="eventFilter">
         <db:type>bool</db:type>
         <db:methodname>eventFilter</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QObject  *  watched ,
                                         QEvent  * 
                                    event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="findChild">
         <db:type>T</db:type>
         <db:methodname>findChild</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QString  &amp; 
                                        name  = QString(),  Qt::FindChildOptions 
                                        options  = Qt::FindChildrenRecursively)
                                    const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="findChildren">
         <db:type>QList&lt;T&gt;</db:type>
         <db:methodname>findChildren</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QString  &amp;  name  =
                                    QString(),  Qt::FindChildOptions 
                                        options  = Qt::FindChildrenRecursively)
                                    const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="findChildren-2">
         <db:type>QList&lt;T&gt;</db:type>
         <db:methodname>findChildren</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QRegExp  &amp;  regExp ,
                                         Qt::FindChildOptions 
                                        options  = Qt::FindChildrenRecursively)
                                    const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="findChildren-3">
         <db:type>QList&lt;T&gt;</db:type>
         <db:methodname>findChildren</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QRegularExpression  &amp; 
                                        re ,  Qt::FindChildOptions 
                                        options  = Qt::FindChildrenRecursively)
                                    const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="inherits">
         <db:type>bool</db:type>
         <db:methodname>inherits</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         char  * 
                                        className ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="installEventFilter">
         <db:void/>
         <db:methodname>installEventFilter</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QObject  * 
                                    filterObj )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="isSignalConnected">
         <db:type>bool</db:type>
         <db:methodname>isSignalConnected</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QMetaMethod  &amp; 
                                        signal ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="isWidgetType">
         <db:type>bool</db:type>
         <db:methodname>isWidgetType</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="isWindowType">
         <db:type>bool</db:type>
         <db:methodname>isWindowType</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="killTimer">
         <db:void/>
         <db:methodname>killTimer</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  id )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="metaObject">
         <db:type xlink:href="qmetaobject.html">QMetaObject</db:type>
         <db:methodname>metaObject</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="moveToThread">
         <db:void/>
         <db:methodname>moveToThread</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QThread 
                                        *  targetThread )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="parent">
         <db:type xlink:href="qobject.html#QObject">QObject</db:type>
         <db:methodname>parent</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="property">
         <db:type xlink:href="qvariant.html">QVariant</db:type>
         <db:methodname>property</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         char  * 
                                        name ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="receivers">
         <db:type>int</db:type>
         <db:methodname>receivers</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  char  *  signal )
                                    const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="removeEventFilter">
         <db:void/>
         <db:methodname>removeEventFilter</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QObject  * 
                                    obj )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="sender">
         <db:type xlink:href="qobject.html#QObject">QObject</db:type>
         <db:methodname>sender</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="senderSignalIndex">
         <db:type>int</db:type>
         <db:methodname>senderSignalIndex</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setParent">
         <db:void/>
         <db:methodname>setParent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QObject 
                                        *  parent )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="setProperty">
         <db:type>bool</db:type>
         <db:methodname>setProperty</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  char  *  name , const  QVariant  &amp; 
                                    value )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="signalsBlocked">
         <db:type>bool</db:type>
         <db:methodname>signalsBlocked</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="startTimer">
         <db:type>int</db:type>
         <db:methodname>startTimer</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  interval ,  Qt::TimerType 
                                        timerType  = Qt::CoarseTimer)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="thread">
         <db:type xlink:href="qthread.html">QThread</db:type>
         <db:methodname>thread</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="timerEvent">
         <db:void/>
         <db:methodname>timerEvent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QTimerEvent 
                                        *  event )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="tr">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qstring.html">QString</db:type>
         <db:methodname>tr</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  char  *  sourceText , const
                                         char  * 
                                        disambiguation  = 0,  int  n  = -1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="trUtf8">
         <db:modifier>(obsolete)</db:modifier>
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qstring.html">QString</db:type>
         <db:methodname>trUtf8</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  char  *  sourceText , const  char  *  disambiguation  = 0,  int  n  = -1)</db:exceptionname>
      </db:methodsynopsis>
   </db:classsynopsis>
   <db:funcsynopsis xlink:href="#Q_CLASSINFO">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>Q_CLASSINFO</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>Name</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:parameter>Value</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#Q_DISABLE_COPY">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>Q_DISABLE_COPY</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>Class</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#Q_EMIT">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>Q_EMIT</db:function>
         </db:funcdef>
         <db:void/>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#Q_ENUMS">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>Q_ENUMS</db:function>
         </db:funcdef>
         <db:varargs/>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#Q_FLAGS">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>Q_FLAGS</db:function>
         </db:funcdef>
         <db:varargs/>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#Q_INTERFACES">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>Q_INTERFACES</db:function>
         </db:funcdef>
         <db:varargs/>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#Q_INVOKABLE">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>Q_INVOKABLE</db:function>
         </db:funcdef>
         <db:void/>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#Q_OBJECT">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>Q_OBJECT</db:function>
         </db:funcdef>
         <db:void/>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#Q_PROPERTY">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>Q_PROPERTY</db:function>
         </db:funcdef>
         <db:varargs/>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#Q_REVISION">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>Q_REVISION</db:function>
         </db:funcdef>
         <db:void/>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#Q_SET_OBJECT_NAME">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>Q_SET_OBJECT_NAME</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:parameter>Object</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#Q_SIGNAL">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>Q_SIGNAL</db:function>
         </db:funcdef>
         <db:void/>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#Q_SIGNALS">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>Q_SIGNALS</db:function>
         </db:funcdef>
         <db:void/>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#Q_SLOT">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>Q_SLOT</db:function>
         </db:funcdef>
         <db:void/>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#Q_SLOTS">
      <db:funcsynopsisinfo>macro</db:funcsynopsisinfo>
      <db:funcprototype>
         <db:funcdef>
            <db:function>Q_SLOTS</db:function>
         </db:funcdef>
         <db:void/>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:typedefsynopsis xlink:href="#QObjectList-typedef">
      <db:typedefname>QObjectList</db:typedefname>
   </db:typedefsynopsis>
   <db:funcsynopsis xlink:href="#qFindChildren">
      <db:funcprototype>
         <db:funcdef>
            <db:type>QList&lt;T&gt;</db:type>
            <db:function>qFindChildren</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>QObject&lt;QRegExp&gt;</db:type>
            <db:parameter>obj</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type xlink:href="qregexp.html">QRegExp</db:type>
            <db:parameter>regExp</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qobject_cast">
      <db:funcprototype>
         <db:funcdef>
            <db:type>T</db:type>
            <db:function>qobject_cast</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type xlink:href="qobject.html#QObject">QObject</db:type>
            <db:parameter>object</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qFindChild-2">
      <db:funcprototype>
         <db:modifier>(obsolete)</db:modifier>
         <db:funcdef>
            <db:type>T</db:type>
            <db:function>qFindChild</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>QObject&lt;QString&gt;</db:type>
            <db:parameter>obj</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type xlink:href="qstring.html">QString</db:type>
            <db:parameter>name</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qFindChildren-3">
      <db:funcprototype>
         <db:modifier>(obsolete)</db:modifier>
         <db:funcdef>
            <db:type>QList&lt;T&gt;</db:type>
            <db:function>qFindChildren</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type>QObject&lt;QString&gt;</db:type>
            <db:parameter>obj</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type xlink:href="qstring.html">QString</db:type>
            <db:parameter>name</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> class is
                                    the base class of all Qt objects.</db:para>
      <db:para>
         <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> is the heart of
                                    the Qt <db:link xlink:href="object.html">Object Model</db:link>. The
                                    central feature in this model is a very powerful mechanism for
                                    seamless object communication called <db:link xlink:href="signalsandslots.html#signals-and-slots">signals and
                                        slots</db:link>. You can connect a signal to a slot with
                                        <db:code><db:link xlink:href="qobject.html#connect">connect</db:link>()</db:code> and
                                    destroy the connection with <db:code><db:link xlink:href="qobject.html#disconnect">disconnect</db:link>()</db:code>. To
                                    avoid never ending notification loops you can temporarily block
                                    signals with <db:code><db:link xlink:href="qobject.html#blockSignals">blockSignals</db:link>()</db:code>. The protected functions <db:code><db:link xlink:href="qobject.html#connectNotify">connectNotify</db:link>()</db:code>
                                    and <db:code><db:link xlink:href="qobject.html#disconnectNotify">disconnectNotify</db:link>()</db:code> make it possible to track
                                    connections.</db:para>
      <db:para>QObjects organize themselves in <db:link xlink:href="objecttrees.html">object trees</db:link>. When you
                                    create a <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> with
                                    another object as parent, the object will automatically add
                                    itself to the parent's <db:code><db:link xlink:href="qobject.html#children">children</db:link>()</db:code> list. The parent takes ownership of the
                                    object; i.e., it will automatically delete its children in its
                                    destructor. You can look for an object by name and optionally
                                    type using <db:code><db:link xlink:href="qobject.html#findChild">findChild</db:link>()</db:code> or <db:code><db:link xlink:href="qobject.html#findChildren">findChildren</db:link>()</db:code>.</db:para>
      <db:para>Every object has an <db:code><db:link xlink:href="qobject.html#objectName-prop">objectName</db:link>()</db:code>
                                    and its class name can be found via the corresponding <db:code><db:link xlink:href="qobject.html#metaObject">metaObject</db:link>()</db:code> (see
                                        <db:code><db:link xlink:href="qmetaobject.html#className">QMetaObject::className</db:link>()</db:code>). You can determine
                                    whether the object's class inherits another class in the <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> inheritance hierarchy
                                    by using the <db:code><db:link xlink:href="qobject.html#inherits">inherits</db:link>()</db:code> function.</db:para>
      <db:para>When an object is deleted, it emits a <db:code><db:link xlink:href="qobject.html#destroyed">destroyed</db:link>()</db:code> signal.
                                    You can catch this signal to avoid dangling references to
                                    QObjects.</db:para>
      <db:para>QObjects can receive events through <db:code><db:link xlink:href="qobject.html#event">event</db:link>()</db:code> and filter the
                                    events of other objects. See <db:code><db:link xlink:href="qobject.html#installEventFilter">installEventFilter</db:link>()</db:code> and <db:code><db:link xlink:href="qobject.html#eventFilter">eventFilter</db:link>()</db:code> for
                                    details. A convenience handler, <db:code><db:link xlink:href="qobject.html#childEvent">childEvent</db:link>()</db:code>, can be
                                    reimplemented to catch child events.</db:para>
      <db:para>Last but not least, <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> provides the basic timer support in Qt;
                                    see <db:code><db:link xlink:href="qtimer.html">QTimer</db:link></db:code> for high-level
                                    support for timers.</db:para>
      <db:para>Notice that the <db:code><db:link xlink:href="qobject.html#Q_OBJECT">Q_OBJECT</db:link></db:code> macro is mandatory for any object that
                                    implements signals, slots or properties. You also need to run
                                    the <db:link xlink:href="qtdoc/moc.html#moc">Meta Object
                                        Compiler</db:link> on the source file. We strongly recommend
                                    the use of this macro in all subclasses of <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> regardless of whether
                                    or not they actually use signals, slots and properties, since
                                    failure to do so may lead certain functions to exhibit strange
                                    behavior.</db:para>
      <db:para>All Qt widgets inherit <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code>. The convenience function <db:code><db:link xlink:href="qobject.html#isWidgetType">isWidgetType</db:link>()</db:code>
                                    returns whether an object is actually a widget. It is much
                                    faster than <db:link xlink:href="qobject.html#qobject_cast">qobject_cast</db:link>
         <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code>
                                        *&gt;(<db:emphasis>obj</db:emphasis>) or
                                        <db:emphasis>obj</db:emphasis>-&gt;<db:link xlink:href="qobject.html#inherits">inherits</db:link>
         <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code>").</db:para>
      <db:para>Some <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> functions,
                                    e.g. <db:code><db:link xlink:href="qobject.html#children">children</db:link>()</db:code>,
                                    return a <db:code><db:link xlink:href="qobject.html#QObjectList-typedef">QObjectList</db:link></db:code>. <db:code><db:link xlink:href="qobject.html#QObjectList-typedef">QObjectList</db:link></db:code>
                                    is a typedef for <db:code><db:link xlink:href="qlist.html">QList</db:link>&lt;&gt;</db:code>
         <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> *&gt;.</db:para>
      <db:section xml:id="thread-affinity">
         <db:title>Thread Affinity</db:title>
         <db:para>A <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> instance is
                                    said to have a <db:emphasis>thread affinity</db:emphasis>, or that it
                                        <db:emphasis>lives</db:emphasis> in a certain thread. When a <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> receives a <db:link xlink:href="qt.html#ConnectionType-enum">queued signal</db:link> or
                                    a <db:link xlink:href="eventsandfilters.html#sending-events">posted
                                        event</db:link>, the slot or event handler will run in the
                                    thread that the object lives in.</db:para>
         <db:note>
            <db:para>If a <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> has no thread affinity (that is, if
                                        <db:code><db:link xlink:href="qobject.html#thread">thread</db:link>()</db:code> returns
                                    zero), or if it lives in a thread that has no running event
                                    loop, then it cannot receive queued signals or posted
                                    events.</db:para>
         </db:note>
         <db:para>By default, a <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> lives in the thread in
                                    which it is created. An object's thread affinity can be queried
                                    using <db:code><db:link xlink:href="qobject.html#thread">thread</db:link>()</db:code> and
                                    changed using <db:code><db:link xlink:href="qobject.html#moveToThread">moveToThread</db:link>()</db:code>.</db:para>
         <db:para>All QObjects must live in the same thread as their parent.
                                    Consequently:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qobject.html#setParent">setParent</db:link>()</db:code> will fail if the two QObjects
                                        involved live in different threads.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>When a <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> is
                                        moved to another thread, all its children will be
                                        automatically moved too.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code><db:link xlink:href="qobject.html#moveToThread">moveToThread</db:link>()</db:code> will fail if the <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> has a
                                        parent.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>If QObjects are created within <db:code><db:link xlink:href="qthread.html#run">QThread::run</db:link>()</db:code>, they
                                        cannot become children of the <db:code><db:link xlink:href="qthread.html">QThread</db:link></db:code> object because the <db:code><db:link xlink:href="qthread.html">QThread</db:link></db:code> does not live in
                                        the thread that calls <db:code><db:link xlink:href="qthread.html#run">QThread::run</db:link>()</db:code>.</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:note>
            <db:para>A <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code>'s member variables <db:emphasis>do not</db:emphasis>
                                    automatically become its children. The parent-child relationship
                                    must be set by either passing a pointer to the child's <db:link xlink:href="qobject.html#QObject">constructor</db:link>, or by
                                    calling <db:code><db:link xlink:href="qobject.html#setParent">setParent</db:link>()</db:code>. Without this step, the object's member
                                    variables will remain in the old thread when <db:code><db:link xlink:href="qobject.html#moveToThread">moveToThread</db:link>()</db:code> is
                                    called.</db:para>
         </db:note>
      </db:section>
      <db:section xml:id="no-copy-constructor-or-assignment-operator">
         <db:title>No Copy Constructor or Assignment Operator</db:title>
         <db:para>
            <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> has neither a
                                    copy constructor nor an assignment operator. This is by design.
                                    Actually, they are declared, but in a
                                        <db:code>private</db:code> section with the macro
                                        <db:code><db:link xlink:href="qobject.html#Q_DISABLE_COPY">Q_DISABLE_COPY</db:link>()</db:code>. In fact, all Qt classes derived
                                    from <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> (direct or
                                    indirect) use this macro to declare their copy constructor and
                                    assignment operator to be private. The reasoning is found in the
                                    discussion on <db:link xlink:href="object.html#identity-vs-value">Identity vs Value</db:link> on the Qt <db:link xlink:href="object.html">Object Model</db:link> page.</db:para>
         <db:para>The main consequence is that you should use pointers to
                                        <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> (or to your
                                        <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> subclass) where
                                    you might otherwise be tempted to use your <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> subclass as a value.
                                    For example, without a copy constructor, you can't use a
                                    subclass of <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> as the
                                    value to be stored in one of the container classes. You must
                                    store pointers.</db:para>
      </db:section>
      <db:section xml:id="auto-connection">
         <db:title>Auto-Connection</db:title>
         <db:para>Qt's meta-object system provides a mechanism to
                                    automatically connect signals and slots between <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> subclasses and their
                                    children. As long as objects are defined with suitable object
                                    names, and slots follow a simple naming convention, this
                                    connection can be performed at run-time by the <db:code><db:link xlink:href="qmetaobject.html#connectSlotsByName">QMetaObject::connectSlotsByName</db:link>()</db:code>
                                    function.</db:para>
         <db:para>
            <db:link xlink:href="qtdoc/uic.html#uic">uic</db:link> generates
                                    code that invokes this function to enable auto-connection to be
                                    performed between widgets on forms created with <db:emphasis>Qt
                                        Designer</db:emphasis>. More information about using
                                    auto-connection with <db:emphasis>Qt Designer</db:emphasis> is given in
                                    the <db:link xlink:href="http://doc-snapshot.qt-project.org/qt5-5.4/qtdesigner-manual.html">Using a Designer UI File in Your Application</db:link>
                                    section of the <db:emphasis>Qt Designer</db:emphasis> manual.</db:para>
      </db:section>
      <db:section xml:id="dynamic-properties">
         <db:title>Dynamic Properties</db:title>
         <db:para>From Qt 4.2, dynamic properties can be added to and removed
                                    from <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> instances at
                                    run-time. Dynamic properties do not need to be declared at
                                    compile-time, yet they provide the same advantages as static
                                    properties and are manipulated using the same API - using
                                        <db:code><db:link xlink:href="qobject.html#property">property</db:link>()</db:code> to
                                    read them and <db:code><db:link xlink:href="qobject.html#setProperty">setProperty</db:link>()</db:code> to write them.</db:para>
         <db:para>From Qt 4.3, dynamic properties are supported by <db:link xlink:href="qtdesigner/designer-widget-mode.html#the-property-editor">Qt Designer</db:link>, and both standard Qt widgets and
                                    user-created forms can be given dynamic properties.</db:para>
      </db:section>
      <db:section xml:id="internationalization-i18n">
         <db:title>Internationalization (I18n)</db:title>
         <db:para>All <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> subclasses
                                    support Qt's translation features, making it possible to
                                    translate an application's user interface into different
                                    languages.</db:para>
         <db:para>To make user-visible text translatable, it must be wrapped
                                    in calls to the <db:code><db:link xlink:href="qobject.html#tr">tr</db:link>()</db:code>
                                    function. This is explained in detail in the <db:link xlink:href="qtdoc/i18n-source-translation.html">Writing Source
                                        Code for Translation</db:link> document.</db:para>
      </db:section>
      <db:section>
         <db:title>See Also</db:title>
         <db:simplelist type="vert">
            <db:member>
               <db:code><db:link xlink:href="qmetaobject.html">QMetaObject</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qpointer.html">QPointer</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qobjectcleanuphandler.html">QObjectCleanupHandler</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qobject.html#Q_DISABLE_COPY">Q_DISABLE_COPY</db:link>()</db:code>
            </db:member>
            <db:member>
               <db:link xlink:href="objecttrees.html">Object Trees &amp;
                                    Ownership</db:link>
            </db:member>
         </db:simplelist>
      </db:section>
   </db:section>
   <db:section xml:id="prop">
      <db:title>Property Documentation</db:title>
      <db:section xml:id="objectName-prop">
         <db:title>objectName : <db:link xlink:href="qstring.html">QString</db:link></db:title>
         <db:para>This property holds the name of this object.</db:para>
         <db:para>You can find an object by name (and type) using <db:code><db:link xlink:href="qobject.html#findChild">findChild</db:link>()</db:code>. You can
                                    find a set of objects with <db:code><db:link xlink:href="qobject.html#findChildren">findChildren</db:link>()</db:code>.</db:para>
         <db:programlisting>qDebug("MyClass::setPrecision(): (%s) invalid precision
                                        %f",qPrintable(objectName()), newPrecision);</db:programlisting>
         <db:para>By default, this property contains an empty string.</db:para>
         <db:para>
            <db:emphasis role="bold">Access functions:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  QString </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">objectName</db:emphasis>()
                                                  const</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">setObjectName</db:emphasis>(const
                                                  QString &amp;<db:emphasis> name</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">Notifier signal:</db:emphasis>
         </db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:para>
                                                  void </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:emphasis role="bold">objectNameChanged</db:emphasis>(const
                                                  QString &amp;<db:emphasis>
                                                  objectName</db:emphasis>)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#metaObject">metaObject</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qmetaobject.html#className">QMetaObject::className</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
   </db:section>
   <db:section xml:id="func">
      <db:title>Member Function Documentation</db:title>
      <db:section xml:id="QObject">
         <db:title>QObject::QObject(<db:link xlink:href="qobject.html#QObject">QObject</db:link></db:title>
         <db:para>Constructs an object with parent object
                                        <db:emphasis>parent</db:emphasis>.</db:para>
         <db:para>The parent of an object may be viewed as the object's owner.
                                    For instance, a <db:link xlink:href="qtwidgets/qdialog.html">dialog
                                        box</db:link> is the parent of the <db:emphasis role="bold">OK</db:emphasis> and
                                        <db:emphasis role="bold">Cancel</db:emphasis> buttons it contains.</db:para>
         <db:para>The destructor of a parent object destroys all child
                                    objects.</db:para>
         <db:para>Setting <db:emphasis>parent</db:emphasis> to 0 constructs an object
                                    with no parent. If the object is a widget, it will become a
                                    top-level window.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#parent">parent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#findChild">findChild</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#findChildren">findChildren</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="dtor.QObject">
         <db:title>[virtual] QObject::~QObject()</db:title>
         <db:para>Destroys the object, deleting all its child
                                    objects.</db:para>
         <db:para>All signals to and from the object are automatically
                                    disconnected, and any pending posted events for the object are
                                    removed from the event queue. However, it is often safer to use
                                        <db:code><db:link xlink:href="qobject.html#deleteLater">deleteLater</db:link>()</db:code> rather than deleting a <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> subclass
                                    directly.</db:para>
         <db:warning>
            <db:para> All child objects are deleted. If
                                    any of these objects are on the stack or global, sooner or later
                                    your program will crash. We do not recommend holding pointers to
                                    child objects from outside the parent. If you still do, the
                                        <db:code><db:link xlink:href="qobject.html#destroyed">destroyed</db:link>()</db:code>
                                    signal gives you an opportunity to detect when an object is
                                    destroyed.</db:para>
         </db:warning>
         <db:warning>
            <db:para> Deleting a <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> while pending events
                                    are waiting to be delivered can cause a crash. You must not
                                    delete the <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> directly
                                    if it exists in a different thread than the one currently
                                    executing. Use <db:code><db:link xlink:href="qobject.html#deleteLater">deleteLater</db:link>()</db:code> instead, which will cause the event
                                    loop to delete the object after all pending events have been
                                    delivered to it.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#deleteLater">deleteLater</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="blockSignals">
         <db:title>bool QObject::blockSignals(bool block)</db:title>
         <db:para>If <db:emphasis>block</db:emphasis> is true, signals emitted by this
                                    object are blocked (i.e., emitting a signal will not invoke
                                    anything connected to it). If <db:emphasis>block</db:emphasis> is false,
                                    no such blocking will occur.</db:para>
         <db:para>The return value is the previous value of <db:code><db:link xlink:href="qobject.html#signalsBlocked">signalsBlocked</db:link>()</db:code>.</db:para>
         <db:para>Note that the <db:code><db:link xlink:href="qobject.html#destroyed">destroyed</db:link>()</db:code> signal will be emitted even if the
                                    signals for this object have been blocked.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#signalsBlocked">signalsBlocked</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="childEvent">
         <db:title>[virtual protected] void QObject::childEvent(<db:link xlink:href="qchildevent.html">QChildEvent</db:link></db:title>
         <db:para>This event handler can be reimplemented in a subclass to
                                    receive child events. The event is passed in the
                                        <db:emphasis>event</db:emphasis> parameter.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qevent.html#Type-enum">QEvent::ChildAdded</db:link></db:code> and <db:code><db:link xlink:href="qevent.html#Type-enum">QEvent::ChildRemoved</db:link></db:code>
                                    events are sent to objects when children are added or removed.
                                    In both cases you can only rely on the child being a <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code>, or if <db:code><db:link xlink:href="qobject.html#isWidgetType">isWidgetType</db:link>()</db:code>
                                    returns <db:code>true</db:code>, a <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code>. (This is
                                    because, in the <db:link xlink:href="qevent.html#Type-enum">ChildAdded</db:link> case, the child is not yet fully
                                    constructed, and in the <db:link xlink:href="qevent.html#Type-enum">ChildRemoved</db:link> case it might have been destructed
                                    already).</db:para>
         <db:para>
            <db:code><db:link xlink:href="qevent.html#Type-enum">QEvent::ChildPolished</db:link></db:code> events are sent to widgets
                                    when children are polished, or when polished children are added.
                                    If you receive a child polished event, the child's construction
                                    is usually completed. However, this is not guaranteed, and
                                    multiple polish events may be delivered during the execution of
                                    a widget's constructor.</db:para>
         <db:para>For every child widget, you receive one <db:link xlink:href="qevent.html#Type-enum">ChildAdded</db:link> event, zero
                                    or more <db:link xlink:href="qevent.html#Type-enum">ChildPolished</db:link> events, and one <db:link xlink:href="qevent.html#Type-enum">ChildRemoved</db:link>
                                    event.</db:para>
         <db:para>The <db:link xlink:href="qevent.html#Type-enum">ChildPolished</db:link> event is omitted if a child is
                                    removed immediately after it is added. If a child is polished
                                    several times during construction and destruction, you may
                                    receive several child polished events for the same child, each
                                    time with a different virtual table.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#event">event</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="children">
         <db:title>const <db:link xlink:href="qobject.html#QObjectList-typedef">QObjectList</db:link></db:title>
         <db:para>Returns a list of child objects. The <db:code><db:link xlink:href="qobject.html#QObjectList-typedef">QObjectList</db:link></db:code>
                                    class is defined in the <db:code>&lt;QObject&gt;</db:code>
                                    header file as the following:</db:para>
         <db:programlisting language="qml">typedefQList&lt;QObject*&gt;QObjectList;</db:programlisting>
         <db:para>The first child added is the <db:link xlink:href="qlist.html#first">first</db:link> object in the list and the last child added
                                    is the <db:link xlink:href="qlist.html#last">last</db:link> object in
                                    the list, i.e. new children are appended at the end.</db:para>
         <db:para>Note that the list order changes when <db:code><db:link xlink:href="qtwidgets/qwidget.html">QWidget</db:link></db:code> children are
                                        <db:link xlink:href="qtwidgets/qwidget.html#raise">raised</db:link>
                                    or <db:link xlink:href="qtwidgets/qwidget.html#lower">lowered</db:link>.
                                    A widget that is raised becomes the last object in the list, and
                                    a widget that is lowered becomes the first object in the
                                    list.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#findChild">findChild</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#findChildren">findChildren</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#parent">parent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#setParent">setParent</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="connect">
         <db:title>[static] <db:link xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:link><db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qt.html#ConnectionType-enum">Qt::ConnectionType</db:link></db:title>
         <db:para>Creates a connection of the given <db:emphasis>type</db:emphasis> from
                                    the <db:emphasis>signal</db:emphasis> in the <db:emphasis>sender</db:emphasis>
                                    object to the <db:emphasis>method</db:emphasis> in the
                                        <db:emphasis>receiver</db:emphasis> object. Returns a handle to the
                                    connection that can be used to disconnect it later.</db:para>
         <db:para>You must use the <db:code>SIGNAL()</db:code> and
                                        <db:code>SLOT()</db:code> macros when specifying the
                                        <db:emphasis>signal</db:emphasis> and the <db:emphasis>method</db:emphasis>, for
                                    example:</db:para>
         <db:programlisting>QLabel*label =newQLabel; QScrollBar*scrollBar =newQScrollBar; QObject::connect(scrollBar, SIGNAL(valueChanged(int)),
                                        label,
                                        SLOT(setNum(int)));</db:programlisting>
         <db:para>This example ensures that the label always displays the
                                    current scroll bar value. Note that the signal and slots
                                    parameters must not contain any variable names, only the type.
                                    E.g. the following would not work and return false:</db:para>
         <db:programlisting>//
                                        WRONGQObject::connect(scrollBar, SIGNAL(valueChanged(int value)), label, SLOT(setNum(int value)));</db:programlisting>
         <db:para>A signal can also be connected to another signal:</db:para>
         <db:programlisting>class
                                    MyWidget : publicQWidget { Q_OBJECT public: MyWidget(); signals: void buttonClicked(); private: QPushButton*myButton; };
                                        MyWidget::MyWidget()
                                    { myButton =newQPushButton(this); connect(myButton, SIGNAL(clicked()),this, SIGNAL(buttonClicked()));
                                    }</db:programlisting>
         <db:para>In this example, the <db:code>MyWidget</db:code>
                                    constructor relays a signal from a private member variable, and
                                    makes it available under a name that relates to
                                        <db:code>MyWidget</db:code>.</db:para>
         <db:para>A signal can be connected to many slots and signals. Many
                                    signals can be connected to one slot.</db:para>
         <db:para>If a signal is connected to several slots, the slots are
                                    activated in the same order in which the connections were made,
                                    when the signal is emitted.</db:para>
         <db:para>The function returns a <db:code><db:link xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:link></db:code> that represents a handle
                                    to a connection if it successfully connects the signal to the
                                    slot. The connection handle will be invalid if it cannot create
                                    the connection, for example, if <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> is unable to verify the existence of
                                    either <db:emphasis>signal</db:emphasis> or <db:emphasis>method</db:emphasis>, or if
                                    their signatures aren't compatible. You can check if the handle
                                    is valid by casting it to a bool.</db:para>
         <db:para>By default, a signal is emitted for every connection you
                                    make; two signals are emitted for duplicate connections. You can
                                    break all of these connections with a single <db:code><db:link xlink:href="qobject.html#disconnect">disconnect</db:link>()</db:code> call.
                                    If you pass the <db:code><db:link xlink:href="qt.html#ConnectionType-enum">Qt::UniqueConnection</db:link></db:code>
            <db:emphasis>type</db:emphasis>, the connection will only be made if it is
                                    not a duplicate. If there is already a duplicate (exact same
                                    signal to the exact same slot on the same objects), the
                                    connection will fail and connect will return an invalid <db:code><db:link xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:link></db:code>.</db:para>
         <db:para>The optional <db:emphasis>type</db:emphasis> parameter describes the
                                    type of connection to establish. In particular, it determines
                                    whether a particular signal is delivered to a slot immediately
                                    or queued for delivery at a later time. If the signal is queued,
                                    the parameters must be of types that are known to Qt's
                                    meta-object system, because Qt needs to copy the arguments to
                                    store them in an event behind the scenes. If you try to use a
                                    queued connection and get the error message</db:para>
         <db:programlisting>QObject::connect: Cannot queue arguments of type
                                        'MyType' (Make sure
                                        'MyType' is registered
                                        usingqRegisterMetaType().)</db:programlisting>
         <db:para>call <db:code><db:link xlink:href="qmetatype.html#qRegisterMetaType">qRegisterMetaType</db:link>()</db:code> to register the data type
                                    before you establish the connection.</db:para>
         <db:note>
            <db:para> This function is <db:link xlink:href="qtdoc/threads-reentrancy.html#thread-safe">thread-safe</db:link>.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#disconnect">disconnect</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#sender">sender</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qmetatype.html#qRegisterMetaType">qRegisterMetaType</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qmetatype.html#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="connect-2">
         <db:title>[static] <db:link xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:link><db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qmetamethod.html">QMetaMethod</db:link><db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qmetamethod.html">QMetaMethod</db:link><db:link xlink:href="qt.html#ConnectionType-enum">Qt::ConnectionType</db:link></db:title>
         <db:para>Creates a connection of the given <db:emphasis>type</db:emphasis> from
                                    the <db:emphasis>signal</db:emphasis> in the <db:emphasis>sender</db:emphasis>
                                    object to the <db:emphasis>method</db:emphasis> in the
                                        <db:emphasis>receiver</db:emphasis> object. Returns a handle to the
                                    connection that can be used to disconnect it later.</db:para>
         <db:para>The Connection handle will be invalid if it cannot create
                                    the connection, for example, the parameters were invalid. You
                                    can check if the <db:code><db:link xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:link></db:code> is valid by casting it to
                                    a bool.</db:para>
         <db:para>This function works in the same way as
                                        <db:code>connect(const QObject *sender, const char
                                        *signal, const QObject *receiver, const char *method,
                                        Qt::ConnectionType type)</db:code> but it uses <db:code><db:link xlink:href="qmetamethod.html">QMetaMethod</db:link></db:code> to specify
                                    signal and method.</db:para>
         <db:para>This function was introduced in Qt 4.8.</db:para>
         <db:para>
            <db:emphasis role="bold">See also </db:emphasis>connect(const QObject *sender,
                                    const char *signal, const QObject *receiver, const char *method,
                                    Qt::ConnectionType type).</db:para>
      </db:section>
      <db:section xml:id="connect-3">
         <db:title><db:link xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:link><db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qt.html#ConnectionType-enum">Qt::ConnectionType</db:link></db:title>
         <db:para>This function overloads <db:code><db:link xlink:href="qobject.html#connect">connect</db:link>()</db:code>.</db:para>
         <db:para>Connects <db:emphasis>signal</db:emphasis> from the
                                        <db:emphasis>sender</db:emphasis> object to this object's
                                        <db:emphasis>method</db:emphasis>.</db:para>
         <db:para>Equivalent to connect(<db:emphasis>sender</db:emphasis>,
                                        <db:emphasis>signal</db:emphasis>, <db:code>this</db:code>,
                                        <db:emphasis>method</db:emphasis>, <db:emphasis>type</db:emphasis>).</db:para>
         <db:para>Every connection you make emits a signal, so duplicate
                                    connections emit two signals. You can break a connection using
                                        <db:code><db:link xlink:href="qobject.html#disconnect">disconnect</db:link>()</db:code>.</db:para>
         <db:note>
            <db:para> This function is <db:link xlink:href="qtdoc/threads-reentrancy.html#thread-safe">thread-safe</db:link>.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#disconnect">disconnect</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="connect-4">
         <db:title>[static] <db:link xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:link><db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qt.html#ConnectionType-enum">Qt::ConnectionType</db:link></db:title>
         <db:para>This function overloads <db:code><db:link xlink:href="qobject.html#connect">connect</db:link>()</db:code>.</db:para>
         <db:para>Creates a connection of the given <db:emphasis>type</db:emphasis> from
                                    the <db:emphasis>signal</db:emphasis> in the <db:emphasis>sender</db:emphasis>
                                    object to the <db:emphasis>method</db:emphasis> in the
                                        <db:emphasis>receiver</db:emphasis> object. Returns a handle to the
                                    connection that can be used to disconnect it later.</db:para>
         <db:para>The signal must be a function declared as a signal in the
                                    header. The slot function can be any member function that can be
                                    connected to the signal. A slot can be connected to a given
                                    signal if the signal has at least as many arguments as the slot,
                                    and there is an implicit conversion between the types of the
                                    corresponding arguments in the signal and the slot.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>QLabel*label =newQLabel; QLineEdit*lineEdit =newQLineEdit; QObject::connect(lineEdit,&amp;QLineEdit::textChanged, label,&amp;QLabel::setText);</db:programlisting>
         <db:para>This example ensures that the label always displays the
                                    current line edit text.</db:para>
         <db:para>A signal can be connected to many slots and signals. Many
                                    signals can be connected to one slot.</db:para>
         <db:para>If a signal is connected to several slots, the slots are
                                    activated in the same order as the order the connection was
                                    made, when the signal is emitted</db:para>
         <db:para>The function returns an handle to a connection if it
                                    successfully connects the signal to the slot. The Connection
                                    handle will be invalid if it cannot create the connection, for
                                    example, if <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> is
                                    unable to verify the existence of <db:emphasis>signal</db:emphasis> (if it
                                    was not declared as a signal) You can check if the <db:code><db:link xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:link></db:code> is valid by casting it to
                                    a bool.</db:para>
         <db:para>By default, a signal is emitted for every connection you
                                    make; two signals are emitted for duplicate connections. You can
                                    break all of these connections with a single <db:code><db:link xlink:href="qobject.html#disconnect">disconnect</db:link>()</db:code> call.
                                    If you pass the <db:code><db:link xlink:href="qt.html#ConnectionType-enum">Qt::UniqueConnection</db:link></db:code>
            <db:emphasis>type</db:emphasis>, the connection will only be made if it is
                                    not a duplicate. If there is already a duplicate (exact same
                                    signal to the exact same slot on the same objects), the
                                    connection will fail and connect will return an invalid <db:code><db:link xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:link></db:code>.</db:para>
         <db:para>The optional <db:emphasis>type</db:emphasis> parameter describes the
                                    type of connection to establish. In particular, it determines
                                    whether a particular signal is delivered to a slot immediately
                                    or queued for delivery at a later time. If the signal is queued,
                                    the parameters must be of types that are known to Qt's
                                    meta-object system, because Qt needs to copy the arguments to
                                    store them in an event behind the scenes. If you try to use a
                                    queued connection and get the error message</db:para>
         <db:programlisting>QObject::connect: Cannot queue arguments of type
                                        'MyType' (Make sure
                                        'MyType' is registered
                                        usingqRegisterMetaType().)</db:programlisting>
         <db:para>make sure to declare the argument type with <db:code><db:link xlink:href="qmetatype.html#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link></db:code>
         </db:para>
         <db:note>
            <db:para>The number of arguments in the signal
                                    or slot are limited to 6 if the compiler does not support C++11
                                    variadic templates.</db:para>
         </db:note>
         <db:note>
            <db:para> This
                                    function is <db:link xlink:href="qtdoc/threads-reentrancy.html#thread-safe">thread-safe</db:link>.</db:para>
         </db:note>
      </db:section>
      <db:section xml:id="connect-5">
         <db:title>[static] <db:link xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:link><db:link xlink:href="qobject.html#QObject">QObject</db:link></db:title>
         <db:para>This function overloads <db:code><db:link xlink:href="qobject.html#connect">connect</db:link>()</db:code>.</db:para>
         <db:para>Creates a connection from <db:emphasis>signal</db:emphasis> in
                                        <db:emphasis>sender</db:emphasis> object to <db:emphasis>functor</db:emphasis>,
                                    and returns a handle to the connection</db:para>
         <db:para>The signal must be a function declared as a signal in the
                                    header. The slot function can be any function or functor that
                                    can be connected to the signal. A function can be connected to a
                                    given signal if the signal as at least as many argument as the
                                    slot. A functor can be connected to a signal if they have
                                    exactly the same number of arguments. There must exist implicit
                                    conversion between the types of the corresponding arguments in
                                    the signal and the slot.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>void
                                    someFunction(); QPushButton*button =newQPushButton; QObject::connect(button,&amp;QPushButton::clicked, someFunction);</db:programlisting>
         <db:para>If your compiler support C++11 lambda expressions, you can
                                    use them:</db:para>
         <db:programlisting>QByteArray
                                    page =...; QTcpSocket*socket =newQTcpSocket; socket-&gt;connectToHost("qt-project.org",80); QObject::connect(socket,&amp;QTcpSocket::connected,[=] () { socket-&gt;write("GET
                                        "+ page +"\r\n"); });</db:programlisting>
         <db:para>The connection will automatically disconnect if the sender
                                    is destroyed. However, you should take care that any objects
                                    used within the functor are still alive when the signal is
                                    emitted.</db:para>
         <db:note>
            <db:para>If the compiler does not support
                                    C++11 variadic templates, the number of arguments in the signal
                                    or slot are limited to 6, and the functor object must not have
                                    an overloaded or templated
                                        operator().</db:para>
         </db:note>
         <db:note>
            <db:para> This
                                    function is <db:link xlink:href="qtdoc/threads-reentrancy.html#thread-safe">thread-safe</db:link>.</db:para>
         </db:note>
      </db:section>
      <db:section xml:id="connect-6">
         <db:title>[static] <db:link xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:link><db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qt.html#ConnectionType-enum">Qt::ConnectionType</db:link></db:title>
         <db:para>This function overloads <db:code><db:link xlink:href="qobject.html#connect">connect</db:link>()</db:code>.</db:para>
         <db:para>Creates a connection of a given <db:emphasis>type</db:emphasis> from
                                        <db:emphasis>signal</db:emphasis> in <db:emphasis>sender</db:emphasis> object to
                                        <db:emphasis>functor</db:emphasis> to be placed in a specific event
                                    loop of <db:emphasis>context</db:emphasis>, and returns a handle to the
                                    connection</db:para>
         <db:para>The signal must be a function declared as a signal in the
                                    header. The slot function can be any function or functor that
                                    can be connected to the signal. A function can be connected to a
                                    given signal if the signal as at least as many argument as the
                                    slot. A functor can be connected to a signal if they have
                                    exactly the same number of arguments. There must exist implicit
                                    conversion between the types of the corresponding arguments in
                                    the signal and the slot.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>void
                                    someFunction(); QPushButton*button =newQPushButton; QObject::connect(button,&amp;QPushButton::clicked,this, someFunction,Qt::QueuedConnection);</db:programlisting>
         <db:para>If your compiler support C++11 lambda expressions, you can
                                    use them:</db:para>
         <db:programlisting>QByteArray
                                    page =...; QTcpSocket*socket =newQTcpSocket; socket-&gt;connectToHost("qt-project.org",80); QObject::connect(socket,&amp;QTcpSocket::connected,this,[=] () { socket-&gt;write("GET
                                        "+ page +"\r\n"); },Qt::AutoConnection);</db:programlisting>
         <db:para>The connection will automatically disconnect if the sender
                                    or the context is destroyed. However, you should take care that
                                    any objects used within the functor are still alive when the
                                    signal is emitted.</db:para>
         <db:note>
            <db:para>If the compiler does not support
                                    C++11 variadic templates, the number of arguments in the signal
                                    or slot are limited to 6, and the functor object must not have
                                    an overloaded or templated
                                        operator().</db:para>
         </db:note>
         <db:note>
            <db:para> This
                                    function is <db:link xlink:href="qtdoc/threads-reentrancy.html#thread-safe">thread-safe</db:link>.</db:para>
         </db:note>
         <db:para>This function was introduced in Qt 5.2.</db:para>
      </db:section>
      <db:section xml:id="connectNotify">
         <db:title>[virtual protected] void QObject::connectNotify(const <db:link xlink:href="qmetamethod.html">QMetaMethod</db:link></db:title>
         <db:para>This virtual function is called when something has been
                                    connected to <db:emphasis>signal</db:emphasis> in this object.</db:para>
         <db:para>If you want to compare <db:emphasis>signal</db:emphasis> with a
                                    specific signal, you can use <db:code><db:link xlink:href="qmetamethod.html#fromSignal">QMetaMethod::fromSignal</db:link>()</db:code> as follows:</db:para>
         <db:programlisting>if
                                    (signal ==QMetaMethod::fromSignal(&amp;MyObject::valueChanged)) { // signal is valueChanged
                                    }</db:programlisting>
         <db:warning>
            <db:para> This function violates the
                                    object-oriented principle of modularity. However, it might be
                                    useful when you need to perform expensive initialization only if
                                    something is connected to a signal.</db:para>
         </db:warning>
         <db:warning>
            <db:para> This function is called from the
                                    thread which performs the connection, which may be a different
                                    thread from the thread in which this object lives.</db:para>
         </db:warning>
         <db:para>This function was introduced in Qt 5.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#connect">connect</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#disconnectNotify">disconnectNotify</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="customEvent">
         <db:title>[virtual protected] void QObject::customEvent(<db:link xlink:href="qevent.html">QEvent</db:link></db:title>
         <db:para>This event handler can be reimplemented in a subclass to
                                    receive custom events. Custom events are user-defined events
                                    with a type value at least as large as the <db:code><db:link xlink:href="qevent.html#Type-enum">QEvent::User</db:link></db:code> item of
                                    the <db:code><db:link xlink:href="qevent.html#Type-enum">QEvent::Type</db:link></db:code>
                                    enum, and is typically a <db:code><db:link xlink:href="qevent.html">QEvent</db:link></db:code> subclass. The event is passed in the
                                        <db:emphasis>event</db:emphasis> parameter.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#event">event</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qevent.html">QEvent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="deleteLater">
         <db:title>[slot] void QObject::deleteLater()</db:title>
         <db:para>Schedules this object for deletion.</db:para>
         <db:para>The object will be deleted when control returns to the event
                                    loop. If the event loop is not running when this function is
                                    called (e.g. deleteLater() is called on an object before <db:code><db:link xlink:href="qcoreapplication.html#exec">QCoreApplication::exec</db:link>()</db:code>), the object will be
                                    deleted once the event loop is started. If deleteLater() is
                                    called after the main event loop has stopped, the object will
                                    not be deleted. Since Qt 4.8, if deleteLater() is called on an
                                    object that lives in a thread with no running event loop, the
                                    object will be destroyed when the thread finishes.</db:para>
         <db:para>Note that entering and leaving a new event loop (e.g., by
                                    opening a modal dialog) will <db:emphasis>not</db:emphasis> perform the
                                    deferred deletion; for the object to be deleted, the control
                                    must return to the event loop from which deleteLater() was
                                    called.</db:para>
         <db:note>
            <db:para> It is safe to call this function more
                                    than once; when the first deferred deletion event is delivered,
                                    any pending events for the object are removed from the event
                                    queue.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#destroyed">destroyed</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpointer.html">QPointer</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="destroyed">
         <db:title>[signal] void QObject::destroyed(<db:link xlink:href="qobject.html#QObject">QObject</db:link></db:title>
         <db:para>This signal is emitted immediately before the object
                                        <db:emphasis>obj</db:emphasis> is destroyed, and can not be
                                    blocked.</db:para>
         <db:para>All the objects's children are destroyed immediately after
                                    this signal is emitted.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#deleteLater">deleteLater</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpointer.html">QPointer</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="disconnect">
         <db:title>[static] bool QObject::disconnect(const <db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qobject.html#QObject">QObject</db:link></db:title>
         <db:para>Disconnects <db:emphasis>signal</db:emphasis> in object
                                        <db:emphasis>sender</db:emphasis> from <db:emphasis>method</db:emphasis> in
                                    object <db:emphasis>receiver</db:emphasis>. Returns
                                        <db:code>true</db:code> if the connection is
                                    successfully broken; otherwise returns
                                        <db:code>false</db:code>.</db:para>
         <db:para>A signal-slot connection is removed when either of the
                                    objects involved are destroyed.</db:para>
         <db:para>disconnect() is typically used in three ways, as the
                                    following examples demonstrate.</db:para>
         <db:orderedlist numeration="arabic">
            <db:listitem>
               <db:para>Disconnect everything connected to an object's
                                            signals:<db:programlisting>disconnect(myObject,0,0,0);</db:programlisting>
                  <db:programlisting>myObject-&gt;disconnect();</db:programlisting>
               </db:para>
               <db:para>equivalent to the non-static overloaded
                                            function</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Disconnect everything connected to a specific
                                            signal:<db:programlisting>disconnect(myObject, SIGNAL(mySignal()),0,0);</db:programlisting>
                  <db:programlisting>myObject-&gt;disconnect(SIGNAL(mySignal()));</db:programlisting>
               </db:para>
               <db:para>equivalent to the non-static overloaded
                                            function</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Disconnect a specific receiver:<db:programlisting>disconnect(myObject,0, myReceiver,0);</db:programlisting>
                  <db:programlisting>myObject-&gt;disconnect(myReceiver);</db:programlisting>
               </db:para>
               <db:para>equivalent to the non-static overloaded
                                            function</db:para>
            </db:listitem>
         </db:orderedlist>
         <db:para>0 may be used as a wildcard, meaning "any signal", "any
                                    receiving object", or "any slot in the receiving object",
                                    respectively.</db:para>
         <db:para>The <db:emphasis>sender</db:emphasis> may never be 0. (You cannot
                                    disconnect signals from more than one object in a single
                                    call.)</db:para>
         <db:para>If <db:emphasis>signal</db:emphasis> is 0, it disconnects
                                        <db:emphasis>receiver</db:emphasis> and <db:emphasis>method</db:emphasis> from
                                    any signal. If not, only the specified signal is
                                    disconnected.</db:para>
         <db:para>If <db:emphasis>receiver</db:emphasis> is 0, it disconnects anything
                                    connected to <db:emphasis>signal</db:emphasis>. If not, slots in objects
                                    other than <db:emphasis>receiver</db:emphasis> are not
                                    disconnected.</db:para>
         <db:para>If <db:emphasis>method</db:emphasis> is 0, it disconnects anything
                                    that is connected to <db:emphasis>receiver</db:emphasis>. If not, only
                                    slots named <db:emphasis>method</db:emphasis> will be disconnected, and
                                    all other slots are left alone. The <db:emphasis>method</db:emphasis> must
                                    be 0 if <db:emphasis>receiver</db:emphasis> is left out, so you cannot
                                    disconnect a specifically-named slot on all objects.</db:para>
         <db:note>
            <db:para> This function is <db:link xlink:href="qtdoc/threads-reentrancy.html#thread-safe">thread-safe</db:link>.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#connect">connect</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="disconnect-2">
         <db:title>[static] bool QObject::disconnect(const <db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qmetamethod.html">QMetaMethod</db:link><db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qmetamethod.html">QMetaMethod</db:link></db:title>
         <db:para>Disconnects <db:emphasis>signal</db:emphasis> in object
                                        <db:emphasis>sender</db:emphasis> from <db:emphasis>method</db:emphasis> in
                                    object <db:emphasis>receiver</db:emphasis>. Returns
                                        <db:code>true</db:code> if the connection is
                                    successfully broken; otherwise returns
                                        <db:code>false</db:code>.</db:para>
         <db:para>This function provides the same possibilities like
                                        <db:code>disconnect(const QObject *sender, const char
                                        *signal, const QObject *receiver, const char
                                        *method)</db:code> but uses <db:code><db:link xlink:href="qmetamethod.html">QMetaMethod</db:link></db:code> to represent
                                    the signal and the method to be disconnected.</db:para>
         <db:para>Additionally this function returnsfalse and no signals and
                                    slots disconnected if:</db:para>
         <db:orderedlist numeration="arabic">
            <db:listitem>
               <db:para>
                  <db:emphasis>signal</db:emphasis> is not a member of sender class
                                        or one of its parent classes.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:emphasis>method</db:emphasis> is not a member of receiver
                                        class or one of its parent classes.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:emphasis>signal</db:emphasis> instance represents not a
                                        signal.</db:para>
            </db:listitem>
         </db:orderedlist>
         <db:para>QMetaMethod() may be used as wildcard in the meaning "any
                                    signal" or "any slot in receiving object". In the same way 0 can
                                    be used for <db:emphasis>receiver</db:emphasis> in the meaning "any
                                    receiving object". In this case method should also be
                                    QMetaMethod(). <db:emphasis>sender</db:emphasis> parameter should be never
                                    0.</db:para>
         <db:para>This function was introduced in Qt 4.8.</db:para>
         <db:para>
            <db:emphasis role="bold">See also </db:emphasis>disconnect(const QObject *sender,
                                    const char *signal, const QObject *receiver, const char
                                    *method).</db:para>
      </db:section>
      <db:section xml:id="disconnect-3">
         <db:title>[static] bool QObject::disconnect(const <db:link xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:link></db:title>
         <db:para>Disconnect a connection.</db:para>
         <db:para>If the <db:emphasis>connection</db:emphasis> is invalid or has already
                                    been disconnected, do nothing and return false.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#connect">connect</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="disconnect-4">
         <db:title>bool QObject::disconnect(const char * signal = 0, const <db:link xlink:href="qobject.html#QObject">QObject</db:link></db:title>
         <db:para>This function overloads <db:code><db:link xlink:href="qobject.html#disconnect">disconnect</db:link>()</db:code>.</db:para>
         <db:para>Disconnects <db:emphasis>signal</db:emphasis> from
                                        <db:emphasis>method</db:emphasis> of
                                    <db:emphasis>receiver</db:emphasis>.</db:para>
         <db:para>A signal-slot connection is removed when either of the
                                    objects involved are destroyed.</db:para>
         <db:note>
            <db:para> This function is <db:link xlink:href="qtdoc/threads-reentrancy.html#thread-safe">thread-safe</db:link>.</db:para>
         </db:note>
      </db:section>
      <db:section xml:id="disconnect-5">
         <db:title>bool QObject::disconnect(const <db:link xlink:href="qobject.html#QObject">QObject</db:link></db:title>
         <db:para>This function overloads <db:code><db:link xlink:href="qobject.html#disconnect">disconnect</db:link>()</db:code>.</db:para>
         <db:para>Disconnects all signals in this object from
                                        <db:emphasis>receiver</db:emphasis>'s
                                    <db:emphasis>method</db:emphasis>.</db:para>
         <db:para>A signal-slot connection is removed when either of the
                                    objects involved are destroyed.</db:para>
      </db:section>
      <db:section xml:id="disconnect-6">
         <db:title>[static] bool QObject::disconnect(const <db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qobject.html#QObject">QObject</db:link></db:title>
         <db:para>This function overloads diconnect().</db:para>
         <db:para>Disconnects <db:emphasis>signal</db:emphasis> in object
                                        <db:emphasis>sender</db:emphasis> from <db:emphasis>method</db:emphasis> in
                                    object <db:emphasis>receiver</db:emphasis>. Returns
                                        <db:code>true</db:code> if the connection is
                                    successfully broken; otherwise returns
                                        <db:code>false</db:code>.</db:para>
         <db:para>A signal-slot connection is removed when either of the
                                    objects involved are destroyed.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qobject.html#disconnect">disconnect</db:link>()</db:code>
                                    is typically used in three ways, as the following examples
                                    demonstrate.</db:para>
         <db:orderedlist numeration="arabic">
            <db:listitem>
               <db:para>Disconnect everything connected to an object's
                                            signals:<db:programlisting>disconnect(myObject,0,0,0);</db:programlisting>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Disconnect everything connected to a specific
                                            signal:<db:programlisting>disconnect(myObject,&amp;MyObject::mySignal(),0,0);</db:programlisting>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Disconnect a specific receiver:<db:programlisting>disconnect(myObject,0, myReceiver,0);</db:programlisting>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Disconnect a connection from one specific signal to a
                                        specific slot:<db:programlisting>QObject::disconnect(lineEdit,&amp;QLineEdit::textChanged, label,&amp;QLabel::setText);</db:programlisting>
               </db:para>
            </db:listitem>
         </db:orderedlist>
         <db:para>0 may be used as a wildcard, meaning "any signal", "any
                                    receiving object", or "any slot in the receiving object",
                                    respectively.</db:para>
         <db:para>The <db:emphasis>sender</db:emphasis> may never be 0. (You cannot
                                    disconnect signals from more than one object in a single
                                    call.)</db:para>
         <db:para>If <db:emphasis>signal</db:emphasis> is 0, it disconnects
                                        <db:emphasis>receiver</db:emphasis> and <db:emphasis>method</db:emphasis> from
                                    any signal. If not, only the specified signal is
                                    disconnected.</db:para>
         <db:para>If <db:emphasis>receiver</db:emphasis> is 0, it disconnects anything
                                    connected to <db:emphasis>signal</db:emphasis>. If not, slots in objects
                                    other than <db:emphasis>receiver</db:emphasis> are not
                                    disconnected.</db:para>
         <db:para>If <db:emphasis>method</db:emphasis> is 0, it disconnects anything
                                    that is connected to <db:emphasis>receiver</db:emphasis>. If not, only
                                    slots named <db:emphasis>method</db:emphasis> will be disconnected, and
                                    all other slots are left alone. The <db:emphasis>method</db:emphasis> must
                                    be 0 if <db:emphasis>receiver</db:emphasis> is left out, so you cannot
                                    disconnect a specifically-named slot on all objects.</db:para>
         <db:note>
            <db:para>It is not possible to use this
                                    overload to diconnect signals connected to functors or lambda
                                    expressions. That is because it is not possible to compare them.
                                    Instead, use the olverload that take a <db:code><db:link xlink:href="qmetaobject-connection.html">QMetaObject::Connection</db:link></db:code>
            </db:para>
         </db:note>
         <db:note>
            <db:para>
                                    This function is <db:link xlink:href="qtdoc/threads-reentrancy.html#thread-safe">thread-safe</db:link>.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#connect">connect</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="disconnectNotify">
         <db:title>[virtual protected] void QObject::disconnectNotify(const <db:link xlink:href="qmetamethod.html">QMetaMethod</db:link></db:title>
         <db:para>This virtual function is called when something has been
                                    disconnected from <db:emphasis>signal</db:emphasis> in this
                                    object.</db:para>
         <db:para>See <db:code><db:link xlink:href="qobject.html#connectNotify">connectNotify</db:link>()</db:code> for an example of how to compare
                                        <db:emphasis>signal</db:emphasis> with a specific signal.</db:para>
         <db:para>If all signals were disconnected from this object (e.g., the
                                    signal argument to <db:code><db:link xlink:href="qobject.html#disconnect">disconnect</db:link>()</db:code> was 0), disconnectNotify() is only
                                    called once, and the <db:emphasis>signal</db:emphasis> will be an invalid
                                        <db:code><db:link xlink:href="qmetamethod.html">QMetaMethod</db:link></db:code>
                                        (<db:code><db:link xlink:href="qmetamethod.html#isValid">QMetaMethod::isValid</db:link>()</db:code> returns
                                        <db:code>false</db:code>).</db:para>
         <db:warning>
            <db:para> This function violates the
                                    object-oriented principle of modularity. However, it might be
                                    useful for optimizing access to expensive resources.</db:para>
         </db:warning>
         <db:warning>
            <db:para> This function is called from the
                                    thread which performs the disconnection, which may be a
                                    different thread from the thread in which this object lives.
                                    This function may also be called with a <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> internal mutex locked.
                                    It is therefore not allowed to re-enter any of any <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> functions from your
                                    reimplementation and if you lock a mutex in your
                                    reimplementation, make sure that you don't call <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> functions with that
                                    mutex held in other places or it will result in a
                                    deadlock.</db:para>
         </db:warning>
         <db:para>This function was introduced in Qt 5.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#disconnect">disconnect</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#connectNotify">connectNotify</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="dumpObjectInfo">
         <db:title>void QObject::dumpObjectInfo()</db:title>
         <db:para>Dumps information about signal connections, etc. for this
                                    object to the debug output.</db:para>
         <db:para>This function is useful for debugging, but does nothing if
                                    the library has been compiled in release mode (i.e. without
                                    debugging information).</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#dumpObjectTree">dumpObjectTree</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="dumpObjectTree">
         <db:title>void QObject::dumpObjectTree()</db:title>
         <db:para>Dumps a tree of children to the debug output.</db:para>
         <db:para>This function is useful for debugging, but does nothing if
                                    the library has been compiled in release mode (i.e. without
                                    debugging information).</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#dumpObjectInfo">dumpObjectInfo</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="dynamicPropertyNames">
         <db:title><db:link xlink:href="qlist.html">QList</db:link><db:link xlink:href="qbytearray.html">QByteArray</db:link></db:title>
         <db:para>Returns the names of all properties that were dynamically
                                    added to the object using <db:code><db:link xlink:href="qobject.html#setProperty">setProperty</db:link>()</db:code>.</db:para>
         <db:para>This function was introduced in Qt 4.2.</db:para>
      </db:section>
      <db:section xml:id="event">
         <db:title>[virtual] bool QObject::event(<db:link xlink:href="qevent.html">QEvent</db:link></db:title>
         <db:para>This virtual function receives events to an object and
                                    should return true if the event <db:emphasis>e</db:emphasis> was
                                    recognized and processed.</db:para>
         <db:para>The event() function can be reimplemented to customize the
                                    behavior of an object.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#installEventFilter">installEventFilter</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#timerEvent">timerEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcoreapplication.html#sendEvent">QCoreApplication::sendEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcoreapplication.html#postEvent">QCoreApplication::postEvent</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="eventFilter">
         <db:title>[virtual] bool QObject::eventFilter(<db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qevent.html">QEvent</db:link></db:title>
         <db:para>Filters events if this object has been installed as an event
                                    filter for the <db:emphasis>watched</db:emphasis> object.</db:para>
         <db:para>In your reimplementation of this function, if you want to
                                    filter the <db:emphasis>event</db:emphasis> out, i.e. stop it being
                                    handled further, return true; otherwise return false.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>class
                                    MainWindow : publicQMainWindow { public: MainWindow(); protected: bool
                                        eventFilter(QObject*obj,QEvent*ev); private: QTextEdit*textEdit; };
                                        MainWindow::MainWindow() { textEdit =newQTextEdit;
                                    setCentralWidget(textEdit); textEdit-&gt;installEventFilter(this); } bool
                                        MainWindow::eventFilter(QObject*obj,QEvent*event) { if (obj == textEdit) { if (event-&gt;type() ==QEvent::KeyPress) { QKeyEvent*keyEvent =static_cast&lt;QKeyEvent*&gt;(event); qDebug() &lt;&lt;"Ate key press"&lt;&lt; keyEvent-&gt;key(); returntrue; } else { returnfalse; } } else { // pass the event on to the parent
                                        classreturnQMainWindow::eventFilter(obj, event); } }</db:programlisting>
         <db:para>Notice in the example above that unhandled events are passed
                                    to the base class's eventFilter() function, since the base class
                                    might have reimplemented eventFilter() for its own internal
                                    purposes.</db:para>
         <db:warning>
            <db:para> If you delete the receiver object
                                    in this function, be sure to return true. Otherwise, Qt will
                                    forward the event to the deleted object and the program might
                                    crash.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#installEventFilter">installEventFilter</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="findChild">
         <db:title>T QObject::findChild(const <db:link xlink:href="qstring.html">QString</db:link><db:link xlink:href="qt.html#FindChildOption-enum">Qt::FindChildOptions</db:link></db:title>
         <db:para>Returns the child of this object that can be cast into type
                                    T and that is called <db:emphasis>name</db:emphasis>, or 0 if there is no
                                    such object. Omitting the <db:emphasis>name</db:emphasis> argument causes
                                    all object names to be matched. The search is performed
                                    recursively, unless <db:emphasis>options</db:emphasis> specifies the
                                    option FindDirectChildrenOnly.</db:para>
         <db:para>If there is more than one child matching the search, the
                                    most direct ancestor is returned. If there are several direct
                                    ancestors, it is undefined which one will be returned. In that
                                    case, <db:code><db:link xlink:href="qobject.html#findChildren">findChildren</db:link>()</db:code> should be used.</db:para>
         <db:para>This example returns a child
                                        <db:code>QPushButton</db:code> of
                                        <db:code>parentWidget</db:code> named
                                        <db:code>"button1"</db:code>, even if the button isn't a
                                    direct child of the parent:</db:para>
         <db:programlisting>QPushButton*button = parentWidget-&gt;findChild&lt;QPushButton*&gt;("button1");</db:programlisting>
         <db:para>This example returns a <db:code>QListWidget</db:code>
                                    child of <db:code>parentWidget</db:code>:</db:para>
         <db:programlisting>QListWidget*list = parentWidget-&gt;findChild&lt;QListWidget*&gt;();</db:programlisting>
         <db:para>This example returns a child
                                        <db:code>QPushButton</db:code> of
                                        <db:code>parentWidget</db:code> (its direct parent)
                                    named <db:code>"button1"</db:code>:</db:para>
         <db:programlisting>QPushButton*button = parentWidget-&gt;findChild&lt;QPushButton*&gt;("button1",Qt::FindDirectChildOnly);</db:programlisting>
         <db:para>This example returns a <db:code>QListWidget</db:code>
                                    child of <db:code>parentWidget</db:code>, its direct
                                    parent:</db:para>
         <db:programlisting>QListWidget*list = parentWidget-&gt;findChild&lt;QListWidget*&gt;(QString(),Qt::FindDirectChildOnly);</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#findChildren">findChildren</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="findChildren">
         <db:title><db:link xlink:href="qlist.html">QList</db:link><db:link xlink:href="qstring.html">QString</db:link><db:link xlink:href="qt.html#FindChildOption-enum">Qt::FindChildOptions</db:link></db:title>
         <db:para>Returns all children of this object with the given
                                        <db:emphasis>name</db:emphasis> that can be cast to type T, or an
                                    empty list if there are no such objects. Omitting the
                                        <db:emphasis>name</db:emphasis> argument causes all object names to be
                                    matched. The search is performed recursively, unless
                                        <db:emphasis>options</db:emphasis> specifies the option
                                    FindDirectChildrenOnly.</db:para>
         <db:para>The following example shows how to find a list of child
                                        <db:code>QWidget</db:code>s of the specified
                                        <db:code>parentWidget</db:code> named
                                        <db:code>widgetname</db:code>:</db:para>
         <db:programlisting>QList&lt;QWidget*&gt; widgets = parentWidget.findChildren&lt;QWidget*&gt;("widgetname");</db:programlisting>
         <db:para>This example returns all <db:code>QPushButton</db:code>s
                                    that are children of
                                    <db:code>parentWidget</db:code>:</db:para>
         <db:programlisting>QList&lt;QPushButton*&gt; allPButtons = parentWidget.findChildren&lt;QPushButton*&gt;();</db:programlisting>
         <db:para>This example returns all <db:code>QPushButton</db:code>s
                                    that are immediate children of
                                        <db:code>parentWidget</db:code>:</db:para>
         <db:programlisting>QList&lt;QPushButton*&gt; childButtons = parentWidget.findChildren&lt;QPushButton*&gt;(QString(),Qt::FindDirectChildOnly);</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#findChild">findChild</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="findChildren-2">
         <db:title><db:link xlink:href="qlist.html">QList</db:link><db:link xlink:href="qregexp.html">QRegExp</db:link><db:link xlink:href="qt.html#FindChildOption-enum">Qt::FindChildOptions</db:link></db:title>
         <db:para>This function overloads <db:code><db:link xlink:href="qobject.html#findChildren">findChildren</db:link>()</db:code>.</db:para>
         <db:para>Returns the children of this object that can be cast to type
                                    T and that have names matching the regular expression
                                        <db:emphasis>regExp</db:emphasis>, or an empty list if there are no
                                    such objects. The search is performed recursively, unless
                                        <db:emphasis>options</db:emphasis> specifies the option
                                    FindDirectChildrenOnly.</db:para>
      </db:section>
      <db:section xml:id="findChildren-3">
         <db:title><db:link xlink:href="qlist.html">QList</db:link><db:link xlink:href="qregularexpression.html">QRegularExpression</db:link><db:link xlink:href="qt.html#FindChildOption-enum">Qt::FindChildOptions</db:link></db:title>
         <db:para>This function overloads <db:code><db:link xlink:href="qobject.html#findChildren">findChildren</db:link>()</db:code>.</db:para>
         <db:para>Returns the children of this object that can be cast to type
                                    T and that have names matching the regular expression
                                        <db:emphasis>re</db:emphasis>, or an empty list if there are no such
                                    objects. The search is performed recursively, unless
                                        <db:emphasis>options</db:emphasis> specifies the option
                                    FindDirectChildrenOnly.</db:para>
         <db:para>This function was introduced in Qt 5.0.</db:para>
      </db:section>
      <db:section xml:id="inherits">
         <db:title>bool QObject::inherits(const char * className) const</db:title>
         <db:para>Returns <db:code>true</db:code> if this object is an
                                    instance of a class that inherits <db:emphasis>className</db:emphasis> or
                                    a <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> subclass that
                                    inherits <db:emphasis>className</db:emphasis>; otherwise returns
                                        <db:code>false</db:code>.</db:para>
         <db:para>A class is considered to inherit itself.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>QTimer*timer =newQTimer; // QTimer inherits QObject timer-&gt;inherits("QTimer"); //
                                        returns true timer-&gt;inherits("QObject"); //
                                        returns true timer-&gt;inherits("QAbstractButton"); // returns false// QVBoxLayout inherits QObject and
                                        QLayoutItemQVBoxLayout*layout =newQVBoxLayout; layout-&gt;inherits("QObject"); //
                                        returns true layout-&gt;inherits("QLayoutItem"); //
                                        returns true (even though QLayoutItem is not a
                                        QObject)</db:programlisting>
         <db:para>If you need to determine whether an object is an instance of
                                    a particular class for the purpose of casting it, consider using
                                        <db:link xlink:href="qobject.html#qobject_cast">qobject_cast</db:link>(object)
                                    instead.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#metaObject">metaObject</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#qobject_cast">qobject_cast</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="installEventFilter">
         <db:title>void QObject::installEventFilter(<db:link xlink:href="qobject.html#QObject">QObject</db:link></db:title>
         <db:para>Installs an event filter <db:emphasis>filterObj</db:emphasis> on this
                                    object. For example:</db:para>
         <db:programlisting>monitoredObj-&gt;installEventFilter(filterObj);</db:programlisting>
         <db:para>An event filter is an object that receives all events that
                                    are sent to this object. The filter can either stop the event or
                                    forward it to this object. The event filter
                                        <db:emphasis>filterObj</db:emphasis> receives events via its <db:code><db:link xlink:href="qobject.html#eventFilter">eventFilter</db:link>()</db:code>
                                    function. The <db:code><db:link xlink:href="qobject.html#eventFilter">eventFilter</db:link>()</db:code> function must return true if the
                                    event should be filtered, (i.e. stopped); otherwise it must
                                    return false.</db:para>
         <db:para>If multiple event filters are installed on a single object,
                                    the filter that was installed last is activated first.</db:para>
         <db:para>Here's a <db:code>KeyPressEater</db:code> class that
                                    eats the key presses of its monitored objects:</db:para>
         <db:programlisting>class
                                    KeyPressEater : publicQObject { Q_OBJECT ...protected: bool
                                        eventFilter(QObject*obj,QEvent*event); }; bool
                                        KeyPressEater::eventFilter(QObject*obj,QEvent*event) { if (event-&gt;type() ==QEvent::KeyPress) { QKeyEvent*keyEvent =static_cast&lt;QKeyEvent*&gt;(event); qDebug("Ate key press %d", keyEvent-&gt;key()); returntrue; } else { // standard event processingreturnQObject::eventFilter(obj, event); } }</db:programlisting>
         <db:para>And here's how to install it on two widgets:</db:para>
         <db:programlisting>KeyPressEater *keyPressEater =new
                                        KeyPressEater(this);
                                        QPushButton*pushButton =newQPushButton(this); QListView*listView =newQListView(this); pushButton-&gt;installEventFilter(keyPressEater);
                                        listView-&gt;installEventFilter(keyPressEater);</db:programlisting>
         <db:para>The <db:code><db:link xlink:href="qtwidgets/qshortcut.html">QShortcut</db:link></db:code> class, for example, uses this technique
                                    to intercept shortcut key presses.</db:para>
         <db:warning>
            <db:para> If you delete the receiver object
                                    in your <db:code><db:link xlink:href="qobject.html#eventFilter">eventFilter</db:link>()</db:code> function, be sure to return true. If
                                    you return false, Qt sends the event to the deleted object and
                                    the program will crash.</db:para>
         </db:warning>
         <db:para>Note that the filtering object must be in the same thread as
                                    this object. If <db:emphasis>filterObj</db:emphasis> is in a different
                                    thread, this function does nothing. If either
                                        <db:emphasis>filterObj</db:emphasis> or this object are moved to a
                                    different thread after calling this function, the event filter
                                    will not be called until both objects have the same thread
                                    affinity again (it is <db:emphasis>not</db:emphasis> removed).</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#removeEventFilter">removeEventFilter</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#eventFilter">eventFilter</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#event">event</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="isSignalConnected">
         <db:title>[protected] bool QObject::isSignalConnected(const <db:link xlink:href="qmetamethod.html">QMetaMethod</db:link></db:title>
         <db:para>Returns <db:code>true</db:code> if the
                                        <db:emphasis>signal</db:emphasis> is connected to at least one
                                    receiver, otherwise returns
                                    <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis>signal</db:emphasis> must be a signal member of this
                                    object, otherwise the behaviour is undefined.</db:para>
         <db:programlisting>staticconstQMetaMethod valueChangedSignal
                                        =QMetaMethod::fromSignal(&amp;MyObject::valueChanged); if
                                    (isSignalConnected(valueChangedSignal)) { QByteArray data; data = get_the_value(); // expensive operationemit valueChanged(data);
                                    }</db:programlisting>
         <db:para>As the code snippet above illustrates, you can use this
                                    function to avoid emitting a signal that nobody listens
                                    to.</db:para>
         <db:warning>
            <db:para> This function violates the
                                    object-oriented principle of modularity. However, it might be
                                    useful when you need to perform expensive initialization only if
                                    something is connected to a signal.</db:para>
         </db:warning>
         <db:para>This function was introduced in Qt 5.0.</db:para>
      </db:section>
      <db:section xml:id="isWidgetType">
         <db:title>bool QObject::isWidgetType() const</db:title>
         <db:para>Returns <db:code>true</db:code> if the object is a
                                    widget; otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>Calling this function is equivalent to calling
                                        <db:code>inherits("QWidget")</db:code>, except that it
                                    is much faster.</db:para>
      </db:section>
      <db:section xml:id="isWindowType">
         <db:title>bool QObject::isWindowType() const</db:title>
         <db:para>Returns <db:code>true</db:code> if the object is a
                                    window; otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>Calling this function is equivalent to calling
                                        <db:code>inherits("QWindow")</db:code>, except that it
                                    is much faster.</db:para>
      </db:section>
      <db:section xml:id="killTimer">
         <db:title>void QObject::killTimer(int id)</db:title>
         <db:para>Kills the timer with timer identifier,
                                    <db:emphasis>id</db:emphasis>.</db:para>
         <db:para>The timer identifier is returned by <db:code><db:link xlink:href="qobject.html#startTimer">startTimer</db:link>()</db:code> when a
                                    timer event is started.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#timerEvent">timerEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#startTimer">startTimer</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="metaObject">
         <db:title>[virtual] const <db:link xlink:href="qmetaobject.html">QMetaObject</db:link></db:title>
         <db:para>Returns a pointer to the meta-object of this
                                    object.</db:para>
         <db:para>A meta-object contains information about a class that
                                    inherits <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code>, e.g.
                                    class name, superclass name, properties, signals and slots.
                                    Every <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> subclass that
                                    contains the <db:code><db:link xlink:href="qobject.html#Q_OBJECT">Q_OBJECT</db:link></db:code> macro will have a meta-object.</db:para>
         <db:para>The meta-object information is required by the signal/slot
                                    connection mechanism and the property system. The <db:code><db:link xlink:href="qobject.html#inherits">inherits</db:link>()</db:code> function
                                    also makes use of the meta-object.</db:para>
         <db:para>If you have no pointer to an actual object instance but
                                    still want to access the meta-object of a class, you can use
                                        <db:link xlink:href="qobject.html#staticMetaObject-var">staticMetaObject</db:link>.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>QObject*obj =newQPushButton; obj-&gt;metaObject()-&gt;className(); //
                                        returns "QPushButton"QPushButton::staticMetaObject.className(); //
                                        returns "QPushButton"</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qobject.html#staticMetaObject-var">staticMetaObject</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="moveToThread">
         <db:title>void QObject::moveToThread(<db:link xlink:href="qthread.html">QThread</db:link></db:title>
         <db:para>Changes the thread affinity for this object and its
                                    children. The object cannot be moved if it has a parent. Event
                                    processing will continue in the
                                    <db:emphasis>targetThread</db:emphasis>.</db:para>
         <db:para>To move an object to the main thread, use
                                    QApplication::instance() to retrieve a pointer to the current
                                    application, and then use QApplication::thread() to retrieve the
                                    thread in which the application lives. For example:</db:para>
         <db:programlisting>myObject-&gt;moveToThread(QApplication::instance()-&gt;thread());</db:programlisting>
         <db:para>If <db:emphasis>targetThread</db:emphasis> is zero, all event
                                    processing for this object and its children stops.</db:para>
         <db:para>Note that all active timers for the object will be reset.
                                    The timers are first stopped in the current thread and restarted
                                    (with the same interval) in the <db:emphasis>targetThread</db:emphasis>.
                                    As a result, constantly moving an object between threads can
                                    postpone timer events indefinitely.</db:para>
         <db:para>A <db:code><db:link xlink:href="qevent.html#Type-enum">QEvent::ThreadChange</db:link></db:code> event is sent to this object
                                    just before the thread affinity is changed. You can handle this
                                    event to perform any special processing. Note that any new
                                    events that are posted to this object will be handled in the
                                        <db:emphasis>targetThread</db:emphasis>.</db:para>
         <db:warning>
            <db:para> This function is
                                        <db:emphasis>not</db:emphasis> thread-safe; the current thread must be
                                    same as the current thread affinity. In other words, this
                                    function can only "push" an object from the current thread to
                                    another thread, it cannot "pull" an object from any arbitrary
                                    thread to the current thread.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#thread">thread</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="parent">
         <db:title><db:link xlink:href="qobject.html#QObject">QObject</db:link></db:title>
         <db:para>Returns a pointer to the parent object.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#setParent">setParent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#children">children</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="property">
         <db:title><db:link xlink:href="qvariant.html">QVariant</db:link></db:title>
         <db:para>Returns the value of the object's <db:emphasis>name</db:emphasis>
                                    property.</db:para>
         <db:para>If no such property exists, the returned variant is
                                    invalid.</db:para>
         <db:para>Information about all available properties is provided
                                    through the <db:code><db:link xlink:href="qobject.html#metaObject">metaObject</db:link>()</db:code> and <db:code><db:link xlink:href="qobject.html#dynamicPropertyNames">dynamicPropertyNames</db:link>()</db:code>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#setProperty">setProperty</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qvariant.html#isValid">QVariant::isValid</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#metaObject">metaObject</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#dynamicPropertyNames">dynamicPropertyNames</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="receivers">
         <db:title>[protected] int QObject::receivers(const char * signal) const</db:title>
         <db:para>Returns the number of receivers connected to the
                                        <db:emphasis>signal</db:emphasis>.</db:para>
         <db:para>Since both slots and signals can be used as receivers for
                                    signals, and the same connections can be made many times, the
                                    number of receivers is the same as the number of connections
                                    made from this signal.</db:para>
         <db:para>When calling this function, you can use the
                                        <db:code>SIGNAL()</db:code> macro to pass a specific
                                    signal:</db:para>
         <db:programlisting>if
                                        (receivers(SIGNAL(valueChanged(QByteArray))) &gt;0) { QByteArray data;
                                        get_the_value(&amp;data); // expensive
                                        operationemit valueChanged(data);
                                    }</db:programlisting>
         <db:warning>
            <db:para> This function violates the
                                    object-oriented principle of modularity. However, it might be
                                    useful when you need to perform expensive initialization only if
                                    something is connected to a signal.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#isSignalConnected">isSignalConnected</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="removeEventFilter">
         <db:title>void QObject::removeEventFilter(<db:link xlink:href="qobject.html#QObject">QObject</db:link></db:title>
         <db:para>Removes an event filter object <db:emphasis>obj</db:emphasis> from
                                    this object. The request is ignored if such an event filter has
                                    not been installed.</db:para>
         <db:para>All event filters for this object are automatically removed
                                    when this object is destroyed.</db:para>
         <db:para>It is always safe to remove an event filter, even during
                                    event filter activation (i.e. from the <db:code><db:link xlink:href="qobject.html#eventFilter">eventFilter</db:link>()</db:code>
                                    function).</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#installEventFilter">installEventFilter</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#eventFilter">eventFilter</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#event">event</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="sender">
         <db:title>[protected] <db:link xlink:href="qobject.html#QObject">QObject</db:link></db:title>
         <db:para>Returns a pointer to the object that sent the signal, if
                                    called in a slot activated by a signal; otherwise it returns 0.
                                    The pointer is valid only during the execution of the slot that
                                    calls this function from this object's thread context.</db:para>
         <db:para>The pointer returned by this function becomes invalid if the
                                    sender is destroyed, or if the slot is disconnected from the
                                    sender's signal.</db:para>
         <db:warning>
            <db:para> This function violates the
                                    object-oriented principle of modularity. However, getting access
                                    to the sender might be useful when many signals are connected to
                                    a single slot.</db:para>
         </db:warning>
         <db:warning>
            <db:para> As mentioned above, the return
                                    value of this function is not valid when the slot is called via
                                    a <db:code><db:link xlink:href="qt.html#ConnectionType-enum">Qt::DirectConnection</db:link></db:code> from a thread different from
                                    this object's thread. Do not use this function in this type of
                                    scenario.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#senderSignalIndex">senderSignalIndex</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qsignalmapper.html">QSignalMapper</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="senderSignalIndex">
         <db:title>[protected] int QObject::senderSignalIndex() const</db:title>
         <db:para>Returns the meta-method index of the signal that called the
                                    currently executing slot, which is a member of the class
                                    returned by <db:code><db:link xlink:href="qobject.html#sender">sender</db:link>()</db:code>. If called outside of a slot activated by a
                                    signal, -1 is returned.</db:para>
         <db:para>For signals with default parameters, this function will
                                    always return the index with all parameters, regardless of which
                                    was used with <db:code><db:link xlink:href="qobject.html#connect">connect</db:link>()</db:code>. For example, the signal
                                        <db:code>destroyed(QObject *obj = 0)</db:code> will have
                                    two different indexes (with and without the parameter), but this
                                    function will always return the index with a parameter. This
                                    does not apply when overloading signals with different
                                    parameters.</db:para>
         <db:warning>
            <db:para> This function violates the
                                    object-oriented principle of modularity. However, getting access
                                    to the signal index might be useful when many signals are
                                    connected to a single slot.</db:para>
         </db:warning>
         <db:warning>
            <db:para> The return value of this function
                                    is not valid when the slot is called via a <db:code><db:link xlink:href="qt.html#ConnectionType-enum">Qt::DirectConnection</db:link></db:code> from a thread different from
                                    this object's thread. Do not use this function in this type of
                                    scenario.</db:para>
         </db:warning>
         <db:para>This function was introduced in Qt 4.8.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#sender">sender</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qmetaobject.html#indexOfSignal">QMetaObject::indexOfSignal</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qmetaobject.html#method">QMetaObject::method</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setParent">
         <db:title>void QObject::setParent(<db:link xlink:href="qobject.html#QObject">QObject</db:link></db:title>
         <db:para>Makes the object a child of
                                    <db:emphasis>parent</db:emphasis>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#parent">parent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#children">children</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="setProperty">
         <db:title>bool QObject::setProperty(const char * name, const <db:link xlink:href="qvariant.html">QVariant</db:link></db:title>
         <db:para>Sets the value of the object's <db:emphasis>name</db:emphasis>
                                    property to <db:emphasis>value</db:emphasis>.</db:para>
         <db:para>If the property is defined in the class using <db:code><db:link xlink:href="qobject.html#Q_PROPERTY">Q_PROPERTY</db:link></db:code> then true
                                    is returned on success and false otherwise. If the property is
                                    not defined using <db:code><db:link xlink:href="qobject.html#Q_PROPERTY">Q_PROPERTY</db:link></db:code>, and therefore not listed in the
                                    meta-object, it is added as a dynamic property and false is
                                    returned.</db:para>
         <db:para>Information about all available properties is provided
                                    through the <db:code><db:link xlink:href="qobject.html#metaObject">metaObject</db:link>()</db:code> and <db:code><db:link xlink:href="qobject.html#dynamicPropertyNames">dynamicPropertyNames</db:link>()</db:code>.</db:para>
         <db:para>Dynamic properties can be queried again using <db:code><db:link xlink:href="qobject.html#property">property</db:link>()</db:code> and can be
                                    removed by setting the property value to an invalid <db:code><db:link xlink:href="qvariant.html">QVariant</db:link></db:code>. Changing the value
                                    of a dynamic property causes a <db:code><db:link xlink:href="qdynamicpropertychangeevent.html">QDynamicPropertyChangeEvent</db:link></db:code> to be sent to the
                                    object.</db:para>
         <db:note>
            <db:para> Dynamic properties starting with
                                    "_q_" are reserved for internal purposes.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#property">property</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#metaObject">metaObject</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#dynamicPropertyNames">dynamicPropertyNames</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="signalsBlocked">
         <db:title>bool QObject::signalsBlocked() const</db:title>
         <db:para>Returns <db:code>true</db:code> if signals are blocked;
                                    otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>Signals are not blocked by default.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#blockSignals">blockSignals</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="startTimer">
         <db:title>int QObject::startTimer(int interval, <db:link xlink:href="qt.html#TimerType-enum">Qt::TimerType</db:link></db:title>
         <db:para>Starts a timer and returns a timer identifier, or returns
                                    zero if it could not start a timer.</db:para>
         <db:para>A timer event will occur every <db:emphasis>interval</db:emphasis>
                                    milliseconds until <db:code><db:link xlink:href="qobject.html#killTimer">killTimer</db:link>()</db:code> is called. If
                                        <db:emphasis>interval</db:emphasis> is 0, then the timer event occurs
                                    once every time there are no more window system events to
                                    process.</db:para>
         <db:para>The virtual <db:code><db:link xlink:href="qobject.html#timerEvent">timerEvent</db:link>()</db:code> function is called with the <db:code><db:link xlink:href="qtimerevent.html">QTimerEvent</db:link></db:code> event parameter
                                    class when a timer event occurs. Reimplement this function to
                                    get timer events.</db:para>
         <db:para>If multiple timers are running, the <db:code><db:link xlink:href="qtimerevent.html#timerId">QTimerEvent::timerId</db:link>()</db:code> can be used to find out
                                    which timer was activated.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>class
                                    MyObject : publicQObject { Q_OBJECT public: MyObject(QObject*parent =0); protected: void timerEvent(QTimerEvent*event); };
                                        MyObject::MyObject(QObject*parent) : QObject(parent) {
                                        startTimer(50);
                                        // 50-millisecond
                                        timer startTimer(1000); // 1-second
                                        timer startTimer(60000); // 1-minute
                                        timer } void
                                        MyObject::timerEvent(QTimerEvent*event) { qDebug() &lt;&lt;"Timer ID:"&lt;&lt; event-&gt;timerId(); }</db:programlisting>
         <db:para>Note that <db:code><db:link xlink:href="qtimer.html">QTimer</db:link></db:code>'s
                                    accuracy depends on the underlying operating system and
                                    hardware. The <db:emphasis>timerType</db:emphasis> argument allows you to
                                    customize the accuracy of the timer. See <db:code><db:link xlink:href="qt.html#TimerType-enum">Qt::TimerType</db:link></db:code> for
                                    information on the different timer types. Most platforms support
                                    an accuracy of 20 milliseconds; some provide more. If Qt is
                                    unable to deliver the requested number of timer events, it will
                                    silently discard some.</db:para>
         <db:para>The <db:code><db:link xlink:href="qtimer.html">QTimer</db:link></db:code> class
                                    provides a high-level programming interface with single-shot
                                    timers and timer signals instead of events. There is also a
                                        <db:code><db:link xlink:href="qbasictimer.html">QBasicTimer</db:link></db:code> class
                                    that is more lightweight than <db:code><db:link xlink:href="qtimer.html">QTimer</db:link></db:code> and less clumsy than using timer IDs
                                    directly.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#timerEvent">timerEvent</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#killTimer">killTimer</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtimer.html#singleShot">QTimer::singleShot</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="thread">
         <db:title><db:link xlink:href="qthread.html">QThread</db:link></db:title>
         <db:para>Returns the thread in which the object lives.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#moveToThread">moveToThread</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="timerEvent">
         <db:title>[virtual protected] void QObject::timerEvent(<db:link xlink:href="qtimerevent.html">QTimerEvent</db:link></db:title>
         <db:para>This event handler can be reimplemented in a subclass to
                                    receive timer events for the object.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qtimer.html">QTimer</db:link></db:code> provides a
                                    higher-level interface to the timer functionality, and also more
                                    general information about timers. The timer event is passed in
                                    the <db:emphasis>event</db:emphasis> parameter.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#startTimer">startTimer</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#killTimer">killTimer</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#event">event</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="tr">
         <db:title>[static] <db:link xlink:href="qstring.html">QString</db:link></db:title>
         <db:para>Returns a translated version of <db:emphasis>sourceText</db:emphasis>,
                                    optionally based on a <db:emphasis>disambiguation</db:emphasis> string and
                                    value of <db:emphasis>n</db:emphasis> for strings containing plurals;
                                    otherwise returns <db:emphasis>sourceText</db:emphasis> itself if no
                                    appropriate translated string is available.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>void
                                        MainWindow::createMenus() { fileMenu = menuBar()-&gt;addMenu(tr("&amp;File")); ...</db:programlisting>
         <db:para>If the same <db:emphasis>sourceText</db:emphasis> is used in different
                                    roles within the same context, an additional identifying string
                                    may be passed in <db:emphasis>disambiguation</db:emphasis> (0 by default).
                                    In Qt 4.4 and earlier, this was the preferred way to pass
                                    comments to translators.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>MyWindow::MyWindow() { QLabel*senderLabel =newQLabel(tr("Name:")); QLabel*recipientLabel
                                        =newQLabel(tr("Name:","recipient"));
                                    ...</db:programlisting>
         <db:para>See <db:link xlink:href="qtdoc/i18n-source-translation.html">Writing Source Code for Translation</db:link> for a detailed
                                    description of Qt's translation mechanisms in general, and the
                                        <db:link xlink:href="qtdoc/i18n-source-translation.html#disambiguation">Disambiguation</db:link> section for information on
                                    disambiguation.</db:para>
         <db:warning>
            <db:para> This method is reentrant only if
                                    all translators are installed <db:emphasis>before</db:emphasis> calling
                                    this method. Installing or removing translators while performing
                                    translations is not supported. Doing so will probably result in
                                    crashes or other undesirable behavior.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject-obsolete.html#trUtf8">trUtf8</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcoreapplication.html#translate">QCoreApplication::translate</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtdoc/internationalization.html">Internationalization
                                        with Qt</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
   </db:section>
   <db:section xml:id="relnonmem">
      <db:title>Related Non-Members</db:title>
      <db:section xml:id="QObjectList-typedef">
         <db:title>typedef QObjectList</db:title>
         <db:para>Synonym for <db:code><db:link xlink:href="qlist.html">QList</db:link>&lt;&gt;</db:code>
            <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> *&gt;.</db:para>
      </db:section>
      <db:section xml:id="qFindChildren">
         <db:title><db:link xlink:href="qlist.html">QList</db:link><db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qregexp.html">QRegExp</db:link></db:title>
         <db:para>This function overloads qFindChildren().</db:para>
         <db:para>This function is equivalent to
                                        <db:emphasis>obj</db:emphasis>-&gt;<db:link xlink:href="qobject.html#findChildren">findChildren</db:link>(<db:emphasis>regExp</db:emphasis>).</db:para>
         <db:note>
            <db:para>This function was provided as a
                                    workaround for MSVC 6 which did not support member template
                                    functions. It is advised to use the other form in new
                                    code.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#findChildren">QObject::findChildren</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="qobject_cast">
         <db:title>T qobject_cast(<db:link xlink:href="qobject.html#QObject">QObject</db:link></db:title>
         <db:para>Returns the given <db:emphasis>object</db:emphasis> cast to type T if
                                    the object is of type T (or of a subclass); otherwise returns 0.
                                    If <db:emphasis>object</db:emphasis> is 0 then it will also return
                                    0.</db:para>
         <db:para>The class T must inherit (directly or indirectly) <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> and be declared with
                                    the <db:code><db:link xlink:href="qobject.html#Q_OBJECT">Q_OBJECT</db:link></db:code>
                                    macro.</db:para>
         <db:para>A class is considered to inherit itself.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>QObject*obj =newQTimer; // QTimer inherits QObjectQTimer*timer = qobject_cast&lt;QTimer*&gt;(obj); // timer == (QObject *)objQAbstractButton*button = qobject_cast&lt;QAbstractButton*&gt;(obj); // button == 0</db:programlisting>
         <db:para>The qobject_cast() function behaves similarly to the
                                    standard C++ <db:code>dynamic_cast()</db:code>, with the
                                    advantages that it doesn't require RTTI support and it works
                                    across dynamic library boundaries.</db:para>
         <db:para>qobject_cast() can also be used in conjunction with
                                    interfaces; see the <db:link xlink:href="qtwidgets/qtwidgets-tools-plugandpaint-example.html">Plug &amp; Paint</db:link> example for details.</db:para>
         <db:warning>
            <db:para> If T isn't declared with the
                                        <db:code><db:link xlink:href="qobject.html#Q_OBJECT">Q_OBJECT</db:link></db:code>
                                    macro, this function's return value is undefined.</db:para>
         </db:warning>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#inherits">QObject::inherits</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
   </db:section>
   <db:section xml:id="vars">
      <db:title>Member Variable Documentation</db:title>
      <db:section xml:id="staticMetaObject-var">
         <db:title>const <db:link xlink:href="qmetaobject.html">QMetaObject</db:link></db:title>
         <db:para>This variable stores the meta-object for the class.</db:para>
         <db:para>A meta-object contains information about a class that
                                    inherits <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code>, e.g.
                                    class name, superclass name, properties, signals and slots.
                                    Every class that contains the <db:code><db:link xlink:href="qobject.html#Q_OBJECT">Q_OBJECT</db:link></db:code> macro will
                                    also have a meta-object.</db:para>
         <db:para>The meta-object information is required by the signal/slot
                                    connection mechanism and the property system. The <db:code><db:link xlink:href="qobject.html#inherits">inherits</db:link>()</db:code> function
                                    also makes use of the meta-object.</db:para>
         <db:para>If you have a pointer to an object, you can use <db:code><db:link xlink:href="qobject.html#metaObject">metaObject</db:link>()</db:code> to
                                    retrieve the meta-object associated with that object.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>QPushButton::staticMetaObject.className(); //
                                        returns "QPushButton"QObject*obj =newQPushButton; obj-&gt;metaObject()-&gt;className(); //
                                        returns "QPushButton"</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#metaObject">metaObject</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
   </db:section>
   <db:section xml:id="macros">
      <db:title>Macro Documentation</db:title>
      <db:section xml:id="Q_CLASSINFO">
         <db:title>Q_CLASSINFO( Name, Value)</db:title>
         <db:para>This macro associates extra information to the class, which
                                    is available using <db:code><db:link xlink:href="qobject.html#metaObject">QObject::metaObject</db:link>()</db:code>. Qt makes only limited use
                                    of this feature, in the <db:link xlink:href="activeqt/activeqt-index.html">Active Qt</db:link>,
                                        <db:link xlink:href="qtdbus/qtdbus-index.html">Qt D-Bus</db:link>
                                    and <db:link xlink:href="qtdoc/whatsnew53.html#qt-qml-module">Qt
                                        QML</db:link>.</db:para>
         <db:para>The extra information takes the form of a
                                        <db:emphasis>Name</db:emphasis> string and a <db:emphasis>Value</db:emphasis>
                                    literal string.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>class
                                    MyClass : publicQObject { Q_OBJECT
                                        Q_CLASSINFO("Author","Pierre Gendron")
                                        Q_CLASSINFO("URL","http://www.my-organization.qc.ca") public: ...
                                    };</db:programlisting>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qmetaobject.html#classInfo">QMetaObject::classInfo</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="activeqt/qaxfactory.html">QAxFactory</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtdbus/usingadaptors.html">Using Qt D-Bus
                                        Adaptors</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtquick/qtquick-codesamples.html#extending-qml">Extending QML</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="Q_DISABLE_COPY">
         <db:title>Q_DISABLE_COPY( Class)</db:title>
         <db:para>Disables the use of copy constructors and assignment
                                    operators for the given <db:emphasis>Class</db:emphasis>.</db:para>
         <db:para>Instances of subclasses of <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> should not be thought of as values that
                                    can be copied or assigned, but as unique identities. This means
                                    that when you create your own subclass of <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> (director or indirect),
                                    you should <db:emphasis>not</db:emphasis> give it a copy constructor or an
                                    assignment operator. However, it may not enough to simply omit
                                    them from your class, because, if you mistakenly write some code
                                    that requires a copy constructor or an assignment operator (it's
                                    easy to do), your compiler will thoughtfully create it for you.
                                    You must do more.</db:para>
         <db:para>The curious user will have seen that the Qt classes derived
                                    from <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> typically
                                    include this macro in a private section:</db:para>
         <db:programlisting>class
                                    MyClass : publicQObject { private: Q_DISABLE_COPY(MyClass)
                                    };</db:programlisting>
         <db:para>It declares a copy constructor and an assignment operator in
                                    the private section, so that if you use them by mistake, the
                                    compiler will report an error.</db:para>
         <db:programlisting>class
                                    MyClass : publicQObject { private: MyClass(const MyClass &amp;); MyClass &amp;operator=(const
                                    MyClass &amp;);
                                    };</db:programlisting>
         <db:para>But even this might not catch absolutely every case. You
                                    might be tempted to do something like this:</db:para>
         <db:programlisting>QWidget w =QWidget();</db:programlisting>
         <db:para>First of all, don't do that. Most compilers will generate
                                    code that uses the copy constructor, so the privacy violation
                                    error will be reported, but your C++ compiler is not required to
                                    generate code for this statement in a specific way. It could
                                    generate code using <db:emphasis>neither</db:emphasis> the copy
                                    constructor <db:emphasis>nor</db:emphasis> the assignment operator we made
                                    private. In that case, no error would be reported, but your
                                    application would probably crash when you called a member
                                    function of <db:code>w</db:code>.</db:para>
      </db:section>
      <db:section xml:id="Q_EMIT">
         <db:title>Q_EMIT</db:title>
         <db:para>Use this macro to replace the <db:code>emit</db:code>
                                    keyword for emitting signals, when you want to use Qt Signals
                                    and Slots with a <db:link xlink:href="signalsandslots.html#3rd-party-signals-and-slots">3rd
                                        party signal/slot mechanism</db:link>.</db:para>
         <db:para>The macro is normally used when
                                        <db:code>no_keywords</db:code> is specified with the
                                        <db:code>CONFIG</db:code> variable in the
                                        <db:code>.pro</db:code> file, but it can be used even
                                    when <db:code>no_keywords</db:code> is <db:emphasis>not</db:emphasis>
                                    specified.</db:para>
      </db:section>
      <db:section xml:id="Q_ENUMS">
         <db:title>Q_ENUMS(...)</db:title>
         <db:para>This macro registers one or several enum types to the
                                    meta-object system.</db:para>
         <db:para>For example:</db:para>
         <db:programlisting>class
                                    MyClass : publicQObject { Q_OBJECT
                                    Q_ENUMS(Priority) public:
                                        MyClass(QObject*parent =0); ~MyClass(); enum Priority { High, Low, VeryHigh, VeryLow }; void setPriority(Priority
                                    priority); Priority priority() const; };</db:programlisting>
         <db:para>If you want to register an enum that is declared in another
                                    class, the enum must be fully qualified with the name of the
                                    class defining it. In addition, the class
                                        <db:emphasis>defining</db:emphasis> the enum has to inherit <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> as well as declare the
                                    enum using Q_ENUMS().</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="properties.html#qt-s-property-system">Qt's Property
                                        System</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="Q_FLAGS">
         <db:title>Q_FLAGS(...)</db:title>
         <db:para>This macro registers one or several <db:link xlink:href="qflags.html">flags types</db:link> to the meta-object
                                    system. It is typically used in a class definition to declare
                                    that values of a given enum can be used as flags and combined
                                    using the bitwise OR operator.</db:para>
         <db:para>For example, in <db:code><db:link xlink:href="qlibrary.html">QLibrary</db:link></db:code>, the <db:link xlink:href="qlibrary.html#LoadHint-enum">LoadHints</db:link> flag
                                    is declared in the following way:</db:para>
         <db:programlisting>classQLibrary : publicQObject { ...
                                    Q_FLAGS(LoadHint LoadHints) ...</db:programlisting>
         <db:para>The declaration of the flags themselves is performed in the
                                    public section of the <db:code><db:link xlink:href="qlibrary.html">QLibrary</db:link></db:code> class itself, using the <db:code><db:link xlink:href="qflags.html#Q_DECLARE_FLAGS">Q_DECLARE_FLAGS</db:link>()</db:code> macro:</db:para>
         <db:programlisting>...public: enum LoadHint {
                                    ResolveAllSymbolsHint =0x01, ExportExternalSymbolsHint
                                        =0x02, LoadArchiveMemberHint
                                        =0x04 };
                                        Q_DECLARE_FLAGS(LoadHints, LoadHint) ...</db:programlisting>
         <db:note>
            <db:para>This macro takes care of registering
                                    individual flag values with the meta-object system, so it is
                                    unnecessary to use <db:code><db:link xlink:href="qobject.html#Q_ENUMS">Q_ENUMS</db:link>()</db:code> in addition to this
                                        macro.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="properties.html#qt-s-property-system">Qt's Property
                                        System</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="Q_INTERFACES">
         <db:title>Q_INTERFACES(...)</db:title>
         <db:para>This macro tells Qt which interfaces the class implements.
                                    This is used when implementing plugins.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>class
                                    BasicToolsPlugin : publicQObject,public
                                        BrushInterface,public
                                        ShapeInterface,public FilterInterface {
                                    Q_OBJECT Q_PLUGIN_METADATA(IID "org.qt-project.Qt.Examples.PlugAndPaint.BrushInterface"
                                    FILE "basictools.json")
                                    Q_INTERFACES(BrushInterface ShapeInterface FilterInterface)
                                        public: ...
                                    };</db:programlisting>
         <db:para>See the <db:link xlink:href="qtwidgets/qtwidgets-tools-plugandpaintplugins-basictools-example.html">Plug &amp; Paint Basic Tools</db:link> example for
                                    details.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtplugin.html#Q_DECLARE_INTERFACE">Q_DECLARE_INTERFACE</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtplugin.html#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>()</db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qtdoc/plugins-howto.html">How to Create Qt
                                        Plugins</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="Q_INVOKABLE">
         <db:title>Q_INVOKABLE</db:title>
         <db:para>Apply this macro to declarations of member functions to
                                    allow them to be invoked via the meta-object system. The macro
                                    is written before the return type, as shown in the following
                                    example:</db:para>
         <db:programlisting>class
                                    Window : publicQWidget { Q_OBJECT public: Window(); void normalMethod(); Q_INVOKABLE
                                        void invokableMethod();
                                    };</db:programlisting>
         <db:para>The <db:code>invokableMethod()</db:code> function is
                                    marked up using Q_INVOKABLE, causing it to be registered with
                                    the meta-object system and enabling it to be invoked using
                                        <db:code><db:link xlink:href="qmetaobject.html#invokeMethod">QMetaObject::invokeMethod</db:link>()</db:code>. Since
                                        <db:code>normalMethod()</db:code> function is not
                                    registered in this way, it cannot be invoked using <db:code><db:link xlink:href="qmetaobject.html#invokeMethod">QMetaObject::invokeMethod</db:link>()</db:code>.</db:para>
      </db:section>
      <db:section xml:id="Q_OBJECT">
         <db:title>Q_OBJECT</db:title>
         <db:para>The Q_OBJECT macro must appear in the private section of a
                                    class definition that declares its own signals and slots or that
                                    uses other services provided by Qt's meta-object
                                    system.</db:para>
         <db:para>For example:</db:para>
         <db:programlisting>#include
                                        &lt;QObject&gt;class Counter :
                                        publicQObject { Q_OBJECT public: Counter() { m_value
                                        =0; } int value() const { return m_value; } publicslots: void setValue(int value); signals: void valueChanged(int newValue); private: int m_value; };</db:programlisting>
         <db:note>
            <db:para>This macro requires the class to be a
                                    subclass of <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code>. Use
                                    Q_GADGET instead of Q_OBJECT to enable the meta object system's
                                    support for enums in a class that is not a <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code> subclass. Q_GADGET
                                    makes a class member, <db:code>staticMetaObject</db:code>,
                                    available. <db:code>staticMetaObject</db:code> is of type
                                        <db:code><db:link xlink:href="qmetaobject.html">QMetaObject</db:link></db:code> and
                                    provides access to the enums declared with <db:code><db:link xlink:href="qobject.html#Q_ENUMS">Q_ENUMS</db:link></db:code>. Q_GADGET is
                                    provided only for C++.</db:para>
         </db:note>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="metaobjects.html#meta-object-system">Meta-Object System</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="signalsandslots.html#signals-and-slots">Signals and
                                        Slots</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="properties.html#qt-s-property-system">Qt's Property
                                        System</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="Q_PROPERTY">
         <db:title>Q_PROPERTY(...)</db:title>
         <db:para>This macro is used for declaring properties in classes that
                                    inherit <db:code><db:link xlink:href="qobject.html">QObject</db:link></db:code>. Properties
                                    behave like class data members, but they have additional
                                    features accessible through the <db:link xlink:href="metaobjects.html#meta-object-system">Meta-Object
                                        System</db:link>.</db:para>
         <db:programlisting>Q_PROPERTY(type name (READ getFunction
                                        [WRITE
                                        setFunction]| MEMBER memberName
                                        [(READ getFunction
                                        | WRITE
                                        setFunction)])
                                        [RESET
                                        resetFunction][NOTIFY
                                        notifySignal][REVISION int][DESIGNABLE
                                        bool][SCRIPTABLE
                                        bool][STORED bool][USER bool][CONSTANT][FINAL])</db:programlisting>
         <db:para>The property name and type and the
                                        <db:code>READ</db:code> function are required. The type
                                    can be any type supported by <db:code><db:link xlink:href="qvariant.html">QVariant</db:link></db:code>, or it can be a user-defined type. The
                                    other items are optional, but a <db:code>WRITE</db:code>
                                    function is common. The attributes default to true except
                                        <db:code>USER</db:code>, which defaults to
                                    false.</db:para>
         <db:para>For example:</db:para>
         <db:programlisting>Q_PROPERTY(QString title
                                    READ title WRITE setTitle USER true)</db:programlisting>
         <db:para>For more details about how to use this macro, and a more
                                    detailed example of its use, see the discussion on <db:link xlink:href="properties.html#qt-s-property-system">Qt's Property
                                        System</db:link>.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="properties.html#qt-s-property-system">Qt's Property
                                        System</db:link>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="Q_REVISION">
         <db:title>Q_REVISION</db:title>
         <db:para>Apply this macro to declarations of member functions to tag
                                    them with a revision number in the meta-object system. The macro
                                    is written before the return type, as shown in the following
                                    example:</db:para>
         <db:programlisting>class
                                    Window : publicQWidget { Q_OBJECT
                                        Q_PROPERTY(int
                                    normalProperty READ normalProperty) Q_PROPERTY(int newProperty READ newProperty
                                    REVISION 1) public: Window(); int normalProperty(); int newProperty(); publicslots: void normalMethod();
                                        Q_REVISION(1)
                                        void newMethod();
                                    };</db:programlisting>
         <db:para>This is useful when using the meta-object system to
                                    dynamically expose objects to another API, as you can match the
                                    version expected by multiple versions of the other API. Consider
                                    the following simplified example:</db:para>
         <db:programlisting> Window window; int expectedRevision =0; constQMetaObject*windowMetaObject
                                        = window.metaObject(); for (int i=0; i
                                        &lt;
                                        windowMetaObject-&gt;methodCount(); i++)
                                        if
                                        (windowMetaObject-&gt;method(i).revision() &lt;=
                                    expectedRevision) exposeMethod(windowMetaObject-&gt;method(i)); for (int
                                        i=0; i &lt; windowMetaObject-&gt;propertyCount(); i++) if
                                        (windowMetaObject-&gt;property(i).revision() &lt;=
                                    expectedRevision) exposeProperty(windowMetaObject-&gt;property(i));</db:programlisting>
         <db:para>Using the same Window class as the previous example, the
                                    newProperty and newMethod would only be exposed in this code
                                    when the expected version is 1 or greater.</db:para>
         <db:para>Since all methods are considered to be in revision 0 if
                                    untagged, a tag of Q_REVISION(0) is invalid and
                                    ignored.</db:para>
         <db:para>This tag is not used by the meta-object system itself.
                                    Currently this is only used by the QtQml module.</db:para>
         <db:para>For a more generic string tag, see <db:code><db:link xlink:href="qmetamethod.html#tag">QMetaMethod::tag</db:link>()</db:code>
         </db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qmetamethod.html#revision">QMetaMethod::revision</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="Q_SET_OBJECT_NAME">
         <db:title>Q_SET_OBJECT_NAME( Object)</db:title>
         <db:para>This macro assigns <db:emphasis>Object</db:emphasis> the objectName
                                    "Object".</db:para>
         <db:para>It doesn't matter whether <db:emphasis>Object</db:emphasis> is a
                                    pointer or not, the macro figures that out by itself.</db:para>
         <db:para>This function was introduced in Qt 5.0.</db:para>
         <db:section>
            <db:title>See Also</db:title>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qobject.html#objectName-prop">QObject::objectName</db:link>()</db:code>
               </db:member>
            </db:simplelist>
         </db:section>
      </db:section>
      <db:section xml:id="Q_SIGNAL">
         <db:title>Q_SIGNAL</db:title>
         <db:para>This is an additional macro that allows you to mark a single
                                    function as a signal. It can be quite useful, especially when
                                    you use a 3rd-party source code parser which doesn't understand
                                    a <db:code>signals</db:code> or
                                        <db:code>Q_SIGNALS</db:code> groups.</db:para>
         <db:para>Use this macro to replace the <db:code>signals</db:code>
                                    keyword in class declarations, when you want to use Qt Signals
                                    and Slots with a <db:link xlink:href="signalsandslots.html#3rd-party-signals-and-slots">3rd
                                        party signal/slot mechanism</db:link>.</db:para>
         <db:para>The macro is normally used when
                                        <db:code>no_keywords</db:code> is specified with the
                                        <db:code>CONFIG</db:code> variable in the
                                        <db:code>.pro</db:code> file, but it can be used even
                                    when <db:code>no_keywords</db:code> is <db:emphasis>not</db:emphasis>
                                    specified.</db:para>
      </db:section>
      <db:section xml:id="Q_SIGNALS">
         <db:title>Q_SIGNALS</db:title>
         <db:para>Use this macro to replace the <db:code>signals</db:code>
                                    keyword in class declarations, when you want to use Qt Signals
                                    and Slots with a <db:link xlink:href="signalsandslots.html#3rd-party-signals-and-slots">3rd
                                        party signal/slot mechanism</db:link>.</db:para>
         <db:para>The macro is normally used when
                                        <db:code>no_keywords</db:code> is specified with the
                                        <db:code>CONFIG</db:code> variable in the
                                        <db:code>.pro</db:code> file, but it can be used even
                                    when <db:code>no_keywords</db:code> is <db:emphasis>not</db:emphasis>
                                    specified.</db:para>
      </db:section>
      <db:section xml:id="Q_SLOT">
         <db:title>Q_SLOT</db:title>
         <db:para>This is an additional macro that allows you to mark a single
                                    function as a slot. It can be quite useful, especially when you
                                    use a 3rd-party source code parser which doesn't understand a
                                        <db:code>slots</db:code> or
                                        <db:code>Q_SLOTS</db:code> groups.</db:para>
         <db:para>Use this macro to replace the <db:code>slots</db:code>
                                    keyword in class declarations, when you want to use Qt Signals
                                    and Slots with a <db:link xlink:href="signalsandslots.html#3rd-party-signals-and-slots">3rd
                                        party signal/slot mechanism</db:link>.</db:para>
         <db:para>The macro is normally used when
                                        <db:code>no_keywords</db:code> is specified with the
                                        <db:code>CONFIG</db:code> variable in the
                                        <db:code>.pro</db:code> file, but it can be used even
                                    when <db:code>no_keywords</db:code> is <db:emphasis>not</db:emphasis>
                                    specified.</db:para>
      </db:section>
      <db:section xml:id="Q_SLOTS">
         <db:title>Q_SLOTS</db:title>
         <db:para>Use this macro to replace the <db:code>slots</db:code>
                                    keyword in class declarations, when you want to use Qt Signals
                                    and Slots with a <db:link xlink:href="signalsandslots.html#3rd-party-signals-and-slots">3rd
                                        party signal/slot mechanism</db:link>.</db:para>
         <db:para>The macro is normally used when
                                        <db:code>no_keywords</db:code> is specified with the
                                        <db:code>CONFIG</db:code> variable in the
                                        <db:code>.pro</db:code> file, but it can be used even
                                    when <db:code>no_keywords</db:code> is <db:emphasis>not</db:emphasis>
                                    specified.</db:para>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Obsolete Members</db:title>
      <db:section xml:id="obsolete_memfunc">
         <db:title>Member Function Documentation</db:title>
         <db:section xml:id="trUtf8">
            <db:title>[static] <db:link xlink:href="qstring.html">QString</db:link></db:title>
            <db:para>Returns a translated version of <db:emphasis>sourceText</db:emphasis>, or <db:code><db:link xlink:href="qstring.html#fromUtf8">QString::fromUtf8</db:link></db:code>
               <db:emphasis>sourceText</db:emphasis>) if there is no appropriate version. It is otherwise identical to tr(<db:emphasis>sourceText</db:emphasis>, <db:emphasis>disambiguation</db:emphasis>, <db:emphasis>n</db:emphasis>).</db:para>
            <db:warning>
               <db:para> This method is reentrant only if all translators are installed <db:emphasis>before</db:emphasis> calling this method. Installing or removing translators while performing translations is not supported. Doing so will probably result in crashes or other undesirable behavior.</db:para>
            </db:warning>
            <db:warning>
               <db:para> For portability reasons, we recommend that you use escape sequences for specifying non-ASCII characters in string literals to trUtf8(). For example:</db:para>
            </db:warning>
            <db:programlisting>label-&gt;setText(tr("F\374r \310lise"));</db:programlisting>
            <db:section>
               <db:title>See Also</db:title>
               <db:simplelist type="vert">
                  <db:member>
                     <db:code><db:link xlink:href="qobject.html#tr">tr</db:link>()</db:code>
                  </db:member>
                  <db:member>
                     <db:code><db:link xlink:href="qcoreapplication.html#translate">QCoreApplication::translate</db:link>()</db:code>
                  </db:member>
                  <db:member>
                     <db:link xlink:href="qtdoc/internationalization.html">Internationalization with Qt</db:link>
                  </db:member>
               </db:simplelist>
            </db:section>
         </db:section>
      </db:section>
      <db:section xml:id="obsolete_nonmems">
         <db:title>Related Non-Members</db:title>
         <db:section xml:id="qFindChild-2">
            <db:title>T qFindChild(const <db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qstring.html">QString</db:link></db:title>
            <db:para>This function overloads <db:code><db:link xlink:href="qobject.html#qFindChildren">qFindChildren</db:link>()</db:code>.</db:para>
            <db:para>This function is equivalent to <db:emphasis>obj</db:emphasis>-&gt;<db:link xlink:href="qobject.html#findChild">findChild</db:link>(<db:emphasis>name</db:emphasis>).</db:para>
            <db:note>
               <db:para>This function was provided as a workaround for MSVC 6 which did not support member template functions. It is advised to use the other form in new code.</db:para>
            </db:note>
            <db:section>
               <db:title>See Also</db:title>
               <db:simplelist type="vert">
                  <db:member>
                     <db:code><db:link xlink:href="qobject.html#findChild">QObject::findChild</db:link>()</db:code>
                  </db:member>
               </db:simplelist>
            </db:section>
         </db:section>
         <db:section xml:id="qFindChildren-3">
            <db:title><db:link xlink:href="qlist.html">QList</db:link><db:link xlink:href="qobject.html#QObject">QObject</db:link><db:link xlink:href="qstring.html">QString</db:link></db:title>
            <db:para>This function overloads <db:code><db:link xlink:href="qobject.html#qFindChildren">qFindChildren</db:link>()</db:code>.</db:para>
            <db:para>This function is equivalent to <db:emphasis>obj</db:emphasis>-&gt;<db:link xlink:href="qobject.html#findChildren">findChildren</db:link>(<db:emphasis>name</db:emphasis>).</db:para>
            <db:note>
               <db:para>This function was provided as a workaround for MSVC 6 which did not support member template functions. It is advised to use the other form in new code.</db:para>
            </db:note>
            <db:section>
               <db:title>See Also</db:title>
               <db:simplelist type="vert">
                  <db:member>
                     <db:code><db:link xlink:href="qobject.html#findChildren">QObject::findChildren</db:link>()</db:code>
                  </db:member>
               </db:simplelist>
            </db:section>
         </db:section>
      </db:section>
   </db:section>
</db:article>
