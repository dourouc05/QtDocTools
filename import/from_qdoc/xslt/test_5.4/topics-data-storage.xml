<html:html xmlns:html="http://www.w3.org/1999/xhtml" lang="en"><html:head>
  <html:meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<!-- datastorage.qdoc -->
  <html:title>Data Storage | Qt 5.4 </html:title>
  <html:link href="style/offline.css" rel="stylesheet" type="text/css" />
</html:head>
<html:body>
<html:div class="header" id="qtdocheader">
    <html:div class="main">
    <html:div class="main-rounded">
        <html:div class="navigationbar">
        <html:ul>
<html:li><html:a href="index.html">Qt 5.4</html:a></html:li>
<html:li>Data Storage</html:li>
<html:li id="buildversion">Qt 5.4.2 Reference Documentation</html:li>
    </html:ul>
    </html:div>
</html:div>
<html:div class="content">
<html:div class="line">
<html:div class="content mainContent">
<html:div class="sidebar">
<html:div class="toc">
<html:h3><html:a name="toc">Contents</html:a></html:h3>
<html:ul>
<html:li class="level1"><html:a href="#saving-and-loading-data">Saving and Loading Data</html:a></html:li>
<html:li class="level1"><html:a href="#sql-support-in-qt">SQL Support in Qt</html:a></html:li>
<html:li class="level1"><html:a href="#xml-support-in-qt">XML Support in Qt</html:a></html:li>
<html:li class="level1"><html:a href="#json-in-qt">JSON in Qt</html:a></html:li>
<html:li class="level1"><html:a href="#local-storage">Local Storage</html:a></html:li>
<html:li class="level1"><html:a href="#qsettings-class">QSettings Class</html:a></html:li>
<html:li class="level1"><html:a href="#resources">Resources</html:a></html:li>
<html:li class="level1"><html:a href="#file-archiving">File Archiving</html:a></html:li>
<html:li class="level1"><html:a href="#enginio-data-storage-backend">Enginio Data Storage Backend</html:a></html:li>
</html:ul>
</html:div>
<html:div class="sidebar-content" id="sidebar-content" /></html:div>
<html:h1 class="title">Data Storage</html:h1>
<html:span class="subtitle" />
<!-- $$$topics-data-storage.html-description -->
<html:div class="descr"> <html:a name="details" />
<html:a name="saving-and-loading-data" />
<html:h2 id="saving-and-loading-data">Saving and Loading Data</html:h2>
<html:p>The <html:a href="qtcore/qiodevice.html">QIODevice</html:a> class is the base class for all file and data storage devices in <html:a href="qtcore/qtcore-index.html">Qt Core</html:a>. All classes that are used for reading and writing data inherit from it.</html:p>
<html:p>Examples of devices are <html:a href="qtcore/qfile.html">QFile</html:a>, <html:a href="qtcore/qbuffer.html">QBuffer</html:a>, <html:a href="qtnetwork/qtcpsocket.html">QTcpSocket</html:a>, and <html:a href="qtcore/qprocess.html">QProcess</html:a>. <html:a href="qtcore/qfile.html">QFile</html:a> is used for reading and writing text, binary files, and resources. The <html:a href="qtcore/qbuffer.html">QBuffer</html:a> class provides a <html:a href="qtcore/qiodevice.html">QIODevice</html:a> interface for a <html:a href="qtcore/qbytearray.html">QByteArray</html:a>. <html:a href="qtnetwork/qtcpsocket.html">QTcpSocket</html:a> enables the developer to establish a TCP connection and transfer streams of data. <html:a href="qtcore/qprocess.html">QProcess</html:a> is used to start external programs, and to read from and write to that process.</html:p>
<html:ul>
<html:li><html:a href="qtcore/io.html">Input/Output and Networking</html:a> (list of I/O related classes)</html:li>
<html:li><html:a href="qtcore/io-functions.html">File and Datastream Functions</html:a></html:li>
<html:li><html:a href="qtcore/datastreamformat.html">Serializing Qt Data Types</html:a></html:li>
</html:ul>
<html:a name="sql-support-in-qt" />
<html:h2 id="sql-support-in-qt">SQL Support in Qt</html:h2>
<html:p>The <html:a href="qtsql/qtsql-index.html">Qt SQL</html:a> module uses driver plugins to communicate with several database APIs. Qt has drivers for SQLite, MySQL, DB2, Borland InterBase, Oracle, ODBC, and PostgreSQL. It is also possible to develop your own driver if Qt does not provide the driver needed.</html:p>
<html:p>Qt's SQL classes can be divided in 3 layers:</html:p>
<html:div class="table"><html:table class="generic">
 <html:thead><html:tr class="qt-style"><html:th>Layer</html:th><html:th>Purpose</html:th><html:th>Example class</html:th></html:tr></html:thead>
<html:tbody><html:tr class="odd" valign="top"><html:td><html:ul>
<html:li>Driver layer</html:li>
<html:li>SQL API layer</html:li>
<html:li>User Interface layer</html:li>
</html:ul>
</html:td><html:td><html:ul>
<html:li>Low-level communication between database and the SQL API layer</html:li>
<html:li>Provide access to databases</html:li>
<html:li>Link data from a database to data-aware widgets</html:li>
</html:ul>
</html:td><html:td><html:ul>
<html:li><html:a href="qtsql/qsqldriver.html">QSqlDriver</html:a>, <html:a href="qtsql/qsqldrivercreator.html">QSqlDriverCreator</html:a></html:li>
<html:li><html:a href="qtsql/qsqldatabase.html">QSqlDatabase</html:a>, <html:a href="qtsql/qsqlquery.html">QSqlQuery</html:a></html:li>
<html:li><html:a href="qtsql/qsqlquerymodel.html">QSqlQueryModel</html:a> (readonly), <html:a href="qtsql/qsqltablemodel.html">QSqlTableModel</html:a> (read/write), <html:a href="qtsql/qsqlrelationaltablemodel.html">QSqlRelationalTableModel</html:a> (read/write with foreign-key support)</html:li>
</html:ul>
</html:td></html:tr>
</html:tbody></html:table></html:div>
<html:p>With the MySQL driver, it is possible to connect to a MySQL server. In order to build the QMYSQL Plugin for Unix or OS X, you need the MySQL header files as well as the shared library, libmysqlclient.so. To compile the plugin for Windows, install MySQL.</html:p>
<html:p>If you use the embedded MySQL Server, you do not need a MySQL server in order to use that database system. In order to do so, you need to link the Qt plugin to libmysqld instead of libmysqlclient.</html:p>
<html:p>The Qt SQLite plugin is very suitable for local storage. SQLite is a relational database management system contained in a small (~350 KiB) C library. In contrast to other database management systems, SQLite is not a separate process that is accessed from the client application, but an integral part of it. SQLite operates on a single file, which must be set as the database name when opening a connection. If the file does not exist, SQLite will try to create it.</html:p>
<html:p>SQLite has some restrictions regarding multiple users and multiple transactions. If you are reading or writing on a file from different transactions, your application might freeze until one transaction commits or rolls back.</html:p>
<html:p>Once the driver part is set up, the data is accessible using the classes, <html:a href="qtsql/qsqlquerymodel.html">QSqlQueryModel</html:a>, <html:a href="qtsql/qsqltablemodel.html">QSqlTableModel</html:a>, and <html:a href="qtsql/qsqlrelationaltablemodel.html">QSqlRelationalTableModel</html:a>. <html:a href="qtsql/qsqltablemodel.html">QSqlTableModel</html:a> and <html:a href="qtsql/qsqlrelationaltablemodel.html">QSqlRelationalTableModel</html:a> provide editable models that can used with Qt's item views. <html:a href="qtsql/qsqltablemodel.html">QSqlTableModel</html:a> has read/write access to a single table, whereas <html:a href="qtsql/qsqlrelationaltablemodel.html">QSqlRelationalTableModel</html:a> has read/write access to the main table (not to the table with the foreign key).</html:p>
<html:p>The following pages contain information about incorporating SQL into applications:</html:p>
<html:ul>
<html:li><html:a href="qtsql/sql-programming.html">SQL Programming</html:a><html:ul>
<html:li><html:a href="qtsql/sql-programming.html#database-classes">Database Classes</html:a></html:li>
<html:li><html:a href="qtsql/sql-sqlstatements.html">Executing SQL Statements</html:a></html:li>
<html:li><html:a href="qtsql/sql-model.html">Using the SQL Model Classes</html:a></html:li>
<html:li><html:a href="qtsql/sql-presenting.html">Presenting Data in a Table View</html:a></html:li>
<html:li><html:a href="qtsql/sql-forms.html">Creating Data-Aware Forms</html:a></html:li>
</html:ul>
</html:li>
</html:ul>
<html:a name="xml-support-in-qt" />
<html:h2 id="xml-support-in-qt">XML Support in Qt</html:h2>
<html:p>Qt provides APIs to read and parse XML streams, and also to write to these streams. The following key classes facilitate these actions by providing the necessary infrastructure:</html:p>
<html:ul>
<html:li><html:a href="qtcore/qxmlstreamreader.html">QXmlStreamReader</html:a> class provides a parser to read XML. It is a well-formed XML 1.0 parser that does not include external parsed entities.<html:ul>
<html:li>It understands and resolves XML namespaces. For example, in case of a StartElement, namespaceUri() returns the namespace the element is in, and name() returns the element's local name. The combination of namespaceUri() and name() uniquely identifies an element.</html:li>
<html:li>It is not CPU-intensive, as it doesn't store the entire XML document tree in memory. It only stores the current token at the time it is reported.</html:li>
</html:ul>
</html:li>
<html:li>The <html:a href="qtcore/qxmlstreamwriter.html">QXmlStreamWriter</html:a> class provides an XML writer with a simple streaming API. It is the counterpart to <html:a href="qtcore/qxmlstreamreader.html">QXmlStreamReader</html:a> for writing XML, and it operates on a <html:a href="qtcore/qiodevice.html">QIODevice</html:a> specified with setDevice().<html:ul>
<html:li>It is a simple API that provides a dedicated function for every XML token or event you want to write.</html:li>
<html:li>It takes care of prefixing namespaces based on the namespaceUri specified while writing elements or attributes. If you have to use certain standardized prefixes, you can force the writer to use them by declaring the namespaces manually with either writeNamespace() or writeDefaultNamespace().</html:li>
<html:li>It can automatically format the generated XML data by adding line-breaks and indentation, making it readable. This feature can be turned on with the auto-formatting property.</html:li>
<html:li>It encodes XML in UTF-8 by default. Different encodings can be enforced using setCodec().</html:li>
</html:ul>
</html:li>
</html:ul>
<html:p>Besides reading and writing to XML streams, Qt also provides APIs for the following additional use cases:</html:p>
<html:ul>
<html:li>Querying an XML data source using <html:a href="qtxmlpatterns/xmlprocessing.html">XQuery</html:a> and XPath</html:li>
<html:li>XML transformation using XSLT</html:li>
<html:li>XML schema validation</html:li>
</html:ul>
<html:p>The following topics provide more insight into Qt XML support:</html:p>
<html:ul>
<html:li><html:a href="qtxml/xml-namespaces.html">An Introduction to Namespaces</html:a></html:li>
<html:li><html:a href="qtxml/xml-streaming.html">XML Streaming</html:a></html:li>
<html:li><html:a href="qtxmlpatterns/xquery-introduction.html">A Short Path to XQuery</html:a></html:li>
<html:li><html:a href="qtquick/qtquick-modelviewsdata-modelview.html#xmllistmodel">XmlListModel</html:a></html:li>
<html:li><html:a href="qtxmlpatterns/qtxmlpatterns-index.html">Qt XML Patterns</html:a></html:li>
</html:ul>
<html:a name="json-in-qt" />
<html:h2 id="json-in-qt">JSON in Qt</html:h2>
<html:p>JSON is a text-based open standard for data interchange that is easy to read and parse. It is used for representing simple data structures and associative arrays, called objects. It is related to JavaScript, but is a language-independent notation form.</html:p>
<html:p>An object can take 2 forms:</html:p>
<html:div class="table"><html:ul>
<html:li>Collection of name/value pairs</html:li>
<html:li>Ordered list of values</html:li>
</html:ul><html:table class="generic">
 <html:thead><html:tr class="qt-style">
</html:tr></html:thead>
<html:tbody><html:tr class="odd" valign="top"><html:td><html:ul>
<html:li>{ "last_name": "Routledge", "first_name": "Ronald", "birth_date": 1960 }</html:li>
<html:li>"colours": ["green", "blue", "yellow"]</html:li>
</html:ul>
</html:td><html:td /></html:tr>
</html:tbody></html:table></html:div>
<html:ul>
<html:li><html:a href="qtcore/json.html">JSON Support in Qt</html:a></html:li>
<html:li><html:a href="qtcore/qtcore-json-savegame-example.html">JSON Save Game Example</html:a></html:li>
</html:ul>
<html:a name="local-storage" />
<html:h2 id="local-storage">Local Storage</html:h2>
<html:p>The Local Storage API provides the ability to access local offline storage in an SQL database from QML and JavaScript.</html:p>
<html:p>These databases are user-specific and QML-specific, but accessible to all QML applications. They are stored in the Databases subdirectory of QDeclarativeEngine::offlineStoragePath() as SQLite databases (<html:a href="qtsql/sql-driver.html">SQL Database Drivers</html:a>).</html:p>
<html:p>The API conforms to the Synchronous API of the HTML5 Web Database API, W3C Working Draft 29 October 2009 (<html:a href="http://www.w3.org/TR/2009/WD-webdatabase-20091029/">HTML5 Web Database API</html:a>).</html:p>
<html:p>See <html:a href="qtquick/qtquick-localstorage-example.html">Qt Quick Examples - Local Storage</html:a> for a basic demonstration of using the Local Storage API.</html:p>
<html:ul>
<html:li><html:a href="qtquick/qtquick-localstorage-qmlmodule.html">Qt Quick Local Storage QML Types</html:a></html:li>
</html:ul>
<html:a name="qsettings-class" />
<html:h2 id="qsettings-class">QSettings Class</html:h2>
<html:p>The <html:a href="qtcore/qsettings.html">QSettings</html:a> class provides persistent storage of application settings. An application usually remembers its settings from the previous session.</html:p>
<html:p>Settings are stored differently on different platforms. For example, on Windows they are stored in the registry, whereas, on MAC OS X they are stored in XML files.</html:p>
<html:p><html:a href="qtcore/qsettings.html">QSettings</html:a> enable you to save and restore application settings in a portable manner. Constructing and destroying a <html:a href="qtcore/qsettings.html">QSettings</html:a> object is lightweight and fast. While creating an object of <html:a href="qtcore/qsettings.html">QSettings</html:a>, it is a good practice to specify not only the name of the application, but also the name of your organization. For example:</html:p>
<html:pre class="cpp"><html:span class="type"><html:a href="qtcore/qsettings.html">QSettings</html:a></html:span> settings(<html:span class="string">"MyCompany"</html:span><html:span class="operator">,</html:span> <html:span class="string">"Accountancy"</html:span>);</html:pre>
<html:a name="resources" />
<html:h2 id="resources">Resources</html:h2>
<html:p>The Qt Resource System is a platform-independent mechanism for storing binary files in the application's executable. This is handy if your application frequently needs a certain file, or set of files. It also protects against loss of that particular file .</html:p>
<html:p>Resource data can either be compiled into the binary and accessed immediately in the application code, or a binary resource can be created dynamically and registered with the resource system by the application.</html:p>
<html:p>By default, resources are accessible from the application code by the same file name as they are stored in the source tree, with a <html:code>:/</html:code> prefix, or by a URL with a qrc scheme.</html:p>
<html:ul>
<html:li><html:a href="qtcore/resources.html">The Qt Resource System</html:a></html:li>
</html:ul>
<html:a name="file-archiving" />
<html:h2 id="file-archiving">File Archiving</html:h2>
<html:p>An archive file is a collection of files or directories which are generally compressed in order to reduce the space they would otherwise consume on a drive. Examples of archive files are ZIP, TAR, RAR and 7z.</html:p>
<html:p>Qt has support for archives produced by zlib (see <html:a href="http://qt-project.org/faq/answer/how_to_compress_data_with_qt">qCompress() and qUncompress()</html:a>).</html:p>
<html:a name="enginio-data-storage-backend" />
<html:h2 id="enginio-data-storage-backend">Enginio Data Storage Backend</html:h2>
<html:p>Enginio is a backend for Qt Cloud services. New in Qt 5.3, the Enginio mondule combines a <html:i>no-SQL</html:i> object approach with JSON and Qt APIs to provide applications a reliable and powerful storage capability. The C++ and QML APIs interact with the <html:a href="https://qtcloudservices.com/">Qt Cloud</html:a> servers from Digia.</html:p>
<html:ul>
<html:li><html:a href="https://qtcloudservices.com/">Qt Cloud Services</html:a> by Digia</html:li>
<html:li>Enginio - API for developers</html:li>
</html:ul>
</html:div>
<!-- @@@topics-data-storage.html -->
        </html:div>
       </html:div>
   </html:div>
   </html:div>
</html:div>
<html:div class="footer">
   <html:p>
   <html:acronym title="Copyright">&#169;</html:acronym> 2015 The Qt Company Ltd.
   Documentation contributions included herein are the copyrights of
   their respective owners.<html:br />    The documentation provided herein is licensed under the terms of the    <html:a href="http://www.gnu.org/licenses/fdl.html">GNU Free Documentation    License version 1.3</html:a> as published by the Free Software Foundation.<html:br />    Qt and respective logos are trademarks of The Qt Company Ltd.     in Finland and/or other countries worldwide. All other trademarks are property
   of their respective owners. </html:p>
</html:div>


</html:body></html:html>