<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.1"
            xml:lang="en">
   <db:title>QScriptEngine Class</db:title>
   <db:classsynopsis xlink:href="qscriptengine.db">
      <db:ooclass>
         <db:classname>QScriptEngine</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="header">#include
                                                  &lt;QScriptEngine&gt;</db:classsynopsisinfo>
      <db:classsynopsisinfo role="qmake"> QT +=
                                                script</db:classsynopsisinfo>
      <db:classsynopsisinfo role="inherits">
         <db:link xlink:href="qobject.db">QObject</db:link>
      </db:classsynopsisinfo>
      <db:classsynopsisinfo role="since"> Qt
                                                4.3</db:classsynopsisinfo>
      <db:constructorsynopsis xlink:href="#QScriptEngine">
         <db:methodname>QScriptEngine</db:methodname>
         <db:void/>
      </db:constructorsynopsis>
      <db:constructorsynopsis xlink:href="#QScriptEngine-2">
         <db:methodname>QScriptEngine</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QObject  * 
                                    parent )</db:exceptionname>
      </db:constructorsynopsis>
      <db:destructorsynopsis xlink:href="#dtor.QScriptEngine">
         <db:methodname>~QScriptEngine</db:methodname>
         <db:void/>
      </db:destructorsynopsis>
      <db:methodsynopsis xlink:href="#abortEvaluation">
         <db:void/>
         <db:methodname>abortEvaluation</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QScriptValue  &amp; 
                                        result  = QScriptValue())</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#agent">
         <db:type xlink:href="qscriptengineagent.html">QScriptEngineAgent</db:type>
         <db:methodname>agent</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#availableExtensions">
         <db:type xlink:href="qtcore/qstringlist.html">QStringList</db:type>
         <db:methodname>availableExtensions</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#checkSyntax">
         <db:modifier>static</db:modifier>
         <db:type xlink:href="qscriptsyntaxcheckresult.html">QScriptSyntaxCheckResult</db:type>
         <db:methodname>checkSyntax</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QString  &amp; 
                                    program )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#clearExceptions">
         <db:void/>
         <db:methodname>clearExceptions</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#collectGarbage">
         <db:void/>
         <db:methodname>collectGarbage</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#currentContext">
         <db:type xlink:href="qscriptcontext.html">QScriptContext</db:type>
         <db:methodname>currentContext</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#defaultPrototype">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>defaultPrototype</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  metaTypeId )
                                    const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#evaluate">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>evaluate</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QString  &amp; 
                                        program , const  QString 
                                        &amp;  fileName  = QString(),  int  lineNumber  =
                                    1)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#evaluate-2">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>evaluate</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QScriptProgram  &amp; 
                                        program )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#fromScriptValue">
         <db:type>T</db:type>
         <db:methodname>fromScriptValue</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QScriptValue  &amp; 
                                        value )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#globalObject">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>globalObject</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#hasUncaughtException">
         <db:type>bool</db:type>
         <db:methodname>hasUncaughtException</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#importExtension">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>importExtension</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QString  &amp; 
                                        extension )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#importedExtensions">
         <db:type xlink:href="qtcore/qstringlist.html">QStringList</db:type>
         <db:methodname>importedExtensions</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#installTranslatorFunctions">
         <db:void/>
         <db:methodname>installTranslatorFunctions</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const
                                         QScriptValue  &amp; 
                                        object  = QScriptValue())</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#isEvaluating">
         <db:type>bool</db:type>
         <db:methodname>isEvaluating</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#newArray">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>newArray</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( uint  length  =
                                    0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#newDate">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>newDate</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( qsreal  value )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#newDate-2">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>newDate</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QDateTime  &amp; 
                                        value )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#newFunction">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>newFunction</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( FunctionSignature 
                                        fun ,  int  length  = 0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#newFunction-2">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>newFunction</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( FunctionSignature 
                                        fun , const  QScriptValue  &amp; 
                                        prototype ,  int  length  = 0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#newObject">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>newObject</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#newObject-2">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>newObject</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QScriptClass  * 
                                        scriptClass , const  QScriptValue  &amp; 
                                        data  = QScriptValue())</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#newQMetaObject">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>newQMetaObject</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QMetaObject  * 
                                        metaObject , const  QScriptValue  &amp; 
                                        ctor  = QScriptValue())</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#newQObject">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>newQObject</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QObject  *  object ,
                                         ValueOwnership 
                                        ownership  = QtOwnership, const  QObjectWrapOptions  &amp; 
                                        options  = 0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#newQObject-2">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>newQObject</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QScriptValue  &amp; 
                                        scriptObject ,  QObject  *  qtObject ,
                                         ValueOwnership 
                                        ownership  = QtOwnership, const  QObjectWrapOptions  &amp; 
                                        options  = 0)</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#newRegExp">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>newRegExp</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QRegExp  &amp; 
                                        regexp )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#newRegExp-2">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>newRegExp</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QString  &amp; 
                                        pattern , const  QString 
                                        &amp;  flags )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#newVariant">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>newVariant</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QVariant  &amp; 
                                        value )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#newVariant-2">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>newVariant</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QScriptValue  &amp; 
                                        object , const  QVariant  &amp; 
                                    value )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#nullValue">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>nullValue</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#popContext">
         <db:void/>
         <db:methodname>popContext</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#processEventsInterval">
         <db:type>int</db:type>
         <db:methodname>processEventsInterval</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#pushContext">
         <db:type xlink:href="qscriptcontext.html">QScriptContext</db:type>
         <db:methodname>pushContext</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#reportAdditionalMemoryCost">
         <db:void/>
         <db:methodname>reportAdditionalMemoryCost</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int 
                                    size )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#scriptValueFromQMetaObject">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>scriptValueFromQMetaObject</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setAgent">
         <db:void/>
         <db:methodname>setAgent</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( QScriptEngineAgent  * 
                                        agent )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setDefaultPrototype">
         <db:void/>
         <db:methodname>setDefaultPrototype</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int  metaTypeId , const
                                         QScriptValue  &amp; 
                                        prototype )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setGlobalObject">
         <db:void/>
         <db:methodname>setGlobalObject</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QScriptValue  &amp; 
                                        object )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#setProcessEventsInterval">
         <db:void/>
         <db:methodname>setProcessEventsInterval</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">( int 
                                    interval )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#signalHandlerException">
         <db:void/>
         <db:methodname>signalHandlerException</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QScriptValue  &amp; 
                                        exception )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#toObject">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>toObject</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QScriptValue  &amp; 
                                        value )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#toScriptValue">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>toScriptValue</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  T  &amp; 
                                    value )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#toStringHandle">
         <db:type xlink:href="qscriptstring.html">QScriptString</db:type>
         <db:methodname>toStringHandle</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QString  &amp; 
                                    str )</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#uncaughtException">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>uncaughtException</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#uncaughtExceptionBacktrace">
         <db:type xlink:href="qtcore/qstringlist.html">QStringList</db:type>
         <db:methodname>uncaughtExceptionBacktrace</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#uncaughtExceptionLineNumber">
         <db:type>int</db:type>
         <db:methodname>uncaughtExceptionLineNumber</db:methodname>
         <db:void/>
         <db:modifier>const</db:modifier>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#undefinedValue">
         <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
         <db:methodname>undefinedValue</db:methodname>
         <db:void/>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#canEvaluate">
         <db:modifier>(obsolete)</db:modifier>
         <db:type>bool</db:type>
         <db:methodname>canEvaluate</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QString  &amp;  program ) const</db:exceptionname>
      </db:methodsynopsis>
      <db:methodsynopsis xlink:href="#canEvaluate">
         <db:modifier>(compat)</db:modifier>
         <db:type>bool</db:type>
         <db:methodname>canEvaluate</db:methodname>
         <db:void role="parameters"/>
         <db:exceptionname role="parameters">(const  QString  &amp;  program ) const</db:exceptionname>
      </db:methodsynopsis>
   </db:classsynopsis>
   <db:funcsynopsis xlink:href="#qScriptValueFromQMetaObject">
      <db:funcprototype>
         <db:modifier>(obsolete)</db:modifier>
         <db:funcdef>
            <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
            <db:function>qScriptValueFromQMetaObject</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type xlink:href="qscriptengine.html#QScriptEngine">QScriptEngine</db:type>
            <db:parameter>engine</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qScriptValueFromValue-2">
      <db:funcprototype>
         <db:modifier>(obsolete)</db:modifier>
         <db:funcdef>
            <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
            <db:function>qScriptValueFromValue</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>QScriptEngine&lt;T&gt;</db:type>
            <db:parameter>engine</db:parameter>
         </db:paramdef>
         <db:paramdef choice="req">
            <db:type>T</db:type>
            <db:parameter>value</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:funcsynopsis xlink:href="#qScriptValueToValue">
      <db:funcprototype>
         <db:modifier>(obsolete)</db:modifier>
         <db:funcdef>
            <db:type>T</db:type>
            <db:function>qScriptValueToValue</db:function>
         </db:funcdef>
         <db:paramdef choice="req">
            <db:type>const</db:type>
            <db:type xlink:href="qscriptvalue.html">QScriptValue</db:type>
            <db:parameter>value</db:parameter>
         </db:paramdef>
      </db:funcprototype>
   </db:funcsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The <db:code><db:link xlink:href="qscriptengine.db">QScriptEngine</db:link></db:code>
                                    class provides an environment for evaluating Qt Script
                                    code.</db:para>
      <db:para>See the <db:link xlink:href="qtscript-index.db">Qt
                                        Script</db:link> documentation for information about the Qt
                                    Script language, and how to get started with scripting your C++
                                    application.</db:para>
      <db:section xml:id="evaluating-scripts">
         <db:title>Evaluating Scripts</db:title>
         <db:para>Use <db:code><db:link xlink:href="qscriptengine.db#evaluate">evaluate</db:link>()</db:code> to evaluate script code; this is the
                                    C++ equivalent of the built-in script function
                                        <db:code>eval()</db:code>.</db:para>
         <db:programlisting>QScriptEngine myEngine; QScriptValue three = myEngine.evaluate("1 +
                                        2");</db:programlisting>
         <db:para>
            <db:code><db:link xlink:href="qscriptengine.db#evaluate">evaluate</db:link>()</db:code> returns a <db:code><db:link xlink:href="qscriptvalue.db">QScriptValue</db:link></db:code> that holds the result of the
                                    evaluation. The <db:code><db:link xlink:href="qscriptvalue.db">QScriptValue</db:link></db:code> class provides functions for
                                    converting the result to various C++ types (e.g. <db:code><db:link xlink:href="qscriptvalue.db#toString">QScriptValue::toString</db:link>()</db:code> and <db:code><db:link xlink:href="qscriptvalue.db#toNumber">QScriptValue::toNumber</db:link>()</db:code>).</db:para>
         <db:para>The following code snippet shows how a script function can
                                    be defined and then invoked from C++ using <db:code><db:link xlink:href="qscriptvalue.db#call">QScriptValue::call</db:link>()</db:code>:</db:para>
         <db:programlisting>QScriptValue fun = myEngine.evaluate("(function(a,
                                        b) { return a + b; })"); QScriptValueList args; args &lt;&lt;1&lt;&lt;2; QScriptValue threeAgain = fun.call(QScriptValue(), args);</db:programlisting>
         <db:para>As can be seen from the above snippets, a script is provided
                                    to the engine in the form of a string. One common way of loading
                                    scripts is by reading the contents of a file and passing it to
                                        <db:code><db:link xlink:href="qscriptengine.db#evaluate">evaluate</db:link>()</db:code>:</db:para>
         <db:programlisting>QString
                                    fileName ="helloworld.qs";
                                        QFile scriptFile(fileName);
                                        if (!scriptFile.open(QIODevice::ReadOnly)) //
                                        handle errorQTextStream stream(&amp;scriptFile); QString contents = stream.readAll();
                                        scriptFile.close();
                                        myEngine.evaluate(contents, fileName);</db:programlisting>
         <db:para>Here we pass the name of the file as the second argument to
                                        <db:code><db:link xlink:href="qscriptengine.db#evaluate">evaluate</db:link>()</db:code>. This does not affect evaluation in any
                                    way; the second argument is a general-purpose string that is
                                    used to identify the script for debugging purposes (for example,
                                    our filename will now show up in any <db:code><db:link xlink:href="qscriptengine.db#uncaughtExceptionBacktrace">uncaughtExceptionBacktrace</db:link>()</db:code> involving the
                                    script).</db:para>
      </db:section>
      <db:section xml:id="engine-configuration">
         <db:title>Engine Configuration</db:title>
         <db:para>The <db:code><db:link xlink:href="qscriptengine.db#globalObject">globalObject</db:link>()</db:code> function returns the <db:emphasis role="bold">Global
                                        Object</db:emphasis> associated with the script engine.
                                    Properties of the Global Object are accessible from any script
                                    code (i.e. they are global variables). Typically, before
                                    evaluating "user" scripts, you will want to configure a script
                                    engine by adding one or more properties to the Global
                                    Object:</db:para>
         <db:programlisting>myEngine.globalObject().setProperty("myNumber",123); ...QScriptValue myNumberPlusOne
                                        = myEngine.evaluate("myNumber +
                                        1");</db:programlisting>
         <db:para>Adding custom properties to the scripting environment is one
                                    of the standard means of providing a scripting API that is
                                    specific to your application. Usually these custom properties
                                    are objects created by the <db:code><db:link xlink:href="qscriptengine.db#newQObject">newQObject</db:link>()</db:code>
                                    or <db:code><db:link xlink:href="qscriptengine.db#newObject">newObject</db:link>()</db:code> functions, or constructor functions
                                    created by <db:code><db:link xlink:href="qscriptengine.db#newFunction">newFunction</db:link>()</db:code>.</db:para>
      </db:section>
      <db:section xml:id="script-exceptions">
         <db:title>Script Exceptions</db:title>
         <db:para>
            <db:code><db:link xlink:href="qscriptengine.db#evaluate">evaluate</db:link>()</db:code> can throw a script exception (e.g. due to a
                                    syntax error); in that case, the return value is the value that
                                    was thrown (typically an <db:code>Error</db:code> object).
                                    You can check whether the evaluation caused an exception by
                                    calling <db:code><db:link xlink:href="qscriptengine.db#hasUncaughtException">hasUncaughtException</db:link>()</db:code>. In that case, you can call
                                    toString() on the error object to obtain an error message. The
                                    current uncaught exception is also available through <db:code><db:link xlink:href="qscriptengine.db#uncaughtException">uncaughtException</db:link>()</db:code>. Calling <db:code><db:link xlink:href="qscriptengine.db#clearExceptions">clearExceptions</db:link>()</db:code> will cause any uncaught
                                    exceptions to be cleared.</db:para>
         <db:programlisting>QScriptValue result = myEngine.evaluate(...);
                                        if
                                        (myEngine.hasUncaughtException()) { int line = myEngine.uncaughtExceptionLineNumber(); qDebug()
                                        &lt;&lt;"uncaught exception at
                                        line"&lt;&lt; line &lt;&lt;":"&lt;&lt; result.toString(); }</db:programlisting>
         <db:para>The <db:code><db:link xlink:href="qscriptengine.db#checkSyntax">checkSyntax</db:link>()</db:code> function can be used to determine
                                    whether code can be usefully passed to <db:code><db:link xlink:href="qscriptengine.db#evaluate">evaluate</db:link>()</db:code>.</db:para>
      </db:section>
      <db:section xml:id="script-object-creation">
         <db:title>Script Object Creation</db:title>
         <db:para>Use <db:code><db:link xlink:href="qscriptengine.db#newObject">newObject</db:link>()</db:code> to create a standard Qt Script object;
                                    this is the C++ equivalent of the script statement
                                        <db:code>new Object()</db:code>. You can use the
                                    object-specific functionality in <db:code><db:link xlink:href="qscriptvalue.db">QScriptValue</db:link></db:code> to manipulate
                                    the script object (e.g. <db:code><db:link xlink:href="qscriptvalue.db#setProperty">QScriptValue::setProperty</db:link>()</db:code>). Similarly, use
                                        <db:code><db:link xlink:href="qscriptengine.db#newArray">newArray</db:link>()</db:code> to create a Qt Script array object. Use
                                        <db:code><db:link xlink:href="qscriptengine.db#newDate">newDate</db:link>()</db:code>
                                    to create a <db:code>Date</db:code> object, and <db:code><db:link xlink:href="qscriptengine.db#newRegExp">newRegExp</db:link>()</db:code> to
                                    create a <db:code>RegExp</db:code> object.</db:para>
      </db:section>
      <db:section xml:id="qobject-integration">
         <db:title>QObject Integration</db:title>
         <db:para>Use <db:code><db:link xlink:href="qscriptengine.db#newQObject">newQObject</db:link>()</db:code> to wrap a <db:code><db:link xlink:href="qobject.db">QObject</db:link></db:code> (or subclass)
                                    pointer. <db:code><db:link xlink:href="qscriptengine.db#newQObject">newQObject</db:link>()</db:code> returns a proxy script object;
                                    properties, children, and signals and slots of the <db:code><db:link xlink:href="qobject.db">QObject</db:link></db:code> are available as
                                    properties of the proxy object. No binding code is needed
                                    because it is done dynamically using the Qt meta object
                                    system.</db:para>
         <db:programlisting>QPushButton button; QScriptValue scriptButton
                                        = myEngine.newQObject(&amp;button); myEngine.globalObject().setProperty("button", scriptButton); myEngine.evaluate("button.checkable = true"); qDebug()
                                        &lt;&lt; scriptButton.property("checkable").toBoolean(); scriptButton.property("show").call(); // call the
                                        show() slot</db:programlisting>
         <db:para>Use <db:code><db:link xlink:href="qscriptengine.db#qScriptConnect">qScriptConnect</db:link>()</db:code> to connect a C++ signal to a
                                    script function; this is the Qt Script equivalent of <db:code><db:link xlink:href="qobject.db#connect">QObject::connect</db:link>()</db:code>. When a script function is invoked
                                    in response to a C++ signal, it can cause a script exception;
                                    you can connect to the <db:code><db:link xlink:href="qscriptengine.db#signalHandlerException">signalHandlerException</db:link>()</db:code> signal to catch such an
                                    exception.</db:para>
         <db:para>Use <db:code><db:link xlink:href="qscriptengine.db#newQMetaObject">newQMetaObject</db:link>()</db:code> to wrap a <db:code><db:link xlink:href="qmetaobject.db">QMetaObject</db:link></db:code>; this
                                    gives you a "script representation" of a <db:code><db:link xlink:href="qobject.db">QObject</db:link></db:code>-based class.
                                        <db:code><db:link xlink:href="qscriptengine.db#newQMetaObject">newQMetaObject</db:link>()</db:code> returns a proxy script object;
                                    enum values of the class are available as properties of the
                                    proxy object. You can also specify a function that will be used
                                    to construct objects of the class (e.g. when the constructor is
                                    invoked from a script). For classes that have a "standard" Qt
                                    constructor, Qt Script can provide a default script constructor
                                    for you; see <db:code><db:link xlink:href="qscriptengine.db#scriptValueFromQMetaObject">scriptValueFromQMetaObject</db:link>()</db:code>.</db:para>
         <db:para>See <db:link xlink:href="qtjavascript.db">Making
                                        Applications Scriptable</db:link> for more information on the
                                        <db:code><db:link xlink:href="qobject.db">QObject</db:link></db:code>
                                    integration.</db:para>
      </db:section>
      <db:section xml:id="support-for-custom-c-types">
         <db:title>Support for Custom C++ Types</db:title>
         <db:para>Use <db:code><db:link xlink:href="qscriptengine.db#newVariant">newVariant</db:link>()</db:code> to wrap a <db:code><db:link xlink:href="qvariant.db">QVariant</db:link></db:code>. This can be
                                    used to store values of custom (non-<db:code><db:link xlink:href="qobject.db">QObject</db:link></db:code>) C++ types that
                                    have been registered with the Qt meta-type system. To make such
                                    types scriptable, you typically associate a prototype (delegate)
                                    object with the C++ type by calling <db:code><db:link xlink:href="qscriptengine.db#setDefaultPrototype">setDefaultPrototype</db:link>()</db:code>; the prototype object
                                    defines the scripting API for the C++ type. Unlike the <db:code><db:link xlink:href="qobject.db">QObject</db:link></db:code> integration,
                                    there is no automatic binding possible here; i.e. you have to
                                    create the scripting API yourself, for example by using the
                                        <db:code><db:link xlink:href="qscriptable.db">QScriptable</db:link></db:code>
                                    class.</db:para>
         <db:para>Use <db:code><db:link xlink:href="qscriptengine.db#fromScriptValue">fromScriptValue</db:link>()</db:code> to cast from a <db:code><db:link xlink:href="qscriptvalue.db">QScriptValue</db:link></db:code> to another
                                    type, and <db:code><db:link xlink:href="qscriptengine.db#toScriptValue">toScriptValue</db:link>()</db:code> to create a <db:code><db:link xlink:href="qscriptvalue.db">QScriptValue</db:link></db:code> from another
                                    value. You can specify how the conversion of C++ types is to be
                                    performed with <db:code><db:link xlink:href="qscriptengine.db#qScriptRegisterMetaType">qScriptRegisterMetaType</db:link>()</db:code> and <db:code><db:link xlink:href="qscriptengine.db#qScriptRegisterSequenceMetaType">qScriptRegisterSequenceMetaType</db:link>()</db:code>. By default, Qt
                                    Script will use <db:code><db:link xlink:href="qvariant.db">QVariant</db:link></db:code> to store values of custom types.</db:para>
      </db:section>
      <db:section xml:id="importing-extensions">
         <db:title>Importing Extensions</db:title>
         <db:para>Use <db:code><db:link xlink:href="qscriptengine.db#importExtension">importExtension</db:link>()</db:code> to import plugin-based
                                    extensions into the engine. Call <db:code><db:link xlink:href="qscriptengine.db#availableExtensions">availableExtensions</db:link>()</db:code> to obtain a list naming all
                                    the available extensions, and <db:code><db:link xlink:href="qscriptengine.db#importedExtensions">importedExtensions</db:link>()</db:code> to obtain a list naming only
                                    those extensions that have been imported.</db:para>
         <db:para>Call <db:code><db:link xlink:href="qscriptengine.db#pushContext">pushContext</db:link>()</db:code> to open up a new variable scope, and
                                        <db:code><db:link xlink:href="qscriptengine.db#popContext">popContext</db:link>()</db:code> to close the current scope. This is
                                    useful if you are implementing an extension that evaluates
                                    script code containing temporary variable definitions (e.g.
                                        <db:code>var foo = 123;</db:code>) that are safe to
                                    discard when evaluation has completed.</db:para>
      </db:section>
      <db:section xml:id="native-functions">
         <db:title>Native Functions</db:title>
         <db:para>Use <db:code><db:link xlink:href="qscriptengine.db#newFunction">newFunction</db:link>()</db:code> to wrap native (C++) functions,
                                    including constructors for your own custom types, so that these
                                    can be invoked from script code. Such functions must have the
                                    signature <db:code><db:link xlink:href="qscriptengine.db#FunctionSignature-typedef">QScriptEngine::FunctionSignature</db:link></db:code>. You may then
                                    pass the function as argument to <db:code><db:link xlink:href="qscriptengine.db#newFunction">newFunction</db:link>()</db:code>. Here is an example of a function that
                                    returns the sum of its first two arguments:</db:para>
         <db:programlisting>QScriptValue myAdd(QScriptContext*context,QScriptEngine*engine) { QScriptValue a = context-&gt;argument(0); QScriptValue b = context-&gt;argument(1); return a.toNumber() + b.toNumber(); }</db:programlisting>
         <db:para>To expose this function to script code, you can set it as a
                                    property of the Global Object:</db:para>
         <db:programlisting>QScriptValue fun = myEngine.newFunction(myAdd); myEngine.globalObject().setProperty("myAdd", fun);</db:programlisting>
         <db:para>Once this is done, script code can call your function in the
                                    exact same manner as a "normal" script function:</db:para>
         <db:programlisting>QScriptValue result = myEngine.evaluate("myAdd(myNumber, 1)");</db:programlisting>
      </db:section>
      <db:section xml:id="long-running-scripts">
         <db:title>Long-running Scripts</db:title>
         <db:para>If you need to evaluate possibly long-running scripts from
                                    the main (GUI) thread, you should first call <db:code><db:link xlink:href="qscriptengine.db#setProcessEventsInterval">setProcessEventsInterval</db:link>()</db:code> to make sure that the
                                    GUI stays responsive. You can abort a currently running script
                                    by calling <db:code><db:link xlink:href="qscriptengine.db#abortEvaluation">abortEvaluation</db:link>()</db:code>. You can determine whether an
                                    engine is currently running a script by calling <db:code><db:link xlink:href="qscriptengine.db#isEvaluating">isEvaluating</db:link>()</db:code>.</db:para>
      </db:section>
      <db:section xml:id="garbage-collection">
         <db:title>Garbage Collection</db:title>
         <db:para>Qt Script objects may be garbage collected when they are no
                                    longer referenced. There is no guarantee as to when automatic
                                    garbage collection will take place.</db:para>
         <db:para>The <db:code><db:link xlink:href="qscriptengine.db#collectGarbage">collectGarbage</db:link>()</db:code> function can be called to
                                    explicitly request garbage collection.</db:para>
         <db:para>The <db:code><db:link xlink:href="qscriptengine.db#reportAdditionalMemoryCost">reportAdditionalMemoryCost</db:link>()</db:code> function can be
                                    called to indicate that a Qt Script object occupies memory that
                                    isn't managed by the scripting environment. Reporting the
                                    additional cost makes it more likely that the garbage collector
                                    will be triggered. This can be useful, for example, when many
                                    custom, native Qt Script objects are allocated.</db:para>
      </db:section>
      <db:section xml:id="core-debugging-tracing-facilities">
         <db:title>Core Debugging/Tracing Facilities</db:title>
         <db:para>Since Qt 4.4, you can be notified of events pertaining to
                                    script execution (e.g. script function calls and statement
                                    execution) through the <db:code><db:link xlink:href="qscriptengineagent.db">QScriptEngineAgent</db:link></db:code> interface; see the <db:code><db:link xlink:href="qscriptengine.db#setAgent">setAgent</db:link>()</db:code>
                                    function. This can be used to implement debugging and profiling
                                    of a <db:code><db:link xlink:href="qscriptengine.db">QScriptEngine</db:link></db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>See Also</db:title>
         <db:simplelist type="vert">
            <db:member>
               <db:code><db:link xlink:href="qscriptvalue.db">QScriptValue</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qscriptcontext.db">QScriptContext</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qscriptengineagent.db">QScriptEngineAgent</db:link></db:code>
            </db:member>
         </db:simplelist>
      </db:section>
   </db:section>
   <db:section xml:id="types">
      <db:title>Member Type Documentation</db:title>
      <db:section xml:id="FunctionSignature-typedef">
         <db:title>typedef QScriptEngine::FunctionSignature</db:title>
         <db:para>The function signature <db:code>QScriptValue
                                        f(QScriptContext *, QScriptEngine *)</db:code>.</db:para>
         <db:para>A function with such a signature can be passed to <db:code><db:link xlink:href="qscriptengine.db#newFunction">QScriptEngine::newFunction</db:link>()</db:code> to wrap the
                                    function.</db:para>
      </db:section>
      <db:section xml:id="FunctionWithArgSignature-typedef">
         <db:title>typedef QScriptEngine::FunctionWithArgSignature</db:title>
         <db:para>The function signature <db:code>QScriptValue
                                        f(QScriptContext *, QScriptEngine *, void
                                    *)</db:code>.</db:para>
         <db:para>A function with such a signature can be passed to <db:code><db:link xlink:href="qscriptengine.db#newFunction">QScriptEngine::newFunction</db:link>()</db:code> to wrap the
                                    function.</db:para>
      </db:section>
      <db:section xml:id="QObjectWrapOption-enum">
         <db:title>enum QScriptEngine::QObjectWrapOption</db:title>
         <db:bridgehead renderas="sect2">flags QScriptEngine::QObjectWrapOptions</db:bridgehead>
         <db:para>These flags specify options when wrapping a <db:code><db:link xlink:href="qobject.db">QObject</db:link></db:code> pointer with
                                        <db:code><db:link xlink:href="qscriptengine.db#newQObject">newQObject</db:link>()</db:code>.</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QScriptEngine::ExcludeChildObjects</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x0001</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The script object will not
                                                  expose child objects as properties.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QScriptEngine::ExcludeSuperClassMethods</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x0002</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The script object will not
                                                  expose signals and slots inherited from the
                                                  superclass.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QScriptEngine::ExcludeSuperClassProperties</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x0004</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The script object will not
                                                  expose properties inherited from the
                                                  superclass.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QScriptEngine::ExcludeSuperClassContents</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x0006</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Shorthand form for
                                                  ExcludeSuperClassMethods |
                                                  ExcludeSuperClassProperties</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QScriptEngine::ExcludeDeleteLater</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x0010</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The script object will not
                                                  expose the <db:code><db:link xlink:href="qobject.db#deleteLater">QObject::deleteLater</db:link>()</db:code> slot.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QScriptEngine::ExcludeSlots</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x0020</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The script object will not
                                                  expose the <db:code><db:link xlink:href="qobject.db">QObject</db:link></db:code>'s slots.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QScriptEngine::AutoCreateDynamicProperties</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x0100</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Properties that don't
                                                  already exist in the <db:code><db:link xlink:href="qobject.db">QObject</db:link></db:code> will
                                                  be created as dynamic properties of that object,
                                                  rather than as properties of the script
                                                  object.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QScriptEngine::PreferExistingWrapperObject</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x0200</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>If a wrapper object with
                                                  the requested configuration already exists, return
                                                  that object.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QScriptEngine::SkipMethodsInEnumeration</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0x0008</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>Don't include methods
                                                  (signals and slots) when enumerating the object's
                                                  properties.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The QObjectWrapOptions type is a typedef for <db:code><db:link xlink:href="qflags.db">QFlags</db:link>&lt;QObjectWrapOption&gt;</db:code>. It stores an OR
                                    combination of QObjectWrapOption values.</db:para>
      </db:section>
      <db:section xml:id="ValueOwnership-enum">
         <db:title>enum QScriptEngine::ValueOwnership</db:title>
         <db:para>This enum specifies the ownership when wrapping a C++ value,
                                    e.g. by using <db:code><db:link xlink:href="qscriptengine.db#newQObject">newQObject</db:link>()</db:code>.</db:para>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QScriptEngine::QtOwnership</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>0</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The standard Qt ownership
                                                  rules apply, i.e. the associated object will never
                                                  be explicitly deleted by the script engine. This
                                                  is the default. (<db:code><db:link xlink:href="qobject.db">QObject</db:link></db:code>
                                                  ownership is explained in <db:link xlink:href="objecttrees.db">Object Trees &amp;
                                                  Ownership</db:link>.)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QScriptEngine::ScriptOwnership</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>1</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>The value is owned by the
                                                  script environment. The associated data will be
                                                  deleted when appropriate (i.e. after the garbage
                                                  collector has discovered that there are no more
                                                  live references to the value).</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:para>
                        <db:code>QScriptEngine::AutoOwnership</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>
                        <db:code>2</db:code>
                     </db:para>
                  </db:td>
                  <db:td>
                     <db:para>If the associated object
                                                  has a parent, the Qt ownership rules apply
                                                  (QtOwnership); otherwise, the object is owned by
                                                  the script environment
                                                  (ScriptOwnership).</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
   </db:section>
   <db:section xml:id="func">
      <db:title>Member Function Documentation</db:title>
   </db:section>
   <db:section xml:id="relnonmem">
      <db:title>Related Non-Members</db:title>
   </db:section>
   <db:section xml:id="macros">
      <db:title>Macro Documentation</db:title>
   </db:section>
   <db:section>
      <db:title>Obsolete Members</db:title>
      <db:section xml:id="obsolete_memfunc">
         <db:title>Member Function Documentation</db:title>
         <db:section xml:id="canEvaluate">
            <db:title>bool QScriptEngine::canEvaluate(const <db:link xlink:href="qstring.db">QString</db:link></db:title>
            <db:para>Returns true if <db:emphasis>program</db:emphasis> can be evaluated; i.e. the code is sufficient to determine whether it appears to be a syntactically correct program, or contains a syntax error.</db:para>
            <db:para>This function returns false if <db:emphasis>program</db:emphasis> is incomplete; i.e. the input is syntactically correct up to the point where the input is terminated.</db:para>
            <db:para>Note that this function only does a static check of <db:emphasis>program</db:emphasis>; e.g. it does not check whether references to variables are valid, and so on.</db:para>
            <db:para>A typical usage of canEvaluate() is to implement an interactive interpreter for Qt Script. The user is repeatedly queried for individual lines of code; the lines are concatened internally, and only when canEvaluate() returns true for the resulting program is it passed to <db:code><db:link xlink:href="qscriptengine.db#evaluate">evaluate</db:link>()</db:code>.</db:para>
            <db:para>The following are some examples to illustrate the behavior of canEvaluate(). (Note that all example inputs are assumed to have an explicit newline as their last character, since otherwise the Qt Script parser would automatically insert a semi-colon character at the end of the input, and this could cause canEvaluate() to produce different results.)</db:para>
            <db:para>Given the input</db:para>
            <db:programlisting>if (hello &amp;&amp; world)
    print("hello world");</db:programlisting>
            <db:para>canEvaluate() will return true, since the program appears to be complete.</db:para>
            <db:para>Given the input</db:para>
            <db:programlisting>if (hello &amp;&amp;</db:programlisting>
            <db:para>canEvaluate() will return false, since the if-statement is not complete, but is syntactically correct so far.</db:para>
            <db:para>Given the input</db:para>
            <db:programlisting>0=0</db:programlisting>
            <db:para>canEvaluate() will return true, but <db:code><db:link xlink:href="qscriptengine.db#evaluate">evaluate</db:link>()</db:code> will throw a SyntaxError given the same input.</db:para>
            <db:para>Given the input</db:para>
            <db:programlisting>./test.js</db:programlisting>
            <db:para>canEvaluate() will return true, even though the code is clearly not syntactically valid Qt Script code. <db:code><db:link xlink:href="qscriptengine.db#evaluate">evaluate</db:link>()</db:code> will throw a SyntaxError when this code is evaluated.</db:para>
            <db:para>Given the input</db:para>
            <db:programlisting>foo["bar"]</db:programlisting>
            <db:para>canEvaluate() will return true, but <db:code><db:link xlink:href="qscriptengine.db#evaluate">evaluate</db:link>()</db:code> will throw a ReferenceError if <db:code>foo</db:code> is not defined in the script environment.</db:para>
            <db:section>
               <db:title>See Also</db:title>
               <db:simplelist type="vert">
                  <db:member>
                     <db:code><db:link xlink:href="qscriptengine.db#evaluate">evaluate</db:link>()</db:code>
                  </db:member>
                  <db:member>
                     <db:code><db:link xlink:href="qscriptengine.db#checkSyntax">checkSyntax</db:link>()</db:code>
                  </db:member>
               </db:simplelist>
            </db:section>
         </db:section>
      </db:section>
      <db:section xml:id="obsolete_nonmems">
         <db:title>Related Non-Members</db:title>
         <db:section xml:id="qScriptValueFromQMetaObject">
            <db:title><db:link xlink:href="qscriptvalue.db">QScriptValue</db:link><db:link xlink:href="qscriptengine.db#QScriptEngine">QScriptEngine</db:link></db:title>
            <db:para>Uses <db:emphasis>engine</db:emphasis> to create a <db:code><db:link xlink:href="qscriptvalue.db">QScriptValue</db:link></db:code> that represents the Qt class <db:code>T</db:code>.</db:para>
            <db:para>This function is equivalent to <db:code><db:link xlink:href="qscriptengine.db#scriptValueFromQMetaObject">QScriptEngine::scriptValueFromQMetaObject</db:link>()</db:code>.</db:para>
            <db:note>
               <db:para>This function was provided as a workaround for MSVC 6 which did not support member template functions. It is advised to use the other form in new code.</db:para>
            </db:note>
            <db:para>This function was introduced in  Qt 4.3.</db:para>
            <db:section>
               <db:title>See Also</db:title>
               <db:simplelist type="vert">
                  <db:member>
                     <db:code><db:link xlink:href="qscriptengine.db#newQMetaObject">QScriptEngine::newQMetaObject</db:link>()</db:code>
                  </db:member>
               </db:simplelist>
            </db:section>
         </db:section>
         <db:section xml:id="qScriptValueFromValue-2">
            <db:title><db:link xlink:href="qscriptvalue.db">QScriptValue</db:link><db:link xlink:href="qscriptengine.db#QScriptEngine">QScriptEngine</db:link></db:title>
            <db:para>Creates a <db:code><db:link xlink:href="qscriptvalue.db">QScriptValue</db:link></db:code> using the given <db:emphasis>engine</db:emphasis> with the given <db:emphasis>value</db:emphasis> of template type <db:code>T</db:code>.</db:para>
            <db:para>This function is equivalent to <db:code><db:link xlink:href="qscriptengine.db#toScriptValue">QScriptEngine::toScriptValue</db:link>()</db:code>.</db:para>
            <db:note>
               <db:para>This function was provided as a workaround for MSVC 6 which did not support member template functions. It is advised to use the other form in new code.</db:para>
            </db:note>
            <db:para>This function was introduced in  Qt 4.3.</db:para>
            <db:section>
               <db:title>See Also</db:title>
               <db:simplelist type="vert">
                  <db:member>
                     <db:code><db:link xlink:href="qscriptengine.db#toScriptValue">QScriptEngine::toScriptValue</db:link>()</db:code>
                  </db:member>
                  <db:member>
                     <db:code><db:link xlink:href="qscriptvalue.db#qscriptvalue_cast">qscriptvalue_cast</db:link>()</db:code>
                  </db:member>
               </db:simplelist>
            </db:section>
         </db:section>
         <db:section xml:id="qScriptValueToValue">
            <db:title>T qScriptValueToValue(const <db:link xlink:href="qscriptvalue.db">QScriptValue</db:link></db:title>
            <db:para>Returns the given <db:emphasis>value</db:emphasis> converted to the template type <db:code>T</db:code>.</db:para>
            <db:para>This function is equivalent to <db:code><db:link xlink:href="qscriptengine.db#fromScriptValue">QScriptEngine::fromScriptValue</db:link>()</db:code>.</db:para>
            <db:note>
               <db:para>This function was provided as a workaround for MSVC 6 which did not support member template functions. It is advised to use the other form in new code.</db:para>
            </db:note>
            <db:para>This function was introduced in  Qt 4.3.</db:para>
            <db:section>
               <db:title>See Also</db:title>
               <db:simplelist type="vert">
                  <db:member>
                     <db:code><db:link xlink:href="qscriptengine.db#fromScriptValue">QScriptEngine::fromScriptValue</db:link>()</db:code>
                  </db:member>
               </db:simplelist>
            </db:section>
         </db:section>
      </db:section>
   </db:section>
</db:article>
