<html:html xmlns:html="http://www.w3.org/1999/xhtml" lang="en"><html:head>
  <html:meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<!-- i18n.qdoc -->
  <html:title>Writing Source Code for Translation | Qt 5.4 </html:title>
  <html:link href="style/offline.css" rel="stylesheet" type="text/css" />
</html:head>
<html:body>
<html:div class="header" id="qtdocheader">
    <html:div class="main">
    <html:div class="main-rounded">
        <html:div class="navigationbar">
        <html:ul>
<html:li><html:a href="index.html">Qt 5.4</html:a></html:li>
<html:li>Writing Source Code for Translation</html:li>
<html:li id="buildversion">Qt 5.4.2 Reference Documentation</html:li>
    </html:ul>
    </html:div>
</html:div>
<html:div class="content">
<html:div class="line">
<html:div class="content mainContent">
  <html:link href="internationalization.html" rel="prev" />
  <html:link href="i18n-plural-rules.html" rel="next" />
<html:p class="naviNextPrevious headerNavi">
<html:a class="prevPage" href="internationalization.html">Internationalization with Qt</html:a>
<html:a class="nextPage" href="i18n-plural-rules.html">Translation Rules for Plurals</html:a>
</html:p><html:p>
</html:p><html:div class="sidebar">
<html:div class="toc">
<html:h3><html:a name="toc">Contents</html:a></html:h3>
<html:ul>
<html:li class="level1"><html:a href="#using-qstring-for-all-user-visible-text">Using QString for All User-Visible Text</html:a></html:li>
<html:li class="level1"><html:a href="#using-tr-for-all-literal-text">Using tr() for All Literal Text</html:a></html:li>
<html:li class="level1"><html:a href="#defining-a-translation-context">Defining a Translation Context</html:a></html:li>
<html:li class="level1"><html:a href="#using-tr-to-obtain-a-translation">Using tr() to Obtain a Translation</html:a></html:li>
<html:li class="level1"><html:a href="#using-tr-to-localize-numbers">Using tr() to Localize Numbers</html:a></html:li>
<html:li class="level1"><html:a href="#translating-non-qt-classes">Translating Non-Qt Classes</html:a></html:li>
<html:li class="level1"><html:a href="#translator-comments">Translator Comments</html:a></html:li>
<html:li class="level1"><html:a href="#adding-meta-data-to-strings">Adding Meta-Data to Strings</html:a></html:li>
<html:li class="level1"><html:a href="#disambiguation">Disambiguation</html:a></html:li>
<html:li class="level1"><html:a href="#handling-plurals">Handling Plurals</html:a></html:li>
<html:li class="level1"><html:a href="#translating-text-that-is-outside-of-a-qobject-subclass">Translating Text That is Outside of a QObject Subclass</html:a></html:li>
<html:li class="level2"><html:a href="#using-qcoreapplication-translate">Using QCoreApplication::translate()</html:a></html:li>
<html:li class="level2"><html:a href="#using-qt-tr-noop-and-qt-translate-noop-in-c">Using QT_TR_NOOP() and QT_TRANSLATE_NOOP() in C++</html:a></html:li>
<html:li class="level1"><html:a href="#using-qkeysequence-for-accelerator-values">Using QKeySequence() for Accelerator Values</html:a></html:li>
<html:li class="level1"><html:a href="#using-numbered-arguments">Using Numbered Arguments</html:a></html:li>
<html:li class="level1"><html:a href="#further-reading">Further Reading</html:a></html:li>
</html:ul>
</html:div>
<html:div class="sidebar-content" id="sidebar-content" /></html:div>
<html:h1 class="title">Writing Source Code for Translation</html:h1>
<html:span class="subtitle" />
<!-- $$$i18n-source-translation.html-description -->
<html:div class="descr"> <html:a name="details" />
<html:p>Writing cross-platform international software with Qt is a gentle, incremental process. Your software can become internationalized in the stages described in the following sections. For more information about internalizing Qt Quick application, see <html:a href="qtquick-internationalization.html">Internationalization and Localization with Qt Quick</html:a>.</html:p>
<html:a name="using-qstring-for-all-user-visible-text" />
<html:h2 id="using-qstring-for-all-user-visible-text">Using QString for All User-Visible Text</html:h2>
<html:p>Since <html:a href="qtcore/qstring.html">QString</html:a> uses the Unicode encoding internally, every language in the world can be processed transparently using familiar text processing operations. Also, since all Qt functions that present text to the user take a <html:a href="qtcore/qstring.html">QString</html:a> as a parameter, there is no <html:code>char *</html:code> to <html:a href="qtcore/qstring.html">QString</html:a> conversion overhead.</html:p>
<html:p>Strings that are in "programmer space" (such as <html:a href="qtcore/qobject.html">QObject</html:a> names and file format texts) need not use <html:a href="qtcore/qstring.html">QString</html:a>; the traditional <html:code>char *</html:code> or the <html:a href="qtcore/qbytearray.html">QByteArray</html:a> class will suffice.</html:p>
<html:p>You're unlikely to notice that you are using Unicode; <html:a href="qtcore/qstring.html">QString</html:a>, and <html:a href="qtcore/qchar.html">QChar</html:a> are just easier versions of the crude <html:code>const char *</html:code> and <html:code>char</html:code> from traditional C.</html:p>
<html:p><html:code>char *</html:code> strings in source code are assumed to be <html:a href="http://www.ietf.org/rfc/rfc2279.txt">UTF-8</html:a> encoded when being implicitly converted to a <html:a href="qtcore/qstring.html">QString</html:a>. If your C string literal uses a different encoding, use <html:a href="qtcore/qstring.html#fromLatin1">QString::fromLatin1</html:a>() or <html:a href="qtcore/qtextcodec.html">QTextCodec</html:a> to convert the literal to a Unicode encoded <html:a href="qtcore/qstring.html">QString</html:a>.</html:p>
<html:a name="using-tr-for-all-literal-text" />
<html:h2 id="using-tr-for-all-literal-text">Using tr() for All Literal Text</html:h2>
<html:p>Wherever your program uses a string literal (quoted text) that will be presented to the user, ensure that it is processed by the <html:a href="qtcore/qcoreapplication.html#translate">QCoreApplication::translate</html:a>() function. Essentially all that is necessary to achieve this is to use the <html:a href="qtcore/qobject.html#tr">tr()</html:a> function to obtain translated text for your classes, typically for display purposes. This function is also used to indicate which text strings in an application are translatable.</html:p>
<html:p>For example, assuming the <html:code>LoginWidget</html:code> is a subclass of <html:a href="qtwidgets/qwidget.html">QWidget</html:a>:</html:p>
<html:pre class="cpp">LoginWidget<html:span class="operator">::</html:span>LoginWidget()
{
    <html:span class="type"><html:a href="qtwidgets/qlabel.html">QLabel</html:a></html:span> <html:span class="operator">*</html:span>label <html:span class="operator">=</html:span> <html:span class="keyword">new</html:span> <html:span class="type"><html:a href="qtwidgets/qlabel.html">QLabel</html:a></html:span>(tr(<html:span class="string">"Password:"</html:span>));
    <html:span class="operator">.</html:span><html:span class="operator">.</html:span><html:span class="operator">.</html:span>
}</html:pre>
<html:p>This accounts for 99% of the user-visible strings you're likely to write.</html:p>
<html:p>If the quoted text is not in a member function of a <html:a href="qtcore/qobject.html">QObject</html:a> subclass, use either the tr() function of an appropriate class, or the <html:a href="qtcore/qcoreapplication.html#translate">QCoreApplication::translate</html:a>() function directly:</html:p>
<html:pre class="cpp"><html:span class="type">void</html:span> some_global_function(LoginWidget <html:span class="operator">*</html:span>logwid)
{
    <html:span class="type"><html:a href="qtwidgets/qlabel.html">QLabel</html:a></html:span> <html:span class="operator">*</html:span>label <html:span class="operator">=</html:span> <html:span class="keyword">new</html:span> <html:span class="type"><html:a href="qtwidgets/qlabel.html">QLabel</html:a></html:span>(
                LoginWidget<html:span class="operator">::</html:span>tr(<html:span class="string">"Password:"</html:span>)<html:span class="operator">,</html:span> logwid);
}

<html:span class="type">void</html:span> same_global_function(LoginWidget <html:span class="operator">*</html:span>logwid)
{
    <html:span class="type"><html:a href="qtwidgets/qlabel.html">QLabel</html:a></html:span> <html:span class="operator">*</html:span>label <html:span class="operator">=</html:span> <html:span class="keyword">new</html:span> <html:span class="type"><html:a href="qtwidgets/qlabel.html">QLabel</html:a></html:span>(
                qApp<html:span class="operator">-</html:span><html:span class="operator">&gt;</html:span>translate(<html:span class="string">"LoginWidget"</html:span><html:span class="operator">,</html:span> <html:span class="string">"Password:"</html:span>)<html:span class="operator">,</html:span> logwid);
}</html:pre>
<html:p>Qt indexes each translatable string by the <html:i>translation context</html:i> it is associated with; this is generally the name of the <html:a href="qtcore/qobject.html">QObject</html:a> subclass it is used in.</html:p>
<html:p>Translation contexts are defined for new <html:a href="qtcore/qobject.html">QObject</html:a>-based classes by the use of the <html:a href="qtcore/qobject.html#Q_OBJECT">Q_OBJECT</html:a> macro in each new class definition.</html:p>
<html:p>When tr() is called, it looks up the translatable string using a <html:a href="qtcore/qtranslator.html">QTranslator</html:a> object. For translation to work, one or more of these must have been installed on the application object in the way described in <html:a href="internationalization.html#enabling-translation">Enabling Translation</html:a>.</html:p>
<html:p>Translating strings in QML works exactly the same way as in C++, with the only difference being that you need to call qsTr() instead of <html:a href="qtcore/qobject.html#tr">tr()</html:a>. See also the page on <html:a href="qtquick-internationalization.html">Internationalization and Localization with Qt Quick</html:a>.</html:p>
<html:a name="defining-a-translation-context" />
<html:h2 id="defining-a-translation-context">Defining a Translation Context</html:h2>
<html:p>The translation context for <html:a href="qtcore/qobject.html">QObject</html:a> and each <html:a href="qtcore/qobject.html">QObject</html:a> subclass is the class name itself. Developers subclassing <html:a href="qtcore/qobject.html">QObject</html:a> must use the <html:a href="qtcore/qobject.html#Q_OBJECT">Q_OBJECT</html:a> macro in their class definition to override the translation context. This macro sets the context to the name of the subclass.</html:p>
<html:p>For example, the following class definition includes the <html:a href="qtcore/qobject.html#Q_OBJECT">Q_OBJECT</html:a> macro, implementing a new tr() that uses the <html:code>MainWindow</html:code> context:</html:p>
<html:pre class="cpp"><html:span class="keyword">class</html:span> MainWindow : <html:span class="keyword">public</html:span> <html:span class="type"><html:a href="qtwidgets/qmainwindow.html">QMainWindow</html:a></html:span>
{
    Q_OBJECT

<html:span class="keyword">public</html:span>:
    MainWindow();
    ...</html:pre>
<html:p>If <html:a href="qtcore/qobject.html#Q_OBJECT">Q_OBJECT</html:a> is not used in a class definition, the context will be inherited from the base class. For example, since all <html:a href="qtcore/qobject.html">QObject</html:a>-based classes in Qt provide a context, a new <html:a href="qtwidgets/qwidget.html">QWidget</html:a> subclass defined without a <html:a href="qtcore/qobject.html#Q_OBJECT">Q_OBJECT</html:a> macro will use the <html:code>QWidget</html:code> context if its tr() function is invoked.</html:p>
<html:a name="using-tr-to-obtain-a-translation" />
<html:h2 id="using-tr-to-obtain-a-translation">Using tr() to Obtain a Translation</html:h2>
<html:p>The following example shows how a translation is obtained for the class shown in the previous section:</html:p>
<html:pre class="cpp"><html:span class="type">void</html:span> MainWindow<html:span class="operator">::</html:span>createMenus()
{
    fileMenu <html:span class="operator">=</html:span> menuBar()<html:span class="operator">-</html:span><html:span class="operator">&gt;</html:span>addMenu(tr(<html:span class="string">"&amp;File"</html:span>));
    ...</html:pre>
<html:p>Here, the translation context is <html:code>MainWindow</html:code> because it is the <html:code>MainWindow::tr()</html:code> function that is invoked. The text returned by the tr() function is a translation of "&amp;File" obtained from the <html:code>MainWindow</html:code> context.</html:p>
<html:p>When Qt's translation tool, <html:a href="qtlinguist/linguist-manager.html#using-lupdate">lupdate</html:a>, is used to process a set of source files, the text wrapped in tr() calls is stored in a section of the translation file that corresponds to its translation context.</html:p>
<html:p>In some situations, it is useful to give a translation context explicitly by fully qualifying the call to tr(); for example:</html:p>
<html:pre class="cpp"><html:span class="type"><html:a href="qtcore/qstring.html">QString</html:a></html:span> text <html:span class="operator">=</html:span> <html:span class="type"><html:a href="qtwidgets/qscrollbar.html">QScrollBar</html:a></html:span><html:span class="operator">::</html:span>tr(<html:span class="string">"Page up"</html:span>);</html:pre>
<html:p>This call obtains the translated text for "Page up" from the <html:code>QScrollBar</html:code> context. Developers can also use the <html:a href="qtcore/qcoreapplication.html#translate">QCoreApplication::translate</html:a>() function to obtain a translation for a particular translation context.</html:p>
<html:a name="using-tr-to-localize-numbers" />
<html:h2 id="using-tr-to-localize-numbers">Using tr() to Localize Numbers</html:h2>
<html:p>You can localize numbers by using appropriate tr() strings:</html:p>
<html:pre class="cpp"><html:span class="type">void</html:span> Clock<html:span class="operator">::</html:span>setTime(<html:span class="keyword">const</html:span> <html:span class="type"><html:a href="qtcore/qtime.html">QTime</html:a></html:span> <html:span class="operator">&amp;</html:span>time)
{
    <html:span class="keyword">if</html:span> (tr(<html:span class="string">"AMPM"</html:span>) <html:span class="operator">=</html:span><html:span class="operator">=</html:span> <html:span class="string">"AMPM"</html:span>) {
        <html:span class="comment">// 12-hour clock</html:span>
    } <html:span class="keyword">else</html:span> {
        <html:span class="comment">// 24-hour clock</html:span>
    }
}</html:pre>
<html:p>In the example, for the US we would leave the translation of "AMPM" as it is and thereby use the 12-hour clock branch; but in Europe we would translate it as something else to make the code use the 24-hour clock branch.</html:p>
<html:a name="translating-non-qt-classes" />
<html:h2 id="translating-non-qt-classes">Translating Non-Qt Classes</html:h2>
<html:p>It is sometimes necessary to provide internationalization support for strings used in classes that do not inherit <html:a href="qtcore/qobject.html">QObject</html:a> or use the <html:a href="qtcore/qobject.html#Q_OBJECT">Q_OBJECT</html:a> macro to enable translation features. Since Qt translates strings at run-time based on the class they are associated with and <html:code>lupdate</html:code> looks for translatable strings in the source code, non-Qt classes must use mechanisms that also provide this information.</html:p>
<html:p>One way to do this is to add translation support to a non-Qt class using the <html:a href="qtcore/qcoreapplication.html#Q_DECLARE_TR_FUNCTIONS">Q_DECLARE_TR_FUNCTIONS</html:a>() macro; for example:</html:p>
<html:pre class="cpp"><html:span class="keyword">class</html:span> MyClass
{
    Q_DECLARE_TR_FUNCTIONS(MyClass)

<html:span class="keyword">public</html:span>:
    MyClass();
    ...
};</html:pre>
<html:p>This provides the class with <html:a href="qtcore/qobject.html#tr">tr()</html:a> functions that can be used to translate strings associated with the class, and makes it possible for <html:code>lupdate</html:code> to find translatable strings in the source code.</html:p>
<html:p>Alternatively, the <html:a href="qtcore/qcoreapplication.html#translate">QCoreApplication::translate</html:a>() function can be called with a specific context, and this will be recognized by <html:code>lupdate</html:code> and Qt Linguist.</html:p>
<html:a name="translator-comments" />
<html:h2 id="translator-comments">Translator Comments</html:h2>
<html:p>Developers can include information about each translatable string to help translators with the translation process. These are extracted when <html:code>lupdate</html:code> is used to process the source files. The recommended way to add comments is to annotate the tr() calls in your code with comments of the form:</html:p>
<html:p><html:code>//: ...</html:code></html:p>
<html:p>or</html:p>
<html:p><html:code><html:code>/*</html:code>: ... <html:code>*/</html:code></html:code></html:p>
<html:p>Examples:</html:p>
<html:pre class="cpp"><html:span class="comment">//: This name refers to a host name.</html:span>
hostNameLabel<html:span class="operator">-</html:span><html:span class="operator">&gt;</html:span>setText(tr(<html:span class="string">"Name:"</html:span>));

<html:span class="comment">/*: This text refers to a C++ code example. */</html:span>
<html:span class="type"><html:a href="qtcore/qstring.html">QString</html:a></html:span> example <html:span class="operator">=</html:span> tr(<html:span class="string">"Example"</html:span>);</html:pre>
<html:p>In these examples, the comments will be associated with the strings passed to tr() in the context of each call.</html:p>
<html:a name="adding-meta-data-to-strings" />
<html:h2 id="adding-meta-data-to-strings">Adding Meta-Data to Strings</html:h2>
<html:p>Additional data can be attached to each translatable message. These are extracted when <html:code>lupdate</html:code> is used to process the source files. The recommended way to add meta-data is to annotate the tr() calls in your code with comments of the form:</html:p>
<html:p><html:code>//= &lt;id&gt;</html:code></html:p>
<html:p>This can be used to give the message a unique identifier to support tools which need it.</html:p>
<html:p>An alternative way to attach meta-data is to use the following syntax:</html:p>
<html:p><html:code>//~ &lt;field name&gt; &lt;field contents&gt;</html:code></html:p>
<html:p>This can be used to attach meta-data to the message. The field name should consist of a domain prefix (possibly the conventional file extension of the file format the field is inspired by), a hyphen and the actual field name in underscore-delimited notation. For storage in TS files, the field name together with the prefix "extra-" will form an XML element name. The field contents will be XML-escaped, but otherwise appear verbatim as the element's contents. Any number of unique fields can be added to each message.</html:p>
<html:p>Example:</html:p>
<html:pre class="cpp"><html:span class="comment">//: This is a comment for the translator.</html:span>
<html:span class="comment">//= qtn_foo_bar</html:span>
<html:span class="comment">//~ loc-layout_id foo_dialog</html:span>
<html:span class="comment">//~ loc-blank False</html:span>
<html:span class="comment">//~ magic-stuff This might mean something magic.</html:span>
<html:span class="type"><html:a href="qtcore/qstring.html">QString</html:a></html:span> text <html:span class="operator">=</html:span> MyMagicClass<html:span class="operator">::</html:span>tr(<html:span class="string">"Sim sala bim."</html:span>);</html:pre>
<html:p>You can use the keyword <html:i>TRANSLATOR</html:i> for translator comments. Meta-data appearing right in front of the TRANSLATOR keyword applies to the whole TS file.</html:p>
<html:a name="disambiguation" />
<html:h2 id="disambiguation">Disambiguation</html:h2>
<html:p>If the same translatable string is used in different roles within the same translation context, an additional identifying string may be passed in the call to <html:a href="qtcore/qobject.html#tr">tr()</html:a>. This optional disambiguation argument is used to distinguish between otherwise identical strings.</html:p>
<html:p>Example:</html:p>
<html:pre class="cpp">MyWindow<html:span class="operator">::</html:span>MyWindow()
{
    <html:span class="type"><html:a href="qtwidgets/qlabel.html">QLabel</html:a></html:span> <html:span class="operator">*</html:span>senderLabel <html:span class="operator">=</html:span> <html:span class="keyword">new</html:span> <html:span class="type"><html:a href="qtwidgets/qlabel.html">QLabel</html:a></html:span>(tr(<html:span class="string">"Name:"</html:span>));
    <html:span class="type"><html:a href="qtwidgets/qlabel.html">QLabel</html:a></html:span> <html:span class="operator">*</html:span>recipientLabel <html:span class="operator">=</html:span> <html:span class="keyword">new</html:span> <html:span class="type"><html:a href="qtwidgets/qlabel.html">QLabel</html:a></html:span>(tr(<html:span class="string">"Name:"</html:span><html:span class="operator">,</html:span> <html:span class="string">"recipient"</html:span>));
    ...</html:pre>
<html:p>In Qt 4.4 and earlier, this disambiguation parameter was the preferred way to specify comments to translators.</html:p>
<html:a name="handling-plurals" />
<html:h2 id="handling-plurals">Handling Plurals</html:h2>
<html:p>Some translatable strings contain placeholders for integer values and need to be translated differently depending on the values in use.</html:p>
<html:p>To help with this problem, developers pass an additional integer argument to the <html:a href="qtcore/qobject.html#tr">tr()</html:a> function, and typically use a special notation for plurals in each translatable string.</html:p>
<html:p>If this argument is equal or greater than zero, all occurrences of <html:code>%n</html:code> in the resulting string are replaced with a decimal representation of the value supplied. In addition, the translation used will adapt to the value according to the rules for each language.</html:p>
<html:p>Example:</html:p>
<html:pre class="cpp"><html:span class="type">int</html:span> n <html:span class="operator">=</html:span> messages<html:span class="operator">.</html:span>count();
showMessage(tr(<html:span class="string">"%n message(s) saved"</html:span><html:span class="operator">,</html:span> <html:span class="string">""</html:span><html:span class="operator">,</html:span> n));</html:pre>
<html:p>The table below shows what string is returned depending on the active translation:</html:p>
<html:div class="table"><html:table class="generic">
 <html:thead><html:tr class="qt-style"><html:th /><html:th colspan="3">Active Translation</html:th></html:tr>
<html:tr class="qt-style"><html:th><html:i>n</html:i></html:th><html:th>No Translation</html:th><html:th>French</html:th><html:th>English</html:th></html:tr></html:thead>
<html:tbody><html:tr class="odd" valign="top"><html:td>0</html:td><html:td>"0 message(s) saved"</html:td><html:td>"0 message sauvegard&#233;"</html:td><html:td>"0 message<html:b>s</html:b> saved"</html:td></html:tr>
<html:tr class="even" valign="top"><html:td>1</html:td><html:td>"1 message(s) saved"</html:td><html:td>"1 message sauvegard&#233;"</html:td><html:td>"1 message saved"</html:td></html:tr>
<html:tr class="odd" valign="top"><html:td>2</html:td><html:td>"2 message(s) saved"</html:td><html:td>"2 message<html:b>s</html:b> sauvegard&#233;<html:b>s</html:b>"</html:td><html:td>"2 message<html:b>s</html:b> saved"</html:td></html:tr>
<html:tr class="even" valign="top"><html:td>37</html:td><html:td>"37 message(s) saved"</html:td><html:td>"37 message<html:b>s</html:b> sauvegard&#233;<html:b>s</html:b>"</html:td><html:td>"37 message<html:b>s</html:b> saved"</html:td></html:tr>
</html:tbody></html:table></html:div>
<html:p>This idiom is more flexible than the traditional approach; e.g.,</html:p>
<html:pre class="cpp">n <html:span class="operator">=</html:span><html:span class="operator">=</html:span> <html:span class="number">1</html:span> <html:span class="operator">?</html:span> tr(<html:span class="string">"%n message saved"</html:span>) : tr(<html:span class="string">"%n messages saved"</html:span>)</html:pre>
<html:p>because it also works with target languages that have several plural forms (e.g., Irish has a special "dual" form that should be used when <html:code>n</html:code> is 2), and it handles the <html:i>n</html:i> == 0 case correctly for languages such as French that require the singular.</html:p>
<html:p>To handle plural forms in the native language, you need to load a translation file for this language, too. The lupdate tool has the <html:code>-pluralonly</html:code> command line option, which allows the creation of TS files containing only entries with plural forms.</html:p>
<html:p>See the <html:a href="http://doc.qt.digia.com/qq/">Qt Quarterly</html:a> Article <html:a href="http://doc.qt.digia.com/qq/qq19-plurals.html">Plural Forms in Translations</html:a> for further details on this issue.</html:p>
<html:p>Instead of <html:code>%n</html:code>, you can use <html:code>%Ln</html:code> to produce a localized representation of <html:i>n</html:i>. The conversion uses the default locale, set using <html:a href="qtcore/qlocale.html#setDefault">QLocale::setDefault</html:a>(). (If no default locale was specified, the system wide locale is used.)</html:p>
<html:p>A summary of the rules used to translate strings containing plurals can be found in the <html:a href="i18n-plural-rules.html">Translation Rules for Plurals</html:a> document.</html:p>
<html:a name="translating-text-that-is-outside-of-a-qobject-subclass" />
<html:h2 id="translating-text-that-is-outside-of-a-qobject-subclass">Translating Text That is Outside of a QObject Subclass</html:h2>
<html:a name="using-qcoreapplication-translate" />
<html:h3>Using QCoreApplication::translate()</html:h3>
<html:p>If the quoted text is not in a member function of a <html:a href="qtcore/qobject.html">QObject</html:a> subclass, use either the tr() function of an appropriate class, or the <html:a href="qtcore/qcoreapplication.html#translate">QCoreApplication::translate</html:a>() function directly:</html:p>
<html:pre class="cpp"><html:span class="type">void</html:span> some_global_function(LoginWidget <html:span class="operator">*</html:span>logwid)
{
    <html:span class="type"><html:a href="qtwidgets/qlabel.html">QLabel</html:a></html:span> <html:span class="operator">*</html:span>label <html:span class="operator">=</html:span> <html:span class="keyword">new</html:span> <html:span class="type"><html:a href="qtwidgets/qlabel.html">QLabel</html:a></html:span>(
            LoginWidget<html:span class="operator">::</html:span>tr(<html:span class="string">"Password:"</html:span>)<html:span class="operator">,</html:span> logwid);
}

<html:span class="type">void</html:span> same_global_function(LoginWidget <html:span class="operator">*</html:span>logwid)
{
    <html:span class="type"><html:a href="qtwidgets/qlabel.html">QLabel</html:a></html:span> <html:span class="operator">*</html:span>label <html:span class="operator">=</html:span> <html:span class="keyword">new</html:span> <html:span class="type"><html:a href="qtwidgets/qlabel.html">QLabel</html:a></html:span>(
            qApp<html:span class="operator">-</html:span><html:span class="operator">&gt;</html:span>translate(<html:span class="string">"LoginWidget"</html:span><html:span class="operator">,</html:span> <html:span class="string">"Password:"</html:span>)<html:span class="operator">,</html:span>
            logwid);
}</html:pre>
<html:a name="using-qt-tr-noop-and-qt-translate-noop-in-c" />
<html:h3>Using QT_TR_NOOP() and QT_TRANSLATE_NOOP() in C++</html:h3>
<html:p>If you need to have translatable text completely outside a function, there are two macros to help: <html:a href="qtcore/qtglobal.html#QT_TR_NOOP">QT_TR_NOOP</html:a>() and <html:a href="qtcore/qtglobal.html#QT_TRANSLATE_NOOP">QT_TRANSLATE_NOOP</html:a>(). They merely mark the text for extraction by the <html:code>lupdate</html:code> tool. The macros expand to just the text (without the context).</html:p>
<html:p>Example of <html:a href="qtcore/qtglobal.html#QT_TR_NOOP">QT_TR_NOOP</html:a>():</html:p>
<html:pre class="cpp"><html:span class="type"><html:a href="qtcore/qstring.html">QString</html:a></html:span> FriendlyConversation<html:span class="operator">::</html:span>greeting(<html:span class="type">int</html:span> type)
{
    <html:span class="keyword">static</html:span> <html:span class="keyword">const</html:span> <html:span class="type">char</html:span> <html:span class="operator">*</html:span>greeting_strings<html:span class="operator">[</html:span><html:span class="operator">]</html:span> <html:span class="operator">=</html:span> {
        QT_TR_NOOP(<html:span class="string">"Hello"</html:span>)<html:span class="operator">,</html:span>
        QT_TR_NOOP(<html:span class="string">"Goodbye"</html:span>)
    };
    <html:span class="keyword">return</html:span> tr(greeting_strings<html:span class="operator">[</html:span>type<html:span class="operator">]</html:span>);
}</html:pre>
<html:p>Example of <html:a href="qtcore/qtglobal.html#QT_TRANSLATE_NOOP">QT_TRANSLATE_NOOP</html:a>():</html:p>
<html:pre class="cpp"><html:span class="keyword">static</html:span> <html:span class="keyword">const</html:span> <html:span class="type">char</html:span> <html:span class="operator">*</html:span>greeting_strings<html:span class="operator">[</html:span><html:span class="operator">]</html:span> <html:span class="operator">=</html:span> {
    QT_TRANSLATE_NOOP(<html:span class="string">"FriendlyConversation"</html:span><html:span class="operator">,</html:span> <html:span class="string">"Hello"</html:span>)<html:span class="operator">,</html:span>
    QT_TRANSLATE_NOOP(<html:span class="string">"FriendlyConversation"</html:span><html:span class="operator">,</html:span> <html:span class="string">"Goodbye"</html:span>)
};

<html:span class="type"><html:a href="qtcore/qstring.html">QString</html:a></html:span> FriendlyConversation<html:span class="operator">::</html:span>greeting(<html:span class="type">int</html:span> type)
{
    <html:span class="keyword">return</html:span> tr(greeting_strings<html:span class="operator">[</html:span>type<html:span class="operator">]</html:span>);
}

<html:span class="type"><html:a href="qtcore/qstring.html">QString</html:a></html:span> global_greeting(<html:span class="type">int</html:span> type)
{
    <html:span class="keyword">return</html:span> qApp<html:span class="operator">-</html:span><html:span class="operator">&gt;</html:span>translate(<html:span class="string">"FriendlyConversation"</html:span><html:span class="operator">,</html:span>
                           greeting_strings<html:span class="operator">[</html:span>type<html:span class="operator">]</html:span>);
}</html:pre>
<html:p>If you disable the <html:code>const char *</html:code> to <html:a href="qtcore/qstring.html">QString</html:a> automatic conversion by compiling your software with the macro <html:code>QT_NO_CAST_FROM_ASCII</html:code> defined, you'll be very likely to catch any strings you are missing. See <html:a href="qtcore/qstring.html#fromUtf8">QString::fromUtf8</html:a>() and <html:a href="qtcore/qstring.html#fromLatin1">QString::fromLatin1</html:a>() for more information.</html:p>
<html:a name="using-qkeysequence-for-accelerator-values" />
<html:h2 id="using-qkeysequence-for-accelerator-values">Using QKeySequence() for Accelerator Values</html:h2>
<html:p>Accelerator values such as Ctrl+Q or Alt+F need to be translated too. If you hardcode <html:code>Qt::CTRL + Qt::Key_Q</html:code> for "quit" in your application, translators won't be able to override it. The correct idiom is:</html:p>
<html:pre class="cpp">exitAct <html:span class="operator">=</html:span> <html:span class="keyword">new</html:span> <html:span class="type"><html:a href="qtwidgets/qaction.html">QAction</html:a></html:span>(tr(<html:span class="string">"E&amp;xit"</html:span>)<html:span class="operator">,</html:span> <html:span class="keyword">this</html:span>);
exitAct<html:span class="operator">-</html:span><html:span class="operator">&gt;</html:span>setShortcuts(<html:span class="type"><html:a href="qtgui/qkeysequence.html">QKeySequence</html:a></html:span><html:span class="operator">::</html:span>Quit);</html:pre>
<html:a name="using-numbered-arguments" />
<html:h2 id="using-numbered-arguments">Using Numbered Arguments</html:h2>
<html:p>The <html:a href="qtcore/qstring.html#arg">QString::arg</html:a>() functions offer a simple means for substituting arguments:</html:p>
<html:pre class="cpp"><html:span class="type">void</html:span> FileCopier<html:span class="operator">::</html:span>showProgress(<html:span class="type">int</html:span> done<html:span class="operator">,</html:span> <html:span class="type">int</html:span> total<html:span class="operator">,</html:span>
                              <html:span class="keyword">const</html:span> <html:span class="type"><html:a href="qtcore/qstring.html">QString</html:a></html:span> <html:span class="operator">&amp;</html:span>currentFile)
{
    label<html:span class="operator">.</html:span>setText(tr(<html:span class="string">"%1 of %2 files copied.\nCopying: %3"</html:span>)
                  <html:span class="operator">.</html:span>arg(done)
                  <html:span class="operator">.</html:span>arg(total)
                  <html:span class="operator">.</html:span>arg(currentFile));
}</html:pre>
<html:p>In some languages the order of arguments may need to change, and this can easily be achieved by changing the order of the % arguments. For example:</html:p>
<html:pre class="cpp"><html:span class="type"><html:a href="qtcore/qstring.html">QString</html:a></html:span> s1 <html:span class="operator">=</html:span> <html:span class="string">"%1 of %2 files copied. Copying: %3"</html:span>;
<html:span class="type"><html:a href="qtcore/qstring.html">QString</html:a></html:span> s2 <html:span class="operator">=</html:span> <html:span class="string">"Kopierer nu %3. Av totalt %2 filer er %1 kopiert."</html:span>;

<html:a href="qtcore/qtglobal.html#qDebug">qDebug</html:a>() <html:span class="operator">&lt;</html:span><html:span class="operator">&lt;</html:span> s1<html:span class="operator">.</html:span>arg(<html:span class="number">5</html:span>)<html:span class="operator">.</html:span>arg(<html:span class="number">10</html:span>)<html:span class="operator">.</html:span>arg(<html:span class="string">"somefile.txt"</html:span>);
<html:a href="qtcore/qtglobal.html#qDebug">qDebug</html:a>() <html:span class="operator">&lt;</html:span><html:span class="operator">&lt;</html:span> s2<html:span class="operator">.</html:span>arg(<html:span class="number">5</html:span>)<html:span class="operator">.</html:span>arg(<html:span class="number">10</html:span>)<html:span class="operator">.</html:span>arg(<html:span class="string">"somefile.txt"</html:span>);</html:pre>
<html:p>produces the correct output in English and Norwegian:</html:p>
<html:pre class="cpp"><html:span class="number">5</html:span> of <html:span class="number">10</html:span> files copied<html:span class="operator">.</html:span> Copying: somefile<html:span class="operator">.</html:span>txt
Kopierer nu somefile<html:span class="operator">.</html:span>txt<html:span class="operator">.</html:span> Av totalt <html:span class="number">10</html:span> filer er <html:span class="number">5</html:span> kopiert<html:span class="operator">.</html:span></html:pre>
<html:a name="further-reading" />
<html:h2 id="further-reading">Further Reading</html:h2>
<html:p><html:a href="qtlinguist/qtlinguist-index.html">Qt Linguist Manual</html:a>, <html:a href="qtlinguist/qtlinguist-hellotr-example.html">Hello tr</html:a>() Example, <html:a href="i18n-plural-rules.html">Translation Rules for Plurals</html:a></html:p>
</html:div>
<!-- @@@i18n-source-translation.html -->
<html:p class="naviNextPrevious footerNavi">
<html:a class="prevPage" href="internationalization.html">Internationalization with Qt</html:a>
<html:a class="nextPage" href="i18n-plural-rules.html">Translation Rules for Plurals</html:a>
</html:p>
        </html:div>
       </html:div>
   </html:div>
   </html:div>
</html:div>
<html:div class="footer">
   <html:p>
   <html:acronym title="Copyright">&#169;</html:acronym> 2015 The Qt Company Ltd.
   Documentation contributions included herein are the copyrights of
   their respective owners.<html:br />    The documentation provided herein is licensed under the terms of the    <html:a href="http://www.gnu.org/licenses/fdl.html">GNU Free Documentation    License version 1.3</html:a> as published by the Free Software Foundation.<html:br />    Qt and respective logos are trademarks of The Qt Company Ltd.     in Finland and/or other countries worldwide. All other trademarks are property
   of their respective owners. </html:p>
</html:div>


</html:body></html:html>