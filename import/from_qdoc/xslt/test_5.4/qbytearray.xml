<html:html xmlns:html="http://www.w3.org/1999/xhtml" lang="en">
    <html:head>
        <html:meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
        <!-- qbytearray.cpp -->
        <html:title>QByteArray Class | Qt Core 5.4</html:title>
        <html:link href="style/offline.css" rel="stylesheet" type="text/css" />
    </html:head>
    <html:body>
        <html:div class="header" id="qtdocheader">
            <html:div class="main">
                <html:div class="main-rounded">
                    <html:div class="navigationbar">
                        <html:ul>
                            <html:li><html:a href="qtdoc/index.html">Qt 5.4</html:a></html:li>
                            <html:li><html:a href="qtcore-index.html">Qt Core</html:a></html:li>
                            <html:li><html:a href="qtcore-module.html">C++
                                Classes</html:a></html:li>
                            <html:li>QByteArray</html:li>
                            <html:li id="buildversion">Qt 5.4.2 Reference Documentation</html:li>
                        </html:ul>
                    </html:div>
                </html:div>
                <html:div class="content">
                    <html:div class="line">
                        <html:div class="content mainContent">
                            <html:div class="sidebar">
                                <html:div class="toc">
                                    <html:h3><html:a name="toc">Contents</html:a></html:h3>
                                    <html:ul>
                                        <html:li class="level1"><html:a href="#public-types">Public
                                                Types</html:a></html:li>
                                        <html:li class="level1"><html:a href="#public-functions"
                                                >Public Functions</html:a></html:li>
                                        <html:li class="level1"><html:a
                                                href="#static-public-members">Static Public
                                                Members</html:a></html:li>
                                        <html:li class="level1"><html:a href="#related-non-members"
                                                >Related Non-Members</html:a></html:li>
                                        <html:li class="level1"><html:a href="#macros"
                                                >Macros</html:a></html:li>
                                        <html:li class="level1"><html:a href="#details">Detailed
                                                Description</html:a></html:li>
                                        <html:li class="level2"><html:a href="#notes-on-locale"
                                                >Notes on Locale</html:a></html:li>
                                    </html:ul>
                                </html:div>
                                <html:div class="sidebar-content" id="sidebar-content"
                                ></html:div></html:div>
                            <html:h1 class="title">QByteArray Class</html:h1>
                            <!-- $$$QByteArray-brief -->
                            <html:p>The <html:a href="qbytearray.html">QByteArray</html:a> class
                                provides an array of bytes. <html:a href="#details"
                                >More...</html:a></html:p>
                            <!-- @@@QByteArray -->
                            <html:div class="table"><html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                Header:</html:td>
                                            <html:td class="memItemRight bottomAlign">
                                                <html:span class="preprocessor">#include
                                                  &lt;QByteArray&gt;</html:span>
                                            </html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                qmake:</html:td>
                                            <html:td class="memItemRight bottomAlign"> QT +=
                                                core</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div><html:p><html:b>Note:</html:b> All functions
                                in this class are <html:a
                                    href="qtdoc/threads-reentrancy.html#reentrant"
                                    >reentrant</html:a>.</html:p>
                            <html:ul>
                                <html:li><html:a href="qbytearray-members.html">List of all members,
                                        including inherited members</html:a></html:li>
                                <html:li><html:a href="qbytearray-obsolete.html">Obsolete
                                        members</html:a></html:li>
                            </html:ul>
                            <html:a name="public-types"></html:a>
                            <html:h2 id="public-types">Public Types</html:h2>
                            <html:div class="table"><html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> enum </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#Base64Option-enum"
                                                  >Base64Option</html:a></html:b> { Base64Encoding,
                                                Base64UrlEncoding, KeepTrailingEquals,
                                                OmitTrailingEquals }</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> flags </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#Base64Option-enum"
                                                  >Base64Options</html:a></html:b></html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div>
                            <html:a name="public-functions"></html:a>
                            <html:h2 id="public-functions">Public Functions</html:h2>
                            <html:div class="table"><html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#QByteArray"
                                                  >QByteArray</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#QByteArray-2"
                                                  >QByteArray</html:a></html:b>(const char *<html:i>
                                                  data</html:i>, int<html:i> size</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#QByteArray-3"
                                                  >QByteArray</html:a></html:b>(int<html:i>
                                                  size</html:i>, char<html:i> ch</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#QByteArray-5"
                                                  >QByteArray</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> other</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#QByteArray-6"
                                                  >QByteArray</html:a></html:b>(QByteArray
                                                  &amp;&amp;<html:i> other</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#dtor.QByteArray"
                                                  >~QByteArray</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#append"
                                                  >append</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> ba</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#append-2"
                                                  >append</html:a></html:b>(const QString
                                                  &amp;<html:i> str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#append-3"
                                                  >append</html:a></html:b>(const char *<html:i>
                                                  str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#append-4"
                                                  >append</html:a></html:b>(const char *<html:i>
                                                  str</html:i>, int<html:i> len</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#append-5"
                                                  >append</html:a></html:b>(char<html:i>
                                                ch</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#at"
                                                  >at</html:a></html:b>(int<html:i> i</html:i>)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#capacity"
                                                  >capacity</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#chop"
                                                  >chop</html:a></html:b>(int<html:i>
                                                n</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#clear"
                                                  >clear</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> const
                                                char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#constData"
                                                  >constData</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#contains"
                                                  >contains</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> ba</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#contains-2"
                                                  >contains</html:a></html:b>(const char *<html:i>
                                                  str</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#contains-3"
                                                  >contains</html:a></html:b>(char<html:i>
                                                  ch</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#count"
                                                  >count</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> ba</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#count-2"
                                                  >count</html:a></html:b>(const char *<html:i>
                                                  str</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#count-3"
                                                  >count</html:a></html:b>(char<html:i> ch</html:i>)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#count-4"
                                                  >count</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#data"
                                                  >data</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> const
                                                char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#data-2"
                                                  >data</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#endsWith"
                                                  >endsWith</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> ba</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#endsWith-2"
                                                  >endsWith</html:a></html:b>(const char *<html:i>
                                                  str</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#endsWith-3"
                                                  >endsWith</html:a></html:b>(char<html:i>
                                                  ch</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#fill"
                                                  >fill</html:a></html:b>(char<html:i> ch</html:i>,
                                                  int<html:i> size</html:i> = -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#indexOf"
                                                  >indexOf</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> ba</html:i>, int<html:i>
                                                  from</html:i> = 0) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#indexOf-2"
                                                  >indexOf</html:a></html:b>(const QString
                                                  &amp;<html:i> str</html:i>, int<html:i>
                                                  from</html:i> = 0) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#indexOf-3"
                                                  >indexOf</html:a></html:b>(const char *<html:i>
                                                  str</html:i>, int<html:i> from</html:i> = 0)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#indexOf-4"
                                                  >indexOf</html:a></html:b>(char<html:i>
                                                  ch</html:i>, int<html:i> from</html:i> = 0)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#insert"
                                                  >insert</html:a></html:b>(int<html:i> i</html:i>,
                                                const QByteArray &amp;<html:i>
                                                ba</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#insert-2"
                                                  >insert</html:a></html:b>(int<html:i> i</html:i>,
                                                const QString &amp;<html:i> str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#insert-3"
                                                  >insert</html:a></html:b>(int<html:i> i</html:i>,
                                                const char *<html:i> str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#insert-4"
                                                  >insert</html:a></html:b>(int<html:i> i</html:i>,
                                                const char *<html:i> str</html:i>, int<html:i>
                                                  len</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#insert-5"
                                                  >insert</html:a></html:b>(int<html:i> i</html:i>,
                                                  char<html:i> ch</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#isEmpty"
                                                  >isEmpty</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#isNull"
                                                  >isNull</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#lastIndexOf"
                                                  >lastIndexOf</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> ba</html:i>, int<html:i>
                                                  from</html:i> = -1) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#lastIndexOf-2"
                                                  >lastIndexOf</html:a></html:b>(const QString
                                                  &amp;<html:i> str</html:i>, int<html:i>
                                                  from</html:i> = -1) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#lastIndexOf-3"
                                                  >lastIndexOf</html:a></html:b>(const char
                                                  *<html:i> str</html:i>, int<html:i> from</html:i>
                                                = -1) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#lastIndexOf-4"
                                                  >lastIndexOf</html:a></html:b>(char<html:i>
                                                  ch</html:i>, int<html:i> from</html:i> = -1)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#left"
                                                  >left</html:a></html:b>(int<html:i> len</html:i>)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#leftJustified"
                                                  >leftJustified</html:a></html:b>(int<html:i>
                                                  width</html:i>, char<html:i> fill</html:i> = ' ',
                                                  bool<html:i> truncate</html:i> = false)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#length"
                                                  >length</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#mid"
                                                  >mid</html:a></html:b>(int<html:i> pos</html:i>,
                                                  int<html:i> len</html:i> = -1) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#prepend"
                                                  >prepend</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> ba</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#prepend-2"
                                                  >prepend</html:a></html:b>(const char *<html:i>
                                                  str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#prepend-3"
                                                  >prepend</html:a></html:b>(const char *<html:i>
                                                  str</html:i>, int<html:i> len</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#prepend-4"
                                                  >prepend</html:a></html:b>(char<html:i>
                                                  ch</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#push_back"
                                                  >push_back</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> other</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#push_back-2"
                                                  >push_back</html:a></html:b>(const char *<html:i>
                                                  str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#push_back-3"
                                                  >push_back</html:a></html:b>(char<html:i>
                                                  ch</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#push_front"
                                                  >push_front</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> other</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#push_front-2"
                                                  >push_front</html:a></html:b>(const char *<html:i>
                                                  str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#push_front-3"
                                                  >push_front</html:a></html:b>(char<html:i>
                                                  ch</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#remove"
                                                  >remove</html:a></html:b>(int<html:i>
                                                pos</html:i>, int<html:i> len</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#repeated"
                                                  >repeated</html:a></html:b>(int<html:i>
                                                  times</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#replace"
                                                  >replace</html:a></html:b>(int<html:i>
                                                  pos</html:i>, int<html:i> len</html:i>, const
                                                QByteArray &amp;<html:i> after</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#replace-2"
                                                  >replace</html:a></html:b>(int<html:i>
                                                  pos</html:i>, int<html:i> len</html:i>, const char
                                                  *<html:i> after</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#replace-3"
                                                  >replace</html:a></html:b>(int<html:i>
                                                  pos</html:i>, int<html:i> len</html:i>, const char
                                                  *<html:i> after</html:i>, int<html:i>
                                                  alen</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#replace-4"
                                                  >replace</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> before</html:i>, const QByteArray
                                                  &amp;<html:i> after</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#replace-5"
                                                  >replace</html:a></html:b>(const char *<html:i>
                                                  before</html:i>, const QByteArray &amp;<html:i>
                                                  after</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#replace-6"
                                                  >replace</html:a></html:b>(const char *<html:i>
                                                  before</html:i>, int<html:i> bsize</html:i>, const
                                                char *<html:i> after</html:i>, int<html:i>
                                                  asize</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#replace-7"
                                                  >replace</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> before</html:i>, const char
                                                  *<html:i> after</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#replace-8"
                                                  >replace</html:a></html:b>(const QString
                                                  &amp;<html:i> before</html:i>, const QByteArray
                                                  &amp;<html:i> after</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#replace-9"
                                                  >replace</html:a></html:b>(const QString
                                                  &amp;<html:i> before</html:i>, const char
                                                  *<html:i> after</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#replace-10"
                                                  >replace</html:a></html:b>(const char *<html:i>
                                                  before</html:i>, const char *<html:i>
                                                  after</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#replace-11"
                                                  >replace</html:a></html:b>(char<html:i>
                                                  before</html:i>, const QByteArray &amp;<html:i>
                                                  after</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#replace-12"
                                                  >replace</html:a></html:b>(char<html:i>
                                                  before</html:i>, const QString &amp;<html:i>
                                                  after</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#replace-13"
                                                  >replace</html:a></html:b>(char<html:i>
                                                  before</html:i>, const char *<html:i>
                                                  after</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#replace-14"
                                                  >replace</html:a></html:b>(char<html:i>
                                                  before</html:i>, char<html:i>
                                                after</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#reserve"
                                                  >reserve</html:a></html:b>(int<html:i>
                                                  size</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#resize"
                                                  >resize</html:a></html:b>(int<html:i>
                                                  size</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#right"
                                                  >right</html:a></html:b>(int<html:i> len</html:i>)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#rightJustified"
                                                  >rightJustified</html:a></html:b>(int<html:i>
                                                  width</html:i>, char<html:i> fill</html:i> = ' ',
                                                  bool<html:i> truncate</html:i> = false)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#setNum"
                                                  >setNum</html:a></html:b>(int<html:i> n</html:i>,
                                                  int<html:i> base</html:i> = 10)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#setNum-2"
                                                  >setNum</html:a></html:b>(uint<html:i> n</html:i>,
                                                  int<html:i> base</html:i> = 10)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#setNum-3"
                                                  >setNum</html:a></html:b>(short<html:i>
                                                n</html:i>, int<html:i> base</html:i> =
                                                10)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#setNum-4"
                                                  >setNum</html:a></html:b>(ushort<html:i>
                                                  n</html:i>, int<html:i> base</html:i> =
                                                10)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#setNum-5"
                                                  >setNum</html:a></html:b>(qlonglong<html:i>
                                                  n</html:i>, int<html:i> base</html:i> =
                                                10)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#setNum-6"
                                                  >setNum</html:a></html:b>(qulonglong<html:i>
                                                  n</html:i>, int<html:i> base</html:i> =
                                                10)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#setNum-7"
                                                  >setNum</html:a></html:b>(double<html:i>
                                                  n</html:i>, char<html:i> f</html:i> = 'g',
                                                  int<html:i> prec</html:i> = 6)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#setNum-8"
                                                  >setNum</html:a></html:b>(float<html:i>
                                                n</html:i>, char<html:i> f</html:i> = 'g',
                                                  int<html:i> prec</html:i> = 6)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#setRawData"
                                                  >setRawData</html:a></html:b>(const char *<html:i>
                                                  data</html:i>, uint<html:i>
                                                size</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#simplified"
                                                  >simplified</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#size"
                                                  >size</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QList&lt;QByteArray&gt; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#split"
                                                  >split</html:a></html:b>(char<html:i>
                                                sep</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#squeeze"
                                                  >squeeze</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#startsWith"
                                                  >startsWith</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> ba</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#startsWith-2"
                                                  >startsWith</html:a></html:b>(const char *<html:i>
                                                  str</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#startsWith-3"
                                                  >startsWith</html:a></html:b>(char<html:i>
                                                  ch</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#swap"
                                                  >swap</html:a></html:b>(QByteArray &amp;<html:i>
                                                  other</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toBase64"
                                                  >toBase64</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toBase64-2"
                                                  >toBase64</html:a></html:b>(Base64Options<html:i>
                                                  options</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                CFDataRef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toCFData"
                                                  >toCFData</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> double </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toDouble"
                                                  >toDouble</html:a></html:b>(bool *<html:i>
                                                  ok</html:i> = 0) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> float </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toFloat"
                                                  >toFloat</html:a></html:b>(bool *<html:i>
                                                  ok</html:i> = 0) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toHex"
                                                  >toHex</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toInt"
                                                  >toInt</html:a></html:b>(bool *<html:i>
                                                  ok</html:i> = 0, int<html:i> base</html:i> = 10)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> long </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toLong"
                                                  >toLong</html:a></html:b>(bool *<html:i>
                                                  ok</html:i> = 0, int<html:i> base</html:i> = 10)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                qlonglong </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toLongLong"
                                                  >toLongLong</html:a></html:b>(bool *<html:i>
                                                  ok</html:i> = 0, int<html:i> base</html:i> = 10)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toLower"
                                                  >toLower</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> NSData
                                                * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toNSData"
                                                  >toNSData</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#toPercentEncoding"
                                                  >toPercentEncoding</html:a></html:b>(const
                                                QByteArray &amp;<html:i> exclude</html:i> =
                                                QByteArray(), const QByteArray &amp;<html:i>
                                                  include</html:i> = QByteArray(), char<html:i>
                                                  percent</html:i> = '%') const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                CFDataRef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#toRawCFData"
                                                  >toRawCFData</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> NSData
                                                * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#toRawNSData"
                                                  >toRawNSData</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> short </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toShort"
                                                  >toShort</html:a></html:b>(bool *<html:i>
                                                  ok</html:i> = 0, int<html:i> base</html:i> = 10)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                std::string </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#toStdString"
                                                  >toStdString</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> uint </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toUInt"
                                                  >toUInt</html:a></html:b>(bool *<html:i>
                                                  ok</html:i> = 0, int<html:i> base</html:i> = 10)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> ulong </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toULong"
                                                  >toULong</html:a></html:b>(bool *<html:i>
                                                  ok</html:i> = 0, int<html:i> base</html:i> = 10)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                qulonglong </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#toULongLong"
                                                  >toULongLong</html:a></html:b>(bool *<html:i>
                                                  ok</html:i> = 0, int<html:i> base</html:i> = 10)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> ushort </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toUShort"
                                                  >toUShort</html:a></html:b>(bool *<html:i>
                                                  ok</html:i> = 0, int<html:i> base</html:i> = 10)
                                                const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#toUpper"
                                                  >toUpper</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#trimmed"
                                                  >trimmed</html:a></html:b>() const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#truncate"
                                                  >truncate</html:a></html:b>(int<html:i>
                                                  pos</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-not-eq"
                                                  >operator!=</html:a></html:b>(const QString
                                                  &amp;<html:i> str</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-2b-eq"
                                                  >operator+=</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> ba</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-2b-eq-2"
                                                  >operator+=</html:a></html:b>(const QString
                                                  &amp;<html:i> str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-2b-eq-3"
                                                  >operator+=</html:a></html:b>(const char *<html:i>
                                                  str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-2b-eq-4"
                                                  >operator+=</html:a></html:b>(char<html:i>
                                                  ch</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-lt"
                                                  >operator&lt;</html:a></html:b>(const QString
                                                  &amp;<html:i> str</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-lt-eq"
                                                  >operator&lt;=</html:a></html:b>(const QString
                                                  &amp;<html:i> str</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-eq"
                                                  >operator=</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> other</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-eq-2"
                                                  >operator=</html:a></html:b>(QByteArray
                                                  &amp;&amp;<html:i> other</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-eq-3"
                                                  >operator=</html:a></html:b>(const char *<html:i>
                                                  str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-eq-eq"
                                                  >operator==</html:a></html:b>(const QString
                                                  &amp;<html:i> str</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-gt"
                                                  >operator&gt;</html:a></html:b>(const QString
                                                  &amp;<html:i> str</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-gt-eq"
                                                  >operator&gt;=</html:a></html:b>(const QString
                                                  &amp;<html:i> str</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteRef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-5b-5d"
                                                  >operator[]</html:a></html:b>(int<html:i>
                                                  i</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-5b-5d-2"
                                                  >operator[]</html:a></html:b>(int<html:i>
                                                  i</html:i>) const</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteRef </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-5b-5d-3"
                                                  >operator[]</html:a></html:b>(uint<html:i>
                                                  i</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-5b-5d-4"
                                                  >operator[]</html:a></html:b>(uint<html:i>
                                                  i</html:i>) const</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div>
                            <html:a name="static-public-members"></html:a>
                            <html:h2 id="static-public-members">Static Public Members</html:h2>
                            <html:div class="table"><html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#fromBase64"
                                                  >fromBase64</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> base64</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#fromBase64-2"
                                                  >fromBase64</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> base64</html:i>,
                                                  Base64Options<html:i> options</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#fromCFData"
                                                  >fromCFData</html:a></html:b>(CFDataRef<html:i>
                                                  data</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#fromHex"
                                                  >fromHex</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> hexEncoded</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#fromNSData"
                                                  >fromNSData</html:a></html:b>(const NSData
                                                  *<html:i> data</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#fromPercentEncoding"
                                                  >fromPercentEncoding</html:a></html:b>(const
                                                QByteArray &amp;<html:i> input</html:i>,
                                                  char<html:i> percent</html:i> = '%')</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#fromRawCFData"
                                                  >fromRawCFData</html:a></html:b>(CFDataRef<html:i>
                                                  data</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#fromRawData"
                                                  >fromRawData</html:a></html:b>(const char
                                                  *<html:i> data</html:i>, int<html:i>
                                                size</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#fromRawNSData"
                                                  >fromRawNSData</html:a></html:b>(const NSData
                                                  *<html:i> data</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#fromStdString"
                                                  >fromStdString</html:a></html:b>(const std::string
                                                  &amp;<html:i> str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#number"
                                                  >number</html:a></html:b>(int<html:i> n</html:i>,
                                                  int<html:i> base</html:i> = 10)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#number-2"
                                                  >number</html:a></html:b>(uint<html:i> n</html:i>,
                                                  int<html:i> base</html:i> = 10)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#number-3"
                                                  >number</html:a></html:b>(qlonglong<html:i>
                                                  n</html:i>, int<html:i> base</html:i> =
                                                10)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#number-4"
                                                  >number</html:a></html:b>(qulonglong<html:i>
                                                  n</html:i>, int<html:i> base</html:i> =
                                                10)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#number-5"
                                                  >number</html:a></html:b>(double<html:i>
                                                  n</html:i>, char<html:i> f</html:i> = 'g',
                                                  int<html:i> prec</html:i> = 6)</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div>
                            <html:a name="related-non-members"></html:a>
                            <html:h2 id="related-non-members">Related Non-Members</html:h2>
                            <html:div class="table"><html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                quint16 </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#qChecksum"
                                                  >qChecksum</html:a></html:b>(const char *<html:i>
                                                  data</html:i>, uint<html:i>
                                                len</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#qCompress"
                                                  >qCompress</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> data</html:i>, int<html:i>
                                                  compressionLevel</html:i> = -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#qCompress-2"
                                                  >qCompress</html:a></html:b>(const uchar *<html:i>
                                                  data</html:i>, int<html:i> nbytes</html:i>,
                                                  int<html:i> compressionLevel</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#qUncompress"
                                                  >qUncompress</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> data</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#qUncompress-2"
                                                  >qUncompress</html:a></html:b>(const uchar
                                                  *<html:i> data</html:i>, int<html:i>
                                                  nbytes</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#qsnprintf"
                                                  >qsnprintf</html:a></html:b>(char *<html:i>
                                                  str</html:i>, size_t<html:i> n</html:i>, const
                                                char *<html:i> fmt</html:i>, ...)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#qstrcmp"
                                                  >qstrcmp</html:a></html:b>(const char *<html:i>
                                                  str1</html:i>, const char *<html:i>
                                                str2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#qstrcpy"
                                                  >qstrcpy</html:a></html:b>(char *<html:i>
                                                  dst</html:i>, const char *<html:i>
                                                src</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#qstrdup"
                                                  >qstrdup</html:a></html:b>(const char *<html:i>
                                                  src</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#qstricmp"
                                                  >qstricmp</html:a></html:b>(const char *<html:i>
                                                  str1</html:i>, const char *<html:i>
                                                str2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> uint </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#qstrlen"
                                                  >qstrlen</html:a></html:b>(const char *<html:i>
                                                  str</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#qstrncmp"
                                                  >qstrncmp</html:a></html:b>(const char *<html:i>
                                                  str1</html:i>, const char *<html:i> str2</html:i>,
                                                  uint<html:i> len</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#qstrncpy"
                                                  >qstrncpy</html:a></html:b>(char *<html:i>
                                                  dst</html:i>, const char *<html:i> src</html:i>,
                                                  uint<html:i> len</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#qstrnicmp"
                                                  >qstrnicmp</html:a></html:b>(const char *<html:i>
                                                  str1</html:i>, const char *<html:i> str2</html:i>,
                                                  uint<html:i> len</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> uint </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#qstrnlen"
                                                  >qstrnlen</html:a></html:b>(const char *<html:i>
                                                  str</html:i>, uint<html:i>
                                                maxlen</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qbytearray.html#qvsnprintf"
                                                  >qvsnprintf</html:a></html:b>(char *<html:i>
                                                  str</html:i>, size_t<html:i> n</html:i>, const
                                                char *<html:i> fmt</html:i>, va_list<html:i>
                                                  ap</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-not-eq-54"
                                                  >operator!=</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> a1</html:i>, const QByteArray
                                                  &amp;<html:i> a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-not-eq-55"
                                                  >operator!=</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> a1</html:i>, const char *<html:i>
                                                  a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-not-eq-56"
                                                  >operator!=</html:a></html:b>(const char *<html:i>
                                                  a1</html:i>, const QByteArray &amp;<html:i>
                                                  a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> const
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-2b"
                                                  >operator+</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> a1</html:i>, const QByteArray
                                                  &amp;<html:i> a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> const
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-2b-29"
                                                  >operator+</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> a1</html:i>, const char *<html:i>
                                                  a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> const
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-2b-30"
                                                  >operator+</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> a1</html:i>, char<html:i>
                                                  a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> const
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-2b-31"
                                                  >operator+</html:a></html:b>(const char *<html:i>
                                                  a1</html:i>, const QByteArray &amp;<html:i>
                                                  a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> const
                                                QByteArray </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-2b-32"
                                                  >operator+</html:a></html:b>(char<html:i>
                                                  a1</html:i>, const QByteArray &amp;<html:i>
                                                  a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-lt-19"
                                                  >operator&lt;</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> a1</html:i>, const QByteArray
                                                  &amp;<html:i> a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-lt-20"
                                                  >operator&lt;</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> a1</html:i>, const char *<html:i>
                                                  a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-lt-21"
                                                  >operator&lt;</html:a></html:b>(const char
                                                  *<html:i> a1</html:i>, const QByteArray
                                                  &amp;<html:i> a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QDataStream &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-lt-lt-46"
                                                  >operator&lt;&lt;</html:a></html:b>(QDataStream
                                                  &amp;<html:i> out</html:i>, const QByteArray
                                                  &amp;<html:i> ba</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-lt-eq-16"
                                                  >operator&lt;=</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> a1</html:i>, const QByteArray
                                                  &amp;<html:i> a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-lt-eq-17"
                                                  >operator&lt;=</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> a1</html:i>, const char *<html:i>
                                                  a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-lt-eq-18"
                                                  >operator&lt;=</html:a></html:b>(const char
                                                  *<html:i> a1</html:i>, const QByteArray
                                                  &amp;<html:i> a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-eq-eq-62"
                                                  >operator==</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> a1</html:i>, const QByteArray
                                                  &amp;<html:i> a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-eq-eq-63"
                                                  >operator==</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> a1</html:i>, const char *<html:i>
                                                  a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-eq-eq-64"
                                                  >operator==</html:a></html:b>(const char *<html:i>
                                                  a1</html:i>, const QByteArray &amp;<html:i>
                                                  a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-gt-16"
                                                  >operator&gt;</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> a1</html:i>, const QByteArray
                                                  &amp;<html:i> a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-gt-17"
                                                  >operator&gt;</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> a1</html:i>, const char *<html:i>
                                                  a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-gt-18"
                                                  >operator&gt;</html:a></html:b>(const char
                                                  *<html:i> a1</html:i>, const QByteArray
                                                  &amp;<html:i> a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-gt-eq-16"
                                                  >operator&gt;=</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> a1</html:i>, const QByteArray
                                                  &amp;<html:i> a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-gt-eq-17"
                                                  >operator&gt;=</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> a1</html:i>, const char *<html:i>
                                                  a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-gt-eq-18"
                                                  >operator&gt;=</html:a></html:b>(const char
                                                  *<html:i> a1</html:i>, const QByteArray
                                                  &amp;<html:i> a2</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QDataStream &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#operator-gt-gt-18"
                                                  >operator&gt;&gt;</html:a></html:b>(QDataStream
                                                  &amp;<html:i> in</html:i>, QByteArray
                                                  &amp;<html:i> ba</html:i>)</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div>
                            <html:a name="macros"></html:a>
                            <html:h2 id="macros">Macros</html:h2>
                            <html:div class="table"><html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qbytearray.html#QT_NO_CAST_FROM_BYTEARRAY"
                                                  >QT_NO_CAST_FROM_BYTEARRAY</html:a></html:b></html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div>
                            <html:a name="details"></html:a>
                            <!-- $$$QByteArray-description -->
                            <html:div class="descr">
                                <html:h2 id="details">Detailed Description</html:h2>
                                <html:p>The <html:a href="qbytearray.html">QByteArray</html:a> class
                                    provides an array of bytes.</html:p>
                                <html:p><html:a href="qbytearray.html">QByteArray</html:a> can be
                                    used to store both raw bytes (including '\0's) and traditional
                                    8-bit '\0'-terminated strings. Using <html:a
                                        href="qbytearray.html">QByteArray</html:a> is much more
                                    convenient than using <html:code>const char *</html:code>.
                                    Behind the scenes, it always ensures that the data is followed
                                    by a '\0' terminator, and uses <html:a
                                        href="implicit-sharing.html">implicit sharing</html:a>
                                    (copy-on-write) to reduce memory usage and avoid needless
                                    copying of data.</html:p>
                                <html:p>In addition to <html:a href="qbytearray.html"
                                        >QByteArray</html:a>, Qt also provides the <html:a
                                        href="qstring.html">QString</html:a> class to store string
                                    data. For most purposes, <html:a href="qstring.html"
                                        >QString</html:a> is the class you want to use. It stores
                                    16-bit Unicode characters, making it easy to store
                                    non-ASCII/non-Latin-1 characters in your application.
                                    Furthermore, <html:a href="qstring.html">QString</html:a> is
                                    used throughout in the Qt API. The two main cases where <html:a
                                        href="qbytearray.html">QByteArray</html:a> is appropriate
                                    are when you need to store raw binary data, and when memory
                                    conservation is critical (e.g., with Qt for Embedded
                                    Linux).</html:p>
                                <html:p>One way to initialize a <html:a href="qbytearray.html"
                                        >QByteArray</html:a> is simply to pass a <html:code>const
                                        char *</html:code> to its constructor. For example, the
                                    following code creates a byte array of size 5 containing the
                                    data "Hello":</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba(<html:span
                                        class="string">"Hello"</html:span>);</html:pre>
                                <html:p>Although the <html:a href="qbytearray.html#size"
                                        >size</html:a>() is 5, the byte array also maintains an
                                    extra '\0' character at the end so that if a function is used
                                    that asks for a pointer to the underlying data (e.g. a call to
                                        <html:a href="qbytearray.html#data">data</html:a>()), the
                                    data pointed to is guaranteed to be '\0'-terminated.</html:p>
                                <html:p><html:a href="qbytearray.html">QByteArray</html:a> makes a
                                    deep copy of the <html:code>const char *</html:code> data, so
                                    you can modify it later without experiencing side effects. (If
                                    for performance reasons you don't want to take a deep copy of
                                    the character data, use <html:a
                                        href="qbytearray.html#fromRawData"
                                        >QByteArray::fromRawData</html:a>() instead.)</html:p>
                                <html:p>Another approach is to set the size of the array using
                                        <html:a href="qbytearray.html#resize">resize</html:a>() and
                                    to initialize the data byte per byte. <html:a
                                        href="qbytearray.html">QByteArray</html:a> uses 0-based
                                    indexes, just like C++ arrays. To access the byte at a
                                    particular index position, you can use operator[](). On
                                    non-const byte arrays, operator[]() returns a reference to a
                                    byte that can be used on the left side of an assignment. For
                                    example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba; ba<html:span
                                        class="operator">.</html:span>resize(<html:span
                                        class="number">5</html:span>); ba<html:span class="operator"
                                        >[</html:span><html:span class="number"
                                        >0</html:span><html:span class="operator">]</html:span>
                                    <html:span class="operator">=</html:span>
                                    <html:span class="number">0x3c</html:span>; ba<html:span
                                        class="operator">[</html:span><html:span class="number"
                                        >1</html:span><html:span class="operator">]</html:span>
                                    <html:span class="operator">=</html:span>
                                    <html:span class="number">0xb8</html:span>; ba<html:span
                                        class="operator">[</html:span><html:span class="number"
                                        >2</html:span><html:span class="operator">]</html:span>
                                    <html:span class="operator">=</html:span>
                                    <html:span class="number">0x64</html:span>; ba<html:span
                                        class="operator">[</html:span><html:span class="number"
                                        >3</html:span><html:span class="operator">]</html:span>
                                    <html:span class="operator">=</html:span>
                                    <html:span class="number">0x18</html:span>; ba<html:span
                                        class="operator">[</html:span><html:span class="number"
                                        >4</html:span><html:span class="operator">]</html:span>
                                    <html:span class="operator">=</html:span>
                                    <html:span class="number">0xca</html:span>;</html:pre>
                                <html:p>For read-only access, an alternative syntax is to use
                                        <html:a href="qbytearray.html#at">at</html:a>():</html:p>
                                <html:pre class="cpp"><html:span class="keyword">for</html:span>
                                        (<html:span class="type">int</html:span> i <html:span
                                        class="operator">=</html:span>
                                    <html:span class="number">0</html:span>; i <html:span
                                        class="operator">&lt;</html:span> ba<html:span
                                        class="operator">.</html:span>size(); <html:span
                                        class="operator">+</html:span><html:span class="operator"
                                        >+</html:span>i) { <html:span class="keyword">if</html:span>
                                        (ba<html:span class="operator">.</html:span>at(i) <html:span
                                        class="operator">&gt;</html:span><html:span class="operator"
                                        >=</html:span>
                                    <html:span class="char">'a'</html:span>
                                    <html:span class="operator">&amp;</html:span><html:span
                                        class="operator">&amp;</html:span> ba<html:span
                                        class="operator">.</html:span>at(i) <html:span
                                        class="operator">&lt;</html:span><html:span class="operator"
                                        >=</html:span>
                                    <html:span class="char">'f'</html:span>) cout <html:span
                                        class="operator">&lt;</html:span><html:span class="operator"
                                        >&lt;</html:span>
                                    <html:span class="string">"Found character in range
                                        [a-f]"</html:span>
                                    <html:span class="operator">&lt;</html:span><html:span
                                        class="operator">&lt;</html:span> endl; }</html:pre>
                                <html:p><html:a href="qbytearray.html#at">at</html:a>() can be
                                    faster than operator[](), because it never causes a <html:a
                                        href="implicit-sharing.html#deep-copy">deep copy</html:a> to
                                    occur.</html:p>
                                <html:p>To extract many bytes at a time, use <html:a
                                        href="qbytearray.html#left">left</html:a>(), <html:a
                                        href="qbytearray.html#right">right</html:a>(), or <html:a
                                        href="qbytearray.html#mid">mid</html:a>().</html:p>
                                <html:p>A <html:a href="qbytearray.html">QByteArray</html:a> can
                                    embed '\0' bytes. The <html:a href="qbytearray.html#size"
                                        >size</html:a>() function always returns the size of the
                                    whole array, including embedded '\0' bytes, but excluding the
                                    terminating '\0' added by <html:a href="qbytearray.html"
                                        >QByteArray</html:a>. For example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba1(<html:span
                                        class="string">"ca\0r\0t"</html:span>); ba1<html:span
                                        class="operator">.</html:span>size(); <html:span
                                        class="comment">// Returns 2.</html:span> ba1<html:span
                                        class="operator">.</html:span>constData(); <html:span
                                        class="comment">// Returns "ca" with terminating
                                        \0.</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba2(<html:span
                                        class="string">"ca\0r\0t"</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">3</html:span>); ba2<html:span
                                        class="operator">.</html:span>size(); <html:span
                                        class="comment">// Returns 3.</html:span> ba2<html:span
                                        class="operator">.</html:span>constData(); <html:span
                                        class="comment">// Returns "ca\0" with terminating
                                        \0.</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba3(<html:span
                                        class="string">"ca\0r\0t"</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">4</html:span>); ba3<html:span
                                        class="operator">.</html:span>size(); <html:span
                                        class="comment">// Returns 4.</html:span> ba3<html:span
                                        class="operator">.</html:span>constData(); <html:span
                                        class="comment">// Returns "ca\0r" with terminating
                                        \0.</html:span>
                                    <html:span class="keyword">const</html:span>
                                    <html:span class="type">char</html:span> cart<html:span
                                        class="operator">[</html:span><html:span class="operator"
                                        >]</html:span>
                                    <html:span class="operator">=</html:span> {<html:span
                                        class="char">'c'</html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="char">'a'</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="char">'\0'</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="char">'r'</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="char">'\0'</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="char">'t'</html:span>}; <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> ba4(<html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span><html:span
                                        class="operator">::</html:span>fromRawData(cart<html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">6</html:span>)); ba4<html:span
                                        class="operator">.</html:span>size(); <html:span
                                        class="comment">// Returns 6.</html:span> ba4<html:span
                                        class="operator">.</html:span>constData(); <html:span
                                        class="comment">// Returns "ca\0r\0t" without terminating
                                        \0.</html:span></html:pre>
                                <html:p>If you want to obtain the length of the data up to and
                                    excluding the first '\0' character, call <html:a
                                        href="qbytearray.html#qstrlen">qstrlen</html:a>() on the
                                    byte array.</html:p>
                                <html:p>After a call to <html:a href="qbytearray.html#resize"
                                        >resize</html:a>(), newly allocated bytes have undefined
                                    values. To set all the bytes to a particular value, call <html:a
                                        href="qbytearray.html#fill">fill</html:a>().</html:p>
                                <html:p>To obtain a pointer to the actual character data, call
                                        <html:a href="qbytearray.html#data">data</html:a>() or
                                        <html:a href="qbytearray.html#constData"
                                    >constData</html:a>(). These functions return a pointer to the
                                    beginning of the data. The pointer is guaranteed to remain valid
                                    until a non-const function is called on the <html:a
                                        href="qbytearray.html">QByteArray</html:a>. It is also
                                    guaranteed that the data ends with a '\0' byte unless the
                                        <html:a href="qbytearray.html">QByteArray</html:a> was
                                    created from a <html:a href="qbytearray.html#fromRawData">raw
                                        data</html:a>. This '\0' byte is automatically provided by
                                        <html:a href="qbytearray.html">QByteArray</html:a> and is
                                    not counted in <html:a href="qbytearray.html#size"
                                    >size</html:a>().</html:p>
                                <html:p><html:a href="qbytearray.html">QByteArray</html:a> provides
                                    the following basic functions for modifying the byte data:
                                        <html:a href="qbytearray.html#append">append</html:a>(),
                                        <html:a href="qbytearray.html#prepend">prepend</html:a>(),
                                        <html:a href="qbytearray.html#insert">insert</html:a>(),
                                        <html:a href="qbytearray.html#replace">replace</html:a>(),
                                    and <html:a href="qbytearray.html#remove">remove</html:a>(). For
                                    example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> x(<html:span class="string"
                                        >"and"</html:span>); x<html:span class="operator"
                                        >.</html:span>prepend(<html:span class="string">"rock
                                        "</html:span>); <html:span class="comment">// x == "rock
                                        and"</html:span> x<html:span class="operator"
                                        >.</html:span>append(<html:span class="string">"
                                        roll"</html:span>); <html:span class="comment">// x == "rock
                                        and roll"</html:span> x<html:span class="operator"
                                        >.</html:span>replace(<html:span class="number"
                                        >5</html:span><html:span class="operator">,</html:span>
                                    <html:span class="number">3</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="string">"&amp;"</html:span>); <html:span
                                        class="comment">// x == "rock &amp;
                                    roll"</html:span></html:pre>
                                <html:p>The <html:a href="qbytearray.html#replace"
                                    >replace</html:a>() and <html:a href="qbytearray.html#remove"
                                        >remove</html:a>() functions' first two arguments are the
                                    position from which to start erasing and the number of bytes
                                    that should be erased.</html:p>
                                <html:p>When you <html:a href="qbytearray.html#append"
                                        >append</html:a>() data to a non-empty array, the array will
                                    be reallocated and the new data copied to it. You can avoid this
                                    behavior by calling <html:a href="qbytearray.html#reserve"
                                        >reserve</html:a>(), which preallocates a certain amount of
                                    memory. You can also call <html:a
                                        href="qbytearray.html#capacity">capacity</html:a>() to find
                                    out how much memory <html:a href="qbytearray.html"
                                        >QByteArray</html:a> actually allocated. Data appended to an
                                    empty array is not copied.</html:p>
                                <html:p>A frequent requirement is to remove whitespace characters
                                    from a byte array ('\n', '\t', ' ', etc.). If you want to remove
                                    whitespace from both ends of a <html:a href="qbytearray.html"
                                        >QByteArray</html:a>, use <html:a
                                        href="qbytearray.html#trimmed">trimmed</html:a>(). If you
                                    want to remove whitespace from both ends and replace multiple
                                    consecutive whitespaces with a single space character within the
                                    byte array, use <html:a href="qbytearray.html#simplified"
                                        >simplified</html:a>().</html:p>
                                <html:p>If you want to find all occurrences of a particular
                                    character or substring in a <html:a href="qbytearray.html"
                                        >QByteArray</html:a>, use <html:a
                                        href="qbytearray.html#indexOf">indexOf</html:a>() or <html:a
                                        href="qbytearray.html#lastIndexOf">lastIndexOf</html:a>().
                                    The former searches forward starting from a given index
                                    position, the latter searches backward. Both return the index
                                    position of the character or substring if they find it;
                                    otherwise, they return -1. For example, here's a typical loop
                                    that finds all occurrences of a particular substring:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba(<html:span
                                        class="string">"We must be &lt;b&gt;bold&lt;/b&gt;, very
                                        &lt;b&gt;bold&lt;/b&gt;"</html:span>); <html:span
                                        class="type">int</html:span> j <html:span class="operator"
                                        >=</html:span>
                                    <html:span class="number">0</html:span>; <html:span
                                        class="keyword">while</html:span> ((j <html:span
                                        class="operator">=</html:span> ba<html:span class="operator"
                                        >.</html:span>indexOf(<html:span class="string"
                                        >"&lt;b&gt;"</html:span><html:span class="operator"
                                        >,</html:span> j)) <html:span class="operator"
                                        >!</html:span><html:span class="operator">=</html:span>
                                    <html:span class="operator">-</html:span><html:span
                                        class="number">1</html:span>) { cout <html:span
                                        class="operator">&lt;</html:span><html:span class="operator"
                                        >&lt;</html:span>
                                    <html:span class="string">"Found &lt;b&gt; tag at index position
                                        "</html:span>
                                    <html:span class="operator">&lt;</html:span><html:span
                                        class="operator">&lt;</html:span> j <html:span
                                        class="operator">&lt;</html:span><html:span class="operator"
                                        >&lt;</html:span> endl; <html:span class="operator"
                                        >+</html:span><html:span class="operator">+</html:span>j;
                                    }</html:pre>
                                <html:p>If you simply want to check whether a <html:a
                                        href="qbytearray.html">QByteArray</html:a> contains a
                                    particular character or substring, use <html:a
                                        href="qbytearray.html#contains">contains</html:a>(). If you
                                    want to find out how many times a particular character or
                                    substring occurs in the byte array, use <html:a
                                        href="qbytearray.html#count">count</html:a>(). If you want
                                    to replace all occurrences of a particular value with another,
                                    use one of the two-parameter <html:a
                                        href="qbytearray.html#replace">replace</html:a>()
                                    overloads.</html:p>
                                <html:p><html:a href="qbytearray.html">QByteArray</html:a>s can be
                                    compared using overloaded operators such as operator&lt;(),
                                    operator&lt;=(), operator==(), operator&gt;=(), and so on. The
                                    comparison is based exclusively on the numeric values of the
                                    characters and is very fast, but is not what a human would
                                    expect. <html:a href="qstring.html#localeAwareCompare"
                                        >QString::localeAwareCompare</html:a>() is a better choice
                                    for sorting user-interface strings.</html:p>
                                <html:p>For historical reasons, <html:a href="qbytearray.html"
                                        >QByteArray</html:a> distinguishes between a null byte array
                                    and an empty byte array. A <html:i>null</html:i> byte array is a
                                    byte array that is initialized using <html:a
                                        href="qbytearray.html">QByteArray</html:a>'s default
                                    constructor or by passing (const char *)0 to the constructor. An
                                        <html:i>empty</html:i> byte array is any byte array with
                                    size 0. A null byte array is always empty, but an empty byte
                                    array isn't necessarily null:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>()<html:span
                                        class="operator">.</html:span>isNull(); <html:span
                                        class="comment">// returns true</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>()<html:span
                                        class="operator">.</html:span>isEmpty(); <html:span
                                        class="comment">// returns true</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>(<html:span class="string"
                                        >""</html:span>)<html:span class="operator"
                                    >.</html:span>isNull(); <html:span class="comment">// returns
                                        false</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>(<html:span class="string"
                                        >""</html:span>)<html:span class="operator"
                                    >.</html:span>isEmpty(); <html:span class="comment">// returns
                                        true</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>(<html:span class="string"
                                        >"abc"</html:span>)<html:span class="operator"
                                    >.</html:span>isNull(); <html:span class="comment">// returns
                                        false</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>(<html:span class="string"
                                        >"abc"</html:span>)<html:span class="operator"
                                    >.</html:span>isEmpty(); <html:span class="comment">// returns
                                        false</html:span></html:pre>
                                <html:p>All functions except <html:a href="qbytearray.html#isNull"
                                        >isNull</html:a>() treat null byte arrays the same as empty
                                    byte arrays. For example, <html:a href="qbytearray.html#data"
                                        >data</html:a>() returns a pointer to a '\0' character for a
                                    null byte array (<html:i>not</html:i> a null pointer), and
                                        <html:a href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a>() compares equal to <html:a
                                        href="qbytearray.html">QByteArray</html:a>(""). We recommend
                                    that you always use <html:a href="qbytearray.html#isEmpty"
                                        >isEmpty</html:a>() and avoid <html:a
                                        href="qbytearray.html#isNull">isNull</html:a>().</html:p>
                                <html:a name="notes-on-locale"></html:a>
                                <html:h3>Notes on Locale</html:h3>
                                <html:a name="number-string-conversions"></html:a>
                                <html:h4>Number-String Conversions</html:h4>
                                <html:p>Functions that perform conversions between numeric data
                                    types and strings are performed in the C locale, irrespective of
                                    the user's locale settings. Use <html:a href="qstring.html"
                                        >QString</html:a> to perform locale-aware conversions
                                    between numbers and strings.</html:p>
                                <html:a name="8-bit-character-comparisons"></html:a>
                                <html:h4>8-bit Character Comparisons</html:h4>
                                <html:p>In <html:a href="qbytearray.html">QByteArray</html:a>, the
                                    notion of uppercase and lowercase and of which character is
                                    greater than or less than another character is locale dependent.
                                    This affects functions that support a case insensitive option or
                                    that compare or lowercase or uppercase their arguments. Case
                                    insensitive operations and comparisons will be accurate if both
                                    strings contain only ASCII characters. (If
                                        <html:code>$LC_CTYPE</html:code> is set, most Unix systems
                                    do "the right thing".) Functions that this affects include
                                        <html:a href="qbytearray.html#contains">contains</html:a>(),
                                        <html:a href="qbytearray.html#indexOf">indexOf</html:a>(),
                                        <html:a href="qbytearray.html#lastIndexOf"
                                        >lastIndexOf</html:a>(), operator&lt;(), operator&lt;=(),
                                    operator&gt;(), operator&gt;=(), <html:a
                                        href="qbytearray.html#toLower">toLower</html:a>() and
                                        <html:a href="qbytearray.html#toUpper"
                                    >toUpper</html:a>().</html:p>
                                <html:p>This issue does not apply to <html:a href="qstring.html"
                                        >QString</html:a>s since they represent characters using
                                    Unicode.</html:p>
                            </html:div>
                            <html:p><html:b>See also </html:b><html:a href="qstring.html"
                                    >QString</html:a> and <html:a href="qbitarray.html"
                                    >QBitArray</html:a>.</html:p>
                            <!-- @@@QByteArray -->
                            <html:div class="types">
                                <html:h2>Member Type Documentation</html:h2>
                                <!-- $$$Base64Option$$$Base64Encoding$$$Base64UrlEncoding$$$KeepTrailingEquals$$$OmitTrailingEquals -->
                                <html:h3 class="flags" id="Base64Option-enum"><html:a
                                        name="Base64Option-enum"></html:a>enum
                                        QByteArray::<html:span class="name"
                                    >Base64Option</html:span><html:br />flags QByteArray::<html:span
                                        class="name">Base64Options</html:span></html:h3>
                                <html:p>This enum contains the options available for encoding and
                                    decoding Base64. Base64 is defined by <html:a
                                        href="http://www.ietf.org/rfc/rfc4648.txt">RFC
                                    4648</html:a>, with the following options:</html:p>
                                <html:div class="table"><html:table class="valuelist">
                                        <html:tbody>
                                            <html:tr class="odd" valign="top">
                                                <html:th class="tblConst">Constant</html:th>
                                                <html:th class="tblval">Value</html:th>
                                                <html:th class="tbldscr">Description</html:th>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QByteArray::Base64Encoding</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0</html:code></html:td>
                                                <html:td class="topAlign">(default) The regular
                                                  Base64 alphabet, called simply "base64"</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QByteArray::Base64UrlEncoding</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>1</html:code></html:td>
                                                <html:td class="topAlign">An alternate alphabet,
                                                  called "base64url", which replaces two characters
                                                  in the alphabet to be more friendly to
                                                  URLs.</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QByteArray::KeepTrailingEquals</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0</html:code></html:td>
                                                <html:td class="topAlign">(default) Keeps the
                                                  trailing padding equal signs at the end of the
                                                  encoded data, so the data is always a size
                                                  multiple of four.</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QByteArray::OmitTrailingEquals</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>2</html:code></html:td>
                                                <html:td class="topAlign">Omits adding the padding
                                                  equal signs at the end of the encoded
                                                  data.</html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table></html:div>
                                <html:p><html:a href="qbytearray.html#fromBase64"
                                        >QByteArray::fromBase64</html:a>() ignores the
                                    KeepTrailingEquals and OmitTrailingEquals options and will not
                                    flag errors in case they are missing or if there are too many of
                                    them.</html:p>
                                <html:p>This enum was introduced or modified in Qt 5.2.</html:p>
                                <html:p>The Base64Options type is a typedef for <html:a
                                        href="qflags.html">QFlags</html:a>&lt;Base64Option&gt;. It
                                    stores an OR combination of Base64Option values.</html:p>
                                <!-- @@@Base64Option -->
                            </html:div>
                            <html:div class="func">
                                <html:h2>Member Function Documentation</html:h2>
                                <!-- $$$QByteArray[overload1]$$$QByteArray -->
                                <html:h3 class="fn" id="QByteArray"><html:a name="QByteArray"
                                        ></html:a>QByteArray::<html:span class="name"
                                        >QByteArray</html:span>()</html:h3>
                                <html:p>Constructs an empty byte array.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#isEmpty">isEmpty</html:a>().</html:p>
                                <!-- @@@QByteArray -->
                                <!-- $$$QByteArray$$$QByteArrayconstchar*int -->
                                <html:h3 class="fn" id="QByteArray-2"><html:a name="QByteArray-2"
                                        ></html:a>QByteArray::<html:span class="name"
                                        >QByteArray</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> data</html:i>, <html:span
                                        class="type">int</html:span><html:i> size</html:i> =
                                    -1)</html:h3>
                                <html:p>Constructs a byte array containing the first
                                        <html:i>size</html:i> bytes of array
                                    <html:i>data</html:i>.</html:p>
                                <html:p>If <html:i>data</html:i> is 0, a null byte array is
                                    constructed.</html:p>
                                <html:p>If <html:i>size</html:i> is negative, <html:i>data</html:i>
                                    is assumed to point to a nul-terminated string and its length is
                                    determined dynamically. The terminating nul-character is not
                                    considered part of the byte array.</html:p>
                                <html:p><html:a href="qbytearray.html">QByteArray</html:a> makes a
                                    deep copy of the string data.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#fromRawData"
                                    >fromRawData</html:a>().</html:p>
                                <!-- @@@QByteArray -->
                                <!-- $$$QByteArray$$$QByteArrayintchar -->
                                <html:h3 class="fn" id="QByteArray-3"><html:a name="QByteArray-3"
                                        ></html:a>QByteArray::<html:span class="name"
                                        >QByteArray</html:span>(<html:span class="type"
                                        >int</html:span><html:i> size</html:i>, <html:span
                                        class="type">char</html:span><html:i> ch</html:i>)</html:h3>
                                <html:p>Constructs a byte array of size <html:i>size</html:i> with
                                    every byte set to character <html:i>ch</html:i>.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#fill">fill</html:a>().</html:p>
                                <!-- @@@QByteArray -->
                                <!-- $$$QByteArray$$$QByteArrayconstQByteArray& -->
                                <html:h3 class="fn" id="QByteArray-5"><html:a name="QByteArray-5"
                                        ></html:a>QByteArray::<html:span class="name"
                                        >QByteArray</html:span>(const <html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        other</html:i>)</html:h3>
                                <html:p>Constructs a copy of <html:i>other</html:i>.</html:p>
                                <html:p>This operation takes <html:a
                                        href="containers.html#constant-time">constant time</html:a>,
                                    because <html:a href="qbytearray.html">QByteArray</html:a> is
                                        <html:a href="implicit-sharing.html#implicitly-shared"
                                        >implicitly shared</html:a>. This makes returning a <html:a
                                        href="qbytearray.html">QByteArray</html:a> from a function
                                    very fast. If a shared instance is modified, it will be copied
                                    (copy-on-write), taking <html:a
                                        href="containers.html#linear-time">linear
                                    time</html:a>.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#operator-eq"
                                    >operator=</html:a>().</html:p>
                                <!-- @@@QByteArray -->
                                <!-- $$$QByteArray$$$QByteArrayQByteArray&& -->
                                <html:h3 class="fn" id="QByteArray-6"><html:a name="QByteArray-6"
                                        ></html:a>QByteArray::<html:span class="name"
                                        >QByteArray</html:span>(<html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;&amp;<html:i>
                                        other</html:i>)</html:h3>
                                <html:p>Move-constructs a <html:a href="qbytearray.html"
                                        >QByteArray</html:a> instance, making it point at the same
                                    object that <html:i>other</html:i> was pointing to.</html:p>
                                <html:p>This function was introduced in Qt 5.2.</html:p>
                                <!-- @@@QByteArray -->
                                <!-- $$$~QByteArray[overload1]$$$~QByteArray -->
                                <html:h3 class="fn" id="dtor.QByteArray"><html:a
                                        name="dtor.QByteArray"></html:a>QByteArray::<html:span
                                        class="name">~QByteArray</html:span>()</html:h3>
                                <html:p>Destroys the byte array.</html:p>
                                <!-- @@@~QByteArray -->
                                <!-- $$$append[overload1]$$$appendconstQByteArray& -->
                                <html:h3 class="fn" id="append"><html:a name="append"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name">append</html:span>(const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    ba</html:i>)</html:h3>
                                <html:p>Appends the byte array <html:i>ba</html:i> onto the end of
                                    this byte array.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> x(<html:span class="string"
                                        >"free"</html:span>); <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> y(<html:span class="string"
                                        >"dom"</html:span>); x<html:span class="operator"
                                        >.</html:span>append(y); <html:span class="comment">// x ==
                                        "freedom"</html:span></html:pre>
                                <html:p>This is the same as insert(<html:a
                                        href="qbytearray.html#size">size</html:a>(),
                                        <html:i>ba</html:i>).</html:p>
                                <html:p>Note: <html:a href="qbytearray.html">QByteArray</html:a> is
                                    an <html:a href="implicit-sharing.html#implicitly-shared"
                                        >implicitly shared</html:a> class. Consequently, if
                                        <html:i>this</html:i> is an empty <html:a
                                        href="qbytearray.html">QByteArray</html:a>, then
                                        <html:i>this</html:i> will just share the data held in
                                        <html:i>ba</html:i>. In this case, no copying of data is
                                    done, taking <html:a href="containers.html#constant-time"
                                        >constant time</html:a>. If a shared instance is modified,
                                    it will be copied (copy-on-write), taking <html:a
                                        href="containers.html#linear-time">linear
                                    time</html:a>.</html:p>
                                <html:p>If <html:i>this</html:i> is not an empty <html:a
                                        href="qbytearray.html">QByteArray</html:a>, a deep copy of
                                    the data is performed, taking <html:a
                                        href="containers.html#linear-time">linear
                                    time</html:a>.</html:p>
                                <html:p>This operation typically does not suffer from allocation
                                    overhead, because <html:a href="qbytearray.html"
                                        >QByteArray</html:a> preallocates extra space at the end of
                                    the data so that it may grow without reallocating for each
                                    append operation.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#operator-2b-eq">operator+=</html:a>(),
                                        <html:a href="qbytearray.html#prepend">prepend</html:a>(),
                                    and <html:a href="qbytearray.html#insert"
                                    >insert</html:a>().</html:p>
                                <!-- @@@append -->
                                <!-- $$$append$$$appendconstQString& -->
                                <html:h3 class="fn" id="append-2"><html:a name="append-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name">append</html:span>(const
                                        <html:span class="type"><html:a href="qstring.html"
                                            >QString</html:a></html:span> &amp;<html:i>
                                    str</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Appends the string <html:i>str</html:i> to this byte array.
                                    The Unicode data is converted into 8-bit characters using
                                        <html:a href="qstring.html#toUtf8"
                                    >QString::toUtf8</html:a>().</html:p>
                                <html:p>You can disable this function by defining
                                        <html:code>QT_NO_CAST_TO_ASCII</html:code> when you compile
                                    your applications. You then need to call <html:a
                                        href="qstring.html#toUtf8">QString::toUtf8</html:a>() (or
                                        <html:a href="qstring.html#toLatin1"
                                        >QString::toLatin1</html:a>() or <html:a
                                        href="qstring.html#toLocal8Bit"
                                        >QString::toLocal8Bit</html:a>()) explicitly if you want to
                                    convert the data to <html:code>const char
                                    *</html:code>.</html:p>
                                <!-- @@@append -->
                                <!-- $$$append$$$appendconstchar* -->
                                <html:h3 class="fn" id="append-3"><html:a name="append-3"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name">append</html:span>(const
                                        <html:span class="type">char</html:span> *<html:i>
                                        str</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Appends the string <html:i>str</html:i> to this byte
                                    array.</html:p>
                                <!-- @@@append -->
                                <!-- $$$append$$$appendconstchar*int -->
                                <html:h3 class="fn" id="append-4"><html:a name="append-4"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name">append</html:span>(const
                                        <html:span class="type">char</html:span> *<html:i>
                                        str</html:i>, <html:span class="type"
                                        >int</html:span><html:i> len</html:i>)</html:h3>
                                <html:p>This function overloads <html:a
                                        href="qbytearray.html#append">append</html:a>().</html:p>
                                <html:p>Appends the first <html:i>len</html:i> characters of the
                                    string <html:i>str</html:i> to this byte array and returns a
                                    reference to this byte array.</html:p>
                                <html:p>If <html:i>len</html:i> is negative, the length of the
                                    string will be determined automatically using <html:a
                                        href="qbytearray.html#qstrlen">qstrlen</html:a>(). If
                                        <html:i>len</html:i> is zero or <html:i>str</html:i> is
                                    null, nothing is appended to the byte array. Ensure that
                                        <html:i>len</html:i> is <html:i>not</html:i> longer than
                                        <html:i>str</html:i>.</html:p>
                                <!-- @@@append -->
                                <!-- $$$append$$$appendchar -->
                                <html:h3 class="fn" id="append-5"><html:a name="append-5"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >append</html:span>(<html:span class="type"
                                        >char</html:span><html:i> ch</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Appends the character <html:i>ch</html:i> to this byte
                                    array.</html:p>
                                <!-- @@@append -->
                                <!-- $$$at[overload1]$$$atint -->
                                <html:h3 class="fn" id="at"><html:a name="at"></html:a><html:span
                                        class="type">char</html:span> QByteArray::<html:span
                                        class="name">at</html:span>(<html:span class="type"
                                        >int</html:span><html:i> i</html:i>) const</html:h3>
                                <html:p>Returns the character at index position <html:i>i</html:i>
                                    in the byte array.</html:p>
                                <html:p><html:i>i</html:i> must be a valid index position in the
                                    byte array (i.e., 0 &lt;= <html:i>i</html:i> &lt; <html:a
                                        href="qbytearray.html#size">size</html:a>()).</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#operator-5b-5d"
                                    >operator[]</html:a>().</html:p>
                                <!-- @@@at -->
                                <!-- $$$capacity[overload1]$$$capacity -->
                                <html:h3 class="fn" id="capacity"><html:a name="capacity"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name">capacity</html:span>()
                                    const</html:h3>
                                <html:p>Returns the maximum number of bytes that can be stored in
                                    the byte array without forcing a reallocation.</html:p>
                                <html:p>The sole purpose of this function is to provide a means of
                                    fine tuning <html:a href="qbytearray.html">QByteArray</html:a>'s
                                    memory usage. In general, you will rarely ever need to call this
                                    function. If you want to know how many bytes are in the byte
                                    array, call <html:a href="qbytearray.html#size"
                                    >size</html:a>().</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#reserve">reserve</html:a>() and
                                        <html:a href="qbytearray.html#squeeze"
                                    >squeeze</html:a>().</html:p>
                                <!-- @@@capacity -->
                                <!-- $$$chop[overload1]$$$chopint -->
                                <html:h3 class="fn" id="chop"><html:a name="chop"
                                        ></html:a><html:span class="type">void</html:span>
                                        QByteArray::<html:span class="name"
                                        >chop</html:span>(<html:span class="type"
                                        >int</html:span><html:i> n</html:i>)</html:h3>
                                <html:p>Removes <html:i>n</html:i> bytes from the end of the byte
                                    array.</html:p>
                                <html:p>If <html:i>n</html:i> is greater than <html:a
                                        href="qbytearray.html#size">size</html:a>(), the result is
                                    an empty byte array.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba(<html:span
                                        class="string">"STARTTLS\r\n"</html:span>); ba<html:span
                                        class="operator">.</html:span>chop(<html:span class="number"
                                        >2</html:span>); <html:span class="comment">// ba ==
                                        "STARTTLS"</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#truncate">truncate</html:a>(), <html:a
                                        href="qbytearray.html#resize">resize</html:a>(), and <html:a
                                        href="qbytearray.html#left">left</html:a>().</html:p>
                                <!-- @@@chop -->
                                <!-- $$$clear[overload1]$$$clear -->
                                <html:h3 class="fn" id="clear"><html:a name="clear"
                                        ></html:a><html:span class="type">void</html:span>
                                        QByteArray::<html:span class="name"
                                    >clear</html:span>()</html:h3>
                                <html:p>Clears the contents of the byte array and makes it
                                    empty.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#resize">resize</html:a>() and <html:a
                                        href="qbytearray.html#isEmpty">isEmpty</html:a>().</html:p>
                                <!-- @@@clear -->
                                <!-- $$$constData[overload1]$$$constData -->
                                <html:h3 class="fn" id="constData"><html:a name="constData"
                                    ></html:a>const <html:span class="type">char</html:span> *
                                        QByteArray::<html:span class="name">constData</html:span>()
                                    const</html:h3>
                                <html:p>Returns a pointer to the data stored in the byte array. The
                                    pointer can be used to access the bytes that compose the array.
                                    The data is '\0'-terminated unless the <html:a
                                        href="qbytearray.html">QByteArray</html:a> object was
                                    created from raw data. The pointer remains valid as long as the
                                    byte array isn't reallocated or destroyed.</html:p>
                                <html:p>This function is mostly useful to pass a byte array to a
                                    function that accepts a <html:code>const char
                                    *</html:code>.</html:p>
                                <html:p>Note: A <html:a href="qbytearray.html">QByteArray</html:a>
                                    can store any byte values including '\0's, but most functions
                                    that take <html:code>char *</html:code> arguments assume that
                                    the data ends at the first '\0' they encounter.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#data">data</html:a>(), <html:a
                                        href="qbytearray.html#operator-5b-5d">operator[]</html:a>(),
                                    and <html:a href="qbytearray.html#fromRawData"
                                        >fromRawData</html:a>().</html:p>
                                <!-- @@@constData -->
                                <!-- $$$contains[overload1]$$$containsconstQByteArray& -->
                                <html:h3 class="fn" id="contains"><html:a name="contains"
                                        ></html:a><html:span class="type">bool</html:span>
                                        QByteArray::<html:span class="name"
                                    >contains</html:span>(const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i> ba</html:i>)
                                    const</html:h3>
                                <html:p>Returns <html:code>true</html:code> if the byte array
                                    contains an occurrence of the byte array <html:i>ba</html:i>;
                                    otherwise returns <html:code>false</html:code>.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#indexOf">indexOf</html:a>() and
                                        <html:a href="qbytearray.html#count"
                                    >count</html:a>().</html:p>
                                <!-- @@@contains -->
                                <!-- $$$contains$$$containsconstchar* -->
                                <html:h3 class="fn" id="contains-2"><html:a name="contains-2"
                                        ></html:a><html:span class="type">bool</html:span>
                                        QByteArray::<html:span class="name"
                                    >contains</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> str</html:i>) const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if the byte array
                                    contains the string <html:i>str</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@contains -->
                                <!-- $$$contains$$$containschar -->
                                <html:h3 class="fn" id="contains-3"><html:a name="contains-3"
                                        ></html:a><html:span class="type">bool</html:span>
                                        QByteArray::<html:span class="name"
                                        >contains</html:span>(<html:span class="type"
                                        >char</html:span><html:i> ch</html:i>) const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if the byte array
                                    contains the character <html:i>ch</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@contains -->
                                <!-- $$$count[overload1]$$$countconstQByteArray& -->
                                <html:h3 class="fn" id="count"><html:a name="count"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name">count</html:span>(const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i> ba</html:i>)
                                    const</html:h3>
                                <html:p>Returns the number of (potentially overlapping) occurrences
                                    of byte array <html:i>ba</html:i> in this byte array.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#contains">contains</html:a>() and
                                        <html:a href="qbytearray.html#indexOf"
                                    >indexOf</html:a>().</html:p>
                                <!-- @@@count -->
                                <!-- $$$count$$$countconstchar* -->
                                <html:h3 class="fn" id="count-2"><html:a name="count-2"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name">count</html:span>(const
                                        <html:span class="type">char</html:span> *<html:i>
                                        str</html:i>) const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns the number of (potentially overlapping) occurrences
                                    of string <html:i>str</html:i> in the byte array.</html:p>
                                <!-- @@@count -->
                                <!-- $$$count$$$countchar -->
                                <html:h3 class="fn" id="count-3"><html:a name="count-3"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name"
                                        >count</html:span>(<html:span class="type"
                                        >char</html:span><html:i> ch</html:i>) const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns the number of occurrences of character
                                        <html:i>ch</html:i> in the byte array.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#contains">contains</html:a>() and
                                        <html:a href="qbytearray.html#indexOf"
                                    >indexOf</html:a>().</html:p>
                                <!-- @@@count -->
                                <!-- $$$count$$$count -->
                                <html:h3 class="fn" id="count-4"><html:a name="count-4"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name">count</html:span>()
                                    const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Same as <html:a href="qbytearray.html#size"
                                    >size</html:a>().</html:p>
                                <!-- @@@count -->
                                <!-- $$$data[overload1]$$$data -->
                                <html:h3 class="fn" id="data"><html:a name="data"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QByteArray::<html:span class="name"
                                    >data</html:span>()</html:h3>
                                <html:p>Returns a pointer to the data stored in the byte array. The
                                    pointer can be used to access and modify the bytes that compose
                                    the array. The data is '\0'-terminated, i.e. the number of bytes
                                    in the returned character string is <html:a
                                        href="qbytearray.html#size">size</html:a>() + 1 for the '\0'
                                    terminator.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba(<html:span
                                        class="string">"Hello world"</html:span>); <html:span
                                        class="type">char</html:span>
                                    <html:span class="operator">*</html:span>data <html:span
                                        class="operator">=</html:span> ba<html:span class="operator"
                                        >.</html:span>data(); <html:span class="keyword"
                                        >while</html:span> (<html:span class="operator"
                                        >*</html:span>data) { cout <html:span class="operator"
                                        >&lt;</html:span><html:span class="operator"
                                        >&lt;</html:span>
                                    <html:span class="string">"["</html:span>
                                    <html:span class="operator">&lt;</html:span><html:span
                                        class="operator">&lt;</html:span>
                                    <html:span class="operator">*</html:span>data <html:span
                                        class="operator">&lt;</html:span><html:span class="operator"
                                        >&lt;</html:span>
                                    <html:span class="string">"]"</html:span>
                                    <html:span class="operator">&lt;</html:span><html:span
                                        class="operator">&lt;</html:span> endl; <html:span
                                        class="operator">+</html:span><html:span class="operator"
                                        >+</html:span>data; }</html:pre>
                                <html:p>The pointer remains valid as long as the byte array isn't
                                    reallocated or destroyed. For read-only access, <html:a
                                        href="qbytearray.html#constData">constData</html:a>() is
                                    faster because it never causes a <html:a
                                        href="implicit-sharing.html#deep-copy">deep copy</html:a> to
                                    occur.</html:p>
                                <html:p>This function is mostly useful to pass a byte array to a
                                    function that accepts a <html:code>const char
                                    *</html:code>.</html:p>
                                <html:p>The following example makes a copy of the char* returned by
                                    data(), but it will corrupt the heap and cause a crash because
                                    it does not allocate a byte for the '\0' at the end:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qstring.html">QString</html:a></html:span> tmp
                                        <html:span class="operator">=</html:span>
                                    <html:span class="string">"test"</html:span>; <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> text <html:span
                                        class="operator">=</html:span> tmp<html:span
                                        class="operator">.</html:span>toLocal8Bit(); <html:span
                                        class="type">char</html:span>
                                    <html:span class="operator">*</html:span>data <html:span
                                        class="operator">=</html:span>
                                    <html:span class="keyword">new</html:span>
                                    <html:span class="type">char</html:span><html:span
                                        class="operator">[</html:span>text<html:span
                                        class="operator">.</html:span>size()<html:span
                                        class="operator">]</html:span>; strcpy(data<html:span
                                        class="operator">,</html:span> text<html:span
                                        class="operator">.</html:span>data()); <html:span
                                        class="keyword">delete</html:span>
                                    <html:span class="operator">[</html:span><html:span
                                        class="operator">]</html:span> data;</html:pre>
                                <html:p>This one allocates the correct amount of space:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qstring.html">QString</html:a></html:span> tmp
                                        <html:span class="operator">=</html:span>
                                    <html:span class="string">"test"</html:span>; <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> text <html:span
                                        class="operator">=</html:span> tmp<html:span
                                        class="operator">.</html:span>toLocal8Bit(); <html:span
                                        class="type">char</html:span>
                                    <html:span class="operator">*</html:span>data <html:span
                                        class="operator">=</html:span>
                                    <html:span class="keyword">new</html:span>
                                    <html:span class="type">char</html:span><html:span
                                        class="operator">[</html:span>text<html:span
                                        class="operator">.</html:span>size() <html:span
                                        class="operator">+</html:span>
                                    <html:span class="number">1</html:span><html:span
                                        class="operator">]</html:span>; strcpy(data<html:span
                                        class="operator">,</html:span> text<html:span
                                        class="operator">.</html:span>data()); <html:span
                                        class="keyword">delete</html:span>
                                    <html:span class="operator">[</html:span><html:span
                                        class="operator">]</html:span> data;</html:pre>
                                <html:p>Note: A <html:a href="qbytearray.html">QByteArray</html:a>
                                    can store any byte values including '\0's, but most functions
                                    that take <html:code>char *</html:code> arguments assume that
                                    the data ends at the first '\0' they encounter.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#constData">constData</html:a>() and
                                        <html:a href="qbytearray.html#operator-5b-5d"
                                        >operator[]</html:a>().</html:p>
                                <!-- @@@data -->
                                <!-- $$$data$$$data -->
                                <html:h3 class="fn" id="data-2"><html:a name="data-2"></html:a>const
                                        <html:span class="type">char</html:span> *
                                        QByteArray::<html:span class="name">data</html:span>()
                                    const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <!-- @@@data -->
                                <!-- $$$endsWith[overload1]$$$endsWithconstQByteArray& -->
                                <html:h3 class="fn" id="endsWith"><html:a name="endsWith"
                                        ></html:a><html:span class="type">bool</html:span>
                                        QByteArray::<html:span class="name"
                                    >endsWith</html:span>(const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i> ba</html:i>)
                                    const</html:h3>
                                <html:p>Returns <html:code>true</html:code> if this byte array ends
                                    with byte array <html:i>ba</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> url(<html:span
                                        class="string"
                                        >"http://qt-project.org/doc/qt-5.0/qtdoc/index.html"</html:span>);
                                        <html:span class="keyword">if</html:span> (url<html:span
                                        class="operator">.</html:span>endsWith(<html:span
                                        class="string">".html"</html:span>)) <html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator"
                                    >.</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#startsWith">startsWith</html:a>() and
                                        <html:a href="qbytearray.html#right"
                                    >right</html:a>().</html:p>
                                <!-- @@@endsWith -->
                                <!-- $$$endsWith$$$endsWithconstchar* -->
                                <html:h3 class="fn" id="endsWith-2"><html:a name="endsWith-2"
                                        ></html:a><html:span class="type">bool</html:span>
                                        QByteArray::<html:span class="name"
                                    >endsWith</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> str</html:i>) const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if this byte array ends
                                    with string <html:i>str</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@endsWith -->
                                <!-- $$$endsWith$$$endsWithchar -->
                                <html:h3 class="fn" id="endsWith-3"><html:a name="endsWith-3"
                                        ></html:a><html:span class="type">bool</html:span>
                                        QByteArray::<html:span class="name"
                                        >endsWith</html:span>(<html:span class="type"
                                        >char</html:span><html:i> ch</html:i>) const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if this byte array ends
                                    with character <html:i>ch</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@endsWith -->
                                <!-- $$$fill[overload1]$$$fillcharint -->
                                <html:h3 class="fn" id="fill"><html:a name="fill"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >fill</html:span>(<html:span class="type"
                                        >char</html:span><html:i> ch</html:i>, <html:span
                                        class="type">int</html:span><html:i> size</html:i> =
                                    -1)</html:h3>
                                <html:p>Sets every byte in the byte array to character
                                        <html:i>ch</html:i>. If <html:i>size</html:i> is different
                                    from -1 (the default), the byte array is resized to size
                                        <html:i>size</html:i> beforehand.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba(<html:span
                                        class="string">"Istambul"</html:span>); ba<html:span
                                        class="operator">.</html:span>fill(<html:span class="char"
                                        >'o'</html:span>); <html:span class="comment">// ba ==
                                        "oooooooo"</html:span> ba<html:span class="operator"
                                        >.</html:span>fill(<html:span class="char"
                                        >'X'</html:span><html:span class="operator">,</html:span>
                                    <html:span class="number">2</html:span>); <html:span
                                        class="comment">// ba == "XX"</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#resize">resize</html:a>().</html:p>
                                <!-- @@@fill -->
                                <!-- $$$fromBase64[overload1]$$$fromBase64constQByteArray& -->
                                <html:h3 class="fn" id="fromBase64"><html:a name="fromBase64"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">fromBase64</html:span>(const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        base64</html:i>)</html:h3>
                                <html:p>Returns a decoded copy of the Base64 array
                                        <html:i>base64</html:i>. Input is not checked for validity;
                                    invalid characters in the input are skipped, enabling the
                                    decoding process to continue with subsequent
                                    characters.</html:p>
                                <html:p>For example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> text <html:span
                                        class="operator">=</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>fromBase64(<html:span class="string"
                                        >"UXQgaXMgZ3JlYXQh"</html:span>); text<html:span
                                        class="operator">.</html:span>data(); <html:span
                                        class="comment">// returns "Qt is
                                    great!"</html:span></html:pre>
                                <html:p>The algorithm used to decode Base64-encoded data is defined
                                    in <html:a href="http://www.ietf.org/rfc/rfc4648.txt">RFC
                                        4648</html:a>.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toBase64"
                                    >toBase64</html:a>().</html:p>
                                <!-- @@@fromBase64 -->
                                <!-- $$$fromBase64$$$fromBase64constQByteArray&Base64Options -->
                                <html:h3 class="fn" id="fromBase64-2"><html:a name="fromBase64-2"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">fromBase64</html:span>(const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        base64</html:i>, <html:span class="type"><html:a
                                            href="qbytearray.html#Base64Option-enum"
                                            >Base64Options</html:a></html:span><html:i>
                                        options</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a decoded copy of the Base64 array
                                        <html:i>base64</html:i>, using the alphabet defined by
                                        <html:i>options</html:i>. Input is not checked for validity;
                                    invalid characters in the input are skipped, enabling the
                                    decoding process to continue with subsequent
                                    characters.</html:p>
                                <html:p>For example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>fromBase64(<html:span class="string"
                                        >"PHA+SGVsbG8/PC9wPg=="</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>Base64Encoding); <html:span class="comment"
                                        >// returns "&lt;p&gt;Hello?&lt;/p&gt;"</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>fromBase64(<html:span class="string"
                                        >"PHA-SGVsbG8_PC9wPg=="</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>Base64UrlEncoding); <html:span
                                        class="comment">// returns
                                        "&lt;p&gt;Hello?&lt;/p&gt;"</html:span></html:pre>
                                <html:p>The algorithm used to decode Base64-encoded data is defined
                                    in <html:a href="http://www.ietf.org/rfc/rfc4648.txt">RFC
                                        4648</html:a>.</html:p>
                                <html:p>This function was introduced in Qt 5.2.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toBase64"
                                    >toBase64</html:a>().</html:p>
                                <!-- @@@fromBase64 -->
                                <!-- $$$fromCFData[overload1]$$$fromCFDataCFDataRef -->
                                <html:h3 class="fn" id="fromCFData"><html:a name="fromCFData"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">fromCFData</html:span>(<html:span class="type"
                                        >CFDataRef</html:span><html:i> data</html:i>)</html:h3>
                                <html:p>Constructs a new <html:a href="qbytearray.html"
                                        >QByteArray</html:a> containing a copy of the CFData
                                        <html:i>data</html:i>.</html:p>
                                <html:p>This function was introduced in Qt 5.3.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#fromRawCFData"
                                    >fromRawCFData</html:a>(), <html:a
                                        href="qbytearray.html#fromRawData">fromRawData</html:a>(),
                                        <html:a href="qbytearray.html#toRawCFData"
                                        >toRawCFData</html:a>(), and <html:a
                                        href="qbytearray.html#toCFData"
                                    >toCFData</html:a>().</html:p>
                                <!-- @@@fromCFData -->
                                <!-- $$$fromHex[overload1]$$$fromHexconstQByteArray& -->
                                <html:h3 class="fn" id="fromHex"><html:a name="fromHex"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">fromHex</html:span>(const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        hexEncoded</html:i>)</html:h3>
                                <html:p>Returns a decoded copy of the hex encoded array
                                        <html:i>hexEncoded</html:i>. Input is not checked for
                                    validity; invalid characters in the input are skipped, enabling
                                    the decoding process to continue with subsequent
                                    characters.</html:p>
                                <html:p>For example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> text <html:span
                                        class="operator">=</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>fromHex(<html:span class="string"
                                        >"517420697320677265617421"</html:span>); text<html:span
                                        class="operator">.</html:span>data(); <html:span
                                        class="comment">// returns "Qt is
                                    great!"</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toHex">toHex</html:a>().</html:p>
                                <!-- @@@fromHex -->
                                <!-- $$$fromNSData[overload1]$$$fromNSDataconstNSData* -->
                                <html:h3 class="fn" id="fromNSData"><html:a name="fromNSData"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">fromNSData</html:span>(const <html:span
                                        class="type">NSData</html:span> *<html:i>
                                    data</html:i>)</html:h3>
                                <html:p>Constructs a new <html:a href="qbytearray.html"
                                        >QByteArray</html:a> containing a copy of the NSData
                                        <html:i>data</html:i>.</html:p>
                                <html:p>This function was introduced in Qt 5.3.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#fromRawNSData"
                                    >fromRawNSData</html:a>(), <html:a
                                        href="qbytearray.html#fromRawData">fromRawData</html:a>(),
                                        <html:a href="qbytearray.html#toNSData">toNSData</html:a>(),
                                    and <html:a href="qbytearray.html#toRawNSData"
                                        >toRawNSData</html:a>().</html:p>
                                <!-- @@@fromNSData -->
                                <!-- $$$fromPercentEncoding[overload1]$$$fromPercentEncodingconstQByteArray&char -->
                                <html:h3 class="fn" id="fromPercentEncoding"><html:a
                                        name="fromPercentEncoding"></html:a><html:code>[static]
                                        </html:code><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">fromPercentEncoding</html:span>(const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                        input</html:i>, <html:span class="type"
                                        >char</html:span><html:i> percent</html:i> = '%')</html:h3>
                                <html:p>Returns a decoded copy of the URI/URL-style percent-encoded
                                        <html:i>input</html:i>. The <html:i>percent</html:i>
                                    parameter allows you to replace the '%' character for another
                                    (for instance, '_' or '=').</html:p>
                                <html:p>For example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> text <html:span
                                        class="operator">=</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>fromPercentEncoding(<html:span class="string"
                                        >"Qt%20is%20great%33"</html:span>); text<html:span
                                        class="operator">.</html:span><html:a
                                        href="qbytearray.html#data">data</html:a>(); <html:span
                                        class="comment">// returns "Qt is
                                    great!"</html:span></html:pre>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toPercentEncoding"
                                        >toPercentEncoding</html:a>() and <html:a
                                        href="qurl.html#fromPercentEncoding"
                                        >QUrl::fromPercentEncoding</html:a>().</html:p>
                                <!-- @@@fromPercentEncoding -->
                                <!-- $$$fromRawCFData[overload1]$$$fromRawCFDataCFDataRef -->
                                <html:h3 class="fn" id="fromRawCFData"><html:a name="fromRawCFData"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">fromRawCFData</html:span>(<html:span
                                        class="type">CFDataRef</html:span><html:i>
                                    data</html:i>)</html:h3>
                                <html:p>Constructs a <html:a href="qbytearray.html"
                                        >QByteArray</html:a> that uses the bytes of the CFData
                                        <html:i>data</html:i>.</html:p>
                                <html:p>The <html:i>data</html:i>'s bytes are not copied.</html:p>
                                <html:p>The caller guarantees that the CFData will not be deleted or
                                    modified as long as this <html:a href="qbytearray.html"
                                        >QByteArray</html:a> object exists.</html:p>
                                <html:p>This function was introduced in Qt 5.3.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#fromCFData">fromCFData</html:a>(),
                                        <html:a href="qbytearray.html#fromRawData"
                                        >fromRawData</html:a>(), <html:a
                                        href="qbytearray.html#toRawCFData">toRawCFData</html:a>(),
                                    and <html:a href="qbytearray.html#toCFData"
                                    >toCFData</html:a>().</html:p>
                                <!-- @@@fromRawCFData -->
                                <!-- $$$fromRawData[overload1]$$$fromRawDataconstchar*int -->
                                <html:h3 class="fn" id="fromRawData"><html:a name="fromRawData"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">fromRawData</html:span>(const <html:span
                                        class="type">char</html:span> *<html:i> data</html:i>,
                                        <html:span class="type">int</html:span><html:i>
                                        size</html:i>)</html:h3>
                                <html:p>Constructs a <html:a href="qbytearray.html"
                                        >QByteArray</html:a> that uses the first
                                        <html:i>size</html:i> bytes of the <html:i>data</html:i>
                                    array. The bytes are <html:i>not</html:i> copied. The <html:a
                                        href="qbytearray.html">QByteArray</html:a> will contain the
                                        <html:i>data</html:i> pointer. The caller guarantees that
                                        <html:i>data</html:i> will not be deleted or modified as
                                    long as this <html:a href="qbytearray.html">QByteArray</html:a>
                                    and any copies of it exist that have not been modified. In other
                                    words, because <html:a href="qbytearray.html"
                                        >QByteArray</html:a> is an <html:a
                                        href="implicit-sharing.html#implicitly-shared">implicitly
                                        shared</html:a> class and the instance returned by this
                                    function contains the <html:i>data</html:i> pointer, the caller
                                    must not delete <html:i>data</html:i> or modify it directly as
                                    long as the returned <html:a href="qbytearray.html"
                                        >QByteArray</html:a> and any copies exist. However, <html:a
                                        href="qbytearray.html">QByteArray</html:a> does not take
                                    ownership of <html:i>data</html:i>, so the <html:a
                                        href="qbytearray.html">QByteArray</html:a> destructor will
                                    never delete the raw <html:i>data</html:i>, even when the last
                                        <html:a href="qbytearray.html">QByteArray</html:a> referring
                                    to <html:i>data</html:i> is destroyed.</html:p>
                                <html:p>A subsequent attempt to modify the contents of the returned
                                        <html:a href="qbytearray.html">QByteArray</html:a> or any
                                    copy made from it will cause it to create a deep copy of the
                                        <html:i>data</html:i> array before doing the modification.
                                    This ensures that the raw <html:i>data</html:i> array itself
                                    will never be modified by <html:a href="qbytearray.html"
                                        >QByteArray</html:a>.</html:p>
                                <html:p>Here is an example of how to read data using a <html:a
                                        href="qdatastream.html">QDataStream</html:a> on raw data in
                                    memory without copying the raw data into a <html:a
                                        href="qbytearray.html">QByteArray</html:a>:</html:p>
                                <html:pre class="cpp">
                                    <html:span class="keyword">static</html:span>
                                    <html:span class="keyword">const</html:span>
                                    <html:span class="type">char</html:span> mydata<html:span
                                        class="operator">[</html:span><html:span class="operator"
                                        >]</html:span>
                                    <html:span class="operator">=</html:span> { <html:span
                                        class="number">0x00</html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="number">0x00</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0x03</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0x84</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0x78</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0x9c</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0x3b</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0x76</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0xec</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0x18</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0xc3</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0x31</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0x0a</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0xf1</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0xcc</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0x99</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="operator">.</html:span><html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span>
                                    <html:span class="number">0x6d</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0x5b</html:span> }; <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> data <html:span
                                        class="operator">=</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>fromRawData(mydata<html:span class="operator"
                                        >,</html:span>
                                    <html:span class="keyword">sizeof</html:span>(mydata));
                                        <html:span class="type"><html:a href="qdatastream.html"
                                            >QDataStream</html:a></html:span> in(<html:span
                                        class="operator">&amp;</html:span>data<html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a href="qiodevice.html"
                                            >QIODevice</html:a></html:span><html:span
                                        class="operator">::</html:span>ReadOnly); <html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator"
                                    >.</html:span></html:pre>
                                <html:p><html:b>Warning:</html:b> A byte array created with
                                    fromRawData() is <html:i>not</html:i> null-terminated, unless
                                    the raw data contains a 0 character at position
                                        <html:i>size</html:i>. While that does not matter for
                                        <html:a href="qdatastream.html">QDataStream</html:a> or
                                    functions like <html:a href="qbytearray.html#indexOf"
                                        >indexOf</html:a>(), passing the byte array to a function
                                    accepting a <html:code>const char *</html:code> expected to be
                                    '\0'-terminated will fail.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#setRawData">setRawData</html:a>(),
                                        <html:a href="qbytearray.html#data">data</html:a>(), and
                                        <html:a href="qbytearray.html#constData"
                                    >constData</html:a>().</html:p>
                                <!-- @@@fromRawData -->
                                <!-- $$$fromRawNSData[overload1]$$$fromRawNSDataconstNSData* -->
                                <html:h3 class="fn" id="fromRawNSData"><html:a name="fromRawNSData"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">fromRawNSData</html:span>(const <html:span
                                        class="type">NSData</html:span> *<html:i>
                                    data</html:i>)</html:h3>
                                <html:p>Constructs a <html:a href="qbytearray.html"
                                        >QByteArray</html:a> that uses the bytes of the NSData
                                        <html:i>data</html:i>.</html:p>
                                <html:p>The <html:i>data</html:i>'s bytes are not copied.</html:p>
                                <html:p>The caller guarantees that the NSData will not be deleted or
                                    modified as long as this <html:a href="qbytearray.html"
                                        >QByteArray</html:a> object exists.</html:p>
                                <html:p>This function was introduced in Qt 5.3.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#fromNSData">fromNSData</html:a>(),
                                        <html:a href="qbytearray.html#fromRawData"
                                        >fromRawData</html:a>(), <html:a
                                        href="qbytearray.html#toRawNSData">toRawNSData</html:a>(),
                                    and <html:a href="qbytearray.html#toNSData"
                                    >toNSData</html:a>().</html:p>
                                <!-- @@@fromRawNSData -->
                                <!-- $$$fromStdString[overload1]$$$fromStdStringconststd::string& -->
                                <html:h3 class="fn" id="fromStdString"><html:a name="fromStdString"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">fromStdString</html:span>(const <html:span
                                        class="type">std::string</html:span> &amp;<html:i>
                                        str</html:i>)</html:h3>
                                <html:p>Returns a copy of the <html:i>str</html:i> string as a
                                        <html:a href="qbytearray.html">QByteArray</html:a>.</html:p>
                                <html:p>This function was introduced in Qt 5.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toStdString">toStdString</html:a>()
                                    and <html:a href="qstring.html#fromStdString"
                                        >QString::fromStdString</html:a>().</html:p>
                                <!-- @@@fromStdString -->
                                <!-- $$$indexOf[overload1]$$$indexOfconstQByteArray&int -->
                                <html:h3 class="fn" id="indexOf"><html:a name="indexOf"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name"
                                    >indexOf</html:span>(const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i> ba</html:i>,
                                        <html:span class="type">int</html:span><html:i>
                                        from</html:i> = 0) const</html:h3>
                                <html:p>Returns the index position of the first occurrence of the
                                    byte array <html:i>ba</html:i> in this byte array, searching
                                    forward from index position <html:i>from</html:i>. Returns -1 if
                                        <html:i>ba</html:i> could not be found.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> x(<html:span class="string"
                                        >"sticky question"</html:span>); <html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> y(<html:span
                                        class="string">"sti"</html:span>); x<html:span
                                        class="operator">.</html:span>indexOf(y); <html:span
                                        class="comment">// returns 0</html:span> x<html:span
                                        class="operator">.</html:span>indexOf(y<html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">1</html:span>); <html:span
                                        class="comment">// returns 10</html:span> x<html:span
                                        class="operator">.</html:span>indexOf(y<html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">10</html:span>); <html:span
                                        class="comment">// returns 10</html:span> x<html:span
                                        class="operator">.</html:span>indexOf(y<html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">11</html:span>); <html:span
                                        class="comment">// returns -1</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#lastIndexOf">lastIndexOf</html:a>(),
                                        <html:a href="qbytearray.html#contains">contains</html:a>(),
                                    and <html:a href="qbytearray.html#count"
                                    >count</html:a>().</html:p>
                                <!-- @@@indexOf -->
                                <!-- $$$indexOf$$$indexOfconstQString&int -->
                                <html:h3 class="fn" id="indexOf-2"><html:a name="indexOf-2"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name"
                                    >indexOf</html:span>(const <html:span class="type"><html:a
                                            href="qstring.html">QString</html:a></html:span>
                                        &amp;<html:i> str</html:i>, <html:span class="type"
                                        >int</html:span><html:i> from</html:i> = 0) const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns the index position of the first occurrence of the
                                    string <html:i>str</html:i> in the byte array, searching forward
                                    from index position <html:i>from</html:i>. Returns -1 if
                                        <html:i>str</html:i> could not be found.</html:p>
                                <html:p>The Unicode data is converted into 8-bit characters using
                                        <html:a href="qstring.html#toUtf8"
                                    >QString::toUtf8</html:a>().</html:p>
                                <html:p>You can disable this function by defining
                                        <html:code>QT_NO_CAST_TO_ASCII</html:code> when you compile
                                    your applications. You then need to call <html:a
                                        href="qstring.html#toUtf8">QString::toUtf8</html:a>() (or
                                        <html:a href="qstring.html#toLatin1"
                                        >QString::toLatin1</html:a>() or <html:a
                                        href="qstring.html#toLocal8Bit"
                                        >QString::toLocal8Bit</html:a>()) explicitly if you want to
                                    convert the data to <html:code>const char
                                    *</html:code>.</html:p>
                                <!-- @@@indexOf -->
                                <!-- $$$indexOf$$$indexOfconstchar*int -->
                                <html:h3 class="fn" id="indexOf-3"><html:a name="indexOf-3"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name"
                                    >indexOf</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> str</html:i>, <html:span
                                        class="type">int</html:span><html:i> from</html:i> = 0)
                                    const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns the index position of the first occurrence of the
                                    string <html:i>str</html:i> in the byte array, searching forward
                                    from index position <html:i>from</html:i>. Returns -1 if
                                        <html:i>str</html:i> could not be found.</html:p>
                                <!-- @@@indexOf -->
                                <!-- $$$indexOf$$$indexOfcharint -->
                                <html:h3 class="fn" id="indexOf-4"><html:a name="indexOf-4"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name"
                                        >indexOf</html:span>(<html:span class="type"
                                        >char</html:span><html:i> ch</html:i>, <html:span
                                        class="type">int</html:span><html:i> from</html:i> = 0)
                                    const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns the index position of the first occurrence of the
                                    character <html:i>ch</html:i> in the byte array, searching
                                    forward from index position <html:i>from</html:i>. Returns -1 if
                                        <html:i>ch</html:i> could not be found.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba(<html:span
                                        class="string">"ABCBA"</html:span>); ba<html:span
                                        class="operator">.</html:span>indexOf(<html:span
                                        class="string">"B"</html:span>); <html:span class="comment"
                                        >// returns 1</html:span> ba<html:span class="operator"
                                        >.</html:span>indexOf(<html:span class="string"
                                        >"B"</html:span><html:span class="operator">,</html:span>
                                    <html:span class="number">1</html:span>); <html:span
                                        class="comment">// returns 1</html:span> ba<html:span
                                        class="operator">.</html:span>indexOf(<html:span
                                        class="string">"B"</html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="number">2</html:span>); <html:span
                                        class="comment">// returns 3</html:span> ba<html:span
                                        class="operator">.</html:span>indexOf(<html:span
                                        class="string">"X"</html:span>); <html:span class="comment"
                                        >// returns -1</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#lastIndexOf">lastIndexOf</html:a>()
                                    and <html:a href="qbytearray.html#contains"
                                    >contains</html:a>().</html:p>
                                <!-- @@@indexOf -->
                                <!-- $$$insert[overload1]$$$insertintconstQByteArray& -->
                                <html:h3 class="fn" id="insert"><html:a name="insert"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >insert</html:span>(<html:span class="type"
                                        >int</html:span><html:i> i</html:i>, const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        ba</html:i>)</html:h3>
                                <html:p>Inserts the byte array <html:i>ba</html:i> at index position
                                        <html:i>i</html:i> and returns a reference to this byte
                                    array.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba(<html:span
                                        class="string">"Meal"</html:span>); ba<html:span
                                        class="operator">.</html:span>insert(<html:span
                                        class="number">1</html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>(<html:span class="string"
                                        >"ontr"</html:span>)); <html:span class="comment">// ba ==
                                        "Montreal"</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#append">append</html:a>(), <html:a
                                        href="qbytearray.html#prepend">prepend</html:a>(), <html:a
                                        href="qbytearray.html#replace">replace</html:a>(), and
                                        <html:a href="qbytearray.html#remove"
                                    >remove</html:a>().</html:p>
                                <!-- @@@insert -->
                                <!-- $$$insert$$$insertintconstQString& -->
                                <html:h3 class="fn" id="insert-2"><html:a name="insert-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >insert</html:span>(<html:span class="type"
                                        >int</html:span><html:i> i</html:i>, const <html:span
                                        class="type"><html:a href="qstring.html"
                                        >QString</html:a></html:span> &amp;<html:i>
                                    str</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Inserts the string <html:i>str</html:i> at index position
                                        <html:i>i</html:i> in the byte array. The Unicode data is
                                    converted into 8-bit characters using <html:a
                                        href="qstring.html#toUtf8"
                                    >QString::toUtf8</html:a>().</html:p>
                                <html:p>If <html:i>i</html:i> is greater than <html:a
                                        href="qbytearray.html#size">size</html:a>(), the array is
                                    first extended using <html:a href="qbytearray.html#resize"
                                        >resize</html:a>().</html:p>
                                <html:p>You can disable this function by defining
                                        <html:code>QT_NO_CAST_TO_ASCII</html:code> when you compile
                                    your applications. You then need to call <html:a
                                        href="qstring.html#toUtf8">QString::toUtf8</html:a>() (or
                                        <html:a href="qstring.html#toLatin1"
                                        >QString::toLatin1</html:a>() or <html:a
                                        href="qstring.html#toLocal8Bit"
                                        >QString::toLocal8Bit</html:a>()) explicitly if you want to
                                    convert the data to <html:code>const char
                                    *</html:code>.</html:p>
                                <!-- @@@insert -->
                                <!-- $$$insert$$$insertintconstchar* -->
                                <html:h3 class="fn" id="insert-3"><html:a name="insert-3"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >insert</html:span>(<html:span class="type"
                                        >int</html:span><html:i> i</html:i>, const <html:span
                                        class="type">char</html:span> *<html:i>
                                    str</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Inserts the string <html:i>str</html:i> at position
                                        <html:i>i</html:i> in the byte array.</html:p>
                                <html:p>If <html:i>i</html:i> is greater than <html:a
                                        href="qbytearray.html#size">size</html:a>(), the array is
                                    first extended using <html:a href="qbytearray.html#resize"
                                        >resize</html:a>().</html:p>
                                <!-- @@@insert -->
                                <!-- $$$insert$$$insertintconstchar*int -->
                                <html:h3 class="fn" id="insert-4"><html:a name="insert-4"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >insert</html:span>(<html:span class="type"
                                        >int</html:span><html:i> i</html:i>, const <html:span
                                        class="type">char</html:span> *<html:i> str</html:i>,
                                        <html:span class="type">int</html:span><html:i>
                                    len</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Inserts <html:i>len</html:i> bytes of the string
                                        <html:i>str</html:i> at position <html:i>i</html:i> in the
                                    byte array.</html:p>
                                <html:p>If <html:i>i</html:i> is greater than <html:a
                                        href="qbytearray.html#size">size</html:a>(), the array is
                                    first extended using <html:a href="qbytearray.html#resize"
                                        >resize</html:a>().</html:p>
                                <html:p>This function was introduced in Qt 4.6.</html:p>
                                <!-- @@@insert -->
                                <!-- $$$insert$$$insertintchar -->
                                <html:h3 class="fn" id="insert-5"><html:a name="insert-5"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >insert</html:span>(<html:span class="type"
                                        >int</html:span><html:i> i</html:i>, <html:span class="type"
                                        >char</html:span><html:i> ch</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Inserts character <html:i>ch</html:i> at index position
                                        <html:i>i</html:i> in the byte array. If <html:i>i</html:i>
                                    is greater than <html:a href="qbytearray.html#size"
                                        >size</html:a>(), the array is first extended using <html:a
                                        href="qbytearray.html#resize">resize</html:a>().</html:p>
                                <!-- @@@insert -->
                                <!-- $$$isEmpty[overload1]$$$isEmpty -->
                                <html:h3 class="fn" id="isEmpty"><html:a name="isEmpty"
                                        ></html:a><html:span class="type">bool</html:span>
                                        QByteArray::<html:span class="name">isEmpty</html:span>()
                                    const</html:h3>
                                <html:p>Returns <html:code>true</html:code> if the byte array has
                                    size 0; otherwise returns <html:code>false</html:code>.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>()<html:span
                                        class="operator">.</html:span>isEmpty(); <html:span
                                        class="comment">// returns true</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>(<html:span class="string"
                                        >""</html:span>)<html:span class="operator"
                                    >.</html:span>isEmpty(); <html:span class="comment">// returns
                                        true</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>(<html:span class="string"
                                        >"abc"</html:span>)<html:span class="operator"
                                    >.</html:span>isEmpty(); <html:span class="comment">// returns
                                        false</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#size">size</html:a>().</html:p>
                                <!-- @@@isEmpty -->
                                <!-- $$$isNull[overload1]$$$isNull -->
                                <html:h3 class="fn" id="isNull"><html:a name="isNull"
                                        ></html:a><html:span class="type">bool</html:span>
                                        QByteArray::<html:span class="name">isNull</html:span>()
                                    const</html:h3>
                                <html:p>Returns <html:code>true</html:code> if this byte array is
                                    null; otherwise returns <html:code>false</html:code>.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>()<html:span
                                        class="operator">.</html:span>isNull(); <html:span
                                        class="comment">// returns true</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>(<html:span class="string"
                                        >""</html:span>)<html:span class="operator"
                                    >.</html:span>isNull(); <html:span class="comment">// returns
                                        false</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>(<html:span class="string"
                                        >"abc"</html:span>)<html:span class="operator"
                                    >.</html:span>isNull(); <html:span class="comment">// returns
                                        false</html:span></html:pre>
                                <html:p>Qt makes a distinction between null byte arrays and empty
                                    byte arrays for historical reasons. For most applications, what
                                    matters is whether or not a byte array contains any data, and
                                    this can be determined using <html:a
                                        href="qbytearray.html#isEmpty">isEmpty</html:a>().</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#isEmpty">isEmpty</html:a>().</html:p>
                                <!-- @@@isNull -->
                                <!-- $$$lastIndexOf[overload1]$$$lastIndexOfconstQByteArray&int -->
                                <html:h3 class="fn" id="lastIndexOf"><html:a name="lastIndexOf"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name"
                                    >lastIndexOf</html:span>(const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i> ba</html:i>,
                                        <html:span class="type">int</html:span><html:i>
                                        from</html:i> = -1) const</html:h3>
                                <html:p>Returns the index position of the last occurrence of the
                                    byte array <html:i>ba</html:i> in this byte array, searching
                                    backward from index position <html:i>from</html:i>. If
                                        <html:i>from</html:i> is -1 (the default), the search starts
                                    at the last byte. Returns -1 if <html:i>ba</html:i> could not be
                                    found.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> x(<html:span class="string"
                                        >"crazy azimuths"</html:span>); <html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> y(<html:span
                                        class="string">"az"</html:span>); x<html:span
                                        class="operator">.</html:span>lastIndexOf(y); <html:span
                                        class="comment">// returns 6</html:span> x<html:span
                                        class="operator">.</html:span>lastIndexOf(y<html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">6</html:span>); <html:span
                                        class="comment">// returns 6</html:span> x<html:span
                                        class="operator">.</html:span>lastIndexOf(y<html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">5</html:span>); <html:span
                                        class="comment">// returns 2</html:span> x<html:span
                                        class="operator">.</html:span>lastIndexOf(y<html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">1</html:span>); <html:span
                                        class="comment">// returns -1</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#indexOf">indexOf</html:a>(), <html:a
                                        href="qbytearray.html#contains">contains</html:a>(), and
                                        <html:a href="qbytearray.html#count"
                                    >count</html:a>().</html:p>
                                <!-- @@@lastIndexOf -->
                                <!-- $$$lastIndexOf$$$lastIndexOfconstQString&int -->
                                <html:h3 class="fn" id="lastIndexOf-2"><html:a name="lastIndexOf-2"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name"
                                    >lastIndexOf</html:span>(const <html:span class="type"><html:a
                                            href="qstring.html">QString</html:a></html:span>
                                        &amp;<html:i> str</html:i>, <html:span class="type"
                                        >int</html:span><html:i> from</html:i> = -1) const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns the index position of the last occurrence of the
                                    string <html:i>str</html:i> in the byte array, searching
                                    backward from index position <html:i>from</html:i>. If
                                        <html:i>from</html:i> is -1 (the default), the search starts
                                    at the last (<html:a href="qbytearray.html#size">size</html:a>()
                                    - 1) byte. Returns -1 if <html:i>str</html:i> could not be
                                    found.</html:p>
                                <html:p>The Unicode data is converted into 8-bit characters using
                                        <html:a href="qstring.html#toUtf8"
                                    >QString::toUtf8</html:a>().</html:p>
                                <html:p>You can disable this function by defining
                                        <html:code>QT_NO_CAST_TO_ASCII</html:code> when you compile
                                    your applications. You then need to call <html:a
                                        href="qstring.html#toUtf8">QString::toUtf8</html:a>() (or
                                        <html:a href="qstring.html#toLatin1"
                                        >QString::toLatin1</html:a>() or <html:a
                                        href="qstring.html#toLocal8Bit"
                                        >QString::toLocal8Bit</html:a>()) explicitly if you want to
                                    convert the data to <html:code>const char
                                    *</html:code>.</html:p>
                                <!-- @@@lastIndexOf -->
                                <!-- $$$lastIndexOf$$$lastIndexOfconstchar*int -->
                                <html:h3 class="fn" id="lastIndexOf-3"><html:a name="lastIndexOf-3"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name"
                                    >lastIndexOf</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> str</html:i>, <html:span
                                        class="type">int</html:span><html:i> from</html:i> = -1)
                                    const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns the index position of the last occurrence of the
                                    string <html:i>str</html:i> in the byte array, searching
                                    backward from index position <html:i>from</html:i>. If
                                        <html:i>from</html:i> is -1 (the default), the search starts
                                    at the last (<html:a href="qbytearray.html#size">size</html:a>()
                                    - 1) byte. Returns -1 if <html:i>str</html:i> could not be
                                    found.</html:p>
                                <!-- @@@lastIndexOf -->
                                <!-- $$$lastIndexOf$$$lastIndexOfcharint -->
                                <html:h3 class="fn" id="lastIndexOf-4"><html:a name="lastIndexOf-4"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name"
                                        >lastIndexOf</html:span>(<html:span class="type"
                                        >char</html:span><html:i> ch</html:i>, <html:span
                                        class="type">int</html:span><html:i> from</html:i> = -1)
                                    const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns the index position of the last occurrence of
                                    character <html:i>ch</html:i> in the byte array, searching
                                    backward from index position <html:i>from</html:i>. If
                                        <html:i>from</html:i> is -1 (the default), the search starts
                                    at the last (<html:a href="qbytearray.html#size">size</html:a>()
                                    - 1) byte. Returns -1 if <html:i>ch</html:i> could not be
                                    found.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba(<html:span
                                        class="string">"ABCBA"</html:span>); ba<html:span
                                        class="operator">.</html:span>lastIndexOf(<html:span
                                        class="string">"B"</html:span>); <html:span class="comment"
                                        >// returns 3</html:span> ba<html:span class="operator"
                                        >.</html:span>lastIndexOf(<html:span class="string"
                                        >"B"</html:span><html:span class="operator">,</html:span>
                                    <html:span class="number">3</html:span>); <html:span
                                        class="comment">// returns 3</html:span> ba<html:span
                                        class="operator">.</html:span>lastIndexOf(<html:span
                                        class="string">"B"</html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="number">2</html:span>); <html:span
                                        class="comment">// returns 1</html:span> ba<html:span
                                        class="operator">.</html:span>lastIndexOf(<html:span
                                        class="string">"X"</html:span>); <html:span class="comment"
                                        >// returns -1</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#indexOf">indexOf</html:a>() and
                                        <html:a href="qbytearray.html#contains"
                                    >contains</html:a>().</html:p>
                                <!-- @@@lastIndexOf -->
                                <!-- $$$left[overload1]$$$leftint -->
                                <html:h3 class="fn" id="left"><html:a name="left"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">left</html:span>(<html:span class="type"
                                        >int</html:span><html:i> len</html:i>) const</html:h3>
                                <html:p>Returns a byte array that contains the leftmost
                                        <html:i>len</html:i> bytes of this byte array.</html:p>
                                <html:p>The entire byte array is returned if <html:i>len</html:i> is
                                    greater than <html:a href="qbytearray.html#size"
                                    >size</html:a>().</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> x(<html:span class="string"
                                        >"Pineapple"</html:span>); <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> y <html:span
                                        class="operator">=</html:span> x<html:span class="operator"
                                        >.</html:span>left(<html:span class="number">4</html:span>);
                                        <html:span class="comment">// y ==
                                    "Pine"</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#right">right</html:a>(), <html:a
                                        href="qbytearray.html#mid">mid</html:a>(), <html:a
                                        href="qbytearray.html#startsWith">startsWith</html:a>(), and
                                        <html:a href="qbytearray.html#truncate"
                                    >truncate</html:a>().</html:p>
                                <!-- @@@left -->
                                <!-- $$$leftJustified[overload1]$$$leftJustifiedintcharbool -->
                                <html:h3 class="fn" id="leftJustified"><html:a name="leftJustified"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">leftJustified</html:span>(<html:span
                                        class="type">int</html:span><html:i> width</html:i>,
                                        <html:span class="type">char</html:span><html:i>
                                        fill</html:i> = ' ', <html:span class="type"
                                        >bool</html:span><html:i> truncate</html:i> = false)
                                    const</html:h3>
                                <html:p>Returns a byte array of size <html:i>width</html:i> that
                                    contains this byte array padded by the <html:i>fill</html:i>
                                    character.</html:p>
                                <html:p>If <html:i>truncate</html:i> is false and the <html:a
                                        href="qbytearray.html#size">size</html:a>() of the byte
                                    array is more than <html:i>width</html:i>, then the returned
                                    byte array is a copy of this byte array.</html:p>
                                <html:p>If <html:i>truncate</html:i> is true and the <html:a
                                        href="qbytearray.html#size">size</html:a>() of the byte
                                    array is more than <html:i>width</html:i>, then any bytes in a
                                    copy of the byte array after position <html:i>width</html:i> are
                                    removed, and the copy is returned.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> x(<html:span class="string"
                                        >"apple"</html:span>); <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> y <html:span
                                        class="operator">=</html:span> x<html:span class="operator"
                                        >.</html:span>leftJustified(<html:span class="number"
                                        >8</html:span><html:span class="operator">,</html:span>
                                    <html:span class="char">'.'</html:span>); <html:span
                                        class="comment">// y == "apple..."</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#rightJustified"
                                        >rightJustified</html:a>().</html:p>
                                <!-- @@@leftJustified -->
                                <!-- $$$length[overload1]$$$length -->
                                <html:h3 class="fn" id="length"><html:a name="length"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name">length</html:span>()
                                    const</html:h3>
                                <html:p>Same as <html:a href="qbytearray.html#size"
                                    >size</html:a>().</html:p>
                                <!-- @@@length -->
                                <!-- $$$mid[overload1]$$$midintint -->
                                <html:h3 class="fn" id="mid"><html:a name="mid"></html:a><html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">mid</html:span>(<html:span class="type"
                                        >int</html:span><html:i> pos</html:i>, <html:span
                                        class="type">int</html:span><html:i> len</html:i> = -1)
                                    const</html:h3>
                                <html:p>Returns a byte array containing <html:i>len</html:i> bytes
                                    from this byte array, starting at position
                                    <html:i>pos</html:i>.</html:p>
                                <html:p>If <html:i>len</html:i> is -1 (the default), or
                                        <html:i>pos</html:i> + <html:i>len</html:i> &gt;= <html:a
                                        href="qbytearray.html#size">size</html:a>(), returns a byte
                                    array containing all bytes starting at position
                                        <html:i>pos</html:i> until the end of the byte
                                    array.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> x(<html:span class="string"
                                        >"Five pineapples"</html:span>); <html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> y <html:span
                                        class="operator">=</html:span> x<html:span class="operator"
                                        >.</html:span>mid(<html:span class="number"
                                        >5</html:span><html:span class="operator">,</html:span>
                                    <html:span class="number">4</html:span>); <html:span
                                        class="comment">// y == "pine"</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> z <html:span
                                        class="operator">=</html:span> x<html:span class="operator"
                                        >.</html:span>mid(<html:span class="number">5</html:span>);
                                        <html:span class="comment">// z ==
                                    "pineapples"</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#left">left</html:a>() and <html:a
                                        href="qbytearray.html#right">right</html:a>().</html:p>
                                <!-- @@@mid -->
                                <!-- $$$number[overload1]$$$numberintint -->
                                <html:h3 class="fn" id="number"><html:a name="number"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">number</html:span>(<html:span class="type"
                                        >int</html:span><html:i> n</html:i>, <html:span class="type"
                                        >int</html:span><html:i> base</html:i> = 10)</html:h3>
                                <html:p>Returns a byte array containing the string equivalent of the
                                    number <html:i>n</html:i> to base <html:i>base</html:i> (10 by
                                    default). The <html:i>base</html:i> can be any value between 2
                                    and 36.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type">int</html:span> n
                                        <html:span class="operator">=</html:span>
                                    <html:span class="number">63</html:span>; <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span><html:span
                                        class="operator">::</html:span>number(n); <html:span
                                        class="comment">// returns "63"</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>number(n<html:span class="operator"
                                        >,</html:span>
                                    <html:span class="number">16</html:span>); <html:span
                                        class="comment">// returns "3f"</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>number(n<html:span class="operator"
                                        >,</html:span>
                                    <html:span class="number">16</html:span>)<html:span
                                        class="operator">.</html:span>toUpper(); <html:span
                                        class="comment">// returns "3F"</html:span></html:pre>
                                <html:p><html:b>Note: </html:b>The format of the number is not
                                    localized; the default C locale is used irrespective of the
                                    user's locale.</html:p><html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#setNum">setNum</html:a>() and <html:a
                                        href="qbytearray.html#toInt">toInt</html:a>().</html:p>
                                <!-- @@@number -->
                                <!-- $$$number$$$numberuintint -->
                                <html:h3 class="fn" id="number-2"><html:a name="number-2"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">number</html:span>(<html:span class="type"
                                            ><html:a href="qtglobal.html#uint-typedef"
                                        >uint</html:a></html:span><html:i> n</html:i>, <html:span
                                        class="type">int</html:span><html:i> base</html:i> =
                                    10)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toUInt">toUInt</html:a>().</html:p>
                                <!-- @@@number -->
                                <!-- $$$number$$$numberqlonglongint -->
                                <html:h3 class="fn" id="number-3"><html:a name="number-3"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">number</html:span>(<html:span class="type"
                                            ><html:a href="qtglobal.html#qlonglong-typedef"
                                            >qlonglong</html:a></html:span><html:i> n</html:i>,
                                        <html:span class="type">int</html:span><html:i>
                                        base</html:i> = 10)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toLongLong"
                                    >toLongLong</html:a>().</html:p>
                                <!-- @@@number -->
                                <!-- $$$number$$$numberqulonglongint -->
                                <html:h3 class="fn" id="number-4"><html:a name="number-4"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">number</html:span>(<html:span class="type"
                                            ><html:a href="qtglobal.html#qulonglong-typedef"
                                            >qulonglong</html:a></html:span><html:i> n</html:i>,
                                        <html:span class="type">int</html:span><html:i>
                                        base</html:i> = 10)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toULongLong"
                                    >toULongLong</html:a>().</html:p>
                                <!-- @@@number -->
                                <!-- $$$number$$$numberdoublecharint -->
                                <html:h3 class="fn" id="number-5"><html:a name="number-5"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">number</html:span>(<html:span class="type"
                                        >double</html:span><html:i> n</html:i>, <html:span
                                        class="type">char</html:span><html:i> f</html:i> = 'g',
                                        <html:span class="type">int</html:span><html:i>
                                        prec</html:i> = 6)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a byte array that contains the printed value of
                                        <html:i>n</html:i>, formatted in format <html:i>f</html:i>
                                    with precision <html:i>prec</html:i>.</html:p>
                                <html:p>Argument <html:i>n</html:i> is formatted according to the
                                        <html:i>f</html:i> format specified, which is
                                        <html:code>g</html:code> by default, and can be any of the
                                    following:</html:p>
                                <html:div class="table"><html:table class="generic">
                                        <html:thead>
                                            <html:tr class="qt-style">
                                                <html:th>Format</html:th>
                                                <html:th>Meaning</html:th>
                                            </html:tr>
                                        </html:thead>
                                        <html:tbody>
                                            <html:tr class="odd" valign="top">
                                                <html:td><html:code>e</html:code></html:td>
                                                <html:td>format as [-]9.9e[+|-]999</html:td>
                                            </html:tr>
                                            <html:tr class="even" valign="top">
                                                <html:td><html:code>E</html:code></html:td>
                                                <html:td>format as [-]9.9E[+|-]999</html:td>
                                            </html:tr>
                                            <html:tr class="odd" valign="top">
                                                <html:td><html:code>f</html:code></html:td>
                                                <html:td>format as [-]9.9</html:td>
                                            </html:tr>
                                            <html:tr class="even" valign="top">
                                                <html:td><html:code>g</html:code></html:td>
                                                <html:td>use <html:code>e</html:code> or
                                                  <html:code>f</html:code> format, whichever is the
                                                  most concise</html:td>
                                            </html:tr>
                                            <html:tr class="odd" valign="top">
                                                <html:td><html:code>G</html:code></html:td>
                                                <html:td>use <html:code>E</html:code> or
                                                  <html:code>f</html:code> format, whichever is the
                                                  most concise</html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table></html:div>
                                <html:p>With 'e', 'E', and 'f', <html:i>prec</html:i> is the number
                                    of digits after the decimal point. With 'g' and 'G',
                                        <html:i>prec</html:i> is the maximum number of significant
                                    digits (trailing zeroes are omitted).</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba <html:span
                                        class="operator">=</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>number(<html:span class="number"
                                        >12.3456</html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="char">'E'</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">3</html:span>); <html:span
                                        class="comment">// ba == 1.235E+01</html:span></html:pre>
                                <html:p><html:b>Note: </html:b>The format of the number is not
                                    localized; the default C locale is used irrespective of the
                                    user's locale.</html:p><html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toDouble"
                                    >toDouble</html:a>().</html:p>
                                <!-- @@@number -->
                                <!-- $$$prepend[overload1]$$$prependconstQByteArray& -->
                                <html:h3 class="fn" id="prepend"><html:a name="prepend"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >prepend</html:span>(const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    ba</html:i>)</html:h3>
                                <html:p>Prepends the byte array <html:i>ba</html:i> to this byte
                                    array and returns a reference to this byte array.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> x(<html:span class="string"
                                        >"ship"</html:span>); <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> y(<html:span class="string"
                                        >"air"</html:span>); x<html:span class="operator"
                                        >.</html:span>prepend(y); <html:span class="comment">// x ==
                                        "airship"</html:span></html:pre>
                                <html:p>This is the same as insert(0, <html:i>ba</html:i>).</html:p>
                                <html:p>Note: <html:a href="qbytearray.html">QByteArray</html:a> is
                                    an <html:a href="implicit-sharing.html#implicitly-shared"
                                        >implicitly shared</html:a> class. Consequently, if
                                        <html:i>this</html:i> is an empty <html:a
                                        href="qbytearray.html">QByteArray</html:a>, then
                                        <html:i>this</html:i> will just share the data held in
                                        <html:i>ba</html:i>. In this case, no copying of data is
                                    done, taking <html:a href="containers.html#constant-time"
                                        >constant time</html:a>. If a shared instance is modified,
                                    it will be copied (copy-on-write), taking <html:a
                                        href="containers.html#linear-time">linear
                                    time</html:a>.</html:p>
                                <html:p>If <html:i>this</html:i> is not an empty <html:a
                                        href="qbytearray.html">QByteArray</html:a>, a deep copy of
                                    the data is performed, taking <html:a
                                        href="containers.html#linear-time">linear
                                    time</html:a>.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#append">append</html:a>() and <html:a
                                        href="qbytearray.html#insert">insert</html:a>().</html:p>
                                <!-- @@@prepend -->
                                <!-- $$$prepend$$$prependconstchar* -->
                                <html:h3 class="fn" id="prepend-2"><html:a name="prepend-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >prepend</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> str</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Prepends the string <html:i>str</html:i> to this byte
                                    array.</html:p>
                                <!-- @@@prepend -->
                                <!-- $$$prepend$$$prependconstchar*int -->
                                <html:h3 class="fn" id="prepend-3"><html:a name="prepend-3"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >prepend</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> str</html:i>, <html:span
                                        class="type">int</html:span><html:i> len</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Prepends <html:i>len</html:i> bytes of the string
                                        <html:i>str</html:i> to this byte array.</html:p>
                                <html:p>This function was introduced in Qt 4.6.</html:p>
                                <!-- @@@prepend -->
                                <!-- $$$prepend$$$prependchar -->
                                <html:h3 class="fn" id="prepend-4"><html:a name="prepend-4"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >prepend</html:span>(<html:span class="type"
                                        >char</html:span><html:i> ch</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Prepends the character <html:i>ch</html:i> to this byte
                                    array.</html:p>
                                <!-- @@@prepend -->
                                <!-- $$$push_back[overload1]$$$push_backconstQByteArray& -->
                                <html:h3 class="fn" id="push_back"><html:a name="push_back"
                                        ></html:a><html:span class="type">void</html:span>
                                        QByteArray::<html:span class="name"
                                    >push_back</html:span>(const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                        other</html:i>)</html:h3>
                                <html:p>This function is provided for STL compatibility. It is
                                    equivalent to append(<html:i>other</html:i>).</html:p>
                                <!-- @@@push_back -->
                                <!-- $$$push_back$$$push_backconstchar* -->
                                <html:h3 class="fn" id="push_back-2"><html:a name="push_back-2"
                                        ></html:a><html:span class="type">void</html:span>
                                        QByteArray::<html:span class="name"
                                    >push_back</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> str</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Same as append(<html:i>str</html:i>).</html:p>
                                <!-- @@@push_back -->
                                <!-- $$$push_back$$$push_backchar -->
                                <html:h3 class="fn" id="push_back-3"><html:a name="push_back-3"
                                        ></html:a><html:span class="type">void</html:span>
                                        QByteArray::<html:span class="name"
                                        >push_back</html:span>(<html:span class="type"
                                        >char</html:span><html:i> ch</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Same as append(<html:i>ch</html:i>).</html:p>
                                <!-- @@@push_back -->
                                <!-- $$$push_front[overload1]$$$push_frontconstQByteArray& -->
                                <html:h3 class="fn" id="push_front"><html:a name="push_front"
                                        ></html:a><html:span class="type">void</html:span>
                                        QByteArray::<html:span class="name"
                                    >push_front</html:span>(const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                        other</html:i>)</html:h3>
                                <html:p>This function is provided for STL compatibility. It is
                                    equivalent to prepend(<html:i>other</html:i>).</html:p>
                                <!-- @@@push_front -->
                                <!-- $$$push_front$$$push_frontconstchar* -->
                                <html:h3 class="fn" id="push_front-2"><html:a name="push_front-2"
                                        ></html:a><html:span class="type">void</html:span>
                                        QByteArray::<html:span class="name"
                                    >push_front</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> str</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Same as prepend(<html:i>str</html:i>).</html:p>
                                <!-- @@@push_front -->
                                <!-- $$$push_front$$$push_frontchar -->
                                <html:h3 class="fn" id="push_front-3"><html:a name="push_front-3"
                                        ></html:a><html:span class="type">void</html:span>
                                        QByteArray::<html:span class="name"
                                        >push_front</html:span>(<html:span class="type"
                                        >char</html:span><html:i> ch</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Same as prepend(<html:i>ch</html:i>).</html:p>
                                <!-- @@@push_front -->
                                <!-- $$$remove[overload1]$$$removeintint -->
                                <html:h3 class="fn" id="remove"><html:a name="remove"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >remove</html:span>(<html:span class="type"
                                        >int</html:span><html:i> pos</html:i>, <html:span
                                        class="type">int</html:span><html:i> len</html:i>)</html:h3>
                                <html:p>Removes <html:i>len</html:i> bytes from the array, starting
                                    at index position <html:i>pos</html:i>, and returns a reference
                                    to the array.</html:p>
                                <html:p>If <html:i>pos</html:i> is out of range, nothing happens. If
                                        <html:i>pos</html:i> is valid, but <html:i>pos</html:i> +
                                        <html:i>len</html:i> is larger than the size of the array,
                                    the array is truncated at position
                                    <html:i>pos</html:i>.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba(<html:span
                                        class="string">"Montreal"</html:span>); ba<html:span
                                        class="operator">.</html:span>remove(<html:span
                                        class="number">1</html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="number">4</html:span>); <html:span
                                        class="comment">// ba == "Meal"</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#insert">insert</html:a>() and <html:a
                                        href="qbytearray.html#replace">replace</html:a>().</html:p>
                                <!-- @@@remove -->
                                <!-- $$$repeated[overload1]$$$repeatedint -->
                                <html:h3 class="fn" id="repeated"><html:a name="repeated"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">repeated</html:span>(<html:span class="type"
                                        >int</html:span><html:i> times</html:i>) const</html:h3>
                                <html:p>Returns a copy of this byte array repeated the specified
                                    number of <html:i>times</html:i>.</html:p>
                                <html:p>If <html:i>times</html:i> is less than 1, an empty byte
                                    array is returned.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba(<html:span
                                        class="string">"ab"</html:span>); ba<html:span
                                        class="operator">.</html:span>repeated(<html:span
                                        class="number">4</html:span>); <html:span class="comment">//
                                        returns "abababab"</html:span></html:pre>
                                <html:p>This function was introduced in Qt 4.5.</html:p>
                                <!-- @@@repeated -->
                                <!-- $$$replace[overload1]$$$replaceintintconstQByteArray& -->
                                <html:h3 class="fn" id="replace"><html:a name="replace"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >replace</html:span>(<html:span class="type"
                                        >int</html:span><html:i> pos</html:i>, <html:span
                                        class="type">int</html:span><html:i> len</html:i>, const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                        after</html:i>)</html:h3>
                                <html:p>Replaces <html:i>len</html:i> bytes from index position
                                        <html:i>pos</html:i> with the byte array
                                        <html:i>after</html:i>, and returns a reference to this byte
                                    array.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> x(<html:span class="string"
                                        >"Say yes!"</html:span>); <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> y(<html:span class="string"
                                        >"no"</html:span>); x<html:span class="operator"
                                        >.</html:span>replace(<html:span class="number"
                                        >4</html:span><html:span class="operator">,</html:span>
                                    <html:span class="number">3</html:span><html:span
                                        class="operator">,</html:span> y); <html:span
                                        class="comment">// x == "Say no!"</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#insert">insert</html:a>() and <html:a
                                        href="qbytearray.html#remove">remove</html:a>().</html:p>
                                <!-- @@@replace -->
                                <!-- $$$replace$$$replaceintintconstchar* -->
                                <html:h3 class="fn" id="replace-2"><html:a name="replace-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >replace</html:span>(<html:span class="type"
                                        >int</html:span><html:i> pos</html:i>, <html:span
                                        class="type">int</html:span><html:i> len</html:i>, const
                                        <html:span class="type">char</html:span> *<html:i>
                                        after</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Replaces <html:i>len</html:i> bytes from index position
                                        <html:i>pos</html:i> with the zero terminated string
                                        <html:i>after</html:i>.</html:p>
                                <html:p>Notice: this can change the length of the byte
                                    array.</html:p>
                                <!-- @@@replace -->
                                <!-- $$$replace$$$replaceintintconstchar*int -->
                                <html:h3 class="fn" id="replace-3"><html:a name="replace-3"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >replace</html:span>(<html:span class="type"
                                        >int</html:span><html:i> pos</html:i>, <html:span
                                        class="type">int</html:span><html:i> len</html:i>, const
                                        <html:span class="type">char</html:span> *<html:i>
                                        after</html:i>, <html:span class="type"
                                        >int</html:span><html:i> alen</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Replaces <html:i>len</html:i> bytes from index position
                                        <html:i>pos</html:i> with <html:i>alen</html:i> bytes from
                                    the string <html:i>after</html:i>. <html:i>after</html:i> is
                                    allowed to have '\0' characters.</html:p>
                                <html:p>This function was introduced in Qt 4.7.</html:p>
                                <!-- @@@replace -->
                                <!-- $$$replace$$$replaceconstQByteArray&constQByteArray& -->
                                <html:h3 class="fn" id="replace-4"><html:a name="replace-4"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >replace</html:span>(const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                        before</html:i>, const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                        after</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Replaces every occurrence of the byte array
                                        <html:i>before</html:i> with the byte array
                                        <html:i>after</html:i>.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba(<html:span
                                        class="string">"colour behaviour flavour
                                        neighbour"</html:span>); ba<html:span class="operator"
                                        >.</html:span>replace(<html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>(<html:span class="string"
                                        >"ou"</html:span>)<html:span class="operator">,</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>(<html:span class="string"
                                        >"o"</html:span>)); <html:span class="comment">// ba ==
                                        "color behavior flavor neighbor"</html:span></html:pre>
                                <!-- @@@replace -->
                                <!-- $$$replace$$$replaceconstchar*constQByteArray& -->
                                <html:h3 class="fn" id="replace-5"><html:a name="replace-5"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >replace</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> before</html:i>, const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                        after</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Replaces every occurrence of the string
                                        <html:i>before</html:i> with the byte array
                                        <html:i>after</html:i>.</html:p>
                                <!-- @@@replace -->
                                <!-- $$$replace$$$replaceconstchar*intconstchar*int -->
                                <html:h3 class="fn" id="replace-6"><html:a name="replace-6"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >replace</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> before</html:i>, <html:span
                                        class="type">int</html:span><html:i> bsize</html:i>, const
                                        <html:span class="type">char</html:span> *<html:i>
                                        after</html:i>, <html:span class="type"
                                        >int</html:span><html:i> asize</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Replaces every occurrence of the string
                                        <html:i>before</html:i> with the string
                                        <html:i>after</html:i>. Since the sizes of the strings are
                                    given by <html:i>bsize</html:i> and <html:i>asize</html:i>, they
                                    may contain zero characters and do not need to be
                                    zero-terminated.</html:p>
                                <!-- @@@replace -->
                                <!-- $$$replace$$$replaceconstQByteArray&constchar* -->
                                <html:h3 class="fn" id="replace-7"><html:a name="replace-7"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >replace</html:span>(const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                        before</html:i>, const <html:span class="type"
                                        >char</html:span> *<html:i> after</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Replaces every occurrence of the byte array
                                        <html:i>before</html:i> with the string
                                        <html:i>after</html:i>.</html:p>
                                <!-- @@@replace -->
                                <!-- $$$replace$$$replaceconstQString&constQByteArray& -->
                                <html:h3 class="fn" id="replace-8"><html:a name="replace-8"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >replace</html:span>(const <html:span class="type"><html:a
                                            href="qstring.html">QString</html:a></html:span>
                                        &amp;<html:i> before</html:i>, const <html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        after</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Replaces every occurrence of the string
                                        <html:i>before</html:i> with the byte array
                                        <html:i>after</html:i>. The Unicode data is converted into
                                    8-bit characters using <html:a href="qstring.html#toUtf8"
                                        >QString::toUtf8</html:a>().</html:p>
                                <html:p>You can disable this function by defining
                                        <html:code>QT_NO_CAST_TO_ASCII</html:code> when you compile
                                    your applications. You then need to call <html:a
                                        href="qstring.html#toUtf8">QString::toUtf8</html:a>() (or
                                        <html:a href="qstring.html#toLatin1"
                                        >QString::toLatin1</html:a>() or <html:a
                                        href="qstring.html#toLocal8Bit"
                                        >QString::toLocal8Bit</html:a>()) explicitly if you want to
                                    convert the data to <html:code>const char
                                    *</html:code>.</html:p>
                                <!-- @@@replace -->
                                <!-- $$$replace$$$replaceconstQString&constchar* -->
                                <html:h3 class="fn" id="replace-9"><html:a name="replace-9"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >replace</html:span>(const <html:span class="type"><html:a
                                            href="qstring.html">QString</html:a></html:span>
                                        &amp;<html:i> before</html:i>, const <html:span class="type"
                                        >char</html:span> *<html:i> after</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Replaces every occurrence of the string
                                        <html:i>before</html:i> with the string
                                        <html:i>after</html:i>.</html:p>
                                <!-- @@@replace -->
                                <!-- $$$replace$$$replaceconstchar*constchar* -->
                                <html:h3 class="fn" id="replace-10"><html:a name="replace-10"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >replace</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> before</html:i>, const
                                        <html:span class="type">char</html:span> *<html:i>
                                        after</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Replaces every occurrence of the string
                                        <html:i>before</html:i> with the string
                                        <html:i>after</html:i>.</html:p>
                                <!-- @@@replace -->
                                <!-- $$$replace$$$replacecharconstQByteArray& -->
                                <html:h3 class="fn" id="replace-11"><html:a name="replace-11"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >replace</html:span>(<html:span class="type"
                                        >char</html:span><html:i> before</html:i>, const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        after</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Replaces every occurrence of the character
                                        <html:i>before</html:i> with the byte array
                                        <html:i>after</html:i>.</html:p>
                                <!-- @@@replace -->
                                <!-- $$$replace$$$replacecharconstQString& -->
                                <html:h3 class="fn" id="replace-12"><html:a name="replace-12"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >replace</html:span>(<html:span class="type"
                                        >char</html:span><html:i> before</html:i>, const <html:span
                                        class="type"><html:a href="qstring.html"
                                        >QString</html:a></html:span> &amp;<html:i>
                                    after</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Replaces every occurrence of the character
                                        <html:i>before</html:i> with the string
                                        <html:i>after</html:i>. The Unicode data is converted into
                                    8-bit characters using <html:a href="qstring.html#toUtf8"
                                        >QString::toUtf8</html:a>().</html:p>
                                <html:p>You can disable this function by defining
                                        <html:code>QT_NO_CAST_TO_ASCII</html:code> when you compile
                                    your applications. You then need to call <html:a
                                        href="qstring.html#toUtf8">QString::toUtf8</html:a>() (or
                                        <html:a href="qstring.html#toLatin1"
                                        >QString::toLatin1</html:a>() or <html:a
                                        href="qstring.html#toLocal8Bit"
                                        >QString::toLocal8Bit</html:a>()) explicitly if you want to
                                    convert the data to <html:code>const char
                                    *</html:code>.</html:p>
                                <!-- @@@replace -->
                                <!-- $$$replace$$$replacecharconstchar* -->
                                <html:h3 class="fn" id="replace-13"><html:a name="replace-13"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >replace</html:span>(<html:span class="type"
                                        >char</html:span><html:i> before</html:i>, const <html:span
                                        class="type">char</html:span> *<html:i>
                                    after</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Replaces every occurrence of the character
                                        <html:i>before</html:i> with the string
                                        <html:i>after</html:i>.</html:p>
                                <!-- @@@replace -->
                                <!-- $$$replace$$$replacecharchar -->
                                <html:h3 class="fn" id="replace-14"><html:a name="replace-14"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >replace</html:span>(<html:span class="type"
                                        >char</html:span><html:i> before</html:i>, <html:span
                                        class="type">char</html:span><html:i>
                                    after</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Replaces every occurrence of the character
                                        <html:i>before</html:i> with the character
                                        <html:i>after</html:i>.</html:p>
                                <!-- @@@replace -->
                                <!-- $$$reserve[overload1]$$$reserveint -->
                                <html:h3 class="fn" id="reserve"><html:a name="reserve"
                                        ></html:a><html:span class="type">void</html:span>
                                        QByteArray::<html:span class="name"
                                        >reserve</html:span>(<html:span class="type"
                                        >int</html:span><html:i> size</html:i>)</html:h3>
                                <html:p>Attempts to allocate memory for at least
                                        <html:i>size</html:i> bytes. If you know in advance how
                                    large the byte array will be, you can call this function, and if
                                    you call <html:a href="qbytearray.html#resize">resize</html:a>()
                                    often you are likely to get better performance. If
                                        <html:i>size</html:i> is an underestimate, the worst that
                                    will happen is that the <html:a href="qbytearray.html"
                                        >QByteArray</html:a> will be a bit slower.</html:p>
                                <html:p>The sole purpose of this function is to provide a means of
                                    fine tuning <html:a href="qbytearray.html">QByteArray</html:a>'s
                                    memory usage. In general, you will rarely ever need to call this
                                    function. If you want to change the size of the byte array, call
                                        <html:a href="qbytearray.html#resize"
                                    >resize</html:a>().</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#squeeze">squeeze</html:a>() and
                                        <html:a href="qbytearray.html#capacity"
                                    >capacity</html:a>().</html:p>
                                <!-- @@@reserve -->
                                <!-- $$$resize[overload1]$$$resizeint -->
                                <html:h3 class="fn" id="resize"><html:a name="resize"
                                        ></html:a><html:span class="type">void</html:span>
                                        QByteArray::<html:span class="name"
                                        >resize</html:span>(<html:span class="type"
                                        >int</html:span><html:i> size</html:i>)</html:h3>
                                <html:p>Sets the size of the byte array to <html:i>size</html:i>
                                    bytes.</html:p>
                                <html:p>If <html:i>size</html:i> is greater than the current size,
                                    the byte array is extended to make it <html:i>size</html:i>
                                    bytes with the extra bytes added to the end. The new bytes are
                                    uninitialized.</html:p>
                                <html:p>If <html:i>size</html:i> is less than the current size,
                                    bytes are removed from the end.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#size">size</html:a>() and <html:a
                                        href="qbytearray.html#truncate"
                                    >truncate</html:a>().</html:p>
                                <!-- @@@resize -->
                                <!-- $$$right[overload1]$$$rightint -->
                                <html:h3 class="fn" id="right"><html:a name="right"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">right</html:span>(<html:span class="type"
                                        >int</html:span><html:i> len</html:i>) const</html:h3>
                                <html:p>Returns a byte array that contains the rightmost
                                        <html:i>len</html:i> bytes of this byte array.</html:p>
                                <html:p>The entire byte array is returned if <html:i>len</html:i> is
                                    greater than <html:a href="qbytearray.html#size"
                                    >size</html:a>().</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> x(<html:span class="string"
                                        >"Pineapple"</html:span>); <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> y <html:span
                                        class="operator">=</html:span> x<html:span class="operator"
                                        >.</html:span>right(<html:span class="number"
                                    >5</html:span>); <html:span class="comment">// y ==
                                        "apple"</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#endsWith">endsWith</html:a>(), <html:a
                                        href="qbytearray.html#left">left</html:a>(), and <html:a
                                        href="qbytearray.html#mid">mid</html:a>().</html:p>
                                <!-- @@@right -->
                                <!-- $$$rightJustified[overload1]$$$rightJustifiedintcharbool -->
                                <html:h3 class="fn" id="rightJustified"><html:a
                                        name="rightJustified"></html:a><html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">rightJustified</html:span>(<html:span
                                        class="type">int</html:span><html:i> width</html:i>,
                                        <html:span class="type">char</html:span><html:i>
                                        fill</html:i> = ' ', <html:span class="type"
                                        >bool</html:span><html:i> truncate</html:i> = false)
                                    const</html:h3>
                                <html:p>Returns a byte array of size <html:i>width</html:i> that
                                    contains the <html:i>fill</html:i> character followed by this
                                    byte array.</html:p>
                                <html:p>If <html:i>truncate</html:i> is false and the size of the
                                    byte array is more than <html:i>width</html:i>, then the
                                    returned byte array is a copy of this byte array.</html:p>
                                <html:p>If <html:i>truncate</html:i> is true and the size of the
                                    byte array is more than <html:i>width</html:i>, then the
                                    resulting byte array is truncated at position
                                        <html:i>width</html:i>.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> x(<html:span class="string"
                                        >"apple"</html:span>); <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> y <html:span
                                        class="operator">=</html:span> x<html:span class="operator"
                                        >.</html:span>rightJustified(<html:span class="number"
                                        >8</html:span><html:span class="operator">,</html:span>
                                    <html:span class="char">'.'</html:span>); <html:span
                                        class="comment">// y == "...apple"</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#leftJustified"
                                    >leftJustified</html:a>().</html:p>
                                <!-- @@@rightJustified -->
                                <!-- $$$setNum[overload1]$$$setNumintint -->
                                <html:h3 class="fn" id="setNum"><html:a name="setNum"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >setNum</html:span>(<html:span class="type"
                                        >int</html:span><html:i> n</html:i>, <html:span class="type"
                                        >int</html:span><html:i> base</html:i> = 10)</html:h3>
                                <html:p>Sets the byte array to the printed value of
                                        <html:i>n</html:i> in base <html:i>base</html:i> (10 by
                                    default) and returns a reference to the byte array. The
                                        <html:i>base</html:i> can be any value between 2 and 36. For
                                    bases other than 10, n is treated as an unsigned
                                    integer.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba; <html:span class="type"
                                        >int</html:span> n <html:span class="operator">=</html:span>
                                    <html:span class="number">63</html:span>; ba<html:span
                                        class="operator">.</html:span>setNum(n); <html:span
                                        class="comment">// ba == "63"</html:span> ba<html:span
                                        class="operator">.</html:span>setNum(n<html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">16</html:span>); <html:span
                                        class="comment">// ba == "3f"</html:span></html:pre>
                                <html:p><html:b>Note: </html:b>The format of the number is not
                                    localized; the default C locale is used irrespective of the
                                    user's locale.</html:p><html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#number">number</html:a>() and <html:a
                                        href="qbytearray.html#toInt">toInt</html:a>().</html:p>
                                <!-- @@@setNum -->
                                <!-- $$$setNum$$$setNumuintint -->
                                <html:h3 class="fn" id="setNum-2"><html:a name="setNum-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >setNum</html:span>(<html:span class="type"><html:a
                                            href="qtglobal.html#uint-typedef"
                                        >uint</html:a></html:span><html:i> n</html:i>, <html:span
                                        class="type">int</html:span><html:i> base</html:i> =
                                    10)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toUInt">toUInt</html:a>().</html:p>
                                <!-- @@@setNum -->
                                <!-- $$$setNum$$$setNumshortint -->
                                <html:h3 class="fn" id="setNum-3"><html:a name="setNum-3"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >setNum</html:span>(<html:span class="type"
                                        >short</html:span><html:i> n</html:i>, <html:span
                                        class="type">int</html:span><html:i> base</html:i> =
                                    10)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toShort">toShort</html:a>().</html:p>
                                <!-- @@@setNum -->
                                <!-- $$$setNum$$$setNumushortint -->
                                <html:h3 class="fn" id="setNum-4"><html:a name="setNum-4"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >setNum</html:span>(<html:span class="type"><html:a
                                            href="qtglobal.html#ushort-typedef"
                                        >ushort</html:a></html:span><html:i> n</html:i>, <html:span
                                        class="type">int</html:span><html:i> base</html:i> =
                                    10)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toUShort"
                                    >toUShort</html:a>().</html:p>
                                <!-- @@@setNum -->
                                <!-- $$$setNum$$$setNumqlonglongint -->
                                <html:h3 class="fn" id="setNum-5"><html:a name="setNum-5"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >setNum</html:span>(<html:span class="type"><html:a
                                            href="qtglobal.html#qlonglong-typedef"
                                            >qlonglong</html:a></html:span><html:i> n</html:i>,
                                        <html:span class="type">int</html:span><html:i>
                                        base</html:i> = 10)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toLongLong"
                                    >toLongLong</html:a>().</html:p>
                                <!-- @@@setNum -->
                                <!-- $$$setNum$$$setNumqulonglongint -->
                                <html:h3 class="fn" id="setNum-6"><html:a name="setNum-6"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >setNum</html:span>(<html:span class="type"><html:a
                                            href="qtglobal.html#qulonglong-typedef"
                                            >qulonglong</html:a></html:span><html:i> n</html:i>,
                                        <html:span class="type">int</html:span><html:i>
                                        base</html:i> = 10)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toULongLong"
                                    >toULongLong</html:a>().</html:p>
                                <!-- @@@setNum -->
                                <!-- $$$setNum$$$setNumdoublecharint -->
                                <html:h3 class="fn" id="setNum-7"><html:a name="setNum-7"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >setNum</html:span>(<html:span class="type"
                                        >double</html:span><html:i> n</html:i>, <html:span
                                        class="type">char</html:span><html:i> f</html:i> = 'g',
                                        <html:span class="type">int</html:span><html:i>
                                        prec</html:i> = 6)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Sets the byte array to the printed value of
                                        <html:i>n</html:i>, formatted in format <html:i>f</html:i>
                                    with precision <html:i>prec</html:i>, and returns a reference to
                                    the byte array.</html:p>
                                <html:p>The format <html:i>f</html:i> can be any of the
                                    following:</html:p>
                                <html:div class="table"><html:table class="generic">
                                        <html:thead>
                                            <html:tr class="qt-style">
                                                <html:th>Format</html:th>
                                                <html:th>Meaning</html:th>
                                            </html:tr>
                                        </html:thead>
                                        <html:tbody>
                                            <html:tr class="odd" valign="top">
                                                <html:td><html:code>e</html:code></html:td>
                                                <html:td>format as [-]9.9e[+|-]999</html:td>
                                            </html:tr>
                                            <html:tr class="even" valign="top">
                                                <html:td><html:code>E</html:code></html:td>
                                                <html:td>format as [-]9.9E[+|-]999</html:td>
                                            </html:tr>
                                            <html:tr class="odd" valign="top">
                                                <html:td><html:code>f</html:code></html:td>
                                                <html:td>format as [-]9.9</html:td>
                                            </html:tr>
                                            <html:tr class="even" valign="top">
                                                <html:td><html:code>g</html:code></html:td>
                                                <html:td>use <html:code>e</html:code> or
                                                  <html:code>f</html:code> format, whichever is the
                                                  most concise</html:td>
                                            </html:tr>
                                            <html:tr class="odd" valign="top">
                                                <html:td><html:code>G</html:code></html:td>
                                                <html:td>use <html:code>E</html:code> or
                                                  <html:code>f</html:code> format, whichever is the
                                                  most concise</html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table></html:div>
                                <html:p>With 'e', 'E', and 'f', <html:i>prec</html:i> is the number
                                    of digits after the decimal point. With 'g' and 'G',
                                        <html:i>prec</html:i> is the maximum number of significant
                                    digits (trailing zeroes are omitted).</html:p>
                                <html:p><html:b>Note: </html:b>The format of the number is not
                                    localized; the default C locale is used irrespective of the
                                    user's locale.</html:p><html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toDouble"
                                    >toDouble</html:a>().</html:p>
                                <!-- @@@setNum -->
                                <!-- $$$setNum$$$setNumfloatcharint -->
                                <html:h3 class="fn" id="setNum-8"><html:a name="setNum-8"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >setNum</html:span>(<html:span class="type"
                                        >float</html:span><html:i> n</html:i>, <html:span
                                        class="type">char</html:span><html:i> f</html:i> = 'g',
                                        <html:span class="type">int</html:span><html:i>
                                        prec</html:i> = 6)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Sets the byte array to the printed value of
                                        <html:i>n</html:i>, formatted in format <html:i>f</html:i>
                                    with precision <html:i>prec</html:i>, and returns a reference to
                                    the byte array.</html:p>
                                <html:p><html:b>Note: </html:b>The format of the number is not
                                    localized; the default C locale is used irrespective of the
                                    user's locale.</html:p><html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toFloat">toFloat</html:a>().</html:p>
                                <!-- @@@setNum -->
                                <!-- $$$setRawData[overload1]$$$setRawDataconstchar*uint -->
                                <html:h3 class="fn" id="setRawData"><html:a name="setRawData"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >setRawData</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> data</html:i>, <html:span
                                        class="type"><html:a href="qtglobal.html#uint-typedef"
                                            >uint</html:a></html:span><html:i>
                                    size</html:i>)</html:h3>
                                <html:p>Resets the <html:a href="qbytearray.html"
                                        >QByteArray</html:a> to use the first <html:i>size</html:i>
                                    bytes of the <html:i>data</html:i> array. The bytes are
                                        <html:i>not</html:i> copied. The <html:a
                                        href="qbytearray.html">QByteArray</html:a> will contain the
                                        <html:i>data</html:i> pointer. The caller guarantees that
                                        <html:i>data</html:i> will not be deleted or modified as
                                    long as this <html:a href="qbytearray.html">QByteArray</html:a>
                                    and any copies of it exist that have not been modified.</html:p>
                                <html:p>This function can be used instead of <html:a
                                        href="qbytearray.html#fromRawData">fromRawData</html:a>() to
                                    re-use existing <html:a href="qbytearray.html"
                                        >QByteArray</html:a> objects to save memory
                                    re-allocations.</html:p>
                                <html:p>This function was introduced in Qt 4.7.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#fromRawData">fromRawData</html:a>(),
                                        <html:a href="qbytearray.html#data">data</html:a>(), and
                                        <html:a href="qbytearray.html#constData"
                                    >constData</html:a>().</html:p>
                                <!-- @@@setRawData -->
                                <!-- $$$simplified[overload1]$$$simplified -->
                                <html:h3 class="fn" id="simplified"><html:a name="simplified"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">simplified</html:span>() const</html:h3>
                                <html:p>Returns a byte array that has whitespace removed from the
                                    start and the end, and which has each sequence of internal
                                    whitespace replaced with a single space.</html:p>
                                <html:p>Whitespace means any character for which the standard C++
                                        <html:code>isspace()</html:code> function returns
                                        <html:code>true</html:code> in the C locale. This includes
                                    the ASCII isspace() function returns <html:code>true</html:code>
                                    in the C locale. This includes the ASCII characters '\t', '\n',
                                    '\v', '\f', '\r', and ' '.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba(<html:span
                                        class="string">" lots\t of\nwhitespace\r\n "</html:span>);
                                    ba <html:span class="operator">=</html:span> ba<html:span
                                        class="operator">.</html:span>simplified(); <html:span
                                        class="comment">// ba == "lots of
                                    whitespace";</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#trimmed">trimmed</html:a>().</html:p>
                                <!-- @@@simplified -->
                                <!-- $$$size[overload1]$$$size -->
                                <html:h3 class="fn" id="size"><html:a name="size"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name">size</html:span>()
                                    const</html:h3>
                                <html:p>Returns the number of bytes in this byte array.</html:p>
                                <html:p>The last byte in the byte array is at position size() - 1.
                                    In addition, <html:a href="qbytearray.html">QByteArray</html:a>
                                    ensures that the byte at position size() is always '\0', so that
                                    you can use the return value of <html:a
                                        href="qbytearray.html#data">data</html:a>() and <html:a
                                        href="qbytearray.html#constData">constData</html:a>() as
                                    arguments to functions that expect '\0'-terminated strings. If
                                    the <html:a href="qbytearray.html">QByteArray</html:a> object
                                    was created from a <html:a href="qbytearray.html#fromRawData"
                                        >raw data</html:a> that didn't include the trailing
                                    null-termination character then <html:a href="qbytearray.html"
                                        >QByteArray</html:a> doesn't add it automaticall unless the
                                        <html:a href="implicit-sharing.html#deep-copy">deep
                                        copy</html:a> is created.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba(<html:span
                                        class="string">"Hello"</html:span>); <html:span class="type"
                                        >int</html:span> n <html:span class="operator">=</html:span>
                                        ba<html:span class="operator">.</html:span>size();
                                        <html:span class="comment">// n == 5</html:span>
                                        ba<html:span class="operator">.</html:span>data()<html:span
                                        class="operator">[</html:span><html:span class="number"
                                        >0</html:span><html:span class="operator">]</html:span>;
                                        <html:span class="comment">// returns 'H'</html:span>
                                        ba<html:span class="operator">.</html:span>data()<html:span
                                        class="operator">[</html:span><html:span class="number"
                                        >4</html:span><html:span class="operator">]</html:span>;
                                        <html:span class="comment">// returns 'o'</html:span>
                                        ba<html:span class="operator">.</html:span>data()<html:span
                                        class="operator">[</html:span><html:span class="number"
                                        >5</html:span><html:span class="operator">]</html:span>;
                                        <html:span class="comment">// returns
                                    '\0'</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#isEmpty">isEmpty</html:a>() and
                                        <html:a href="qbytearray.html#resize"
                                    >resize</html:a>().</html:p>
                                <!-- @@@size -->
                                <!-- $$$split[overload1]$$$splitchar -->
                                <html:h3 class="fn" id="split"><html:a name="split"
                                        ></html:a><html:span class="type"><html:a href="qlist.html"
                                            >QList</html:a></html:span>&lt;<html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span>&gt;
                                        QByteArray::<html:span class="name"
                                        >split</html:span>(<html:span class="type"
                                        >char</html:span><html:i> sep</html:i>) const</html:h3>
                                <html:p>Splits the byte array into subarrays wherever
                                        <html:i>sep</html:i> occurs, and returns the list of those
                                    arrays. If <html:i>sep</html:i> does not match anywhere in the
                                    byte array, split() returns a single-element list containing
                                    this byte array.</html:p>
                                <!-- @@@split -->
                                <!-- $$$squeeze[overload1]$$$squeeze -->
                                <html:h3 class="fn" id="squeeze"><html:a name="squeeze"
                                        ></html:a><html:span class="type">void</html:span>
                                        QByteArray::<html:span class="name"
                                    >squeeze</html:span>()</html:h3>
                                <html:p>Releases any memory not required to store the array's
                                    data.</html:p>
                                <html:p>The sole purpose of this function is to provide a means of
                                    fine tuning <html:a href="qbytearray.html">QByteArray</html:a>'s
                                    memory usage. In general, you will rarely ever need to call this
                                    function.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#reserve">reserve</html:a>() and
                                        <html:a href="qbytearray.html#capacity"
                                    >capacity</html:a>().</html:p>
                                <!-- @@@squeeze -->
                                <!-- $$$startsWith[overload1]$$$startsWithconstQByteArray& -->
                                <html:h3 class="fn" id="startsWith"><html:a name="startsWith"
                                        ></html:a><html:span class="type">bool</html:span>
                                        QByteArray::<html:span class="name"
                                    >startsWith</html:span>(const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i> ba</html:i>)
                                    const</html:h3>
                                <html:p>Returns <html:code>true</html:code> if this byte array
                                    starts with byte array <html:i>ba</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> url(<html:span
                                        class="string">"ftp://ftp.qt-project.org/"</html:span>);
                                        <html:span class="keyword">if</html:span> (url<html:span
                                        class="operator">.</html:span>startsWith(<html:span
                                        class="string">"ftp:"</html:span>)) <html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator"
                                    >.</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#endsWith">endsWith</html:a>() and
                                        <html:a href="qbytearray.html#left"
                                    >left</html:a>().</html:p>
                                <!-- @@@startsWith -->
                                <!-- $$$startsWith$$$startsWithconstchar* -->
                                <html:h3 class="fn" id="startsWith-2"><html:a name="startsWith-2"
                                        ></html:a><html:span class="type">bool</html:span>
                                        QByteArray::<html:span class="name"
                                    >startsWith</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> str</html:i>) const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if this byte array
                                    starts with string <html:i>str</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@startsWith -->
                                <!-- $$$startsWith$$$startsWithchar -->
                                <html:h3 class="fn" id="startsWith-3"><html:a name="startsWith-3"
                                        ></html:a><html:span class="type">bool</html:span>
                                        QByteArray::<html:span class="name"
                                        >startsWith</html:span>(<html:span class="type"
                                        >char</html:span><html:i> ch</html:i>) const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if this byte array
                                    starts with character <html:i>ch</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@startsWith -->
                                <!-- $$$swap[overload1]$$$swapQByteArray& -->
                                <html:h3 class="fn" id="swap"><html:a name="swap"
                                        ></html:a><html:span class="type">void</html:span>
                                        QByteArray::<html:span class="name"
                                        >swap</html:span>(<html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                        other</html:i>)</html:h3>
                                <html:p>Swaps byte array <html:i>other</html:i> with this byte
                                    array. This operation is very fast and never fails.</html:p>
                                <html:p>This function was introduced in Qt 4.8.</html:p>
                                <!-- @@@swap -->
                                <!-- $$$toBase64[overload1]$$$toBase64 -->
                                <html:h3 class="fn" id="toBase64"><html:a name="toBase64"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">toBase64</html:span>() const</html:h3>
                                <html:p>Returns a copy of the byte array, encoded as
                                    Base64.</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> text(<html:span
                                        class="string">"Qt is great!"</html:span>); text<html:span
                                        class="operator">.</html:span>toBase64(); <html:span
                                        class="comment">// returns
                                    "UXQgaXMgZ3JlYXQh"</html:span></html:pre>
                                <html:p>The algorithm used to encode Base64-encoded data is defined
                                    in <html:a href="http://www.ietf.org/rfc/rfc4648.txt">RFC
                                        4648</html:a>.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#fromBase64"
                                    >fromBase64</html:a>().</html:p>
                                <!-- @@@toBase64 -->
                                <!-- $$$toBase64$$$toBase64Base64Options -->
                                <html:h3 class="fn" id="toBase64-2"><html:a name="toBase64-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">toBase64</html:span>(<html:span class="type"
                                            ><html:a href="qbytearray.html#Base64Option-enum"
                                            >Base64Options</html:a></html:span><html:i>
                                        options</html:i>) const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a copy of the byte array, encoded using the options
                                        <html:i>options</html:i>.</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> text(<html:span
                                        class="string">"&lt;p&gt;Hello?&lt;/p&gt;"</html:span>);
                                        text<html:span class="operator"
                                        >.</html:span>toBase64(<html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>Base64Encoding <html:span class="operator"
                                        >|</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>OmitTrailingEquals); <html:span
                                        class="comment">// returns "PHA+SGVsbG8/PC9wPg"</html:span>
                                        text<html:span class="operator"
                                        >.</html:span>toBase64(<html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>Base64Encoding); <html:span class="comment"
                                        >// returns "PHA+SGVsbG8/PC9wPg=="</html:span>
                                        text<html:span class="operator"
                                        >.</html:span>toBase64(<html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>Base64UrlEncoding); <html:span
                                        class="comment">// returns
                                        "PHA-SGVsbG8_PC9wPg=="</html:span> text<html:span
                                        class="operator">.</html:span>toBase64(<html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span><html:span
                                        class="operator">::</html:span>Base64UrlEncoding <html:span
                                        class="operator">|</html:span>
                                    <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span><html:span class="operator"
                                        >::</html:span>OmitTrailingEquals); <html:span
                                        class="comment">// returns
                                    "PHA-SGVsbG8_PC9wPg"</html:span></html:pre>
                                <html:p>The algorithm used to encode Base64-encoded data is defined
                                    in <html:a href="http://www.ietf.org/rfc/rfc4648.txt">RFC
                                        4648</html:a>.</html:p>
                                <html:p>This function was introduced in Qt 5.2.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#fromBase64"
                                    >fromBase64</html:a>().</html:p>
                                <!-- @@@toBase64 -->
                                <!-- $$$toCFData[overload1]$$$toCFData -->
                                <html:h3 class="fn" id="toCFData"><html:a name="toCFData"
                                        ></html:a><html:span class="type">CFDataRef</html:span>
                                        QByteArray::<html:span class="name">toCFData</html:span>()
                                    const</html:h3>
                                <html:p>Creates a CFData from a <html:a href="qbytearray.html"
                                        >QByteArray</html:a>. The caller owns the CFData object and
                                    is responsible for releasing it.</html:p>
                                <html:p>This function was introduced in Qt 5.3.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toRawCFData">toRawCFData</html:a>(),
                                        <html:a href="qbytearray.html#fromCFData"
                                        >fromCFData</html:a>(), <html:a
                                        href="qbytearray.html#fromRawCFData"
                                    >fromRawCFData</html:a>(), and <html:a
                                        href="qbytearray.html#fromRawData"
                                    >fromRawData</html:a>().</html:p>
                                <!-- @@@toCFData -->
                                <!-- $$$toDouble[overload1]$$$toDoublebool* -->
                                <html:h3 class="fn" id="toDouble"><html:a name="toDouble"
                                        ></html:a><html:span class="type">double</html:span>
                                        QByteArray::<html:span class="name"
                                        >toDouble</html:span>(<html:span class="type"
                                        >bool</html:span> *<html:i> ok</html:i> = 0) const</html:h3>
                                <html:p>Returns the byte array converted to a
                                        <html:code>double</html:code> value.</html:p>
                                <html:p>Returns 0.0 if the conversion fails.</html:p>
                                <html:p>If <html:i>ok</html:i> is not 0: if a conversion error
                                    occurs, *<html:i>ok</html:i> is set to false; otherwise
                                        *<html:i>ok</html:i> is set to true.</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> string(<html:span
                                        class="string">"1234.56"</html:span>); <html:span
                                        class="type">double</html:span> a <html:span
                                        class="operator">=</html:span> string<html:span
                                        class="operator">.</html:span>toDouble(); <html:span
                                        class="comment">// a == 1234.56</html:span></html:pre>
                                <html:p><html:b>Note: </html:b>The conversion of the number is
                                    performed in the default C locale, irrespective of the user's
                                    locale.</html:p><html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#number">number</html:a>().</html:p>
                                <!-- @@@toDouble -->
                                <!-- $$$toFloat[overload1]$$$toFloatbool* -->
                                <html:h3 class="fn" id="toFloat"><html:a name="toFloat"
                                        ></html:a><html:span class="type">float</html:span>
                                        QByteArray::<html:span class="name"
                                        >toFloat</html:span>(<html:span class="type"
                                        >bool</html:span> *<html:i> ok</html:i> = 0) const</html:h3>
                                <html:p>Returns the byte array converted to a
                                        <html:code>float</html:code> value.</html:p>
                                <html:p>Returns 0.0 if the conversion fails.</html:p>
                                <html:p>If <html:i>ok</html:i> is not 0: if a conversion error
                                    occurs, *<html:i>ok</html:i> is set to false; otherwise
                                        *<html:i>ok</html:i> is set to true.</html:p>
                                <html:p><html:b>Note: </html:b>The conversion of the number is
                                    performed in the default C locale, irrespective of the user's
                                    locale.</html:p><html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#number">number</html:a>().</html:p>
                                <!-- @@@toFloat -->
                                <!-- $$$toHex[overload1]$$$toHex -->
                                <html:h3 class="fn" id="toHex"><html:a name="toHex"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">toHex</html:span>() const</html:h3>
                                <html:p>Returns a hex encoded copy of the byte array. The hex
                                    encoding uses the numbers 0-9 and the letters a-f.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#fromHex">fromHex</html:a>().</html:p>
                                <!-- @@@toHex -->
                                <!-- $$$toInt[overload1]$$$toIntbool*int -->
                                <html:h3 class="fn" id="toInt"><html:a name="toInt"
                                        ></html:a><html:span class="type">int</html:span>
                                        QByteArray::<html:span class="name"
                                        >toInt</html:span>(<html:span class="type">bool</html:span>
                                        *<html:i> ok</html:i> = 0, <html:span class="type"
                                        >int</html:span><html:i> base</html:i> = 10) const</html:h3>
                                <html:p>Returns the byte array converted to an
                                        <html:code>int</html:code> using base <html:i>base</html:i>,
                                    which is 10 by default and must be between 2 and 36, or
                                    0.</html:p>
                                <html:p>If <html:i>base</html:i> is 0, the base is determined
                                    automatically using the following rules: If the byte array
                                    begins with "0x", it is assumed to be hexadecimal; if it begins
                                    with "0", it is assumed to be octal; otherwise it is assumed to
                                    be decimal.</html:p>
                                <html:p>Returns 0 if the conversion fails.</html:p>
                                <html:p>If <html:i>ok</html:i> is not 0: if a conversion error
                                    occurs, *<html:i>ok</html:i> is set to false; otherwise
                                        *<html:i>ok</html:i> is set to true.</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> str(<html:span
                                        class="string">"FF"</html:span>); bool ok; <html:span
                                        class="type">int</html:span> hex <html:span class="operator"
                                        >=</html:span> str<html:span class="operator"
                                        >.</html:span>toInt(<html:span class="operator"
                                        >&amp;</html:span>ok<html:span class="operator"
                                        >,</html:span>
                                    <html:span class="number">16</html:span>); <html:span
                                        class="comment">// hex == 255, ok == true</html:span>
                                    <html:span class="type">int</html:span> dec <html:span
                                        class="operator">=</html:span> str<html:span
                                        class="operator">.</html:span>toInt(<html:span
                                        class="operator">&amp;</html:span>ok<html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">10</html:span>); <html:span
                                        class="comment">// dec == 0, ok ==
                                    false</html:span></html:pre>
                                <html:p><html:b>Note: </html:b>The conversion of the number is
                                    performed in the default C locale, irrespective of the user's
                                    locale.</html:p><html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#number">number</html:a>().</html:p>
                                <!-- @@@toInt -->
                                <!-- $$$toLong[overload1]$$$toLongbool*int -->
                                <html:h3 class="fn" id="toLong"><html:a name="toLong"
                                        ></html:a><html:span class="type">long</html:span>
                                        QByteArray::<html:span class="name"
                                        >toLong</html:span>(<html:span class="type">bool</html:span>
                                        *<html:i> ok</html:i> = 0, <html:span class="type"
                                        >int</html:span><html:i> base</html:i> = 10) const</html:h3>
                                <html:p>Returns the byte array converted to a
                                        <html:code>long</html:code> int using base
                                        <html:i>base</html:i>, which is 10 by default and must be
                                    between 2 and 36, or 0.</html:p>
                                <html:p>If <html:i>base</html:i> is 0, the base is determined
                                    automatically using the following rules: If the byte array
                                    begins with "0x", it is assumed to be hexadecimal; if it begins
                                    with "0", it is assumed to be octal; otherwise it is assumed to
                                    be decimal.</html:p>
                                <html:p>Returns 0 if the conversion fails.</html:p>
                                <html:p>If <html:i>ok</html:i> is not 0: if a conversion error
                                    occurs, *<html:i>ok</html:i> is set to false; otherwise
                                        *<html:i>ok</html:i> is set to true.</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> str(<html:span
                                        class="string">"FF"</html:span>); bool ok; <html:span
                                        class="type">long</html:span> hex <html:span
                                        class="operator">=</html:span> str<html:span
                                        class="operator">.</html:span>toLong(<html:span
                                        class="operator">&amp;</html:span>ok<html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">16</html:span>); <html:span
                                        class="comment">// hex == 255, ok == true</html:span>
                                    <html:span class="type">long</html:span> dec <html:span
                                        class="operator">=</html:span> str<html:span
                                        class="operator">.</html:span>toLong(<html:span
                                        class="operator">&amp;</html:span>ok<html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">10</html:span>); <html:span
                                        class="comment">// dec == 0, ok ==
                                    false</html:span></html:pre>
                                <html:p><html:b>Note: </html:b>The conversion of the number is
                                    performed in the default C locale, irrespective of the user's
                                    locale.</html:p><html:p>This function was introduced in Qt
                                    4.1.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#number">number</html:a>().</html:p>
                                <!-- @@@toLong -->
                                <!-- $$$toLongLong[overload1]$$$toLongLongbool*int -->
                                <html:h3 class="fn" id="toLongLong"><html:a name="toLongLong"
                                        ></html:a><html:span class="type"><html:a
                                            href="qtglobal.html#qlonglong-typedef"
                                            >qlonglong</html:a></html:span> QByteArray::<html:span
                                        class="name">toLongLong</html:span>(<html:span class="type"
                                        >bool</html:span> *<html:i> ok</html:i> = 0, <html:span
                                        class="type">int</html:span><html:i> base</html:i> = 10)
                                    const</html:h3>
                                <html:p>Returns the byte array converted to a <html:code>long
                                        long</html:code> using base <html:i>base</html:i>, which is
                                    10 by default and must be between 2 and 36, or 0.</html:p>
                                <html:p>If <html:i>base</html:i> is 0, the base is determined
                                    automatically using the following rules: If the byte array
                                    begins with "0x", it is assumed to be hexadecimal; if it begins
                                    with "0", it is assumed to be octal; otherwise it is assumed to
                                    be decimal.</html:p>
                                <html:p>Returns 0 if the conversion fails.</html:p>
                                <html:p>If <html:i>ok</html:i> is not 0: if a conversion error
                                    occurs, *<html:i>ok</html:i> is set to false; otherwise
                                        *<html:i>ok</html:i> is set to true.</html:p>
                                <html:p><html:b>Note: </html:b>The conversion of the number is
                                    performed in the default C locale, irrespective of the user's
                                    locale.</html:p><html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#number">number</html:a>().</html:p>
                                <!-- @@@toLongLong -->
                                <!-- $$$toLower[overload1]$$$toLower -->
                                <html:h3 class="fn" id="toLower"><html:a name="toLower"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">toLower</html:span>() const</html:h3>
                                <html:p>Returns a lowercase copy of the byte array. The bytearray is
                                    interpreted as a Latin-1 encoded string.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> x(<html:span class="string"
                                        >"Qt by DIGIA"</html:span>); <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> y <html:span
                                        class="operator">=</html:span> x<html:span class="operator"
                                        >.</html:span>toLower(); <html:span class="comment">// y ==
                                        "qt by digia"</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toUpper">toUpper</html:a>() and
                                        <html:a href="qbytearray.html#8-bit-character-comparisons"
                                        >8-bit Character Comparisons</html:a>.</html:p>
                                <!-- @@@toLower -->
                                <!-- $$$toNSData[overload1]$$$toNSData -->
                                <html:h3 class="fn" id="toNSData"><html:a name="toNSData"
                                        ></html:a><html:span class="type">NSData</html:span> *
                                        QByteArray::<html:span class="name">toNSData</html:span>()
                                    const</html:h3>
                                <html:p>Creates a NSData from a <html:a href="qbytearray.html"
                                        >QByteArray</html:a>. The NSData object is
                                    autoreleased.</html:p>
                                <html:p>This function was introduced in Qt 5.3.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#fromNSData">fromNSData</html:a>(),
                                        <html:a href="qbytearray.html#fromRawNSData"
                                        >fromRawNSData</html:a>(), <html:a
                                        href="qbytearray.html#fromRawData">fromRawData</html:a>(),
                                    and <html:a href="qbytearray.html#toRawNSData"
                                        >toRawNSData</html:a>().</html:p>
                                <!-- @@@toNSData -->
                                <!-- $$$toPercentEncoding[overload1]$$$toPercentEncodingconstQByteArray&constQByteArray&char -->
                                <html:h3 class="fn" id="toPercentEncoding"><html:a
                                        name="toPercentEncoding"></html:a><html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">toPercentEncoding</html:span>(const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        exclude</html:i> = QByteArray(), const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        include</html:i> = QByteArray(), <html:span class="type"
                                        >char</html:span><html:i> percent</html:i> = '%')
                                    const</html:h3>
                                <html:p>Returns a URI/URL-style percent-encoded copy of this byte
                                    array. The <html:i>percent</html:i> parameter allows you to
                                    override the default '%' character for another.</html:p>
                                <html:p>By default, this function will encode all characters that
                                    are not one of the following:</html:p>
                                <html:p>ALPHA ("a" to "z" and "A" to "Z") / DIGIT (0 to 9) / "-" /
                                    "." / "_" / "~"</html:p>
                                <html:p>To prevent characters from being encoded pass them to
                                        <html:i>exclude</html:i>. To force characters to be encoded
                                    pass them to <html:i>include</html:i>. The
                                        <html:i>percent</html:i> character is always
                                    encoded.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> text <html:span
                                        class="operator">=</html:span>
                                    <html:span class="string">"{a fishy string?}"</html:span>;
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba <html:span
                                        class="operator">=</html:span> text<html:span
                                        class="operator">.</html:span>toPercentEncoding(<html:span
                                        class="string">"{}"</html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="string">"s"</html:span>); <html:a
                                        href="qtglobal.html#qDebug">qDebug</html:a>(ba<html:span
                                        class="operator">.</html:span>constData()); <html:span
                                        class="comment">// prints "{a fi%73hy
                                        %73tring%3F}"</html:span></html:pre>
                                <html:p>The hex encoding uses the numbers 0-9 and the uppercase
                                    letters A-F.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#fromPercentEncoding"
                                        >fromPercentEncoding</html:a>() and <html:a
                                        href="qurl.html#toPercentEncoding"
                                        >QUrl::toPercentEncoding</html:a>().</html:p>
                                <!-- @@@toPercentEncoding -->
                                <!-- $$$toRawCFData[overload1]$$$toRawCFData -->
                                <html:h3 class="fn" id="toRawCFData"><html:a name="toRawCFData"
                                        ></html:a><html:span class="type">CFDataRef</html:span>
                                        QByteArray::<html:span class="name"
                                    >toRawCFData</html:span>() const</html:h3>
                                <html:p>Constructs a CFData that uses the bytes of the <html:a
                                        href="qbytearray.html">QByteArray</html:a>.</html:p>
                                <html:p>The <html:a href="qbytearray.html">QByteArray</html:a>'s
                                    bytes are not copied.</html:p>
                                <html:p>The caller guarantees that the <html:a
                                        href="qbytearray.html">QByteArray</html:a> will not be
                                    deleted or modified as long as this CFData object
                                    exists.</html:p>
                                <html:p>This function was introduced in Qt 5.3.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toCFData">toCFData</html:a>(), <html:a
                                        href="qbytearray.html#fromRawCFData"
                                    >fromRawCFData</html:a>(), <html:a
                                        href="qbytearray.html#fromCFData">fromCFData</html:a>(), and
                                        <html:a href="qbytearray.html#fromRawData"
                                        >fromRawData</html:a>().</html:p>
                                <!-- @@@toRawCFData -->
                                <!-- $$$toRawNSData[overload1]$$$toRawNSData -->
                                <html:h3 class="fn" id="toRawNSData"><html:a name="toRawNSData"
                                        ></html:a><html:span class="type">NSData</html:span> *
                                        QByteArray::<html:span class="name"
                                    >toRawNSData</html:span>() const</html:h3>
                                <html:p>Constructs a NSData that uses the bytes of the <html:a
                                        href="qbytearray.html">QByteArray</html:a>.</html:p>
                                <html:p>The <html:a href="qbytearray.html">QByteArray</html:a>'s
                                    bytes are not copied.</html:p>
                                <html:p>The caller guarantees that the <html:a
                                        href="qbytearray.html">QByteArray</html:a> will not be
                                    deleted or modified as long as this NSData object
                                    exists.</html:p>
                                <html:p>This function was introduced in Qt 5.3.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#fromRawNSData"
                                    >fromRawNSData</html:a>(), <html:a
                                        href="qbytearray.html#fromNSData">fromNSData</html:a>(),
                                        <html:a href="qbytearray.html#fromRawData"
                                        >fromRawData</html:a>(), and <html:a
                                        href="qbytearray.html#toNSData"
                                    >toNSData</html:a>().</html:p>
                                <!-- @@@toRawNSData -->
                                <!-- $$$toShort[overload1]$$$toShortbool*int -->
                                <html:h3 class="fn" id="toShort"><html:a name="toShort"
                                        ></html:a><html:span class="type">short</html:span>
                                        QByteArray::<html:span class="name"
                                        >toShort</html:span>(<html:span class="type"
                                        >bool</html:span> *<html:i> ok</html:i> = 0, <html:span
                                        class="type">int</html:span><html:i> base</html:i> = 10)
                                    const</html:h3>
                                <html:p>Returns the byte array converted to a
                                        <html:code>short</html:code> using base
                                        <html:i>base</html:i>, which is 10 by default and must be
                                    between 2 and 36, or 0.</html:p>
                                <html:p>If <html:i>base</html:i> is 0, the base is determined
                                    automatically using the following rules: If the byte array
                                    begins with "0x", it is assumed to be hexadecimal; if it begins
                                    with "0", it is assumed to be octal; otherwise it is assumed to
                                    be decimal.</html:p>
                                <html:p>Returns 0 if the conversion fails.</html:p>
                                <html:p>If <html:i>ok</html:i> is not 0: if a conversion error
                                    occurs, *<html:i>ok</html:i> is set to false; otherwise
                                        *<html:i>ok</html:i> is set to true.</html:p>
                                <html:p><html:b>Note: </html:b>The conversion of the number is
                                    performed in the default C locale, irrespective of the user's
                                    locale.</html:p><html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#number">number</html:a>().</html:p>
                                <!-- @@@toShort -->
                                <!-- $$$toStdString[overload1]$$$toStdString -->
                                <html:h3 class="fn" id="toStdString"><html:a name="toStdString"
                                        ></html:a><html:span class="type">std::string</html:span>
                                        QByteArray::<html:span class="name"
                                    >toStdString</html:span>() const</html:h3>
                                <html:p>Returns a std::string object with the data contained in this
                                        <html:a href="qbytearray.html">QByteArray</html:a>.</html:p>
                                <html:p>This operator is mostly useful to pass a <html:a
                                        href="qbytearray.html">QByteArray</html:a> to a function
                                    that accepts a std::string object.</html:p>
                                <html:p>This function was introduced in Qt 5.4.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#fromStdString"
                                    >fromStdString</html:a>() and <html:a
                                        href="qstring.html#toStdString"
                                        >QString::toStdString</html:a>().</html:p>
                                <!-- @@@toStdString -->
                                <!-- $$$toUInt[overload1]$$$toUIntbool*int -->
                                <html:h3 class="fn" id="toUInt"><html:a name="toUInt"
                                        ></html:a><html:span class="type"><html:a
                                            href="qtglobal.html#uint-typedef"
                                        >uint</html:a></html:span> QByteArray::<html:span
                                        class="name">toUInt</html:span>(<html:span class="type"
                                        >bool</html:span> *<html:i> ok</html:i> = 0, <html:span
                                        class="type">int</html:span><html:i> base</html:i> = 10)
                                    const</html:h3>
                                <html:p>Returns the byte array converted to an <html:code>unsigned
                                        int</html:code> using base <html:i>base</html:i>, which is
                                    10 by default and must be between 2 and 36, or 0.</html:p>
                                <html:p>If <html:i>base</html:i> is 0, the base is determined
                                    automatically using the following rules: If the byte array
                                    begins with "0x", it is assumed to be hexadecimal; if it begins
                                    with "0", it is assumed to be octal; otherwise it is assumed to
                                    be decimal.</html:p>
                                <html:p>Returns 0 if the conversion fails.</html:p>
                                <html:p>If <html:i>ok</html:i> is not 0: if a conversion error
                                    occurs, *<html:i>ok</html:i> is set to false; otherwise
                                        *<html:i>ok</html:i> is set to true.</html:p>
                                <html:p><html:b>Note: </html:b>The conversion of the number is
                                    performed in the default C locale, irrespective of the user's
                                    locale.</html:p><html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#number">number</html:a>().</html:p>
                                <!-- @@@toUInt -->
                                <!-- $$$toULong[overload1]$$$toULongbool*int -->
                                <html:h3 class="fn" id="toULong"><html:a name="toULong"
                                        ></html:a><html:span class="type"><html:a
                                            href="qtglobal.html#ulong-typedef"
                                        >ulong</html:a></html:span> QByteArray::<html:span
                                        class="name">toULong</html:span>(<html:span class="type"
                                        >bool</html:span> *<html:i> ok</html:i> = 0, <html:span
                                        class="type">int</html:span><html:i> base</html:i> = 10)
                                    const</html:h3>
                                <html:p>Returns the byte array converted to an <html:code>unsigned
                                        long int</html:code> using base <html:i>base</html:i>, which
                                    is 10 by default and must be between 2 and 36, or 0.</html:p>
                                <html:p>If <html:i>base</html:i> is 0, the base is determined
                                    automatically using the following rules: If the byte array
                                    begins with "0x", it is assumed to be hexadecimal; if it begins
                                    with "0", it is assumed to be octal; otherwise it is assumed to
                                    be decimal.</html:p>
                                <html:p>Returns 0 if the conversion fails.</html:p>
                                <html:p>If <html:i>ok</html:i> is not 0: if a conversion error
                                    occurs, *<html:i>ok</html:i> is set to false; otherwise
                                        *<html:i>ok</html:i> is set to true.</html:p>
                                <html:p><html:b>Note: </html:b>The conversion of the number is
                                    performed in the default C locale, irrespective of the user's
                                    locale.</html:p><html:p>This function was introduced in Qt
                                    4.1.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#number">number</html:a>().</html:p>
                                <!-- @@@toULong -->
                                <!-- $$$toULongLong[overload1]$$$toULongLongbool*int -->
                                <html:h3 class="fn" id="toULongLong"><html:a name="toULongLong"
                                        ></html:a><html:span class="type"><html:a
                                            href="qtglobal.html#qulonglong-typedef"
                                            >qulonglong</html:a></html:span> QByteArray::<html:span
                                        class="name">toULongLong</html:span>(<html:span class="type"
                                        >bool</html:span> *<html:i> ok</html:i> = 0, <html:span
                                        class="type">int</html:span><html:i> base</html:i> = 10)
                                    const</html:h3>
                                <html:p>Returns the byte array converted to an <html:code>unsigned
                                        long long</html:code> using base <html:i>base</html:i>,
                                    which is 10 by default and must be between 2 and 36, or
                                    0.</html:p>
                                <html:p>If <html:i>base</html:i> is 0, the base is determined
                                    automatically using the following rules: If the byte array
                                    begins with "0x", it is assumed to be hexadecimal; if it begins
                                    with "0", it is assumed to be octal; otherwise it is assumed to
                                    be decimal.</html:p>
                                <html:p>Returns 0 if the conversion fails.</html:p>
                                <html:p>If <html:i>ok</html:i> is not 0: if a conversion error
                                    occurs, *<html:i>ok</html:i> is set to false; otherwise
                                        *<html:i>ok</html:i> is set to true.</html:p>
                                <html:p><html:b>Note: </html:b>The conversion of the number is
                                    performed in the default C locale, irrespective of the user's
                                    locale.</html:p><html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#number">number</html:a>().</html:p>
                                <!-- @@@toULongLong -->
                                <!-- $$$toUShort[overload1]$$$toUShortbool*int -->
                                <html:h3 class="fn" id="toUShort"><html:a name="toUShort"
                                        ></html:a><html:span class="type"><html:a
                                            href="qtglobal.html#ushort-typedef"
                                        >ushort</html:a></html:span> QByteArray::<html:span
                                        class="name">toUShort</html:span>(<html:span class="type"
                                        >bool</html:span> *<html:i> ok</html:i> = 0, <html:span
                                        class="type">int</html:span><html:i> base</html:i> = 10)
                                    const</html:h3>
                                <html:p>Returns the byte array converted to an <html:code>unsigned
                                        short</html:code> using base <html:i>base</html:i>, which is
                                    10 by default and must be between 2 and 36, or 0.</html:p>
                                <html:p>If <html:i>base</html:i> is 0, the base is determined
                                    automatically using the following rules: If the byte array
                                    begins with "0x", it is assumed to be hexadecimal; if it begins
                                    with "0", it is assumed to be octal; otherwise it is assumed to
                                    be decimal.</html:p>
                                <html:p>Returns 0 if the conversion fails.</html:p>
                                <html:p>If <html:i>ok</html:i> is not 0: if a conversion error
                                    occurs, *<html:i>ok</html:i> is set to false; otherwise
                                        *<html:i>ok</html:i> is set to true.</html:p>
                                <html:p><html:b>Note: </html:b>The conversion of the number is
                                    performed in the default C locale, irrespective of the user's
                                    locale.</html:p><html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#number">number</html:a>().</html:p>
                                <!-- @@@toUShort -->
                                <!-- $$$toUpper[overload1]$$$toUpper -->
                                <html:h3 class="fn" id="toUpper"><html:a name="toUpper"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">toUpper</html:span>() const</html:h3>
                                <html:p>Returns an uppercase copy of the byte array. The bytearray
                                    is interpreted as a Latin-1 encoded string.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> x(<html:span class="string"
                                        >"Qt by DIGIA"</html:span>); <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> y <html:span
                                        class="operator">=</html:span> x<html:span class="operator"
                                        >.</html:span>toUpper(); <html:span class="comment">// y ==
                                        "QT BY DIGIA"</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#toLower">toLower</html:a>() and
                                        <html:a href="qbytearray.html#8-bit-character-comparisons"
                                        >8-bit Character Comparisons</html:a>.</html:p>
                                <!-- @@@toUpper -->
                                <!-- $$$trimmed[overload1]$$$trimmed -->
                                <html:h3 class="fn" id="trimmed"><html:a name="trimmed"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> QByteArray::<html:span
                                        class="name">trimmed</html:span>() const</html:h3>
                                <html:p>Returns a byte array that has whitespace removed from the
                                    start and the end.</html:p>
                                <html:p>Whitespace means any character for which the standard C++
                                        <html:code>isspace()</html:code> function returns
                                        <html:code>true</html:code> in the C locale. This includes
                                    the ASCII characters '\t', '\n', '\v', '\f', '\r', and '
                                    '.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba(<html:span
                                        class="string">" lots\t of\nwhitespace\r\n "</html:span>);
                                    ba <html:span class="operator">=</html:span> ba<html:span
                                        class="operator">.</html:span>trimmed(); <html:span
                                        class="comment">// ba == "lots\t
                                        of\nwhitespace";</html:span></html:pre>
                                <html:p>Unlike <html:a href="qbytearray.html#simplified"
                                        >simplified</html:a>(), trimmed() leaves internal whitespace
                                    alone.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#simplified"
                                    >simplified</html:a>().</html:p>
                                <!-- @@@trimmed -->
                                <!-- $$$truncate[overload1]$$$truncateint -->
                                <html:h3 class="fn" id="truncate"><html:a name="truncate"
                                        ></html:a><html:span class="type">void</html:span>
                                        QByteArray::<html:span class="name"
                                        >truncate</html:span>(<html:span class="type"
                                        >int</html:span><html:i> pos</html:i>)</html:h3>
                                <html:p>Truncates the byte array at index position
                                        <html:i>pos</html:i>.</html:p>
                                <html:p>If <html:i>pos</html:i> is beyond the end of the array,
                                    nothing happens.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba(<html:span
                                        class="string">"Stockholm"</html:span>); ba<html:span
                                        class="operator">.</html:span>truncate(<html:span
                                        class="number">5</html:span>); <html:span class="comment">//
                                        ba == "Stock"</html:span></html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#chop">chop</html:a>(), <html:a
                                        href="qbytearray.html#resize">resize</html:a>(), and <html:a
                                        href="qbytearray.html#left">left</html:a>().</html:p>
                                <!-- @@@truncate -->
                                <!-- $$$operator!=[overload1]$$$operator!=constQString& -->
                                <html:h3 class="fn" id="operator-not-eq"><html:a
                                        name="operator-not-eq"></html:a><html:span class="type"
                                        >bool</html:span> QByteArray::<html:span class="name"
                                        >operator!=</html:span>(const <html:span class="type"
                                            ><html:a href="qstring.html"
                                        >QString</html:a></html:span> &amp;<html:i> str</html:i>)
                                    const</html:h3>
                                <html:p>Returns <html:code>true</html:code> if this byte array is
                                    not equal to string <html:i>str</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <html:p>The Unicode data is converted into 8-bit characters using
                                        <html:a href="qstring.html#toUtf8"
                                    >QString::toUtf8</html:a>().</html:p>
                                <html:p>The comparison is case sensitive.</html:p>
                                <html:p>You can disable this operator by defining
                                        <html:code>QT_NO_CAST_FROM_ASCII</html:code> when you
                                    compile your applications. You then need to call <html:a
                                        href="qstring.html#fromUtf8">QString::fromUtf8</html:a>(),
                                        <html:a href="qstring.html#fromLatin1"
                                        >QString::fromLatin1</html:a>(), or <html:a
                                        href="qstring.html#fromLocal8Bit"
                                        >QString::fromLocal8Bit</html:a>() explicitly if you want to
                                    convert the byte array to a <html:a href="qstring.html"
                                        >QString</html:a> before doing the comparison.</html:p>
                                <!-- @@@operator!= -->
                                <!-- $$$operator+=[overload1]$$$operator+=constQByteArray& -->
                                <html:h3 class="fn" id="operator-2b-eq"><html:a
                                        name="operator-2b-eq"></html:a><html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >operator+=</html:span>(const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    ba</html:i>)</html:h3>
                                <html:p>Appends the byte array <html:i>ba</html:i> onto the end of
                                    this byte array and returns a reference to this byte
                                    array.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> x(<html:span class="string"
                                        >"free"</html:span>); <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> y(<html:span class="string"
                                        >"dom"</html:span>); x <html:span class="operator"
                                        >+</html:span><html:span class="operator">=</html:span> y;
                                        <html:span class="comment">// x ==
                                    "freedom"</html:span></html:pre>
                                <html:p>Note: <html:a href="qbytearray.html">QByteArray</html:a> is
                                    an <html:a href="implicit-sharing.html#implicitly-shared"
                                        >implicitly shared</html:a> class. Consequently, if
                                        <html:i>this</html:i> is an empty <html:a
                                        href="qbytearray.html">QByteArray</html:a>, then
                                        <html:i>this</html:i> will just share the data held in
                                        <html:i>ba</html:i>. In this case, no copying of data is
                                    done, taking <html:a href="containers.html#constant-time"
                                        >constant time</html:a>. If a shared instance is modified,
                                    it will be copied (copy-on-write), taking <html:a
                                        href="containers.html#linear-time">linear
                                    time</html:a>.</html:p>
                                <html:p>If <html:i>this</html:i> is not an empty <html:a
                                        href="qbytearray.html">QByteArray</html:a>, a deep copy of
                                    the data is performed, taking <html:a
                                        href="containers.html#linear-time">linear
                                    time</html:a>.</html:p>
                                <html:p>This operation typically does not suffer from allocation
                                    overhead, because <html:a href="qbytearray.html"
                                        >QByteArray</html:a> preallocates extra space at the end of
                                    the data so that it may grow without reallocating for each
                                    append operation.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#append">append</html:a>() and <html:a
                                        href="qbytearray.html#prepend">prepend</html:a>().</html:p>
                                <!-- @@@operator+= -->
                                <!-- $$$operator+=$$$operator+=constQString& -->
                                <html:h3 class="fn" id="operator-2b-eq-2"><html:a
                                        name="operator-2b-eq-2"></html:a><html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >operator+=</html:span>(const <html:span class="type"><html:a
                                            href="qstring.html">QString</html:a></html:span>
                                        &amp;<html:i> str</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Appends the string <html:i>str</html:i> onto the end of this
                                    byte array and returns a reference to this byte array. The
                                    Unicode data is converted into 8-bit characters using <html:a
                                        href="qstring.html#toUtf8"
                                    >QString::toUtf8</html:a>().</html:p>
                                <html:p>You can disable this function by defining
                                        <html:code>QT_NO_CAST_TO_ASCII</html:code> when you compile
                                    your applications. You then need to call <html:a
                                        href="qstring.html#toUtf8">QString::toUtf8</html:a>() (or
                                        <html:a href="qstring.html#toLatin1"
                                        >QString::toLatin1</html:a>() or <html:a
                                        href="qstring.html#toLocal8Bit"
                                        >QString::toLocal8Bit</html:a>()) explicitly if you want to
                                    convert the data to <html:code>const char
                                    *</html:code>.</html:p>
                                <!-- @@@operator+= -->
                                <!-- $$$operator+=$$$operator+=constchar* -->
                                <html:h3 class="fn" id="operator-2b-eq-3"><html:a
                                        name="operator-2b-eq-3"></html:a><html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >operator+=</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> str</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Appends the string <html:i>str</html:i> onto the end of this
                                    byte array and returns a reference to this byte array.</html:p>
                                <!-- @@@operator+= -->
                                <!-- $$$operator+=$$$operator+=char -->
                                <html:h3 class="fn" id="operator-2b-eq-4"><html:a
                                        name="operator-2b-eq-4"></html:a><html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >operator+=</html:span>(<html:span class="type"
                                        >char</html:span><html:i> ch</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Appends the character <html:i>ch</html:i> onto the end of
                                    this byte array and returns a reference to this byte
                                    array.</html:p>
                                <!-- @@@operator+= -->
                                <!-- $$$operator<[overload1]$$$operator<constQString& -->
                                <html:h3 class="fn" id="operator-lt"><html:a name="operator-lt"
                                        ></html:a><html:span class="type">bool</html:span>
                                        QByteArray::<html:span class="name"
                                    >operator&lt;</html:span>(const <html:span class="type"><html:a
                                            href="qstring.html">QString</html:a></html:span>
                                        &amp;<html:i> str</html:i>) const</html:h3>
                                <html:p>Returns <html:code>true</html:code> if this byte array is
                                    lexically less than string <html:i>str</html:i>; otherwise
                                    returns <html:code>false</html:code>.</html:p>
                                <html:p>The Unicode data is converted into 8-bit characters using
                                        <html:a href="qstring.html#toUtf8"
                                    >QString::toUtf8</html:a>().</html:p>
                                <html:p>The comparison is case sensitive.</html:p>
                                <html:p>You can disable this operator by defining
                                        <html:code>QT_NO_CAST_FROM_ASCII</html:code> when you
                                    compile your applications. You then need to call <html:a
                                        href="qstring.html#fromUtf8">QString::fromUtf8</html:a>(),
                                        <html:a href="qstring.html#fromLatin1"
                                        >QString::fromLatin1</html:a>(), or <html:a
                                        href="qstring.html#fromLocal8Bit"
                                        >QString::fromLocal8Bit</html:a>() explicitly if you want to
                                    convert the byte array to a <html:a href="qstring.html"
                                        >QString</html:a> before doing the comparison.</html:p>
                                <!-- @@@operator< -->
                                <!-- $$$operator<=[overload1]$$$operator<=constQString& -->
                                <html:h3 class="fn" id="operator-lt-eq"><html:a
                                        name="operator-lt-eq"></html:a><html:span class="type"
                                        >bool</html:span> QByteArray::<html:span class="name"
                                        >operator&lt;=</html:span>(const <html:span class="type"
                                            ><html:a href="qstring.html"
                                        >QString</html:a></html:span> &amp;<html:i> str</html:i>)
                                    const</html:h3>
                                <html:p>Returns <html:code>true</html:code> if this byte array is
                                    lexically less than or equal to string <html:i>str</html:i>;
                                    otherwise returns <html:code>false</html:code>.</html:p>
                                <html:p>The Unicode data is converted into 8-bit characters using
                                        <html:a href="qstring.html#toUtf8"
                                    >QString::toUtf8</html:a>().</html:p>
                                <html:p>The comparison is case sensitive.</html:p>
                                <html:p>You can disable this operator by defining
                                        <html:code>QT_NO_CAST_FROM_ASCII</html:code> when you
                                    compile your applications. You then need to call <html:a
                                        href="qstring.html#fromUtf8">QString::fromUtf8</html:a>(),
                                        <html:a href="qstring.html#fromLatin1"
                                        >QString::fromLatin1</html:a>(), or <html:a
                                        href="qstring.html#fromLocal8Bit"
                                        >QString::fromLocal8Bit</html:a>() explicitly if you want to
                                    convert the byte array to a <html:a href="qstring.html"
                                        >QString</html:a> before doing the comparison.</html:p>
                                <!-- @@@operator<= -->
                                <!-- $$$operator=[overload1]$$$operator=constQByteArray& -->
                                <html:h3 class="fn" id="operator-eq"><html:a name="operator-eq"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >operator=</html:span>(const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                        other</html:i>)</html:h3>
                                <html:p>Assigns <html:i>other</html:i> to this byte array and
                                    returns a reference to this byte array.</html:p>
                                <!-- @@@operator= -->
                                <!-- $$$operator=$$$operator=QByteArray&& -->
                                <html:h3 class="fn" id="operator-eq-2"><html:a name="operator-eq-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                        >operator=</html:span>(<html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;&amp;<html:i>
                                        other</html:i>)</html:h3>
                                <html:p>Move-assigns <html:i>other</html:i> to this <html:a
                                        href="qbytearray.html">QByteArray</html:a>
                                    instance.</html:p>
                                <html:p>This function was introduced in Qt 5.2.</html:p>
                                <!-- @@@operator= -->
                                <!-- $$$operator=$$$operator=constchar* -->
                                <html:h3 class="fn" id="operator-eq-3"><html:a name="operator-eq-3"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;
                                        QByteArray::<html:span class="name"
                                    >operator=</html:span>(const <html:span class="type"
                                        >char</html:span> *<html:i> str</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Assigns <html:i>str</html:i> to this byte array.</html:p>
                                <!-- @@@operator= -->
                                <!-- $$$operator==[overload1]$$$operator==constQString& -->
                                <html:h3 class="fn" id="operator-eq-eq"><html:a
                                        name="operator-eq-eq"></html:a><html:span class="type"
                                        >bool</html:span> QByteArray::<html:span class="name"
                                        >operator==</html:span>(const <html:span class="type"
                                            ><html:a href="qstring.html"
                                        >QString</html:a></html:span> &amp;<html:i> str</html:i>)
                                    const</html:h3>
                                <html:p>Returns <html:code>true</html:code> if this byte array is
                                    equal to string <html:i>str</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <html:p>The Unicode data is converted into 8-bit characters using
                                        <html:a href="qstring.html#toUtf8"
                                    >QString::toUtf8</html:a>().</html:p>
                                <html:p>The comparison is case sensitive.</html:p>
                                <html:p>You can disable this operator by defining
                                        <html:code>QT_NO_CAST_FROM_ASCII</html:code> when you
                                    compile your applications. You then need to call <html:a
                                        href="qstring.html#fromUtf8">QString::fromUtf8</html:a>(),
                                        <html:a href="qstring.html#fromLatin1"
                                        >QString::fromLatin1</html:a>(), or <html:a
                                        href="qstring.html#fromLocal8Bit"
                                        >QString::fromLocal8Bit</html:a>() explicitly if you want to
                                    convert the byte array to a <html:a href="qstring.html"
                                        >QString</html:a> before doing the comparison.</html:p>
                                <!-- @@@operator== -->
                                <!-- $$$operator>[overload1]$$$operator>constQString& -->
                                <html:h3 class="fn" id="operator-gt"><html:a name="operator-gt"
                                        ></html:a><html:span class="type">bool</html:span>
                                        QByteArray::<html:span class="name"
                                    >operator&gt;</html:span>(const <html:span class="type"><html:a
                                            href="qstring.html">QString</html:a></html:span>
                                        &amp;<html:i> str</html:i>) const</html:h3>
                                <html:p>Returns <html:code>true</html:code> if this byte array is
                                    lexically greater than string <html:i>str</html:i>; otherwise
                                    returns <html:code>false</html:code>.</html:p>
                                <html:p>The Unicode data is converted into 8-bit characters using
                                        <html:a href="qstring.html#toUtf8"
                                    >QString::toUtf8</html:a>().</html:p>
                                <html:p>The comparison is case sensitive.</html:p>
                                <html:p>You can disable this operator by defining
                                        <html:code>QT_NO_CAST_FROM_ASCII</html:code> when you
                                    compile your applications. You then need to call <html:a
                                        href="qstring.html#fromUtf8">QString::fromUtf8</html:a>(),
                                        <html:a href="qstring.html#fromLatin1"
                                        >QString::fromLatin1</html:a>(), or <html:a
                                        href="qstring.html#fromLocal8Bit"
                                        >QString::fromLocal8Bit</html:a>() explicitly if you want to
                                    convert the byte array to a <html:a href="qstring.html"
                                        >QString</html:a> before doing the comparison.</html:p>
                                <!-- @@@operator> -->
                                <!-- $$$operator>=[overload1]$$$operator>=constQString& -->
                                <html:h3 class="fn" id="operator-gt-eq"><html:a
                                        name="operator-gt-eq"></html:a><html:span class="type"
                                        >bool</html:span> QByteArray::<html:span class="name"
                                        >operator&gt;=</html:span>(const <html:span class="type"
                                            ><html:a href="qstring.html"
                                        >QString</html:a></html:span> &amp;<html:i> str</html:i>)
                                    const</html:h3>
                                <html:p>Returns <html:code>true</html:code> if this byte array is
                                    greater than or equal to string <html:i>str</html:i>; otherwise
                                    returns <html:code>false</html:code>.</html:p>
                                <html:p>The Unicode data is converted into 8-bit characters using
                                        <html:a href="qstring.html#toUtf8"
                                    >QString::toUtf8</html:a>().</html:p>
                                <html:p>The comparison is case sensitive.</html:p>
                                <html:p>You can disable this operator by defining
                                        <html:code>QT_NO_CAST_FROM_ASCII</html:code> when you
                                    compile your applications. You then need to call <html:a
                                        href="qstring.html#fromUtf8">QString::fromUtf8</html:a>(),
                                        <html:a href="qstring.html#fromLatin1"
                                        >QString::fromLatin1</html:a>(), or <html:a
                                        href="qstring.html#fromLocal8Bit"
                                        >QString::fromLocal8Bit</html:a>() explicitly if you want to
                                    convert the byte array to a <html:a href="qstring.html"
                                        >QString</html:a> before doing the comparison.</html:p>
                                <!-- @@@operator>= -->
                                <!-- $$$operator[][overload1]$$$operator[]int -->
                                <html:h3 class="fn" id="operator-5b-5d"><html:a
                                        name="operator-5b-5d"></html:a><html:span class="type"
                                        >QByteRef</html:span> QByteArray::<html:span class="name"
                                        >operator[]</html:span>(<html:span class="type"
                                        >int</html:span><html:i> i</html:i>)</html:h3>
                                <html:p>Returns the byte at index position <html:i>i</html:i> as a
                                    modifiable reference.</html:p>
                                <html:p>If an assignment is made beyond the end of the byte array,
                                    the array is extended with <html:a href="qbytearray.html#resize"
                                        >resize</html:a>() before the assignment takes
                                    place.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> ba; <html:span
                                        class="keyword">for</html:span> (<html:span class="type"
                                        >int</html:span> i <html:span class="operator">=</html:span>
                                    <html:span class="number">0</html:span>; i <html:span
                                        class="operator">&lt;</html:span>
                                    <html:span class="number">10</html:span>; <html:span
                                        class="operator">+</html:span><html:span class="operator"
                                        >+</html:span>i) ba<html:span class="operator"
                                        >[</html:span>i<html:span class="operator">]</html:span>
                                    <html:span class="operator">=</html:span>
                                    <html:span class="char">'A'</html:span>
                                    <html:span class="operator">+</html:span> i; <html:span
                                        class="comment">// ba == "ABCDEFGHIJ"</html:span></html:pre>
                                <html:p>The return value is of type QByteRef, a helper class for
                                        <html:a href="qbytearray.html">QByteArray</html:a>. When you
                                    get an object of type QByteRef, you can use it as if it were a
                                    char &amp;. If you assign to it, the assignment will apply to
                                    the character in the <html:a href="qbytearray.html"
                                        >QByteArray</html:a> from which you got the
                                    reference.</html:p>
                                <html:p><html:b>See also </html:b><html:a href="qbytearray.html#at"
                                        >at</html:a>().</html:p>
                                <!-- @@@operator[] -->
                                <!-- $$$operator[]$$$operator[]int -->
                                <html:h3 class="fn" id="operator-5b-5d-2"><html:a
                                        name="operator-5b-5d-2"></html:a><html:span class="type"
                                        >char</html:span> QByteArray::<html:span class="name"
                                        >operator[]</html:span>(<html:span class="type"
                                        >int</html:span><html:i> i</html:i>) const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Same as at(<html:i>i</html:i>).</html:p>
                                <!-- @@@operator[] -->
                                <!-- $$$operator[]$$$operator[]uint -->
                                <html:h3 class="fn" id="operator-5b-5d-3"><html:a
                                        name="operator-5b-5d-3"></html:a><html:span class="type"
                                        >QByteRef</html:span> QByteArray::<html:span class="name"
                                        >operator[]</html:span>(<html:span class="type"><html:a
                                            href="qtglobal.html#uint-typedef"
                                        >uint</html:a></html:span><html:i> i</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <!-- @@@operator[] -->
                                <!-- $$$operator[]$$$operator[]uint -->
                                <html:h3 class="fn" id="operator-5b-5d-4"><html:a
                                        name="operator-5b-5d-4"></html:a><html:span class="type"
                                        >char</html:span> QByteArray::<html:span class="name"
                                        >operator[]</html:span>(<html:span class="type"><html:a
                                            href="qtglobal.html#uint-typedef"
                                        >uint</html:a></html:span><html:i> i</html:i>)
                                    const</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <!-- @@@operator[] -->
                            </html:div>
                            <html:div class="relnonmem">
                                <html:h2>Related Non-Members</html:h2>
                                <!-- $$$qChecksum[overload1]$$$qChecksumconstchar*uint -->
                                <html:h3 class="fn" id="qChecksum"><html:a name="qChecksum"
                                        ></html:a><html:span class="type"><html:a
                                            href="qtglobal.html#quint16-typedef"
                                        >quint16</html:a></html:span>
                                    <html:span class="name">qChecksum</html:span>(const <html:span
                                        class="type">char</html:span> *<html:i> data</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtglobal.html#uint-typedef"
                                        >uint</html:a></html:span><html:i> len</html:i>)</html:h3>
                                <html:p>Returns the CRC-16 checksum of the first
                                        <html:i>len</html:i> bytes of
                                    <html:i>data</html:i>.</html:p>
                                <html:p>The checksum is independent of the byte order
                                    (endianness).</html:p>
                                <html:p><html:b>Note: </html:b>This function is a 16-bit cache
                                    conserving (16 entry table) implementation of the CRC-16-CCITT
                                    algorithm.</html:p><!-- @@@qChecksum -->
                                <!-- $$$qCompress[overload1]$$$qCompressconstQByteArray&int -->
                                <html:h3 class="fn" id="qCompress"><html:a name="qCompress"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>
                                    <html:span class="name">qCompress</html:span>(const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        data</html:i>, <html:span class="type"
                                        >int</html:span><html:i> compressionLevel</html:i> =
                                    -1)</html:h3>
                                <html:p>Compresses the <html:i>data</html:i> byte array and returns
                                    the compressed data in a new byte array.</html:p>
                                <html:p>The <html:i>compressionLevel</html:i> parameter specifies
                                    how much compression should be used. Valid values are between 0
                                    and 9, with 9 corresponding to the greatest compression (i.e.
                                    smaller compressed data) at the cost of using a slower
                                    algorithm. Smaller values (8, 7, ..., 1) provide successively
                                    less compression at slightly faster speeds. The value 0
                                    corresponds to no compression at all. The default value is -1,
                                    which specifies zlib's default compression.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#qUncompress"
                                    >qUncompress</html:a>().</html:p>
                                <!-- @@@qCompress -->
                                <!-- $$$qCompress$$$qCompressconstuchar*intint -->
                                <html:h3 class="fn" id="qCompress-2"><html:a name="qCompress-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>
                                    <html:span class="name">qCompress</html:span>(const <html:span
                                        class="type"><html:a href="qtglobal.html#uchar-typedef"
                                            >uchar</html:a></html:span> *<html:i> data</html:i>,
                                        <html:span class="type">int</html:span><html:i>
                                        nbytes</html:i>, <html:span class="type"
                                        >int</html:span><html:i> compressionLevel</html:i> =
                                    -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Compresses the first <html:i>nbytes</html:i> of
                                        <html:i>data</html:i> and returns the compressed data in a
                                    new byte array.</html:p>
                                <!-- @@@qCompress -->
                                <!-- $$$qUncompress[overload1]$$$qUncompressconstQByteArray& -->
                                <html:h3 class="fn" id="qUncompress"><html:a name="qUncompress"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>
                                    <html:span class="name">qUncompress</html:span>(const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        data</html:i>)</html:h3>
                                <html:p>Uncompresses the <html:i>data</html:i> byte array and
                                    returns a new byte array with the uncompressed data.</html:p>
                                <html:p>Returns an empty <html:a href="qbytearray.html"
                                        >QByteArray</html:a> if the input data was corrupt.</html:p>
                                <html:p>This function will uncompress data compressed with <html:a
                                        href="qbytearray.html#qCompress">qCompress</html:a>() from
                                    this and any earlier Qt version, back to Qt 3.1 when this
                                    feature was added.</html:p>
                                <html:p><html:b>Note:</html:b> If you want to use this function to
                                    uncompress external data that was compressed using zlib, you
                                    first need to prepend a four byte header to the byte array
                                    containing the data. The header must contain the expected length
                                    (in bytes) of the uncompressed data, expressed as an unsigned,
                                    big-endian, 32-bit integer.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#qCompress"
                                    >qCompress</html:a>().</html:p>
                                <!-- @@@qUncompress -->
                                <!-- $$$qUncompress$$$qUncompressconstuchar*int -->
                                <html:h3 class="fn" id="qUncompress-2"><html:a name="qUncompress-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>
                                    <html:span class="name">qUncompress</html:span>(const <html:span
                                        class="type"><html:a href="qtglobal.html#uchar-typedef"
                                            >uchar</html:a></html:span> *<html:i> data</html:i>,
                                        <html:span class="type">int</html:span><html:i>
                                        nbytes</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Uncompresses the first <html:i>nbytes</html:i> of
                                        <html:i>data</html:i> and returns a new byte array with the
                                    uncompressed data.</html:p>
                                <!-- @@@qUncompress -->
                                <!-- $$$qsnprintf[overload1]$$$qsnprintfchar*size_tconstchar*... -->
                                <html:h3 class="fn" id="qsnprintf"><html:a name="qsnprintf"
                                        ></html:a><html:span class="type">int</html:span>
                                    <html:span class="name">qsnprintf</html:span>(<html:span
                                        class="type">char</html:span> *<html:i> str</html:i>,
                                        <html:span class="type">size_t</html:span><html:i>
                                        n</html:i>, const <html:span class="type">char</html:span>
                                        *<html:i> fmt</html:i>, ...)</html:h3>
                                <html:a name="bytearray-qsnprintf"></html:a><html:p>A portable
                                    snprintf() function, calls qvsnprintf.</html:p>
                                <html:p><html:i>fmt</html:i> is the <html:code>printf()</html:code>
                                    format string. The result is put into <html:i>str</html:i>,
                                    which is a buffer of at least <html:i>n</html:i> bytes.</html:p>
                                <html:p><html:b>Warning:</html:b> Call this function only when you
                                    know what you are doing since it shows different behavior on
                                    certain platforms. Use <html:a href="qstring.html#sprintf"
                                        >QString::sprintf</html:a>() to format a string
                                    instead.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#qvsnprintf">qvsnprintf</html:a>() and
                                        <html:a href="qstring.html#sprintf"
                                        >QString::sprintf</html:a>().</html:p>
                                <!-- @@@qsnprintf -->
                                <!-- $$$qstrcmp[overload1]$$$qstrcmpconstchar*constchar* -->
                                <html:h3 class="fn" id="qstrcmp"><html:a name="qstrcmp"
                                        ></html:a><html:span class="type">int</html:span>
                                    <html:span class="name">qstrcmp</html:span>(const <html:span
                                        class="type">char</html:span> *<html:i> str1</html:i>, const
                                        <html:span class="type">char</html:span> *<html:i>
                                        str2</html:i>)</html:h3>
                                <html:p>A safe <html:code>strcmp()</html:code> function.</html:p>
                                <html:p>Compares <html:i>str1</html:i> and <html:i>str2</html:i>.
                                    Returns a negative value if <html:i>str1</html:i> is less than
                                        <html:i>str2</html:i>, 0 if <html:i>str1</html:i> is equal
                                    to <html:i>str2</html:i> or a positive value if
                                        <html:i>str1</html:i> is greater than
                                    <html:i>str2</html:i>.</html:p>
                                <html:p>Special case 1: Returns 0 if <html:i>str1</html:i> and
                                        <html:i>str2</html:i> are both 0.</html:p>
                                <html:p>Special case 2: Returns an arbitrary non-zero value if
                                        <html:i>str1</html:i> is 0 or <html:i>str2</html:i> is 0
                                    (but not both).</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#qstrncmp">qstrncmp</html:a>(), <html:a
                                        href="qbytearray.html#qstricmp">qstricmp</html:a>(), <html:a
                                        href="qbytearray.html#qstrnicmp">qstrnicmp</html:a>(), and
                                        <html:a href="qbytearray.html#8-bit-character-comparisons"
                                        >8-bit Character Comparisons</html:a>.</html:p>
                                <!-- @@@qstrcmp -->
                                <!-- $$$qstrcpy[overload1]$$$qstrcpychar*constchar* -->
                                <html:h3 class="fn" id="qstrcpy"><html:a name="qstrcpy"
                                        ></html:a><html:span class="type">char</html:span> *
                                        <html:span class="name">qstrcpy</html:span>(<html:span
                                        class="type">char</html:span> *<html:i> dst</html:i>, const
                                        <html:span class="type">char</html:span> *<html:i>
                                        src</html:i>)</html:h3>
                                <html:p>Copies all the characters up to and including the '\0' from
                                        <html:i>src</html:i> into <html:i>dst</html:i> and returns a
                                    pointer to <html:i>dst</html:i>. If <html:i>src</html:i> is 0,
                                    it immediately returns 0.</html:p>
                                <html:p>This function assumes that <html:i>dst</html:i> is large
                                    enough to hold the contents of <html:i>src</html:i>.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#qstrncpy"
                                    >qstrncpy</html:a>().</html:p>
                                <!-- @@@qstrcpy -->
                                <!-- $$$qstrdup[overload1]$$$qstrdupconstchar* -->
                                <html:h3 class="fn" id="qstrdup"><html:a name="qstrdup"
                                        ></html:a><html:span class="type">char</html:span> *
                                        <html:span class="name">qstrdup</html:span>(const <html:span
                                        class="type">char</html:span> *<html:i>
                                    src</html:i>)</html:h3>
                                <html:p>Returns a duplicate string.</html:p>
                                <html:p>Allocates space for a copy of <html:i>src</html:i>, copies
                                    it, and returns a pointer to the copy. If <html:i>src</html:i>
                                    is 0, it immediately returns 0.</html:p>
                                <html:p>Ownership is passed to the caller, so the returned string
                                    must be deleted using <html:code>delete[]</html:code>.</html:p>
                                <!-- @@@qstrdup -->
                                <!-- $$$qstricmp[overload1]$$$qstricmpconstchar*constchar* -->
                                <html:h3 class="fn" id="qstricmp"><html:a name="qstricmp"
                                        ></html:a><html:span class="type">int</html:span>
                                    <html:span class="name">qstricmp</html:span>(const <html:span
                                        class="type">char</html:span> *<html:i> str1</html:i>, const
                                        <html:span class="type">char</html:span> *<html:i>
                                        str2</html:i>)</html:h3>
                                <html:p>A safe <html:code>stricmp()</html:code> function.</html:p>
                                <html:p>Compares <html:i>str1</html:i> and <html:i>str2</html:i>
                                    ignoring the case of the characters. The encoding of the strings
                                    is assumed to be Latin-1.</html:p>
                                <html:p>Returns a negative value if <html:i>str1</html:i> is less
                                    than <html:i>str2</html:i>, 0 if <html:i>str1</html:i> is equal
                                    to <html:i>str2</html:i> or a positive value if
                                        <html:i>str1</html:i> is greater than
                                    <html:i>str2</html:i>.</html:p>
                                <html:p>Special case 1: Returns 0 if <html:i>str1</html:i> and
                                        <html:i>str2</html:i> are both 0.</html:p>
                                <html:p>Special case 2: Returns a random non-zero value if
                                        <html:i>str1</html:i> is 0 or <html:i>str2</html:i> is 0
                                    (but not both).</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#qstrcmp">qstrcmp</html:a>(), <html:a
                                        href="qbytearray.html#qstrncmp">qstrncmp</html:a>(), <html:a
                                        href="qbytearray.html#qstrnicmp">qstrnicmp</html:a>(), and
                                        <html:a href="qbytearray.html#8-bit-character-comparisons"
                                        >8-bit Character Comparisons</html:a>.</html:p>
                                <!-- @@@qstricmp -->
                                <!-- $$$qstrlen[overload1]$$$qstrlenconstchar* -->
                                <html:h3 class="fn" id="qstrlen"><html:a name="qstrlen"
                                        ></html:a><html:span class="type"><html:a
                                            href="qtglobal.html#uint-typedef"
                                        >uint</html:a></html:span>
                                    <html:span class="name">qstrlen</html:span>(const <html:span
                                        class="type">char</html:span> *<html:i>
                                    str</html:i>)</html:h3>
                                <html:p>A safe <html:code>strlen()</html:code> function.</html:p>
                                <html:p>Returns the number of characters that precede the
                                    terminating '\0', or 0 if <html:i>str</html:i> is 0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#qstrnlen"
                                    >qstrnlen</html:a>().</html:p>
                                <!-- @@@qstrlen -->
                                <!-- $$$qstrncmp[overload1]$$$qstrncmpconstchar*constchar*uint -->
                                <html:h3 class="fn" id="qstrncmp"><html:a name="qstrncmp"
                                        ></html:a><html:span class="type">int</html:span>
                                    <html:span class="name">qstrncmp</html:span>(const <html:span
                                        class="type">char</html:span> *<html:i> str1</html:i>, const
                                        <html:span class="type">char</html:span> *<html:i>
                                        str2</html:i>, <html:span class="type"><html:a
                                            href="qtglobal.html#uint-typedef"
                                        >uint</html:a></html:span><html:i> len</html:i>)</html:h3>
                                <html:p>A safe <html:code>strncmp()</html:code> function.</html:p>
                                <html:p>Compares at most <html:i>len</html:i> bytes of
                                        <html:i>str1</html:i> and <html:i>str2</html:i>.</html:p>
                                <html:p>Returns a negative value if <html:i>str1</html:i> is less
                                    than <html:i>str2</html:i>, 0 if <html:i>str1</html:i> is equal
                                    to <html:i>str2</html:i> or a positive value if
                                        <html:i>str1</html:i> is greater than
                                    <html:i>str2</html:i>.</html:p>
                                <html:p>Special case 1: Returns 0 if <html:i>str1</html:i> and
                                        <html:i>str2</html:i> are both 0.</html:p>
                                <html:p>Special case 2: Returns a random non-zero value if
                                        <html:i>str1</html:i> is 0 or <html:i>str2</html:i> is 0
                                    (but not both).</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#qstrcmp">qstrcmp</html:a>(), <html:a
                                        href="qbytearray.html#qstricmp">qstricmp</html:a>(), <html:a
                                        href="qbytearray.html#qstrnicmp">qstrnicmp</html:a>(), and
                                        <html:a href="qbytearray.html#8-bit-character-comparisons"
                                        >8-bit Character Comparisons</html:a>.</html:p>
                                <!-- @@@qstrncmp -->
                                <!-- $$$qstrncpy[overload1]$$$qstrncpychar*constchar*uint -->
                                <html:h3 class="fn" id="qstrncpy"><html:a name="qstrncpy"
                                        ></html:a><html:span class="type">char</html:span> *
                                        <html:span class="name">qstrncpy</html:span>(<html:span
                                        class="type">char</html:span> *<html:i> dst</html:i>, const
                                        <html:span class="type">char</html:span> *<html:i>
                                        src</html:i>, <html:span class="type"><html:a
                                            href="qtglobal.html#uint-typedef"
                                        >uint</html:a></html:span><html:i> len</html:i>)</html:h3>
                                <html:p>A safe <html:code>strncpy()</html:code> function.</html:p>
                                <html:p>Copies at most <html:i>len</html:i> bytes from
                                        <html:i>src</html:i> (stopping at <html:i>len</html:i> or
                                    the terminating '\0' whichever comes first) into
                                        <html:i>dst</html:i> and returns a pointer to
                                        <html:i>dst</html:i>. Guarantees that <html:i>dst</html:i>
                                    is '\0'-terminated. If <html:i>src</html:i> or
                                        <html:i>dst</html:i> is 0, returns 0 immediately.</html:p>
                                <html:p>This function assumes that <html:i>dst</html:i> is at least
                                        <html:i>len</html:i> characters long.</html:p>
                                <html:p><html:b>Note: </html:b>When compiling with Visual C++
                                    compiler version 14.00 (Visual C++ 2005) or later, internally
                                    the function strncpy_s will be used.</html:p><html:p><html:b>See
                                        also </html:b><html:a href="qbytearray.html#qstrcpy"
                                        >qstrcpy</html:a>().</html:p>
                                <!-- @@@qstrncpy -->
                                <!-- $$$qstrnicmp[overload1]$$$qstrnicmpconstchar*constchar*uint -->
                                <html:h3 class="fn" id="qstrnicmp"><html:a name="qstrnicmp"
                                        ></html:a><html:span class="type">int</html:span>
                                    <html:span class="name">qstrnicmp</html:span>(const <html:span
                                        class="type">char</html:span> *<html:i> str1</html:i>, const
                                        <html:span class="type">char</html:span> *<html:i>
                                        str2</html:i>, <html:span class="type"><html:a
                                            href="qtglobal.html#uint-typedef"
                                        >uint</html:a></html:span><html:i> len</html:i>)</html:h3>
                                <html:p>A safe <html:code>strnicmp()</html:code> function.</html:p>
                                <html:p>Compares at most <html:i>len</html:i> bytes of
                                        <html:i>str1</html:i> and <html:i>str2</html:i> ignoring the
                                    case of the characters. The encoding of the strings is assumed
                                    to be Latin-1.</html:p>
                                <html:p>Returns a negative value if <html:i>str1</html:i> is less
                                    than <html:i>str2</html:i>, 0 if <html:i>str1</html:i> is equal
                                    to <html:i>str2</html:i> or a positive value if
                                        <html:i>str1</html:i> is greater than
                                    <html:i>str2</html:i>.</html:p>
                                <html:p>Special case 1: Returns 0 if <html:i>str1</html:i> and
                                        <html:i>str2</html:i> are both 0.</html:p>
                                <html:p>Special case 2: Returns a random non-zero value if
                                        <html:i>str1</html:i> is 0 or <html:i>str2</html:i> is 0
                                    (but not both).</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#qstrcmp">qstrcmp</html:a>(), <html:a
                                        href="qbytearray.html#qstrncmp">qstrncmp</html:a>(), <html:a
                                        href="qbytearray.html#qstricmp">qstricmp</html:a>(), and
                                        <html:a href="qbytearray.html#8-bit-character-comparisons"
                                        >8-bit Character Comparisons</html:a>.</html:p>
                                <!-- @@@qstrnicmp -->
                                <!-- $$$qstrnlen[overload1]$$$qstrnlenconstchar*uint -->
                                <html:h3 class="fn" id="qstrnlen"><html:a name="qstrnlen"
                                        ></html:a><html:span class="type"><html:a
                                            href="qtglobal.html#uint-typedef"
                                        >uint</html:a></html:span>
                                    <html:span class="name">qstrnlen</html:span>(const <html:span
                                        class="type">char</html:span> *<html:i> str</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtglobal.html#uint-typedef"
                                        >uint</html:a></html:span><html:i>
                                    maxlen</html:i>)</html:h3>
                                <html:p>A safe <html:code>strnlen()</html:code> function.</html:p>
                                <html:p>Returns the number of characters that precede the
                                    terminating '\0', but at most <html:i>maxlen</html:i>. If
                                        <html:i>str</html:i> is 0, returns 0.</html:p>
                                <html:p>This function was introduced in Qt 4.2.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#qstrlen">qstrlen</html:a>().</html:p>
                                <!-- @@@qstrnlen -->
                                <!-- $$$qvsnprintf[overload1]$$$qvsnprintfchar*size_tconstchar*va_list -->
                                <html:h3 class="fn" id="qvsnprintf"><html:a name="qvsnprintf"
                                        ></html:a><html:span class="type">int</html:span>
                                    <html:span class="name">qvsnprintf</html:span>(<html:span
                                        class="type">char</html:span> *<html:i> str</html:i>,
                                        <html:span class="type">size_t</html:span><html:i>
                                        n</html:i>, const <html:span class="type">char</html:span>
                                        *<html:i> fmt</html:i>, <html:span class="type"
                                        >va_list</html:span><html:i> ap</html:i>)</html:h3>
                                <html:p>A portable <html:code>vsnprintf()</html:code> function. Will
                                    call <html:code>::vsnprintf()</html:code>,
                                        <html:code>::_vsnprintf()</html:code>, or
                                        <html:code>::vsnprintf_s</html:code> depending on the
                                    system, or fall back to an internal version.</html:p>
                                <html:p><html:i>fmt</html:i> is the <html:code>printf()</html:code>
                                    format string. The result is put into <html:i>str</html:i>,
                                    which is a buffer of at least <html:i>n</html:i> bytes.</html:p>
                                <html:p>The caller is responsible to call
                                        <html:code>va_end()</html:code> on
                                    <html:i>ap</html:i>.</html:p>
                                <html:p><html:b>Warning:</html:b> Since vsnprintf() shows different
                                    behavior on certain platforms, you should not rely on the return
                                    value or on the fact that you will always get a 0 terminated
                                    string back.</html:p>
                                <html:p>Ideally, you should never call this function but use <html:a
                                        href="qstring.html#sprintf">QString::sprintf</html:a>()
                                    instead.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#qsnprintf">qsnprintf</html:a>() and
                                        <html:a href="qstring.html#sprintf"
                                        >QString::sprintf</html:a>().</html:p>
                                <!-- @@@qvsnprintf -->
                                <!-- $$$operator!=$$$operator!=constQByteArray&constQByteArray& -->
                                <html:h3 class="fn" id="operator-not-eq-54"><html:a
                                        name="operator-not-eq-54"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator!=</html:span>(const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        a1</html:i>, const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if byte array
                                        <html:i>a1</html:i> is not equal to byte array
                                        <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator!= -->
                                <!-- $$$operator!=$$$operator!=constQByteArray&constchar* -->
                                <html:h3 class="fn" id="operator-not-eq-55"><html:a
                                        name="operator-not-eq-55"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator!=</html:span>(const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        a1</html:i>, const <html:span class="type">char</html:span>
                                        *<html:i> a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if byte array
                                        <html:i>a1</html:i> is not equal to string
                                        <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator!= -->
                                <!-- $$$operator!=$$$operator!=constchar*constQByteArray& -->
                                <html:h3 class="fn" id="operator-not-eq-56"><html:a
                                        name="operator-not-eq-56"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator!=</html:span>(const <html:span
                                        class="type">char</html:span> *<html:i> a1</html:i>, const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if string
                                        <html:i>a1</html:i> is not equal to byte array
                                        <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator!= -->
                                <!-- $$$operator+[overload1]$$$operator+constQByteArray&constQByteArray& -->
                                <html:h3 class="fn" id="operator-2b"><html:a name="operator-2b"
                                    ></html:a>const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span>
                                    <html:span class="name">operator+</html:span>(const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        a1</html:i>, const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    a2</html:i>)</html:h3>
                                <html:p>Returns a byte array that is the result of concatenating
                                    byte array <html:i>a1</html:i> and byte array
                                        <html:i>a2</html:i>.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qbytearray.html#operator-2b-eq"
                                        >QByteArray::operator+=</html:a>().</html:p>
                                <!-- @@@operator+ -->
                                <!-- $$$operator+$$$operator+constQByteArray&constchar* -->
                                <html:h3 class="fn" id="operator-2b-29"><html:a
                                        name="operator-2b-29"></html:a>const <html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span>
                                    <html:span class="name">operator+</html:span>(const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        a1</html:i>, const <html:span class="type">char</html:span>
                                        *<html:i> a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a byte array that is the result of concatenating
                                    byte array <html:i>a1</html:i> and string
                                    <html:i>a2</html:i>.</html:p>
                                <!-- @@@operator+ -->
                                <!-- $$$operator+$$$operator+constQByteArray&char -->
                                <html:h3 class="fn" id="operator-2b-30"><html:a
                                        name="operator-2b-30"></html:a>const <html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span>
                                    <html:span class="name">operator+</html:span>(const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        a1</html:i>, <html:span class="type"
                                        >char</html:span><html:i> a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a byte array that is the result of concatenating
                                    byte array <html:i>a1</html:i> and character
                                    <html:i>a2</html:i>.</html:p>
                                <!-- @@@operator+ -->
                                <!-- $$$operator+$$$operator+constchar*constQByteArray& -->
                                <html:h3 class="fn" id="operator-2b-31"><html:a
                                        name="operator-2b-31"></html:a>const <html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span>
                                    <html:span class="name">operator+</html:span>(const <html:span
                                        class="type">char</html:span> *<html:i> a1</html:i>, const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a byte array that is the result of concatenating
                                    string <html:i>a1</html:i> and byte array
                                    <html:i>a2</html:i>.</html:p>
                                <!-- @@@operator+ -->
                                <!-- $$$operator+$$$operator+charconstQByteArray& -->
                                <html:h3 class="fn" id="operator-2b-32"><html:a
                                        name="operator-2b-32"></html:a>const <html:span class="type"
                                            ><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span>
                                    <html:span class="name">operator+</html:span>(<html:span
                                        class="type">char</html:span><html:i> a1</html:i>, const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a byte array that is the result of concatenating
                                    character <html:i>a1</html:i> and byte array
                                    <html:i>a2</html:i>.</html:p>
                                <!-- @@@operator+ -->
                                <!-- $$$operator<$$$operator<constQByteArray&constQByteArray& -->
                                <html:h3 class="fn" id="operator-lt-19"><html:a
                                        name="operator-lt-19"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator&lt;</html:span>(const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i> a1</html:i>,
                                    const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if byte array
                                        <html:i>a1</html:i> is lexically less than byte array
                                        <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator< -->
                                <!-- $$$operator<$$$operator<constQByteArray&constchar* -->
                                <html:h3 class="fn" id="operator-lt-20"><html:a
                                        name="operator-lt-20"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator&lt;</html:span>(const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i> a1</html:i>,
                                    const <html:span class="type">char</html:span> *<html:i>
                                        a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if byte array
                                        <html:i>a1</html:i> is lexically less than string
                                        <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator< -->
                                <!-- $$$operator<$$$operator<constchar*constQByteArray& -->
                                <html:h3 class="fn" id="operator-lt-21"><html:a
                                        name="operator-lt-21"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator&lt;</html:span>(const
                                        <html:span class="type">char</html:span> *<html:i>
                                        a1</html:i>, const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if string
                                        <html:i>a1</html:i> is lexically less than byte array
                                        <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator< -->
                                <!-- $$$operator<<$$$operator<<QDataStream&constQByteArray& -->
                                <html:h3 class="fn" id="operator-lt-lt-46"><html:a
                                        name="operator-lt-lt-46"></html:a><html:span class="type"
                                            ><html:a href="qdatastream.html"
                                        >QDataStream</html:a></html:span> &amp; <html:span
                                        class="name">operator&lt;&lt;</html:span>(<html:span
                                        class="type"><html:a href="qdatastream.html"
                                            >QDataStream</html:a></html:span> &amp;<html:i>
                                        out</html:i>, const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    ba</html:i>)</html:h3>
                                <html:p>Writes byte array <html:i>ba</html:i> to the stream
                                        <html:i>out</html:i> and returns a reference to the
                                    stream.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="datastreamformat.html">Serializing Qt Data
                                        Types</html:a>.</html:p>
                                <!-- @@@operator<< -->
                                <!-- $$$operator<=$$$operator<=constQByteArray&constQByteArray& -->
                                <html:h3 class="fn" id="operator-lt-eq-16"><html:a
                                        name="operator-lt-eq-16"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator&lt;=</html:span>(const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i> a1</html:i>,
                                    const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if byte array
                                        <html:i>a1</html:i> is lexically less than or equal to byte
                                    array <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator<= -->
                                <!-- $$$operator<=$$$operator<=constQByteArray&constchar* -->
                                <html:h3 class="fn" id="operator-lt-eq-17"><html:a
                                        name="operator-lt-eq-17"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator&lt;=</html:span>(const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i> a1</html:i>,
                                    const <html:span class="type">char</html:span> *<html:i>
                                        a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if byte array
                                        <html:i>a1</html:i> is lexically less than or equal to
                                    string <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator<= -->
                                <!-- $$$operator<=$$$operator<=constchar*constQByteArray& -->
                                <html:h3 class="fn" id="operator-lt-eq-18"><html:a
                                        name="operator-lt-eq-18"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator&lt;=</html:span>(const
                                        <html:span class="type">char</html:span> *<html:i>
                                        a1</html:i>, const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if string
                                        <html:i>a1</html:i> is lexically less than or equal to byte
                                    array <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator<= -->
                                <!-- $$$operator==$$$operator==constQByteArray&constQByteArray& -->
                                <html:h3 class="fn" id="operator-eq-eq-62"><html:a
                                        name="operator-eq-eq-62"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator==</html:span>(const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        a1</html:i>, const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if byte array
                                        <html:i>a1</html:i> is equal to byte array
                                        <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator== -->
                                <!-- $$$operator==$$$operator==constQByteArray&constchar* -->
                                <html:h3 class="fn" id="operator-eq-eq-63"><html:a
                                        name="operator-eq-eq-63"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator==</html:span>(const <html:span
                                        class="type"><html:a href="qbytearray.html#QByteArray"
                                            >QByteArray</html:a></html:span> &amp;<html:i>
                                        a1</html:i>, const <html:span class="type">char</html:span>
                                        *<html:i> a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if byte array
                                        <html:i>a1</html:i> is equal to string <html:i>a2</html:i>;
                                    otherwise returns <html:code>false</html:code>.</html:p>
                                <!-- @@@operator== -->
                                <!-- $$$operator==$$$operator==constchar*constQByteArray& -->
                                <html:h3 class="fn" id="operator-eq-eq-64"><html:a
                                        name="operator-eq-eq-64"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator==</html:span>(const <html:span
                                        class="type">char</html:span> *<html:i> a1</html:i>, const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if string
                                        <html:i>a1</html:i> is equal to byte array
                                        <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator== -->
                                <!-- $$$operator>$$$operator>constQByteArray&constQByteArray& -->
                                <html:h3 class="fn" id="operator-gt-16"><html:a
                                        name="operator-gt-16"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator&gt;</html:span>(const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i> a1</html:i>,
                                    const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if byte array
                                        <html:i>a1</html:i> is lexically greater than byte array
                                        <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator> -->
                                <!-- $$$operator>$$$operator>constQByteArray&constchar* -->
                                <html:h3 class="fn" id="operator-gt-17"><html:a
                                        name="operator-gt-17"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator&gt;</html:span>(const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i> a1</html:i>,
                                    const <html:span class="type">char</html:span> *<html:i>
                                        a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if byte array
                                        <html:i>a1</html:i> is lexically greater than string
                                        <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator> -->
                                <!-- $$$operator>$$$operator>constchar*constQByteArray& -->
                                <html:h3 class="fn" id="operator-gt-18"><html:a
                                        name="operator-gt-18"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator&gt;</html:span>(const
                                        <html:span class="type">char</html:span> *<html:i>
                                        a1</html:i>, const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if string
                                        <html:i>a1</html:i> is lexically greater than byte array
                                        <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator> -->
                                <!-- $$$operator>=$$$operator>=constQByteArray&constQByteArray& -->
                                <html:h3 class="fn" id="operator-gt-eq-16"><html:a
                                        name="operator-gt-eq-16"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator&gt;=</html:span>(const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i> a1</html:i>,
                                    const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if byte array
                                        <html:i>a1</html:i> is lexically greater than or equal to
                                    byte array <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator>= -->
                                <!-- $$$operator>=$$$operator>=constQByteArray&constchar* -->
                                <html:h3 class="fn" id="operator-gt-eq-17"><html:a
                                        name="operator-gt-eq-17"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator&gt;=</html:span>(const
                                        <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i> a1</html:i>,
                                    const <html:span class="type">char</html:span> *<html:i>
                                        a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if byte array
                                        <html:i>a1</html:i> is lexically greater than or equal to
                                    string <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator>= -->
                                <!-- $$$operator>=$$$operator>=constchar*constQByteArray& -->
                                <html:h3 class="fn" id="operator-gt-eq-18"><html:a
                                        name="operator-gt-eq-18"></html:a><html:span class="type"
                                        >bool</html:span>
                                    <html:span class="name">operator&gt;=</html:span>(const
                                        <html:span class="type">char</html:span> *<html:i>
                                        a1</html:i>, const <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    a2</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns <html:code>true</html:code> if string
                                        <html:i>a1</html:i> is lexically greater than or equal to
                                    byte array <html:i>a2</html:i>; otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <!-- @@@operator>= -->
                                <!-- $$$operator>>$$$operator>>QDataStream&QByteArray& -->
                                <html:h3 class="fn" id="operator-gt-gt-18"><html:a
                                        name="operator-gt-gt-18"></html:a><html:span class="type"
                                            ><html:a href="qdatastream.html"
                                        >QDataStream</html:a></html:span> &amp; <html:span
                                        class="name">operator&gt;&gt;</html:span>(<html:span
                                        class="type"><html:a href="qdatastream.html"
                                            >QDataStream</html:a></html:span> &amp;<html:i>
                                        in</html:i>, <html:span class="type"><html:a
                                            href="qbytearray.html#QByteArray"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    ba</html:i>)</html:h3>
                                <html:p>Reads a byte array into <html:i>ba</html:i> from the stream
                                        <html:i>in</html:i> and returns a reference to the
                                    stream.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="datastreamformat.html">Serializing Qt Data
                                        Types</html:a>.</html:p>
                                <!-- @@@operator>> -->
                            </html:div>
                            <html:div class="macros">
                                <html:h2>Macro Documentation</html:h2>
                                <!-- $$$QT_NO_CAST_FROM_BYTEARRAY[overload1]$$$QT_NO_CAST_FROM_BYTEARRAY -->
                                <html:h3 class="fn" id="QT_NO_CAST_FROM_BYTEARRAY"><html:a
                                        name="QT_NO_CAST_FROM_BYTEARRAY"></html:a><html:span
                                        class="name">QT_NO_CAST_FROM_BYTEARRAY</html:span></html:h3>
                                <html:p>Disables automatic conversions from <html:a
                                        href="qbytearray.html">QByteArray</html:a> to const char *
                                    or const void *.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qstring.html#QT_NO_CAST_TO_ASCII"
                                        >QT_NO_CAST_TO_ASCII</html:a> and <html:a
                                        href="qstring.html#QT_NO_CAST_FROM_ASCII"
                                        >QT_NO_CAST_FROM_ASCII</html:a>.</html:p>
                                <!-- @@@QT_NO_CAST_FROM_BYTEARRAY -->
                            </html:div>
                        </html:div>
                    </html:div>
                </html:div>
            </html:div>
        </html:div>
        <html:div class="footer">
            <html:p>
                <html:acronym title="Copyright">&#169;</html:acronym> 2015 The Qt Company Ltd.
                Documentation contributions included herein are the copyrights of their respective
                owners.<html:br /> The documentation provided herein is licensed under the terms of
                the <html:a href="http://www.gnu.org/licenses/fdl.html">GNU Free Documentation
                    License version 1.3</html:a> as published by the Free Software
                Foundation.<html:br /> Qt and respective logos are trademarks of The Qt Company Ltd.
                in Finland and/or other countries worldwide. All other trademarks are property of
                their respective owners. </html:p>
        </html:div>
    </html:body>
</html:html>