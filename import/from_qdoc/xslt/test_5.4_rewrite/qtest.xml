<html:html xmlns:html="http://www.w3.org/1999/xhtml" lang="en">
    <html:head>
        <html:meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
        <!-- qtestcase.cpp -->
        <html:title>QTest Namespace | Qt Test 5.4</html:title>
        <html:link href="style/offline.css" rel="stylesheet" type="text/css" />
    </html:head>
    <html:body>
        <html:div class="header" id="qtdocheader">
            <html:div class="main">
                <html:div class="main-rounded">
                    <html:div class="navigationbar">
                        <html:ul>
                            <html:li><html:a href="qtdoc/index.html">Qt 5.4</html:a></html:li>
                            <html:li><html:a href="qttest-index.html">Qt Test</html:a></html:li>
                            <html:li>QTest Namespace</html:li>
                            <html:li id="buildversion">Qt 5.4.2 Reference Documentation</html:li>
                        </html:ul>
                    </html:div>
                </html:div>
                <html:div class="content">
                    <html:div class="line">
                        <html:div class="content mainContent">
                            <html:div class="sidebar">
                                <html:div class="toc">
                                    <html:h3><html:a name="toc">Contents</html:a></html:h3>
                                    <html:ul>
                                        <html:li class="level1"><html:a href="#classes"
                                                >Classes</html:a></html:li>
                                        <html:li class="level1"><html:a href="#types"
                                            >Types</html:a></html:li>
                                        <html:li class="level1"><html:a href="#functions"
                                                >Functions</html:a></html:li>
                                        <html:li class="level1"><html:a href="#macros"
                                                >Macros</html:a></html:li>
                                        <html:li class="level1"><html:a href="#details">Detailed
                                                Description</html:a></html:li>
                                    </html:ul>
                                </html:div>
                                <html:div class="sidebar-content" id="sidebar-content"
                                ></html:div></html:div>
                            <html:h1 class="title">QTest Namespace</html:h1>
                            <!-- $$$QTest-brief -->
                            <html:p>The <html:a href="qtest.html">QTest</html:a> namespace contains
                                all the functions and declarations that are related to Qt Test.
                                    <html:a href="#details">More...</html:a></html:p>
                            <!-- @@@QTest -->
                            <html:div class="table"><html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                Header:</html:td>
                                            <html:td class="memItemRight bottomAlign">
                                                <html:span class="preprocessor">#include
                                                  &lt;QTest&gt;</html:span>
                                            </html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                qmake:</html:td>
                                            <html:td class="memItemRight bottomAlign"> QT +=
                                                testlib</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div><html:ul>
                                <html:li><html:a href="qtest-obsolete.html">Obsolete
                                        members</html:a></html:li>
                            </html:ul>
                            <html:a name="classes"></html:a>
                            <html:h2 id="classes">Classes</html:h2>
                            <html:div class="table"><html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> class </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest-qtoucheventsequence.html"
                                                  >QTouchEventSequence</html:a></html:b></html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div>
                            <html:a name="types"></html:a>
                            <html:h2 id="types">Types</html:h2>
                            <html:div class="table"><html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> enum </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#AttributeIndex-enum"
                                                  >AttributeIndex</html:a></html:b> { AI_Undefined,
                                                AI_Name, AI_Result, AI_Tests, ..., AI_Iterations
                                                }</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> enum </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#KeyAction-enum"
                                                  >KeyAction</html:a></html:b> { Press, Release,
                                                Click }</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> enum </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#LogElementType-enum"
                                                  >LogElementType</html:a></html:b> { LET_Undefined,
                                                LET_Property, LET_Properties, LET_Failure, ...,
                                                LET_SystemError }</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> enum </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#MouseAction-enum"
                                                  >MouseAction</html:a></html:b> { MousePress,
                                                MouseRelease, MouseClick, MouseDClick, MouseMove
                                                }</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> enum </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#QBenchmarkMetric-enum"
                                                  >QBenchmarkMetric</html:a></html:b> {
                                                FramesPerSecond, BitsPerSecond, BytesPerSecond,
                                                WalltimeMilliseconds, ..., EmulationFaults
                                                }</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> enum </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#TestFailMode-enum"
                                                  >TestFailMode</html:a></html:b> { Abort, Continue
                                                }</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div>
                            <html:a name="functions"></html:a>
                            <html:h2 id="functions">Functions</html:h2>
                            <html:div class="table"><html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#addColumn"
                                                  >addColumn</html:a></html:b>(const char *<html:i>
                                                  name</html:i>, T *<html:i> dummy</html:i> =
                                                0)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> const
                                                char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#benchmarkMetricName"
                                                  >benchmarkMetricName</html:a></html:b>(QBenchmarkMetric<html:i>
                                                  metric</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> const
                                                char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#benchmarkMetricName"
                                                  >benchmarkMetricName</html:a></html:b>(QBenchmarkMetric<html:i>
                                                  metric</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> const
                                                char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#benchmarkMetricUnit"
                                                  >benchmarkMetricUnit</html:a></html:b>(QBenchmarkMetric<html:i>
                                                  metric</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> const
                                                char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#benchmarkMetricUnit"
                                                  >benchmarkMetricUnit</html:a></html:b>(QBenchmarkMetric<html:i>
                                                  metric</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> const
                                                char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#currentAppName"
                                                  >currentAppName</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> const
                                                char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#currentDataTag"
                                                  >currentDataTag</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#currentTestFailed"
                                                  >currentTestFailed</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> const
                                                char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#currentTestFunction"
                                                  >currentTestFunction</html:a></html:b>()</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#ignoreMessage"
                                                  >ignoreMessage</html:a></html:b>(QtMsgType<html:i>
                                                  type</html:i>, const char *<html:i>
                                                  message</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#ignoreMessage-2"
                                                  >ignoreMessage</html:a></html:b>(QtMsgType<html:i>
                                                  type</html:i>, const QRegularExpression
                                                  &amp;<html:i> messagePattern</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyClick"
                                                  >keyClick</html:a></html:b>(QWidget *<html:i>
                                                  widget</html:i>, Qt::Key<html:i> key</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyClick-2"
                                                  >keyClick</html:a></html:b>(QWidget *<html:i>
                                                  widget</html:i>, char<html:i> key</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyClick-3"
                                                  >keyClick</html:a></html:b>(QWindow *<html:i>
                                                  window</html:i>, Qt::Key<html:i> key</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyClick-4"
                                                  >keyClick</html:a></html:b>(QWindow *<html:i>
                                                  window</html:i>, char<html:i> key</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyClicks"
                                                  >keyClicks</html:a></html:b>(QWidget *<html:i>
                                                  widget</html:i>, const QString &amp;<html:i>
                                                  sequence</html:i>, Qt::KeyboardModifiers<html:i>
                                                  modifier</html:i> = Qt::NoModifier, int<html:i>
                                                  delay</html:i> = -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyEvent"
                                                  >keyEvent</html:a></html:b>(KeyAction<html:i>
                                                  action</html:i>, QWidget *<html:i>
                                                widget</html:i>, Qt::Key<html:i> key</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyEvent-2"
                                                  >keyEvent</html:a></html:b>(KeyAction<html:i>
                                                  action</html:i>, QWidget *<html:i>
                                                widget</html:i>, char<html:i> ascii</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyEvent-3"
                                                  >keyEvent</html:a></html:b>(KeyAction<html:i>
                                                  action</html:i>, QWindow *<html:i>
                                                window</html:i>, Qt::Key<html:i> key</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyEvent-4"
                                                  >keyEvent</html:a></html:b>(KeyAction<html:i>
                                                  action</html:i>, QWindow *<html:i>
                                                window</html:i>, char<html:i> ascii</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyPress"
                                                  >keyPress</html:a></html:b>(QWidget *<html:i>
                                                  widget</html:i>, Qt::Key<html:i> key</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyPress-2"
                                                  >keyPress</html:a></html:b>(QWidget *<html:i>
                                                  widget</html:i>, char<html:i> key</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyPress-3"
                                                  >keyPress</html:a></html:b>(QWindow *<html:i>
                                                  window</html:i>, Qt::Key<html:i> key</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyPress-4"
                                                  >keyPress</html:a></html:b>(QWindow *<html:i>
                                                  window</html:i>, char<html:i> key</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyRelease"
                                                  >keyRelease</html:a></html:b>(QWidget *<html:i>
                                                  widget</html:i>, Qt::Key<html:i> key</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyRelease-2"
                                                  >keyRelease</html:a></html:b>(QWidget *<html:i>
                                                  widget</html:i>, char<html:i> key</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyRelease-3"
                                                  >keyRelease</html:a></html:b>(QWindow *<html:i>
                                                  window</html:i>, Qt::Key<html:i> key</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#keyRelease-4"
                                                  >keyRelease</html:a></html:b>(QWindow *<html:i>
                                                  window</html:i>, char<html:i> key</html:i>,
                                                  Qt::KeyboardModifiers<html:i> modifier</html:i> =
                                                Qt::NoModifier, int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#mouseClick"
                                                  >mouseClick</html:a></html:b>(QWidget *<html:i>
                                                  widget</html:i>, Qt::MouseButton<html:i>
                                                  button</html:i>, Qt::KeyboardModifiers<html:i>
                                                  modifier</html:i> = 0, QPoint<html:i> pos</html:i>
                                                = QPoint(), int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#mouseClick-2"
                                                  >mouseClick</html:a></html:b>(QWindow *<html:i>
                                                  window</html:i>, Qt::MouseButton<html:i>
                                                  button</html:i>, Qt::KeyboardModifiers<html:i>
                                                  stateKey</html:i> = 0, QPoint<html:i> pos</html:i>
                                                = QPoint(), int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#mouseDClick"
                                                  >mouseDClick</html:a></html:b>(QWidget *<html:i>
                                                  widget</html:i>, Qt::MouseButton<html:i>
                                                  button</html:i>, Qt::KeyboardModifiers<html:i>
                                                  modifier</html:i> = 0, QPoint<html:i> pos</html:i>
                                                = QPoint(), int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#mouseDClick-2"
                                                  >mouseDClick</html:a></html:b>(QWindow *<html:i>
                                                  window</html:i>, Qt::MouseButton<html:i>
                                                  button</html:i>, Qt::KeyboardModifiers<html:i>
                                                  stateKey</html:i> = 0, QPoint<html:i> pos</html:i>
                                                = QPoint(), int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#mouseMove"
                                                  >mouseMove</html:a></html:b>(QWidget *<html:i>
                                                  widget</html:i>, QPoint<html:i> pos</html:i> =
                                                QPoint(), int<html:i> delay</html:i> = -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#mouseMove-2"
                                                  >mouseMove</html:a></html:b>(QWindow *<html:i>
                                                  window</html:i>, QPoint<html:i> pos</html:i> =
                                                QPoint(), int<html:i> delay</html:i> = -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#mousePress"
                                                  >mousePress</html:a></html:b>(QWidget *<html:i>
                                                  widget</html:i>, Qt::MouseButton<html:i>
                                                  button</html:i>, Qt::KeyboardModifiers<html:i>
                                                  modifier</html:i> = 0, QPoint<html:i> pos</html:i>
                                                = QPoint(), int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#mousePress-2"
                                                  >mousePress</html:a></html:b>(QWindow *<html:i>
                                                  window</html:i>, Qt::MouseButton<html:i>
                                                  button</html:i>, Qt::KeyboardModifiers<html:i>
                                                  stateKey</html:i> = 0, QPoint<html:i> pos</html:i>
                                                = QPoint(), int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#mouseRelease"
                                                  >mouseRelease</html:a></html:b>(QWidget *<html:i>
                                                  widget</html:i>, Qt::MouseButton<html:i>
                                                  button</html:i>, Qt::KeyboardModifiers<html:i>
                                                  modifier</html:i> = 0, QPoint<html:i> pos</html:i>
                                                = QPoint(), int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#mouseRelease-2"
                                                  >mouseRelease</html:a></html:b>(QWindow *<html:i>
                                                  window</html:i>, Qt::MouseButton<html:i>
                                                  button</html:i>, Qt::KeyboardModifiers<html:i>
                                                  stateKey</html:i> = 0, QPoint<html:i> pos</html:i>
                                                = QPoint(), int<html:i> delay</html:i> =
                                                -1)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QTestData &amp; </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#newRow"
                                                  >newRow</html:a></html:b>(const char *<html:i>
                                                  dataTag</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#qExec"
                                                  >qExec</html:a></html:b>(QObject *<html:i>
                                                  testObject</html:i>, int<html:i> argc</html:i> =
                                                0, char **<html:i> argv</html:i> = 0)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> int </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#qExec-2"
                                                  >qExec</html:a></html:b>(QObject *<html:i>
                                                  testObject</html:i>, const QStringList
                                                  &amp;<html:i> arguments</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#qSleep"
                                                  >qSleep</html:a></html:b>(int<html:i>
                                                ms</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#qWait"
                                                  >qWait</html:a></html:b>(int<html:i>
                                                ms</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#qWaitForWindowActive"
                                                  >qWaitForWindowActive</html:a></html:b>(QWindow
                                                  *<html:i> window</html:i>, int<html:i>
                                                  timeout</html:i> = 5000)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#qWaitForWindowActive-2"
                                                  >qWaitForWindowActive</html:a></html:b>(QWidget
                                                  *<html:i> widget</html:i>, int<html:i>
                                                  timeout</html:i> = 1000)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#qWaitForWindowExposed"
                                                  >qWaitForWindowExposed</html:a></html:b>(QWindow
                                                  *<html:i> window</html:i>, int<html:i>
                                                  timeout</html:i> = 5000)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> bool </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#qWaitForWindowExposed-2"
                                                  >qWaitForWindowExposed</html:a></html:b>(QWidget
                                                  *<html:i> widget</html:i>, int<html:i>
                                                  timeout</html:i> = 1000)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> void </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#setBenchmarkResult"
                                                  >setBenchmarkResult</html:a></html:b>(qreal<html:i>
                                                  result</html:i>, QBenchmarkMetric<html:i>
                                                  metric</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#toHexRepresentation"
                                                  >toHexRepresentation</html:a></html:b>(const char
                                                  *<html:i> ba</html:i>, int<html:i>
                                                length</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString"
                                                  >toString</html:a></html:b>(const T &amp;<html:i>
                                                  value</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString-4"
                                                  >toString</html:a></html:b>(const QLatin1String
                                                  &amp;<html:i> string</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString-5"
                                                  >toString</html:a></html:b>(const QString
                                                  &amp;<html:i> string</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString-6"
                                                  >toString</html:a></html:b>(const QByteArray
                                                  &amp;<html:i> ba</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString-7"
                                                  >toString</html:a></html:b>(const QTime
                                                  &amp;<html:i> time</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString-8"
                                                  >toString</html:a></html:b>(const QDate
                                                  &amp;<html:i> date</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString-9"
                                                  >toString</html:a></html:b>(const QDateTime
                                                  &amp;<html:i> dateTime</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString-10"
                                                  >toString</html:a></html:b>(const QChar
                                                  &amp;<html:i> character</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString-11"
                                                  >toString</html:a></html:b>(const QPoint
                                                  &amp;<html:i> point</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString-12"
                                                  >toString</html:a></html:b>(const QSize
                                                  &amp;<html:i> size</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString-13"
                                                  >toString</html:a></html:b>(const QRect
                                                  &amp;<html:i> rectangle</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString-14"
                                                  >toString</html:a></html:b>(const QUrl
                                                  &amp;<html:i> url</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString-15"
                                                  >toString</html:a></html:b>(const QPointF
                                                  &amp;<html:i> point</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString-16"
                                                  >toString</html:a></html:b>(const QSizeF
                                                  &amp;<html:i> size</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString-17"
                                                  >toString</html:a></html:b>(const QRectF
                                                  &amp;<html:i> rectangle</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> char * </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#toString-18"
                                                  >toString</html:a></html:b>(const QVariant
                                                  &amp;<html:i> variant</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QTouchEventSequence </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#touchEvent"
                                                  >touchEvent</html:a></html:b>(QWidget *<html:i>
                                                  widget</html:i>, QTouchDevice *<html:i>
                                                  device</html:i>, bool<html:i> autoCommit</html:i>
                                                = true)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign">
                                                QTouchEventSequence </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#touchEvent-2"
                                                  >touchEvent</html:a></html:b>(QWindow *<html:i>
                                                  window</html:i>, QTouchDevice *<html:i>
                                                  device</html:i>, bool<html:i> autoCommit</html:i>
                                                = true)</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div>
                            <html:a name="macros"></html:a>
                            <html:h2 id="macros">Macros</html:h2>
                            <html:div class="table"><html:table class="alignedsummary">
                                    <html:tbody>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#QBENCHMARK"
                                                  >QBENCHMARK</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#QBENCHMARK_ONCE"
                                                  >QBENCHMARK_ONCE</html:a></html:b></html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#QCOMPARE"
                                                  >QCOMPARE</html:a></html:b>(<html:i>
                                                  actual</html:i>, <html:i>
                                                expected</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#QEXPECT_FAIL"
                                                  >QEXPECT_FAIL</html:a></html:b>(<html:i>
                                                  dataIndex</html:i>, <html:i> comment</html:i>,
                                                  <html:i> mode</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#QFAIL"
                                                  >QFAIL</html:a></html:b>(<html:i>
                                                message</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#QFETCH"
                                                  >QFETCH</html:a></html:b>(<html:i> type</html:i>,
                                                  <html:i> name</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#QFINDTESTDATA"
                                                  >QFINDTESTDATA</html:a></html:b>(<html:i>
                                                  filename</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#QSKIP"
                                                  >QSKIP</html:a></html:b>(<html:i>
                                                  description</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#QTEST"
                                                  >QTEST</html:a></html:b>(<html:i> actual</html:i>,
                                                  <html:i> testElement</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#QTEST_APPLESS_MAIN"
                                                  >QTEST_APPLESS_MAIN</html:a></html:b>(<html:i>
                                                  TestClass</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#QTEST_GUILESS_MAIN"
                                                  >QTEST_GUILESS_MAIN</html:a></html:b>(<html:i>
                                                  TestClass</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#QTEST_MAIN"
                                                  >QTEST_MAIN</html:a></html:b>(<html:i>
                                                  TestClass</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#QTRY_COMPARE"
                                                  >QTRY_COMPARE</html:a></html:b>(<html:i>
                                                  actual</html:i>, <html:i>
                                                expected</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#QTRY_COMPARE_WITH_TIMEOUT"
                                                  >QTRY_COMPARE_WITH_TIMEOUT</html:a></html:b>(<html:i>
                                                  actual</html:i>, <html:i> expected</html:i>,
                                                  <html:i> timeout</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#QTRY_VERIFY"
                                                  >QTRY_VERIFY</html:a></html:b>(<html:i>
                                                  condition</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#QTRY_VERIFY_WITH_TIMEOUT"
                                                  >QTRY_VERIFY_WITH_TIMEOUT</html:a></html:b>(<html:i>
                                                  condition</html:i>, <html:i>
                                                timeout</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#QVERIFY2"
                                                  >QVERIFY2</html:a></html:b>(<html:i>
                                                  condition</html:i>, <html:i>
                                                message</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#QVERIFY"
                                                  >QVERIFY</html:a></html:b>(<html:i>
                                                  condition</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a
                                                  href="qtest.html#QVERIFY_EXCEPTION_THROWN"
                                                  >QVERIFY_EXCEPTION_THROWN</html:a></html:b>(<html:i>
                                                  expression</html:i>, <html:i>
                                                  exceptiontype</html:i>)</html:td>
                                        </html:tr>
                                        <html:tr>
                                            <html:td class="memItemLeft rightAlign topAlign"> </html:td>
                                            <html:td class="memItemRight bottomAlign"
                                                  ><html:b><html:a href="qtest.html#QWARN"
                                                  >QWARN</html:a></html:b>(<html:i>
                                                message</html:i>)</html:td>
                                        </html:tr>
                                    </html:tbody>
                                </html:table></html:div>
                            <html:a name="details"></html:a>
                            <!-- $$$QTest-description -->
                            <html:div class="descr">
                                <html:h2 id="details">Detailed Description</html:h2>
                                <html:p>The <html:a href="qtest.html">QTest</html:a> namespace
                                    contains all the functions and declarations that are related to
                                    Qt Test.</html:p>
                                <html:p>See the <html:a href="qtest-overview.html">Qt Test
                                        Overview</html:a> for information about how to write unit
                                    tests.</html:p>
                            </html:div>
                            <!-- @@@QTest -->
                            <html:div class="classes">
                                <html:h2>Classes</html:h2>
                                <html:h3> class <html:a href="qtest-qtoucheventsequence.html"
                                        >QTouchEventSequence</html:a></html:h3><!-- $$$QTouchEventSequence-brief -->
                                <html:p>The <html:a href="qtest-qtoucheventsequence.html"
                                        >QTouchEventSequence</html:a> class is used to simulate a
                                    sequence of touch events. <html:a
                                        href="qtest-qtoucheventsequence.html#details"
                                        >More...</html:a></html:p>
                                <!-- @@@QTouchEventSequence -->
                            </html:div>
                            <html:div class="types">
                                <html:h2>Type Documentation</html:h2>
                                <!-- $$$AttributeIndex$$$AI_Undefined$$$AI_Name$$$AI_Result$$$AI_Tests$$$AI_Failures$$$AI_Errors$$$AI_Type$$$AI_Description$$$AI_PropertyValue$$$AI_QTestVersion$$$AI_QtVersion$$$AI_File$$$AI_Line$$$AI_Metric$$$AI_Tag$$$AI_Value$$$AI_Iterations -->
                                <html:h3 class="fn" id="AttributeIndex-enum"><html:a
                                        name="AttributeIndex-enum"></html:a>enum QTest::<html:span
                                        class="name">AttributeIndex</html:span></html:h3>
                                <html:p>This enum numbers the different tests.</html:p>
                                <html:div class="table"><html:table class="valuelist">
                                        <html:tbody>
                                            <html:tr>
                                                <html:th class="tblConst">Constant</html:th>
                                                <html:th class="tblVal">Value</html:th>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_Undefined</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>-1</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_Name</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_Result</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>1</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_Tests</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>2</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_Failures</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>3</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_Errors</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>4</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_Type</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>5</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_Description</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>6</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_PropertyValue</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>7</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_QTestVersion</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>8</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_QtVersion</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>9</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_File</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>10</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_Line</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>11</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_Metric</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>12</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_Tag</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>13</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_Value</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>14</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AI_Iterations</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>15</html:code></html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table></html:div>
                                <!-- @@@AttributeIndex -->
                                <!-- $$$KeyAction$$$Press$$$Release$$$Click -->
                                <html:h3 class="fn" id="KeyAction-enum"><html:a
                                        name="KeyAction-enum"></html:a>enum QTest::<html:span
                                        class="name">KeyAction</html:span></html:h3>
                                <html:p>This enum describes possible actions for key
                                    handling.</html:p>
                                <html:div class="table"><html:table class="valuelist">
                                        <html:tbody>
                                            <html:tr class="odd" valign="top">
                                                <html:th class="tblConst">Constant</html:th>
                                                <html:th class="tblval">Value</html:th>
                                                <html:th class="tbldscr">Description</html:th>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::Press</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0</html:code></html:td>
                                                <html:td class="topAlign">The key is
                                                  pressed.</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::Release</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>1</html:code></html:td>
                                                <html:td class="topAlign">The key is
                                                  released.</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::Click</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>2</html:code></html:td>
                                                <html:td class="topAlign">The key is clicked
                                                  (pressed and released).</html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table></html:div>
                                <!-- @@@KeyAction -->
                                <!-- $$$LogElementType$$$LET_Undefined$$$LET_Property$$$LET_Properties$$$LET_Failure$$$LET_Error$$$LET_TestCase$$$LET_TestSuite$$$LET_Benchmark$$$LET_SystemError -->
                                <html:h3 class="fn" id="LogElementType-enum"><html:a
                                        name="LogElementType-enum"></html:a>enum QTest::<html:span
                                        class="name">LogElementType</html:span></html:h3>
                                <html:p>The enum specifies the kinds of test log messages.</html:p>
                                <html:div class="table"><html:table class="valuelist">
                                        <html:tbody>
                                            <html:tr>
                                                <html:th class="tblConst">Constant</html:th>
                                                <html:th class="tblVal">Value</html:th>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::LET_Undefined</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>-1</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::LET_Property</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::LET_Properties</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>1</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::LET_Failure</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>2</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::LET_Error</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>3</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::LET_TestCase</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>4</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::LET_TestSuite</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>5</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::LET_Benchmark</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>6</html:code></html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::LET_SystemError</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>7</html:code></html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table></html:div>
                                <!-- @@@LogElementType -->
                                <!-- $$$MouseAction$$$MousePress$$$MouseRelease$$$MouseClick$$$MouseDClick$$$MouseMove -->
                                <html:h3 class="fn" id="MouseAction-enum"><html:a
                                        name="MouseAction-enum"></html:a>enum QTest::<html:span
                                        class="name">MouseAction</html:span></html:h3>
                                <html:p>This enum describes possible actions for mouse
                                    handling.</html:p>
                                <html:div class="table"><html:table class="valuelist">
                                        <html:tbody>
                                            <html:tr class="odd" valign="top">
                                                <html:th class="tblConst">Constant</html:th>
                                                <html:th class="tblval">Value</html:th>
                                                <html:th class="tbldscr">Description</html:th>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::MousePress</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0</html:code></html:td>
                                                <html:td class="topAlign">A mouse button is
                                                  pressed.</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::MouseRelease</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>1</html:code></html:td>
                                                <html:td class="topAlign">A mouse button is
                                                  released.</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::MouseClick</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>2</html:code></html:td>
                                                <html:td class="topAlign">A mouse button is clicked
                                                  (pressed and released).</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::MouseDClick</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>3</html:code></html:td>
                                                <html:td class="topAlign">A mouse button is double
                                                  clicked (pressed and released twice).</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::MouseMove</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>4</html:code></html:td>
                                                <html:td class="topAlign">The mouse pointer has
                                                  moved.</html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table></html:div>
                                <!-- @@@MouseAction -->
                                <!-- $$$QBenchmarkMetric$$$FramesPerSecond$$$BitsPerSecond$$$BytesPerSecond$$$WalltimeMilliseconds$$$CPUTicks$$$InstructionReads$$$Events$$$WalltimeNanoseconds$$$BytesAllocated$$$CPUMigrations$$$CPUCycles$$$BusCycles$$$StalledCycles$$$Instructions$$$BranchInstructions$$$BranchMisses$$$CacheReferences$$$CacheReads$$$CacheWrites$$$CachePrefetches$$$CacheMisses$$$CacheReadMisses$$$CacheWriteMisses$$$CachePrefetchMisses$$$ContextSwitches$$$PageFaults$$$MinorPageFaults$$$MajorPageFaults$$$AlignmentFaults$$$EmulationFaults -->
                                <html:h3 class="fn" id="QBenchmarkMetric-enum"><html:a
                                        name="QBenchmarkMetric-enum"></html:a>enum QTest::<html:span
                                        class="name">QBenchmarkMetric</html:span></html:h3>
                                <html:p>This enum lists all the things that can be
                                    benchmarked.</html:p>
                                <html:div class="table"><html:table class="valuelist">
                                        <html:tbody>
                                            <html:tr class="odd" valign="top">
                                                <html:th class="tblConst">Constant</html:th>
                                                <html:th class="tblval">Value</html:th>
                                                <html:th class="tbldscr">Description</html:th>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::FramesPerSecond</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>0</html:code></html:td>
                                                <html:td class="topAlign">Frames per
                                                  second</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::BitsPerSecond</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>1</html:code></html:td>
                                                <html:td class="topAlign">Bits per second</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::BytesPerSecond</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>2</html:code></html:td>
                                                <html:td class="topAlign">Bytes per second</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::WalltimeMilliseconds</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>3</html:code></html:td>
                                                <html:td class="topAlign">Clock time in
                                                  milliseconds</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::WalltimeNanoseconds</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>7</html:code></html:td>
                                                <html:td class="topAlign">Clock time in
                                                  nanoseconds</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::BytesAllocated</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>8</html:code></html:td>
                                                <html:td class="topAlign">Memory usage in
                                                  bytes</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::Events</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>6</html:code></html:td>
                                                <html:td class="topAlign">Event count</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::CPUTicks</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>4</html:code></html:td>
                                                <html:td class="topAlign">CPU time</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::CPUMigrations</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>9</html:code></html:td>
                                                <html:td class="topAlign">Process migrations between
                                                  CPUs</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::CPUCycles</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>10</html:code></html:td>
                                                <html:td class="topAlign">CPU cycles</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::BusCycles</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>11</html:code></html:td>
                                                <html:td class="topAlign">Bus cycles</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::StalledCycles</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>12</html:code></html:td>
                                                <html:td class="topAlign">Cycles stalled</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::InstructionReads</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>5</html:code></html:td>
                                                <html:td class="topAlign">Instruction
                                                  reads</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::Instructions</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>13</html:code></html:td>
                                                <html:td class="topAlign">Instructions
                                                  executed</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::BranchInstructions</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>14</html:code></html:td>
                                                <html:td class="topAlign">Branch-type
                                                  instructions</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::BranchMisses</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>15</html:code></html:td>
                                                <html:td class="topAlign">Branch instructions that
                                                  were mispredicted</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::CacheReferences</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>16</html:code></html:td>
                                                <html:td class="topAlign">Cache accesses of any
                                                  type</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::CacheMisses</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>20</html:code></html:td>
                                                <html:td class="topAlign">Cache misses of any
                                                  type</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::CacheReads</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>17</html:code></html:td>
                                                <html:td class="topAlign">Cache reads /
                                                  loads</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::CacheReadMisses</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>21</html:code></html:td>
                                                <html:td class="topAlign">Cache read / load
                                                  misses</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::CacheWrites</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>18</html:code></html:td>
                                                <html:td class="topAlign">Cache writes /
                                                  stores</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::CacheWriteMisses</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>22</html:code></html:td>
                                                <html:td class="topAlign">Cache write / store
                                                  misses</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::CachePrefetches</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>19</html:code></html:td>
                                                <html:td class="topAlign">Cache prefetches</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::CachePrefetchMisses</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>23</html:code></html:td>
                                                <html:td class="topAlign">Cache prefetch
                                                  misses</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::ContextSwitches</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>24</html:code></html:td>
                                                <html:td class="topAlign">Context switches</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::PageFaults</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>25</html:code></html:td>
                                                <html:td class="topAlign">Page faults of any
                                                  type</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::MinorPageFaults</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>26</html:code></html:td>
                                                <html:td class="topAlign">Minor page
                                                  faults</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::MajorPageFaults</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>27</html:code></html:td>
                                                <html:td class="topAlign">Major page
                                                  faults</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::AlignmentFaults</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>28</html:code></html:td>
                                                <html:td class="topAlign">Faults caused due to
                                                  misalignment</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::EmulationFaults</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>29</html:code></html:td>
                                                <html:td class="topAlign">Faults that needed
                                                  software emulation</html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table></html:div>
                                <html:p>Note that <html:code>WalltimeNanoseconds</html:code> and
                                        <html:code>BytesAllocated</html:code> are only provided for
                                    use via <html:a href="qtest.html#setBenchmarkResult"
                                        >setBenchmarkResult</html:a>(), and results in those metrics
                                    are not able to be provided automatically by the <html:a
                                        href="qtest.html">QTest</html:a> framework.</html:p>
                                <html:p>This enum was introduced or modified in Qt 4.7.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#benchmarkMetricName"
                                        >QTest::benchmarkMetricName</html:a>() and <html:a
                                        href="qtest.html#benchmarkMetricUnit"
                                        >QTest::benchmarkMetricUnit</html:a>().</html:p>
                                <!-- @@@QBenchmarkMetric -->
                                <!-- $$$TestFailMode$$$Abort$$$Continue -->
                                <html:h3 class="fn" id="TestFailMode-enum"><html:a
                                        name="TestFailMode-enum"></html:a>enum QTest::<html:span
                                        class="name">TestFailMode</html:span></html:h3>
                                <html:p>This enum describes the modes for handling an expected
                                    failure of the <html:a href="qtest.html#QVERIFY"
                                        >QVERIFY</html:a>() or <html:a href="qtest.html#QCOMPARE"
                                        >QCOMPARE</html:a>() macros.</html:p>
                                <html:div class="table"><html:table class="valuelist">
                                        <html:tbody>
                                            <html:tr class="odd" valign="top">
                                                <html:th class="tblConst">Constant</html:th>
                                                <html:th class="tblval">Value</html:th>
                                                <html:th class="tbldscr">Description</html:th>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::Abort</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>1</html:code></html:td>
                                                <html:td class="topAlign">Aborts the execution of
                                                  the test. Use this mode when it doesn't make sense
                                                  to execute the test any further after the expected
                                                  failure.</html:td>
                                            </html:tr>
                                            <html:tr>
                                                <html:td class="topAlign"
                                                  ><html:code>QTest::Continue</html:code></html:td>
                                                <html:td class="topAlign"
                                                  ><html:code>2</html:code></html:td>
                                                <html:td class="topAlign">Continues execution of the
                                                  test after the expected failure.</html:td>
                                            </html:tr>
                                        </html:tbody>
                                    </html:table></html:div>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#QEXPECT_FAIL"
                                    >QEXPECT_FAIL</html:a>().</html:p>
                                <!-- @@@TestFailMode -->
                            </html:div>
                            <html:div class="func">
                                <html:h2>Function Documentation</html:h2>
                                <!-- $$$addColumn[overload1]$$$addColumnconstchar*T* -->
                                <html:h3 class="fn" id="addColumn"><html:a name="addColumn"
                                        ></html:a><html:span class="type">void</html:span>
                                        QTest::<html:span class="name">addColumn</html:span>(const
                                        <html:span class="type">char</html:span> *<html:i>
                                        name</html:i>, <html:span class="type">T</html:span>
                                        *<html:i> dummy</html:i> = 0)</html:h3>
                                <html:p>Adds a column with type <html:code>T</html:code> to the
                                    current test data. <html:i>name</html:i> is the name of the
                                    column. <html:i>dummy</html:i> is a workaround for buggy
                                    compilers and can be ignored.</html:p>
                                <html:p>To populate the column with values, <html:a
                                        href="qtest.html#newRow">newRow</html:a>() can be used. Use
                                        <html:a href="qtest.html#QFETCH">QFETCH</html:a>() to fetch
                                    the data in the actual test.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type">void</html:span>
                                    myTestFunction_data() { <html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>addColumn<html:span
                                        class="operator">&lt;</html:span><html:span class="type"
                                        >int</html:span><html:span class="operator"
                                        >&gt;</html:span>(<html:span class="string"
                                        >"intval"</html:span>); <html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>addColumn<html:span
                                        class="operator">&lt;</html:span><html:span class="type"
                                            ><html:a href="qtcore/qstring.html"
                                        >QString</html:a></html:span><html:span class="operator"
                                        >&gt;</html:span>(<html:span class="string"
                                        >"str"</html:span>); <html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>addColumn<html:span
                                        class="operator">&lt;</html:span><html:span class="type"
                                        >double</html:span><html:span class="operator"
                                        >&gt;</html:span>(<html:span class="string"
                                        >"dbl"</html:span>); <html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>newRow(<html:span
                                        class="string">"row1"</html:span>) <html:span
                                        class="operator">&lt;</html:span><html:span class="operator"
                                        >&lt;</html:span>
                                    <html:span class="number">1</html:span>
                                    <html:span class="operator">&lt;</html:span><html:span
                                        class="operator">&lt;</html:span>
                                    <html:span class="string">"hello"</html:span>
                                    <html:span class="operator">&lt;</html:span><html:span
                                        class="operator">&lt;</html:span>
                                    <html:span class="number">1.5</html:span>; }</html:pre>
                                <html:p>To add custom types to the testdata, the type must be
                                    registered with <html:a href="qtcore/qmetatype.html"
                                        >QMetaType</html:a> via <html:a
                                        href="qtcore/qmetatype.html#Q_DECLARE_METATYPE"
                                        >Q_DECLARE_METATYPE</html:a>().</html:p>
                                <html:p><html:b>Note:</html:b> This macro can only be used in a
                                    test's data function that is invoked by the test
                                    framework.</html:p>
                                <html:p>See <html:a href="qttestlib-tutorial2-example.html">Data
                                        Driven Testing</html:a> for a more extensive
                                    example.</html:p>
                                <html:p><html:b>See also </html:b><html:a href="qtest.html#newRow"
                                        >QTest::newRow</html:a>(), <html:a href="qtest.html#QFETCH"
                                        >QFETCH</html:a>(), and <html:a href="qtcore/qmetatype.html"
                                        >QMetaType</html:a>.</html:p>
                                <!-- @@@addColumn -->
                                <!-- $$$benchmarkMetricName[overload1]$$$benchmarkMetricNameQBenchmarkMetric -->
                                <html:h3 class="fn" id="benchmarkMetricName"><html:a
                                        name="benchmarkMetricName"></html:a>const <html:span
                                        class="type">char</html:span> * QTest::<html:span
                                        class="name">benchmarkMetricName</html:span>(<html:span
                                        class="type"><html:a href="qtest.html#QBenchmarkMetric-enum"
                                            >QBenchmarkMetric</html:a></html:span><html:i>
                                        metric</html:i>)</html:h3>
                                <html:p>Returns the enum value <html:i>metric</html:i> as a
                                    character string.</html:p>
                                <html:p>This function was introduced in Qt 4.7.</html:p>
                                <!-- @@@benchmarkMetricName -->
                                <!-- $$$benchmarkMetricName[overload1]$$$benchmarkMetricNameQBenchmarkMetric -->
                                <html:h3 class="fn" id="benchmarkMetricName"><html:a
                                        name="benchmarkMetricName"></html:a>const <html:span
                                        class="type">char</html:span> * QTest::<html:span
                                        class="name">benchmarkMetricName</html:span>(<html:span
                                        class="type"><html:a href="qtest.html#QBenchmarkMetric-enum"
                                            >QBenchmarkMetric</html:a></html:span><html:i>
                                        metric</html:i>)</html:h3>
                                <html:p>Returns the enum value <html:i>metric</html:i> as a
                                    character string.</html:p>
                                <html:p>This function was introduced in Qt 4.7.</html:p>
                                <!-- @@@benchmarkMetricName -->
                                <!-- $$$benchmarkMetricUnit[overload1]$$$benchmarkMetricUnitQBenchmarkMetric -->
                                <html:h3 class="fn" id="benchmarkMetricUnit"><html:a
                                        name="benchmarkMetricUnit"></html:a>const <html:span
                                        class="type">char</html:span> * QTest::<html:span
                                        class="name">benchmarkMetricUnit</html:span>(<html:span
                                        class="type"><html:a href="qtest.html#QBenchmarkMetric-enum"
                                            >QBenchmarkMetric</html:a></html:span><html:i>
                                        metric</html:i>)</html:h3>
                                <html:p>Retuns the units of measure for the specified
                                        <html:i>metric</html:i>.</html:p>
                                <html:p>This function was introduced in Qt 4.7.</html:p>
                                <!-- @@@benchmarkMetricUnit -->
                                <!-- $$$benchmarkMetricUnit[overload1]$$$benchmarkMetricUnitQBenchmarkMetric -->
                                <html:h3 class="fn" id="benchmarkMetricUnit"><html:a
                                        name="benchmarkMetricUnit"></html:a>const <html:span
                                        class="type">char</html:span> * QTest::<html:span
                                        class="name">benchmarkMetricUnit</html:span>(<html:span
                                        class="type"><html:a href="qtest.html#QBenchmarkMetric-enum"
                                            >QBenchmarkMetric</html:a></html:span><html:i>
                                        metric</html:i>)</html:h3>
                                <html:p>Retuns the units of measure for the specified
                                        <html:i>metric</html:i>.</html:p>
                                <html:p>This function was introduced in Qt 4.7.</html:p>
                                <!-- @@@benchmarkMetricUnit -->
                                <!-- $$$currentAppName[overload1]$$$currentAppName -->
                                <html:h3 class="fn" id="currentAppName"><html:a
                                        name="currentAppName"></html:a>const <html:span class="type"
                                        >char</html:span> * QTest::<html:span class="name"
                                        >currentAppName</html:span>()</html:h3>
                                <html:p>Returns the name of the binary that is currently
                                    executed.</html:p>
                                <!-- @@@currentAppName -->
                                <!-- $$$currentDataTag[overload1]$$$currentDataTag -->
                                <html:h3 class="fn" id="currentDataTag"><html:a
                                        name="currentDataTag"></html:a>const <html:span class="type"
                                        >char</html:span> * QTest::<html:span class="name"
                                        >currentDataTag</html:span>()</html:h3>
                                <html:p>Returns the name of the current test data. If the test
                                    doesn't have any assigned testdata, the function returns
                                    0.</html:p>
                                <!-- @@@currentDataTag -->
                                <!-- $$$currentTestFailed[overload1]$$$currentTestFailed -->
                                <html:h3 class="fn" id="currentTestFailed"><html:a
                                        name="currentTestFailed"></html:a><html:span class="type"
                                        >bool</html:span> QTest::<html:span class="name"
                                        >currentTestFailed</html:span>()</html:h3>
                                <html:p>Returns <html:code>true</html:code> if the current test
                                    function failed, otherwise false.</html:p>
                                <!-- @@@currentTestFailed -->
                                <!-- $$$currentTestFunction[overload1]$$$currentTestFunction -->
                                <html:h3 class="fn" id="currentTestFunction"><html:a
                                        name="currentTestFunction"></html:a>const <html:span
                                        class="type">char</html:span> * QTest::<html:span
                                        class="name">currentTestFunction</html:span>()</html:h3>
                                <html:p>Returns the name of the test function that is currently
                                    executed.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type">void</html:span>
                                        MyTestClass<html:span class="operator"
                                    >::</html:span>cleanup() { <html:span class="keyword"
                                        >if</html:span> (qstrcmp(currentTestFunction()<html:span
                                        class="operator">,</html:span>
                                    <html:span class="string">"myDatabaseTest"</html:span>)
                                        <html:span class="operator">=</html:span><html:span
                                        class="operator">=</html:span>
                                    <html:span class="number">0</html:span>) { <html:span
                                        class="comment">// clean up all database
                                        connections</html:span> closeAllDatabases(); } }</html:pre>
                                <!-- @@@currentTestFunction -->
                                <!-- $$$ignoreMessage[overload1]$$$ignoreMessageQtMsgTypeconstchar* -->
                                <html:h3 class="fn" id="ignoreMessage"><html:a name="ignoreMessage"
                                        ></html:a><html:span class="type">void</html:span>
                                        QTest::<html:span class="name"
                                        >ignoreMessage</html:span>(<html:span class="type"><html:a
                                            href="qtcore/qtglobal.html#QtMsgType-enum"
                                            >QtMsgType</html:a></html:span><html:i> type</html:i>,
                                    const <html:span class="type">char</html:span> *<html:i>
                                        message</html:i>)</html:h3>
                                <html:p>Ignores messages created by <html:a
                                        href="qtcore/qtglobal.html#qDebug">qDebug</html:a>() or
                                        <html:a href="qtcore/qtglobal.html#qWarning"
                                        >qWarning</html:a>(). If the <html:i>message</html:i> with
                                    the corresponding <html:i>type</html:i> is outputted, it will be
                                    removed from the test log. If the test finished and the
                                        <html:i>message</html:i> was not outputted, a test failure
                                    is appended to the test log.</html:p>
                                <html:p><html:b>Note:</html:b> Invoking this function will only
                                    ignore one message. If the message you want to ignore is
                                    outputted twice, you have to call ignoreMessage() twice,
                                    too.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qtcore/qdir.html">QDir</html:a></html:span> dir;
                                        <html:span class="type"><html:a href="qtest.html"
                                            >QTest</html:a></html:span><html:span class="operator"
                                        >::</html:span>ignoreMessage(<html:span class="type"><html:a
                                            href="qtcore/qtglobal.html#QtMsgType-enum"
                                            >QtWarningMsg</html:a></html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="string">"QDir::mkdir: Empty or null file
                                        name(s)"</html:span>); dir<html:span class="operator"
                                        >.</html:span>mkdir(<html:span class="string"
                                    >""</html:span>);</html:pre>
                                <html:p>The example above tests that <html:a
                                        href="qtcore/qdir.html#mkdir">QDir::mkdir</html:a>() outputs
                                    the right warning when invoked with an invalid file
                                    name.</html:p>
                                <!-- @@@ignoreMessage -->
                                <!-- $$$ignoreMessage$$$ignoreMessageQtMsgTypeconstQRegularExpression& -->
                                <html:h3 class="fn" id="ignoreMessage-2"><html:a
                                        name="ignoreMessage-2"></html:a><html:span class="type"
                                        >void</html:span> QTest::<html:span class="name"
                                        >ignoreMessage</html:span>(<html:span class="type"><html:a
                                            href="qtcore/qtglobal.html#QtMsgType-enum"
                                            >QtMsgType</html:a></html:span><html:i> type</html:i>,
                                    const <html:span class="type"><html:a
                                            href="qtcore/qregularexpression.html"
                                            >QRegularExpression</html:a></html:span> &amp;<html:i>
                                        messagePattern</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Ignores messages created by <html:a
                                        href="qtcore/qtglobal.html#qDebug">qDebug</html:a>() or
                                        <html:a href="qtcore/qtglobal.html#qWarning"
                                        >qWarning</html:a>(). If the message matching
                                        <html:i>messagePattern</html:i> with the corresponding
                                        <html:i>type</html:i> is outputted, it will be removed from
                                    the test log. If the test finished and the message was not
                                    outputted, a test failure is appended to the test log.</html:p>
                                <html:p><html:b>Note:</html:b> Invoking this function will only
                                    ignore one message. If the message you want to ignore is
                                    outputted twice, you have to call <html:a
                                        href="qtest.html#ignoreMessage">ignoreMessage</html:a>()
                                    twice, too.</html:p>
                                <html:p>This function was introduced in Qt 5.3.</html:p>
                                <!-- @@@ignoreMessage -->
                                <!-- $$$keyClick[overload1]$$$keyClickQWidget*Qt::KeyQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyClick"><html:a name="keyClick"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyClick</html:span>(<html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#Key-enum"
                                        >Qt::Key</html:a></html:span><html:i> key</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>Simulates clicking of <html:i>key</html:i> with an optional
                                        <html:i>modifier</html:i> on a <html:i>widget</html:i>. If
                                        <html:i>delay</html:i> is larger than 0, the test will wait
                                    for <html:i>delay</html:i> milliseconds before clicking the
                                    key.</html:p>
                                <html:p>Examples:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>keyClick(myWidget<html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span><html:span class="operator"
                                        >::</html:span>Key_Escape); <html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>keyClick(myWidget<html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span><html:span class="operator"
                                        >::</html:span>Key_Escape<html:span class="operator"
                                        >,</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span><html:span class="operator"
                                        >::</html:span>ShiftModifier<html:span class="operator"
                                        >,</html:span>
                                    <html:span class="number">200</html:span>);</html:pre>
                                <html:p>The first example above simulates clicking the
                                        <html:code>escape</html:code> key on
                                        <html:code>myWidget</html:code> without any keyboard
                                    modifiers and without delay. The second example simulates
                                    clicking <html:code>shift-escape</html:code> on
                                        <html:code>myWidget</html:code> following a 200 ms delay of
                                    the test.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#keyClicks"
                                    >QTest::keyClicks</html:a>().</html:p>
                                <!-- @@@keyClick -->
                                <!-- $$$keyClick$$$keyClickQWidget*charQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyClick-2"><html:a name="keyClick-2"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyClick</html:span>(<html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type">char</html:span><html:i>
                                        key</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Simulates clicking of <html:i>key</html:i> with an optional
                                        <html:i>modifier</html:i> on a <html:i>widget</html:i>. If
                                        <html:i>delay</html:i> is larger than 0, the test will wait
                                    for <html:i>delay</html:i> milliseconds before clicking the
                                    key.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>keyClick(myWidget<html:span
                                        class="operator">,</html:span>
                                    <html:span class="char">'a'</html:span>);</html:pre>
                                <html:p>The example above simulates clicking
                                        <html:code>a</html:code> on <html:code>myWidget</html:code>
                                    without any keyboard modifiers and without delay of the
                                    test.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#keyClicks"
                                    >QTest::keyClicks</html:a>().</html:p>
                                <!-- @@@keyClick -->
                                <!-- $$$keyClick$$$keyClickQWindow*Qt::KeyQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyClick-3"><html:a name="keyClick-3"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyClick</html:span>(<html:span class="type"><html:a
                                            href="qtgui/qwindow.html">QWindow</html:a></html:span>
                                        *<html:i> window</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#Key-enum"
                                        >Qt::Key</html:a></html:span><html:i> key</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Simulates clicking of <html:i>key</html:i> with an optional
                                        <html:i>modifier</html:i> on a <html:i>window</html:i>. If
                                        <html:i>delay</html:i> is larger than 0, the test will wait
                                    for <html:i>delay</html:i> milliseconds before clicking the
                                    key.</html:p>
                                <html:p>Examples:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>keyClick(myWindow<html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span><html:span class="operator"
                                        >::</html:span>Key_Escape); <html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>keyClick(myWindow<html:span
                                        class="operator">,</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span><html:span class="operator"
                                        >::</html:span>Key_Escape<html:span class="operator"
                                        >,</html:span>
                                    <html:span class="type"><html:a href="qtcore/qt.html"
                                            >Qt</html:a></html:span><html:span class="operator"
                                        >::</html:span>ShiftModifier<html:span class="operator"
                                        >,</html:span>
                                    <html:span class="number">200</html:span>);</html:pre>
                                <html:p>The first example above simulates clicking the
                                        <html:code>escape</html:code> key on
                                        <html:code>myWindow</html:code> without any keyboard
                                    modifiers and without delay. The second example simulates
                                    clicking <html:code>shift-escape</html:code> on
                                        <html:code>myWindow</html:code> following a 200 ms delay of
                                    the test.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#keyClicks"
                                    >QTest::keyClicks</html:a>().</html:p>
                                <!-- @@@keyClick -->
                                <!-- $$$keyClick$$$keyClickQWindow*charQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyClick-4"><html:a name="keyClick-4"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyClick</html:span>(<html:span class="type"><html:a
                                            href="qtgui/qwindow.html">QWindow</html:a></html:span>
                                        *<html:i> window</html:i>, <html:span class="type"
                                        >char</html:span><html:i> key</html:i>, <html:span
                                        class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Simulates clicking of <html:i>key</html:i> with an optional
                                        <html:i>modifier</html:i> on a <html:i>window</html:i>. If
                                        <html:i>delay</html:i> is larger than 0, the test will wait
                                    for <html:i>delay</html:i> milliseconds before clicking the
                                    key.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>keyClick(myWindow<html:span
                                        class="operator">,</html:span>
                                    <html:span class="char">'a'</html:span>);</html:pre>
                                <html:p>The example above simulates clicking
                                        <html:code>a</html:code> on <html:code>myWindow</html:code>
                                    without any keyboard modifiers and without delay of the
                                    test.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#keyClicks"
                                    >QTest::keyClicks</html:a>().</html:p>
                                <!-- @@@keyClick -->
                                <!-- $$$keyClicks[overload1]$$$keyClicksQWidget*constQString&Qt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyClicks"><html:a name="keyClicks"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyClicks</html:span>(<html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                    const <html:span class="type"><html:a href="qtcore/qstring.html"
                                            >QString</html:a></html:span> &amp;<html:i>
                                        sequence</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>Simulates clicking a <html:i>sequence</html:i> of keys on a
                                        <html:i>widget</html:i>. Optionally, a keyboard
                                        <html:i>modifier</html:i> can be specified as well as a
                                        <html:i>delay</html:i> (in milliseconds) of the test before
                                    each key click.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>keyClicks(myWidget<html:span
                                        class="operator">,</html:span>
                                    <html:span class="string">"hello world"</html:span>);</html:pre>
                                <html:p>The example above simulates clicking the sequence of keys
                                    representing "hello world" on <html:code>myWidget</html:code>
                                    without any keyboard modifiers and without delay of the
                                    test.</html:p>
                                <html:p><html:b>See also </html:b><html:a href="qtest.html#keyClick"
                                        >QTest::keyClick</html:a>().</html:p>
                                <!-- @@@keyClicks -->
                                <!-- $$$keyEvent[overload1]$$$keyEventKeyActionQWidget*Qt::KeyQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyEvent"><html:a name="keyEvent"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyEvent</html:span>(<html:span class="type"><html:a
                                            href="qtest.html#KeyAction-enum"
                                        >KeyAction</html:a></html:span><html:i> action</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#Key-enum"
                                        >Qt::Key</html:a></html:span><html:i> key</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>Sends a Qt key event to <html:i>widget</html:i> with the
                                    given <html:i>key</html:i> and an associated
                                        <html:i>action</html:i>. Optionally, a keyboard
                                        <html:i>modifier</html:i> can be specified, as well as a
                                        <html:i>delay</html:i> (in milliseconds) of the test before
                                    sending the event.</html:p>
                                <!-- @@@keyEvent -->
                                <!-- $$$keyEvent$$$keyEventKeyActionQWidget*charQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyEvent-2"><html:a name="keyEvent-2"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyEvent</html:span>(<html:span class="type"><html:a
                                            href="qtest.html#KeyAction-enum"
                                        >KeyAction</html:a></html:span><html:i> action</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type">char</html:span><html:i>
                                        ascii</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Sends a Qt key event to <html:i>widget</html:i> with the
                                    given key <html:i>ascii</html:i> and an associated
                                        <html:i>action</html:i>. Optionally, a keyboard
                                        <html:i>modifier</html:i> can be specified, as well as a
                                        <html:i>delay</html:i> (in milliseconds) of the test before
                                    sending the event.</html:p>
                                <!-- @@@keyEvent -->
                                <!-- $$$keyEvent$$$keyEventKeyActionQWindow*Qt::KeyQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyEvent-3"><html:a name="keyEvent-3"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyEvent</html:span>(<html:span class="type"><html:a
                                            href="qtest.html#KeyAction-enum"
                                        >KeyAction</html:a></html:span><html:i> action</html:i>,
                                        <html:span class="type"><html:a href="qtgui/qwindow.html"
                                            >QWindow</html:a></html:span> *<html:i> window</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#Key-enum"
                                        >Qt::Key</html:a></html:span><html:i> key</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Sends a Qt key event to <html:i>window</html:i> with the
                                    given <html:i>key</html:i> and an associated
                                        <html:i>action</html:i>. Optionally, a keyboard
                                        <html:i>modifier</html:i> can be specified, as well as a
                                        <html:i>delay</html:i> (in milliseconds) of the test before
                                    sending the event.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <!-- @@@keyEvent -->
                                <!-- $$$keyEvent$$$keyEventKeyActionQWindow*charQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyEvent-4"><html:a name="keyEvent-4"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyEvent</html:span>(<html:span class="type"><html:a
                                            href="qtest.html#KeyAction-enum"
                                        >KeyAction</html:a></html:span><html:i> action</html:i>,
                                        <html:span class="type"><html:a href="qtgui/qwindow.html"
                                            >QWindow</html:a></html:span> *<html:i> window</html:i>,
                                        <html:span class="type">char</html:span><html:i>
                                        ascii</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Sends a Qt key event to <html:i>window</html:i> with the
                                    given key <html:i>ascii</html:i> and an associated
                                        <html:i>action</html:i>. Optionally, a keyboard
                                        <html:i>modifier</html:i> can be specified, as well as a
                                        <html:i>delay</html:i> (in milliseconds) of the test before
                                    sending the event.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <!-- @@@keyEvent -->
                                <!-- $$$keyPress[overload1]$$$keyPressQWidget*Qt::KeyQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyPress"><html:a name="keyPress"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyPress</html:span>(<html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#Key-enum"
                                        >Qt::Key</html:a></html:span><html:i> key</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>Simulates pressing a <html:i>key</html:i> with an optional
                                        <html:i>modifier</html:i> on a <html:i>widget</html:i>. If
                                        <html:i>delay</html:i> is larger than 0, the test will wait
                                    for <html:i>delay</html:i> milliseconds before pressing the
                                    key.</html:p>
                                <html:p><html:b>Note:</html:b> At some point you should release the
                                    key using <html:a href="qtest.html#keyRelease"
                                        >keyRelease</html:a>().</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#keyRelease">QTest::keyRelease</html:a>()
                                    and <html:a href="qtest.html#keyClick"
                                    >QTest::keyClick</html:a>().</html:p>
                                <!-- @@@keyPress -->
                                <!-- $$$keyPress$$$keyPressQWidget*charQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyPress-2"><html:a name="keyPress-2"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyPress</html:span>(<html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type">char</html:span><html:i>
                                        key</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Simulates pressing a <html:i>key</html:i> with an optional
                                        <html:i>modifier</html:i> on a <html:i>widget</html:i>. If
                                        <html:i>delay</html:i> is larger than 0, the test will wait
                                    for <html:i>delay</html:i> milliseconds before pressing the
                                    key.</html:p>
                                <html:p><html:b>Note:</html:b> At some point you should release the
                                    key using <html:a href="qtest.html#keyRelease"
                                        >keyRelease</html:a>().</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#keyRelease">QTest::keyRelease</html:a>()
                                    and <html:a href="qtest.html#keyClick"
                                    >QTest::keyClick</html:a>().</html:p>
                                <!-- @@@keyPress -->
                                <!-- $$$keyPress$$$keyPressQWindow*Qt::KeyQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyPress-3"><html:a name="keyPress-3"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyPress</html:span>(<html:span class="type"><html:a
                                            href="qtgui/qwindow.html">QWindow</html:a></html:span>
                                        *<html:i> window</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#Key-enum"
                                        >Qt::Key</html:a></html:span><html:i> key</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Simulates pressing a <html:i>key</html:i> with an optional
                                        <html:i>modifier</html:i> on a <html:i>window</html:i>. If
                                        <html:i>delay</html:i> is larger than 0, the test will wait
                                    for <html:i>delay</html:i> milliseconds before pressing the
                                    key.</html:p>
                                <html:p><html:b>Note:</html:b> At some point you should release the
                                    key using <html:a href="qtest.html#keyRelease"
                                        >keyRelease</html:a>().</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#keyRelease">QTest::keyRelease</html:a>()
                                    and <html:a href="qtest.html#keyClick"
                                    >QTest::keyClick</html:a>().</html:p>
                                <!-- @@@keyPress -->
                                <!-- $$$keyPress$$$keyPressQWindow*charQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyPress-4"><html:a name="keyPress-4"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyPress</html:span>(<html:span class="type"><html:a
                                            href="qtgui/qwindow.html">QWindow</html:a></html:span>
                                        *<html:i> window</html:i>, <html:span class="type"
                                        >char</html:span><html:i> key</html:i>, <html:span
                                        class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Simulates pressing a <html:i>key</html:i> with an optional
                                        <html:i>modifier</html:i> on a <html:i>window</html:i>. If
                                        <html:i>delay</html:i> is larger than 0, the test will wait
                                    for <html:i>delay</html:i> milliseconds before pressing the
                                    key.</html:p>
                                <html:p><html:b>Note:</html:b> At some point you should release the
                                    key using <html:a href="qtest.html#keyRelease"
                                        >keyRelease</html:a>().</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#keyRelease">QTest::keyRelease</html:a>()
                                    and <html:a href="qtest.html#keyClick"
                                    >QTest::keyClick</html:a>().</html:p>
                                <!-- @@@keyPress -->
                                <!-- $$$keyRelease[overload1]$$$keyReleaseQWidget*Qt::KeyQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyRelease"><html:a name="keyRelease"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyRelease</html:span>(<html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#Key-enum"
                                        >Qt::Key</html:a></html:span><html:i> key</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>Simulates releasing a <html:i>key</html:i> with an optional
                                        <html:i>modifier</html:i> on a <html:i>widget</html:i>. If
                                        <html:i>delay</html:i> is larger than 0, the test will wait
                                    for <html:i>delay</html:i> milliseconds before releasing the
                                    key.</html:p>
                                <html:p><html:b>See also </html:b><html:a href="qtest.html#keyPress"
                                        >QTest::keyPress</html:a>() and <html:a
                                        href="qtest.html#keyClick"
                                    >QTest::keyClick</html:a>().</html:p>
                                <!-- @@@keyRelease -->
                                <!-- $$$keyRelease$$$keyReleaseQWidget*charQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyRelease-2"><html:a name="keyRelease-2"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyRelease</html:span>(<html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type">char</html:span><html:i>
                                        key</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Simulates releasing a <html:i>key</html:i> with an optional
                                        <html:i>modifier</html:i> on a <html:i>widget</html:i>. If
                                        <html:i>delay</html:i> is larger than 0, the test will wait
                                    for <html:i>delay</html:i> milliseconds before releasing the
                                    key.</html:p>
                                <html:p><html:b>See also </html:b><html:a href="qtest.html#keyClick"
                                        >QTest::keyClick</html:a>().</html:p>
                                <!-- @@@keyRelease -->
                                <!-- $$$keyRelease$$$keyReleaseQWindow*Qt::KeyQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyRelease-3"><html:a name="keyRelease-3"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyRelease</html:span>(<html:span class="type"><html:a
                                            href="qtgui/qwindow.html">QWindow</html:a></html:span>
                                        *<html:i> window</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#Key-enum"
                                        >Qt::Key</html:a></html:span><html:i> key</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Simulates releasing a <html:i>key</html:i> with an optional
                                        <html:i>modifier</html:i> on a <html:i>window</html:i>. If
                                        <html:i>delay</html:i> is larger than 0, the test will wait
                                    for <html:i>delay</html:i> milliseconds before releasing the
                                    key.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a href="qtest.html#keyPress"
                                        >QTest::keyPress</html:a>() and <html:a
                                        href="qtest.html#keyClick"
                                    >QTest::keyClick</html:a>().</html:p>
                                <!-- @@@keyRelease -->
                                <!-- $$$keyRelease$$$keyReleaseQWindow*charQt::KeyboardModifiersint -->
                                <html:h3 class="fn" id="keyRelease-4"><html:a name="keyRelease-4"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >keyRelease</html:span>(<html:span class="type"><html:a
                                            href="qtgui/qwindow.html">QWindow</html:a></html:span>
                                        *<html:i> window</html:i>, <html:span class="type"
                                        >char</html:span><html:i> key</html:i>, <html:span
                                        class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = Qt::NoModifier, <html:span class="type"
                                        >int</html:span><html:i> delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Simulates releasing a <html:i>key</html:i> with an optional
                                        <html:i>modifier</html:i> on a <html:i>window</html:i>. If
                                        <html:i>delay</html:i> is larger than 0, the test will wait
                                    for <html:i>delay</html:i> milliseconds before releasing the
                                    key.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a href="qtest.html#keyClick"
                                        >QTest::keyClick</html:a>().</html:p>
                                <!-- @@@keyRelease -->
                                <!-- $$$mouseClick[overload1]$$$mouseClickQWidget*Qt::MouseButtonQt::KeyboardModifiersQPointint -->
                                <html:h3 class="fn" id="mouseClick"><html:a name="mouseClick"
                                        ></html:a><html:span class="type">void</html:span>
                                        QTest::<html:span class="name"
                                        >mouseClick</html:span>(<html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#MouseButton-enum"
                                            >Qt::MouseButton</html:a></html:span><html:i>
                                        button</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = 0, <html:span class="type"><html:a
                                            href="qtcore/qpoint.html"
                                        >QPoint</html:a></html:span><html:i> pos</html:i> =
                                    QPoint(), <html:span class="type">int</html:span><html:i>
                                        delay</html:i> = -1)</html:h3>
                                <html:p>Simulates clicking a mouse <html:i>button</html:i> with an
                                    optional <html:i>modifier</html:i> on a <html:i>widget</html:i>.
                                    The position of the click is defined by <html:i>pos</html:i>;
                                    the default position is the center of the widget. If
                                        <html:i>delay</html:i> is specified, the test will wait for
                                    the specified amount of milliseconds before pressing and before
                                    releasing the button.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#mousePress">QTest::mousePress</html:a>()
                                    and <html:a href="qtest.html#mouseRelease"
                                        >QTest::mouseRelease</html:a>().</html:p>
                                <!-- @@@mouseClick -->
                                <!-- $$$mouseClick$$$mouseClickQWindow*Qt::MouseButtonQt::KeyboardModifiersQPointint -->
                                <html:h3 class="fn" id="mouseClick-2"><html:a name="mouseClick-2"
                                        ></html:a><html:span class="type">void</html:span>
                                        QTest::<html:span class="name"
                                        >mouseClick</html:span>(<html:span class="type"><html:a
                                            href="qtgui/qwindow.html">QWindow</html:a></html:span>
                                        *<html:i> window</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#MouseButton-enum"
                                            >Qt::MouseButton</html:a></html:span><html:i>
                                        button</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        stateKey</html:i> = 0, <html:span class="type"><html:a
                                            href="qtcore/qpoint.html"
                                        >QPoint</html:a></html:span><html:i> pos</html:i> =
                                    QPoint(), <html:span class="type">int</html:span><html:i>
                                        delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Simulates clicking a mouse <html:i>button</html:i> with an
                                    optional <html:i>stateKey</html:i> modifier on a
                                        <html:i>window</html:i>. The position of the click is
                                    defined by <html:i>pos</html:i>; the default position is the
                                    center of the window. If <html:i>delay</html:i> is specified,
                                    the test will wait for the specified amount of milliseconds
                                    before pressing and before releasing the button.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#mousePress">QTest::mousePress</html:a>()
                                    and <html:a href="qtest.html#mouseRelease"
                                        >QTest::mouseRelease</html:a>().</html:p>
                                <!-- @@@mouseClick -->
                                <!-- $$$mouseDClick[overload1]$$$mouseDClickQWidget*Qt::MouseButtonQt::KeyboardModifiersQPointint -->
                                <html:h3 class="fn" id="mouseDClick"><html:a name="mouseDClick"
                                        ></html:a><html:span class="type">void</html:span>
                                        QTest::<html:span class="name"
                                        >mouseDClick</html:span>(<html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#MouseButton-enum"
                                            >Qt::MouseButton</html:a></html:span><html:i>
                                        button</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = 0, <html:span class="type"><html:a
                                            href="qtcore/qpoint.html"
                                        >QPoint</html:a></html:span><html:i> pos</html:i> =
                                    QPoint(), <html:span class="type">int</html:span><html:i>
                                        delay</html:i> = -1)</html:h3>
                                <html:p>Simulates double clicking a mouse <html:i>button</html:i>
                                    with an optional <html:i>modifier</html:i> on a
                                        <html:i>widget</html:i>. The position of the click is
                                    defined by <html:i>pos</html:i>; the default position is the
                                    center of the widget. If <html:i>delay</html:i> is specified,
                                    the test will wait for the specified amount of milliseconds
                                    before each press and release.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#mouseClick"
                                    >QTest::mouseClick</html:a>().</html:p>
                                <!-- @@@mouseDClick -->
                                <!-- $$$mouseDClick$$$mouseDClickQWindow*Qt::MouseButtonQt::KeyboardModifiersQPointint -->
                                <html:h3 class="fn" id="mouseDClick-2"><html:a name="mouseDClick-2"
                                        ></html:a><html:span class="type">void</html:span>
                                        QTest::<html:span class="name"
                                        >mouseDClick</html:span>(<html:span class="type"><html:a
                                            href="qtgui/qwindow.html">QWindow</html:a></html:span>
                                        *<html:i> window</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#MouseButton-enum"
                                            >Qt::MouseButton</html:a></html:span><html:i>
                                        button</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        stateKey</html:i> = 0, <html:span class="type"><html:a
                                            href="qtcore/qpoint.html"
                                        >QPoint</html:a></html:span><html:i> pos</html:i> =
                                    QPoint(), <html:span class="type">int</html:span><html:i>
                                        delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Simulates double clicking a mouse <html:i>button</html:i>
                                    with an optional <html:i>stateKey</html:i> modifier on a
                                        <html:i>window</html:i>. The position of the click is
                                    defined by <html:i>pos</html:i>; the default position is the
                                    center of the window. If <html:i>delay</html:i> is specified,
                                    the test will wait for the specified amount of milliseconds
                                    before each press and release.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#mouseClick"
                                    >QTest::mouseClick</html:a>().</html:p>
                                <!-- @@@mouseDClick -->
                                <!-- $$$mouseMove[overload1]$$$mouseMoveQWidget*QPointint -->
                                <html:h3 class="fn" id="mouseMove"><html:a name="mouseMove"
                                        ></html:a><html:span class="type">void</html:span>
                                        QTest::<html:span class="name"
                                        >mouseMove</html:span>(<html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type"><html:a href="qtcore/qpoint.html"
                                            >QPoint</html:a></html:span><html:i> pos</html:i> =
                                    QPoint(), <html:span class="type">int</html:span><html:i>
                                        delay</html:i> = -1)</html:h3>
                                <html:p>Moves the mouse pointer to a <html:i>widget</html:i>. If
                                        <html:i>pos</html:i> is not specified, the mouse pointer
                                    moves to the center of the widget. If a <html:i>delay</html:i>
                                    (in milliseconds) is given, the test will wait before moving the
                                    mouse pointer.</html:p>
                                <!-- @@@mouseMove -->
                                <!-- $$$mouseMove$$$mouseMoveQWindow*QPointint -->
                                <html:h3 class="fn" id="mouseMove-2"><html:a name="mouseMove-2"
                                        ></html:a><html:span class="type">void</html:span>
                                        QTest::<html:span class="name"
                                        >mouseMove</html:span>(<html:span class="type"><html:a
                                            href="qtgui/qwindow.html">QWindow</html:a></html:span>
                                        *<html:i> window</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qpoint.html"
                                        >QPoint</html:a></html:span><html:i> pos</html:i> =
                                    QPoint(), <html:span class="type">int</html:span><html:i>
                                        delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Moves the mouse pointer to a <html:i>window</html:i>. If
                                        <html:i>pos</html:i> is not specified, the mouse pointer
                                    moves to the center of the window. If a <html:i>delay</html:i>
                                    (in milliseconds) is given, the test will wait before moving the
                                    mouse pointer.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <!-- @@@mouseMove -->
                                <!-- $$$mousePress[overload1]$$$mousePressQWidget*Qt::MouseButtonQt::KeyboardModifiersQPointint -->
                                <html:h3 class="fn" id="mousePress"><html:a name="mousePress"
                                        ></html:a><html:span class="type">void</html:span>
                                        QTest::<html:span class="name"
                                        >mousePress</html:span>(<html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#MouseButton-enum"
                                            >Qt::MouseButton</html:a></html:span><html:i>
                                        button</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = 0, <html:span class="type"><html:a
                                            href="qtcore/qpoint.html"
                                        >QPoint</html:a></html:span><html:i> pos</html:i> =
                                    QPoint(), <html:span class="type">int</html:span><html:i>
                                        delay</html:i> = -1)</html:h3>
                                <html:p>Simulates pressing a mouse <html:i>button</html:i> with an
                                    optional <html:i>modifier</html:i> on a <html:i>widget</html:i>.
                                    The position is defined by <html:i>pos</html:i>; the default
                                    position is the center of the widget. If <html:i>delay</html:i>
                                    is specified, the test will wait for the specified amount of
                                    milliseconds before the press.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#mouseRelease"
                                    >QTest::mouseRelease</html:a>() and <html:a
                                        href="qtest.html#mouseClick"
                                    >QTest::mouseClick</html:a>().</html:p>
                                <!-- @@@mousePress -->
                                <!-- $$$mousePress$$$mousePressQWindow*Qt::MouseButtonQt::KeyboardModifiersQPointint -->
                                <html:h3 class="fn" id="mousePress-2"><html:a name="mousePress-2"
                                        ></html:a><html:span class="type">void</html:span>
                                        QTest::<html:span class="name"
                                        >mousePress</html:span>(<html:span class="type"><html:a
                                            href="qtgui/qwindow.html">QWindow</html:a></html:span>
                                        *<html:i> window</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#MouseButton-enum"
                                            >Qt::MouseButton</html:a></html:span><html:i>
                                        button</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        stateKey</html:i> = 0, <html:span class="type"><html:a
                                            href="qtcore/qpoint.html"
                                        >QPoint</html:a></html:span><html:i> pos</html:i> =
                                    QPoint(), <html:span class="type">int</html:span><html:i>
                                        delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Simulates pressing a mouse <html:i>button</html:i> with an
                                    optional <html:i>stateKey</html:i> modifier on a
                                        <html:i>window</html:i>. The position is defined by
                                        <html:i>pos</html:i>; the default position is the center of
                                    the window. If <html:i>delay</html:i> is specified, the test
                                    will wait for the specified amount of milliseconds before the
                                    press.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#mouseRelease"
                                    >QTest::mouseRelease</html:a>() and <html:a
                                        href="qtest.html#mouseClick"
                                    >QTest::mouseClick</html:a>().</html:p>
                                <!-- @@@mousePress -->
                                <!-- $$$mouseRelease[overload1]$$$mouseReleaseQWidget*Qt::MouseButtonQt::KeyboardModifiersQPointint -->
                                <html:h3 class="fn" id="mouseRelease"><html:a name="mouseRelease"
                                        ></html:a><html:span class="type">void</html:span>
                                        QTest::<html:span class="name"
                                        >mouseRelease</html:span>(<html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtcore/qt.html#MouseButton-enum"
                                            >Qt::MouseButton</html:a></html:span><html:i>
                                        button</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        modifier</html:i> = 0, <html:span class="type"><html:a
                                            href="qtcore/qpoint.html"
                                        >QPoint</html:a></html:span><html:i> pos</html:i> =
                                    QPoint(), <html:span class="type">int</html:span><html:i>
                                        delay</html:i> = -1)</html:h3>
                                <html:p>Simulates releasing a mouse <html:i>button</html:i> with an
                                    optional <html:i>modifier</html:i> on a <html:i>widget</html:i>.
                                    The position of the release is defined by <html:i>pos</html:i>;
                                    the default position is the center of the widget. If
                                        <html:i>delay</html:i> is specified, the test will wait for
                                    the specified amount of milliseconds before releasing the
                                    button.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#mousePress">QTest::mousePress</html:a>()
                                    and <html:a href="qtest.html#mouseClick"
                                        >QTest::mouseClick</html:a>().</html:p>
                                <!-- @@@mouseRelease -->
                                <!-- $$$mouseRelease$$$mouseReleaseQWindow*Qt::MouseButtonQt::KeyboardModifiersQPointint -->
                                <html:h3 class="fn" id="mouseRelease-2"><html:a
                                        name="mouseRelease-2"></html:a><html:span class="type"
                                        >void</html:span> QTest::<html:span class="name"
                                        >mouseRelease</html:span>(<html:span class="type"><html:a
                                            href="qtgui/qwindow.html">QWindow</html:a></html:span>
                                        *<html:i> window</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#MouseButton-enum"
                                            >Qt::MouseButton</html:a></html:span><html:i>
                                        button</html:i>, <html:span class="type"><html:a
                                            href="qtcore/qt.html#KeyboardModifier-enum"
                                            >Qt::KeyboardModifiers</html:a></html:span><html:i>
                                        stateKey</html:i> = 0, <html:span class="type"><html:a
                                            href="qtcore/qpoint.html"
                                        >QPoint</html:a></html:span><html:i> pos</html:i> =
                                    QPoint(), <html:span class="type">int</html:span><html:i>
                                        delay</html:i> = -1)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Simulates releasing a mouse <html:i>button</html:i> with an
                                    optional <html:i>stateKey</html:i> modifier on a
                                        <html:i>window</html:i>. The position of the release is
                                    defined by <html:i>pos</html:i>; the default position is the
                                    center of the window. If <html:i>delay</html:i> is specified,
                                    the test will wait for the specified amount of milliseconds
                                    before releasing the button.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#mousePress">QTest::mousePress</html:a>()
                                    and <html:a href="qtest.html#mouseClick"
                                        >QTest::mouseClick</html:a>().</html:p>
                                <!-- @@@mouseRelease -->
                                <!-- $$$newRow[overload1]$$$newRowconstchar* -->
                                <html:h3 class="fn" id="newRow"><html:a name="newRow"
                                        ></html:a><html:span class="type">QTestData</html:span>
                                    &amp; QTest::<html:span class="name">newRow</html:span>(const
                                        <html:span class="type">char</html:span> *<html:i>
                                        dataTag</html:i>)</html:h3>
                                <html:p>Appends a new row to the current test data.
                                        <html:i>dataTag</html:i> is the name of the testdata that
                                    will appear in the test output. Returns a QTestData reference
                                    that can be used to stream in data.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type">void</html:span>
                                    myTestFunction_data() { <html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>addColumn<html:span
                                        class="operator">&lt;</html:span><html:span class="type"
                                            ><html:a href="qtcore/qstring.html"
                                        >QString</html:a></html:span><html:span class="operator"
                                        >&gt;</html:span>(<html:span class="string"
                                        >"aString"</html:span>); <html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>newRow(<html:span
                                        class="string">"just hello"</html:span>) <html:span
                                        class="operator">&lt;</html:span><html:span class="operator"
                                        >&lt;</html:span>
                                    <html:span class="type"><html:a href="qtcore/qstring.html"
                                            >QString</html:a></html:span>(<html:span class="string"
                                        >"hello"</html:span>); <html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>newRow(<html:span
                                        class="string">"a null string"</html:span>) <html:span
                                        class="operator">&lt;</html:span><html:span class="operator"
                                        >&lt;</html:span>
                                    <html:span class="type"><html:a href="qtcore/qstring.html"
                                            >QString</html:a></html:span>(); }</html:pre>
                                <html:p><html:b>Note:</html:b> This macro can only be used in a
                                    test's data function that is invoked by the test
                                    framework.</html:p>
                                <html:p>See <html:a href="qttestlib-tutorial2-example.html">Data
                                        Driven Testing</html:a> for a more extensive
                                    example.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#addColumn">addColumn</html:a>() and <html:a
                                        href="qtest.html#QFETCH">QFETCH</html:a>().</html:p>
                                <!-- @@@newRow -->
                                <!-- $$$qExec[overload1]$$$qExecQObject*intchar** -->
                                <html:h3 class="fn" id="qExec"><html:a name="qExec"
                                        ></html:a><html:span class="type">int</html:span>
                                        QTest::<html:span class="name">qExec</html:span>(<html:span
                                        class="type"><html:a href="qtcore/qobject.html"
                                            >QObject</html:a></html:span> *<html:i>
                                        testObject</html:i>, <html:span class="type"
                                        >int</html:span><html:i> argc</html:i> = 0, <html:span
                                        class="type">char</html:span> **<html:i> argv</html:i> =
                                    0)</html:h3>
                                <html:p>Executes tests declared in <html:i>testObject</html:i>. In
                                    addition, the private slots
                                        <html:code>initTestCase()</html:code>,
                                        <html:code>cleanupTestCase()</html:code>,
                                        <html:code>init()</html:code> and
                                        <html:code>cleanup()</html:code> are executed if they exist.
                                    See <html:a href="qtest-overview.html#creating-a-test">Creating
                                        a Test</html:a> for more details.</html:p>
                                <html:p>Optionally, the command line arguments <html:i>argc</html:i>
                                    and <html:i>argv</html:i> can be provided. For a list of
                                    recognized arguments, read <html:a
                                        href="qtest-overview.html#qt-test-command-line-arguments">Qt
                                        Test Command Line Arguments</html:a>.</html:p>
                                <html:p>The following example will run all tests in
                                        <html:code>MyTestObject</html:code>:</html:p>
                                <html:pre class="cpp">MyTestObject test1; <html:span class="type"
                                            ><html:a href="qtest.html"
                                        >QTest</html:a></html:span><html:span class="operator"
                                        >::</html:span>qExec(<html:span class="operator"
                                        >&amp;</html:span>test1);</html:pre>
                                <html:p>This function returns 0 if no tests failed, or a value other
                                    than 0 if one or more tests failed or in case of unhandled
                                    exceptions. (Skipped tests do not influence the return
                                    value.)</html:p>
                                <html:p>For stand-alone test applications, the convenience macro
                                        <html:a href="qtest.html#QTEST_MAIN">QTEST_MAIN</html:a>()
                                    can be used to declare a main() function that parses the command
                                    line arguments and executes the tests, avoiding the need to call
                                    this function explicitly.</html:p>
                                <html:p>The return value from this function is also the exit code of
                                    the test application when the <html:a
                                        href="qtest.html#QTEST_MAIN">QTEST_MAIN</html:a>() macro is
                                    used.</html:p>
                                <html:p>For stand-alone test applications, this function should not
                                    be called more than once, as command-line options for logging
                                    test output to files and executing individual test functions
                                    will not behave correctly.</html:p>
                                <html:p>Note: This function is not reentrant, only one test can run
                                    at a time. A test that was executed with qExec() can't run
                                    another test via qExec() and threads are not allowed to call
                                    qExec() simultaneously.</html:p>
                                <html:p>If you have programatically created the arguments, as
                                    opposed to getting them from the arguments in
                                        <html:code>main()</html:code>, it is likely of interest to
                                    use QTest::qExec(<html:a href="qtcore/qobject.html"
                                        >QObject</html:a> *, const <html:a
                                        href="qtcore/qstringlist.html">QStringList</html:a> &amp;)
                                    since it is Unicode safe.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#QTEST_MAIN">QTEST_MAIN</html:a>().</html:p>
                                <!-- @@@qExec -->
                                <!-- $$$qExec$$$qExecQObject*constQStringList& -->
                                <html:h3 class="fn" id="qExec-2"><html:a name="qExec-2"
                                        ></html:a><html:span class="type">int</html:span>
                                        QTest::<html:span class="name">qExec</html:span>(<html:span
                                        class="type"><html:a href="qtcore/qobject.html"
                                            >QObject</html:a></html:span> *<html:i>
                                        testObject</html:i>, const <html:span class="type"><html:a
                                            href="qtcore/qstringlist.html"
                                        >QStringList</html:a></html:span> &amp;<html:i>
                                        arguments</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Behaves identically to <html:a href="qtest.html#qExec"
                                        >qExec</html:a>(<html:a href="qtcore/qobject.html"
                                        >QObject</html:a> *, int, char**) but takes a <html:a
                                        href="qtcore/qstringlist.html">QStringList</html:a> of
                                        <html:i>arguments</html:i> instead of a
                                        <html:code>char**</html:code> list.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <!-- @@@qExec -->
                                <!-- $$$qSleep[overload1]$$$qSleepint -->
                                <html:h3 class="fn" id="qSleep"><html:a name="qSleep"
                                        ></html:a><html:span class="type">void</html:span>
                                        QTest::<html:span class="name">qSleep</html:span>(<html:span
                                        class="type">int</html:span><html:i> ms</html:i>)</html:h3>
                                <html:p>Sleeps for <html:i>ms</html:i> milliseconds, blocking
                                    execution of the test. qSleep() will not do any event processing
                                    and leave your test unresponsive. Network communication might
                                    time out while sleeping. Use <html:a href="qtest.html#qWait"
                                        >qWait</html:a>() to do non-blocking sleeping.</html:p>
                                <html:p><html:i>ms</html:i> must be greater than 0.</html:p>
                                <html:p><html:b>Note:</html:b> The qSleep() function calls either
                                        <html:code>nanosleep()</html:code> on unix or
                                        <html:code>Sleep()</html:code> on windows, so the accuracy
                                    of time spent in qSleep() depends on the operating
                                    system.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>qSleep(<html:span
                                        class="number">250</html:span>);</html:pre>
                                <html:p><html:b>See also </html:b><html:a href="qtest.html#qWait"
                                        >qWait</html:a>().</html:p>
                                <!-- @@@qSleep -->
                                <!-- $$$qWait[overload1]$$$qWaitint -->
                                <html:h3 class="fn" id="qWait"><html:a name="qWait"
                                        ></html:a><html:code>[static] </html:code><html:span
                                        class="type">void</html:span> QTest::<html:span class="name"
                                        >qWait</html:span>(<html:span class="type"
                                        >int</html:span><html:i> ms</html:i>)</html:h3>
                                <html:p>Waits for <html:i>ms</html:i> milliseconds. While waiting,
                                    events will be processed and your test will stay responsive to
                                    user interface events or network communication.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="type">int</html:span> i
                                        <html:span class="operator">=</html:span>
                                    <html:span class="number">0</html:span>; <html:span
                                        class="keyword">while</html:span>
                                    (myNetworkServerNotResponding() <html:span class="operator"
                                        >&amp;</html:span><html:span class="operator"
                                        >&amp;</html:span> i<html:span class="operator"
                                        >+</html:span><html:span class="operator">+</html:span>
                                    <html:span class="operator">&lt;</html:span>
                                    <html:span class="number">50</html:span>) <html:span
                                        class="type"><html:a href="qtest.html"
                                        >QTest</html:a></html:span><html:span class="operator"
                                        >::</html:span>qWait(<html:span class="number"
                                        >250</html:span>);</html:pre>
                                <html:p>The code above will wait until the network server is
                                    responding for a maximum of about 12.5 seconds.</html:p>
                                <html:p><html:b>See also </html:b><html:a href="qtest.html#qSleep"
                                        >QTest::qSleep</html:a>() and <html:a
                                        href="qsignalspy.html#wait"
                                    >QSignalSpy::wait</html:a>().</html:p>
                                <!-- @@@qWait -->
                                <!-- $$$qWaitForWindowActive[overload1]$$$qWaitForWindowActiveQWindow*int -->
                                <html:h3 class="fn" id="qWaitForWindowActive"><html:a
                                        name="qWaitForWindowActive"></html:a><html:code>[static]
                                        </html:code><html:span class="type">bool</html:span>
                                        QTest::<html:span class="name"
                                        >qWaitForWindowActive</html:span>(<html:span class="type"
                                            ><html:a href="qtgui/qwindow.html"
                                        >QWindow</html:a></html:span> *<html:i> window</html:i>,
                                        <html:span class="type">int</html:span><html:i>
                                        timeout</html:i> = 5000)</html:h3>
                                <html:p>Waits for <html:i>timeout</html:i> milliseconds or until the
                                        <html:i>window</html:i> is active.</html:p>
                                <html:p>Returns <html:code>true</html:code> if
                                        <html:code>window</html:code> is active within
                                        <html:i>timeout</html:i> milliseconds, otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#qWaitForWindowExposed"
                                        >QTest::qWaitForWindowExposed</html:a>() and <html:a
                                        href="qtgui/qwindow.html#active-prop"
                                        >QWindow::isActive</html:a>().</html:p>
                                <!-- @@@qWaitForWindowActive -->
                                <!-- $$$qWaitForWindowActive$$$qWaitForWindowActiveQWidget*int -->
                                <html:h3 class="fn" id="qWaitForWindowActive-2"><html:a
                                        name="qWaitForWindowActive-2"></html:a><html:code>[static]
                                        </html:code><html:span class="type">bool</html:span>
                                        QTest::<html:span class="name"
                                        >qWaitForWindowActive</html:span>(<html:span class="type"
                                            ><html:a href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type">int</html:span><html:i>
                                        timeout</html:i> = 1000)</html:h3>
                                <html:p>Waits for <html:i>timeout</html:i> milliseconds or until the
                                        <html:i>widget</html:i>'s window is active.</html:p>
                                <html:p>Returns <html:code>true</html:code> if
                                        <html:code>widget</html:code>'s window is active within
                                        <html:i>timeout</html:i> milliseconds, otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#qWaitForWindowExposed"
                                        >QTest::qWaitForWindowExposed</html:a>() and <html:a
                                        href="qtwidgets/qwidget.html#isActiveWindow-prop"
                                        >QWidget::isActiveWindow</html:a>().</html:p>
                                <!-- @@@qWaitForWindowActive -->
                                <!-- $$$qWaitForWindowExposed[overload1]$$$qWaitForWindowExposedQWindow*int -->
                                <html:h3 class="fn" id="qWaitForWindowExposed"><html:a
                                        name="qWaitForWindowExposed"></html:a><html:code>[static]
                                        </html:code><html:span class="type">bool</html:span>
                                        QTest::<html:span class="name"
                                        >qWaitForWindowExposed</html:span>(<html:span class="type"
                                            ><html:a href="qtgui/qwindow.html"
                                        >QWindow</html:a></html:span> *<html:i> window</html:i>,
                                        <html:span class="type">int</html:span><html:i>
                                        timeout</html:i> = 5000)</html:h3>
                                <html:p>Waits for <html:i>timeout</html:i> milliseconds or until the
                                        <html:i>window</html:i> is exposed. Returns
                                        <html:code>true</html:code> if <html:code>window</html:code>
                                    is exposed within <html:i>timeout</html:i> milliseconds,
                                    otherwise returns <html:code>false</html:code>.</html:p>
                                <html:p>This is mainly useful for asynchronous systems like X11,
                                    where a window will be mapped to screen some time after being
                                    asked to show itself on the screen.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#qWaitForWindowActive"
                                        >QTest::qWaitForWindowActive</html:a>() and <html:a
                                        href="qtgui/qwindow.html#isExposed"
                                        >QWindow::isExposed</html:a>().</html:p>
                                <!-- @@@qWaitForWindowExposed -->
                                <!-- $$$qWaitForWindowExposed$$$qWaitForWindowExposedQWidget*int -->
                                <html:h3 class="fn" id="qWaitForWindowExposed-2"><html:a
                                        name="qWaitForWindowExposed-2"></html:a><html:code>[static]
                                        </html:code><html:span class="type">bool</html:span>
                                        QTest::<html:span class="name"
                                        >qWaitForWindowExposed</html:span>(<html:span class="type"
                                            ><html:a href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type">int</html:span><html:i>
                                        timeout</html:i> = 1000)</html:h3>
                                <html:p>Waits for <html:i>timeout</html:i> milliseconds or until the
                                        <html:i>widget</html:i>'s window is exposed. Returns
                                        <html:code>true</html:code> if
                                    <html:code>widget</html:code>'s window is exposed within
                                        <html:i>timeout</html:i> milliseconds, otherwise returns
                                        <html:code>false</html:code>.</html:p>
                                <html:p>This is mainly useful for asynchronous systems like X11,
                                    where a window will be mapped to screen some time after being
                                    asked to show itself on the screen.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#qWaitForWindowActive"
                                        >QTest::qWaitForWindowActive</html:a>().</html:p>
                                <!-- @@@qWaitForWindowExposed -->
                                <!-- $$$setBenchmarkResult[overload1]$$$setBenchmarkResultqrealQBenchmarkMetric -->
                                <html:h3 class="fn" id="setBenchmarkResult"><html:a
                                        name="setBenchmarkResult"></html:a><html:span class="type"
                                        >void</html:span> QTest::<html:span class="name"
                                        >setBenchmarkResult</html:span>(<html:span class="type"
                                            ><html:a href="qtcore/qtglobal.html#qreal-typedef"
                                            >qreal</html:a></html:span><html:i> result</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtest.html#QBenchmarkMetric-enum"
                                            >QBenchmarkMetric</html:a></html:span><html:i>
                                        metric</html:i>)</html:h3>
                                <html:p>Sets the benchmark result for this test function to
                                        <html:i>result</html:i>.</html:p>
                                <html:p>Use this function if you want to report benchmark results
                                    without using the QBENCHMARK macro. Use <html:i>metric</html:i>
                                    to specify how Qt Test should interpret the results.</html:p>
                                <html:p>The context for the result will be the test function name
                                    and any data tag from the _data function. This function can only
                                    be called once in each test function, subsequent calls will
                                    replace the earlier reported results.</html:p>
                                <html:p>Note that the -iterations command line argument has no
                                    effect on test functions without the QBENCHMARK macro.</html:p>
                                <html:p>This function was introduced in Qt 4.7.</html:p>
                                <!-- @@@setBenchmarkResult -->
                                <!-- $$$toHexRepresentation[overload1]$$$toHexRepresentationconstchar*int -->
                                <html:h3 class="fn" id="toHexRepresentation"><html:a
                                        name="toHexRepresentation"></html:a><html:span class="type"
                                        >char</html:span> * QTest::<html:span class="name"
                                        >toHexRepresentation</html:span>(const <html:span
                                        class="type">char</html:span> *<html:i> ba</html:i>,
                                        <html:span class="type">int</html:span><html:i>
                                        length</html:i>)</html:h3>
                                <html:p>Returns a pointer to a string that is the string
                                        <html:i>ba</html:i> represented as a space-separated
                                    sequence of hex characters. If the input is considered too long,
                                    it is truncated. A trucation is indicated in the returned string
                                    as an ellipsis at the end.</html:p>
                                <html:p><html:i>length</html:i> is the length of the string
                                        <html:i>ba</html:i>.</html:p>
                                <!-- @@@toHexRepresentation -->
                                <!-- $$$toString[overload1]$$$toStringconstT& -->
                                <html:h3 class="fn" id="toString"><html:a name="toString"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type">T</html:span> &amp;<html:i>
                                        value</html:i>)</html:h3>
                                <html:p>Returns a textual representation of <html:i>value</html:i>.
                                    This function is used by <html:a href="qtest.html#QCOMPARE"
                                        >QCOMPARE</html:a>() to output verbose information in case
                                    of a test failure.</html:p>
                                <html:p>You can add specializations of this function to your test to
                                    enable verbose output.</html:p>
                                <html:p><html:b>Note:</html:b> The caller of toString() must delete
                                    the returned data using <html:code>delete[]</html:code>. Your
                                    implementation should return a string created with
                                        <html:code>new[]</html:code> or <html:a
                                        href="qtcore/qbytearray.html#qstrdup"
                                    >qstrdup</html:a>().</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="keyword"
                                        >namespace</html:span>
                                    <html:span class="type"><html:a href="qtest.html"
                                        >QTest</html:a></html:span> { <html:span class="keyword"
                                        >template</html:span><html:span class="operator"
                                        >&lt;</html:span><html:span class="operator"
                                        >&gt;</html:span>
                                    <html:span class="type">char</html:span>
                                    <html:span class="operator">*</html:span>toString(<html:span
                                        class="keyword">const</html:span> MyPoint <html:span
                                        class="operator">&amp;</html:span>point) { <html:span
                                        class="type"><html:a href="qtcore/qbytearray.html"
                                            >QByteArray</html:a></html:span> ba <html:span
                                        class="operator">=</html:span>
                                    <html:span class="string">"MyPoint("</html:span>; ba <html:span
                                        class="operator">+</html:span><html:span class="operator"
                                        >=</html:span>
                                    <html:span class="type"><html:a href="qtcore/qbytearray.html"
                                            >QByteArray</html:a></html:span><html:span
                                        class="operator">::</html:span>number(point<html:span
                                        class="operator">.</html:span>x()) <html:span
                                        class="operator">+</html:span>
                                    <html:span class="string">", "</html:span>
                                    <html:span class="operator">+</html:span>
                                    <html:span class="type"><html:a href="qtcore/qbytearray.html"
                                            >QByteArray</html:a></html:span><html:span
                                        class="operator">::</html:span>number(point<html:span
                                        class="operator">.</html:span>y()); ba <html:span
                                        class="operator">+</html:span><html:span class="operator"
                                        >=</html:span>
                                    <html:span class="string">")"</html:span>; <html:span
                                        class="keyword">return</html:span> qstrdup(ba<html:span
                                        class="operator">.</html:span>data()); } }</html:pre>
                                <html:p>The example above defines a toString() specialization for a
                                    class called <html:code>MyPoint</html:code>. Whenever a
                                    comparison of two instances of <html:code>MyPoint</html:code>
                                    fails, <html:a href="qtest.html#QCOMPARE">QCOMPARE</html:a>()
                                    will call this function to output the contents of
                                        <html:code>MyPoint</html:code> to the test log.</html:p>
                                <html:p><html:b>See also </html:b><html:a href="qtest.html#QCOMPARE"
                                        >QCOMPARE</html:a>().</html:p>
                                <!-- @@@toString -->
                                <!-- $$$toString$$$toStringconstQLatin1String& -->
                                <html:h3 class="fn" id="toString-4"><html:a name="toString-4"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type"><html:a
                                            href="qtcore/qlatin1string.html"
                                        >QLatin1String</html:a></html:span> &amp;<html:i>
                                        string</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a textual representation of the given
                                        <html:i>string</html:i>.</html:p>
                                <!-- @@@toString -->
                                <!-- $$$toString$$$toStringconstQString& -->
                                <html:h3 class="fn" id="toString-5"><html:a name="toString-5"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type"><html:a href="qtcore/qstring.html"
                                            >QString</html:a></html:span> &amp;<html:i>
                                        string</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a textual representation of the given
                                        <html:i>string</html:i>.</html:p>
                                <!-- @@@toString -->
                                <!-- $$$toString$$$toStringconstQByteArray& -->
                                <html:h3 class="fn" id="toString-6"><html:a name="toString-6"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type"><html:a
                                            href="qtcore/qbytearray.html"
                                        >QByteArray</html:a></html:span> &amp;<html:i>
                                    ba</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a textual representation of the byte array
                                        <html:i>ba</html:i>.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#toHexRepresentation"
                                        >QTest::toHexRepresentation</html:a>().</html:p>
                                <!-- @@@toString -->
                                <!-- $$$toString$$$toStringconstQTime& -->
                                <html:h3 class="fn" id="toString-7"><html:a name="toString-7"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type"><html:a href="qtcore/qtime.html"
                                            >QTime</html:a></html:span> &amp;<html:i>
                                    time</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a textual representation of the given
                                        <html:i>time</html:i>.</html:p>
                                <!-- @@@toString -->
                                <!-- $$$toString$$$toStringconstQDate& -->
                                <html:h3 class="fn" id="toString-8"><html:a name="toString-8"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type"><html:a href="qtcore/qdate.html"
                                            >QDate</html:a></html:span> &amp;<html:i>
                                    date</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a textual representation of the given
                                        <html:i>date</html:i>.</html:p>
                                <!-- @@@toString -->
                                <!-- $$$toString$$$toStringconstQDateTime& -->
                                <html:h3 class="fn" id="toString-9"><html:a name="toString-9"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type"><html:a href="qtcore/qdatetime.html"
                                            >QDateTime</html:a></html:span> &amp;<html:i>
                                        dateTime</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a textual representation of the date and time
                                    specified by <html:i>dateTime</html:i>.</html:p>
                                <!-- @@@toString -->
                                <!-- $$$toString$$$toStringconstQChar& -->
                                <html:h3 class="fn" id="toString-10"><html:a name="toString-10"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type"><html:a href="qtcore/qchar.html"
                                            >QChar</html:a></html:span> &amp;<html:i>
                                        character</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a textual representation of the given
                                        <html:i>character</html:i>.</html:p>
                                <!-- @@@toString -->
                                <!-- $$$toString$$$toStringconstQPoint& -->
                                <html:h3 class="fn" id="toString-11"><html:a name="toString-11"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type"><html:a href="qtcore/qpoint.html"
                                            >QPoint</html:a></html:span> &amp;<html:i>
                                        point</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a textual representation of the given
                                        <html:i>point</html:i>.</html:p>
                                <!-- @@@toString -->
                                <!-- $$$toString$$$toStringconstQSize& -->
                                <html:h3 class="fn" id="toString-12"><html:a name="toString-12"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type"><html:a href="qtcore/qsize.html"
                                            >QSize</html:a></html:span> &amp;<html:i>
                                    size</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a textual representation of the given
                                        <html:i>size</html:i>.</html:p>
                                <!-- @@@toString -->
                                <!-- $$$toString$$$toStringconstQRect& -->
                                <html:h3 class="fn" id="toString-13"><html:a name="toString-13"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type"><html:a href="qtcore/qrect.html"
                                            >QRect</html:a></html:span> &amp;<html:i>
                                        rectangle</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a textual representation of the given
                                        <html:i>rectangle</html:i>.</html:p>
                                <!-- @@@toString -->
                                <!-- $$$toString$$$toStringconstQUrl& -->
                                <html:h3 class="fn" id="toString-14"><html:a name="toString-14"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type"><html:a href="qtcore/qurl.html"
                                            >QUrl</html:a></html:span> &amp;<html:i>
                                    url</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a textual representation of the given
                                        <html:i>url</html:i>.</html:p>
                                <html:p>This function was introduced in Qt 4.4.</html:p>
                                <!-- @@@toString -->
                                <!-- $$$toString$$$toStringconstQPointF& -->
                                <html:h3 class="fn" id="toString-15"><html:a name="toString-15"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type"><html:a href="qtcore/qpointf.html"
                                            >QPointF</html:a></html:span> &amp;<html:i>
                                        point</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a textual representation of the given
                                        <html:i>point</html:i>.</html:p>
                                <!-- @@@toString -->
                                <!-- $$$toString$$$toStringconstQSizeF& -->
                                <html:h3 class="fn" id="toString-16"><html:a name="toString-16"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type"><html:a href="qtcore/qsizef.html"
                                            >QSizeF</html:a></html:span> &amp;<html:i>
                                    size</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a textual representation of the given
                                        <html:i>size</html:i>.</html:p>
                                <!-- @@@toString -->
                                <!-- $$$toString$$$toStringconstQRectF& -->
                                <html:h3 class="fn" id="toString-17"><html:a name="toString-17"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type"><html:a href="qtcore/qrectf.html"
                                            >QRectF</html:a></html:span> &amp;<html:i>
                                        rectangle</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a textual representation of the given
                                        <html:i>rectangle</html:i>.</html:p>
                                <!-- @@@toString -->
                                <!-- $$$toString$$$toStringconstQVariant& -->
                                <html:h3 class="fn" id="toString-18"><html:a name="toString-18"
                                        ></html:a><html:span class="type">char</html:span> *
                                        QTest::<html:span class="name">toString</html:span>(const
                                        <html:span class="type"><html:a href="qtcore/qvariant.html"
                                            >QVariant</html:a></html:span> &amp;<html:i>
                                        variant</html:i>)</html:h3>
                                <html:p>This is an overloaded function.</html:p>
                                <html:p>Returns a textual representation of the given
                                        <html:i>variant</html:i>.</html:p>
                                <!-- @@@toString -->
                                <!-- $$$touchEvent[overload1]$$$touchEventQWidget*QTouchDevice*bool -->
                                <html:h3 class="fn" id="touchEvent"><html:a name="touchEvent"
                                        ></html:a><html:span class="type"><html:a
                                            href="qtest-qtoucheventsequence.html"
                                            >QTouchEventSequence</html:a></html:span>
                                        QTest::<html:span class="name"
                                        >touchEvent</html:span>(<html:span class="type"><html:a
                                            href="qtwidgets/qwidget.html"
                                        >QWidget</html:a></html:span> *<html:i> widget</html:i>,
                                        <html:span class="type"><html:a
                                            href="qtgui/qtouchdevice.html"
                                        >QTouchDevice</html:a></html:span> *<html:i>
                                    device</html:i>, <html:span class="type"
                                        >bool</html:span><html:i> autoCommit</html:i> =
                                    true)</html:h3>
                                <html:p>Creates and returns a <html:a
                                        href="qtest-qtoucheventsequence.html"
                                        >QTouchEventSequence</html:a> for the
                                        <html:i>device</html:i> to simulate events for
                                        <html:i>widget</html:i>.</html:p>
                                <html:p>When adding touch events to the sequence,
                                        <html:i>widget</html:i> will also be used to translate the
                                    position provided to screen coordinates, unless another widget
                                    is provided in the respective calls to press(), move()
                                    etc.</html:p>
                                <html:p>The touch events are committed to the event system when the
                                    destructor of the <html:a href="qtest-qtoucheventsequence.html"
                                        >QTouchEventSequence</html:a> is called (ie when the object
                                    returned runs out of scope), unless <html:i>autoCommit</html:i>
                                    is set to false. When <html:i>autoCommit</html:i> is false,
                                    commit() has to be called manually.</html:p>
                                <!-- @@@touchEvent -->
                                <!-- $$$touchEvent$$$touchEventQWindow*QTouchDevice*bool -->
                                <html:h3 class="fn" id="touchEvent-2"><html:a name="touchEvent-2"
                                        ></html:a><html:span class="type"><html:a
                                            href="qtest-qtoucheventsequence.html"
                                            >QTouchEventSequence</html:a></html:span>
                                        QTest::<html:span class="name"
                                        >touchEvent</html:span>(<html:span class="type"><html:a
                                            href="qtgui/qwindow.html">QWindow</html:a></html:span>
                                        *<html:i> window</html:i>, <html:span class="type"><html:a
                                            href="qtgui/qtouchdevice.html"
                                        >QTouchDevice</html:a></html:span> *<html:i>
                                    device</html:i>, <html:span class="type"
                                        >bool</html:span><html:i> autoCommit</html:i> =
                                    true)</html:h3>
                                <html:p>Creates and returns a <html:a
                                        href="qtest-qtoucheventsequence.html"
                                        >QTouchEventSequence</html:a> for the
                                        <html:i>device</html:i> to simulate events for
                                        <html:i>window</html:i>.</html:p>
                                <html:p>When adding touch events to the sequence,
                                        <html:i>window</html:i> will also be used to translate the
                                    position provided to screen coordinates, unless another window
                                    is provided in the respective calls to press(), move()
                                    etc.</html:p>
                                <html:p>The touch events are committed to the event system when the
                                    destructor of the <html:a href="qtest-qtoucheventsequence.html"
                                        >QTouchEventSequence</html:a> is called (ie when the object
                                    returned runs out of scope), unless <html:i>autoCommit</html:i>
                                    is set to false. When <html:i>autoCommit</html:i> is false,
                                    commit() has to be called manually.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <!-- @@@touchEvent -->
                            </html:div>
                            <html:div class="macros">
                                <html:h2>Macro Documentation</html:h2>
                                <!-- $$$QBENCHMARK[overload1]$$$QBENCHMARK -->
                                <html:h3 class="fn" id="QBENCHMARK"><html:a name="QBENCHMARK"
                                        ></html:a><html:span class="name"
                                    >QBENCHMARK</html:span></html:h3>
                                <html:p>This macro is used to measure the performance of code within
                                    a test. The code to be benchmarked is contained within a code
                                    block following this macro.</html:p>
                                <html:p>For example:</html:p>
                                <html:pre class="cpp"><html:span class="type">void</html:span>
                                        TestBenchmark<html:span class="operator"
                                    >::</html:span>simple() { <html:span class="type"><html:a
                                            href="qtcore/qstring.html">QString</html:a></html:span>
                                    str1 <html:span class="operator">=</html:span>
                                        QLatin1String(<html:span class="string">"This is a test
                                        string"</html:span>); <html:span class="type"><html:a
                                            href="qtcore/qstring.html">QString</html:a></html:span>
                                    str2 <html:span class="operator">=</html:span>
                                        QLatin1String(<html:span class="string">"This is a test
                                        string"</html:span>); QCOMPARE(str1<html:span
                                        class="operator"
                                        >.</html:span>localeAwareCompare(str2)<html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">0</html:span>); QBENCHMARK {
                                        str1<html:span class="operator"
                                    >.</html:span>localeAwareCompare(str2); } }</html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest-overview.html#creating-a-benchmark">Creating a
                                        Benchmark</html:a> and <html:a
                                        href="qttestlib-tutorial5-example.html">Writing a
                                        Benchmark</html:a>.</html:p>
                                <!-- @@@QBENCHMARK -->
                                <!-- $$$QBENCHMARK_ONCE[overload1]$$$QBENCHMARK_ONCE -->
                                <html:h3 class="fn" id="QBENCHMARK_ONCE"><html:a
                                        name="QBENCHMARK_ONCE"></html:a><html:span class="name"
                                        >QBENCHMARK_ONCE</html:span></html:h3>
                                <html:p>The QBENCHMARK_ONCE macro is for measuring performance of a
                                    code block by running it once.</html:p>
                                <html:p>This macro is used to measure the performance of code within
                                    a test. The code to be benchmarked is contained within a code
                                    block following this macro.</html:p>
                                <html:p>Unlike QBENCHMARK, the contents of the contained code block
                                    is only run once. The elapsed time will be reported as "0" if
                                    it's to short to be measured by the selected backend.
                                    (Use)</html:p>
                                <html:p>This function was introduced in Qt 4.6.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest-overview.html#creating-a-benchmark">Creating a
                                        Benchmark</html:a> and <html:a
                                        href="qttestlib-tutorial5-example.html">Writing a
                                        Benchmark</html:a>.</html:p>
                                <!-- @@@QBENCHMARK_ONCE -->
                                <!-- $$$QCOMPARE[overload1]$$$QCOMPARE -->
                                <html:h3 class="fn" id="QCOMPARE"><html:a name="QCOMPARE"
                                        ></html:a><html:span class="name"
                                        >QCOMPARE</html:span>(<html:i> actual</html:i>, <html:i>
                                        expected</html:i>)</html:h3>
                                <html:p>The QCOMPARE macro compares an <html:i>actual</html:i> value
                                    to an <html:i>expected</html:i> value using the equals operator.
                                    If <html:i>actual</html:i> and <html:i>expected</html:i> are
                                    identical, execution continues. If not, a failure is recorded in
                                    the test log and the test won't be executed further.</html:p>
                                <html:p>In the case of comparing floats and doubles, <html:a
                                        href="qtcore/qtglobal.html#qFuzzyCompare"
                                        >qFuzzyCompare</html:a>() is used for comparing. This means
                                    that comparing to 0 will likely fail. One solution to this is to
                                    compare to 1, and add 1 to the produced output.</html:p>
                                <html:p>QCOMPARE tries to output the contents of the values if the
                                    comparison fails, so it is visible from the test log why the
                                    comparison failed.</html:p>
                                <html:p>QCOMPARE is very strict on the data types. Both
                                        <html:i>actual</html:i> and <html:i>expected</html:i> have
                                    to be of the same type, otherwise the test won't compile. This
                                    prohibits unspecified behavior from being introduced; that is
                                    behavior that usually occurs when the compiler implicitly casts
                                    the argument.</html:p>
                                <html:p>For your own classes, you can use <html:a
                                        href="qtest.html#toString">QTest::toString</html:a>() to
                                    format values for outputting into the test log.</html:p>
                                <html:p><html:b>Note: </html:b>This macro can only be used in a test
                                    function that is invoked by the test
                                    framework.</html:p><html:p>Example:</html:p>
                                <html:pre class="cpp">QCOMPARE(<html:span class="type"><html:a
                                            href="qtcore/qstring.html"
                                        >QString</html:a></html:span>(<html:span class="string"
                                        >"hello"</html:span>)<html:span class="operator"
                                        >.</html:span>toUpper()<html:span class="operator"
                                        >,</html:span>
                                    <html:span class="type"><html:a href="qtcore/qstring.html"
                                            >QString</html:a></html:span>(<html:span class="string"
                                        >"HELLO"</html:span>));</html:pre>
                                <html:p><html:b>See also </html:b><html:a href="qtest.html#QVERIFY"
                                        >QVERIFY</html:a>(), <html:a href="qtest.html#QTRY_COMPARE"
                                        >QTRY_COMPARE</html:a>(), and <html:a
                                        href="qtest.html#toString"
                                    >QTest::toString</html:a>().</html:p>
                                <!-- @@@QCOMPARE -->
                                <!-- $$$QEXPECT_FAIL[overload1]$$$QEXPECT_FAIL -->
                                <html:h3 class="fn" id="QEXPECT_FAIL"><html:a name="QEXPECT_FAIL"
                                        ></html:a><html:span class="name"
                                        >QEXPECT_FAIL</html:span>(<html:i> dataIndex</html:i>,
                                        <html:i> comment</html:i>, <html:i> mode</html:i>)</html:h3>
                                <html:p>The QEXPECT_FAIL() macro marks the next <html:a
                                        href="qtest.html#QCOMPARE">QCOMPARE</html:a>() or <html:a
                                        href="qtest.html#QVERIFY">QVERIFY</html:a>() as an expected
                                    failure. Instead of adding a failure to the test log, an
                                    expected failure will be reported.</html:p>
                                <html:p>If a <html:a href="qtest.html#QVERIFY">QVERIFY</html:a>() or
                                        <html:a href="qtest.html#QCOMPARE">QCOMPARE</html:a>() is
                                    marked as an expected failure, but passes instead, an unexpected
                                    pass (XPASS) is written to the test log.</html:p>
                                <html:p>The parameter <html:i>dataIndex</html:i> describes for which
                                    entry in the test data the failure is expected. Pass an empty
                                    string (<html:code>""</html:code>) if the failure is expected
                                    for all entries or if no test data exists.</html:p>
                                <html:p><html:i>comment</html:i> will be appended to the test log
                                    for the expected failure.</html:p>
                                <html:p><html:i>mode</html:i> is a <html:a
                                        href="qtest.html#TestFailMode-enum"
                                        >QTest::TestFailMode</html:a> and sets whether the test
                                    should continue to execute or not.</html:p>
                                <html:p><html:b>Note:</html:b> This macro can only be used in a test
                                    function that is invoked by the test framework.</html:p>
                                <html:p>Example 1:</html:p>
                                <html:pre class="cpp">QEXPECT_FAIL(<html:span class="string"
                                        >""</html:span><html:span class="operator">,</html:span>
                                    <html:span class="string">"Will fix in the next
                                        release"</html:span><html:span class="operator"
                                        >,</html:span> Continue); QCOMPARE(i<html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">42</html:span>); QCOMPARE(j<html:span
                                        class="operator">,</html:span>
                                    <html:span class="number">43</html:span>);</html:pre>
                                <html:p>In the example above, an expected fail will be written into
                                    the test output if the variable <html:code>i</html:code> is not
                                    42. If the variable <html:code>i</html:code> is 42, an
                                    unexpected pass is written instead. The QEXPECT_FAIL() has no
                                    influence on the second <html:a href="qtest.html#QCOMPARE"
                                        >QCOMPARE</html:a>() statement in the example.</html:p>
                                <html:p>Example 2:</html:p>
                                <html:pre class="cpp">QEXPECT_FAIL(<html:span class="string"
                                        >"data27"</html:span><html:span class="operator"
                                        >,</html:span>
                                    <html:span class="string">"Oh my, this is soooo
                                        broken"</html:span><html:span class="operator">,</html:span>
                                    Abort); QCOMPARE(i<html:span class="operator">,</html:span>
                                    <html:span class="number">42</html:span>);</html:pre>
                                <html:p>The above testfunction will not continue executing for the
                                    test data entry <html:code>data27</html:code>.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#TestFailMode-enum"
                                        >QTest::TestFailMode</html:a>, <html:a
                                        href="qtest.html#QVERIFY">QVERIFY</html:a>(), and <html:a
                                        href="qtest.html#QCOMPARE">QCOMPARE</html:a>().</html:p>
                                <!-- @@@QEXPECT_FAIL -->
                                <!-- $$$QFAIL[overload1]$$$QFAIL -->
                                <html:h3 class="fn" id="QFAIL"><html:a name="QFAIL"
                                        ></html:a><html:span class="name">QFAIL</html:span>(<html:i>
                                        message</html:i>)</html:h3>
                                <html:p>This macro can be used to force a test failure. The test
                                    stops executing and the failure <html:i>message</html:i> is
                                    appended to the test log.</html:p>
                                <html:p><html:b>Note:</html:b> This macro can only be used in a test
                                    function that is invoked by the test framework.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="keyword">if</html:span>
                                        (<html:span class="keyword">sizeof</html:span>(<html:span
                                        class="type">int</html:span>) <html:span class="operator"
                                        >!</html:span><html:span class="operator">=</html:span>
                                    <html:span class="number">4</html:span>) QFAIL(<html:span
                                        class="string">"This test has not been ported to this
                                        platform yet."</html:span>);</html:pre>
                                <!-- @@@QFAIL -->
                                <!-- $$$QFETCH[overload1]$$$QFETCH -->
                                <html:h3 class="fn" id="QFETCH"><html:a name="QFETCH"
                                        ></html:a><html:span class="name"
                                        >QFETCH</html:span>(<html:i> type</html:i>, <html:i>
                                        name</html:i>)</html:h3>
                                <html:p>The fetch macro creates a local variable named
                                        <html:i>name</html:i> with the type <html:i>type</html:i> on
                                    the stack. <html:i>name</html:i> has to match the element name
                                    from the test's data. If no such element exists, the test will
                                    assert.</html:p>
                                <html:p>Assuming a test has the following data:</html:p>
                                <html:pre class="cpp"><html:span class="type">void</html:span>
                                        TestQString<html:span class="operator"
                                    >::</html:span>toInt_data() { <html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>addColumn<html:span
                                        class="operator">&lt;</html:span><html:span class="type"
                                            ><html:a href="qtcore/qstring.html"
                                        >QString</html:a></html:span><html:span class="operator"
                                        >&gt;</html:span>(<html:span class="string"
                                        >"aString"</html:span>); <html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>addColumn<html:span
                                        class="operator">&lt;</html:span><html:span class="type"
                                        >int</html:span><html:span class="operator"
                                        >&gt;</html:span>(<html:span class="string"
                                        >"expected"</html:span>); <html:span class="type"><html:a
                                            href="qtest.html">QTest</html:a></html:span><html:span
                                        class="operator">::</html:span>newRow(<html:span
                                        class="string">"positive value"</html:span>) <html:span
                                        class="operator">&lt;</html:span><html:span class="operator"
                                        >&lt;</html:span>
                                    <html:span class="string">"42"</html:span>
                                    <html:span class="operator">&lt;</html:span><html:span
                                        class="operator">&lt;</html:span>
                                    <html:span class="number">42</html:span>; <html:span
                                        class="type"><html:a href="qtest.html"
                                        >QTest</html:a></html:span><html:span class="operator"
                                        >::</html:span>newRow(<html:span class="string">"negative
                                        value"</html:span>) <html:span class="operator"
                                        >&lt;</html:span><html:span class="operator"
                                        >&lt;</html:span>
                                    <html:span class="string">"-42"</html:span>
                                    <html:span class="operator">&lt;</html:span><html:span
                                        class="operator">&lt;</html:span>
                                    <html:span class="operator">-</html:span><html:span
                                        class="number">42</html:span>; <html:span class="type"
                                            ><html:a href="qtest.html"
                                        >QTest</html:a></html:span><html:span class="operator"
                                        >::</html:span>newRow(<html:span class="string"
                                        >"zero"</html:span>) <html:span class="operator"
                                        >&lt;</html:span><html:span class="operator"
                                        >&lt;</html:span>
                                    <html:span class="string">"0"</html:span>
                                    <html:span class="operator">&lt;</html:span><html:span
                                        class="operator">&lt;</html:span>
                                    <html:span class="number">0</html:span>; }</html:pre>
                                <html:p>The test data has two elements, a <html:a
                                        href="qtcore/qstring.html">QString</html:a> called
                                        <html:code>aString</html:code> and an integer called
                                        <html:code>expected</html:code>. To fetch these values in
                                    the actual test:</html:p>
                                <html:pre class="cpp"><html:span class="type">void</html:span>
                                        TestQString<html:span class="operator">::</html:span>toInt()
                                    { QFETCH(<html:span class="type"><html:a
                                            href="qtcore/qstring.html"
                                        >QString</html:a></html:span><html:span class="operator"
                                        >,</html:span> aString); QFETCH(<html:span class="type"
                                        >int</html:span><html:span class="operator">,</html:span>
                                    expected); QCOMPARE(aString<html:span class="operator"
                                        >.</html:span>toInt()<html:span class="operator"
                                        >,</html:span> expected); }</html:pre>
                                <html:p><html:code>aString</html:code> and
                                        <html:code>expected</html:code> are variables on the stack
                                    that are initialized with the current test data.</html:p>
                                <html:p><html:b>Note:</html:b> This macro can only be used in a test
                                    function that is invoked by the test framework. The test
                                    function must have a _data function.</html:p>
                                <!-- @@@QFETCH -->
                                <!-- $$$QFINDTESTDATA[overload1]$$$QFINDTESTDATA -->
                                <html:h3 class="fn" id="QFINDTESTDATA"><html:a name="QFINDTESTDATA"
                                        ></html:a><html:span class="name"
                                        >QFINDTESTDATA</html:span>(<html:i>
                                    filename</html:i>)</html:h3>
                                <html:p>Returns a <html:a href="qtcore/qstring.html"
                                        >QString</html:a> for the testdata file referred to by
                                        <html:i>filename</html:i>, or an empty <html:a
                                        href="qtcore/qstring.html">QString</html:a> if the testdata
                                    file could not be found.</html:p>
                                <html:p>This macro allows the test to load data from an external
                                    file without hardcoding an absolute filename into the test, or
                                    using relative paths which may be error prone.</html:p>
                                <html:p>The returned path will be the first path from the following
                                    list which resolves to an existing file or directory:</html:p>
                                <html:ul>
                                    <html:li><html:i>filename</html:i> relative to <html:a
                                            href="qtcore/qcoreapplication.html#applicationDirPath"
                                            >QCoreApplication::applicationDirPath</html:a>() (only
                                        if a <html:a href="qtcore/qcoreapplication.html"
                                            >QCoreApplication</html:a> or <html:a
                                            href="qtwidgets/qapplication.html">QApplication</html:a>
                                        object has been created).</html:li>
                                    <html:li><html:i>filename</html:i> relative to the test's
                                        standard install directory (<html:a
                                            href="qtcore/qlibraryinfo.html#LibraryLocation-enum"
                                            >QLibraryInfo::TestsPath</html:a> with the lowercased
                                        testcase name appended).</html:li>
                                    <html:li><html:i>filename</html:i> relative to the directory
                                        containing the source file from which QFINDTESTDATA is
                                        invoked.</html:li>
                                </html:ul>
                                <html:p>If the named file/directory does not exist at any of these
                                    locations, a warning is printed to the test log.</html:p>
                                <html:p>For example, in this code:</html:p>
                                <html:pre class="cpp"><html:span class="comment">// Source:
                                        /home/user/sources/myxmlparser/tests/tst_myxmlparser/tst_myxmlparser.cpp</html:span>
                                    <html:span class="comment">// Build:
                                        /home/user/build/myxmlparser/tests/tst_myxmlparser</html:span>
                                    <html:span class="comment">// Qt:
                                        /usr/local/Qt-5.0.0</html:span>
                                    <html:span class="type">void</html:span>
                                        tst_MyXmlParser<html:span class="operator"
                                    >::</html:span>parse() { MyXmlParser parser; <html:span
                                        class="type"><html:a href="qtcore/qstring.html"
                                            >QString</html:a></html:span> input <html:span
                                        class="operator">=</html:span> QFINDTESTDATA(<html:span
                                        class="string">"testxml/simple1.xml"</html:span>);
                                        QVERIFY(parser<html:span class="operator"
                                    >.</html:span>parse(input)); }</html:pre>
                                <html:p>The testdata file will be resolved as the first existing
                                    file from:</html:p>
                                <html:ul>
                                    <html:li><html:code>/home/user/build/myxmlparser/tests/tst_myxmlparser/testxml/simple1.xml</html:code></html:li>
                                    <html:li><html:code>/usr/local/Qt-5.0.0/tests/tst_myxmlparser/testxml/simple1.xml</html:code></html:li>
                                    <html:li><html:code>/home/user/sources/myxmlparser/tests/tst_myxmlparser/testxml/simple1.xml</html:code></html:li>
                                </html:ul>
                                <html:p>This allows the test to find its testdata regardless of
                                    whether the test has been installed, and regardless of whether
                                    the test's build tree is equal to the test's source
                                    tree.</html:p>
                                <html:p><html:b>Note:</html:b> reliable detection of testdata from
                                    the source directory requires either that qmake is used, or the
                                        <html:code>QT_TESTCASE_BUILDDIR</html:code> macro is defined
                                    to point to the working directory from which the compiler is
                                    invoked, or only absolute paths to the source files are passed
                                    to the compiler. Otherwise, the absolute path of the source
                                    directory cannot be determined.</html:p>
                                <html:p><html:b>Note:</html:b> For tests that use the <html:a
                                        href="qtest.html#QTEST_APPLESS_MAIN"
                                        >QTEST_APPLESS_MAIN</html:a>() macro to generate a
                                        <html:code>main()</html:code> function,
                                        <html:code>QFINDTESTDATA</html:code> will not attempt to
                                    find test data relative to <html:a
                                        href="qtcore/qcoreapplication.html#applicationDirPath"
                                        >QCoreApplication::applicationDirPath</html:a>(). In
                                    practice, this means that tests using
                                        <html:code>QTEST_APPLESS_MAIN()</html:code> will fail to
                                    find their test data if run from a shadow build tree.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <!-- @@@QFINDTESTDATA -->
                                <!-- $$$QSKIP[overload1]$$$QSKIP -->
                                <html:h3 class="fn" id="QSKIP"><html:a name="QSKIP"
                                        ></html:a><html:span class="name">QSKIP</html:span>(<html:i>
                                        description</html:i>)</html:h3>
                                <html:p>If called from a test function, the QSKIP() macro stops
                                    execution of the test without adding a failure to the test log.
                                    You can use it to skip tests that wouldn't make sense in the
                                    current configuration. The text <html:i>description</html:i> is
                                    appended to the test log and should contain an explanation of
                                    why the test couldn't be executed.</html:p>
                                <html:p>If the test is data-driven, each call to QSKIP() will skip
                                    only the current row of test data, so an unconditional call to
                                    QSKIP will produce one skip message in the test log for each row
                                    of test data.</html:p>
                                <html:p>If called from an _data function, the QSKIP() macro will
                                    stop execution of the _data function and will prevent execution
                                    of the associated test function.</html:p>
                                <html:p>If called from initTestCase() or initTestCase_data(), the
                                    QSKIP() macro will skip all test and _data functions.</html:p>
                                <html:p><html:b>Note:</html:b> This macro can only be used in a test
                                    function or _data function that is invoked by the test
                                    framework.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="keyword">if</html:span>
                                        (<html:span class="operator">!</html:span><html:span
                                        class="type">QSqlDatabase</html:span><html:span
                                        class="operator">::</html:span>drivers()<html:span
                                        class="operator">.</html:span>contains(<html:span
                                        class="string">"SQLITE"</html:span>)) QSKIP(<html:span
                                        class="string">"This test requires the SQLITE database
                                        driver"</html:span>);</html:pre>
                                <!-- @@@QSKIP -->
                                <!-- $$$QTEST[overload1]$$$QTEST -->
                                <html:h3 class="fn" id="QTEST"><html:a name="QTEST"
                                        ></html:a><html:span class="name">QTEST</html:span>(<html:i>
                                        actual</html:i>, <html:i> testElement</html:i>)</html:h3>
                                <html:p>QTEST() is a convenience macro for <html:a
                                        href="qtest.html#QCOMPARE">QCOMPARE</html:a>() that compares
                                    the value <html:i>actual</html:i> with the element
                                        <html:i>testElement</html:i> from the test's data. If there
                                    is no such element, the test asserts.</html:p>
                                <html:p>Apart from that, QTEST() behaves exactly as <html:a
                                        href="qtest.html#QCOMPARE">QCOMPARE</html:a>().</html:p>
                                <html:p>Instead of writing:</html:p>
                                <html:pre class="cpp">QFETCH(<html:span class="type"><html:a
                                            href="qtcore/qstring.html"
                                        >QString</html:a></html:span><html:span class="operator"
                                        >,</html:span> myString); QCOMPARE(<html:span class="type"
                                            ><html:a href="qtcore/qstring.html"
                                        >QString</html:a></html:span>(<html:span class="string"
                                        >"hello"</html:span>)<html:span class="operator"
                                        >.</html:span>toUpper()<html:span class="operator"
                                        >,</html:span> myString);</html:pre>
                                <html:p>you can write:</html:p>
                                <html:pre class="cpp">QTEST(<html:span class="type"><html:a
                                            href="qtcore/qstring.html"
                                        >QString</html:a></html:span>(<html:span class="string"
                                        >"hello"</html:span>)<html:span class="operator"
                                        >.</html:span>toUpper()<html:span class="operator"
                                        >,</html:span>
                                    <html:span class="string">"myString"</html:span>);</html:pre>
                                <html:p><html:b>See also </html:b><html:a href="qtest.html#QCOMPARE"
                                        >QCOMPARE</html:a>().</html:p>
                                <!-- @@@QTEST -->
                                <!-- $$$QTEST_APPLESS_MAIN[overload1]$$$QTEST_APPLESS_MAIN -->
                                <html:h3 class="fn" id="QTEST_APPLESS_MAIN"><html:a
                                        name="QTEST_APPLESS_MAIN"></html:a><html:span class="name"
                                        >QTEST_APPLESS_MAIN</html:span>(<html:i>
                                    TestClass</html:i>)</html:h3>
                                <html:p>Implements a main() function that executes all tests in
                                        <html:i>TestClass</html:i>.</html:p>
                                <html:p>Behaves like <html:a href="qtest.html#QTEST_MAIN"
                                        >QTEST_MAIN</html:a>(), but doesn't instantiate a <html:a
                                        href="qtwidgets/qapplication.html">QApplication</html:a>
                                    object. Use this macro for really simple stand-alone non-GUI
                                    tests.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#QTEST_MAIN">QTEST_MAIN</html:a>().</html:p>
                                <!-- @@@QTEST_APPLESS_MAIN -->
                                <!-- $$$QTEST_GUILESS_MAIN[overload1]$$$QTEST_GUILESS_MAIN -->
                                <html:h3 class="fn" id="QTEST_GUILESS_MAIN"><html:a
                                        name="QTEST_GUILESS_MAIN"></html:a><html:span class="name"
                                        >QTEST_GUILESS_MAIN</html:span>(<html:i>
                                    TestClass</html:i>)</html:h3>
                                <html:p>Implements a main() function that instantiates a <html:a
                                        href="qtcore/qcoreapplication.html"
                                        >QCoreApplication</html:a> object and the
                                        <html:i>TestClass</html:i>, and executes all tests in the
                                    order they were defined. Use this macro to build stand-alone
                                    executables.</html:p>
                                <html:p>Behaves like <html:a href="qtest.html#QTEST_MAIN"
                                        >QTEST_MAIN</html:a>(), but instantiates a <html:a
                                        href="qtcore/qcoreapplication.html"
                                        >QCoreApplication</html:a> instead of the <html:a
                                        href="qtwidgets/qapplication.html">QApplication</html:a>
                                    object. Use this macro if your test case doesn't need
                                    functionality offered by <html:a
                                        href="qtwidgets/qapplication.html">QApplication</html:a>,
                                    but the event loop is still necessary.</html:p>
                                <html:p>This function was introduced in Qt 5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#QTEST_MAIN">QTEST_MAIN</html:a>().</html:p>
                                <!-- @@@QTEST_GUILESS_MAIN -->
                                <!-- $$$QTEST_MAIN[overload1]$$$QTEST_MAIN -->
                                <html:h3 class="fn" id="QTEST_MAIN"><html:a name="QTEST_MAIN"
                                        ></html:a><html:span class="name"
                                        >QTEST_MAIN</html:span>(<html:i>
                                    TestClass</html:i>)</html:h3>
                                <html:p>Implements a main() function that instantiates an
                                    application object and the <html:i>TestClass</html:i>, and
                                    executes all tests in the order they were defined. Use this
                                    macro to build stand-alone executables.</html:p>
                                <html:p>If <html:code>QT_WIDGETS_LIB</html:code> is defined, the
                                    application object will be a <html:a
                                        href="qtwidgets/qapplication.html">QApplication</html:a>, if
                                        <html:code>QT_GUI_LIB</html:code> is defined, the
                                    application object will be a <html:a
                                        href="qtgui/qguiapplication.html">QGuiApplication</html:a>,
                                    otherwise it will be a <html:a
                                        href="qtcore/qcoreapplication.html"
                                        >QCoreApplication</html:a>. If qmake is used and the
                                    configuration includes <html:code>QT += widgets</html:code>,
                                    then <html:code>QT_WIDGETS_LIB</html:code> will be defined
                                    automatically. Similarly, if qmake is used and the configuration
                                    includes <html:code>QT += gui</html:code>, then
                                        <html:code>QT_GUI_LIB</html:code> will be defined
                                    automatically.</html:p>
                                <html:p><html:b>Note:</html:b> On platforms that have keypad
                                    navigation enabled by default, this macro will forcefully
                                    disable it if <html:code>QT_WIDGETS_LIB</html:code> is defined.
                                    This is done to simplify the usage of key events when writing
                                    autotests. If you wish to write a test case that uses keypad
                                    navigation, you should enable it either in the
                                        <html:code>initTestCase()</html:code> or
                                        <html:code>init()</html:code> functions of your test case by
                                    calling <html:a
                                        href="qtwidgets/qapplication.html#setNavigationMode"
                                        >QApplication::setNavigationMode</html:a>().</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp"><html:span class="keyword">class</html:span>
                                    TestQString: <html:span class="keyword">public</html:span>
                                    <html:span class="type"><html:a href="qtcore/qobject.html"
                                            >QObject</html:a></html:span> { <html:span
                                        class="operator">.</html:span><html:span class="operator"
                                        >.</html:span><html:span class="operator">.</html:span> };
                                    QTEST_MAIN(TestQString)</html:pre>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#QTEST_APPLESS_MAIN"
                                        >QTEST_APPLESS_MAIN</html:a>(), <html:a
                                        href="qtest.html#QTEST_GUILESS_MAIN"
                                        >QTEST_GUILESS_MAIN</html:a>(), <html:a
                                        href="qtest.html#qExec">QTest::qExec</html:a>(), and <html:a
                                        href="qtwidgets/qapplication.html#setNavigationMode"
                                        >QApplication::setNavigationMode</html:a>().</html:p>
                                <!-- @@@QTEST_MAIN -->
                                <!-- $$$QTRY_COMPARE[overload1]$$$QTRY_COMPARE -->
                                <html:h3 class="fn" id="QTRY_COMPARE"><html:a name="QTRY_COMPARE"
                                        ></html:a><html:span class="name"
                                        >QTRY_COMPARE</html:span>(<html:i> actual</html:i>, <html:i>
                                        expected</html:i>)</html:h3>
                                <html:p>Performs a comparison of the <html:i>actual</html:i> and
                                        <html:i>expected</html:i> values by invoking <html:a
                                        href="qtest.html#QTRY_COMPARE_WITH_TIMEOUT"
                                        >QTRY_COMPARE_WITH_TIMEOUT</html:a>() with a timeout of five
                                    seconds.</html:p>
                                <html:p><html:b>Note: </html:b>This macro can only be used in a test
                                    function that is invoked by the test
                                    framework.</html:p><html:p>This function was introduced in Qt
                                    5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#QTRY_COMPARE_WITH_TIMEOUT"
                                        >QTRY_COMPARE_WITH_TIMEOUT</html:a>(), <html:a
                                        href="qtest.html#QCOMPARE">QCOMPARE</html:a>(), <html:a
                                        href="qtest.html#QVERIFY">QVERIFY</html:a>(), and <html:a
                                        href="qtest.html#QTRY_VERIFY"
                                    >QTRY_VERIFY</html:a>().</html:p>
                                <!-- @@@QTRY_COMPARE -->
                                <!-- $$$QTRY_COMPARE_WITH_TIMEOUT[overload1]$$$QTRY_COMPARE_WITH_TIMEOUT -->
                                <html:h3 class="fn" id="QTRY_COMPARE_WITH_TIMEOUT"><html:a
                                        name="QTRY_COMPARE_WITH_TIMEOUT"></html:a><html:span
                                        class="name">QTRY_COMPARE_WITH_TIMEOUT</html:span>(<html:i>
                                        actual</html:i>, <html:i> expected</html:i>, <html:i>
                                        timeout</html:i>)</html:h3>
                                <html:p>The QTRY_COMPARE_WITH_TIMEOUT() macro is similar to <html:a
                                        href="qtest.html#QCOMPARE">QCOMPARE</html:a>(), but performs
                                    the comparison of the <html:i>actual</html:i> and
                                        <html:i>expected</html:i> values repeatedly, until either
                                    the two values are equal or the <html:i>timeout</html:i> is
                                    reached. Between each comparison, events will be processed. If
                                    the timeout is reached, a failure is recorded in the test log
                                    and the test won't be executed further.</html:p>
                                <html:p><html:b>Note: </html:b>This macro can only be used in a test
                                    function that is invoked by the test
                                    framework.</html:p><html:p>This function was introduced in Qt
                                    5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#QTRY_COMPARE">QTRY_COMPARE</html:a>(),
                                        <html:a href="qtest.html#QCOMPARE">QCOMPARE</html:a>(),
                                        <html:a href="qtest.html#QVERIFY">QVERIFY</html:a>(), and
                                        <html:a href="qtest.html#QTRY_VERIFY"
                                    >QTRY_VERIFY</html:a>().</html:p>
                                <!-- @@@QTRY_COMPARE_WITH_TIMEOUT -->
                                <!-- $$$QTRY_VERIFY[overload1]$$$QTRY_VERIFY -->
                                <html:h3 class="fn" id="QTRY_VERIFY"><html:a name="QTRY_VERIFY"
                                        ></html:a><html:span class="name"
                                        >QTRY_VERIFY</html:span>(<html:i>
                                    condition</html:i>)</html:h3>
                                <html:p>Checks the <html:i>condition</html:i> by invoking <html:a
                                        href="qtest.html#QTRY_VERIFY_WITH_TIMEOUT"
                                        >QTRY_VERIFY_WITH_TIMEOUT</html:a>() with a timeout of five
                                    seconds.</html:p>
                                <html:p><html:b>Note: </html:b>This macro can only be used in a test
                                    function that is invoked by the test
                                    framework.</html:p><html:p>This function was introduced in Qt
                                    5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#QTRY_VERIFY_WITH_TIMEOUT"
                                        >QTRY_VERIFY_WITH_TIMEOUT</html:a>(), <html:a
                                        href="qtest.html#QVERIFY">QVERIFY</html:a>(), <html:a
                                        href="qtest.html#QCOMPARE">QCOMPARE</html:a>(), and <html:a
                                        href="qtest.html#QTRY_COMPARE"
                                    >QTRY_COMPARE</html:a>().</html:p>
                                <!-- @@@QTRY_VERIFY -->
                                <!-- $$$QTRY_VERIFY_WITH_TIMEOUT[overload1]$$$QTRY_VERIFY_WITH_TIMEOUT -->
                                <html:h3 class="fn" id="QTRY_VERIFY_WITH_TIMEOUT"><html:a
                                        name="QTRY_VERIFY_WITH_TIMEOUT"></html:a><html:span
                                        class="name">QTRY_VERIFY_WITH_TIMEOUT</html:span>(<html:i>
                                        condition</html:i>, <html:i> timeout</html:i>)</html:h3>
                                <html:p>The QTRY_VERIFY_WITH_TIMEOUT() macro is similar to <html:a
                                        href="qtest.html#QVERIFY">QVERIFY</html:a>(), but checks the
                                        <html:i>condition</html:i> repeatedly, until either the
                                    condition becomes true or the <html:i>timeout</html:i> is
                                    reached. Between each evaluation, events will be processed. If
                                    the timeout is reached, a failure is recorded in the test log
                                    and the test won't be executed further.</html:p>
                                <html:p><html:b>Note: </html:b>This macro can only be used in a test
                                    function that is invoked by the test
                                    framework.</html:p><html:p>This function was introduced in Qt
                                    5.0.</html:p>
                                <html:p><html:b>See also </html:b><html:a
                                        href="qtest.html#QTRY_VERIFY">QTRY_VERIFY</html:a>(),
                                        <html:a href="qtest.html#QVERIFY">QVERIFY</html:a>(),
                                        <html:a href="qtest.html#QCOMPARE">QCOMPARE</html:a>(), and
                                        <html:a href="qtest.html#QTRY_COMPARE"
                                    >QTRY_COMPARE</html:a>().</html:p>
                                <!-- @@@QTRY_VERIFY_WITH_TIMEOUT -->
                                <!-- $$$QVERIFY2[overload1]$$$QVERIFY2 -->
                                <html:h3 class="fn" id="QVERIFY2"><html:a name="QVERIFY2"
                                        ></html:a><html:span class="name"
                                        >QVERIFY2</html:span>(<html:i> condition</html:i>, <html:i>
                                        message</html:i>)</html:h3>
                                <html:p>The QVERIFY2() macro behaves exactly like <html:a
                                        href="qtest.html#QVERIFY">QVERIFY</html:a>(), except that it
                                    outputs a verbose <html:i>message</html:i> when
                                        <html:i>condition</html:i> is false. The
                                        <html:i>message</html:i> is a plain C string.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp">QVERIFY2(<html:span class="number"
                                        >1</html:span>
                                    <html:span class="operator">+</html:span>
                                    <html:span class="number">1</html:span>
                                    <html:span class="operator">=</html:span><html:span
                                        class="operator">=</html:span>
                                    <html:span class="number">2</html:span><html:span
                                        class="operator">,</html:span>
                                    <html:span class="string">"A breach in basic arithmetic
                                        occurred."</html:span>);</html:pre>
                                <html:p><html:b>See also </html:b><html:a href="qtest.html#QVERIFY"
                                        >QVERIFY</html:a>() and <html:a href="qtest.html#QCOMPARE"
                                        >QCOMPARE</html:a>().</html:p>
                                <!-- @@@QVERIFY2 -->
                                <!-- $$$QVERIFY[overload1]$$$QVERIFY -->
                                <html:h3 class="fn" id="QVERIFY"><html:a name="QVERIFY"
                                        ></html:a><html:span class="name"
                                        >QVERIFY</html:span>(<html:i> condition</html:i>)</html:h3>
                                <html:p>The QVERIFY() macro checks whether the
                                        <html:i>condition</html:i> is true or not. If it is true,
                                    execution continues. If not, a failure is recorded in the test
                                    log and the test won't be executed further.</html:p>
                                <html:p><html:b>Note:</html:b> This macro can only be used in a test
                                    function that is invoked by the test framework.</html:p>
                                <html:p>Example:</html:p>
                                <html:pre class="cpp">QVERIFY(<html:span class="number"
                                        >1</html:span>
                                    <html:span class="operator">+</html:span>
                                    <html:span class="number">1</html:span>
                                    <html:span class="operator">=</html:span><html:span
                                        class="operator">=</html:span>
                                    <html:span class="number">2</html:span>);</html:pre>
                                <html:p><html:b>See also </html:b><html:a href="qtest.html#QCOMPARE"
                                        >QCOMPARE</html:a>() and <html:a
                                        href="qtest.html#QTRY_VERIFY"
                                    >QTRY_VERIFY</html:a>().</html:p>
                                <!-- @@@QVERIFY -->
                                <!-- $$$QVERIFY_EXCEPTION_THROWN[overload1]$$$QVERIFY_EXCEPTION_THROWN -->
                                <html:h3 class="fn" id="QVERIFY_EXCEPTION_THROWN"><html:a
                                        name="QVERIFY_EXCEPTION_THROWN"></html:a><html:span
                                        class="name">QVERIFY_EXCEPTION_THROWN</html:span>(<html:i>
                                        expression</html:i>, <html:i>
                                    exceptiontype</html:i>)</html:h3>
                                <html:p>The QVERIFY_EXCEPTION_THROWN macro executes an
                                        <html:i>expression</html:i> and tries to catch an exception
                                    thrown from the <html:i>expression</html:i>. If the
                                        <html:i>expression</html:i> throws an exception and its type
                                    is the same as <html:i>exceptiontype</html:i> or
                                        <html:i>exceptiontype</html:i> is substitutable with the
                                    type of thrown exception (i.e. usually the type of thrown
                                    exception is publically derived from
                                        <html:i>exceptiontype</html:i>) then execution will be
                                    continued. If not-substitutable type of exception is thrown or
                                    the <html:i>expression</html:i> doesn't throw an exception at
                                    all, then a failure will be recorded in the test log and the
                                    test won't be executed further.</html:p>
                                <html:p><html:b>Note: </html:b>This macro can only be used in a test
                                    function that is invoked by the test
                                    framework.</html:p><html:p>This function was introduced in Qt
                                    5.3.</html:p>
                                <!-- @@@QVERIFY_EXCEPTION_THROWN -->
                                <!-- $$$QWARN[overload1]$$$QWARN -->
                                <html:h3 class="fn" id="QWARN"><html:a name="QWARN"
                                        ></html:a><html:span class="name">QWARN</html:span>(<html:i>
                                        message</html:i>)</html:h3>
                                <html:p>Appends <html:i>message</html:i> as a warning to the test
                                    log. This macro can be used anywhere in your tests.</html:p>
                                <html:p><html:b>Note:</html:b> This function is <html:a
                                        href="qtdoc/threads-reentrancy.html#thread-safe"
                                        >thread-safe</html:a>.</html:p>
                                <!-- @@@QWARN -->
                            </html:div>
                        </html:div>
                    </html:div>
                </html:div>
            </html:div>
        </html:div>
        <html:div class="footer">
            <html:p>
                <html:acronym title="Copyright">&#169;</html:acronym> 2015 The Qt Company Ltd.
                Documentation contributions included herein are the copyrights of their respective
                owners.<html:br /> The documentation provided herein is licensed under the terms of
                the <html:a href="http://www.gnu.org/licenses/fdl.html">GNU Free Documentation
                    License version 1.3</html:a> as published by the Free Software
                Foundation.<html:br /> Qt and respective logos are trademarks of The Qt Company Ltd.
                in Finland and/or other countries worldwide. All other trademarks are property of
                their respective owners. </html:p>
        </html:div>
    </html:body>
</html:html>