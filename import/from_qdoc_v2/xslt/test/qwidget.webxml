<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <class threadsafety="unspecified" name="QWidget" href="qwidget.html" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="128" bases="QObject,QPaintDevice" module="QtWidgets" groups="basicwidgets" brief="The base class of all user interface objects">
            <contents name="top-level-and-child-widgets" title="Top-Level and Child Widgets" level="1"/>
            <contents name="composite-widgets" title="Composite Widgets" level="1"/>
            <contents name="custom-widgets-and-painting" title="Custom Widgets and Painting" level="1"/>
            <contents name="size-hints-and-size-policies" title="Size Hints and Size Policies" level="1"/>
            <contents name="events" title="Events" level="1"/>
            <contents name="groups-of-functions-and-properties" title="Groups of Functions and Properties" level="1"/>
            <contents name="widget-style-sheets" title="Widget Style Sheets" level="1"/>
            <contents name="transparency-and-double-buffering" title="Transparency and Double Buffering" level="1"/>
            <contents name="creating-translucent-windows" title="Creating Translucent Windows" level="1"/>
            <contents name="native-widgets-vs-alien-widgets" title="Native Widgets vs Alien Widgets" level="1"/>
            <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="491" column="4">
                <brief>The <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> class is the base class of all user interface objects.</brief>
                <para>The widget is the atom of the user interface: it receives mouse, keyboard and other events from the window system, and paints a representation of itself on the screen. Every widget is rectangular, and they are sorted in a Z-order. A widget is clipped by its parent and by the widgets in front of it.</para>
                <para>A widget that is not embedded in a parent widget is called a window. Usually, windows have a frame and a title bar, although it is also possible to create windows without such decoration using suitable <link raw="Qt::WindowFlags" href="qt.html#WindowType-enum" type="typedef">window flags</link>). In Qt, <link raw="QMainWindow" href="qmainwindow.html" type="class">QMainWindow</link> and the various subclasses of <link raw="QDialog" href="qdialog.html" type="class">QDialog</link> are the most common window types.</para>
                <para>Every widget's constructor accepts one or two standard arguments:</para>
                <list type="ordered" start="1">
                    <item>
                        <para>
                            <teletype type="highlighted">QWidget *parent = 0</teletype> is the parent of the new widget. If it is 0 (the default), the new widget will be a window. If not, it will be a child of <italic>parent</italic>, and be constrained by <italic>parent</italic>'s geometry (unless you specify <link raw="Qt::Window" href="qt.html#WindowType-enum" type="enum" enum="Qt::WindowType">Qt::Window</link> as window flag).</para>
                    </item>
                    <item>
                        <para>
                            <teletype type="highlighted">Qt::WindowFlags f = 0</teletype> (where available) sets the window flags; the default is suitable for almost all widgets, but to get, for example, a window without a window system frame, you must use special flags.</para>
                    </item>
                </list>
                <para>
                    <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> has many member functions, but some of them have little direct functionality; for example, <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> has a font property, but never uses this itself. There are many subclasses which provide real functionality, such as <link raw="QLabel" href="qlabel.html" type="class">QLabel</link>, <link raw="QPushButton" href="qpushbutton.html" type="class">QPushButton</link>, <link raw="QListWidget" href="qlistwidget.html" type="class">QListWidget</link>, and <link raw="QTabWidget" href="qtabwidget.html" type="class">QTabWidget</link>.</para>
                <section id="top-level-and-child-widgets">
                    <heading level="1">Top-Level and Child Widgets</heading>
                    <para>A widget without a parent widget is always an independent window (top-level widget). For these widgets, <link raw="setWindowTitle()" href="qwidget.html#windowTitle-prop" type="function">setWindowTitle()</link> and <link raw="setWindowIcon()" href="qwidget.html#windowIcon-prop" type="function">setWindowIcon()</link> set the title bar and icon respectively.</para>
                    <para>Non-window widgets are child widgets, displayed within their parent widgets. Most widgets in Qt are mainly useful as child widgets. For example, it is possible to display a button as a top-level window, but most people prefer to put their buttons inside other widgets, such as <link raw="QDialog" href="qdialog.html" type="class">QDialog</link>.</para>
                    <image href="images/parent-child-widgets.png"/>
                    <para>The diagram above shows a <link raw="QGroupBox" href="qgroupbox.html" type="class">QGroupBox</link> widget being used to hold various child widgets in a layout provided by <link raw="QGridLayout" href="qgridlayout.html" type="class">QGridLayout</link>. The <link raw="QLabel" href="qlabel.html" type="class">QLabel</link> child widgets have been outlined to indicate their full sizes.</para>
                    <para>If you want to use a <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> to hold child widgets you will usually want to add a layout to the parent <link raw="QWidget" href="qwidget.html" type="class">QWidget</link>. See <link raw="Layout Management" href="layout.html" type="page" page="Layout Management">Layout Management</link> for more information.</para>
                </section>
                <section id="composite-widgets">
                    <heading level="1">Composite Widgets</heading>
                    <para>When a widget is used as a container to group a number of child widgets, it is known as a composite widget. These can be created by constructing a widget with the required visual properties - a <link raw="QFrame" href="qframe.html" type="class">QFrame</link>, for example - and adding child widgets to it, usually managed by a layout. The above diagram shows such a composite widget that was created using Qt Designer.</para>
                    <para>Composite widgets can also be created by subclassing a standard widget, such as <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> or <link raw="QFrame" href="qframe.html" type="class">QFrame</link>, and adding the necessary layout and child widgets in the constructor of the subclass. Many of the <link raw="Qt Widgets Examples" href="examples-widgets.html" type="">examples provided with Qt</link> use this approach, and it is also covered in the Qt <link raw="Tutorials" href="qtwidgets-index.html#tutorials" type="page" page="Qt Widgets">Tutorials</link>.</para>
                </section>
                <section id="custom-widgets-and-painting">
                    <heading level="1">Custom Widgets and Painting</heading>
                    <para>Since <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> is a subclass of <link raw="QPaintDevice" href="qpaintdevice.html" type="class">QPaintDevice</link>, subclasses can be used to display custom content that is composed using a series of painting operations with an instance of the <link raw="QPainter" href="qpainter.html" type="class">QPainter</link> class. This approach contrasts with the canvas-style approach used by the <link raw="Graphics View" href="graphicsview.html" type="page" page="Graphics View Framework">Graphics View Framework</link> where items are added to a scene by the application and are rendered by the framework itself.</para>
                    <para>Each widget performs all painting operations from within its <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link> function. This is called whenever the widget needs to be redrawn, either as a result of some external change or when requested by the application.</para>
                    <para>The <link raw="widgets/analogclock" href="qtwidgets-widgets-analogclock-example.html" type="page" page="Analog Clock Example">Analog Clock example</link> shows how a simple widget can handle paint events.</para>
                </section>
                <section id="size-hints-and-size-policies">
                    <heading level="1">Size Hints and Size Policies</heading>
                    <para>When implementing a new widget, it is almost always useful to reimplement <link raw="sizeHint()" href="qwidget.html#sizeHint-prop" type="function">sizeHint()</link> to provide a reasonable default size for the widget and to set the correct size policy with <link raw="setSizePolicy()" href="qwidget.html#sizePolicy-prop" type="function">setSizePolicy()</link>.</para>
                    <para>By default, composite widgets which do not provide a size hint will be sized according to the space requirements of their child widgets.</para>
                    <para>The size policy lets you supply good default behavior for the layout management system, so that other widgets can contain and manage yours easily. The default size policy indicates that the size hint represents the preferred size of the widget, and this is often good enough for many widgets.</para>
                    <para>
                        <bold>Note:</bold> The size of top-level widgets are constrained to 2/3 of the desktop's height and width. You can <link raw="resize()" href="qwidget.html#size-prop" type="function">resize()</link> the widget manually if these bounds are inadequate.</para>
                </section>
                <section id="events">
                    <heading level="1">Events</heading>
                    <para>Widgets respond to events that are typically caused by user actions. Qt delivers events to widgets by calling specific event handler functions with instances of <link raw="QEvent" href="qevent.html" type="class">QEvent</link> subclasses containing information about each event.</para>
                    <para>If your widget only contains child widgets, you probably do not need to implement any event handlers. If you want to detect a mouse click in a child widget call the child's <link raw="underMouse()" href="qwidget.html#underMouse" type="function">underMouse()</link> function inside the widget's <link raw="mousePressEvent()" href="qwidget.html#mousePressEvent" type="function">mousePressEvent()</link>.</para>
                    <para>The <link raw="widgets/scribble" href="qtwidgets-widgets-scribble-example.html" type="page" page="Scribble Example">Scribble example</link> implements a wider set of events to handle mouse movement, button presses, and window resizing.</para>
                    <para>You will need to supply the behavior and content for your own widgets, but here is a brief overview of the events that are relevant to <link raw="QWidget" href="qwidget.html" type="class">QWidget</link>, starting with the most common ones:</para>
                    <list type="bullet">
                        <item>
                            <para>
                                <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link> is called whenever the widget needs to be repainted. Every widget displaying custom content must implement it. Painting using a <link raw="QPainter" href="qpainter.html" type="class">QPainter</link> can only take place in a <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link> or a function called by a <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link>.</para>
                        </item>
                        <item>
                            <para>
                                <link raw="resizeEvent()" href="qwidget.html#resizeEvent" type="function">resizeEvent()</link> is called when the widget has been resized.</para>
                        </item>
                        <item>
                            <para>
                                <link raw="mousePressEvent()" href="qwidget.html#mousePressEvent" type="function">mousePressEvent()</link> is called when a mouse button is pressed while the mouse cursor is inside the widget, or when the widget has grabbed the mouse using <link raw="grabMouse()" href="qwidget.html#grabMouse" type="function">grabMouse()</link>. Pressing the mouse without releasing it is effectively the same as calling <link raw="grabMouse()" href="qwidget.html#grabMouse" type="function">grabMouse()</link>.</para>
                        </item>
                        <item>
                            <para>
                                <link raw="mouseReleaseEvent()" href="qwidget.html#mouseReleaseEvent" type="function">mouseReleaseEvent()</link> is called when a mouse button is released. A widget receives mouse release events when it has received the corresponding mouse press event. This means that if the user presses the mouse inside <italic>your</italic> widget, then drags the mouse somewhere else before releasing the mouse button, <italic>your</italic> widget receives the release event. There is one exception: if a popup menu appears while the mouse button is held down, this popup immediately steals the mouse events.</para>
                        </item>
                        <item>
                            <para>
                                <link raw="mouseDoubleClickEvent()" href="qwidget.html#mouseDoubleClickEvent" type="function">mouseDoubleClickEvent()</link> is called when the user double-clicks in the widget. If the user double-clicks, the widget receives a mouse press event, a mouse release event, (a mouse click event,) a second mouse press, this event and finally a second mouse release event. (Some mouse move events may also be received if the mouse is not held steady during this operation.) It is <italic>not possible</italic> to distinguish a click from a double-click until the second click arrives. (This is one reason why most GUI books recommend that double-clicks be an extension of single-clicks, rather than trigger a different action.)</para>
                        </item>
                    </list>
                    <para>Widgets that accept keyboard input need to reimplement a few more event handlers:</para>
                    <list type="bullet">
                        <item>
                            <para>
                                <link raw="keyPressEvent()" href="qwidget.html#keyPressEvent" type="function">keyPressEvent()</link> is called whenever a key is pressed, and again when a key has been held down long enough for it to auto-repeat. The Tab and Shift+Tab keys are only passed to the widget if they are not used by the focus-change mechanisms. To force those keys to be processed by your widget, you must reimplement <link raw="QWidget::event()" href="qwidget.html#event" type="function">QWidget::event()</link>.</para>
                        </item>
                        <item>
                            <para>
                                <link raw="focusInEvent()" href="qwidget.html#focusInEvent" type="function">focusInEvent()</link> is called when the widget gains keyboard focus (assuming you have called <link raw="setFocusPolicy()" href="qwidget.html#focusPolicy-prop" type="function">setFocusPolicy()</link>). Well-behaved widgets indicate that they own the keyboard focus in a clear but discreet way.</para>
                        </item>
                        <item>
                            <para>
                                <link raw="focusOutEvent()" href="qwidget.html#focusOutEvent" type="function">focusOutEvent()</link> is called when the widget loses keyboard focus.</para>
                        </item>
                    </list>
                    <para>You may be required to also reimplement some of the less common event handlers:</para>
                    <list type="bullet">
                        <item>
                            <para>
                                <link raw="mouseMoveEvent()" href="qwidget.html#mouseMoveEvent" type="function">mouseMoveEvent()</link> is called whenever the mouse moves while a mouse button is held down. This can be useful during drag and drop operations. If you call <link raw="setMouseTracking()" href="qwidget.html#mouseTracking-prop" type="function">setMouseTracking</link>(true), you get mouse move events even when no buttons are held down. (See also the <link raw="Drag and Drop" href="graphicsview.html#drag-and-drop" type="page" page="Graphics View Framework">Drag and Drop</link> guide.)</para>
                        </item>
                        <item>
                            <para>
                                <link raw="keyReleaseEvent()" href="qwidget.html#keyReleaseEvent" type="function">keyReleaseEvent()</link> is called whenever a key is released and while it is held down (if the key is auto-repeating). In that case, the widget will receive a pair of key release and key press event for every repeat. The Tab and Shift+Tab keys are only passed to the widget if they are not used by the focus-change mechanisms. To force those keys to be processed by your widget, you must reimplement <link raw="QWidget::event()" href="qwidget.html#event" type="function">QWidget::event()</link>.</para>
                        </item>
                        <item>
                            <para>
                                <link raw="wheelEvent()" href="qwidget.html#wheelEvent" type="function">wheelEvent()</link> is called whenever the user turns the mouse wheel while the widget has the focus.</para>
                        </item>
                        <item>
                            <para>
                                <link raw="enterEvent()" href="qwidget.html#enterEvent" type="function">enterEvent()</link> is called when the mouse enters the widget's screen space. (This excludes screen space owned by any of the widget's children.)</para>
                        </item>
                        <item>
                            <para>
                                <link raw="leaveEvent()" href="qwidget.html#leaveEvent" type="function">leaveEvent()</link> is called when the mouse leaves the widget's screen space. If the mouse enters a child widget it will not cause a <link raw="leaveEvent()" href="qwidget.html#leaveEvent" type="function">leaveEvent()</link>.</para>
                        </item>
                        <item>
                            <para>
                                <link raw="moveEvent()" href="qwidget.html#moveEvent" type="function">moveEvent()</link> is called when the widget has been moved relative to its parent.</para>
                        </item>
                        <item>
                            <para>
                                <link raw="closeEvent()" href="qwidget.html#closeEvent" type="function">closeEvent()</link> is called when the user closes the widget (or when <link raw="close()" href="qwidget.html#close" type="function">close()</link> is called).</para>
                        </item>
                    </list>
                    <para>There are also some rather obscure events described in the documentation for <link raw="QEvent::Type" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::Type</link>. To handle these events, you need to reimplement <link raw="event()" href="qwidget.html#event" type="function">event()</link> directly.</para>
                    <para>The default implementation of <link raw="event()" href="qwidget.html#event" type="function">event()</link> handles Tab and Shift+Tab (to move the keyboard focus), and passes on most of the other events to one of the more specialized handlers above.</para>
                    <para>Events and the mechanism used to deliver them are covered in <link raw="The Event System" href="eventsandfilters.html" type="page" page="The Event System">The Event System</link>.</para>
                </section>
                <section id="groups-of-functions-and-properties">
                    <heading level="1">Groups of Functions and Properties</heading>
                    <table>
                        <header>
                            <item>
                                <para>Context</para>
                            </item>
                            <item>
                                <para>Functions and Properties</para>
                            </item>
                        </header>
                        <row>
                            <item>
                                <para>Window functions</para>
                            </item>
                            <item>
                                <para>
                                    <link raw="show()" href="qwidget.html#show" type="function">show()</link>, <link raw="hide()" href="qwidget.html#hide" type="function">hide()</link>, <link raw="raise()" href="qwidget.html#raise" type="function">raise()</link>, <link raw="lower()" href="qwidget.html#lower" type="function">lower()</link>, <link raw="close()" href="qwidget.html#close" type="function">close()</link>.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Top-level windows</para>
                            </item>
                            <item>
                                <para>
                                    <link raw="windowModified" href="qwidget.html#windowModified-prop" type="property" getter="QWidget::isWindowModified()">windowModified</link>, <link raw="windowTitle" href="qwidget.html#windowTitle-prop" type="property" getter="QWidget::windowTitle()">windowTitle</link>, <link raw="windowIcon" href="qwidget.html#windowIcon-prop" type="property" getter="QWidget::windowIcon()">windowIcon</link>, <link raw="isActiveWindow" href="qwidget.html#isActiveWindow-prop" type="property" getter="QWidget::isActiveWindow()">isActiveWindow</link>, <link raw="activateWindow()" href="qwidget.html#activateWindow" type="function">activateWindow()</link>, <link raw="minimized" href="qwidget.html#minimized-prop" type="property" getter="QWidget::isMinimized()">minimized</link>, <link raw="showMinimized()" href="qwidget.html#showMinimized" type="function">showMinimized()</link>, <link raw="maximized" href="qwidget.html#maximized-prop" type="property" getter="QWidget::isMaximized()">maximized</link>, <link raw="showMaximized()" href="qwidget.html#showMaximized" type="function">showMaximized()</link>, <link raw="fullScreen" href="qwidget.html#fullScreen-prop" type="property" getter="QWidget::isFullScreen()">fullScreen</link>, <link raw="showFullScreen()" href="qwidget.html#showFullScreen" type="function">showFullScreen()</link>, <link raw="showNormal()" href="qwidget.html#showNormal" type="function">showNormal()</link>.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Window contents</para>
                            </item>
                            <item>
                                <para>
                                    <link raw="update()" href="qwidget.html#update" type="function">update()</link>, <link raw="repaint()" href="qwidget.html#repaint" type="function">repaint()</link>, <link raw="scroll()" href="qwidget.html#scroll" type="function">scroll()</link>.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Geometry</para>
                            </item>
                            <item>
                                <para>
                                    <link raw="pos" href="qwidget.html#pos-prop" type="property" getter="QWidget::pos()">pos</link>, <link raw="x()" href="qwidget.html#x-prop" type="function">x()</link>, <link raw="y()" href="qwidget.html#y-prop" type="function">y()</link>, <link raw="rect" href="qwidget.html#rect-prop" type="property" getter="QWidget::rect()">rect</link>, <link raw="size" href="qwidget.html#size-prop" type="property" getter="QWidget::size()">size</link>, <link raw="width()" href="qwidget.html#width-prop" type="function">width()</link>, <link raw="height()" href="qwidget.html#height-prop" type="function">height()</link>, <link raw="move()" href="qwidget.html#pos-prop" type="function">move()</link>, <link raw="resize()" href="qwidget.html#size-prop" type="function">resize()</link>, <link raw="sizePolicy" href="qwidget.html#sizePolicy-prop" type="property" getter="QWidget::sizePolicy()">sizePolicy</link>, <link raw="sizeHint()" href="qwidget.html#sizeHint-prop" type="function">sizeHint()</link>, <link raw="minimumSizeHint()" href="qwidget.html#minimumSizeHint-prop" type="function">minimumSizeHint()</link>, <link raw="updateGeometry()" href="qwidget.html#updateGeometry" type="function">updateGeometry()</link>, <link raw="layout()" href="qwidget.html#layout" type="function">layout()</link>, <link raw="frameGeometry" href="qwidget.html#frameGeometry-prop" type="property" getter="QWidget::frameGeometry()">frameGeometry</link>, <link raw="geometry" href="qwidget.html#geometry-prop" type="property" getter="QWidget::geometry()">geometry</link>, <link raw="childrenRect" href="qwidget.html#childrenRect-prop" type="property" getter="QWidget::childrenRect()">childrenRect</link>, <link raw="childrenRegion" href="qwidget.html#childrenRegion-prop" type="property" getter="QWidget::childrenRegion()">childrenRegion</link>, <link raw="adjustSize()" href="qwidget.html#adjustSize" type="function">adjustSize()</link>, <link raw="mapFromGlobal()" href="qwidget.html#mapFromGlobal" type="function">mapFromGlobal()</link>, <link raw="mapToGlobal()" href="qwidget.html#mapToGlobal" type="function">mapToGlobal()</link>, <link raw="mapFromParent()" href="qwidget.html#mapFromParent" type="function">mapFromParent()</link>, <link raw="mapToParent()" href="qwidget.html#mapToParent" type="function">mapToParent()</link>, <link raw="maximumSize" href="qwidget.html#maximumSize-prop" type="property" getter="QWidget::maximumSize()">maximumSize</link>, <link raw="minimumSize" href="qwidget.html#minimumSize-prop" type="property" getter="QWidget::minimumSize()">minimumSize</link>, <link raw="sizeIncrement" href="qwidget.html#sizeIncrement-prop" type="property" getter="QWidget::sizeIncrement()">sizeIncrement</link>, <link raw="baseSize" href="qwidget.html#baseSize-prop" type="property" getter="QWidget::baseSize()">baseSize</link>, <link raw="setFixedSize()" href="qwidget.html#setFixedSize" type="function">setFixedSize()</link></para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Mode</para>
                            </item>
                            <item>
                                <para>
                                    <link raw="visible" href="qwidget.html#visible-prop" type="property" getter="QWidget::isVisible()">visible</link>, <link raw="isVisibleTo()" href="qwidget.html#isVisibleTo" type="function">isVisibleTo()</link>, <link raw="enabled" href="qwidget.html#enabled-prop" type="property" getter="QWidget::isEnabled()">enabled</link>, <link raw="isEnabledTo()" href="qwidget.html#isEnabledTo" type="function">isEnabledTo()</link>, <link raw="modal" href="qwidget.html#modal-prop" type="property" getter="QWidget::isModal()">modal</link>, <link raw="isWindow()" href="qwidget.html#isWindow" type="function">isWindow()</link>, <link raw="mouseTracking" href="qwidget.html#mouseTracking-prop" type="property" getter="QWidget::hasMouseTracking()">mouseTracking</link>, <link raw="updatesEnabled" href="qwidget.html#updatesEnabled-prop" type="property" getter="QWidget::updatesEnabled()">updatesEnabled</link>, <link raw="visibleRegion()" href="qwidget.html#visibleRegion" type="function">visibleRegion()</link>.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Look and feel</para>
                            </item>
                            <item>
                                <para>
                                    <link raw="style()" href="qwidget.html#style" type="function">style()</link>, <link raw="setStyle()" href="qwidget.html#setStyle" type="function">setStyle()</link>, <link raw="styleSheet" href="stylesheet.html" type="page" page="Qt Style Sheets">styleSheet</link>, <link raw="cursor" href="qwidget.html#cursor-prop" type="property" getter="QWidget::cursor()">cursor</link>, <link raw="font" href="stylesheet-reference.html#font" type="page" page="Qt Style Sheets Reference">font</link>, <link raw="palette" href="qwidget.html#palette-prop" type="property" getter="QWidget::palette()">palette</link>, <link raw="backgroundRole()" href="qwidget.html#backgroundRole" type="function">backgroundRole()</link>, <link raw="setBackgroundRole()" href="qwidget.html#setBackgroundRole" type="function">setBackgroundRole()</link>, <link raw="fontInfo()" href="qwidget.html#fontInfo" type="function">fontInfo()</link>, <link raw="fontMetrics()" href="qwidget.html#fontMetrics" type="function">fontMetrics()</link>.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Keyboard focus functions</para>
                            </item>
                            <item>
                                <para>
                                    <link raw="focus" href="qwidget.html#focus-prop" type="property" getter="QWidget::hasFocus()">focus</link>, <link raw="focusPolicy" href="qwidget.html#focusPolicy-prop" type="property" getter="QWidget::focusPolicy()">focusPolicy</link>, <link raw="setFocus()" href="qwidget.html#setFocus" type="function">setFocus()</link>, <link raw="clearFocus()" href="qwidget.html#clearFocus" type="function">clearFocus()</link>, <link raw="setTabOrder()" href="qwidget.html#setTabOrder" type="function">setTabOrder()</link>, <link raw="setFocusProxy()" href="qwidget.html#setFocusProxy" type="function">setFocusProxy()</link>, <link raw="focusNextChild()" href="qwidget.html#focusNextChild" type="function">focusNextChild()</link>, <link raw="focusPreviousChild()" href="qwidget.html#focusPreviousChild" type="function">focusPreviousChild()</link>.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Mouse and keyboard grabbing</para>
                            </item>
                            <item>
                                <para>
                                    <link raw="grabMouse()" href="qwidget.html#grabMouse" type="function">grabMouse()</link>, <link raw="releaseMouse()" href="qwidget.html#releaseMouse" type="function">releaseMouse()</link>, <link raw="grabKeyboard()" href="qwidget.html#grabKeyboard" type="function">grabKeyboard()</link>, <link raw="releaseKeyboard()" href="qwidget.html#releaseKeyboard" type="function">releaseKeyboard()</link>, <link raw="mouseGrabber()" href="qwidget.html#mouseGrabber" type="function">mouseGrabber()</link>, <link raw="keyboardGrabber()" href="qwidget.html#keyboardGrabber" type="function">keyboardGrabber()</link>.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Event handlers</para>
                            </item>
                            <item>
                                <para>
                                    <link raw="event()" href="qwidget.html#event" type="function">event()</link>, <link raw="mousePressEvent()" href="qwidget.html#mousePressEvent" type="function">mousePressEvent()</link>, <link raw="mouseReleaseEvent()" href="qwidget.html#mouseReleaseEvent" type="function">mouseReleaseEvent()</link>, <link raw="mouseDoubleClickEvent()" href="qwidget.html#mouseDoubleClickEvent" type="function">mouseDoubleClickEvent()</link>, <link raw="mouseMoveEvent()" href="qwidget.html#mouseMoveEvent" type="function">mouseMoveEvent()</link>, <link raw="keyPressEvent()" href="qwidget.html#keyPressEvent" type="function">keyPressEvent()</link>, <link raw="keyReleaseEvent()" href="qwidget.html#keyReleaseEvent" type="function">keyReleaseEvent()</link>, <link raw="focusInEvent()" href="qwidget.html#focusInEvent" type="function">focusInEvent()</link>, <link raw="focusOutEvent()" href="qwidget.html#focusOutEvent" type="function">focusOutEvent()</link>, <link raw="wheelEvent()" href="qwidget.html#wheelEvent" type="function">wheelEvent()</link>, <link raw="enterEvent()" href="qwidget.html#enterEvent" type="function">enterEvent()</link>, <link raw="leaveEvent()" href="qwidget.html#leaveEvent" type="function">leaveEvent()</link>, <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link>, <link raw="moveEvent()" href="qwidget.html#moveEvent" type="function">moveEvent()</link>, <link raw="resizeEvent()" href="qwidget.html#resizeEvent" type="function">resizeEvent()</link>, <link raw="closeEvent()" href="qwidget.html#closeEvent" type="function">closeEvent()</link>, <link raw="dragEnterEvent()" href="qwidget.html#dragEnterEvent" type="function">dragEnterEvent()</link>, <link raw="dragMoveEvent()" href="qwidget.html#dragMoveEvent" type="function">dragMoveEvent()</link>, <link raw="dragLeaveEvent()" href="qwidget.html#dragLeaveEvent" type="function">dragLeaveEvent()</link>, <link raw="dropEvent()" href="qwidget.html#dropEvent" type="function">dropEvent()</link>, <link raw="childEvent()" href="qobject.html#childEvent" type="function">childEvent()</link>, <link raw="showEvent()" href="qwidget.html#showEvent" type="function">showEvent()</link>, <link raw="hideEvent()" href="qwidget.html#hideEvent" type="function">hideEvent()</link>, <link raw="customEvent()" href="qobject.html#customEvent" type="function">customEvent()</link>. <link raw="changeEvent()" href="qwidget.html#changeEvent" type="function">changeEvent()</link>,</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>System functions</para>
                            </item>
                            <item>
                                <para>
                                    <link raw="parentWidget()" href="qwidget.html#parentWidget" type="function">parentWidget()</link>, <link raw="window()" href="qwidget.html#window" type="function">window()</link>, <link raw="setParent()" href="qwidget.html#setParent" type="function">setParent()</link>, <link raw="winId()" href="qwidget.html#winId" type="function">winId()</link>, <link raw="find()" href="qwidget.html#find" type="function">find()</link>, <link raw="metric()" href="qwidget.html#metric" type="function">metric()</link>.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Context menu</para>
                            </item>
                            <item>
                                <para>
                                    <link raw="contextMenuPolicy" href="qwidget.html#contextMenuPolicy-prop" type="property" getter="QWidget::contextMenuPolicy()">contextMenuPolicy</link>, <link raw="contextMenuEvent()" href="qwidget.html#contextMenuEvent" type="function">contextMenuEvent()</link>, <link raw="customContextMenuRequested()" href="qwidget.html#customContextMenuRequested" type="function">customContextMenuRequested()</link>, <link raw="actions()" href="qwidget.html#actions" type="function">actions()</link></para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Interactive help</para>
                            </item>
                            <item>
                                <para>
                                    <link raw="setToolTip()" href="qwidget.html#toolTip-prop" type="function">setToolTip()</link>, <link raw="setWhatsThis()" href="qwidget.html#whatsThis-prop" type="function">setWhatsThis()</link></para>
                            </item>
                        </row>
                    </table>
                </section>
                <section id="widget-style-sheets">
                    <heading level="1">Widget Style Sheets</heading>
                    <para>In addition to the standard widget styles for each platform, widgets can also be styled according to rules specified in a <link raw="styleSheet" href="stylesheet.html" type="page" page="Qt Style Sheets">style sheet</link>. This feature enables you to customize the appearance of specific widgets to provide visual cues to users about their purpose. For example, a button could be styled in a particular way to indicate that it performs a destructive action.</para>
                    <para>The use of widget style sheets is described in more detail in the <link raw="Qt Style Sheets" href="stylesheet.html" type="page" page="Qt Style Sheets">Qt Style Sheets</link> document.</para>
                </section>
                <section id="transparency-and-double-buffering">
                    <heading level="1">Transparency and Double Buffering</heading>
                    <para>Since Qt 4.0, <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> automatically double-buffers its painting, so there is no need to write double-buffering code in <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link> to avoid flicker.</para>
                    <para>Since Qt 4.1, the <link raw="Qt::WA_ContentsPropagated" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_ContentsPropagated</link> widget attribute has been deprecated. Instead, the contents of parent widgets are propagated by default to each of their children as long as <link raw="Qt::WA_PaintOnScreen" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_PaintOnScreen</link> is not set. Custom widgets can be written to take advantage of this feature by updating irregular regions (to create non-rectangular child widgets), or painting with colors that have less than full alpha component. The following diagram shows how attributes and properties of a custom widget can be fine-tuned to achieve different effects.</para>
                    <image href="images/propagation-custom.png"/>
                    <para>In the above diagram, a semi-transparent rectangular child widget with an area removed is constructed and added to a parent widget (a <link raw="QLabel" href="qlabel.html" type="class">QLabel</link> showing a pixmap). Then, different properties and widget attributes are set to achieve different effects:</para>
                    <list type="bullet">
                        <item>
                            <para>The left widget has no additional properties or widget attributes set. This default state suits most custom widgets using transparency, are irregularly-shaped, or do not paint over their entire area with an opaque brush.</para>
                        </item>
                        <item>
                            <para>The center widget has the <link raw="autoFillBackground" href="qwidget.html#autoFillBackground-prop" type="property" getter="QWidget::autoFillBackground()">autoFillBackground</link> property set. This property is used with custom widgets that rely on the widget to supply a default background, and do not paint over their entire area with an opaque brush.</para>
                        </item>
                        <item>
                            <para>The right widget has the <link raw="Qt::WA_OpaquePaintEvent" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_OpaquePaintEvent</link> widget attribute set. This indicates that the widget will paint over its entire area with opaque colors. The widget's area will initially be <italic>uninitialized</italic>, represented in the diagram with a red diagonal grid pattern that shines through the overpainted area. The Qt::WA_OpaquePaintArea attribute is useful for widgets that need to paint their own specialized contents quickly and do not need a default filled background.</para>
                        </item>
                    </list>
                    <para>To rapidly update custom widgets with simple background colors, such as real-time plotting or graphing widgets, it is better to define a suitable background color (using <link raw="setBackgroundRole()" href="qwidget.html#setBackgroundRole" type="function">setBackgroundRole()</link> with the <link raw="QPalette::Window" href="qpalette.html#ColorRole-enum" type="enum" enum="QPalette::ColorRole">QPalette::Window</link> role), set the <link raw="autoFillBackground" href="qwidget.html#autoFillBackground-prop" type="property" getter="QWidget::autoFillBackground()">autoFillBackground</link> property, and only implement the necessary drawing functionality in the widget's <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link>.</para>
                    <para>To rapidly update custom widgets that constantly paint over their entire areas with opaque content, e.g., video streaming widgets, it is better to set the widget's <link raw="Qt::WA_OpaquePaintEvent" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_OpaquePaintEvent</link>, avoiding any unnecessary overhead associated with repainting the widget's background.</para>
                    <para>If a widget has both the <link raw="Qt::WA_OpaquePaintEvent" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_OpaquePaintEvent</link> widget attribute <italic>and</italic> the <link raw="autoFillBackground" href="qwidget.html#autoFillBackground-prop" type="property" getter="QWidget::autoFillBackground()">autoFillBackground</link> property set, the <link raw="Qt::WA_OpaquePaintEvent" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_OpaquePaintEvent</link> attribute takes precedence. Depending on your requirements, you should choose either one of them.</para>
                    <para>Since Qt 4.1, the contents of parent widgets are also propagated to standard Qt widgets. This can lead to some unexpected results if the parent widget is decorated in a non-standard way, as shown in the diagram below.</para>
                    <image href="images/propagation-standard.png"/>
                    <para>The scope for customizing the painting behavior of standard Qt widgets, without resorting to subclassing, is slightly less than that possible for custom widgets. Usually, the desired appearance of a standard widget can be achieved by setting its <link raw="autoFillBackground" href="qwidget.html#autoFillBackground-prop" type="property" getter="QWidget::autoFillBackground()">autoFillBackground</link> property.</para>
                </section>
                <section id="creating-translucent-windows">
                    <heading level="1">Creating Translucent Windows</heading>
                    <para>Since Qt 4.5, it has been possible to create windows with translucent regions on window systems that support compositing.</para>
                    <para>To enable this feature in a top-level widget, set its <link raw="Qt::WA_TranslucentBackground" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_TranslucentBackground</link> attribute with <link raw="setAttribute()" href="qwidget.html#setAttribute" type="function">setAttribute()</link> and ensure that its background is painted with non-opaque colors in the regions you want to be partially transparent.</para>
                    <para>Platform notes:</para>
                    <list type="bullet">
                        <item>
                            <para>X11: This feature relies on the use of an X server that supports ARGB visuals and a compositing window manager.</para>
                        </item>
                        <item>
                            <para>Windows: The widget needs to have the <link raw="Qt::FramelessWindowHint" href="qt.html#WindowType-enum" type="enum" enum="Qt::WindowType">Qt::FramelessWindowHint</link> window flag set for the translucency to work.</para>
                        </item>
                    </list>
                </section>
                <section id="native-widgets-vs-alien-widgets">
                    <heading level="1">Native Widgets vs Alien Widgets</heading>
                    <para>Introduced in Qt 4.4, alien widgets are widgets unknown to the windowing system. They do not have a native window handle associated with them. This feature significantly speeds up widget painting, resizing, and removes flicker.</para>
                    <para>Should you require the old behavior with native windows, you can choose one of the following options:</para>
                    <list type="ordered" start="1">
                        <item>
                            <para>Use the <teletype type="highlighted">QT_USE_NATIVE_WINDOWS=1</teletype> in your environment.</para>
                        </item>
                        <item>
                            <para>Set the <link raw="Qt::AA_NativeWindows" href="qt.html#ApplicationAttribute-enum" type="enum" enum="Qt::ApplicationAttribute">Qt::AA_NativeWindows</link> attribute on your application. All widgets will be native widgets.</para>
                        </item>
                        <item>
                            <para>Set the <link raw="Qt::WA_NativeWindow" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_NativeWindow</link> attribute on widgets: The widget itself and all of its ancestors will become native (unless <link raw="Qt::WA_DontCreateNativeAncestors" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_DontCreateNativeAncestors</link> is set).</para>
                        </item>
                        <item>
                            <para>Call <link raw="QWidget::winId" href="qwidget.html#winId" type="function">QWidget::winId</link> to enforce a native window (this implies 3).</para>
                        </item>
                        <item>
                            <para>Set the <link raw="Qt::WA_PaintOnScreen" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_PaintOnScreen</link> attribute to enforce a native window (this implies 3).</para>
                        </item>
                    </list>
                </section>
                <see-also>
                    <link raw="QEvent" href="qevent.html" type="class">QEvent</link>
                    <link raw="QPainter" href="qpainter.html" type="class">QPainter</link>
                    <link raw="QGridLayout" href="qgridlayout.html" type="class">QGridLayout</link>
                    <link raw="QBoxLayout" href="qboxlayout.html" type="class">QBoxLayout</link>
                </see-also>
            </description>
            <variable threadsafety="unspecified" name="staticMetaObject" fullname="QWidget::staticMetaObject" href="qwidget.html#staticMetaObject-var" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="130" type="const QMetaObject" static="true">
                <description path="" line="0" column="0"/>
            </variable>
            <function threadsafety="unspecified" name="metaObject" fullname="QWidget::metaObject" href="qwidget.html#metaObject" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="130" virtual="virtual" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="const QMetaObject *" signature="const QMetaObject * metaObject() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="qt_metacast" fullname="QWidget::qt_metacast" href="qwidget.html#qt_metacast" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="130" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void *" signature="void * qt_metacast(const char *)">
                <parameter type="const char *" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="qt_metacall" fullname="QWidget::qt_metacall" href="qwidget.html#qt_metacall" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="130" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="int" signature="int qt_metacall(QMetaObject::Call , int , void **)">
                <parameter type="QMetaObject::Call" name="" default=""/>
                <parameter type="int" name="" default=""/>
                <parameter type="void **" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="tr" fullname="QWidget::tr" href="qwidget.html#tr" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="130" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString tr(const char *s, const char *c, int n)">
                <parameter type="const char *" name="s" default=""/>
                <parameter type="const char *" name="c" default="Q_OBJECT"/>
                <parameter type="int" name="n" default="Q_OBJECT"/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="trUtf8" fullname="QWidget::trUtf8" href="qwidget.html#trUtf8" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="130" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString trUtf8(const char *s, const char *c, int n)">
                <parameter type="const char *" name="s" default=""/>
                <parameter type="const char *" name="c" default="Q_OBJECT"/>
                <parameter type="int" name="n" default="Q_OBJECT"/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="qt_static_metacall" fullname="QWidget::qt_static_metacall" href="qwidget.html#qt_static_metacall" status="active" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="130" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void qt_static_metacall(QObject *, QMetaObject::Call , int , void **)">
                <parameter type="QObject *" name="" default=""/>
                <parameter type="QMetaObject::Call" name="" default=""/>
                <parameter type="int" name="" default=""/>
                <parameter type="void **" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <class threadsafety="unspecified" name="QPrivateSignal" fullname="QWidget::QPrivateSignal" href="qwidget-qprivatesignal.html" status="active" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="130">
                <description path="" line="0" column="0"/>
            </class>
            <function threadsafety="unspecified" name="d_func" fullname="QWidget::d_func" href="qwidget.html#d_func" status="active" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="131" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QWidgetPrivate *" signature="QWidgetPrivate * d_func()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="d_func" fullname="QWidget::d_func" href="qwidget.html#d_func-1" status="active" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="131" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="const QWidgetPrivate *" signature="const QWidgetPrivate * d_func() const">
                <description path="" line="0" column="0"/>
            </function>
            <property threadsafety="unspecified" name="modal" fullname="QWidget::modal" href="qwidget.html#modal-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="133" type="bool" brief="Whether the widget is a modal widget">
                <getter name="isModal"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="2881" column="4">
                    <brief>This property holds whether the widget is a modal widget.</brief>
                    <para>This property only makes sense for windows. A modal widget prevents widgets in all other windows from getting any input.</para>
                    <para>By default, this property is <teletype type="highlighted">false</teletype>.</para>
                    <see-also>
                        <link raw="isWindow()" href="qwidget.html#isWindow" type="function">isWindow()</link>
                        <link raw="windowModality" href="qwidget.html#windowModality-prop" type="property" getter="QWidget::windowModality()">windowModality</link>
                        <link raw="QDialog" href="qdialog.html" type="class">QDialog</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="windowModality" fullname="QWidget::windowModality" href="qwidget.html#windowModality-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="134" since="4.1" type="Qt::WindowModality" brief="Which windows are blocked by the modal widget">
                <getter name="windowModality"/>
                <setter name="setWindowModality"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="2893" column="4">
                    <brief>This property holds which windows are blocked by the modal widget.</brief>
                    <para>This property only makes sense for windows. A modal widget prevents widgets in other windows from getting input. The value of this property controls which windows are blocked when the widget is visible. Changing this property while the window is visible has no effect; you must <link raw="hide()" href="qwidget.html#hide" type="function">hide()</link> the widget first, then <link raw="show()" href="qwidget.html#show" type="function">show()</link> it again.</para>
                    <para>By default, this property is <link raw="Qt::NonModal" href="qt.html#WindowModality-enum" type="enum" enum="Qt::WindowModality">Qt::NonModal</link>.</para>
                    <see-also>
                        <link raw="isWindow()" href="qwidget.html#isWindow" type="function">isWindow()</link>
                        <link raw="QWidget::modal" href="qwidget.html#modal-prop" type="property" getter="QWidget::isModal()">QWidget::modal</link>
                        <link raw="QDialog" href="qdialog.html" type="class">QDialog</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="enabled" fullname="QWidget::enabled" href="qwidget.html#enabled-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="135" type="bool" brief="Whether the widget is enabled">
                <getter name="isEnabled"/>
                <setter name="setEnabled"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3368" column="4">
                    <brief>This property holds whether the widget is enabled.</brief>
                    <para>In general an enabled widget handles keyboard and mouse events; a disabled widget does not. An exception is made with <link raw="QAbstractButton" href="qabstractbutton.html" type="class">QAbstractButton</link>.</para>
                    <para>Some widgets display themselves differently when they are disabled. For example a button might draw its label grayed out. If your widget needs to know when it becomes enabled or disabled, you can use the <link raw="changeEvent()" href="qwidget.html#changeEvent" type="function">changeEvent()</link> with type <link raw="QEvent::EnabledChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::EnabledChange</link>.</para>
                    <para>Disabling a widget implicitly disables all its children. Enabling respectively enables all child widgets unless they have been explicitly disabled. It it not possible to explicitly enable a child widget which is not a window while its parent widget remains disabled.</para>
                    <para>By default, this property is <teletype type="highlighted">true</teletype>.</para>
                    <see-also>
                        <link raw="isEnabledTo()" href="qwidget.html#isEnabledTo" type="function">isEnabledTo()</link>
                        <link raw="QKeyEvent" href="qkeyevent.html" type="class">QKeyEvent</link>
                        <link raw="QMouseEvent" href="qmouseevent.html" type="class">QMouseEvent</link>
                        <link raw="changeEvent()" href="qwidget.html#changeEvent" type="function">changeEvent()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="geometry" fullname="QWidget::geometry" href="qwidget.html#geometry-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="136" type="QRect" brief="The geometry of the widget relative to its parent and excluding the window frame">
                <getter name="geometry"/>
                <setter name="setGeometry"/>
                <setter name="setGeometry"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3601" column="4">
                    <brief>This property holds the geometry of the widget relative to its parent and excluding the window frame.</brief>
                    <para>When changing the geometry, the widget, if visible, receives a move event (<link raw="moveEvent()" href="qwidget.html#moveEvent" type="function">moveEvent()</link>) and/or a resize event (<link raw="resizeEvent()" href="qwidget.html#resizeEvent" type="function">resizeEvent()</link>) immediately. If the widget is not currently visible, it is guaranteed to receive appropriate events before it is shown.</para>
                    <para>The size component is adjusted if it lies outside the range defined by <link raw="minimumSize()" href="qwidget.html#minimumSize-prop" type="function">minimumSize()</link> and <link raw="maximumSize()" href="qwidget.html#maximumSize-prop" type="function">maximumSize()</link>.</para>
                    <para>
                        <bold>Warning:</bold> Calling  inside <link raw="resizeEvent()" href="qwidget.html#resizeEvent" type="function">resizeEvent()</link> or <link raw="moveEvent()" href="qwidget.html#moveEvent" type="function">moveEvent()</link> can lead to infinite recursion.</para>
                    <para>See the <link raw="Window Geometry" href="application-windows.html#window-geometry" type="page" page="Window and Dialog Widgets">Window Geometry</link> documentation for an overview of geometry issues with windows.</para>
                    <para>By default, this property contains a value that depends on the user's platform and screen geometry.</para>
                    <see-also>
                        <link raw="frameGeometry()" href="qwidget.html#frameGeometry-prop" type="function">frameGeometry()</link>
                        <link raw="rect()" href="qwidget.html#rect-prop" type="function">rect()</link>
                        <link raw="move()" href="qwidget.html#pos-prop" type="function">move()</link>
                        <link raw="resize()" href="qwidget.html#size-prop" type="function">resize()</link>
                        <link raw="moveEvent()" href="qwidget.html#moveEvent" type="function">moveEvent()</link>
                        <link raw="resizeEvent()" href="qwidget.html#resizeEvent" type="function">resizeEvent()</link>
                        <link raw="minimumSize()" href="qwidget.html#minimumSize-prop" type="function">minimumSize()</link>
                        <link raw="maximumSize()" href="qwidget.html#maximumSize-prop" type="function">maximumSize()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="frameGeometry" fullname="QWidget::frameGeometry" href="qwidget.html#frameGeometry-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="137" type="QRect" brief="Geometry of the widget relative to its parent including any window frame">
                <getter name="frameGeometry"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3501" column="4">
                    <brief>This property holds geometry of the widget relative to its parent including any window frame.</brief>
                    <para>See the <link raw="Window Geometry" href="application-windows.html#window-geometry" type="page" page="Window and Dialog Widgets">Window Geometry</link> documentation for an overview of geometry issues with windows.</para>
                    <para>By default, this property contains a value that depends on the user's platform and screen geometry.</para>
                    <see-also>
                        <link raw="geometry()" href="qwidget.html#geometry-prop" type="function">geometry()</link>
                        <link raw="x()" href="qwidget.html#x-prop" type="function">x()</link>
                        <link raw="y()" href="qwidget.html#y-prop" type="function">y()</link>
                        <link raw="pos()" href="qwidget.html#pos-prop" type="function">pos()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="normalGeometry" fullname="QWidget::normalGeometry" href="qwidget.html#normalGeometry-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="138" type="QRect" brief="The geometry of the widget as it will appear when shown as a normal (not maximized or full screen) top-level widget">
                <getter name="normalGeometry"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3627" column="4">
                    <brief>This property holds the geometry of the widget as it will appear when shown as a normal (not maximized or full screen) top-level widget.</brief>
                    <para>For child widgets this property always holds an empty rectangle.</para>
                    <para>By default, this property contains an empty rectangle.</para>
                    <see-also>
                        <link raw="QWidget::windowState()" href="qwidget.html#windowState" type="function">QWidget::windowState()</link>
                        <link raw="QWidget::geometry" href="qwidget.html#geometry-prop" type="property" getter="QWidget::geometry()">QWidget::geometry</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="x" fullname="QWidget::x" href="qwidget.html#x-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="139" type="int" brief="The x coordinate of the widget relative to its parent including any window frame">
                <getter name="x"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3527" column="4">
                    <brief>This property holds the x coordinate of the widget relative to its parent including any window frame.</brief>
                    <para>See the <link raw="Window Geometry" href="application-windows.html#window-geometry" type="page" page="Window and Dialog Widgets">Window Geometry</link> documentation for an overview of geometry issues with windows.</para>
                    <para>By default, this property has a value of 0.</para>
                    <see-also>
                        <link raw="frameGeometry" href="qwidget.html#frameGeometry-prop" type="property" getter="QWidget::frameGeometry()">frameGeometry</link>
                        <link raw="y" href="qwidget.html#y-prop" type="property" getter="QWidget::y()">y</link>
                        <link raw="pos" href="qwidget.html#pos-prop" type="property" getter="QWidget::pos()">pos</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="y" fullname="QWidget::y" href="qwidget.html#y-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="140" type="int" brief="The y coordinate of the widget relative to its parent and including any window frame">
                <getter name="y"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3548" column="4">
                    <brief>This property holds the y coordinate of the widget relative to its parent and including any window frame.</brief>
                    <para>See the <link raw="Window Geometry" href="application-windows.html#window-geometry" type="page" page="Window and Dialog Widgets">Window Geometry</link> documentation for an overview of geometry issues with windows.</para>
                    <para>By default, this property has a value of 0.</para>
                    <see-also>
                        <link raw="frameGeometry" href="qwidget.html#frameGeometry-prop" type="property" getter="QWidget::frameGeometry()">frameGeometry</link>
                        <link raw="x" href="qwidget.html#x-prop" type="property" getter="QWidget::x()">x</link>
                        <link raw="pos" href="qwidget.html#pos-prop" type="property" getter="QWidget::pos()">pos</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="pos" fullname="QWidget::pos" href="qwidget.html#pos-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="141" type="QPoint" brief="The position of the widget within its parent widget">
                <getter name="pos"/>
                <setter name="move"/>
                <setter name="move"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3568" column="4">
                    <brief>This property holds the position of the widget within its parent widget.</brief>
                    <para>If the widget is a window, the position is that of the widget on the desktop, including its frame.</para>
                    <para>When changing the position, the widget, if visible, receives a move event (<link raw="moveEvent()" href="qwidget.html#moveEvent" type="function">moveEvent()</link>) immediately. If the widget is not currently visible, it is guaranteed to receive an event before it is shown.</para>
                    <para>By default, this property contains a position that refers to the origin.</para>
                    <para>
                        <bold>Warning:</bold> Calling  or <link raw="setGeometry()" href="qwidget.html#geometry-prop" type="function">setGeometry()</link> inside <link raw="moveEvent()" href="qwidget.html#moveEvent" type="function">moveEvent()</link> can lead to infinite recursion.</para>
                    <para>See the <link raw="Window Geometry" href="application-windows.html#window-geometry" type="page" page="Window and Dialog Widgets">Window Geometry</link> documentation for an overview of geometry issues with windows.</para>
                    <see-also>
                        <link raw="frameGeometry" href="qwidget.html#frameGeometry-prop" type="property" getter="QWidget::frameGeometry()">frameGeometry</link>
                        <link raw="size" href="qwidget.html#size-prop" type="property" getter="QWidget::size()">size</link>
                        <link raw="x()" href="qwidget.html#x-prop" type="function">x()</link>
                        <link raw="y()" href="qwidget.html#y-prop" type="function">y()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="frameSize" fullname="QWidget::frameSize" href="qwidget.html#frameSize-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="142" type="QSize" brief="The size of the widget including any window frame">
                <getter name="frameSize"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="7117" column="4">
                    <brief>This property holds the size of the widget including any window frame.</brief>
                    <para>By default, this property contains a value that depends on the user's platform and screen geometry.</para>
                </description>
            </property>
            <property threadsafety="unspecified" name="size" fullname="QWidget::size" href="qwidget.html#size-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="143" type="QSize" brief="The size of the widget excluding any window frame">
                <getter name="size"/>
                <setter name="resize"/>
                <setter name="resize"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3640" column="4">
                    <brief>This property holds the size of the widget excluding any window frame.</brief>
                    <para>If the widget is visible when it is being resized, it receives a resize event (<link raw="resizeEvent()" href="qwidget.html#resizeEvent" type="function">resizeEvent()</link>) immediately. If the widget is not currently visible, it is guaranteed to receive an event before it is shown.</para>
                    <para>The size is adjusted if it lies outside the range defined by <link raw="minimumSize()" href="qwidget.html#minimumSize-prop" type="function">minimumSize()</link> and <link raw="maximumSize()" href="qwidget.html#maximumSize-prop" type="function">maximumSize()</link>.</para>
                    <para>By default, this property contains a value that depends on the user's platform and screen geometry.</para>
                    <para>
                        <bold>Warning:</bold> Calling  or <link raw="setGeometry()" href="qwidget.html#geometry-prop" type="function">setGeometry()</link> inside <link raw="resizeEvent()" href="qwidget.html#resizeEvent" type="function">resizeEvent()</link> can lead to infinite recursion.</para>
                    <para>
                        <bold>Note:</bold> Setting the size to <teletype type="highlighted">QSize(0, 0)</teletype> will cause the widget to not appear on screen. This also applies to windows.</para>
                    <see-also>
                        <link raw="pos" href="qwidget.html#pos-prop" type="property" getter="QWidget::pos()">pos</link>
                        <link raw="geometry" href="qwidget.html#geometry-prop" type="property" getter="QWidget::geometry()">geometry</link>
                        <link raw="minimumSize" href="qwidget.html#minimumSize-prop" type="property" getter="QWidget::minimumSize()">minimumSize</link>
                        <link raw="maximumSize" href="qwidget.html#maximumSize-prop" type="property" getter="QWidget::maximumSize()">maximumSize</link>
                        <link raw="resizeEvent()" href="qwidget.html#resizeEvent" type="function">resizeEvent()</link>
                        <link raw="adjustSize()" href="qwidget.html#adjustSize" type="function">adjustSize()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="width" fullname="QWidget::width" href="qwidget.html#width-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="144" type="int" brief="The width of the widget excluding any window frame">
                <getter name="width"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3663" column="4">
                    <brief>This property holds the width of the widget excluding any window frame.</brief>
                    <para>See the <link raw="Window Geometry" href="application-windows.html#window-geometry" type="page" page="Window and Dialog Widgets">Window Geometry</link> documentation for an overview of geometry issues with windows.</para>
                    <para>
                        <bold>Note:</bold> Do not use this function to find the width of a screen on a <link raw="QDesktopWidget" href="qdesktopwidget.html" type="class">multiple screen desktop</link>. Read <link raw="QDesktopWidget#Screen Geometry" href="qdesktopwidget.html#screen-geometry" type="class">this note</link> for details.</para>
                    <para>By default, this property contains a value that depends on the user's platform and screen geometry.</para>
                    <see-also>
                        <link raw="geometry" href="qwidget.html#geometry-prop" type="property" getter="QWidget::geometry()">geometry</link>
                        <link raw="height" href="qwidget.html#height-prop" type="property" getter="QWidget::height()">height</link>
                        <link raw="size" href="qwidget.html#size-prop" type="property" getter="QWidget::size()">size</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="height" fullname="QWidget::height" href="qwidget.html#height-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="145" type="int" brief="The height of the widget excluding any window frame">
                <getter name="height"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3680" column="4">
                    <brief>This property holds the height of the widget excluding any window frame.</brief>
                    <para>See the <link raw="Window Geometry" href="application-windows.html#window-geometry" type="page" page="Window and Dialog Widgets">Window Geometry</link> documentation for an overview of geometry issues with windows.</para>
                    <para>
                        <bold>Note:</bold> Do not use this function to find the height of a screen on a <link raw="QDesktopWidget" href="qdesktopwidget.html" type="class">multiple screen desktop</link>. Read <link raw="QDesktopWidget#Screen Geometry" href="qdesktopwidget.html#screen-geometry" type="class">this note</link> for details.</para>
                    <para>By default, this property contains a value that depends on the user's platform and screen geometry.</para>
                    <see-also>
                        <link raw="geometry" href="qwidget.html#geometry-prop" type="property" getter="QWidget::geometry()">geometry</link>
                        <link raw="width" href="qwidget.html#width-prop" type="property" getter="QWidget::width()">width</link>
                        <link raw="size" href="qwidget.html#size-prop" type="property" getter="QWidget::size()">size</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="rect" fullname="QWidget::rect" href="qwidget.html#rect-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="146" type="QRect" brief="The internal geometry of the widget excluding any window frame">
                <getter name="rect"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3697" column="4">
                    <brief>This property holds the internal geometry of the widget excluding any window frame.</brief>
                    <para>The rect property equals <link raw="QRect" href="qrect.html" type="class">QRect</link>(0, 0, <link raw="width()" href="qwidget.html#width-prop" type="function">width()</link>, <link raw="height()" href="qwidget.html#height-prop" type="function">height()</link>).</para>
                    <para>See the <link raw="Window Geometry" href="application-windows.html#window-geometry" type="page" page="Window and Dialog Widgets">Window Geometry</link> documentation for an overview of geometry issues with windows.</para>
                    <para>By default, this property contains a value that depends on the user's platform and screen geometry.</para>
                    <see-also>
                        <link raw="size" href="qwidget.html#size-prop" type="property" getter="QWidget::size()">size</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="childrenRect" fullname="QWidget::childrenRect" href="qwidget.html#childrenRect-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="147" type="QRect" brief="The bounding rectangle of the widget's children">
                <getter name="childrenRect"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3727" column="4">
                    <brief>This property holds the bounding rectangle of the widget's children.</brief>
                    <para>Hidden children are excluded.</para>
                    <para>By default, for a widget with no children, this property contains a rectangle with zero width and height located at the origin.</para>
                    <see-also>
                        <link raw="childrenRegion()" href="qwidget.html#childrenRegion-prop" type="function">childrenRegion()</link>
                        <link raw="geometry()" href="qwidget.html#geometry-prop" type="function">geometry()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="childrenRegion" fullname="QWidget::childrenRegion" href="qwidget.html#childrenRegion-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="148" type="QRegion" brief="The combined region occupied by the widget's children">
                <getter name="childrenRegion"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3751" column="4">
                    <brief>This property holds the combined region occupied by the widget's children.</brief>
                    <para>Hidden children are excluded.</para>
                    <para>By default, for a widget with no children, this property contains an empty region.</para>
                    <see-also>
                        <link raw="childrenRect()" href="qwidget.html#childrenRect-prop" type="function">childrenRect()</link>
                        <link raw="geometry()" href="qwidget.html#geometry-prop" type="function">geometry()</link>
                        <link raw="mask()" href="qwidget.html#mask" type="function">mask()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="sizePolicy" fullname="QWidget::sizePolicy" href="qwidget.html#sizePolicy-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="149" type="QSizePolicy" brief="The default layout behavior of the widget">
                <getter name="sizePolicy"/>
                <setter name="setSizePolicy"/>
                <setter name="setSizePolicy"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10292" column="4">
                    <brief>This property holds the default layout behavior of the widget.</brief>
                    <para>If there is a <link raw="QLayout" href="qlayout.html" type="class">QLayout</link> that manages this widget's children, the size policy specified by that layout is used. If there is no such <link raw="QLayout" href="qlayout.html" type="class">QLayout</link>, the result of this function is used.</para>
                    <para>The default policy is Preferred/Preferred, which means that the widget can be freely resized, but prefers to be the size <link raw="sizeHint()" href="qwidget.html#sizeHint-prop" type="function">sizeHint()</link> returns. Button-like widgets set the size policy to specify that they may stretch horizontally, but are fixed vertically. The same applies to lineedit controls (such as <link raw="QLineEdit" href="qlineedit.html" type="class">QLineEdit</link>, <link raw="QSpinBox" href="qspinbox.html" type="class">QSpinBox</link> or an editable <link raw="QComboBox" href="qcombobox.html" type="class">QComboBox</link>) and other horizontally orientated widgets (such as <link raw="QProgressBar" href="qprogressbar.html" type="class">QProgressBar</link>). <link raw="QToolButton" href="qtoolbutton.html" type="class">QToolButton</link>'s are normally square, so they allow growth in both directions. Widgets that support different directions (such as <link raw="QSlider" href="qslider.html" type="class">QSlider</link>, <link raw="QScrollBar" href="qscrollbar.html" type="class">QScrollBar</link> or QHeader) specify stretching in the respective direction only. Widgets that can provide scroll bars (usually subclasses of <link raw="QScrollArea" href="qscrollarea.html" type="class">QScrollArea</link>) tend to specify that they can use additional space, and that they can make do with less than <link raw="sizeHint()" href="qwidget.html#sizeHint-prop" type="function">sizeHint()</link>.</para>
                    <see-also>
                        <link raw="sizeHint()" href="qwidget.html#sizeHint-prop" type="function">sizeHint()</link>
                        <link raw="QLayout" href="qlayout.html" type="class">QLayout</link>
                        <link raw="QSizePolicy" href="qsizepolicy.html" type="class">QSizePolicy</link>
                        <link raw="updateGeometry()" href="qwidget.html#updateGeometry" type="function">updateGeometry()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="minimumSize" fullname="QWidget::minimumSize" href="qwidget.html#minimumSize-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="150" type="QSize" brief="The widget's minimum size">
                <getter name="minimumSize"/>
                <setter name="setMinimumSize"/>
                <setter name="setMinimumSize"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3781" column="4">
                    <brief>This property holds the widget's minimum size.</brief>
                    <para>The widget cannot be resized to a smaller size than the minimum widget size. The widget's size is forced to the minimum size if the current size is smaller.</para>
                    <para>The minimum size set by this function will override the minimum size defined by <link raw="QLayout" href="qlayout.html" type="class">QLayout</link>. In order to unset the minimum size, use a value of <teletype type="highlighted">QSize(0, 0)</teletype>.</para>
                    <para>By default, this property contains a size with zero width and height.</para>
                    <see-also>
                        <link raw="minimumWidth" href="qwidget.html#minimumWidth-prop" type="property" getter="QWidget::minimumWidth()">minimumWidth</link>
                        <link raw="minimumHeight" href="qwidget.html#minimumHeight-prop" type="property" getter="QWidget::minimumHeight()">minimumHeight</link>
                        <link raw="maximumSize" href="qwidget.html#maximumSize-prop" type="property" getter="QWidget::maximumSize()">maximumSize</link>
                        <link raw="sizeIncrement" href="qwidget.html#sizeIncrement-prop" type="property" getter="QWidget::sizeIncrement()">sizeIncrement</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="maximumSize" fullname="QWidget::maximumSize" href="qwidget.html#maximumSize-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="151" type="QSize" brief="The widget's maximum size in pixels">
                <getter name="maximumSize"/>
                <setter name="setMaximumSize"/>
                <setter name="setMaximumSize"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3804" column="4">
                    <brief>This property holds the widget's maximum size in pixels.</brief>
                    <para>The widget cannot be resized to a larger size than the maximum widget size.</para>
                    <para>By default, this property contains a size in which both width and height have values of 16777215.</para>
                    <para>
                        <bold>Note:</bold> The definition of the <teletype type="highlighted">QWIDGETSIZE_MAX</teletype> macro limits the maximum size of widgets.</para>
                    <see-also>
                        <link raw="maximumWidth" href="qwidget.html#maximumWidth-prop" type="property" getter="QWidget::maximumWidth()">maximumWidth</link>
                        <link raw="maximumHeight" href="qwidget.html#maximumHeight-prop" type="property" getter="QWidget::maximumHeight()">maximumHeight</link>
                        <link raw="minimumSize" href="qwidget.html#minimumSize-prop" type="property" getter="QWidget::minimumSize()">minimumSize</link>
                        <link raw="sizeIncrement" href="qwidget.html#sizeIncrement-prop" type="property" getter="QWidget::sizeIncrement()">sizeIncrement</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="minimumWidth" fullname="QWidget::minimumWidth" href="qwidget.html#minimumWidth-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="152" type="int" brief="The widget's minimum width in pixels">
                <getter name="minimumWidth"/>
                <setter name="setMinimumWidth"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3828" column="4">
                    <brief>This property holds the widget's minimum width in pixels.</brief>
                    <para>This property corresponds to the width held by the <link raw="minimumSize" href="qwidget.html#minimumSize-prop" type="property" getter="QWidget::minimumSize()">minimumSize</link> property.</para>
                    <para>By default, this property has a value of 0.</para>
                    <see-also>
                        <link raw="minimumSize" href="qwidget.html#minimumSize-prop" type="property" getter="QWidget::minimumSize()">minimumSize</link>
                        <link raw="minimumHeight" href="qwidget.html#minimumHeight-prop" type="property" getter="QWidget::minimumHeight()">minimumHeight</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="minimumHeight" fullname="QWidget::minimumHeight" href="qwidget.html#minimumHeight-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="153" type="int" brief="The widget's minimum height in pixels">
                <getter name="minimumHeight"/>
                <setter name="setMinimumHeight"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3839" column="4">
                    <brief>This property holds the widget's minimum height in pixels.</brief>
                    <para>This property corresponds to the height held by the <link raw="minimumSize" href="qwidget.html#minimumSize-prop" type="property" getter="QWidget::minimumSize()">minimumSize</link> property.</para>
                    <para>By default, this property has a value of 0.</para>
                    <see-also>
                        <link raw="minimumSize" href="qwidget.html#minimumSize-prop" type="property" getter="QWidget::minimumSize()">minimumSize</link>
                        <link raw="minimumWidth" href="qwidget.html#minimumWidth-prop" type="property" getter="QWidget::minimumWidth()">minimumWidth</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="maximumWidth" fullname="QWidget::maximumWidth" href="qwidget.html#maximumWidth-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="154" type="int" brief="The widget's maximum width in pixels">
                <getter name="maximumWidth"/>
                <setter name="setMaximumWidth"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3850" column="4">
                    <brief>This property holds the widget's maximum width in pixels.</brief>
                    <para>This property corresponds to the width held by the <link raw="maximumSize" href="qwidget.html#maximumSize-prop" type="property" getter="QWidget::maximumSize()">maximumSize</link> property.</para>
                    <para>By default, this property contains a value of 16777215.</para>
                    <para>
                        <bold>Note:</bold> The definition of the <teletype type="highlighted">QWIDGETSIZE_MAX</teletype> macro limits the maximum size of widgets.</para>
                    <see-also>
                        <link raw="maximumSize" href="qwidget.html#maximumSize-prop" type="property" getter="QWidget::maximumSize()">maximumSize</link>
                        <link raw="maximumHeight" href="qwidget.html#maximumHeight-prop" type="property" getter="QWidget::maximumHeight()">maximumHeight</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="maximumHeight" fullname="QWidget::maximumHeight" href="qwidget.html#maximumHeight-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="155" type="int" brief="The widget's maximum height in pixels">
                <getter name="maximumHeight"/>
                <setter name="setMaximumHeight"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3864" column="4">
                    <brief>This property holds the widget's maximum height in pixels.</brief>
                    <para>This property corresponds to the height held by the <link raw="maximumSize" href="qwidget.html#maximumSize-prop" type="property" getter="QWidget::maximumSize()">maximumSize</link> property.</para>
                    <para>By default, this property contains a value of 16777215.</para>
                    <para>
                        <bold>Note:</bold> The definition of the <teletype type="highlighted">QWIDGETSIZE_MAX</teletype> macro limits the maximum size of widgets.</para>
                    <see-also>
                        <link raw="maximumSize" href="qwidget.html#maximumSize-prop" type="property" getter="QWidget::maximumSize()">maximumSize</link>
                        <link raw="maximumWidth" href="qwidget.html#maximumWidth-prop" type="property" getter="QWidget::maximumWidth()">maximumWidth</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="sizeIncrement" fullname="QWidget::sizeIncrement" href="qwidget.html#sizeIncrement-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="156" type="QSize" brief="The size increment of the widget">
                <getter name="sizeIncrement"/>
                <setter name="setSizeIncrement"/>
                <setter name="setSizeIncrement"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3878" column="4">
                    <brief>This property holds the size increment of the widget.</brief>
                    <para>When the user resizes the window, the size will move in steps of .<link raw="width()" href="qwidget.html#width-prop" type="function">width()</link> pixels horizontally and .<link raw="height()" href="qwidget.html#height-prop" type="function">height()</link> pixels vertically, with <link raw="baseSize()" href="qwidget.html#baseSize-prop" type="function">baseSize()</link> as the basis. Preferred widget sizes are for non-negative integers <italic>i</italic> and <italic>j</italic>:</para>
                    <snippet location="code/src_gui_kernel_qwidget.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/widgets/doc/snippets/code/src_gui_kernel_qwidget.cpp" identifier="2"/>
                    <para>Note that while you can set the size increment for all widgets, it only affects windows.</para>
                    <para>By default, this property contains a size with zero width and height.</para>
                    <para>
                        <bold>Warning:</bold> The size increment has no effect under Windows, and may be disregarded by the window manager on X11.</para>
                    <see-also>
                        <link raw="size" href="qwidget.html#size-prop" type="property" getter="QWidget::size()">size</link>
                        <link raw="minimumSize" href="qwidget.html#minimumSize-prop" type="property" getter="QWidget::minimumSize()">minimumSize</link>
                        <link raw="maximumSize" href="qwidget.html#maximumSize-prop" type="property" getter="QWidget::maximumSize()">maximumSize</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="baseSize" fullname="QWidget::baseSize" href="qwidget.html#baseSize-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="157" type="QSize" brief="The base size of the widget">
                <getter name="baseSize"/>
                <setter name="setBaseSize"/>
                <setter name="setBaseSize"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3907" column="4">
                    <brief>This property holds the base size of the widget.</brief>
                    <para>The base size is used to calculate a proper widget size if the widget defines <link raw="sizeIncrement()" href="qwidget.html#sizeIncrement-prop" type="function">sizeIncrement()</link>.</para>
                    <para>By default, for a newly-created widget, this property contains a size with zero width and height.</para>
                    <see-also>
                        <link raw="setSizeIncrement()" href="qwidget.html#sizeIncrement-prop" type="function">setSizeIncrement()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="palette" fullname="QWidget::palette" href="qwidget.html#palette-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="158" type="QPalette" brief="The widget's palette">
                <getter name="palette"/>
                <setter name="setPalette"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4475" column="4">
                    <brief>This property holds the widget's palette.</brief>
                    <para>This property describes the widget's palette. The palette is used by the widget's style when rendering standard components, and is available as a means to ensure that custom widgets can maintain consistency with the native platform's look and feel. It's common that different platforms, or different styles, have different palettes.</para>
                    <para>When you assign a new palette to a widget, the color roles from this palette are combined with the widget's default palette to form the widget's final palette. The palette entry for the widget's background role is used to fill the widget's background (see <link raw="QWidget::autoFillBackground" href="qwidget.html#autoFillBackground-prop" type="property" getter="QWidget::autoFillBackground()">QWidget::autoFillBackground</link>), and the foreground role initializes <link raw="QPainter" href="qpainter.html" type="class">QPainter</link>'s pen.</para>
                    <para>The default depends on the system environment. <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> maintains a system/theme palette which serves as a default for all widgets. There may also be special palette defaults for certain types of widgets (e.g., on Windows Vista, all classes that derive from <link raw="QMenuBar" href="qmenubar.html" type="class">QMenuBar</link> have a special default palette). You can also define default palettes for widgets yourself by passing a custom palette and the name of a widget to <link raw="QApplication::setPalette()" href="qapplication.html#setPalette" type="function">QApplication::setPalette()</link>. Finally, the style always has the option of polishing the palette as it's assigned (see <link raw="QStyle::polish()" href="qstyle.html#polish" type="function">QStyle::polish()</link>).</para>
                    <para>
                        <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> propagates explicit palette roles from parent to child. If you assign a brush or color to a specific role on a palette and assign that palette to a widget, that role will propagate to all the widget's children, overriding any system defaults for that role. Note that palettes by default don't propagate to windows (see <link raw="isWindow()" href="qwidget.html#isWindow" type="function">isWindow()</link>) unless the <link raw="Qt::WA_WindowPropagation" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_WindowPropagation</link> attribute is enabled.</para>
                    <para>
                        <link raw="QWidget" href="qwidget.html" type="class">QWidget</link>'s palette propagation is similar to its font propagation.</para>
                    <para>The current style, which is used to render the content of all standard Qt widgets, is free to choose colors and brushes from the widget palette, or in some cases, to ignore the palette (partially, or completely). In particular, certain styles like GTK style, Mac style, and Windows Vista style, depend on third party APIs to render the content of widgets, and these styles typically do not follow the palette. Because of this, assigning roles to a widget's palette is not guaranteed to change the appearance of the widget. Instead, you may choose to apply a <link raw="styleSheet" href="stylesheet.html" type="page" page="Qt Style Sheets">styleSheet</link>. You can refer to our Knowledge Base article here for more information.</para>
                    <para>
                        <bold>Warning:</bold> Do not use this function in conjunction with <link raw="Qt Style Sheets" href="stylesheet.html" type="page" page="Qt Style Sheets">Qt Style Sheets</link>. When using style sheets, the palette of a widget can be customized using the &quot;color&quot;, &quot;background-color&quot;, &quot;selection-color&quot;, &quot;selection-background-color&quot; and &quot;alternate-background-color&quot;.</para>
                    <see-also>
                        <link raw="QApplication::palette()" href="qapplication.html#palette" type="function">QApplication::palette()</link>
                        <link raw="QWidget::font()" href="qwidget.html#font-prop" type="function">QWidget::font()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="font" fullname="QWidget::font" href="qwidget.html#font-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="159" type="QFont" brief="The font currently set for the widget">
                <getter name="font"/>
                <setter name="setFont"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4641" column="4">
                    <brief>This property holds the font currently set for the widget.</brief>
                    <para>This property describes the widget's requested font. The font is used by the widget's style when rendering standard components, and is available as a means to ensure that custom widgets can maintain consistency with the native platform's look and feel. It's common that different platforms, or different styles, define different fonts for an application.</para>
                    <para>When you assign a new font to a widget, the properties from this font are combined with the widget's default font to form the widget's final font. You can call <link raw="fontInfo()" href="qwidget.html#fontInfo" type="function">fontInfo()</link> to get a copy of the widget's final font. The final font is also used to initialize <link raw="QPainter" href="qpainter.html" type="class">QPainter</link>'s font.</para>
                    <para>The default depends on the system environment. <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> maintains a system/theme font which serves as a default for all widgets. There may also be special font defaults for certain types of widgets. You can also define default fonts for widgets yourself by passing a custom font and the name of a widget to <link raw="QApplication::setFont()" href="qapplication.html#setFont" type="function">QApplication::setFont()</link>. Finally, the font is matched against Qt's font database to find the best match.</para>
                    <para>
                        <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> propagates explicit font properties from parent to child. If you change a specific property on a font and assign that font to a widget, that property will propagate to all the widget's children, overriding any system defaults for that property. Note that fonts by default don't propagate to windows (see <link raw="isWindow()" href="qwidget.html#isWindow" type="function">isWindow()</link>) unless the <link raw="Qt::WA_WindowPropagation" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_WindowPropagation</link> attribute is enabled.</para>
                    <para>
                        <link raw="QWidget" href="qwidget.html" type="class">QWidget</link>'s font propagation is similar to its palette propagation.</para>
                    <para>The current style, which is used to render the content of all standard Qt widgets, is free to choose to use the widget font, or in some cases, to ignore it (partially, or completely). In particular, certain styles like GTK style, Mac style, and Windows Vista style, apply special modifications to the widget font to match the platform's native look and feel. Because of this, assigning properties to a widget's font is not guaranteed to change the appearance of the widget. Instead, you may choose to apply a <link raw="styleSheet" href="stylesheet.html" type="page" page="Qt Style Sheets">styleSheet</link>.</para>
                    <para>
                        <bold>Note:</bold> If <link raw="Qt Style Sheets" href="stylesheet.html" type="page" page="Qt Style Sheets">Qt Style Sheets</link> are used on the same widget as , style sheets will take precedence if the settings conflict.</para>
                    <see-also>
                        <link raw="fontInfo()" href="qwidget.html#fontInfo" type="function">fontInfo()</link>
                        <link raw="fontMetrics()" href="qwidget.html#fontMetrics" type="function">fontMetrics()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="cursor" fullname="QWidget::cursor" href="qwidget.html#cursor-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="161" type="QCursor" brief="The cursor shape for this widget">
                <getter name="cursor"/>
                <setter name="setCursor"/>
                <resetter name="unsetCursor"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4929" column="4">
                    <brief>This property holds the cursor shape for this widget.</brief>
                    <para>The mouse cursor will assume this shape when it's over this widget. See the <link raw="Qt::CursorShape" href="qt.html#CursorShape-enum" type="enum" enum="Qt::CursorShape">list of predefined cursor objects</link> for a range of useful shapes.</para>
                    <para>An editor widget might use an I-beam cursor:</para>
                    <snippet location="code/src_gui_kernel_qwidget.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/widgets/doc/snippets/code/src_gui_kernel_qwidget.cpp" identifier="6"/>
                    <para>If no cursor has been set, or after a call to , the parent's cursor is used.</para>
                    <para>By default, this property contains a cursor with the <link raw="Qt::ArrowCursor" href="qt.html#CursorShape-enum" type="enum" enum="Qt::CursorShape">Qt::ArrowCursor</link> shape.</para>
                    <para>Some underlying window implementations will reset the cursor if it leaves a widget even if the mouse is grabbed. If you want to have a cursor set for all widgets, even when outside the window, consider <link raw="QApplication::setOverrideCursor()" href="qguiapplication.html#setOverrideCursor" type="function">QApplication::setOverrideCursor()</link>.</para>
                    <see-also>
                        <link raw="QApplication::setOverrideCursor()" href="qguiapplication.html#setOverrideCursor" type="function">QApplication::setOverrideCursor()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="mouseTracking" fullname="QWidget::mouseTracking" href="qwidget.html#mouseTracking-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="163" type="bool" brief="Whether mouse tracking is enabled for the widget">
                <getter name="hasMouseTracking"/>
                <setter name="setMouseTracking"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6354" column="4">
                    <brief>This property holds whether mouse tracking is enabled for the widget.</brief>
                    <para>If mouse tracking is disabled (the default), the widget only receives mouse move events when at least one mouse button is pressed while the mouse is being moved.</para>
                    <para>If mouse tracking is enabled, the widget receives mouse move events even if no buttons are pressed.</para>
                    <see-also>
                        <link raw="mouseMoveEvent()" href="qwidget.html#mouseMoveEvent" type="function">mouseMoveEvent()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="tabletTracking" fullname="QWidget::tabletTracking" href="qwidget.html#tabletTracking-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="164" since="5.9" type="bool" brief="Whether tablet tracking is enabled for the widget">
                <getter name="hasTabletTracking"/>
                <setter name="setTabletTracking"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6368" column="4">
                    <brief>This property holds whether tablet tracking is enabled for the widget.</brief>
                    <para>If tablet tracking is disabled (the default), the widget only receives tablet move events when the stylus is in contact with the tablet, or at least one stylus button is pressed, while the stylus is being moved.</para>
                    <para>If tablet tracking is enabled, the widget receives tablet move events even while hovering in proximity. This is useful for monitoring position as well as the auxiliary properties such as rotation and tilt, and providing feedback in the UI.</para>
                    <see-also>
                        <link raw="tabletEvent()" href="qwidget.html#tabletEvent" type="function">tabletEvent()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="isActiveWindow" fullname="QWidget::isActiveWindow" href="qwidget.html#isActiveWindow-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="165" type="bool" brief="Whether this widget's window is the active window">
                <getter name="isActiveWindow"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6853" column="4">
                    <brief>This property holds whether this widget's window is the active window.</brief>
                    <para>The active window is the window that contains the widget that has keyboard focus (The window may still have focus if it has no widgets or none of its widgets accepts keyboard focus).</para>
                    <para>When popup windows are visible, this property is <teletype type="highlighted">true</teletype> for both the active window <italic>and</italic> for the popup.</para>
                    <para>By default, this property is <teletype type="highlighted">false</teletype>.</para>
                    <see-also>
                        <link raw="activateWindow()" href="qwidget.html#activateWindow" type="function">activateWindow()</link>
                        <link raw="QApplication::activeWindow()" href="qapplication.html#activeWindow" type="function">QApplication::activeWindow()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="focusPolicy" fullname="QWidget::focusPolicy" href="qwidget.html#focusPolicy-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="166" type="Qt::FocusPolicy" brief="The way the widget accepts keyboard focus">
                <getter name="focusPolicy"/>
                <setter name="setFocusPolicy"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="7800" column="4">
                    <brief>This property holds the way the widget accepts keyboard focus.</brief>
                    <para>The policy is <link raw="Qt::TabFocus" href="qt.html#FocusPolicy-enum" type="enum" enum="Qt::FocusPolicy">Qt::TabFocus</link> if the widget accepts keyboard focus by tabbing, <link raw="Qt::ClickFocus" href="qt.html#FocusPolicy-enum" type="enum" enum="Qt::FocusPolicy">Qt::ClickFocus</link> if the widget accepts focus by clicking, <link raw="Qt::StrongFocus" href="qt.html#FocusPolicy-enum" type="enum" enum="Qt::FocusPolicy">Qt::StrongFocus</link> if it accepts both, and <link raw="Qt::NoFocus" href="qt.html#FocusPolicy-enum" type="enum" enum="Qt::FocusPolicy">Qt::NoFocus</link> (the default) if it does not accept focus at all.</para>
                    <para>You must enable keyboard focus for a widget if it processes keyboard events. This is normally done from the widget's constructor. For instance, the <link raw="QLineEdit" href="qlineedit.html" type="class">QLineEdit</link> constructor calls (<link raw="Qt::StrongFocus" href="qt.html#FocusPolicy-enum" type="enum" enum="Qt::FocusPolicy">Qt::StrongFocus</link>).</para>
                    <para>If the widget has a focus proxy, then the focus policy will be propagated to it.</para>
                    <see-also>
                        <link raw="focusInEvent()" href="qwidget.html#focusInEvent" type="function">focusInEvent()</link>
                        <link raw="focusOutEvent()" href="qwidget.html#focusOutEvent" type="function">focusOutEvent()</link>
                        <link raw="keyPressEvent()" href="qwidget.html#keyPressEvent" type="function">keyPressEvent()</link>
                        <link raw="keyReleaseEvent()" href="qwidget.html#keyReleaseEvent" type="function">keyReleaseEvent()</link>
                        <link raw="enabled" href="qwidget.html#enabled-prop" type="property" getter="QWidget::isEnabled()">enabled</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="focus" fullname="QWidget::focus" href="qwidget.html#focus-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="167" type="bool" brief="Whether this widget (or its focus proxy) has the keyboard input focus">
                <getter name="hasFocus"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6433" column="4">
                    <brief>This property holds whether this widget (or its focus proxy) has the keyboard input focus.</brief>
                    <para>By default, this property is <teletype type="highlighted">false</teletype>.</para>
                    <para>
                        <bold>Note:</bold> Obtaining the value of this property for a widget is effectively equivalent to checking whether <link raw="QApplication::focusWidget()" href="qapplication.html#focusWidget" type="function">QApplication::focusWidget()</link> refers to the widget.</para>
                    <see-also>
                        <link raw="setFocus()" href="qwidget.html#setFocus" type="function">setFocus()</link>
                        <link raw="clearFocus()" href="qwidget.html#clearFocus" type="function">clearFocus()</link>
                        <link raw="setFocusPolicy()" href="qwidget.html#focusPolicy-prop" type="function">setFocusPolicy()</link>
                        <link raw="QApplication::focusWidget()" href="qapplication.html#focusWidget" type="function">QApplication::focusWidget()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="contextMenuPolicy" fullname="QWidget::contextMenuPolicy" href="qwidget.html#contextMenuPolicy-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="168" type="Qt::ContextMenuPolicy" brief="How the widget shows a context menu">
                <getter name="contextMenuPolicy"/>
                <setter name="setContextMenuPolicy"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="7776" column="4">
                    <brief>This property holds how the widget shows a context menu.</brief>
                    <para>The default value of this property is <link raw="Qt::DefaultContextMenu" href="qt.html#ContextMenuPolicy-enum" type="enum" enum="Qt::ContextMenuPolicy">Qt::DefaultContextMenu</link>, which means the <link raw="contextMenuEvent()" href="qwidget.html#contextMenuEvent" type="function">contextMenuEvent()</link> handler is called. Other values are <link raw="Qt::NoContextMenu" href="qt.html#ContextMenuPolicy-enum" type="enum" enum="Qt::ContextMenuPolicy">Qt::NoContextMenu</link>, <link raw="Qt::PreventContextMenu" href="qt.html#ContextMenuPolicy-enum" type="enum" enum="Qt::ContextMenuPolicy">Qt::PreventContextMenu</link>, <link raw="Qt::ActionsContextMenu" href="qt.html#ContextMenuPolicy-enum" type="enum" enum="Qt::ContextMenuPolicy">Qt::ActionsContextMenu</link>, and <link raw="Qt::CustomContextMenu" href="qt.html#ContextMenuPolicy-enum" type="enum" enum="Qt::ContextMenuPolicy">Qt::CustomContextMenu</link>. With <link raw="Qt::CustomContextMenu" href="qt.html#ContextMenuPolicy-enum" type="enum" enum="Qt::ContextMenuPolicy">Qt::CustomContextMenu</link>, the signal <link raw="customContextMenuRequested()" href="qwidget.html#customContextMenuRequested" type="function">customContextMenuRequested()</link> is emitted.</para>
                    <see-also>
                        <link raw="contextMenuEvent()" href="qwidget.html#contextMenuEvent" type="function">contextMenuEvent()</link>
                        <link raw="customContextMenuRequested()" href="qwidget.html#customContextMenuRequested" type="function">customContextMenuRequested()</link>
                        <link raw="actions()" href="qwidget.html#actions" type="function">actions()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="updatesEnabled" fullname="QWidget::updatesEnabled" href="qwidget.html#updatesEnabled-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="169" type="bool" brief="Whether updates are enabled">
                <getter name="updatesEnabled"/>
                <setter name="setUpdatesEnabled"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="7835" column="4">
                    <brief>This property holds whether updates are enabled.</brief>
                    <para>An updates enabled widget receives paint events and has a system background; a disabled widget does not. This also implies that calling <link raw="update()" href="qwidget.html#update" type="function">update()</link> and <link raw="repaint()" href="qwidget.html#repaint" type="function">repaint()</link> has no effect if updates are disabled.</para>
                    <para>By default, this property is <teletype type="highlighted">true</teletype>.</para>
                    <para> is normally used to disable updates for a short period of time, for instance to avoid screen flicker during large changes. In Qt, widgets normally do not generate screen flicker, but on X11 the server might erase regions on the screen when widgets get hidden before they can be replaced by other widgets. Disabling updates solves this.</para>
                    <para>Example:</para>
                    <snippet location="code/src_gui_kernel_qwidget.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/widgets/doc/snippets/code/src_gui_kernel_qwidget.cpp" identifier="13"/>
                    <para>Disabling a widget implicitly disables all its children. Enabling a widget enables all child widgets <italic>except</italic> top-level widgets or those that have been explicitly disabled. Re-enabling updates implicitly calls <link raw="update()" href="qwidget.html#update" type="function">update()</link> on the widget.</para>
                    <see-also>
                        <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="visible" fullname="QWidget::visible" href="qwidget.html#visible-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="170" type="bool" brief="Whether the widget is visible">
                <getter name="isVisible"/>
                <setter name="setVisible"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="8563" column="4">
                    <brief>This property holds whether the widget is visible.</brief>
                    <para>Calling (true) or <link raw="show()" href="qwidget.html#show" type="function">show()</link> sets the widget to visible status if all its parent widgets up to the window are visible. If an ancestor is not visible, the widget won't become visible until all its ancestors are shown. If its size or position has changed, Qt guarantees that a widget gets move and resize events just before it is shown. If the widget has not been resized yet, Qt will adjust the widget's size to a useful default using <link raw="adjustSize()" href="qwidget.html#adjustSize" type="function">adjustSize()</link>.</para>
                    <para>Calling (false) or <link raw="hide()" href="qwidget.html#hide" type="function">hide()</link> hides a widget explicitly. An explicitly hidden widget will never become visible, even if all its ancestors become visible, unless you show it.</para>
                    <para>A widget receives show and hide events when its visibility status changes. Between a hide and a show event, there is no need to waste CPU cycles preparing or displaying information to the user. A video application, for example, might simply stop generating new frames.</para>
                    <para>A widget that happens to be obscured by other windows on the screen is considered to be visible. The same applies to iconified windows and windows that exist on another virtual desktop (on platforms that support this concept). A widget receives spontaneous show and hide events when its mapping status is changed by the window system, e.g. a spontaneous hide event when the user minimizes the window, and a spontaneous show event when the window is restored again.</para>
                    <para>You almost never have to reimplement the  function. If you need to change some settings before a widget is shown, use <link raw="showEvent()" href="qwidget.html#showEvent" type="function">showEvent()</link> instead. If you need to do some delayed initialization use the Polish event delivered to the <link raw="event()" href="qwidget.html#event" type="function">event()</link> function.</para>
                    <see-also>
                        <link raw="show()" href="qwidget.html#show" type="function">show()</link>
                        <link raw="hide()" href="qwidget.html#hide" type="function">hide()</link>
                        <link raw="isHidden()" href="qwidget.html#isHidden" type="function">isHidden()</link>
                        <link raw="isVisibleTo()" href="qwidget.html#isVisibleTo" type="function">isVisibleTo()</link>
                        <link raw="isMinimized()" href="qwidget.html#minimized-prop" type="function">isMinimized()</link>
                        <link raw="showEvent()" href="qwidget.html#showEvent" type="function">showEvent()</link>
                        <link raw="hideEvent()" href="qwidget.html#hideEvent" type="function">hideEvent()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="minimized" fullname="QWidget::minimized" href="qwidget.html#minimized-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="171" type="bool" brief="Whether this widget is minimized (iconified)">
                <getter name="isMinimized"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="2941" column="4">
                    <brief>This property holds whether this widget is minimized (iconified).</brief>
                    <para>This property is only relevant for windows.</para>
                    <para>By default, this property is <teletype type="highlighted">false</teletype>.</para>
                    <see-also>
                        <link raw="showMinimized()" href="qwidget.html#showMinimized" type="function">showMinimized()</link>
                        <link raw="visible" href="qwidget.html#visible-prop" type="property" getter="QWidget::isVisible()">visible</link>
                        <link raw="show()" href="qwidget.html#show" type="function">show()</link>
                        <link raw="hide()" href="qwidget.html#hide" type="function">hide()</link>
                        <link raw="showNormal()" href="qwidget.html#showNormal" type="function">showNormal()</link>
                        <link raw="maximized" href="qwidget.html#maximized-prop" type="property" getter="QWidget::isMaximized()">maximized</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="maximized" fullname="QWidget::maximized" href="qwidget.html#maximized-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="172" type="bool" brief="Whether this widget is maximized">
                <getter name="isMaximized"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="2975" column="4">
                    <brief>This property holds whether this widget is maximized.</brief>
                    <para>This property is only relevant for windows.</para>
                    <para>
                        <bold>Note:</bold> Due to limitations on some window systems, this does not always report the expected results (e.g., if the user on X11 maximizes the window via the window manager, Qt has no way of distinguishing this from any other resize). This is expected to improve as window manager protocols evolve.</para>
                    <para>By default, this property is <teletype type="highlighted">false</teletype>.</para>
                    <see-also>
                        <link raw="windowState()" href="qwidget.html#windowState" type="function">windowState()</link>
                        <link raw="showMaximized()" href="qwidget.html#showMaximized" type="function">showMaximized()</link>
                        <link raw="visible" href="qwidget.html#visible-prop" type="property" getter="QWidget::isVisible()">visible</link>
                        <link raw="show()" href="qwidget.html#show" type="function">show()</link>
                        <link raw="hide()" href="qwidget.html#hide" type="function">hide()</link>
                        <link raw="showNormal()" href="qwidget.html#showNormal" type="function">showNormal()</link>
                        <link raw="minimized" href="qwidget.html#minimized-prop" type="property" getter="QWidget::isMinimized()">minimized</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="fullScreen" fullname="QWidget::fullScreen" href="qwidget.html#fullScreen-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="173" type="bool" brief="Whether the widget is shown in full screen mode">
                <getter name="isFullScreen"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3084" column="4">
                    <brief>This property holds whether the widget is shown in full screen mode.</brief>
                    <para>A widget in full screen mode occupies the whole screen area and does not display window decorations, such as a title bar.</para>
                    <para>By default, this property is <teletype type="highlighted">false</teletype>.</para>
                    <see-also>
                        <link raw="windowState()" href="qwidget.html#windowState" type="function">windowState()</link>
                        <link raw="minimized" href="qwidget.html#minimized-prop" type="property" getter="QWidget::isMinimized()">minimized</link>
                        <link raw="maximized" href="qwidget.html#maximized-prop" type="property" getter="QWidget::isMaximized()">maximized</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="sizeHint" fullname="QWidget::sizeHint" href="qwidget.html#sizeHint-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="174" type="QSize" brief="The recommended size for the widget">
                <getter name="sizeHint"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="8733" column="4">
                    <brief>This property holds the recommended size for the widget.</brief>
                    <para>If the value of this property is an invalid size, no size is recommended.</para>
                    <para>The default implementation of  returns an invalid size if there is no layout for this widget, and returns the layout's preferred size otherwise.</para>
                    <see-also>
                        <link raw="QSize::isValid()" href="qsize.html#isValid" type="function">QSize::isValid()</link>
                        <link raw="minimumSizeHint()" href="qwidget.html#minimumSizeHint-prop" type="function">minimumSizeHint()</link>
                        <link raw="sizePolicy()" href="qwidget.html#sizePolicy-prop" type="function">sizePolicy()</link>
                        <link raw="setMinimumSize()" href="qwidget.html#minimumSize-prop" type="function">setMinimumSize()</link>
                        <link raw="updateGeometry()" href="qwidget.html#updateGeometry" type="function">updateGeometry()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="minimumSizeHint" fullname="QWidget::minimumSizeHint" href="qwidget.html#minimumSizeHint-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="175" type="QSize" brief="The recommended minimum size for the widget">
                <getter name="minimumSizeHint"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="8756" column="4">
                    <brief>This property holds the recommended minimum size for the widget.</brief>
                    <para>If the value of this property is an invalid size, no minimum size is recommended.</para>
                    <para>The default implementation of  returns an invalid size if there is no layout for this widget, and returns the layout's minimum size otherwise. Most built-in widgets reimplement .</para>
                    <para>
                        <link raw="QLayout" href="qlayout.html" type="class">QLayout</link> will never resize a widget to a size smaller than the minimum size hint unless <link raw="minimumSize()" href="qwidget.html#minimumSize-prop" type="function">minimumSize()</link> is set or the size policy is set to QSizePolicy::Ignore. If <link raw="minimumSize()" href="qwidget.html#minimumSize-prop" type="function">minimumSize()</link> is set, the minimum size hint will be ignored.</para>
                    <see-also>
                        <link raw="QSize::isValid()" href="qsize.html#isValid" type="function">QSize::isValid()</link>
                        <link raw="resize()" href="qwidget.html#size-prop" type="function">resize()</link>
                        <link raw="setMinimumSize()" href="qwidget.html#minimumSize-prop" type="function">setMinimumSize()</link>
                        <link raw="sizePolicy()" href="qwidget.html#sizePolicy-prop" type="function">sizePolicy()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="acceptDrops" fullname="QWidget::acceptDrops" href="qwidget.html#acceptDrops-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="176" type="bool" brief="Whether drop events are enabled for this widget">
                <getter name="acceptDrops"/>
                <setter name="setAcceptDrops"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3455" column="4">
                    <brief>This property holds whether drop events are enabled for this widget.</brief>
                    <para>Setting this property to true announces to the system that this widget <italic>may</italic> be able to accept drop events.</para>
                    <para>If the widget is the desktop (<link raw="windowType()" href="qwidget.html#windowType" type="function">windowType()</link> == <link raw="Qt::Desktop" href="qt.html#WindowType-enum" type="enum" enum="Qt::WindowType">Qt::Desktop</link>), this may fail if another application is using the desktop; you can call  to test if this occurs.</para>
                    <para>
                        <bold>Warning:</bold> Do not modify this property in a drag and drop event handler.</para>
                    <para>By default, this property is <teletype type="highlighted">false</teletype>.</para>
                    <see-also>
                        <link raw="Drag and Drop" href="graphicsview.html#drag-and-drop" type="page" page="Graphics View Framework">Drag and Drop</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="windowTitle" fullname="QWidget::windowTitle" href="qwidget.html#windowTitle-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="177" type="QString" brief="The window title (caption)">
                <getter name="windowTitle"/>
                <setter name="setWindowTitle"/>
                <notifier name="windowTitleChanged"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="5992" column="4">
                    <brief>This property holds the window title (caption).</brief>
                    <para>This property only makes sense for top-level widgets, such as windows and dialogs. If no caption has been set, the title is based of the <link raw="windowFilePath" href="qwidget.html#windowFilePath-prop" type="property" getter="QWidget::windowFilePath()">windowFilePath</link>. If neither of these is set, then the title is an empty string.</para>
                    <para>If you use the <link raw="windowModified" href="qwidget.html#windowModified-prop" type="property" getter="QWidget::isWindowModified()">windowModified</link> mechanism, the window title must contain a &quot;[*]&quot; placeholder, which indicates where the '*' should appear. Normally, it should appear right after the file name (e.g., &quot;document1.txt[*] - Text Editor&quot;). If the <link raw="windowModified" href="qwidget.html#windowModified-prop" type="property" getter="QWidget::isWindowModified()">windowModified</link> property is <teletype type="highlighted">false</teletype> (the default), the placeholder is simply removed.</para>
                    <para>On some desktop platforms (including Windows and Unix), the application name (from <link raw="QGuiApplication::applicationDisplayName" href="qguiapplication.html#applicationDisplayName-prop" type="property" getter="QGuiApplication::applicationDisplayName()">QGuiApplication::applicationDisplayName</link>) is added at the end of the window title, if set. This is done by the QPA plugin, so it is shown to the user, but isn't part of the  string.</para>
                    <see-also>
                        <link raw="windowIcon" href="qwidget.html#windowIcon-prop" type="property" getter="QWidget::windowIcon()">windowIcon</link>
                        <link raw="windowModified" href="qwidget.html#windowModified-prop" type="property" getter="QWidget::isWindowModified()">windowModified</link>
                        <link raw="windowFilePath" href="qwidget.html#windowFilePath-prop" type="property" getter="QWidget::windowFilePath()">windowFilePath</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="windowIcon" fullname="QWidget::windowIcon" href="qwidget.html#windowIcon-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="178" type="QIcon" brief="The widget's icon">
                <getter name="windowIcon"/>
                <setter name="setWindowIcon"/>
                <notifier name="windowIconChanged"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6167" column="4">
                    <brief>This property holds the widget's icon.</brief>
                    <para>This property only makes sense for windows. If no icon has been set,  returns the application icon (<link raw="QApplication::windowIcon()" href="qapplication.html#windowIcon-prop" type="function">QApplication::windowIcon()</link>).</para>
                    <see-also>
                        <link raw="windowTitle" href="qwidget.html#windowTitle-prop" type="property" getter="QWidget::windowTitle()">windowTitle</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="windowIconText" fullname="QWidget::windowIconText" href="qwidget-obsolete.html#windowIconText-prop" status="obsolete" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="179" type="QString" brief="The text to be displayed on the icon of a minimized window">
                <getter name="windowIconText"/>
                <setter name="setWindowIconText"/>
                <notifier name="windowIconTextChanged"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6240" column="4">
                    <brief>This property holds the text to be displayed on the icon of a minimized window.</brief>
                    <para>This property only makes sense for windows. If no icon text has been set, this accessor returns an empty string. It is only implemented on the X11 platform, and only certain window managers use this window property.</para>
                    <para>This property is deprecated.</para>
                    <see-also>
                        <link raw="windowIcon" href="qwidget.html#windowIcon-prop" type="property" getter="QWidget::windowIcon()">windowIcon</link>
                        <link raw="windowTitle" href="qwidget.html#windowTitle-prop" type="property" getter="QWidget::windowTitle()">windowTitle</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="windowOpacity" fullname="QWidget::windowOpacity" href="qwidget.html#windowOpacity-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="180" type="double" brief="Level of opacity for the window">
                <getter name="windowOpacity"/>
                <setter name="setWindowOpacity"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11442" column="4">
                    <brief>This property holds The level of opacity for the window..</brief>
                    <para>The valid range of opacity is from 1.0 (completely opaque) to 0.0 (completely transparent).</para>
                    <para>By default the value of this property is 1.0.</para>
                    <para>This feature is available on Embedded Linux, , Windows, and X11 platforms that support the Composite extension.</para>
                    <para>
                        <bold>Note:</bold> On X11 you need to have a composite manager running, and the X11 specific _NET_WM_WINDOW_OPACITY atom needs to be supported by the window manager you are using.</para>
                    <para>
                        <bold>Warning:</bold> Changing this property from opaque to transparent might issue a paint event that needs to be processed before the window is displayed correctly. This affects mainly the use of <link raw="QPixmap::grabWindow()" href="qpixmap.html#grabWindow" type="function">QPixmap::grabWindow()</link>. Also note that semi-transparent windows update and resize significantly slower than opaque windows.</para>
                    <see-also>
                        <link raw="setMask()" href="qwidget.html#setMask" type="function">setMask()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="windowModified" fullname="QWidget::windowModified" href="qwidget.html#windowModified-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="181" type="bool" brief="Whether the document shown in the window has unsaved changes">
                <getter name="isWindowModified"/>
                <setter name="setWindowModified"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11507" column="4">
                    <brief>This property holds whether the document shown in the window has unsaved changes.</brief>
                    <para>A modified window is a window whose content has changed but has not been saved to disk. This flag will have different effects varied by the platform. On  the close button will have a modified look; on other platforms, the window title will have an '*' (asterisk).</para>
                    <para>The window title must contain a &quot;[*]&quot; placeholder, which indicates where the '*' should appear. Normally, it should appear right after the file name (e.g., &quot;document1.txt[*] - Text Editor&quot;). If the window isn't modified, the placeholder is simply removed.</para>
                    <para>Note that if a widget is set as modified, all its ancestors will also be set as modified. However, if you call <teletype type="highlighted">setWindowModified(false)</teletype> on a widget, this will not propagate to its parent because other children of the parent might have been modified.</para>
                    <see-also>
                        <link raw="windowTitle" href="qwidget.html#windowTitle-prop" type="property" getter="QWidget::windowTitle()">windowTitle</link>
                        <link raw="Application Example" href="qtwidgets-mainwindows-application-example.html" type="page" page="Application Example">Application Example</link>
                        <link raw="SDI Example" href="qtwidgets-mainwindows-sdi-example.html" type="page" page="SDI Example">SDI Example</link>
                        <link raw="MDI Example" href="qtwidgets-mainwindows-mdi-example.html" type="page" page="MDI Example">MDI Example</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="toolTip" fullname="QWidget::toolTip" href="qwidget.html#toolTip-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="183" type="QString" brief="The widget's tooltip">
                <getter name="toolTip"/>
                <setter name="setToolTip"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11566" column="4">
                    <brief>This property holds the widget's tooltip.</brief>
                    <para>Note that by default tooltips are only shown for widgets that are children of the active window. You can change this behavior by setting the attribute <link raw="Qt::WA_AlwaysShowToolTips" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_AlwaysShowToolTips</link> on the <italic>window</italic>, not on the widget with the tooltip.</para>
                    <para>If you want to control a tooltip's behavior, you can intercept the <link raw="event()" href="qwidget.html#event" type="function">event()</link> function and catch the <link raw="QEvent::ToolTip" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::ToolTip</link> event (e.g., if you want to customize the area for which the tooltip should be shown).</para>
                    <para>By default, this property contains an empty string.</para>
                    <see-also>
                        <link raw="QToolTip" href="qtooltip.html" type="class">QToolTip</link>
                        <link raw="statusTip" href="qwidget.html#statusTip-prop" type="property" getter="QWidget::statusTip()">statusTip</link>
                        <link raw="whatsThis" href="qwidget.html#whatsThis-prop" type="property" getter="QWidget::whatsThis()">whatsThis</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="toolTipDuration" fullname="QWidget::toolTipDuration" href="qwidget.html#toolTipDuration-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="184" since="5.2" type="int" brief="The widget's tooltip duration">
                <getter name="toolTipDuration"/>
                <setter name="setToolTipDuration"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11599" column="4">
                    <brief>This property holds the widget's tooltip duration.</brief>
                    <para>Specifies how long time the tooltip will be displayed, in milliseconds. If the value is -1 (default) the duration is calculated depending on the length of the tooltip.</para>
                    <see-also>
                        <link raw="toolTip" href="qwidget.html#toolTip-prop" type="property" getter="QWidget::toolTip()">toolTip</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="statusTip" fullname="QWidget::statusTip" href="qwidget.html#statusTip-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="187" type="QString" brief="The widget's status tip">
                <getter name="statusTip"/>
                <setter name="setStatusTip"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11626" column="4">
                    <brief>This property holds the widget's status tip.</brief>
                    <para>By default, this property contains an empty string.</para>
                    <see-also>
                        <link raw="toolTip" href="qwidget.html#toolTip-prop" type="property" getter="QWidget::toolTip()">toolTip</link>
                        <link raw="whatsThis" href="qwidget.html#whatsThis-prop" type="property" getter="QWidget::whatsThis()">whatsThis</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="whatsThis" fullname="QWidget::whatsThis" href="qwidget.html#whatsThis-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="190" type="QString" brief="The widget's What's This help text">
                <getter name="whatsThis"/>
                <setter name="setWhatsThis"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11648" column="4">
                    <brief>This property holds the widget's What's This help text..</brief>
                    <para>By default, this property contains an empty string.</para>
                    <see-also>
                        <link raw="QWhatsThis" href="qwhatsthis.html" type="class">QWhatsThis</link>
                        <link raw="QWidget::toolTip" href="qwidget.html#toolTip-prop" type="property" getter="QWidget::toolTip()">QWidget::toolTip</link>
                        <link raw="QWidget::statusTip" href="qwidget.html#statusTip-prop" type="property" getter="QWidget::statusTip()">QWidget::statusTip</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="accessibleName" fullname="QWidget::accessibleName" href="qwidget.html#accessibleName-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="193" type="QString" brief="The widget's name as seen by assistive technologies">
                <getter name="accessibleName"/>
                <setter name="setAccessibleName"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11671" column="4">
                    <brief>This property holds the widget's name as seen by assistive technologies.</brief>
                    <para>This is the primary name by which assistive technology such as screen readers announce this widget. For most widgets setting this property is not required. For example for <link raw="QPushButton" href="qpushbutton.html" type="class">QPushButton</link> the button's text will be used.</para>
                    <para>It is important to set this property when the widget does not provide any text. For example a button that only contains an icon needs to set this property to work with screen readers. The name should be short and equivalent to the visual information conveyed by the widget.</para>
                    <para>This property has to be <link raw="Internationalization with Qt" href="internationalization.html" type="">localized</link>.</para>
                    <para>By default, this property contains an empty string.</para>
                    <see-also>
                        <link raw="QWidget::accessibleDescription" href="qwidget.html#accessibleDescription-prop" type="property" getter="QWidget::accessibleDescription()">QWidget::accessibleDescription</link>
                        <link raw="QAccessibleInterface::text()" href="qaccessibleinterface.html#text" type="function">QAccessibleInterface::text()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="accessibleDescription" fullname="QWidget::accessibleDescription" href="qwidget.html#accessibleDescription-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="194" type="QString" brief="The widget's description as seen by assistive technologies">
                <getter name="accessibleDescription"/>
                <setter name="setAccessibleDescription"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11706" column="4">
                    <brief>This property holds the widget's description as seen by assistive technologies.</brief>
                    <para>The accessible description of a widget should convey what a widget does. While the <link raw="accessibleName" href="qwidget.html#accessibleName-prop" type="property" getter="QWidget::accessibleName()">accessibleName</link> should be a short and consise string (e.g. <bold>Save</bold>), the description should give more context, such as <bold>Saves the current document</bold>.</para>
                    <para>This property has to be <link raw="Internationalization with Qt" href="internationalization.html" type="">localized</link>.</para>
                    <para>By default, this property contains an empty string and Qt falls back to using the tool tip to provide this information.</para>
                    <see-also>
                        <link raw="QWidget::accessibleName" href="qwidget.html#accessibleName-prop" type="property" getter="QWidget::accessibleName()">QWidget::accessibleName</link>
                        <link raw="QAccessibleInterface::text()" href="qaccessibleinterface.html#text" type="function">QAccessibleInterface::text()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="layoutDirection" fullname="QWidget::layoutDirection" href="qwidget.html#layoutDirection-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="196" type="Qt::LayoutDirection" brief="The layout direction for this widget">
                <getter name="layoutDirection"/>
                <setter name="setLayoutDirection"/>
                <resetter name="unsetLayoutDirection"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4867" column="4">
                    <brief>This property holds the layout direction for this widget.</brief>
                    <para>By default, this property is set to <link raw="Qt::LeftToRight" href="qt.html#LayoutDirection-enum" type="enum" enum="Qt::LayoutDirection">Qt::LeftToRight</link>.</para>
                    <para>When the layout direction is set on a widget, it will propagate to the widget's children, but not to a child that is a window and not to a child for which  has been explicitly called. Also, child widgets added <italic>after</italic>  has been called for the parent do not inherit the parent's layout direction.</para>
                    <para>This method no longer affects text layout direction since Qt 4.7.</para>
                    <see-also>
                        <link raw="QApplication::layoutDirection" href="qguiapplication.html#layoutDirection-prop" type="property" getter="QGuiApplication::layoutDirection()">QApplication::layoutDirection</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="windowFlags" fullname="QWidget::windowFlags" href="qwidget.html#windowFlags-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="197" type="Qt::WindowFlags">
                <getter name="windowFlags"/>
                <setter name="setWindowFlags"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10478" column="4">
                    <para>Window flags are a combination of a type (e.g. <link raw="Qt::Dialog" href="qt.html#WindowType-enum" type="enum" enum="Qt::WindowType">Qt::Dialog</link>) and zero or more hints to the window system (e.g. <link raw="Qt::FramelessWindowHint" href="qt.html#WindowType-enum" type="enum" enum="Qt::WindowType">Qt::FramelessWindowHint</link>).</para>
                    <para>If the widget had type <link raw="Qt::Widget" href="qt.html#WindowType-enum" type="enum" enum="Qt::WindowType">Qt::Widget</link> or <link raw="Qt::SubWindow" href="qt.html#WindowType-enum" type="enum" enum="Qt::WindowType">Qt::SubWindow</link> and becomes a window (<link raw="Qt::Window" href="qt.html#WindowType-enum" type="enum" enum="Qt::WindowType">Qt::Window</link>, <link raw="Qt::Dialog" href="qt.html#WindowType-enum" type="enum" enum="Qt::WindowType">Qt::Dialog</link>, etc.), it is put at position (0, 0) on the desktop. If the widget is a window and becomes a <link raw="Qt::Widget" href="qt.html#WindowType-enum" type="enum" enum="Qt::WindowType">Qt::Widget</link> or <link raw="Qt::SubWindow" href="qt.html#WindowType-enum" type="enum" enum="Qt::WindowType">Qt::SubWindow</link>, it is put at position (0, 0) relative to its parent widget.</para>
                    <para>
                        <bold>Note:</bold> This function calls <link raw="setParent()" href="qwidget.html#setParent" type="function">setParent()</link> when changing the flags for a window, causing the widget to be hidden. You must call <link raw="show()" href="qwidget.html#show" type="function">show()</link> to make the widget visible again..</para>
                    <see-also>
                        <link raw="windowType()" href="qwidget.html#windowType" type="function">windowType()</link>
                        <link raw="setWindowFlag()" href="qwidget.html#setWindowFlag" type="function">setWindowFlag()</link>
                        <link raw="Window Flags Example" href="qtwidgets-widgets-windowflags-example.html" type="page" page="Window Flags Example">Window Flags Example</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="autoFillBackground" fullname="QWidget::autoFillBackground" href="qwidget.html#autoFillBackground-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="198" since="4.1" type="bool" brief="Whether the widget background is filled automatically">
                <getter name="autoFillBackground"/>
                <setter name="setAutoFillBackground"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="447" column="4">
                    <brief>This property holds whether the widget background is filled automatically.</brief>
                    <para>If enabled, this property will cause Qt to fill the background of the widget before invoking the paint event. The color used is defined by the <link raw="QPalette::Window" href="qpalette.html#ColorRole-enum" type="enum" enum="QPalette::ColorRole">QPalette::Window</link> color role from the widget's <link raw="QPalette" href="qpalette.html" type="class">palette</link>.</para>
                    <para>In addition, Windows are always filled with <link raw="QPalette::Window" href="qpalette.html#ColorRole-enum" type="enum" enum="QPalette::ColorRole">QPalette::Window</link>, unless the WA_OpaquePaintEvent or WA_NoSystemBackground attributes are set.</para>
                    <para>This property cannot be turned off (i.e., set to false) if a widget's parent has a static gradient for its background.</para>
                    <para>
                        <bold>Warning:</bold> Use this property with caution in conjunction with <link raw="Qt Style Sheets" href="stylesheet.html" type="page" page="Qt Style Sheets">Qt Style Sheets</link>. When a widget has a style sheet with a valid background or a border-image, this property is automatically disabled.</para>
                    <para>By default, this property is <teletype type="highlighted">false</teletype>.</para>
                    <see-also>
                        <link raw="Qt::WA_OpaquePaintEvent" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_OpaquePaintEvent</link>
                        <link raw="Qt::WA_NoSystemBackground" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_NoSystemBackground</link>
                        <link raw="QWidget#Transparency and Double Buffering" href="qwidget.html#transparency-and-double-buffering" type="class">Transparency and Double Buffering</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="styleSheet" fullname="QWidget::styleSheet" href="qwidget.html#styleSheet-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="200" since="4.2" type="QString" brief="The widget's style sheet">
                <getter name="styleSheet"/>
                <setter name="setStyleSheet"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="2632" column="4">
                    <brief>This property holds the widget's style sheet.</brief>
                    <para>The style sheet contains a textual description of customizations to the widget's style, as described in the <link raw="Qt Style Sheets" href="stylesheet.html" type="page" page="Qt Style Sheets">Qt Style Sheets</link> document.</para>
                    <para>Since Qt 4.5, Qt style sheets fully supports .</para>
                    <para>
                        <bold>Warning:</bold> Qt style sheets are currently not supported for custom <link raw="QStyle" href="qstyle.html" type="class">QStyle</link> subclasses. We plan to address this in some future release.</para>
                    <see-also>
                        <link raw="setStyle()" href="qwidget.html#setStyle" type="function">setStyle()</link>
                        <link raw="QApplication::styleSheet" href="qapplication.html#styleSheet-prop" type="property" getter="QApplication::styleSheet()">QApplication::styleSheet</link>
                        <link raw="Qt Style Sheets" href="stylesheet.html" type="page" page="Qt Style Sheets">Qt Style Sheets</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="locale" fullname="QWidget::locale" href="qwidget.html#locale-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="202" since="4.3" type="QLocale" brief="The widget's locale">
                <getter name="locale"/>
                <setter name="setLocale"/>
                <resetter name="unsetLocale"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="5920" column="4">
                    <brief>This property holds the widget's locale.</brief>
                    <para>As long as no special locale has been set, this is either the parent's locale or (if this widget is a top level widget), the default locale.</para>
                    <para>If the widget displays dates or numbers, these should be formatted using the widget's locale.</para>
                    <see-also>
                        <link raw="QLocale" href="qlocale.html" type="class">QLocale</link>
                        <link raw="QLocale::setDefault()" href="qlocale.html#setDefault" type="function">QLocale::setDefault()</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="windowFilePath" fullname="QWidget::windowFilePath" href="qwidget.html#windowFilePath-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="203" since="4.4" type="QString" brief="The file path associated with a widget">
                <getter name="windowFilePath"/>
                <setter name="setWindowFilePath"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6261" column="4">
                    <brief>This property holds the file path associated with a widget.</brief>
                    <para>This property only makes sense for windows. It associates a file path with a window. If you set the file path, but have not set the window title, Qt sets the window title to the file name of the specified path, obtained using <link raw="QFileInfo::fileName()" href="qfileinfo.html#fileName" type="function">QFileInfo::fileName()</link>.</para>
                    <para>If the window title is set at any point, then the window title takes precedence and will be shown instead of the file path string.</para>
                    <para>Additionally, on , this has an added benefit that it sets the proxy icon for the window, assuming that the file path exists.</para>
                    <para>If no file path is set, this property contains an empty string.</para>
                    <para>By default, this property contains an empty string.</para>
                    <see-also>
                        <link raw="windowTitle" href="qwidget.html#windowTitle-prop" type="property" getter="QWidget::windowTitle()">windowTitle</link>
                        <link raw="windowIcon" href="qwidget.html#windowIcon-prop" type="property" getter="QWidget::windowIcon()">windowIcon</link>
                    </see-also>
                </description>
            </property>
            <property threadsafety="unspecified" name="inputMethodHints" fullname="QWidget::inputMethodHints" href="qwidget.html#inputMethodHints-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="204" since="4.6" type="Qt::InputMethodHints" brief="What input method specific hints the widget has">
                <getter name="inputMethodHints"/>
                <setter name="setInputMethodHints"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="9928" column="4">
                    <brief>This property holds What input method specific hints the widget has..</brief>
                    <para>This is only relevant for input widgets. It is used by the input method to retrieve hints as to how the input method should operate. For example, if the <link raw="Qt::ImhFormattedNumbersOnly" href="qt.html#InputMethodHint-enum" type="enum" enum="Qt::InputMethodHint">Qt::ImhFormattedNumbersOnly</link> flag is set, the input method may change its visual components to reflect that only numbers can be entered.</para>
                    <para>
                        <bold>Warning:</bold> Some widgets require certain flags in order to work as intended. To set a flag, do <teletype type="highlighted">w-&gt;setInputMethodHints(w-&gt;inputMethodHints()|f)</teletype> instead of <teletype type="highlighted">w-&gt;setInputMethodHints(f)</teletype>.</para>
                    <para>
                        <bold>Note:</bold> The flags are only hints, so the particular input method implementation is free to ignore them. If you want to be sure that a certain type of characters are entered, you should also set a <link raw="QValidator" href="qvalidator.html" type="class">QValidator</link> on the widget.</para>
                    <para>The default value is <link raw="Qt::ImhNone" href="qt.html#InputMethodHint-enum" type="enum" enum="Qt::InputMethodHint">Qt::ImhNone</link>.</para>
                    <see-also>
                        <link raw="inputMethodQuery()" href="qwidget.html#inputMethodQuery" type="function">inputMethodQuery()</link>
                    </see-also>
                </description>
            </property>
            <enum threadsafety="unspecified" name="RenderFlag" fullname="QWidget::RenderFlag" href="qwidget.html#RenderFlag-enum" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="207" since="4.3" typedef="QWidget::RenderFlags">
                <value name="DrawWindowBackground" value="0x1"/>
                <value name="DrawChildren" value="0x2"/>
                <value name="IgnoreMask" value="0x4"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="5067" column="4">
                    <para>This enum describes how to render the widget when calling <link raw="QWidget::render()" href="qwidget.html#render" type="function">QWidget::render()</link>.</para>
                    <list type="enum">
                        <definition>
                            <term>QWidget::DrawWindowBackground</term>DrawWindowBackground</definition>
                        <item>
                            <para>If you enable this option, the widget's background is rendered into the target even if <link raw="autoFillBackground" href="qwidget.html#autoFillBackground-prop" type="property" getter="QWidget::autoFillBackground()">autoFillBackground</link> is not set. By default, this option is enabled.</para>
                        </item>
                        <definition>
                            <term>QWidget::DrawChildren</term>DrawChildren</definition>
                        <item>
                            <para>If you enable this option, the widget's children are rendered recursively into the target. By default, this option is enabled.</para>
                        </item>
                        <definition>
                            <term>QWidget::IgnoreMask</term>IgnoreMask</definition>
                        <item>
                            <para>If you enable this option, the widget's <link raw="QWidget::mask()" href="qwidget.html#mask" type="function">QWidget::mask()</link> is ignored when rendering into the target. By default, this option is disabled.</para>
                        </item>
                    </list>
                </description>
            </enum>
            <typedef threadsafety="unspecified" name="RenderFlags" fullname="QWidget::RenderFlags" href="qwidget.html#RenderFlag-enum" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="212" enum="QWidget::RenderFlag">
                <description path="" line="0" column="0"/>
            </typedef>
            <function threadsafety="unspecified" name="QWidget" fullname="QWidget::QWidget" href="qwidget.html#QWidget" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="214" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="QWidget(QWidget *parent, Qt::WindowFlags f)">
                <parameter type="QWidget *" name="parent" default="nullptr"/>
                <parameter type="Qt::WindowFlags" name="f" default="..."/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="1001" column="4">
                    <para>Constructs a widget which is a child of <argument>parent</argument>, with widget flags set to <argument>f</argument>.</para>
                    <para>If <argument>parent</argument> is 0, the new widget becomes a window. If <argument>parent</argument> is another widget, this widget becomes a child window inside <argument>parent</argument>. The new widget is deleted when its <argument>parent</argument> is deleted.</para>
                    <para>The widget flags argument, <argument>f</argument>, is normally 0, but it can be set to customize the frame of a window (i.e. <argument>parent</argument> must be 0). To customize the frame, use a value composed from the bitwise OR of any of the <link raw="Qt::WindowFlags" href="qt.html#WindowType-enum" type="typedef">window flags</link>.</para>
                    <para>If you add a child widget to an already visible widget you must explicitly show the child to make it visible.</para>
                    <para>Note that the X11 version of Qt may not be able to deliver all combinations of style flags on all systems. This is because on X11, Qt can only ask the window manager, and the window manager can override the application's settings. On Windows, Qt can set whatever flags you want.</para>
                    <see-also>
                        <link raw="windowFlags" href="qwidget.html#windowFlags-prop" type="property" getter="QWidget::windowFlags()">windowFlags</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="~QWidget" fullname="QWidget::~QWidget" href="qwidget.html#dtor.QWidget" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="215" virtual="virtual" meta="destructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="~QWidget()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="1557" column="4">
                    <para>Destroys the widget.</para>
                    <para>All this widget's children are deleted first. The application exits if this widget is the main widget.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="devType" fullname="QWidget::devType" href="qwidget.html#devType" status="internal" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="217" virtual="virtual" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="true" type="int" signature="int devType() const override">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="1052" column="4"/>
            </function>
            <function threadsafety="unspecified" name="winId" fullname="QWidget::winId" href="qwidget.html#winId" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="219" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="WId" signature="WId winId() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="createWinId" fullname="QWidget::createWinId" href="qwidget.html#createWinId" status="internal" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="220" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void createWinId()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="2572" column="4">
                    <para>Ensures that the widget has a window system identifier, i.e. that it is known to the windowing system.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="internalWinId" fullname="QWidget::internalWinId" href="qwidget.html#internalWinId" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="221" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="WId" signature="WId internalWinId() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="effectiveWinId" fullname="QWidget::effectiveWinId" href="qwidget.html#effectiveWinId" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="222" since="4.4" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="WId" signature="WId effectiveWinId() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="2588" column="4">
                    <para>Returns the effective window system identifier of the widget, i.e. the native parent's window system identifier.</para>
                    <para>If the widget is native, this function returns the native widget ID. Otherwise, the window ID of the first native parent widget, i.e., the top-level widget that contains this widget, is returned.</para>
                    <para>
                        <bold>Note:</bold> We recommend that you do not store this value as it is likely to change at run-time.</para>
                    <see-also>
                        <link raw="nativeParentWidget()" href="qwidget.html#nativeParentWidget" type="function">nativeParentWidget()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="style" fullname="QWidget::style" href="qwidget.html#style" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="225" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QStyle *" signature="QStyle * style() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="2687" column="4">
                    <see-also>
                        <link raw="QWidget::setStyle()" href="qwidget.html#setStyle" type="function">QWidget::setStyle()</link>
                        <link raw="QApplication::setStyle()" href="qapplication.html#setStyle" type="function">QApplication::setStyle()</link>
                        <link raw="QApplication::style()" href="qapplication.html#style" type="function">QApplication::style()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setStyle" fullname="QWidget::setStyle" href="qwidget.html#setStyle" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="226" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setStyle(QStyle *style)">
                <parameter type="QStyle *" name="style" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="2700" column="4">
                    <para>Sets the widget's GUI style to <argument>style</argument>. The ownership of the style object is not transferred.</para>
                    <para>If no style is set, the widget uses the application's style, <link raw="QApplication::style()" href="qapplication.html#style" type="function">QApplication::style()</link> instead.</para>
                    <para>Setting a widget's style has no effect on existing or future child widgets.</para>
                    <para>
                        <bold>Warning:</bold> This function is particularly useful for demonstration purposes, where you want to show Qt's styling capabilities. Real applications should avoid it and use one consistent GUI style instead.</para>
                    <para>
                        <bold>Warning:</bold> Qt style sheets are currently not supported for custom <link raw="QStyle" href="qstyle.html" type="class">QStyle</link> subclasses. We plan to address this in some future release.</para>
                    <see-also>
                        <link raw="style()" href="qwidget.html#style" type="function">style()</link>
                        <link raw="QStyle" href="qstyle.html" type="class">QStyle</link>
                        <link raw="QApplication::style()" href="qapplication.html#style" type="function">QApplication::style()</link>
                        <link raw="QApplication::setStyle()" href="qapplication.html#setStyle" type="function">QApplication::setStyle()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isTopLevel" fullname="QWidget::isTopLevel" href="qwidget.html#isTopLevel" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="229" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isTopLevel() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="isWindow" fullname="QWidget::isWindow" href="qwidget.html#isWindow" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="230" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isWindow() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="isModal" fullname="QWidget::isModal" href="qwidget.html#modal-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="232" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="modal" type="bool" signature="bool isModal() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="windowModality" fullname="QWidget::windowModality" href="qwidget.html#windowModality-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="233" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowModality" type="Qt::WindowModality" signature="Qt::WindowModality windowModality() const">
                <description path="" line="0" column="0">
                    <see-also>setWindowModality()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setWindowModality" fullname="QWidget::setWindowModality" href="qwidget.html#windowModality-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="234" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowModality" type="void" signature="void setWindowModality(Qt::WindowModality windowModality)">
                <parameter type="Qt::WindowModality" name="windowModality" default=""/>
                <description path="" line="0" column="0">
                    <see-also>windowModality()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isEnabled" fullname="QWidget::isEnabled" href="qwidget.html#enabled-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="236" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="enabled" type="bool" signature="bool isEnabled() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="isEnabledTo" fullname="QWidget::isEnabledTo" href="qwidget.html#isEnabledTo" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="237" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isEnabledTo(const QWidget *ancestor) const">
                <parameter type="const QWidget *" name="ancestor" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3209" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this widget would become enabled if <argument>ancestor</argument> is enabled; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>This is the case if neither the widget itself nor every parent up to but excluding <argument>ancestor</argument> has been explicitly disabled.</para>
                    <para>(0) returns false if this widget or any if its ancestors was explicitly disabled.</para>
                    <para>The word ancestor here means a parent widget within the same window.</para>
                    <para>Therefore (0) stops at this widget's window, unlike <link raw="isEnabled()" href="qwidget.html#enabled-prop" type="function">isEnabled()</link> which also takes parent windows into considerations.</para>
                    <see-also>
                        <link raw="setEnabled()" href="qwidget.html#enabled-prop" type="function">setEnabled()</link>
                        <link raw="enabled" href="qwidget.html#enabled-prop" type="property" getter="QWidget::isEnabled()">enabled</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isEnabledToTLW" fullname="QWidget::isEnabledToTLW" href="qwidget.html#isEnabledToTLW" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="238" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isEnabledToTLW() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="setEnabled" fullname="QWidget::setEnabled" href="qwidget.html#enabled-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="241" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="enabled" type="void" signature="void setEnabled(bool )">
                <parameter type="bool" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>isEnabled()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setDisabled" fullname="QWidget::setDisabled" href="qwidget.html#setDisabled" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="242" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setDisabled(bool disable)">
                <parameter type="bool" name="disable" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3488" column="4">
                    <para>Disables widget input events if <argument>disable</argument> is true; otherwise enables input events.</para>
                    <para>See the <link raw="enabled" href="qwidget.html#enabled-prop" type="property" getter="QWidget::isEnabled()">enabled</link> documentation for more information.</para>
                    <see-also>
                        <link raw="isEnabledTo()" href="qwidget.html#isEnabledTo" type="function">isEnabledTo()</link>
                        <link raw="QKeyEvent" href="qkeyevent.html" type="class">QKeyEvent</link>
                        <link raw="QMouseEvent" href="qmouseevent.html" type="class">QMouseEvent</link>
                        <link raw="changeEvent()" href="qwidget.html#changeEvent" type="function">changeEvent()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setWindowModified" fullname="QWidget::setWindowModified" href="qwidget.html#windowModified-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="243" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowModified" type="void" signature="void setWindowModified(bool )">
                <parameter type="bool" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>isWindowModified()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="frameGeometry" fullname="QWidget::frameGeometry" href="qwidget.html#frameGeometry-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="248" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="frameGeometry" type="QRect" signature="QRect frameGeometry() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="geometry" fullname="QWidget::geometry" href="qwidget.html#geometry-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="249" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="geometry" type="const QRect &amp;" signature="const QRect &amp; geometry() const">
                <description path="" line="0" column="0">
                    <see-also>setGeometry()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="normalGeometry" fullname="QWidget::normalGeometry" href="qwidget.html#normalGeometry-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="250" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="normalGeometry" type="QRect" signature="QRect normalGeometry() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="x" fullname="QWidget::x" href="qwidget.html#x-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="252" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="x" type="int" signature="int x() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="y" fullname="QWidget::y" href="qwidget.html#y-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="253" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="y" type="int" signature="int y() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="pos" fullname="QWidget::pos" href="qwidget.html#pos-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="254" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="pos" type="QPoint" signature="QPoint pos() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="frameSize" fullname="QWidget::frameSize" href="qwidget.html#frameSize-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="255" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="frameSize" type="QSize" signature="QSize frameSize() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="size" fullname="QWidget::size" href="qwidget.html#size-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="256" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="size" type="QSize" signature="QSize size() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="width" fullname="QWidget::width" href="qwidget.html#width-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="257" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="width" type="int" signature="int width() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="height" fullname="QWidget::height" href="qwidget.html#height-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="258" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="height" type="int" signature="int height() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="rect" fullname="QWidget::rect" href="qwidget.html#rect-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="259" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="rect" type="QRect" signature="QRect rect() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="childrenRect" fullname="QWidget::childrenRect" href="qwidget.html#childrenRect-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="260" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="childrenRect" type="QRect" signature="QRect childrenRect() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="childrenRegion" fullname="QWidget::childrenRegion" href="qwidget.html#childrenRegion-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="261" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="childrenRegion" type="QRegion" signature="QRegion childrenRegion() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="minimumSize" fullname="QWidget::minimumSize" href="qwidget.html#minimumSize-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="263" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="minimumSize" type="QSize" signature="QSize minimumSize() const">
                <description path="" line="0" column="0">
                    <see-also>setMinimumSize()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="maximumSize" fullname="QWidget::maximumSize" href="qwidget.html#maximumSize-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="264" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="maximumSize" type="QSize" signature="QSize maximumSize() const">
                <description path="" line="0" column="0">
                    <see-also>setMaximumSize()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="minimumWidth" fullname="QWidget::minimumWidth" href="qwidget.html#minimumWidth-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="265" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="minimumWidth" type="int" signature="int minimumWidth() const">
                <description path="" line="0" column="0">
                    <see-also>setMinimumWidth()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="minimumHeight" fullname="QWidget::minimumHeight" href="qwidget.html#minimumHeight-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="266" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="minimumHeight" type="int" signature="int minimumHeight() const">
                <description path="" line="0" column="0">
                    <see-also>setMinimumHeight()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="maximumWidth" fullname="QWidget::maximumWidth" href="qwidget.html#maximumWidth-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="267" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="maximumWidth" type="int" signature="int maximumWidth() const">
                <description path="" line="0" column="0">
                    <see-also>setMaximumWidth()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="maximumHeight" fullname="QWidget::maximumHeight" href="qwidget.html#maximumHeight-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="268" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="maximumHeight" type="int" signature="int maximumHeight() const">
                <description path="" line="0" column="0">
                    <see-also>setMaximumHeight()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMinimumSize" fullname="QWidget::setMinimumSize" href="qwidget.html#minimumSize-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="269" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="minimumSize" type="void" signature="void setMinimumSize(const QSize &amp;)">
                <parameter type="const QSize &amp;" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>minimumSize()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMinimumSize" fullname="QWidget::setMinimumSize" href="qwidget.html#setMinimumSize-1" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="270" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" associated-property="minimumSize" type="void" signature="void setMinimumSize(int minw, int minh)">
                <parameter type="int" name="minw" default=""/>
                <parameter type="int" name="minh" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3983" column="4">
                    <para>This is an overloaded function.</para>
                    <para>This function corresponds to <link raw="setMinimumSize" href="qwidget.html#minimumSize-prop" type="function">setMinimumSize</link>(<link raw="QSize" href="qsize.html" type="class">QSize</link>(minw, minh)). Sets the minimum width to <argument>minw</argument> and the minimum height to <argument>minh</argument>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMaximumSize" fullname="QWidget::setMaximumSize" href="qwidget.html#maximumSize-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="271" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="maximumSize" type="void" signature="void setMaximumSize(const QSize &amp;)">
                <parameter type="const QSize &amp;" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>maximumSize()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMaximumSize" fullname="QWidget::setMaximumSize" href="qwidget.html#setMaximumSize-1" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="272" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" associated-property="maximumSize" type="void" signature="void setMaximumSize(int maxw, int maxh)">
                <parameter type="int" name="maxw" default=""/>
                <parameter type="int" name="maxh" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4044" column="4">
                    <para>This is an overloaded function.</para>
                    <para>This function corresponds to <link raw="setMaximumSize" href="qwidget.html#maximumSize-prop" type="function">setMaximumSize</link>(<link raw="QSize" href="qsize.html" type="class">QSize</link>(<argument>maxw</argument>, <argument>maxh</argument>)). Sets the maximum width to <argument>maxw</argument> and the maximum height to <argument>maxh</argument>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMinimumWidth" fullname="QWidget::setMinimumWidth" href="qwidget.html#minimumWidth-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="273" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="minimumWidth" type="void" signature="void setMinimumWidth(int minw)">
                <parameter type="int" name="minw" default=""/>
                <description path="" line="0" column="0">
                    <see-also>minimumWidth()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMinimumHeight" fullname="QWidget::setMinimumHeight" href="qwidget.html#minimumHeight-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="274" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="minimumHeight" type="void" signature="void setMinimumHeight(int minh)">
                <parameter type="int" name="minh" default=""/>
                <description path="" line="0" column="0">
                    <see-also>minimumHeight()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMaximumWidth" fullname="QWidget::setMaximumWidth" href="qwidget.html#maximumWidth-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="275" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="maximumWidth" type="void" signature="void setMaximumWidth(int maxw)">
                <parameter type="int" name="maxw" default=""/>
                <description path="" line="0" column="0">
                    <see-also>maximumWidth()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMaximumHeight" fullname="QWidget::setMaximumHeight" href="qwidget.html#maximumHeight-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="276" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="maximumHeight" type="void" signature="void setMaximumHeight(int maxh)">
                <parameter type="int" name="maxh" default=""/>
                <description path="" line="0" column="0">
                    <see-also>maximumHeight()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setupUi" fullname="QWidget::setupUi" href="qwidget.html#setupUi" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="279" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setupUi(QWidget *widget)">
                <parameter type="QWidget *" name="widget" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="sizeIncrement" fullname="QWidget::sizeIncrement" href="qwidget.html#sizeIncrement-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="282" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="sizeIncrement" type="QSize" signature="QSize sizeIncrement() const">
                <description path="" line="0" column="0">
                    <see-also>setSizeIncrement()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setSizeIncrement" fullname="QWidget::setSizeIncrement" href="qwidget.html#sizeIncrement-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="283" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="sizeIncrement" type="void" signature="void setSizeIncrement(const QSize &amp;)">
                <parameter type="const QSize &amp;" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>sizeIncrement()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setSizeIncrement" fullname="QWidget::setSizeIncrement" href="qwidget.html#setSizeIncrement-1" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="284" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" associated-property="sizeIncrement" type="void" signature="void setSizeIncrement(int w, int h)">
                <parameter type="int" name="w" default=""/>
                <parameter type="int" name="h" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4075" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Sets the x (width) size increment to <argument>w</argument> and the y (height) size increment to <argument>h</argument>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="baseSize" fullname="QWidget::baseSize" href="qwidget.html#baseSize-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="285" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="baseSize" type="QSize" signature="QSize baseSize() const">
                <description path="" line="0" column="0">
                    <see-also>setBaseSize()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setBaseSize" fullname="QWidget::setBaseSize" href="qwidget.html#baseSize-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="286" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="baseSize" type="void" signature="void setBaseSize(const QSize &amp;)">
                <parameter type="const QSize &amp;" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>baseSize()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setBaseSize" fullname="QWidget::setBaseSize" href="qwidget.html#setBaseSize-1" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="287" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" associated-property="baseSize" type="void" signature="void setBaseSize(int basew, int baseh)">
                <parameter type="int" name="basew" default=""/>
                <parameter type="int" name="baseh" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4094" column="4">
                    <para>This is an overloaded function.</para>
                    <para>This corresponds to <link raw="setBaseSize" href="qwidget.html#baseSize-prop" type="function">setBaseSize</link>(<link raw="QSize" href="qsize.html" type="class">QSize</link>(<argument>basew</argument>, <argument>baseh</argument>)). Sets the widgets base size to width <argument>basew</argument> and height <argument>baseh</argument>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setFixedSize" fullname="QWidget::setFixedSize" href="qwidget.html#setFixedSize" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="289" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setFixedSize(const QSize &amp;s)">
                <parameter type="const QSize &amp;" name="s" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4113" column="4">
                    <para>Sets both the minimum and maximum sizes of the widget to <argument>s</argument>, thereby preventing it from ever growing or shrinking.</para>
                    <para>This will override the default size constraints set by <link raw="QLayout" href="qlayout.html" type="class">QLayout</link>.</para>
                    <para>To remove constraints, set the size to <link raw="QWIDGETSIZE_MAX" href="qwidget.html#QWIDGETSIZE_MAX" type="function">QWIDGETSIZE_MAX</link>.</para>
                    <para>Alternatively, if you want the widget to have a fixed size based on its contents, you can call <link raw="QLayout::setSizeConstraint" href="qlayout.html#sizeConstraint-prop" type="function">QLayout::setSizeConstraint</link>(<link raw="QLayout::SetFixedSize" href="qlayout.html#SizeConstraint-enum" type="enum" enum="QLayout::SizeConstraint">QLayout::SetFixedSize</link>);</para>
                    <see-also>
                        <link raw="maximumSize" href="qwidget.html#maximumSize-prop" type="property" getter="QWidget::maximumSize()">maximumSize</link>
                        <link raw="minimumSize" href="qwidget.html#minimumSize-prop" type="property" getter="QWidget::minimumSize()">minimumSize</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setFixedSize" fullname="QWidget::setFixedSize" href="qwidget.html#setFixedSize-1" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="290" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setFixedSize(int w, int h)">
                <parameter type="int" name="w" default=""/>
                <parameter type="int" name="h" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="setFixedWidth" fullname="QWidget::setFixedWidth" href="qwidget.html#setFixedWidth" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="291" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setFixedWidth(int w)">
                <parameter type="int" name="w" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4194" column="4">
                    <para>Sets both the minimum and maximum width of the widget to <argument>w</argument> without changing the heights. Provided for convenience.</para>
                    <see-also>
                        <link raw="sizeHint()" href="qwidget.html#sizeHint-prop" type="function">sizeHint()</link>
                        <link raw="minimumSize()" href="qwidget.html#minimumSize-prop" type="function">minimumSize()</link>
                        <link raw="maximumSize()" href="qwidget.html#maximumSize-prop" type="function">maximumSize()</link>
                        <link raw="setFixedSize()" href="qwidget.html#setFixedSize" type="function">setFixedSize()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setFixedHeight" fullname="QWidget::setFixedHeight" href="qwidget.html#setFixedHeight" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="292" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setFixedHeight(int h)">
                <parameter type="int" name="h" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4214" column="4">
                    <para>Sets both the minimum and maximum heights of the widget to <argument>h</argument> without changing the widths. Provided for convenience.</para>
                    <see-also>
                        <link raw="sizeHint()" href="qwidget.html#sizeHint-prop" type="function">sizeHint()</link>
                        <link raw="minimumSize()" href="qwidget.html#minimumSize-prop" type="function">minimumSize()</link>
                        <link raw="maximumSize()" href="qwidget.html#maximumSize-prop" type="function">maximumSize()</link>
                        <link raw="setFixedSize()" href="qwidget.html#setFixedSize" type="function">setFixedSize()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="mapToGlobal" fullname="QWidget::mapToGlobal" href="qwidget.html#mapToGlobal" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="296" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QPoint" signature="QPoint mapToGlobal(const QPoint &amp;) const">
                <parameter type="const QPoint &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="mapFromGlobal" fullname="QWidget::mapFromGlobal" href="qwidget.html#mapFromGlobal" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="297" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QPoint" signature="QPoint mapFromGlobal(const QPoint &amp;) const">
                <parameter type="const QPoint &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="mapToParent" fullname="QWidget::mapToParent" href="qwidget.html#mapToParent" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="298" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QPoint" signature="QPoint mapToParent(const QPoint &amp;pos) const">
                <parameter type="const QPoint &amp;" name="pos" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4283" column="4">
                    <para>Translates the widget coordinate <argument>pos</argument> to a coordinate in the parent widget.</para>
                    <para>Same as <link raw="mapToGlobal()" href="qwidget.html#mapToGlobal" type="function">mapToGlobal()</link> if the widget has no parent.</para>
                    <see-also>
                        <link raw="mapFromParent()" href="qwidget.html#mapFromParent" type="function">mapFromParent()</link>
                        <link raw="mapTo()" href="qwidget.html#mapTo" type="function">mapTo()</link>
                        <link raw="mapToGlobal()" href="qwidget.html#mapToGlobal" type="function">mapToGlobal()</link>
                        <link raw="underMouse()" href="qwidget.html#underMouse" type="function">underMouse()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="mapFromParent" fullname="QWidget::mapFromParent" href="qwidget.html#mapFromParent" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="299" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QPoint" signature="QPoint mapFromParent(const QPoint &amp;pos) const">
                <parameter type="const QPoint &amp;" name="pos" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4297" column="4">
                    <para>Translates the parent widget coordinate <argument>pos</argument> to widget coordinates.</para>
                    <para>Same as <link raw="mapFromGlobal()" href="qwidget.html#mapFromGlobal" type="function">mapFromGlobal()</link> if the widget has no parent.</para>
                    <see-also>
                        <link raw="mapToParent()" href="qwidget.html#mapToParent" type="function">mapToParent()</link>
                        <link raw="mapFrom()" href="qwidget.html#mapFrom" type="function">mapFrom()</link>
                        <link raw="mapFromGlobal()" href="qwidget.html#mapFromGlobal" type="function">mapFromGlobal()</link>
                        <link raw="underMouse()" href="qwidget.html#underMouse" type="function">underMouse()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="mapTo" fullname="QWidget::mapTo" href="qwidget.html#mapTo" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="300" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QPoint" signature="QPoint mapTo(const QWidget *parent, const QPoint &amp;pos) const">
                <parameter type="const QWidget *" name="parent" default=""/>
                <parameter type="const QPoint &amp;" name="pos" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4234" column="4">
                    <para>Translates the widget coordinate <argument>pos</argument> to the coordinate system of <argument>parent</argument>. The <argument>parent</argument> must not be 0 and must be a parent of the calling widget.</para>
                    <see-also>
                        <link raw="mapFrom()" href="qwidget.html#mapFrom" type="function">mapFrom()</link>
                        <link raw="mapToParent()" href="qwidget.html#mapToParent" type="function">mapToParent()</link>
                        <link raw="mapToGlobal()" href="qwidget.html#mapToGlobal" type="function">mapToGlobal()</link>
                        <link raw="underMouse()" href="qwidget.html#underMouse" type="function">underMouse()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="mapFrom" fullname="QWidget::mapFrom" href="qwidget.html#mapFrom" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="301" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QPoint" signature="QPoint mapFrom(const QWidget *parent, const QPoint &amp;pos) const">
                <parameter type="const QWidget *" name="parent" default=""/>
                <parameter type="const QPoint &amp;" name="pos" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4258" column="4">
                    <para>Translates the widget coordinate <argument>pos</argument> from the coordinate system of <argument>parent</argument> to this widget's coordinate system. The <argument>parent</argument> must not be 0 and must be a parent of the calling widget.</para>
                    <see-also>
                        <link raw="mapTo()" href="qwidget.html#mapTo" type="function">mapTo()</link>
                        <link raw="mapFromParent()" href="qwidget.html#mapFromParent" type="function">mapFromParent()</link>
                        <link raw="mapFromGlobal()" href="qwidget.html#mapFromGlobal" type="function">mapFromGlobal()</link>
                        <link raw="underMouse()" href="qwidget.html#underMouse" type="function">underMouse()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="window" fullname="QWidget::window" href="qwidget.html#window" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="303" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QWidget *" signature="QWidget * window() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4312" column="4">
                    <para>Returns the window for this widget, i.e. the next ancestor widget that has (or could have) a window-system frame.</para>
                    <para>If the widget is a window, the widget itself is returned.</para>
                    <para>Typical usage is changing the window title:</para>
                    <snippet location="code/src_gui_kernel_qwidget.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/widgets/doc/snippets/code/src_gui_kernel_qwidget.cpp" identifier="3"/>
                    <see-also>
                        <link raw="isWindow()" href="qwidget.html#isWindow" type="function">isWindow()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="nativeParentWidget" fullname="QWidget::nativeParentWidget" href="qwidget.html#nativeParentWidget" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="304" since="4.4" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QWidget *" signature="QWidget * nativeParentWidget() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4336" column="4">
                    <para>Returns the native parent for this widget, i.e. the next ancestor widget that has a system identifier, or 0 if it does not have any native parent.</para>
                    <see-also>
                        <link raw="effectiveWinId()" href="qwidget.html#effectiveWinId" type="function">effectiveWinId()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="topLevelWidget" fullname="QWidget::topLevelWidget" href="qwidget.html#topLevelWidget" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="305" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QWidget *" signature="QWidget * topLevelWidget() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="palette" fullname="QWidget::palette" href="qwidget.html#palette-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="308" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="palette" type="const QPalette &amp;" signature="const QPalette &amp; palette() const">
                <description path="" line="0" column="0">
                    <see-also>setPalette()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setPalette" fullname="QWidget::setPalette" href="qwidget.html#palette-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="309" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="palette" type="void" signature="void setPalette(const QPalette &amp;)">
                <parameter type="const QPalette &amp;" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>palette()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setBackgroundRole" fullname="QWidget::setBackgroundRole" href="qwidget.html#setBackgroundRole" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="311" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setBackgroundRole(QPalette::ColorRole role)">
                <parameter type="QPalette::ColorRole" name="role" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4386" column="4">
                    <para>Sets the background role of the widget to <argument>role</argument>.</para>
                    <para>The background role defines the brush from the widget's <link raw="palette" href="qwidget.html#palette-prop" type="property" getter="QWidget::palette()">palette</link> that is used to render the background.</para>
                    <para>If <argument>role</argument> is <link raw="QPalette::NoRole" href="qpalette.html#ColorRole-enum" type="enum" enum="QPalette::ColorRole">QPalette::NoRole</link>, then the widget inherits its parent's background role.</para>
                    <para>Note that styles are free to choose any color from the palette. You can modify the palette or set a style sheet if you don't achieve the result you want with .</para>
                    <see-also>
                        <link raw="backgroundRole()" href="qwidget.html#backgroundRole" type="function">backgroundRole()</link>
                        <link raw="foregroundRole()" href="qwidget.html#foregroundRole" type="function">foregroundRole()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="backgroundRole" fullname="QWidget::backgroundRole" href="qwidget.html#backgroundRole" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="312" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QPalette::ColorRole" signature="QPalette::ColorRole backgroundRole() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4360" column="4">
                    <para>Returns the background role of the widget.</para>
                    <para>The background role defines the brush from the widget's <link raw="palette" href="qwidget.html#palette-prop" type="property" getter="QWidget::palette()">palette</link> that is used to render the background.</para>
                    <para>If no explicit background role is set, the widget inherts its parent widget's background role.</para>
                    <see-also>
                        <link raw="setBackgroundRole()" href="qwidget.html#setBackgroundRole" type="function">setBackgroundRole()</link>
                        <link raw="foregroundRole()" href="qwidget.html#foregroundRole" type="function">foregroundRole()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setForegroundRole" fullname="QWidget::setForegroundRole" href="qwidget.html#setForegroundRole" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="314" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setForegroundRole(QPalette::ColorRole role)">
                <parameter type="QPalette::ColorRole" name="role" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4452" column="4">
                    <para>Sets the foreground role of the widget to <argument>role</argument>.</para>
                    <para>The foreground role defines the color from the widget's <link raw="palette" href="qwidget.html#palette-prop" type="property" getter="QWidget::palette()">palette</link> that is used to draw the foreground.</para>
                    <para>If <argument>role</argument> is <link raw="QPalette::NoRole" href="qpalette.html#ColorRole-enum" type="enum" enum="QPalette::ColorRole">QPalette::NoRole</link>, the widget uses a foreground role that contrasts with the background role.</para>
                    <para>Note that styles are free to choose any color from the palette. You can modify the palette or set a style sheet if you don't achieve the result you want with .</para>
                    <see-also>
                        <link raw="foregroundRole()" href="qwidget.html#foregroundRole" type="function">foregroundRole()</link>
                        <link raw="backgroundRole()" href="qwidget.html#backgroundRole" type="function">backgroundRole()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="foregroundRole" fullname="QWidget::foregroundRole" href="qwidget.html#foregroundRole" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="315" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QPalette::ColorRole" signature="QPalette::ColorRole foregroundRole() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="4411" column="4">
                    <para>Returns the foreground role.</para>
                    <para>The foreground role defines the color from the widget's <link raw="palette" href="qwidget.html#palette-prop" type="property" getter="QWidget::palette()">palette</link> that is used to draw the foreground.</para>
                    <para>If no explicit foreground role is set, the function returns a role that contrasts with the background role.</para>
                    <see-also>
                        <link raw="setForegroundRole()" href="qwidget.html#setForegroundRole" type="function">setForegroundRole()</link>
                        <link raw="backgroundRole()" href="qwidget.html#backgroundRole" type="function">backgroundRole()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="font" fullname="QWidget::font" href="qwidget.html#font-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="317" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="font" type="const QFont &amp;" signature="const QFont &amp; font() const">
                <description path="" line="0" column="0">
                    <see-also>setFont()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setFont" fullname="QWidget::setFont" href="qwidget.html#font-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="318" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="font" type="void" signature="void setFont(const QFont &amp;)">
                <parameter type="const QFont &amp;" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>font()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="fontMetrics" fullname="QWidget::fontMetrics" href="qwidget.html#fontMetrics" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="319" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QFontMetrics" signature="QFontMetrics fontMetrics() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="fontInfo" fullname="QWidget::fontInfo" href="qwidget.html#fontInfo" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="320" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QFontInfo" signature="QFontInfo fontInfo() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="cursor" fullname="QWidget::cursor" href="qwidget.html#cursor-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="323" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="cursor" type="QCursor" signature="QCursor cursor() const">
                <description path="" line="0" column="0">
                    <see-also>setCursor()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setCursor" fullname="QWidget::setCursor" href="qwidget.html#cursor-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="324" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="cursor" type="void" signature="void setCursor(const QCursor &amp;)">
                <parameter type="const QCursor &amp;" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>cursor()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="unsetCursor" fullname="QWidget::unsetCursor" href="qwidget.html#cursor-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="325" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="cursor" type="void" signature="void unsetCursor()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="setMouseTracking" fullname="QWidget::setMouseTracking" href="qwidget.html#mouseTracking-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="328" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="mouseTracking" type="void" signature="void setMouseTracking(bool enable)">
                <parameter type="bool" name="enable" default=""/>
                <description path="" line="0" column="0">
                    <see-also>hasMouseTracking()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="hasMouseTracking" fullname="QWidget::hasMouseTracking" href="qwidget.html#mouseTracking-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="329" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="mouseTracking" type="bool" signature="bool hasMouseTracking() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="underMouse" fullname="QWidget::underMouse" href="qwidget.html#underMouse" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="330" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool underMouse() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="setTabletTracking" fullname="QWidget::setTabletTracking" href="qwidget.html#tabletTracking-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="332" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="tabletTracking" type="void" signature="void setTabletTracking(bool enable)">
                <parameter type="bool" name="enable" default=""/>
                <description path="" line="0" column="0">
                    <see-also>hasTabletTracking()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="hasTabletTracking" fullname="QWidget::hasTabletTracking" href="qwidget.html#tabletTracking-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="333" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="tabletTracking" type="bool" signature="bool hasTabletTracking() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="setMask" fullname="QWidget::setMask" href="qwidget.html#setMask" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="335" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setMask(const QBitmap &amp;)">
                <parameter type="const QBitmap &amp;" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>
                        <link raw="mask()" href="qwidget.html#mask" type="function">mask()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMask" fullname="QWidget::setMask" href="qwidget.html#setMask-1" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="336" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setMask(const QRegion &amp;)">
                <parameter type="const QRegion &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="mask" fullname="QWidget::mask" href="qwidget.html#mask" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="337" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QRegion" signature="QRegion mask() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10180" column="4">
                    <para>Returns the mask currently set on a widget. If no mask is set the return value will be an empty region.</para>
                    <see-also>
                        <link raw="setMask()" href="qwidget.html#setMask" type="function">setMask()</link>
                        <link raw="clearMask()" href="qwidget.html#clearMask" type="function">clearMask()</link>
                        <link raw="QRegion::isEmpty()" href="qregion.html#isEmpty" type="function">QRegion::isEmpty()</link>
                        <link raw="Shaped Clock Example" href="qtwidgets-widgets-shapedclock-example.html" type="page" page="Shaped Clock Example">Shaped Clock Example</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="clearMask" fullname="QWidget::clearMask" href="qwidget.html#clearMask" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="338" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void clearMask()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="render" fullname="QWidget::render" href="qwidget.html#render" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="340" since="4.3" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void render(QPaintDevice *target, const QPoint &amp;targetOffset, const QRegion &amp;sourceRegion, QWidget::RenderFlags renderFlags)">
                <parameter type="QPaintDevice *" name="target" default=""/>
                <parameter type="const QPoint &amp;" name="targetOffset" default="QPoint()"/>
                <parameter type="const QRegion &amp;" name="sourceRegion" default="QRegion()"/>
                <parameter type="QWidget::RenderFlags" name="renderFlags" default="..."/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="5085" column="4">
                    <para>Renders the <argument>sourceRegion</argument> of this widget into the <argument>target</argument> using <argument>renderFlags</argument> to determine how to render. Rendering starts at <argument>targetOffset</argument> in the <argument>target</argument>. For example:</para>
                    <snippet location="code/src_gui_kernel_qwidget.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/widgets/doc/snippets/code/src_gui_kernel_qwidget.cpp" identifier="7"/>
                    <para>If <argument>sourceRegion</argument> is a null region, this function will use <link raw="QWidget::rect()" href="qwidget.html#rect-prop" type="function">QWidget::rect()</link> as the region, i.e. the entire widget.</para>
                    <para>Ensure that you call <link raw="QPainter::end()" href="qpainter.html#end" type="function">QPainter::end()</link> for the <argument>target</argument> device's active painter (if any) before rendering. For example:</para>
                    <snippet location="code/src_gui_kernel_qwidget.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/widgets/doc/snippets/code/src_gui_kernel_qwidget.cpp" identifier="8"/>
                    <para>
                        <bold>Note:</bold> To obtain the contents of a <link raw="QOpenGLWidget" href="qopenglwidget.html" type="class">QOpenGLWidget</link>, use <link raw="QOpenGLWidget::grabFramebuffer()" href="qopenglwidget.html#grabFramebuffer" type="function">QOpenGLWidget::grabFramebuffer()</link> instead.</para>
                    <para>
                        <bold>Note:</bold> To obtain the contents of a <link raw="QGLWidget" href="qglwidget.html" type="class">QGLWidget</link> (deprecated), use <link raw="QGLWidget::grabFrameBuffer()" href="qglwidget.html#grabFrameBufferx" type="function">QGLWidget::grabFrameBuffer()</link> or <link raw="QGLWidget::renderPixmap()" href="qglwidget.html#renderPixmap" type="function">QGLWidget::renderPixmap()</link> instead.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="render" fullname="QWidget::render" href="qwidget.html#render-1" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="344" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" type="void" signature="void render(QPainter *painter, const QPoint &amp;targetOffset, const QRegion &amp;sourceRegion, QWidget::RenderFlags renderFlags)">
                <parameter type="QPainter *" name="painter" default=""/>
                <parameter type="const QPoint &amp;" name="targetOffset" default="QPoint()"/>
                <parameter type="const QRegion &amp;" name="sourceRegion" default="QRegion()"/>
                <parameter type="QWidget::RenderFlags" name="renderFlags" default="..."/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="5115" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Renders the widget into the <argument>painter</argument>'s <link raw="QPainter::device()" href="qpainter.html#device" type="function">QPainter::device()</link>.</para>
                    <para>Transformations and settings applied to the <argument>painter</argument> will be used when rendering.</para>
                    <para>
                        <bold>Note:</bold> The <argument>painter</argument> must be active. On  the widget will be rendered into a <link raw="QPixmap" href="qpixmap.html" type="class">QPixmap</link> and then drawn by the <argument>painter</argument>.</para>
                    <see-also>
                        <link raw="QPainter::device()" href="qpainter.html#device" type="function">QPainter::device()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="grab" fullname="QWidget::grab" href="qwidget.html#grab" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="348" since="5.0" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QPixmap" signature="QPixmap grab(const QRect &amp;rectangle)">
                <parameter type="const QRect &amp;" name="rectangle" default="QRect(QPoint(0, 0), QSize(-1, -1))"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="5216" column="4">
                    <para>Renders the widget into a pixmap restricted by the given <argument>rectangle</argument>. If the widget has any children, then they are also painted in the appropriate positions.</para>
                    <para>If a rectangle with an invalid size is specified (the default), the entire widget is painted.</para>
                    <see-also>
                        <link raw="render()" href="qwidget.html#render" type="function">render()</link>
                        <link raw="QPixmap" href="qpixmap.html" type="class">QPixmap</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="graphicsEffect" fullname="QWidget::graphicsEffect" href="qwidget.html#graphicsEffect" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="351" since="4.6" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QGraphicsEffect *" brief="Returns a pointer to the widget's graphics effect" signature="QGraphicsEffect * graphicsEffect() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="5259" column="4">
                    <brief>The  function returns a pointer to the widget's graphics effect.</brief>
                    <para>If the widget has no graphics effect, 0 is returned.</para>
                    <see-also>
                        <link raw="setGraphicsEffect()" href="qwidget.html#setGraphicsEffect" type="function">setGraphicsEffect()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setGraphicsEffect" fullname="QWidget::setGraphicsEffect" href="qwidget.html#setGraphicsEffect" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="352" since="4.6" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" brief="For setting the widget's graphics effect" signature="void setGraphicsEffect(QGraphicsEffect *effect)">
                <parameter type="QGraphicsEffect *" name="effect" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="5277" column="4">
                    <brief>The  function is for setting the widget's graphics effect.</brief>
                    <para>Sets <argument>effect</argument> as the widget's effect. If there already is an effect installed on this widget, <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> will delete the existing effect before installing the new <argument>effect</argument>.</para>
                    <para>If <argument>effect</argument> is the installed effect on a different widget,  will remove the effect from the widget and install it on this widget.</para>
                    <para>
                        <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> takes ownership of <argument>effect</argument>.</para>
                    <para>
                        <bold>Note:</bold> This function will apply the effect on itself and all its children.</para>
                    <para>
                        <bold>Note:</bold> Graphics effects are not supported for OpenGL-based widgets, such as <link raw="QGLWidget" href="qglwidget.html" type="class">QGLWidget</link>, <link raw="QOpenGLWidget" href="qopenglwidget.html" type="class">QOpenGLWidget</link> and QQuickWidget.</para>
                    <see-also>
                        <link raw="graphicsEffect()" href="qwidget.html#graphicsEffect" type="function">graphicsEffect()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="grabGesture" fullname="QWidget::grabGesture" href="qwidget.html#grabGesture" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="356" since="4.6" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void grabGesture(Qt::GestureType gesture, Qt::GestureFlags flags)">
                <parameter type="Qt::GestureType" name="gesture" default=""/>
                <parameter type="Qt::GestureFlags" name="flags" default="..."/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="12376" column="4">
                    <para>Subscribes the widget to a given <argument>gesture</argument> with specific <argument>flags</argument>.</para>
                    <see-also>
                        <link raw="ungrabGesture()" href="qwidget.html#ungrabGesture" type="function">ungrabGesture()</link>
                        <link raw="QGestureEvent" href="qgestureevent.html" type="class">QGestureEvent</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="ungrabGesture" fullname="QWidget::ungrabGesture" href="qwidget.html#ungrabGesture" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="357" since="4.6" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void ungrabGesture(Qt::GestureType gesture)">
                <parameter type="Qt::GestureType" name="gesture" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="12389" column="4">
                    <para>Unsubscribes the widget from a given <argument>gesture</argument> type</para>
                    <see-also>
                        <link raw="grabGesture()" href="qwidget.html#grabGesture" type="function">grabGesture()</link>
                        <link raw="QGestureEvent" href="qgestureevent.html" type="class">QGestureEvent</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setWindowTitle" fullname="QWidget::setWindowTitle" href="qwidget.html#windowTitle-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="361" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowTitle" type="void" signature="void setWindowTitle(const QString &amp;)">
                <parameter type="const QString &amp;" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>windowTitle()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setStyleSheet" fullname="QWidget::setStyleSheet" href="qwidget.html#styleSheet-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="363" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="styleSheet" type="void" signature="void setStyleSheet(const QString &amp;styleSheet)">
                <parameter type="const QString &amp;" name="styleSheet" default=""/>
                <description path="" line="0" column="0">
                    <see-also>styleSheet()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="styleSheet" fullname="QWidget::styleSheet" href="qwidget.html#styleSheet-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="367" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="styleSheet" type="QString" signature="QString styleSheet() const">
                <description path="" line="0" column="0">
                    <see-also>setStyleSheet()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="windowTitle" fullname="QWidget::windowTitle" href="qwidget.html#windowTitle-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="369" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowTitle" type="QString" signature="QString windowTitle() const">
                <description path="" line="0" column="0">
                    <see-also>setWindowTitle()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setWindowIcon" fullname="QWidget::setWindowIcon" href="qwidget.html#windowIcon-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="370" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowIcon" type="void" signature="void setWindowIcon(const QIcon &amp;icon)">
                <parameter type="const QIcon &amp;" name="icon" default=""/>
                <description path="" line="0" column="0">
                    <see-also>windowIcon()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="windowIcon" fullname="QWidget::windowIcon" href="qwidget.html#windowIcon-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="371" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowIcon" type="QIcon" signature="QIcon windowIcon() const">
                <description path="" line="0" column="0">
                    <see-also>setWindowIcon()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setWindowIconText" fullname="QWidget::setWindowIconText" href="qwidget-obsolete.html#windowIconText-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="372" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowIconText" type="void" signature="void setWindowIconText(const QString &amp;)">
                <parameter type="const QString &amp;" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>windowIconText()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="windowIconText" fullname="QWidget::windowIconText" href="qwidget-obsolete.html#windowIconText-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="373" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowIconText" type="QString" signature="QString windowIconText() const">
                <description path="" line="0" column="0">
                    <see-also>setWindowIconText()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setWindowRole" fullname="QWidget::setWindowRole" href="qwidget.html#setWindowRole" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="374" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setWindowRole(const QString &amp;role)">
                <parameter type="const QString &amp;" name="role" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6341" column="4">
                    <para>Sets the window's role to <argument>role</argument>. This only makes sense for windows on X11.</para>
                    <see-also>
                        <link raw="windowRole()" href="qwidget.html#windowRole" type="function">windowRole()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="windowRole" fullname="QWidget::windowRole" href="qwidget.html#windowRole" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="375" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString windowRole() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6329" column="4">
                    <para>Returns the window's role, or an empty string.</para>
                    <see-also>
                        <link raw="setWindowRole()" href="qwidget.html#setWindowRole" type="function">setWindowRole()</link>
                        <link raw="windowIcon" href="qwidget.html#windowIcon-prop" type="property" getter="QWidget::windowIcon()">windowIcon</link>
                        <link raw="windowTitle" href="qwidget.html#windowTitle-prop" type="property" getter="QWidget::windowTitle()">windowTitle</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setWindowFilePath" fullname="QWidget::setWindowFilePath" href="qwidget.html#windowFilePath-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="376" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowFilePath" type="void" signature="void setWindowFilePath(const QString &amp;filePath)">
                <parameter type="const QString &amp;" name="filePath" default=""/>
                <description path="" line="0" column="0">
                    <see-also>windowFilePath()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="windowFilePath" fullname="QWidget::windowFilePath" href="qwidget.html#windowFilePath-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="377" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowFilePath" type="QString" signature="QString windowFilePath() const">
                <description path="" line="0" column="0">
                    <see-also>setWindowFilePath()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setWindowOpacity" fullname="QWidget::setWindowOpacity" href="qwidget.html#windowOpacity-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="379" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowOpacity" type="void" signature="void setWindowOpacity(qreal level)">
                <parameter type="qreal" name="level" default=""/>
                <description path="" line="0" column="0">
                    <see-also>windowOpacity()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="windowOpacity" fullname="QWidget::windowOpacity" href="qwidget.html#windowOpacity-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="380" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowOpacity" type="qreal" signature="qreal windowOpacity() const">
                <description path="" line="0" column="0">
                    <see-also>setWindowOpacity()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isWindowModified" fullname="QWidget::isWindowModified" href="qwidget.html#windowModified-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="382" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowModified" type="bool" signature="bool isWindowModified() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="setToolTip" fullname="QWidget::setToolTip" href="qwidget.html#toolTip-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="384" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="toolTip" type="void" signature="void setToolTip(const QString &amp;)">
                <parameter type="const QString &amp;" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>toolTip()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="toolTip" fullname="QWidget::toolTip" href="qwidget.html#toolTip-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="385" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="toolTip" type="QString" signature="QString toolTip() const">
                <description path="" line="0" column="0">
                    <see-also>setToolTip()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setToolTipDuration" fullname="QWidget::setToolTipDuration" href="qwidget.html#toolTipDuration-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="386" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="toolTipDuration" type="void" signature="void setToolTipDuration(int msec)">
                <parameter type="int" name="msec" default=""/>
                <description path="" line="0" column="0">
                    <see-also>toolTipDuration()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="toolTipDuration" fullname="QWidget::toolTipDuration" href="qwidget.html#toolTipDuration-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="387" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="toolTipDuration" type="int" signature="int toolTipDuration() const">
                <description path="" line="0" column="0">
                    <see-also>setToolTipDuration()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setStatusTip" fullname="QWidget::setStatusTip" href="qwidget.html#statusTip-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="390" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="statusTip" type="void" signature="void setStatusTip(const QString &amp;)">
                <parameter type="const QString &amp;" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>statusTip()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="statusTip" fullname="QWidget::statusTip" href="qwidget.html#statusTip-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="391" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="statusTip" type="QString" signature="QString statusTip() const">
                <description path="" line="0" column="0">
                    <see-also>setStatusTip()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setWhatsThis" fullname="QWidget::setWhatsThis" href="qwidget.html#whatsThis-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="394" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="whatsThis" type="void" signature="void setWhatsThis(const QString &amp;)">
                <parameter type="const QString &amp;" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>whatsThis()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="whatsThis" fullname="QWidget::whatsThis" href="qwidget.html#whatsThis-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="395" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="whatsThis" type="QString" signature="QString whatsThis() const">
                <description path="" line="0" column="0">
                    <see-also>setWhatsThis()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="accessibleName" fullname="QWidget::accessibleName" href="qwidget.html#accessibleName-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="398" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="accessibleName" type="QString" signature="QString accessibleName() const">
                <description path="" line="0" column="0">
                    <see-also>setAccessibleName()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setAccessibleName" fullname="QWidget::setAccessibleName" href="qwidget.html#accessibleName-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="399" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="accessibleName" type="void" signature="void setAccessibleName(const QString &amp;name)">
                <parameter type="const QString &amp;" name="name" default=""/>
                <description path="" line="0" column="0">
                    <see-also>accessibleName()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="accessibleDescription" fullname="QWidget::accessibleDescription" href="qwidget.html#accessibleDescription-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="400" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="accessibleDescription" type="QString" signature="QString accessibleDescription() const">
                <description path="" line="0" column="0">
                    <see-also>setAccessibleDescription()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setAccessibleDescription" fullname="QWidget::setAccessibleDescription" href="qwidget.html#accessibleDescription-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="401" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="accessibleDescription" type="void" signature="void setAccessibleDescription(const QString &amp;description)">
                <parameter type="const QString &amp;" name="description" default=""/>
                <description path="" line="0" column="0">
                    <see-also>accessibleDescription()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setLayoutDirection" fullname="QWidget::setLayoutDirection" href="qwidget.html#layoutDirection-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="404" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="layoutDirection" type="void" signature="void setLayoutDirection(Qt::LayoutDirection direction)">
                <parameter type="Qt::LayoutDirection" name="direction" default=""/>
                <description path="" line="0" column="0">
                    <see-also>layoutDirection()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="layoutDirection" fullname="QWidget::layoutDirection" href="qwidget.html#layoutDirection-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="405" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="layoutDirection" type="Qt::LayoutDirection" signature="Qt::LayoutDirection layoutDirection() const">
                <description path="" line="0" column="0">
                    <see-also>setLayoutDirection()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="unsetLayoutDirection" fullname="QWidget::unsetLayoutDirection" href="qwidget.html#layoutDirection-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="406" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="layoutDirection" type="void" signature="void unsetLayoutDirection()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="setLocale" fullname="QWidget::setLocale" href="qwidget.html#locale-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="408" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="locale" type="void" signature="void setLocale(const QLocale &amp;locale)">
                <parameter type="const QLocale &amp;" name="locale" default=""/>
                <description path="" line="0" column="0">
                    <see-also>locale()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="locale" fullname="QWidget::locale" href="qwidget.html#locale-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="409" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="locale" type="QLocale" signature="QLocale locale() const">
                <description path="" line="0" column="0">
                    <see-also>setLocale()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="unsetLocale" fullname="QWidget::unsetLocale" href="qwidget.html#locale-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="410" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="locale" type="void" signature="void unsetLocale()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="isRightToLeft" fullname="QWidget::isRightToLeft" href="qwidget.html#isRightToLeft" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="412" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isRightToLeft() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="isLeftToRight" fullname="QWidget::isLeftToRight" href="qwidget.html#isLeftToRight" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="413" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isLeftToRight() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="setFocus" fullname="QWidget::setFocus" href="qwidget.html#setFocus" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="416" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setFocus()">
                <description path="" line="0" column="0">
                    <see-also>
                        <link raw="hasFocus()" href="qwidget.html#focus-prop" type="function">hasFocus()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isActiveWindow" fullname="QWidget::isActiveWindow" href="qwidget.html#isActiveWindow-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="419" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="isActiveWindow" type="bool" signature="bool isActiveWindow() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="activateWindow" fullname="QWidget::activateWindow" href="qwidget.html#activateWindow" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="420" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void activateWindow()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="clearFocus" fullname="QWidget::clearFocus" href="qwidget.html#clearFocus" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="421" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void clearFocus()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6668" column="4">
                    <para>Takes keyboard input focus from the widget.</para>
                    <para>If the widget has active focus, a <link raw="focusOutEvent()" href="qwidget.html#focusOutEvent" type="function">focus out event</link> is sent to this widget to tell it that it has lost the focus.</para>
                    <para>This widget must enable focus setting in order to get the keyboard input focus, i.e. it must call <link raw="setFocusPolicy()" href="qwidget.html#focusPolicy-prop" type="function">setFocusPolicy()</link>.</para>
                    <see-also>
                        <link raw="hasFocus()" href="qwidget.html#focus-prop" type="function">hasFocus()</link>
                        <link raw="setFocus()" href="qwidget.html#setFocus" type="function">setFocus()</link>
                        <link raw="focusInEvent()" href="qwidget.html#focusInEvent" type="function">focusInEvent()</link>
                        <link raw="focusOutEvent()" href="qwidget.html#focusOutEvent" type="function">focusOutEvent()</link>
                        <link raw="setFocusPolicy()" href="qwidget.html#focusPolicy-prop" type="function">setFocusPolicy()</link>
                        <link raw="QApplication::focusWidget()" href="qapplication.html#focusWidget" type="function">QApplication::focusWidget()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setFocus" fullname="QWidget::setFocus" href="qwidget.html#setFocus-1" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="423" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setFocus(Qt::FocusReason reason)">
                <parameter type="Qt::FocusReason" name="reason" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6460" column="4">
                    <para>Gives the keyboard input focus to this widget (or its focus proxy) if this widget or one of its parents is the <link raw="isActiveWindow()" href="qwidget.html#isActiveWindow-prop" type="function">active window</link>. The <argument>reason</argument> argument will be passed into any focus event sent from this function, it is used to give an explanation of what caused the widget to get focus. If the window is not active, the widget will be given the focus when the window becomes active.</para>
                    <para>First, a focus about to change event is sent to the focus widget (if any) to tell it that it is about to lose the focus. Then focus is changed, a focus out event is sent to the previous focus item and a focus in event is sent to the new item to tell it that it just received the focus. (Nothing happens if the focus in and focus out widgets are the same.)</para>
                    <para>
                        <bold>Note:</bold> On embedded platforms, <link raw="setFocus()" href="qwidget.html#setFocus" type="function">setFocus()</link> will not cause an input panel to be opened by the input method. If you want this to happen, you have to send a <link raw="QEvent::RequestSoftwareInputPanel" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::RequestSoftwareInputPanel</link> event to the widget yourself.</para>
                    <para>
                        <link raw="setFocus()" href="qwidget.html#setFocus" type="function">setFocus()</link> gives focus to a widget regardless of its focus policy, but does not clear any keyboard grab (see <link raw="grabKeyboard()" href="qwidget.html#grabKeyboard" type="function">grabKeyboard()</link>).</para>
                    <para>Be aware that if the widget is hidden, it will not accept focus until it is shown.</para>
                    <para>
                        <bold>Warning:</bold> If you call <link raw="setFocus()" href="qwidget.html#setFocus" type="function">setFocus()</link> in a function which may itself be called from <link raw="focusOutEvent()" href="qwidget.html#focusOutEvent" type="function">focusOutEvent()</link> or <link raw="focusInEvent()" href="qwidget.html#focusInEvent" type="function">focusInEvent()</link>, you may get an infinite recursion.</para>
                    <see-also>
                        <link raw="hasFocus()" href="qwidget.html#focus-prop" type="function">hasFocus()</link>
                        <link raw="clearFocus()" href="qwidget.html#clearFocus" type="function">clearFocus()</link>
                        <link raw="focusInEvent()" href="qwidget.html#focusInEvent" type="function">focusInEvent()</link>
                        <link raw="focusOutEvent()" href="qwidget.html#focusOutEvent" type="function">focusOutEvent()</link>
                        <link raw="setFocusPolicy()" href="qwidget.html#focusPolicy-prop" type="function">setFocusPolicy()</link>
                        <link raw="focusWidget()" href="qwidget.html#focusWidget" type="function">focusWidget()</link>
                        <link raw="QApplication::focusWidget()" href="qapplication.html#focusWidget" type="function">QApplication::focusWidget()</link>
                        <link raw="grabKeyboard()" href="qwidget.html#grabKeyboard" type="function">grabKeyboard()</link>
                        <link raw="grabMouse()" href="qwidget.html#grabMouse" type="function">grabMouse()</link>
                        <link raw="Keyboard Focus in Widgets" href="focus.html" type="page" page="Keyboard Focus in Widgets">Keyboard Focus in Widgets</link>
                        <link raw="QEvent::RequestSoftwareInputPanel" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::RequestSoftwareInputPanel</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="focusPolicy" fullname="QWidget::focusPolicy" href="qwidget.html#focusPolicy-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="424" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="focusPolicy" type="Qt::FocusPolicy" signature="Qt::FocusPolicy focusPolicy() const">
                <description path="" line="0" column="0">
                    <see-also>setFocusPolicy()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setFocusPolicy" fullname="QWidget::setFocusPolicy" href="qwidget.html#focusPolicy-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="425" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="focusPolicy" type="void" signature="void setFocusPolicy(Qt::FocusPolicy policy)">
                <parameter type="Qt::FocusPolicy" name="policy" default=""/>
                <description path="" line="0" column="0">
                    <see-also>focusPolicy()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="hasFocus" fullname="QWidget::hasFocus" href="qwidget.html#focus-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="426" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="focus" type="bool" signature="bool hasFocus() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="setTabOrder" fullname="QWidget::setTabOrder" href="qwidget.html#setTabOrder" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="427" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setTabOrder(QWidget *first, QWidget *second)">
                <parameter type="QWidget *" name="first" default=""/>
                <parameter type="QWidget *" name="second" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6919" column="4">
                    <para>Puts the <argument>second</argument> widget after the <argument>first</argument> widget in the focus order.</para>
                    <para>It effectively removes the <argument>second</argument> widget from its focus chain and inserts it after the <argument>first</argument> widget.</para>
                    <para>Note that since the tab order of the <argument>second</argument> widget is changed, you should order a chain like this:</para>
                    <snippet location="code/src_gui_kernel_qwidget.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/widgets/doc/snippets/code/src_gui_kernel_qwidget.cpp" identifier="9"/>
                    <para>
                        <italic>not</italic> like this:</para>
                    <snippet location="code/src_gui_kernel_qwidget.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/widgets/doc/snippets/code/src_gui_kernel_qwidget.cpp" identifier="10"/>
                    <para>If <argument>first</argument> or <argument>second</argument> has a focus proxy,  correctly substitutes the proxy.</para>
                    <para>
                        <bold>Note:</bold> Since Qt 5.10: A widget that has a child as focus proxy is understood as a compound widget. When setting a tab order between one or two compound widgets, the local tab order inside each will be preserved. This means that if both widgets are compound widgets, the resulting tab order will be from the last child inside <argument>first</argument>, to the first child inside <argument>second</argument>.</para>
                    <see-also>
                        <link raw="setFocusPolicy()" href="qwidget.html#focusPolicy-prop" type="function">setFocusPolicy()</link>
                        <link raw="setFocusProxy()" href="qwidget.html#setFocusProxy" type="function">setFocusProxy()</link>
                        <link raw="Keyboard Focus in Widgets" href="focus.html" type="page" page="Keyboard Focus in Widgets">Keyboard Focus in Widgets</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setFocusProxy" fullname="QWidget::setFocusProxy" href="qwidget.html#setFocusProxy" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="428" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setFocusProxy(QWidget *w)">
                <parameter type="QWidget *" name="w" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6387" column="4">
                    <para>Sets the widget's focus proxy to widget <argument>w</argument>. If <argument>w</argument> is 0, the function resets this widget to have no focus proxy.</para>
                    <para>Some widgets can &quot;have focus&quot;, but create a child widget, such as <link raw="QLineEdit" href="qlineedit.html" type="class">QLineEdit</link>, to actually handle the focus. In this case, the widget can set the line edit to be its focus proxy.</para>
                    <para> sets the widget which will actually get focus when &quot;this widget&quot; gets it. If there is a focus proxy, <link raw="setFocus()" href="qwidget.html#setFocus" type="function">setFocus()</link> and <link raw="hasFocus()" href="qwidget.html#focus-prop" type="function">hasFocus()</link> operate on the focus proxy.</para>
                    <see-also>
                        <link raw="focusProxy()" href="qwidget.html#focusProxy" type="function">focusProxy()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="focusProxy" fullname="QWidget::focusProxy" href="qwidget.html#focusProxy" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="429" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QWidget *" signature="QWidget * focusProxy() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6420" column="4">
                    <para>Returns the focus proxy, or 0 if there is no focus proxy.</para>
                    <see-also>
                        <link raw="setFocusProxy()" href="qwidget.html#setFocusProxy" type="function">setFocusProxy()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="contextMenuPolicy" fullname="QWidget::contextMenuPolicy" href="qwidget.html#contextMenuPolicy-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="430" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="contextMenuPolicy" type="Qt::ContextMenuPolicy" signature="Qt::ContextMenuPolicy contextMenuPolicy() const">
                <description path="" line="0" column="0">
                    <see-also>setContextMenuPolicy()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setContextMenuPolicy" fullname="QWidget::setContextMenuPolicy" href="qwidget.html#contextMenuPolicy-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="431" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="contextMenuPolicy" type="void" signature="void setContextMenuPolicy(Qt::ContextMenuPolicy policy)">
                <parameter type="Qt::ContextMenuPolicy" name="policy" default=""/>
                <description path="" line="0" column="0">
                    <see-also>contextMenuPolicy()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="grabMouse" fullname="QWidget::grabMouse" href="qwidget.html#grabMouse" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="434" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void grabMouse()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="grabMouse" fullname="QWidget::grabMouse" href="qwidget.html#grabMouse-1" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="436" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void grabMouse(const QCursor &amp;)">
                <parameter type="const QCursor &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="releaseMouse" fullname="QWidget::releaseMouse" href="qwidget.html#releaseMouse" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="438" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void releaseMouse()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="grabKeyboard" fullname="QWidget::grabKeyboard" href="qwidget.html#grabKeyboard" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="439" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void grabKeyboard()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="releaseKeyboard" fullname="QWidget::releaseKeyboard" href="qwidget.html#releaseKeyboard" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="440" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void releaseKeyboard()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="grabShortcut" fullname="QWidget::grabShortcut" href="qwidget.html#grabShortcut" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="442" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="int" signature="int grabShortcut(const QKeySequence &amp;key, Qt::ShortcutContext context)">
                <parameter type="const QKeySequence &amp;" name="key" default=""/>
                <parameter type="Qt::ShortcutContext" name="context" default="Qt::WindowShortcut"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11738" column="4">
                    <para>Adds a shortcut to Qt's shortcut system that watches for the given <argument>key</argument> sequence in the given <argument>context</argument>. If the <argument>context</argument> is <link raw="Qt::ApplicationShortcut" href="qt.html#ShortcutContext-enum" type="enum" enum="Qt::ShortcutContext">Qt::ApplicationShortcut</link>, the shortcut applies to the application as a whole. Otherwise, it is either local to this widget, <link raw="Qt::WidgetShortcut" href="qt.html#ShortcutContext-enum" type="enum" enum="Qt::ShortcutContext">Qt::WidgetShortcut</link>, or to the window itself, <link raw="Qt::WindowShortcut" href="qt.html#ShortcutContext-enum" type="enum" enum="Qt::ShortcutContext">Qt::WindowShortcut</link>.</para>
                    <para>If the same <argument>key</argument> sequence has been grabbed by several widgets, when the <argument>key</argument> sequence occurs a <link raw="QEvent::Shortcut" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::Shortcut</link> event is sent to all the widgets to which it applies in a non-deterministic order, but with the ``ambiguous'' flag set to true.</para>
                    <para>
                        <bold>Warning:</bold> You should not normally need to use this function; instead create <link raw="QAction" href="qaction.html" type="class">QAction</link>s with the shortcut key sequences you require (if you also want equivalent menu options and toolbar buttons), or create <link raw="QShortcut" href="qshortcut.html" type="class">QShortcut</link>s if you just need key sequences. Both <link raw="QAction" href="qaction.html" type="class">QAction</link> and <link raw="QShortcut" href="qshortcut.html" type="class">QShortcut</link> handle all the event filtering for you, and provide signals which are triggered when the user triggers the key sequence, so are much easier to use than this low-level function.</para>
                    <see-also>
                        <link raw="releaseShortcut()" href="qwidget.html#releaseShortcut" type="function">releaseShortcut()</link>
                        <link raw="setShortcutEnabled()" href="qwidget.html#setShortcutEnabled" type="function">setShortcutEnabled()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="releaseShortcut" fullname="QWidget::releaseShortcut" href="qwidget.html#releaseShortcut" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="443" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void releaseShortcut(int id)">
                <parameter type="int" name="id" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11770" column="4">
                    <para>Removes the shortcut with the given <argument>id</argument> from Qt's shortcut system. The widget will no longer receive <link raw="QEvent::Shortcut" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::Shortcut</link> events for the shortcut's key sequence (unless it has other shortcuts with the same key sequence).</para>
                    <para>
                        <bold>Warning:</bold> You should not normally need to use this function since Qt's shortcut system removes shortcuts automatically when their parent widget is destroyed. It is best to use <link raw="QAction" href="qaction.html" type="class">QAction</link> or <link raw="QShortcut" href="qshortcut.html" type="class">QShortcut</link> to handle shortcuts, since they are easier to use than this low-level function. Note also that this is an expensive operation.</para>
                    <see-also>
                        <link raw="grabShortcut()" href="qwidget.html#grabShortcut" type="function">grabShortcut()</link>
                        <link raw="setShortcutEnabled()" href="qwidget.html#setShortcutEnabled" type="function">setShortcutEnabled()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setShortcutEnabled" fullname="QWidget::setShortcutEnabled" href="qwidget.html#setShortcutEnabled" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="444" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setShortcutEnabled(int id, bool enable)">
                <parameter type="int" name="id" default=""/>
                <parameter type="bool" name="enable" default="true"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11792" column="4">
                    <para>If <argument>enable</argument> is true, the shortcut with the given <argument>id</argument> is enabled; otherwise the shortcut is disabled.</para>
                    <para>
                        <bold>Warning:</bold> You should not normally need to use this function since Qt's shortcut system enables/disables shortcuts automatically as widgets become hidden/visible and gain or lose focus. It is best to use <link raw="QAction" href="qaction.html" type="class">QAction</link> or <link raw="QShortcut" href="qshortcut.html" type="class">QShortcut</link> to handle shortcuts, since they are easier to use than this low-level function.</para>
                    <see-also>
                        <link raw="grabShortcut()" href="qwidget.html#grabShortcut" type="function">grabShortcut()</link>
                        <link raw="releaseShortcut()" href="qwidget.html#releaseShortcut" type="function">releaseShortcut()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setShortcutAutoRepeat" fullname="QWidget::setShortcutAutoRepeat" href="qwidget.html#setShortcutAutoRepeat" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="445" since="4.2" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setShortcutAutoRepeat(int id, bool enable)">
                <parameter type="int" name="id" default=""/>
                <parameter type="bool" name="enable" default="true"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11811" column="4">
                    <para>If <argument>enable</argument> is true, auto repeat of the shortcut with the given <argument>id</argument> is enabled; otherwise it is disabled.</para>
                    <see-also>
                        <link raw="grabShortcut()" href="qwidget.html#grabShortcut" type="function">grabShortcut()</link>
                        <link raw="releaseShortcut()" href="qwidget.html#releaseShortcut" type="function">releaseShortcut()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="mouseGrabber" fullname="QWidget::mouseGrabber" href="qwidget.html#mouseGrabber" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="447" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="QWidget *" signature="QWidget * mouseGrabber()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="keyboardGrabber" fullname="QWidget::keyboardGrabber" href="qwidget.html#keyboardGrabber" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="448" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="QWidget *" signature="QWidget * keyboardGrabber()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="updatesEnabled" fullname="QWidget::updatesEnabled" href="qwidget.html#updatesEnabled-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="451" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="updatesEnabled" type="bool" signature="bool updatesEnabled() const">
                <description path="" line="0" column="0">
                    <see-also>setUpdatesEnabled()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setUpdatesEnabled" fullname="QWidget::setUpdatesEnabled" href="qwidget.html#updatesEnabled-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="452" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="updatesEnabled" type="void" signature="void setUpdatesEnabled(bool enable)">
                <parameter type="bool" name="enable" default=""/>
                <description path="" line="0" column="0">
                    <see-also>updatesEnabled()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="graphicsProxyWidget" fullname="QWidget::graphicsProxyWidget" href="qwidget.html#graphicsProxyWidget" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="455" since="4.5" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QGraphicsProxyWidget *" signature="QGraphicsProxyWidget * graphicsProxyWidget() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="12356" column="4">
                    <para>Returns the proxy widget for the corresponding embedded widget in a graphics view; otherwise returns 0.</para>
                    <see-also>
                        <link raw="QGraphicsProxyWidget::createProxyForChildWidget()" href="qgraphicsproxywidget.html#createProxyForChildWidget" type="function">QGraphicsProxyWidget::createProxyForChildWidget()</link>
                        <link raw="QGraphicsScene::addWidget()" href="qgraphicsscene.html#addWidget" type="function">QGraphicsScene::addWidget()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="update" fullname="QWidget::update" href="qwidget.html#update" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="459" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void update()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11048" column="4">
                    <para>Updates the widget unless updates are disabled or the widget is hidden.</para>
                    <para>This function does not cause an immediate repaint; instead it schedules a paint event for processing when Qt returns to the main event loop. This permits Qt to optimize for more speed and less flicker than a call to <link raw="repaint()" href="qwidget.html#repaint" type="function">repaint()</link> does.</para>
                    <para>Calling  several times normally results in just one <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link> call.</para>
                    <para>Qt normally erases the widget's area before the <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link> call. If the <link raw="Qt::WA_OpaquePaintEvent" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_OpaquePaintEvent</link> widget attribute is set, the widget is responsible for painting all its pixels with an opaque color.</para>
                    <see-also>
                        <link raw="repaint()" href="qwidget.html#repaint" type="function">repaint()</link>
                        <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link>
                        <link raw="setUpdatesEnabled()" href="qwidget.html#updatesEnabled-prop" type="function">setUpdatesEnabled()</link>
                        <link raw="Analog Clock Example" href="qtwidgets-widgets-analogclock-example.html" type="page" page="Analog Clock Example">Analog Clock Example</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="repaint" fullname="QWidget::repaint" href="qwidget.html#repaint" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="460" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void repaint()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10969" column="4">
                    <para>Repaints the widget directly by calling <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link> immediately, unless updates are disabled or the widget is hidden.</para>
                    <para>We suggest only using  if you need an immediate repaint, for example during animation. In almost all circumstances <link raw="update()" href="qwidget.html#update" type="function">update()</link> is better, as it permits Qt to optimize for speed and minimize flicker.</para>
                    <para>
                        <bold>Warning:</bold> If you call  in a function which may itself be called from <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link>, you may get infinite recursion. The <link raw="update()" href="qwidget.html#update" type="function">update()</link> function never causes recursion.</para>
                    <see-also>
                        <link raw="update()" href="qwidget.html#update" type="function">update()</link>
                        <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link>
                        <link raw="setUpdatesEnabled()" href="qwidget.html#updatesEnabled-prop" type="function">setUpdatesEnabled()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="update" fullname="QWidget::update" href="qwidget.html#update-1" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="463" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void update(int x, int y, int w, int h)">
                <parameter type="int" name="x" default=""/>
                <parameter type="int" name="y" default=""/>
                <parameter type="int" name="w" default=""/>
                <parameter type="int" name="h" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="update" fullname="QWidget::update" href="qwidget.html#update-2" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="464" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="2" type="void" signature="void update(const QRect &amp;rect)">
                <parameter type="const QRect &amp;" name="rect" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11078" column="4">
                    <para>This is an overloaded function.</para>
                    <para>This version updates a rectangle <argument>rect</argument> inside the widget.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="update" fullname="QWidget::update" href="qwidget.html#update-3" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="465" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="3" type="void" signature="void update(const QRegion &amp;rgn)">
                <parameter type="const QRegion &amp;" name="rgn" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11089" column="4">
                    <para>This is an overloaded function.</para>
                    <para>This version repaints a region <argument>rgn</argument> inside the widget.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="repaint" fullname="QWidget::repaint" href="qwidget.html#repaint-1" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="467" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" type="void" signature="void repaint(int x, int y, int w, int h)">
                <parameter type="int" name="x" default=""/>
                <parameter type="int" name="y" default=""/>
                <parameter type="int" name="w" default=""/>
                <parameter type="int" name="h" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10990" column="4">
                    <para>This is an overloaded function.</para>
                    <para>This version repaints a rectangle (<argument>x</argument>, <argument>y</argument>, <argument>w</argument>, <argument>h</argument>) inside the widget.</para>
                    <para>If <argument>w</argument> is negative, it is replaced with <teletype type="highlighted">width() - x</teletype>, and if <argument>h</argument> is negative, it is replaced width <teletype type="highlighted">height() - y</teletype>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="repaint" fullname="QWidget::repaint" href="qwidget.html#repaint-2" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="468" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="2" type="void" signature="void repaint(const QRect &amp;rect)">
                <parameter type="const QRect &amp;" name="rect" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11011" column="4">
                    <para>This is an overloaded function.</para>
                    <para>This version repaints a rectangle <argument>rect</argument> inside the widget.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="repaint" fullname="QWidget::repaint" href="qwidget.html#repaint-3" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="469" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="3" type="void" signature="void repaint(const QRegion &amp;rgn)">
                <parameter type="const QRegion &amp;" name="rgn" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11021" column="4">
                    <para>This is an overloaded function.</para>
                    <para>This version repaints a region <argument>rgn</argument> inside the widget.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setVisible" fullname="QWidget::setVisible" href="qwidget.html#visible-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="474" virtual="virtual" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="visible" type="void" signature="void setVisible(bool visible)">
                <parameter type="bool" name="visible" default=""/>
                <description path="" line="0" column="0">
                    <see-also>isVisible()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setHidden" fullname="QWidget::setHidden" href="qwidget.html#setHidden" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="475" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setHidden(bool hidden)">
                <parameter type="bool" name="hidden" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="8385" column="4">
                    <para>Convenience function, equivalent to <link raw="setVisible" href="qwidget.html#visible-prop" type="function">setVisible</link>(!<argument>hidden</argument>).</para>
                    <see-also>
                        <link raw="isHidden()" href="qwidget.html#isHidden" type="function">isHidden()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="show" fullname="QWidget::show" href="qwidget.html#show" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="476" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void show()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="7870" column="4">
                    <para>Shows the widget and its child widgets.</para>
                    <para>This is equivalent to calling <link raw="showFullScreen()" href="qwidget.html#showFullScreen" type="function">showFullScreen()</link>, <link raw="showMaximized()" href="qwidget.html#showMaximized" type="function">showMaximized()</link>, or <link raw="setVisible" href="qwidget.html#visible-prop" type="function">setVisible</link>(true), depending on the platform's default behavior for the window flags.</para>
                    <see-also>
                        <link raw="raise()" href="qwidget.html#raise" type="function">raise()</link>
                        <link raw="showEvent()" href="qwidget.html#showEvent" type="function">showEvent()</link>
                        <link raw="hide()" href="qwidget.html#hide" type="function">hide()</link>
                        <link raw="setVisible()" href="qwidget.html#visible-prop" type="function">setVisible()</link>
                        <link raw="showMinimized()" href="qwidget.html#showMinimized" type="function">showMinimized()</link>
                        <link raw="showMaximized()" href="qwidget.html#showMaximized" type="function">showMaximized()</link>
                        <link raw="showNormal()" href="qwidget.html#showNormal" type="function">showNormal()</link>
                        <link raw="isVisible()" href="qwidget.html#visible-prop" type="function">isVisible()</link>
                        <link raw="windowFlags()" href="qwidget.html#windowFlags-prop" type="function">windowFlags()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="hide" fullname="QWidget::hide" href="qwidget.html#hide" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="477" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void hide()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="8129" column="4">
                    <para>Hides the widget. This function is equivalent to <link raw="setVisible" href="qwidget.html#visible-prop" type="function">setVisible</link>(false).</para>
                    <para>
                        <bold>Note:</bold> If you are working with <link raw="QDialog" href="qdialog.html" type="class">QDialog</link> or its subclasses and you invoke the <link raw="show()" href="qwidget.html#show" type="function">show()</link> function after this function, the dialog will be displayed in its original position.</para>
                    <see-also>
                        <link raw="hideEvent()" href="qwidget.html#hideEvent" type="function">hideEvent()</link>
                        <link raw="isHidden()" href="qwidget.html#isHidden" type="function">isHidden()</link>
                        <link raw="show()" href="qwidget.html#show" type="function">show()</link>
                        <link raw="setVisible()" href="qwidget.html#visible-prop" type="function">setVisible()</link>
                        <link raw="isVisible()" href="qwidget.html#visible-prop" type="function">isVisible()</link>
                        <link raw="close()" href="qwidget.html#close" type="function">close()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="showMinimized" fullname="QWidget::showMinimized" href="qwidget.html#showMinimized" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="479" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void showMinimized()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="2954" column="4">
                    <para>Shows the widget minimized, as an icon.</para>
                    <para>Calling this function only affects <link raw="isWindow()" href="qwidget.html#isWindow" type="function">windows</link>.</para>
                    <see-also>
                        <link raw="showNormal()" href="qwidget.html#showNormal" type="function">showNormal()</link>
                        <link raw="showMaximized()" href="qwidget.html#showMaximized" type="function">showMaximized()</link>
                        <link raw="show()" href="qwidget.html#show" type="function">show()</link>
                        <link raw="hide()" href="qwidget.html#hide" type="function">hide()</link>
                        <link raw="isVisible()" href="qwidget.html#visible-prop" type="function">isVisible()</link>
                        <link raw="isMinimized()" href="qwidget.html#minimized-prop" type="function">isMinimized()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="showMaximized" fullname="QWidget::showMaximized" href="qwidget.html#showMaximized" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="480" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void showMaximized()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3149" column="4">
                    <para>Shows the widget maximized.</para>
                    <para>Calling this function only affects <link raw="isWindow()" href="qwidget.html#isWindow" type="function">windows</link>.</para>
                    <para>On X11, this function may not work properly with certain window managers. See the <link raw="Window Geometry" href="application-windows.html#window-geometry" type="page" page="Window and Dialog Widgets">Window Geometry</link> documentation for an explanation.</para>
                    <see-also>
                        <link raw="setWindowState()" href="qwidget.html#setWindowState" type="function">setWindowState()</link>
                        <link raw="showNormal()" href="qwidget.html#showNormal" type="function">showNormal()</link>
                        <link raw="showMinimized()" href="qwidget.html#showMinimized" type="function">showMinimized()</link>
                        <link raw="show()" href="qwidget.html#show" type="function">show()</link>
                        <link raw="hide()" href="qwidget.html#hide" type="function">hide()</link>
                        <link raw="isVisible()" href="qwidget.html#visible-prop" type="function">isVisible()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="showFullScreen" fullname="QWidget::showFullScreen" href="qwidget.html#showFullScreen" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="481" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void showFullScreen()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3098" column="4">
                    <para>Shows the widget in full-screen mode.</para>
                    <para>Calling this function only affects <link raw="isWindow()" href="qwidget.html#isWindow" type="function">windows</link>.</para>
                    <para>To return from full-screen mode, call <link raw="showNormal()" href="qwidget.html#showNormal" type="function">showNormal()</link>.</para>
                    <para>Full-screen mode works fine under Windows, but has certain problems under X. These problems are due to limitations of the ICCCM protocol that specifies the communication between X11 clients and the window manager. ICCCM simply does not understand the concept of non-decorated full-screen windows. Therefore, the best we can do is to request a borderless window and place and resize it to fill the entire screen. Depending on the window manager, this may or may not work. The borderless window is requested using MOTIF hints, which are at least partially supported by virtually all modern window managers.</para>
                    <para>An alternative would be to bypass the window manager entirely and create a window with the <link raw="Qt::X11BypassWindowManagerHint" href="qt.html#WindowType-enum" type="enum" enum="Qt::WindowType">Qt::X11BypassWindowManagerHint</link> flag. This has other severe problems though, like totally broken keyboard focus and very strange effects on desktop changes or when the user raises other windows.</para>
                    <para>X11 window managers that follow modern post-ICCCM specifications support full-screen mode properly.</para>
                    <see-also>
                        <link raw="showNormal()" href="qwidget.html#showNormal" type="function">showNormal()</link>
                        <link raw="showMaximized()" href="qwidget.html#showMaximized" type="function">showMaximized()</link>
                        <link raw="show()" href="qwidget.html#show" type="function">show()</link>
                        <link raw="hide()" href="qwidget.html#hide" type="function">hide()</link>
                        <link raw="isVisible()" href="qwidget.html#visible-prop" type="function">isVisible()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="showNormal" fullname="QWidget::showNormal" href="qwidget.html#showNormal" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="482" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void showNormal()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3180" column="4">
                    <para>Restores the widget after it has been maximized or minimized.</para>
                    <para>Calling this function only affects <link raw="isWindow()" href="qwidget.html#isWindow" type="function">windows</link>.</para>
                    <see-also>
                        <link raw="setWindowState()" href="qwidget.html#setWindowState" type="function">setWindowState()</link>
                        <link raw="showMinimized()" href="qwidget.html#showMinimized" type="function">showMinimized()</link>
                        <link raw="showMaximized()" href="qwidget.html#showMaximized" type="function">showMaximized()</link>
                        <link raw="show()" href="qwidget.html#show" type="function">show()</link>
                        <link raw="hide()" href="qwidget.html#hide" type="function">hide()</link>
                        <link raw="isVisible()" href="qwidget.html#visible-prop" type="function">isVisible()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="close" fullname="QWidget::close" href="qwidget.html#close" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="484" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool close()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="8536" column="4">
                    <para>Closes this widget. Returns <teletype type="highlighted">true</teletype> if the widget was closed; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>First it sends the widget a <link raw="QCloseEvent" href="qcloseevent.html" type="class">QCloseEvent</link>. The widget is <link raw="hide()" href="qwidget.html#hide" type="function">hidden</link> if it <link raw="QEvent::accept()" href="qevent.html#accept" type="function">accepts</link> the close event. If it <link raw="QEvent::ignore()" href="qevent.html#ignore" type="function">ignores</link> the event, nothing happens. The default implementation of <link raw="QWidget::closeEvent()" href="qwidget.html#closeEvent" type="function">QWidget::closeEvent()</link> accepts the close event.</para>
                    <para>If the widget has the <link raw="Qt::WA_DeleteOnClose" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_DeleteOnClose</link> flag, the widget is also deleted. A close events is delivered to the widget no matter if the widget is visible or not.</para>
                    <para>The <link raw="QApplication::lastWindowClosed()" href="qguiapplication.html#lastWindowClosed" type="function">QApplication::lastWindowClosed()</link> signal is emitted when the last visible primary window (i.e. window with no parent) with the <link raw="Qt::WA_QuitOnClose" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_QuitOnClose</link> attribute set is closed. By default this attribute is set for all widgets except transient windows such as splash screens, tool windows, and popup menus.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="raise" fullname="QWidget::raise" href="qwidget.html#raise" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="485" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void raise()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11837" column="4">
                    <para>Raises this widget to the top of the parent widget's stack.</para>
                    <para>After this call the widget will be visually in front of any overlapping sibling widgets.</para>
                    <para>
                        <bold>Note:</bold> When using <link raw="activateWindow()" href="qwidget.html#activateWindow" type="function">activateWindow()</link>, you can call this function to ensure that the window is stacked on top.</para>
                    <see-also>
                        <link raw="lower()" href="qwidget.html#lower" type="function">lower()</link>
                        <link raw="stackUnder()" href="qwidget.html#stackUnder" type="function">stackUnder()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="lower" fullname="QWidget::lower" href="qwidget.html#lower" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="486" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void lower()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11894" column="4">
                    <para>Lowers the widget to the bottom of the parent widget's stack.</para>
                    <para>After this call the widget will be visually behind (and therefore obscured by) any overlapping sibling widgets.</para>
                    <see-also>
                        <link raw="raise()" href="qwidget.html#raise" type="function">raise()</link>
                        <link raw="stackUnder()" href="qwidget.html#stackUnder" type="function">stackUnder()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="stackUnder" fullname="QWidget::stackUnder" href="qwidget.html#stackUnder" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="489" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void stackUnder(QWidget *w)">
                <parameter type="QWidget *" name="w" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11943" column="4">
                    <para>Places the widget under <argument>w</argument> in the parent widget's stack.</para>
                    <para>To make this work, the widget itself and <argument>w</argument> must be siblings.</para>
                    <see-also>
                        <link raw="raise()" href="qwidget.html#raise" type="function">raise()</link>
                        <link raw="lower()" href="qwidget.html#lower" type="function">lower()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="move" fullname="QWidget::move" href="qwidget.html#pos-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="490" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="pos" type="void" signature="void move(int x, int y)">
                <parameter type="int" name="x" default=""/>
                <parameter type="int" name="y" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="move" fullname="QWidget::move" href="qwidget.html#pos-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="491" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="pos" type="void" signature="void move(const QPoint &amp;)">
                <parameter type="const QPoint &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="resize" fullname="QWidget::resize" href="qwidget.html#size-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="492" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="size" type="void" signature="void resize(int w, int h)">
                <parameter type="int" name="w" default=""/>
                <parameter type="int" name="h" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="resize" fullname="QWidget::resize" href="qwidget.html#size-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="493" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="size" type="void" signature="void resize(const QSize &amp;)">
                <parameter type="const QSize &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="setGeometry" fullname="QWidget::setGeometry" href="qwidget.html#geometry-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="494" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="geometry" type="void" signature="void setGeometry(int x, int y, int w, int h)">
                <parameter type="int" name="x" default=""/>
                <parameter type="int" name="y" default=""/>
                <parameter type="int" name="w" default=""/>
                <parameter type="int" name="h" default=""/>
                <description path="" line="0" column="0">
                    <see-also>geometry()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setGeometry" fullname="QWidget::setGeometry" href="qwidget.html#geometry-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="495" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="geometry" type="void" signature="void setGeometry(const QRect &amp;)">
                <parameter type="const QRect &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="saveGeometry" fullname="QWidget::saveGeometry" href="qwidget.html#saveGeometry" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="496" since="4.2" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QByteArray" signature="QByteArray saveGeometry() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="7340" column="4">
                    <para>Saves the current geometry and state for top-level widgets.</para>
                    <para>To save the geometry when the window closes, you can implement a close event like this:</para>
                    <snippet location="code/src_gui_kernel_qwidget.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/widgets/doc/snippets/code/src_gui_kernel_qwidget.cpp" identifier="11"/>
                    <para>See the <link raw="Window Geometry" href="application-windows.html#window-geometry" type="page" page="Window and Dialog Widgets">Window Geometry</link> documentation for an overview of geometry issues with windows.</para>
                    <para>Use <link raw="QMainWindow::saveState()" href="qmainwindow.html#saveState" type="function">QMainWindow::saveState()</link> to save the geometry and the state of toolbars and dock widgets.</para>
                    <see-also>
                        <link raw="restoreGeometry()" href="qwidget.html#restoreGeometry" type="function">restoreGeometry()</link>
                        <link raw="QMainWindow::saveState()" href="qmainwindow.html#saveState" type="function">QMainWindow::saveState()</link>
                        <link raw="QMainWindow::restoreState()" href="qmainwindow.html#restoreState" type="function">QMainWindow::restoreState()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="restoreGeometry" fullname="QWidget::restoreGeometry" href="qwidget.html#restoreGeometry" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="497" since="4.2" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool restoreGeometry(const QByteArray &amp;geometry)">
                <parameter type="const QByteArray &amp;" name="geometry" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="7398" column="4">
                    <para>Restores the geometry and state of top-level widgets stored in the byte array <argument>geometry</argument>. Returns <teletype type="highlighted">true</teletype> on success; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>If the restored geometry is off-screen, it will be modified to be inside the available screen geometry.</para>
                    <para>To restore geometry saved using <link raw="QSettings" href="qsettings.html" type="class">QSettings</link>, you can use code like this:</para>
                    <snippet location="code/src_gui_kernel_qwidget.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/widgets/doc/snippets/code/src_gui_kernel_qwidget.cpp" identifier="12"/>
                    <para>See the <link raw="Window Geometry" href="application-windows.html#window-geometry" type="page" page="Window and Dialog Widgets">Window Geometry</link> documentation for an overview of geometry issues with windows.</para>
                    <para>Use <link raw="QMainWindow::restoreState()" href="qmainwindow.html#restoreState" type="function">QMainWindow::restoreState()</link> to restore the geometry and the state of toolbars and dock widgets.</para>
                    <see-also>
                        <link raw="saveGeometry()" href="qwidget.html#saveGeometry" type="function">saveGeometry()</link>
                        <link raw="QSettings" href="qsettings.html" type="class">QSettings</link>
                        <link raw="QMainWindow::saveState()" href="qmainwindow.html#saveState" type="function">QMainWindow::saveState()</link>
                        <link raw="QMainWindow::restoreState()" href="qmainwindow.html#restoreState" type="function">QMainWindow::restoreState()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="adjustSize" fullname="QWidget::adjustSize" href="qwidget.html#adjustSize" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="498" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void adjustSize()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="8703" column="4">
                    <para>Adjusts the size of the widget to fit its contents.</para>
                    <para>This function uses <link raw="sizeHint()" href="qwidget.html#sizeHint-prop" type="function">sizeHint()</link> if it is valid, i.e., the size hint's width and height are &gt;= 0. Otherwise, it sets the size to the children rectangle that covers all child widgets (the union of all child widget rectangles).</para>
                    <para>For windows, the screen size is also taken into account. If the <link raw="sizeHint()" href="qwidget.html#sizeHint-prop" type="function">sizeHint()</link> is less than (200, 100) and the size policy is <link raw="QSizePolicy::Expanding" href="qsizepolicy.html#Policy-enum" type="enum" enum="QSizePolicy::Policy">expanding</link>, the window will be at least (200, 100). The maximum size of a window is 2/3 of the screen's width and height.</para>
                    <see-also>
                        <link raw="sizeHint()" href="qwidget.html#sizeHint-prop" type="function">sizeHint()</link>
                        <link raw="childrenRect()" href="qwidget.html#childrenRect-prop" type="function">childrenRect()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isVisible" fullname="QWidget::isVisible" href="qwidget.html#visible-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="499" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="visible" type="bool" signature="bool isVisible() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="isVisibleTo" fullname="QWidget::isVisibleTo" href="qwidget.html#isVisibleTo" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="500" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isVisibleTo(const QWidget *ancestor) const">
                <parameter type="const QWidget *" name="ancestor" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="8605" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this widget would become visible if <argument>ancestor</argument> is shown; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>The true case occurs if neither the widget itself nor any parent up to but excluding <argument>ancestor</argument> has been explicitly hidden.</para>
                    <para>This function will still return true if the widget is obscured by other windows on the screen, but could be physically visible if it or they were to be moved.</para>
                    <para>(0) is identical to <link raw="isVisible()" href="qwidget.html#visible-prop" type="function">isVisible()</link>.</para>
                    <see-also>
                        <link raw="show()" href="qwidget.html#show" type="function">show()</link>
                        <link raw="hide()" href="qwidget.html#hide" type="function">hide()</link>
                        <link raw="isVisible()" href="qwidget.html#visible-prop" type="function">isVisible()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isHidden" fullname="QWidget::isHidden" href="qwidget.html#isHidden" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="501" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isHidden() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="isMinimized" fullname="QWidget::isMinimized" href="qwidget.html#minimized-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="503" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="minimized" type="bool" signature="bool isMinimized() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="isMaximized" fullname="QWidget::isMaximized" href="qwidget.html#maximized-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="504" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="maximized" type="bool" signature="bool isMaximized() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="isFullScreen" fullname="QWidget::isFullScreen" href="qwidget.html#fullScreen-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="505" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="fullScreen" type="bool" signature="bool isFullScreen() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="windowState" fullname="QWidget::windowState" href="qwidget.html#windowState" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="507" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="Qt::WindowStates" signature="Qt::WindowStates windowState() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="2996" column="4">
                    <para>Returns the current window state. The window state is a OR'ed combination of <link raw="Qt::WindowState" href="qt.html#WindowState-enum" type="enum" enum="Qt::WindowState">Qt::WindowState</link>: <link raw="Qt::WindowMinimized" href="qt.html#WindowState-enum" type="enum" enum="Qt::WindowState">Qt::WindowMinimized</link>, <link raw="Qt::WindowMaximized" href="qt.html#WindowState-enum" type="enum" enum="Qt::WindowState">Qt::WindowMaximized</link>, <link raw="Qt::WindowFullScreen" href="qt.html#WindowState-enum" type="enum" enum="Qt::WindowState">Qt::WindowFullScreen</link>, and <link raw="Qt::WindowActive" href="qt.html#WindowState-enum" type="enum" enum="Qt::WindowState">Qt::WindowActive</link>.</para>
                    <see-also>
                        <link raw="Qt::WindowState" href="qt.html#WindowState-enum" type="enum" enum="Qt::WindowState">Qt::WindowState</link>
                        <link raw="setWindowState()" href="qwidget.html#setWindowState" type="function">setWindowState()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setWindowState" fullname="QWidget::setWindowState" href="qwidget.html#setWindowState" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="508" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setWindowState(Qt::WindowStates state)">
                <parameter type="Qt::WindowStates" name="state" default=""/>
                <description path="" line="0" column="0">
                    <see-also>
                        <link raw="windowState()" href="qwidget.html#windowState" type="function">windowState()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="overrideWindowState" fullname="QWidget::overrideWindowState" href="qwidget.html#overrideWindowState" status="internal" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="509" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void overrideWindowState(Qt::WindowStates newstate)">
                <parameter type="Qt::WindowStates" name="newstate" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3008" column="4">
                    <para>The function sets the window state on child widgets similar to <link raw="setWindowState()" href="qwidget.html#setWindowState" type="function">setWindowState()</link>. The difference is that the window state changed event has the isOverride() flag set. It exists mainly to keep QWorkspace working.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="sizeHint" fullname="QWidget::sizeHint" href="qwidget.html#sizeHint-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="511" virtual="virtual" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="sizeHint" type="QSize" signature="QSize sizeHint() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="minimumSizeHint" fullname="QWidget::minimumSizeHint" href="qwidget.html#minimumSizeHint-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="512" virtual="virtual" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="minimumSizeHint" type="QSize" signature="QSize minimumSizeHint() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="sizePolicy" fullname="QWidget::sizePolicy" href="qwidget.html#sizePolicy-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="514" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="sizePolicy" type="QSizePolicy" signature="QSizePolicy sizePolicy() const">
                <description path="" line="0" column="0">
                    <see-also>setSizePolicy()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setSizePolicy" fullname="QWidget::setSizePolicy" href="qwidget.html#sizePolicy-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="515" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="sizePolicy" type="void" signature="void setSizePolicy(QSizePolicy )">
                <parameter type="QSizePolicy" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>sizePolicy()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setSizePolicy" fullname="QWidget::setSizePolicy" href="qwidget.html#sizePolicy-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="516" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="sizePolicy" type="void" signature="void setSizePolicy(QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical)">
                <parameter type="QSizePolicy::Policy" name="horizontal" default=""/>
                <parameter type="QSizePolicy::Policy" name="vertical" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="heightForWidth" fullname="QWidget::heightForWidth" href="qwidget.html#heightForWidth" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="517" virtual="virtual" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="int" signature="int heightForWidth(int w) const">
                <parameter type="int" name="w" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10359" column="4">
                    <para>Returns the preferred height for this widget, given the width <argument>w</argument>.</para>
                    <para>If this widget has a layout, the default implementation returns the layout's preferred height. if there is no layout, the default implementation returns -1 indicating that the preferred height does not depend on the width.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="hasHeightForWidth" fullname="QWidget::hasHeightForWidth" href="qwidget.html#hasHeightForWidth" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="518" since="5.0" virtual="virtual" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool hasHeightForWidth() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10376" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if the widget's preferred height depends on its width; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="visibleRegion" fullname="QWidget::visibleRegion" href="qwidget.html#visibleRegion" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="520" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QRegion" signature="QRegion visibleRegion() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="8635" column="4">
                    <para>Returns the unobscured region where paint events can occur.</para>
                    <para>For visible widgets, this is an approximation of the area not covered by other widgets; otherwise, this is an empty region.</para>
                    <para>The <link raw="repaint()" href="qwidget.html#repaint" type="function">repaint()</link> function calls this function if necessary, so in general you do not need to call it.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setContentsMargins" fullname="QWidget::setContentsMargins" href="qwidget.html#setContentsMargins" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="522" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setContentsMargins(int left, int top, int right, int bottom)">
                <parameter type="int" name="left" default=""/>
                <parameter type="int" name="top" default=""/>
                <parameter type="int" name="right" default=""/>
                <parameter type="int" name="bottom" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="7563" column="4">
                    <para>Sets the margins around the contents of the widget to have the sizes <argument>left</argument>, <argument>top</argument>, <argument>right</argument>, and <argument>bottom</argument>. The margins are used by the layout system, and may be used by subclasses to specify the area to draw in (e.g. excluding the frame).</para>
                    <para>Changing the margins will trigger a <link raw="resizeEvent()" href="qwidget.html#resizeEvent" type="function">resizeEvent()</link>.</para>
                    <see-also>
                        <link raw="contentsMargins()" href="qwidget.html#contentsMargins" type="function">contentsMargins()</link>
                        <link raw="contentsRect()" href="qwidget.html#contentsRect" type="function">contentsRect()</link>
                        <link raw="getContentsMargins()" href="qwidget.html#getContentsMargins" type="function">getContentsMargins()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setContentsMargins" fullname="QWidget::setContentsMargins" href="qwidget.html#setContentsMargins-1" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="523" since="4.6" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" type="void" brief="Sets the margins around the widget's contents" signature="void setContentsMargins(const QMargins &amp;margins)">
                <parameter type="const QMargins &amp;" name="margins" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="7587" column="4">
                    <para>This is an overloaded function.</para>
                    <brief>The <link raw="setContentsMargins" href="qwidget.html#setContentsMargins" type="function">setContentsMargins</link> function sets the margins around the widget's contents.</brief>
                    <para>Sets the margins around the contents of the widget to have the sizes determined by <argument>margins</argument>. The margins are used by the layout system, and may be used by subclasses to specify the area to draw in (e.g. excluding the frame).</para>
                    <para>Changing the margins will trigger a <link raw="resizeEvent()" href="qwidget.html#resizeEvent" type="function">resizeEvent()</link>.</para>
                    <see-also>
                        <link raw="contentsRect()" href="qwidget.html#contentsRect" type="function">contentsRect()</link>
                        <link raw="getContentsMargins()" href="qwidget.html#getContentsMargins" type="function">getContentsMargins()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="getContentsMargins" fullname="QWidget::getContentsMargins" href="qwidget.html#getContentsMargins" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="524" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void getContentsMargins(int *left, int *top, int *right, int *bottom) const">
                <parameter type="int *" name="left" default=""/>
                <parameter type="int *" name="top" default=""/>
                <parameter type="int *" name="right" default=""/>
                <parameter type="int *" name="bottom" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="7630" column="4">
                    <para>Returns the widget's contents margins for <argument>left</argument>, <argument>top</argument>, <argument>right</argument>, and <argument>bottom</argument>.</para>
                    <see-also>
                        <link raw="setContentsMargins()" href="qwidget.html#setContentsMargins" type="function">setContentsMargins()</link>
                        <link raw="contentsRect()" href="qwidget.html#contentsRect" type="function">contentsRect()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="contentsMargins" fullname="QWidget::contentsMargins" href="qwidget.html#contentsMargins" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="525" since="4.6" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QMargins" brief="Returns the widget's contents margins" signature="QMargins contentsMargins() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="7656" column="4">
                    <brief>The  function returns the widget's contents margins.</brief>
                    <see-also>
                        <link raw="getContentsMargins()" href="qwidget.html#getContentsMargins" type="function">getContentsMargins()</link>
                        <link raw="setContentsMargins()" href="qwidget.html#setContentsMargins" type="function">setContentsMargins()</link>
                        <link raw="contentsRect()" href="qwidget.html#contentsRect" type="function">contentsRect()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="contentsRect" fullname="QWidget::contentsRect" href="qwidget.html#contentsRect" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="527" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QRect" signature="QRect contentsRect() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="7671" column="4">
                    <para>Returns the area inside the widget's margins.</para>
                    <see-also>
                        <link raw="setContentsMargins()" href="qwidget.html#setContentsMargins" type="function">setContentsMargins()</link>
                        <link raw="getContentsMargins()" href="qwidget.html#getContentsMargins" type="function">getContentsMargins()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="layout" fullname="QWidget::layout" href="qwidget.html#layout" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="530" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QLayout *" signature="QLayout * layout() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10192" column="4">
                    <para>Returns the layout manager that is installed on this widget, or 0 if no layout manager is installed.</para>
                    <para>The layout manager sets the geometry of the widget's children that have been added to the layout.</para>
                    <see-also>
                        <link raw="setLayout()" href="qwidget.html#setLayout" type="function">setLayout()</link>
                        <link raw="sizePolicy()" href="qwidget.html#sizePolicy-prop" type="function">sizePolicy()</link>
                        <link raw="Layout Management" href="layout.html" type="page" page="Layout Management">Layout Management</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setLayout" fullname="QWidget::setLayout" href="qwidget.html#setLayout" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="531" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setLayout(QLayout *)">
                <parameter type="QLayout *" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>
                        <link raw="layout()" href="qwidget.html#layout" type="function">layout()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="updateGeometry" fullname="QWidget::updateGeometry" href="qwidget.html#updateGeometry" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="532" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void updateGeometry()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10462" column="4">
                    <para>Notifies the layout system that this widget has changed and may need to change geometry.</para>
                    <para>Call this function if the <link raw="sizeHint()" href="qwidget.html#sizeHint-prop" type="function">sizeHint()</link> or <link raw="sizePolicy()" href="qwidget.html#sizePolicy-prop" type="function">sizePolicy()</link> have changed.</para>
                    <para>For explicitly hidden widgets,  is a no-op. The layout system will be notified as soon as the widget is shown.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setParent" fullname="QWidget::setParent" href="qwidget.html#setParent" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="534" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setParent(QWidget *parent)">
                <parameter type="QWidget *" name="parent" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10570" column="4">
                    <para>Sets the parent of the widget to <argument>parent</argument>, and resets the window flags. The widget is moved to position (0, 0) in its new parent.</para>
                    <para>If the new parent widget is in a different window, the reparented widget and its children are appended to the end of the <link raw="setFocusPolicy()" href="qwidget.html#focusPolicy-prop" type="function">tab chain</link> of the new parent widget, in the same internal order as before. If one of the moved widgets had keyboard focus,  calls <link raw="clearFocus()" href="qwidget.html#clearFocus" type="function">clearFocus()</link> for that widget.</para>
                    <para>If the new parent widget is in the same window as the old parent, setting the parent doesn't change the tab order or keyboard focus.</para>
                    <para>If the &quot;new&quot; parent widget is the old parent widget, this function does nothing.</para>
                    <para>
                        <bold>Note:</bold> The widget becomes invisible as part of changing its parent, even if it was previously visible. You must call <link raw="show()" href="qwidget.html#show" type="function">show()</link> to make the widget visible again.</para>
                    <para>
                        <bold>Warning:</bold> It is very unlikely that you will ever need this function. If you have a widget that changes its content dynamically, it is far easier to use <link raw="QStackedWidget" href="qstackedwidget.html" type="class">QStackedWidget</link>.</para>
                    <see-also>
                        <link raw="setWindowFlags()" href="qwidget.html#windowFlags-prop" type="function">setWindowFlags()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setParent" fullname="QWidget::setParent" href="qwidget.html#setParent-1" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="535" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" type="void" signature="void setParent(QWidget *parent, Qt::WindowFlags f)">
                <parameter type="QWidget *" name="parent" default=""/>
                <parameter type="Qt::WindowFlags" name="f" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10622" column="4">
                    <para>This is an overloaded function.</para>
                    <para>This function also takes widget flags, <argument>f</argument> as an argument.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="scroll" fullname="QWidget::scroll" href="qwidget.html#scroll" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="537" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void scroll(int dx, int dy)">
                <parameter type="int" name="dx" default=""/>
                <parameter type="int" name="dy" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10880" column="4">
                    <para>Scrolls the widget including its children <argument>dx</argument> pixels to the right and <argument>dy</argument> downward. Both <argument>dx</argument> and <argument>dy</argument> may be negative.</para>
                    <para>After scrolling, the widgets will receive paint events for the areas that need to be repainted. For widgets that Qt knows to be opaque, this is only the newly exposed parts. For example, if an opaque widget is scrolled 8 pixels to the left, only an 8-pixel wide stripe at the right edge needs updating.</para>
                    <para>Since widgets propagate the contents of their parents by default, you need to set the <link raw="autoFillBackground" href="qwidget.html#autoFillBackground-prop" type="property" getter="QWidget::autoFillBackground()">autoFillBackground</link> property, or use <link raw="setAttribute()" href="qwidget.html#setAttribute" type="function">setAttribute()</link> to set the <link raw="Qt::WA_OpaquePaintEvent" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_OpaquePaintEvent</link> attribute, to make a widget opaque.</para>
                    <para>For widgets that use contents propagation, a scroll will cause an update of the entire scroll area.</para>
                    <see-also>
                        <link raw="Transparency and Double Buffering" href="qwidget.html#transparency-and-double-buffering" type="class">Transparency and Double Buffering</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="scroll" fullname="QWidget::scroll" href="qwidget.html#scroll-1" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="538" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" type="void" signature="void scroll(int dx, int dy, const QRect &amp;r)">
                <parameter type="int" name="dx" default=""/>
                <parameter type="int" name="dy" default=""/>
                <parameter type="const QRect &amp;" name="r" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10930" column="4">
                    <para>This is an overloaded function.</para>
                    <para>This version only scrolls <argument>r</argument> and does not move the children of the widget.</para>
                    <para>If <argument>r</argument> is empty or invalid, the result is undefined.</para>
                    <see-also>
                        <link raw="QScrollArea" href="qscrollarea.html" type="class">QScrollArea</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="focusWidget" fullname="QWidget::focusWidget" href="qwidget.html#focusWidget" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="542" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QWidget *" signature="QWidget * focusWidget() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6816" column="4">
                    <para>Returns the last child of this widget that <link raw="setFocus" href="qwidget.html#setFocus" type="function">setFocus</link> had been called on. For top level widgets this is the widget that will get focus in case this window gets activated</para>
                    <para>This is not the same as <link raw="QApplication::focusWidget()" href="qapplication.html#focusWidget" type="function">QApplication::focusWidget()</link>, which returns the focus widget in the currently active window.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="nextInFocusChain" fullname="QWidget::nextInFocusChain" href="qwidget.html#nextInFocusChain" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="543" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QWidget *" signature="QWidget * nextInFocusChain() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6830" column="4">
                    <para>Returns the next widget in this widget's focus chain.</para>
                    <see-also>
                        <link raw="previousInFocusChain()" href="qwidget.html#previousInFocusChain" type="function">previousInFocusChain()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="previousInFocusChain" fullname="QWidget::previousInFocusChain" href="qwidget.html#previousInFocusChain" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="544" since="4.6" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QWidget *" brief="Returns the previous widget in this widget's focus chain" signature="QWidget * previousInFocusChain() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6840" column="4">
                    <brief>The  function returns the previous widget in this widget's focus chain.</brief>
                    <see-also>
                        <link raw="nextInFocusChain()" href="qwidget.html#nextInFocusChain" type="function">nextInFocusChain()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="acceptDrops" fullname="QWidget::acceptDrops" href="qwidget.html#acceptDrops-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="547" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="acceptDrops" type="bool" signature="bool acceptDrops() const">
                <description path="" line="0" column="0">
                    <see-also>setAcceptDrops()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setAcceptDrops" fullname="QWidget::setAcceptDrops" href="qwidget.html#acceptDrops-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="548" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="acceptDrops" type="void" signature="void setAcceptDrops(bool on)">
                <parameter type="bool" name="on" default=""/>
                <description path="" line="0" column="0">
                    <see-also>acceptDrops()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="addAction" fullname="QWidget::addAction" href="qwidget.html#addAction" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="552" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void addAction(QAction *action)">
                <parameter type="QAction *" name="action" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3241" column="4">
                    <para>Appends the action <argument>action</argument> to this widget's list of actions.</para>
                    <para>All QWidgets have a list of <link raw="QAction" href="qaction.html" type="class">QAction</link>s, however they can be represented graphically in many different ways. The default use of the <link raw="QAction" href="qaction.html" type="class">QAction</link> list (as returned by <link raw="actions()" href="qwidget.html#actions" type="function">actions()</link>) is to create a context <link raw="QMenu" href="qmenu.html" type="class">QMenu</link>.</para>
                    <para>A <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> should only have one of each action and adding an action it already has will not cause the same action to be in the widget twice.</para>
                    <para>The ownership of <argument>action</argument> is not transferred to this <link raw="QWidget" href="qwidget.html" type="class">QWidget</link>.</para>
                    <see-also>
                        <link raw="removeAction()" href="qwidget.html#removeAction" type="function">removeAction()</link>
                        <link raw="insertAction()" href="qwidget.html#insertAction" type="function">insertAction()</link>
                        <link raw="actions()" href="qwidget.html#actions" type="function">actions()</link>
                        <link raw="QMenu" href="qmenu.html" type="class">QMenu</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="addActions" fullname="QWidget::addActions" href="qwidget.html#addActions" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="557" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void addActions(QList&lt;QAction *&gt; actions)">
                <parameter type="QList&lt;QAction *&gt;" name="actions" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3261" column="4">
                    <para>Appends the actions <argument>actions</argument> to this widget's list of actions.</para>
                    <see-also>
                        <link raw="removeAction()" href="qwidget.html#removeAction" type="function">removeAction()</link>
                        <link raw="QMenu" href="qmenu.html" type="class">QMenu</link>
                        <link raw="addAction()" href="qwidget.html#addAction" type="function">addAction()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="insertActions" fullname="QWidget::insertActions" href="qwidget.html#insertActions" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="558" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void insertActions(QAction *before, QList&lt;QAction *&gt; actions)">
                <parameter type="QAction *" name="before" default=""/>
                <parameter type="QList&lt;QAction *&gt;" name="actions" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3310" column="4">
                    <para>Inserts the actions <argument>actions</argument> to this widget's list of actions, before the action <argument>before</argument>. It appends the action if <argument>before</argument> is 0 or <argument>before</argument> is not a valid action for this widget.</para>
                    <para>A <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> can have at most one of each action.</para>
                    <see-also>
                        <link raw="removeAction()" href="qwidget.html#removeAction" type="function">removeAction()</link>
                        <link raw="QMenu" href="qmenu.html" type="class">QMenu</link>
                        <link raw="insertAction()" href="qwidget.html#insertAction" type="function">insertAction()</link>
                        <link raw="contextMenuPolicy" href="qwidget.html#contextMenuPolicy-prop" type="property" getter="QWidget::contextMenuPolicy()">contextMenuPolicy</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="insertAction" fullname="QWidget::insertAction" href="qwidget.html#insertAction" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="560" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void insertAction(QAction *before, QAction *action)">
                <parameter type="QAction *" name="before" default=""/>
                <parameter type="QAction *" name="action" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3276" column="4">
                    <para>Inserts the action <argument>action</argument> to this widget's list of actions, before the action <argument>before</argument>. It appends the action if <argument>before</argument> is 0 or <argument>before</argument> is not a valid action for this widget.</para>
                    <para>A <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> should only have one of each action.</para>
                    <see-also>
                        <link raw="removeAction()" href="qwidget.html#removeAction" type="function">removeAction()</link>
                        <link raw="addAction()" href="qwidget.html#addAction" type="function">addAction()</link>
                        <link raw="QMenu" href="qmenu.html" type="class">QMenu</link>
                        <link raw="contextMenuPolicy" href="qwidget.html#contextMenuPolicy-prop" type="property" getter="QWidget::contextMenuPolicy()">contextMenuPolicy</link>
                        <link raw="actions()" href="qwidget.html#actions" type="function">actions()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="removeAction" fullname="QWidget::removeAction" href="qwidget.html#removeAction" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="561" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void removeAction(QAction *action)">
                <parameter type="QAction *" name="action" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3329" column="4">
                    <para>Removes the action <argument>action</argument> from this widget's list of actions.</para>
                    <see-also>
                        <link raw="insertAction()" href="qwidget.html#insertAction" type="function">insertAction()</link>
                        <link raw="actions()" href="qwidget.html#actions" type="function">actions()</link>
                        <link raw="insertAction()" href="qwidget.html#insertAction" type="function">insertAction()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="actions" fullname="QWidget::actions" href="qwidget.html#actions" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="562" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QList&lt;QAction *&gt;" signature="QList&lt;QAction *&gt; actions() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="3349" column="4">
                    <para>Returns the (possibly empty) list of this widget's actions.</para>
                    <see-also>
                        <link raw="contextMenuPolicy" href="qwidget.html#contextMenuPolicy-prop" type="property" getter="QWidget::contextMenuPolicy()">contextMenuPolicy</link>
                        <link raw="insertAction()" href="qwidget.html#insertAction" type="function">insertAction()</link>
                        <link raw="removeAction()" href="qwidget.html#removeAction" type="function">removeAction()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="parentWidget" fullname="QWidget::parentWidget" href="qwidget.html#parentWidget" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="565" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QWidget *" signature="QWidget * parentWidget() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="setWindowFlags" fullname="QWidget::setWindowFlags" href="qwidget.html#windowFlags-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="567" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowFlags" type="void" signature="void setWindowFlags(Qt::WindowFlags type)">
                <parameter type="Qt::WindowFlags" name="type" default=""/>
                <description path="" line="0" column="0">
                    <see-also>windowFlags()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="windowFlags" fullname="QWidget::windowFlags" href="qwidget.html#windowFlags-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="568" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowFlags" type="Qt::WindowFlags" signature="Qt::WindowFlags windowFlags() const">
                <description path="" line="0" column="0">
                    <see-also>setWindowFlags()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setWindowFlag" fullname="QWidget::setWindowFlag" href="qwidget.html#setWindowFlag" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="569" since="5.9" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setWindowFlag(Qt::WindowType flag, bool on)">
                <parameter type="Qt::WindowType" name="flag" default=""/>
                <parameter type="bool" name="on" default="true"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10502" column="4">
                    <para>Sets the window flag <argument>flag</argument> on this widget if <argument>on</argument> is true; otherwise clears the flag.</para>
                    <see-also>
                        <link raw="setWindowFlags()" href="qwidget.html#windowFlags-prop" type="function">setWindowFlags()</link>
                        <link raw="windowFlags()" href="qwidget.html#windowFlags-prop" type="function">windowFlags()</link>
                        <link raw="windowType()" href="qwidget.html#windowType" type="function">windowType()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="overrideWindowFlags" fullname="QWidget::overrideWindowFlags" href="qwidget.html#overrideWindowFlags" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="570" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void overrideWindowFlags(Qt::WindowFlags flags)">
                <parameter type="Qt::WindowFlags" name="flags" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10547" column="4">
                    <para>Sets the window flags for the widget to <argument>flags</argument>, <italic>without</italic> telling the window system.</para>
                    <para>
                        <bold>Warning:</bold> Do not call this function unless you really know what you're doing.</para>
                    <see-also>
                        <link raw="setWindowFlags()" href="qwidget.html#windowFlags-prop" type="function">setWindowFlags()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="windowType" fullname="QWidget::windowType" href="qwidget.html#windowType" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="572" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="Qt::WindowType" signature="Qt::WindowType windowType() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="find" fullname="QWidget::find" href="qwidget.html#find" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="574" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="QWidget *" signature="QWidget * find(WId id)">
                <parameter type="WId" name="id" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="2487" column="4">
                    <para>Returns a pointer to the widget with window identifer/handle <argument>id</argument>.</para>
                    <para>The window identifier type depends on the underlying window system, see <teletype type="highlighted">qwindowdefs.h</teletype> for the actual definition. If there is no widget with this identifier, 0 is returned.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="childAt" fullname="QWidget::childAt" href="qwidget.html#childAt" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="575" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QWidget *" signature="QWidget * childAt(int x, int y) const">
                <parameter type="int" name="x" default=""/>
                <parameter type="int" name="y" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="childAt" fullname="QWidget::childAt" href="qwidget.html#childAt-1" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="576" virtual="non" meta="plain" const="true" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" type="QWidget *" signature="QWidget * childAt(const QPoint &amp;p) const">
                <parameter type="const QPoint &amp;" name="p" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10395" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the visible child widget at point <argument>p</argument> in the widget's own coordinate system.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setAttribute" fullname="QWidget::setAttribute" href="qwidget.html#setAttribute" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="578" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setAttribute(Qt::WidgetAttribute attribute, bool on)">
                <parameter type="Qt::WidgetAttribute" name="attribute" default=""/>
                <parameter type="bool" name="on" default="true"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11164" column="4">
                    <para>Sets the attribute <argument>attribute</argument> on this widget if <argument>on</argument> is true; otherwise clears the attribute.</para>
                    <see-also>
                        <link raw="testAttribute()" href="qwidget.html#testAttribute" type="function">testAttribute()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="testAttribute" fullname="QWidget::testAttribute" href="qwidget.html#testAttribute" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="579" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool testAttribute(Qt::WidgetAttribute ) const">
                <parameter type="Qt::WidgetAttribute" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="paintEngine" fullname="QWidget::paintEngine" href="qwidget.html#paintEngine" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="581" virtual="virtual" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="true" type="QPaintEngine *" signature="QPaintEngine * paintEngine() const override">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="ensurePolished" fullname="QWidget::ensurePolished" href="qwidget.html#ensurePolished" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="583" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void ensurePolished() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10129" column="4">
                    <para>Ensures that the widget and its children have been polished by <link raw="QStyle" href="qstyle.html" type="class">QStyle</link> (i.e., have a proper font and palette).</para>
                    <para>
                        <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> calls this function after it has been fully constructed but before it is shown the very first time. You can call this function if you want to ensure that the widget is polished before doing an operation, e.g., the correct font size might be needed in the widget's <link raw="sizeHint()" href="qwidget.html#sizeHint-prop" type="function">sizeHint()</link> reimplementation. Note that this function <italic>is</italic> called from the default implementation of <link raw="sizeHint()" href="qwidget.html#sizeHint-prop" type="function">sizeHint()</link>.</para>
                    <para>Polishing is useful for final initialization that must happen after all constructors (from base classes as well as from subclasses) have been called.</para>
                    <para>If you need to change some settings when a widget is polished, reimplement <link raw="event()" href="qwidget.html#event" type="function">event()</link> and handle the <link raw="QEvent::Polish" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::Polish</link> event type.</para>
                    <para>
                        <bold>Note:</bold> The function is declared const so that it can be called from other const functions (e.g., <link raw="sizeHint()" href="qwidget.html#sizeHint-prop" type="function">sizeHint()</link>).</para>
                    <see-also>
                        <link raw="event()" href="qwidget.html#event" type="function">event()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isAncestorOf" fullname="QWidget::isAncestorOf" href="qwidget.html#isAncestorOf" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="585" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isAncestorOf(const QWidget *child) const">
                <parameter type="const QWidget *" name="child" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="8792" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this widget is a parent, (or grandparent and so on to any level), of the given <argument>child</argument>, and both widgets are within the same window; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="hasEditFocus" fullname="QWidget::hasEditFocus" href="qwidget.html#hasEditFocus" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="588" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool hasEditFocus() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="389" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this widget currently has edit focus; otherwise false.</para>
                    <para>This feature is only available in Qt for Embedded Linux.</para>
                    <see-also>
                        <link raw="setEditFocus()" href="qwidget.html#setEditFocus" type="function">setEditFocus()</link>
                        <link raw="QApplication::keypadNavigationEnabled()" href="qapplication-obsolete.html#keypadNavigationEnabled" type="function">QApplication::keypadNavigationEnabled()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setEditFocus" fullname="QWidget::setEditFocus" href="qwidget.html#setEditFocus" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="589" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setEditFocus(bool on)">
                <parameter type="bool" name="on" default=""/>
                <description path="" line="0" column="0">
                    <see-also>
                        <link raw="hasEditFocus()" href="qwidget.html#hasEditFocus" type="function">hasEditFocus()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="autoFillBackground" fullname="QWidget::autoFillBackground" href="qwidget.html#autoFillBackground-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="592" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="autoFillBackground" type="bool" signature="bool autoFillBackground() const">
                <description path="" line="0" column="0">
                    <see-also>setAutoFillBackground()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setAutoFillBackground" fullname="QWidget::setAutoFillBackground" href="qwidget.html#autoFillBackground-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="593" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="autoFillBackground" type="void" signature="void setAutoFillBackground(bool enabled)">
                <parameter type="bool" name="enabled" default=""/>
                <description path="" line="0" column="0">
                    <see-also>autoFillBackground()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="backingStore" fullname="QWidget::backingStore" href="qwidget.html#backingStore" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="595" since="5.0" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QBackingStore *" signature="QBackingStore * backingStore() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="12223" column="4">
                    <para>Returns the <link raw="QBackingStore" href="qbackingstore.html" type="class">QBackingStore</link> this widget will be drawn into.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="windowHandle" fullname="QWidget::windowHandle" href="qwidget.html#windowHandle" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="597" since="5.0" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QWindow *" signature="QWindow * windowHandle() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="2613" column="4">
                    <para>If this is a native widget, return the associated <link raw="QWindow" href="qwindow.html" type="class">QWindow</link>. Otherwise return null.</para>
                    <para>Native widgets include toplevel widgets, <link raw="QGLWidget" href="qglwidget.html" type="class">QGLWidget</link>, and child widgets on which <link raw="winId()" href="qwidget.html#winId" type="function">winId()</link> was called.</para>
                    <see-also>
                        <link raw="winId()" href="qwidget.html#winId" type="function">winId()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="createWindowContainer" fullname="QWidget::createWindowContainer" href="qwidget.html#createWindowContainer" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="599" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="QWidget *" signature="QWidget * createWindowContainer(QWindow *window, QWidget *parent, Qt::WindowFlags flags)">
                <parameter type="QWindow *" name="window" default=""/>
                <parameter type="QWidget *" name="parent" default="nullptr"/>
                <parameter type="Qt::WindowFlags" name="flags" default="..."/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="windowTitleChanged" fullname="QWidget::windowTitleChanged" href="qwidget.html#windowTitle-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="604" virtual="non" meta="signal" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowTitle" type="void" signature="void windowTitleChanged(const QString &amp;title)">
                <parameter type="const QString &amp;" name="title" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="windowIconChanged" fullname="QWidget::windowIconChanged" href="qwidget.html#windowIcon-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="605" virtual="non" meta="signal" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowIcon" type="void" signature="void windowIconChanged(const QIcon &amp;icon)">
                <parameter type="const QIcon &amp;" name="icon" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="windowIconTextChanged" fullname="QWidget::windowIconTextChanged" href="qwidget-obsolete.html#windowIconText-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="606" virtual="non" meta="signal" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="windowIconText" type="void" signature="void windowIconTextChanged(const QString &amp;iconText)">
                <parameter type="const QString &amp;" name="iconText" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="customContextMenuRequested" fullname="QWidget::customContextMenuRequested" href="qwidget.html#customContextMenuRequested" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="607" virtual="non" meta="signal" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void customContextMenuRequested(const QPoint &amp;pos)">
                <parameter type="const QPoint &amp;" name="pos" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="event" fullname="QWidget::event" href="qwidget.html#event" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="611" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="true" type="bool" signature="bool event(QEvent *event) override">
                <parameter type="QEvent *" name="event" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="8834" column="4">
                    <para>This is the main event handler; it handles event <argument>event</argument>. You can reimplement this function in a subclass, but we recommend using one of the specialized event handlers instead.</para>
                    <para>Key press and release events are treated differently from other events.  checks for Tab and Shift+Tab and tries to move the focus appropriately. If there is no widget to move the focus to (or the key press is not Tab or Shift+Tab),  calls <link raw="keyPressEvent()" href="qwidget.html#keyPressEvent" type="function">keyPressEvent()</link>.</para>
                    <para>Mouse and tablet event handling is also slightly special: only when the widget is <link raw="enabled" href="qwidget.html#enabled-prop" type="property" getter="QWidget::isEnabled()">enabled</link>,  will call the specialized handlers such as <link raw="mousePressEvent()" href="qwidget.html#mousePressEvent" type="function">mousePressEvent()</link>; otherwise it will discard the event.</para>
                    <para>This function returns <teletype type="highlighted">true</teletype> if the event was recognized, otherwise it returns <teletype type="highlighted">false</teletype>. If the recognized event was accepted (see <link raw="QEvent::accepted" href="qevent.html#accepted-prop" type="property" getter="QEvent::isAccepted()">QEvent::accepted</link>), any further processing such as event propagation to the parent widget stops.</para>
                    <see-also>
                        <link raw="closeEvent()" href="qwidget.html#closeEvent" type="function">closeEvent()</link>
                        <link raw="focusInEvent()" href="qwidget.html#focusInEvent" type="function">focusInEvent()</link>
                        <link raw="focusOutEvent()" href="qwidget.html#focusOutEvent" type="function">focusOutEvent()</link>
                        <link raw="enterEvent()" href="qwidget.html#enterEvent" type="function">enterEvent()</link>
                        <link raw="keyPressEvent()" href="qwidget.html#keyPressEvent" type="function">keyPressEvent()</link>
                        <link raw="keyReleaseEvent()" href="qwidget.html#keyReleaseEvent" type="function">keyReleaseEvent()</link>
                        <link raw="leaveEvent()" href="qwidget.html#leaveEvent" type="function">leaveEvent()</link>
                        <link raw="mouseDoubleClickEvent()" href="qwidget.html#mouseDoubleClickEvent" type="function">mouseDoubleClickEvent()</link>
                        <link raw="mouseMoveEvent()" href="qwidget.html#mouseMoveEvent" type="function">mouseMoveEvent()</link>
                        <link raw="mousePressEvent()" href="qwidget.html#mousePressEvent" type="function">mousePressEvent()</link>
                        <link raw="mouseReleaseEvent()" href="qwidget.html#mouseReleaseEvent" type="function">mouseReleaseEvent()</link>
                        <link raw="moveEvent()" href="qwidget.html#moveEvent" type="function">moveEvent()</link>
                        <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link>
                        <link raw="resizeEvent()" href="qwidget.html#resizeEvent" type="function">resizeEvent()</link>
                        <link raw="QObject::event()" href="qobject.html#event" type="function">QObject::event()</link>
                        <link raw="QObject::timerEvent()" href="qobject.html#timerEvent" type="function">QObject::timerEvent()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="mousePressEvent" fullname="QWidget::mousePressEvent" href="qwidget.html#mousePressEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="612" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void mousePressEvent(QMouseEvent *event)">
                <parameter type="QMouseEvent *" name="event" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="9457" column="4">
                    <para>This event handler, for event <argument>event</argument>, can be reimplemented in a subclass to receive mouse press events for the widget.</para>
                    <para>If you create new widgets in the  the <link raw="mouseReleaseEvent()" href="qwidget.html#mouseReleaseEvent" type="function">mouseReleaseEvent()</link> may not end up where you expect, depending on the underlying window system (or X11 window manager), the widgets' location and maybe more.</para>
                    <para>The default implementation implements the closing of popup widgets when you click outside the window. For other widget types it does nothing.</para>
                    <see-also>
                        <link raw="mouseReleaseEvent()" href="qwidget.html#mouseReleaseEvent" type="function">mouseReleaseEvent()</link>
                        <link raw="mouseDoubleClickEvent()" href="qwidget.html#mouseDoubleClickEvent" type="function">mouseDoubleClickEvent()</link>
                        <link raw="mouseMoveEvent()" href="qwidget.html#mouseMoveEvent" type="function">mouseMoveEvent()</link>
                        <link raw="event()" href="qwidget.html#event" type="function">event()</link>
                        <link raw="QMouseEvent" href="qmouseevent.html" type="class">QMouseEvent</link>
                        <link raw="Scribble Example" href="qtwidgets-widgets-scribble-example.html" type="page" page="Scribble Example">Scribble Example</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="mouseReleaseEvent" fullname="QWidget::mouseReleaseEvent" href="qwidget.html#mouseReleaseEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="613" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void mouseReleaseEvent(QMouseEvent *event)">
                <parameter type="QMouseEvent *" name="event" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="9491" column="4">
                    <para>This event handler, for event <argument>event</argument>, can be reimplemented in a subclass to receive mouse release events for the widget.</para>
                    <see-also>
                        <link raw="mousePressEvent()" href="qwidget.html#mousePressEvent" type="function">mousePressEvent()</link>
                        <link raw="mouseDoubleClickEvent()" href="qwidget.html#mouseDoubleClickEvent" type="function">mouseDoubleClickEvent()</link>
                        <link raw="mouseMoveEvent()" href="qwidget.html#mouseMoveEvent" type="function">mouseMoveEvent()</link>
                        <link raw="event()" href="qwidget.html#event" type="function">event()</link>
                        <link raw="QMouseEvent" href="qmouseevent.html" type="class">QMouseEvent</link>
                        <link raw="Scribble Example" href="qtwidgets-widgets-scribble-example.html" type="page" page="Scribble Example">Scribble Example</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="mouseDoubleClickEvent" fullname="QWidget::mouseDoubleClickEvent" href="qwidget.html#mouseDoubleClickEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="614" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void mouseDoubleClickEvent(QMouseEvent *event)">
                <parameter type="QMouseEvent *" name="event" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="9504" column="4">
                    <para>This event handler, for event <argument>event</argument>, can be reimplemented in a subclass to receive mouse double click events for the widget.</para>
                    <para>The default implementation calls <link raw="mousePressEvent()" href="qwidget.html#mousePressEvent" type="function">mousePressEvent()</link>.</para>
                    <para>
                        <bold>Note:</bold> The widget will also receive mouse press and mouse release events in addition to the double click event. It is up to the developer to ensure that the application interprets these events correctly.</para>
                    <see-also>
                        <link raw="mousePressEvent()" href="qwidget.html#mousePressEvent" type="function">mousePressEvent()</link>
                        <link raw="mouseReleaseEvent()" href="qwidget.html#mouseReleaseEvent" type="function">mouseReleaseEvent()</link>
                        <link raw="mouseMoveEvent()" href="qwidget.html#mouseMoveEvent" type="function">mouseMoveEvent()</link>
                        <link raw="event()" href="qwidget.html#event" type="function">event()</link>
                        <link raw="QMouseEvent" href="qmouseevent.html" type="class">QMouseEvent</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="mouseMoveEvent" fullname="QWidget::mouseMoveEvent" href="qwidget.html#mouseMoveEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="615" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void mouseMoveEvent(QMouseEvent *event)">
                <parameter type="QMouseEvent *" name="event" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="9426" column="4">
                    <para>This event handler, for event <argument>event</argument>, can be reimplemented in a subclass to receive mouse move events for the widget.</para>
                    <para>If mouse tracking is switched off, mouse move events only occur if a mouse button is pressed while the mouse is being moved. If mouse tracking is switched on, mouse move events occur even if no mouse button is pressed.</para>
                    <para>
                        <link raw="QMouseEvent::pos()" href="qmouseevent.html#pos" type="function">QMouseEvent::pos()</link> reports the position of the mouse cursor, relative to this widget. For press and release events, the position is usually the same as the position of the last mouse move event, but it might be different if the user's hand shakes. This is a feature of the underlying window system, not Qt.</para>
                    <para>If you want to show a tooltip immediately, while the mouse is moving (e.g., to get the mouse coordinates with <link raw="QMouseEvent::pos()" href="qmouseevent.html#pos" type="function">QMouseEvent::pos()</link> and show them as a tooltip), you must first enable mouse tracking as described above. Then, to ensure that the tooltip is updated immediately, you must call <link raw="QToolTip::showText()" href="qtooltip.html#showText" type="function">QToolTip::showText()</link> instead of <link raw="setToolTip()" href="qwidget.html#toolTip-prop" type="function">setToolTip()</link> in your implementation of .</para>
                    <see-also>
                        <link raw="setMouseTracking()" href="qwidget.html#mouseTracking-prop" type="function">setMouseTracking()</link>
                        <link raw="mousePressEvent()" href="qwidget.html#mousePressEvent" type="function">mousePressEvent()</link>
                        <link raw="mouseReleaseEvent()" href="qwidget.html#mouseReleaseEvent" type="function">mouseReleaseEvent()</link>
                        <link raw="mouseDoubleClickEvent()" href="qwidget.html#mouseDoubleClickEvent" type="function">mouseDoubleClickEvent()</link>
                        <link raw="event()" href="qwidget.html#event" type="function">event()</link>
                        <link raw="QMouseEvent" href="qmouseevent.html" type="class">QMouseEvent</link>
                        <link raw="Scribble Example" href="qtwidgets-widgets-scribble-example.html" type="page" page="Scribble Example">Scribble Example</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="wheelEvent" fullname="QWidget::wheelEvent" href="qwidget.html#wheelEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="617" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void wheelEvent(QWheelEvent *event)">
                <parameter type="QWheelEvent *" name="event" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="9525" column="4">
                    <para>This event handler, for event <argument>event</argument>, can be reimplemented in a subclass to receive wheel events for the widget.</para>
                    <para>If you reimplement this handler, it is very important that you <link raw="QEvent" href="qevent.html" type="class">ignore()</link> the event if you do not handle it, so that the widget's parent can interpret it.</para>
                    <para>The default implementation ignores the event.</para>
                    <see-also>
                        <link raw="QEvent::ignore()" href="qevent.html#ignore" type="function">QEvent::ignore()</link>
                        <link raw="QEvent::accept()" href="qevent.html#accept" type="function">QEvent::accept()</link>
                        <link raw="event()" href="qwidget.html#event" type="function">event()</link>
                        <link raw="QWheelEvent" href="qwheelevent.html" type="class">QWheelEvent</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="keyPressEvent" fullname="QWidget::keyPressEvent" href="qwidget.html#keyPressEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="619" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void keyPressEvent(QKeyEvent *event)">
                <parameter type="QKeyEvent *" name="event" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="9572" column="4">
                    <para>This event handler, for event <argument>event</argument>, can be reimplemented in a subclass to receive key press events for the widget.</para>
                    <para>A widget must call <link raw="setFocusPolicy()" href="qwidget.html#focusPolicy-prop" type="function">setFocusPolicy()</link> to accept focus initially and have focus in order to receive a key press event.</para>
                    <para>If you reimplement this handler, it is very important that you call the base class implementation if you do not act upon the key.</para>
                    <para>The default implementation closes popup widgets if the user presses the key sequence for <link raw="QKeySequence::Cancel" href="qkeysequence.html#StandardKey-enum" type="enum" enum="QKeySequence::StandardKey">QKeySequence::Cancel</link> (typically the Escape key). Otherwise the event is ignored, so that the widget's parent can interpret it.</para>
                    <para>Note that <link raw="QKeyEvent" href="qkeyevent.html" type="class">QKeyEvent</link> starts with isAccepted() == true, so you do not need to call <link raw="QKeyEvent::accept()" href="qevent.html#accept" type="function">QKeyEvent::accept()</link> - just do not call the base class implementation if you act upon the key.</para>
                    <see-also>
                        <link raw="keyReleaseEvent()" href="qwidget.html#keyReleaseEvent" type="function">keyReleaseEvent()</link>
                        <link raw="setFocusPolicy()" href="qwidget.html#focusPolicy-prop" type="function">setFocusPolicy()</link>
                        <link raw="focusInEvent()" href="qwidget.html#focusInEvent" type="function">focusInEvent()</link>
                        <link raw="focusOutEvent()" href="qwidget.html#focusOutEvent" type="function">focusOutEvent()</link>
                        <link raw="event()" href="qwidget.html#event" type="function">event()</link>
                        <link raw="QKeyEvent" href="qkeyevent.html" type="class">QKeyEvent</link>
                        <link raw="Tetrix Example" href="qtwidgets-widgets-tetrix-example.html" type="page" page="Tetrix Example">Tetrix Example</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="keyReleaseEvent" fullname="QWidget::keyReleaseEvent" href="qwidget.html#keyReleaseEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="620" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void keyReleaseEvent(QKeyEvent *event)">
                <parameter type="QKeyEvent *" name="event" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="9608" column="4">
                    <para>This event handler, for event <argument>event</argument>, can be reimplemented in a subclass to receive key release events for the widget.</para>
                    <para>A widget must <link raw="setFocusPolicy()" href="qwidget.html#focusPolicy-prop" type="function">accept focus</link> initially and <link raw="hasFocus()" href="qwidget.html#focus-prop" type="function">have focus</link> in order to receive a key release event.</para>
                    <para>If you reimplement this handler, it is very important that you call the base class implementation if you do not act upon the key.</para>
                    <para>The default implementation ignores the event, so that the widget's parent can interpret it.</para>
                    <para>Note that <link raw="QKeyEvent" href="qkeyevent.html" type="class">QKeyEvent</link> starts with isAccepted() == true, so you do not need to call <link raw="QKeyEvent::accept()" href="qevent.html#accept" type="function">QKeyEvent::accept()</link> - just do not call the base class implementation if you act upon the key.</para>
                    <see-also>
                        <link raw="keyPressEvent()" href="qwidget.html#keyPressEvent" type="function">keyPressEvent()</link>
                        <link raw="QEvent::ignore()" href="qevent.html#ignore" type="function">QEvent::ignore()</link>
                        <link raw="setFocusPolicy()" href="qwidget.html#focusPolicy-prop" type="function">setFocusPolicy()</link>
                        <link raw="focusInEvent()" href="qwidget.html#focusInEvent" type="function">focusInEvent()</link>
                        <link raw="focusOutEvent()" href="qwidget.html#focusOutEvent" type="function">focusOutEvent()</link>
                        <link raw="event()" href="qwidget.html#event" type="function">event()</link>
                        <link raw="QKeyEvent" href="qkeyevent.html" type="class">QKeyEvent</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="focusInEvent" fullname="QWidget::focusInEvent" href="qwidget.html#focusInEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="621" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void focusInEvent(QFocusEvent *event)">
                <parameter type="QFocusEvent *" name="event" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="focusOutEvent" fullname="QWidget::focusOutEvent" href="qwidget.html#focusOutEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="622" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void focusOutEvent(QFocusEvent *event)">
                <parameter type="QFocusEvent *" name="event" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="enterEvent" fullname="QWidget::enterEvent" href="qwidget.html#enterEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="623" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void enterEvent(QEvent *event)">
                <parameter type="QEvent *" name="event" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="leaveEvent" fullname="QWidget::leaveEvent" href="qwidget.html#leaveEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="624" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void leaveEvent(QEvent *event)">
                <parameter type="QEvent *" name="event" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="paintEvent" fullname="QWidget::paintEvent" href="qwidget.html#paintEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="625" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void paintEvent(QPaintEvent *event)">
                <parameter type="QPaintEvent *" name="event" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="moveEvent" fullname="QWidget::moveEvent" href="qwidget.html#moveEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="626" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void moveEvent(QMoveEvent *event)">
                <parameter type="QMoveEvent *" name="event" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="resizeEvent" fullname="QWidget::resizeEvent" href="qwidget.html#resizeEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="627" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void resizeEvent(QResizeEvent *event)">
                <parameter type="QResizeEvent *" name="event" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="9797" column="4">
                    <para>This event handler can be reimplemented in a subclass to receive widget resize events which are passed in the <argument>event</argument> parameter. When  is called, the widget already has its new geometry. The old size is accessible through <link raw="QResizeEvent::oldSize()" href="qresizeevent.html#oldSize" type="function">QResizeEvent::oldSize()</link>.</para>
                    <para>The widget will be erased and receive a paint event immediately after processing the resize event. No drawing need be (or should be) done inside this handler.</para>
                    <see-also>
                        <link raw="moveEvent()" href="qwidget.html#moveEvent" type="function">moveEvent()</link>
                        <link raw="event()" href="qwidget.html#event" type="function">event()</link>
                        <link raw="resize()" href="qwidget.html#size-prop" type="function">resize()</link>
                        <link raw="QResizeEvent" href="qresizeevent.html" type="class">QResizeEvent</link>
                        <link raw="paintEvent()" href="qwidget.html#paintEvent" type="function">paintEvent()</link>
                        <link raw="Scribble Example" href="qtwidgets-widgets-scribble-example.html" type="page" page="Scribble Example">Scribble Example</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="closeEvent" fullname="QWidget::closeEvent" href="qwidget.html#closeEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="628" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void closeEvent(QCloseEvent *event)">
                <parameter type="QCloseEvent *" name="event" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="9832" column="4">
                    <para>This event handler is called with the given <argument>event</argument> when Qt receives a window close request for a top-level widget from the window system.</para>
                    <para>By default, the event is accepted and the widget is closed. You can reimplement this function to change the way the widget responds to window close requests. For example, you can prevent the window from closing by calling <link raw="QEvent::ignore()" href="qevent.html#ignore" type="function">ignore()</link> on all events.</para>
                    <para>Main window applications typically use reimplementations of this function to check whether the user's work has been saved and ask for permission before closing. For example, the <link raw="Application Example" href="qtwidgets-mainwindows-application-example.html" type="page" page="Application Example">Application Example</link> uses a helper function to determine whether or not to close the window:</para>
                    <snippet location="mainwindows/application/mainwindow.cpp" path="C:/Qt/5.11.1/Src/qtbase/examples/widgets/mainwindows/application/mainwindow.cpp" identifier="3"/>
                    <snippet location="mainwindows/application/mainwindow.cpp" path="C:/Qt/5.11.1/Src/qtbase/examples/widgets/mainwindows/application/mainwindow.cpp" identifier="4"/>
                    <see-also>
                        <link raw="event()" href="qwidget.html#event" type="function">event()</link>
                        <link raw="hide()" href="qwidget.html#hide" type="function">hide()</link>
                        <link raw="close()" href="qwidget.html#close" type="function">close()</link>
                        <link raw="QCloseEvent" href="qcloseevent.html" type="class">QCloseEvent</link>
                        <link raw="Application Example" href="qtwidgets-mainwindows-application-example.html" type="page" page="Application Example">Application Example</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="contextMenuEvent" fullname="QWidget::contextMenuEvent" href="qwidget.html#contextMenuEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="630" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void contextMenuEvent(QContextMenuEvent *event)">
                <parameter type="QContextMenuEvent *" name="event" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="9858" column="4">
                    <para>This event handler, for event <argument>event</argument>, can be reimplemented in a subclass to receive widget context menu events.</para>
                    <para>The handler is called when the widget's <link raw="contextMenuPolicy" href="qwidget.html#contextMenuPolicy-prop" type="property" getter="QWidget::contextMenuPolicy()">contextMenuPolicy</link> is <link raw="Qt::DefaultContextMenu" href="qt.html#ContextMenuPolicy-enum" type="enum" enum="Qt::ContextMenuPolicy">Qt::DefaultContextMenu</link>.</para>
                    <para>The default implementation ignores the context event. See the <link raw="QContextMenuEvent" href="qcontextmenuevent.html" type="class">QContextMenuEvent</link> documentation for more details.</para>
                    <see-also>
                        <link raw="event()" href="qwidget.html#event" type="function">event()</link>
                        <link raw="QContextMenuEvent" href="qcontextmenuevent.html" type="class">QContextMenuEvent</link>
                        <link raw="customContextMenuRequested()" href="qwidget.html#customContextMenuRequested" type="function">customContextMenuRequested()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="tabletEvent" fullname="QWidget::tabletEvent" href="qwidget.html#tabletEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="633" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void tabletEvent(QTabletEvent *event)">
                <parameter type="QTabletEvent *" name="event" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="9546" column="4">
                    <para>This event handler, for event <argument>event</argument>, can be reimplemented in a subclass to receive tablet events for the widget.</para>
                    <para>If you reimplement this handler, it is very important that you <link raw="QEvent" href="qevent.html" type="class">ignore()</link> the event if you do not handle it, so that the widget's parent can interpret it.</para>
                    <para>The default implementation ignores the event.</para>
                    <para>If tablet tracking is switched off, tablet move events only occur if the stylus is in contact with the tablet, or at least one stylus button is pressed, while the stylus is being moved. If tablet tracking is switched on, tablet move events occur even while the stylus is hovering in proximity of the tablet, with no buttons pressed.</para>
                    <see-also>
                        <link raw="QEvent::ignore()" href="qevent.html#ignore" type="function">QEvent::ignore()</link>
                        <link raw="QEvent::accept()" href="qevent.html#accept" type="function">QEvent::accept()</link>
                        <link raw="event()" href="qwidget.html#event" type="function">event()</link>
                        <link raw="setTabletTracking()" href="qwidget.html#tabletTracking-prop" type="function">setTabletTracking()</link>
                        <link raw="QTabletEvent" href="qtabletevent.html" type="class">QTabletEvent</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="actionEvent" fullname="QWidget::actionEvent" href="qwidget.html#actionEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="636" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void actionEvent(QActionEvent *event)">
                <parameter type="QActionEvent *" name="event" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="dragEnterEvent" fullname="QWidget::dragEnterEvent" href="qwidget.html#dragEnterEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="640" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void dragEnterEvent(QDragEnterEvent *event)">
                <parameter type="QDragEnterEvent *" name="event" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="dragMoveEvent" fullname="QWidget::dragMoveEvent" href="qwidget.html#dragMoveEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="641" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void dragMoveEvent(QDragMoveEvent *event)">
                <parameter type="QDragMoveEvent *" name="event" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="dragLeaveEvent" fullname="QWidget::dragLeaveEvent" href="qwidget.html#dragLeaveEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="642" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void dragLeaveEvent(QDragLeaveEvent *event)">
                <parameter type="QDragLeaveEvent *" name="event" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="dropEvent" fullname="QWidget::dropEvent" href="qwidget.html#dropEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="643" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void dropEvent(QDropEvent *event)">
                <parameter type="QDropEvent *" name="event" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="showEvent" fullname="QWidget::showEvent" href="qwidget.html#showEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="646" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void showEvent(QShowEvent *event)">
                <parameter type="QShowEvent *" name="event" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="hideEvent" fullname="QWidget::hideEvent" href="qwidget.html#hideEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="647" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void hideEvent(QHideEvent *event)">
                <parameter type="QHideEvent *" name="event" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="nativeEvent" fullname="QWidget::nativeEvent" href="qwidget.html#nativeEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="648" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool nativeEvent(const QByteArray &amp;eventType, void *message, long *result)">
                <parameter type="const QByteArray &amp;" name="eventType" default=""/>
                <parameter type="void *" name="message" default=""/>
                <parameter type="long *" name="result" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="10098" column="4">
                    <para>This special event handler can be reimplemented in a subclass to receive native platform events identified by <argument>eventType</argument> which are passed in the <argument>message</argument> parameter.</para>
                    <para>In your reimplementation of this function, if you want to stop the event being handled by Qt, return true and set <argument>result</argument>. If you return false, this native event is passed back to Qt, which translates the event into a Qt event and sends it to the widget.</para>
                    <para>
                        <bold>Note:</bold> Events are only delivered to this event handler if the widget is has a native Window handle.</para>
                    <para>
                        <bold>Note:</bold> This function superseedes the event filter functions x11Event(), winEvent() and macEvent() of Qt 4.</para>
                    <table>
                        <header>
                            <item>
                                <para>Platform</para>
                            </item>
                            <item>
                                <para>Event Type Identifier</para>
                            </item>
                            <item>
                                <para>Message Type</para>
                            </item>
                            <item>
                                <para>Result Type</para>
                            </item>
                        </header>
                        <row>
                            <item>
                                <para>Windows</para>
                            </item>
                            <item>
                                <para>&quot;windows_generic_MSG&quot;</para>
                            </item>
                            <item>
                                <para>MSG *</para>
                            </item>
                            <item>
                                <para>LRESULT</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para></para>
                            </item>
                            <item>
                                <para>&quot;NSEvent&quot;</para>
                            </item>
                            <item>
                                <para>NSEvent *</para>
                            </item>
                            <item/>
                        </row>
                    </table>
                </description>
            </function>
            <function threadsafety="unspecified" name="changeEvent" fullname="QWidget::changeEvent" href="qwidget.html#changeEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="651" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void changeEvent(QEvent *event)">
                <parameter type="QEvent *" name="event" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="9352" column="4">
                    <para>This event handler can be reimplemented to handle state changes.</para>
                    <para>The state being changed in this event can be retrieved through the <argument>event</argument> supplied.</para>
                    <para>Change events include: <link raw="QEvent::ToolBarChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::ToolBarChange</link>, <link raw="QEvent::ActivationChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::ActivationChange</link>, <link raw="QEvent::EnabledChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::EnabledChange</link>, <link raw="QEvent::FontChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::FontChange</link>, <link raw="QEvent::StyleChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::StyleChange</link>, <link raw="QEvent::PaletteChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::PaletteChange</link>, <link raw="QEvent::WindowTitleChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::WindowTitleChange</link>, <link raw="QEvent::IconTextChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::IconTextChange</link>, <link raw="QEvent::ModifiedChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::ModifiedChange</link>, <link raw="QEvent::MouseTrackingChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::MouseTrackingChange</link>, <link raw="QEvent::ParentChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::ParentChange</link>, <link raw="QEvent::WindowStateChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::WindowStateChange</link>, <link raw="QEvent::LanguageChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::LanguageChange</link>, <link raw="QEvent::LocaleChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::LocaleChange</link>, <link raw="QEvent::LayoutDirectionChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::LayoutDirectionChange</link>, <link raw="QEvent::ReadOnlyChange" href="qevent.html#Type-enum" type="enum" enum="QEvent::Type">QEvent::ReadOnlyChange</link>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="metric" fullname="QWidget::metric" href="qwidget.html#metric" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="653" virtual="virtual" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="true" type="int" signature="int metric(QPaintDevice::PaintDeviceMetric m) const override">
                <parameter type="QPaintDevice::PaintDeviceMetric" name="m" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="12831" column="4">
                    <para>Internal implementation of the virtual <link raw="QPaintDevice::metric()" href="qpaintdevice.html#metric" type="function">QPaintDevice::metric()</link> function.</para>
                    <para>
                        <argument>m</argument> is the metric to get.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="initPainter" fullname="QWidget::initPainter" href="qwidget.html#initPainter" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="654" virtual="virtual" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="true" type="void" signature="void initPainter(QPainter *painter) const override">
                <parameter type="QPainter *" name="painter" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="12893" column="4">
                    <para>Initializes the <argument>painter</argument> pen, background and font to the same as the given widget's. This function is called automatically when the painter is opened on a <link raw="QWidget" href="qwidget.html" type="class">QWidget</link>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="redirected" fullname="QWidget::redirected" href="qwidget.html#redirected" status="internal" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="655" virtual="virtual" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="true" type="QPaintDevice *" signature="QPaintDevice * redirected(QPoint *offset) const override">
                <parameter type="QPoint *" name="offset" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="12908" column="4">
                    <para>Do PaintDevice rendering with the specified <argument>offset</argument>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="sharedPainter" fullname="QWidget::sharedPainter" href="qwidget.html#sharedPainter" status="internal" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="656" virtual="virtual" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="true" type="QPainter *" signature="QPainter * sharedPainter() const override">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="12918" column="4">
                    <para>A painter that is shared among other instances of <link raw="QPainter" href="qpainter.html" type="class">QPainter</link>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="inputMethodEvent" fullname="QWidget::inputMethodEvent" href="qwidget.html#inputMethodEvent" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="658" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void inputMethodEvent(QInputMethodEvent *event)">
                <parameter type="QInputMethodEvent *" name="event" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="9878" column="4">
                    <para>This event handler, for event <argument>event</argument>, can be reimplemented in a subclass to receive Input Method composition events. This handler is called when the state of the input method changes.</para>
                    <para>Note that when creating custom text editing widgets, the <link raw="Qt::WA_InputMethodEnabled" href="qt.html#WidgetAttribute-enum" type="enum" enum="Qt::WidgetAttribute">Qt::WA_InputMethodEnabled</link> window attribute must be set explicitly (using the <link raw="setAttribute()" href="qwidget.html#setAttribute" type="function">setAttribute()</link> function) in order to receive input method events.</para>
                    <para>The default implementation calls event-&gt;ignore(), which rejects the Input Method event. See the <link raw="QInputMethodEvent" href="qinputmethodevent.html" type="class">QInputMethodEvent</link> documentation for more details.</para>
                    <see-also>
                        <link raw="event()" href="qwidget.html#event" type="function">event()</link>
                        <link raw="QInputMethodEvent" href="qinputmethodevent.html" type="class">QInputMethodEvent</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="inputMethodQuery" fullname="QWidget::inputMethodQuery" href="qwidget.html#inputMethodQuery" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="660" virtual="virtual" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QVariant" signature="QVariant inputMethodQuery(Qt::InputMethodQuery query) const">
                <parameter type="Qt::InputMethodQuery" name="query" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="9899" column="4">
                    <para>This method is only relevant for input widgets. It is used by the input method to query a set of properties of the widget to be able to support complex input method operations as support for surrounding text and reconversions.</para>
                    <para>
                        <argument>query</argument> specifies which property is queried.</para>
                    <see-also>
                        <link raw="inputMethodEvent()" href="qwidget.html#inputMethodEvent" type="function">inputMethodEvent()</link>
                        <link raw="QInputMethodEvent" href="qinputmethodevent.html" type="class">QInputMethodEvent</link>
                        <link raw="QInputMethodQueryEvent" href="qinputmethodqueryevent.html" type="class">QInputMethodQueryEvent</link>
                        <link raw="inputMethodHints" href="qwidget.html#inputMethodHints-prop" type="property" getter="QWidget::inputMethodHints()">inputMethodHints</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="inputMethodHints" fullname="QWidget::inputMethodHints" href="qwidget.html#inputMethodHints-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="662" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="inputMethodHints" type="Qt::InputMethodHints" signature="Qt::InputMethodHints inputMethodHints() const">
                <description path="" line="0" column="0">
                    <see-also>setInputMethodHints()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setInputMethodHints" fullname="QWidget::setInputMethodHints" href="qwidget.html#inputMethodHints-prop" status="active" access="public" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="663" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" associated-property="inputMethodHints" type="void" signature="void setInputMethodHints(Qt::InputMethodHints hints)">
                <parameter type="Qt::InputMethodHints" name="hints" default=""/>
                <description path="" line="0" column="0">
                    <see-also>inputMethodHints()</see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="updateMicroFocus" fullname="QWidget::updateMicroFocus" href="qwidget.html#updateMicroFocus" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="666" virtual="non" meta="slot" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void updateMicroFocus()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="11827" column="4">
                    <para>Updates the widget's micro focus.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="create" fullname="QWidget::create" href="qwidget.html#create" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="669" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void create(WId window, bool initializeWindow, bool destroyOldWindow)">
                <parameter type="WId" name="window" default="0"/>
                <parameter type="bool" name="initializeWindow" default="true"/>
                <parameter type="bool" name="destroyOldWindow" default="true"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="1254" column="4">
                    <para>Creates a new widget window.</para>
                    <para>The parameter <argument>window</argument> is ignored in Qt 5. Please use <link raw="QWindow::fromWinId()" href="qwindow.html#fromWinId" type="function">QWindow::fromWinId()</link> to create a <link raw="QWindow" href="qwindow.html" type="class">QWindow</link> wrapping a foreign window and pass it to <link raw="QWidget::createWindowContainer()" href="qwidget.html#createWindowContainer" type="function">QWidget::createWindowContainer()</link> instead.</para>
                    <para>Initializes the window (sets the geometry etc.) if <argument>initializeWindow</argument> is true. If <argument>initializeWindow</argument> is false, no initialization is performed. This parameter only makes sense if <argument>window</argument> is a valid window.</para>
                    <para>Destroys the old window if <argument>destroyOldWindow</argument> is true. If <argument>destroyOldWindow</argument> is false, you are responsible for destroying the window yourself (using platform native code).</para>
                    <para>The <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> constructor calls create(0,true,true) to create a window for this widget.</para>
                    <see-also>
                        <link raw="createWindowContainer()" href="qwidget.html#createWindowContainer" type="function">createWindowContainer()</link>
                        <link raw="QWindow::fromWinId()" href="qwindow.html#fromWinId" type="function">QWindow::fromWinId()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="destroy" fullname="QWidget::destroy" href="qwidget.html#destroy" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="671" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void destroy(bool destroyWindow, bool destroySubWindows)">
                <parameter type="bool" name="destroyWindow" default="true"/>
                <parameter type="bool" name="destroySubWindows" default="true"/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="focusNextPrevChild" fullname="QWidget::focusNextPrevChild" href="qwidget.html#focusNextPrevChild" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="675" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool focusNextPrevChild(bool next)">
                <parameter type="bool" name="next" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="6752" column="4">
                    <para>Finds a new widget to give the keyboard focus to, as appropriate for Tab and Shift+Tab, and returns <teletype type="highlighted">true</teletype> if it can find a new widget, or false if it can't.</para>
                    <para>If <argument>next</argument> is true, this function searches forward, if <argument>next</argument> is false, it searches backward.</para>
                    <para>Sometimes, you will want to reimplement this function. For example, a web browser might reimplement it to move its &quot;current active link&quot; forward or backward, and call  only when it reaches the last or first link on the &quot;page&quot;.</para>
                    <para>Child widgets call  on their parent widgets, but only the window that contains the child widgets decides where to redirect focus. By reimplementing this function for an object, you thus gain control of focus traversal for all child widgets.</para>
                    <see-also>
                        <link raw="focusNextChild()" href="qwidget.html#focusNextChild" type="function">focusNextChild()</link>
                        <link raw="focusPreviousChild()" href="qwidget.html#focusPreviousChild" type="function">focusPreviousChild()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="focusNextChild" fullname="QWidget::focusNextChild" href="qwidget.html#focusNextChild" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="676" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool focusNextChild()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="focusPreviousChild" fullname="QWidget::focusPreviousChild" href="qwidget.html#focusPreviousChild" status="active" access="protected" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="677" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool focusPreviousChild()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="QWidget" fullname="QWidget::QWidget" href="qwidget.html#QWidget-1" status="internal" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="680" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="QWidget(QWidgetPrivate &amp;dd, QWidget *parent, Qt::WindowFlags f)">
                <parameter type="QWidgetPrivate &amp;" name="dd" default=""/>
                <parameter type="QWidget *" name="parent" default=""/>
                <parameter type="Qt::WindowFlags" name="f" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="1038" column="4"/>
            </function>
            <function threadsafety="unspecified" name="setBackingStore" fullname="QWidget::setBackingStore" href="qwidget.html#setBackingStore" status="internal" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="682" since="5.0" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setBackingStore(QBackingStore *store)">
                <parameter type="QBackingStore *" name="store" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="12188" column="4">
                    <para>Sets the backing store to be the <argument>store</argument> specified. The <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> will take ownership of the <argument>store</argument>.</para>
                    <see-also>
                        <link raw="backingStore()" href="qwidget.html#backingStore" type="function">backingStore()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="testAttribute_helper" fullname="QWidget::testAttribute_helper" href="qwidget.html#testAttribute_helper" status="active" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="684" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool testAttribute_helper(Qt::WidgetAttribute ) const">
                <parameter type="Qt::WidgetAttribute" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="takeLayout" fullname="QWidget::takeLayout" href="qwidget.html#takeLayout" status="active" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="686" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QLayout *" signature="QLayout * takeLayout()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="QWidget" fullname="QWidget::QWidget" href="qwidget.html#QWidget-2" status="active" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="730" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="QWidget(const QWidget &amp;)">
                <parameter type="const QWidget &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="operator=" fullname="QWidget::operator=" href="qwidget.html#operator-eq" status="active" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="730" virtual="non" meta="copy-assign" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QWidget &amp;" signature="QWidget &amp; operator=(const QWidget &amp;)">
                <parameter type="const QWidget &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <variable threadsafety="unspecified" name="data" fullname="QWidget::data" href="qwidget.html#data-var" status="active" access="private" location="qwidget.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtWidgets/qwidget.h" lineno="733" type="QWidgetData *" static="false">
                <description path="" line="0" column="0"/>
            </variable>
            <function threadsafety="unspecified" name="QWIDGETSIZE_MAX" href="qwidget.html#QWIDGETSIZE_MAX" status="active" access="public" virtual="non" meta="macrowithoutparams" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" relates="QWidget" type="" signature="QWIDGETSIZE_MAX">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/kernel/qwidget.cpp" line="12004" column="4">
                    <para>Defines the maximum size for a <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> object.</para>
                    <para>The largest allowed size for a widget is <link raw="QSize" href="qsize.html" type="class">QSize</link>(, ), i.e. <link raw="QSize" href="qsize.html" type="class">QSize</link> (16777215,16777215).</para>
                    <see-also>
                        <link raw="QWidget::setMaximumSize()" href="qwidget.html#maximumSize-prop" type="function">QWidget::setMaximumSize()</link>
                    </see-also>
                </description>
            </function>
        </class>
    </document>
</WebXML>
