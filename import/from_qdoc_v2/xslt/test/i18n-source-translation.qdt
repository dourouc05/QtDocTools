<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.2"
            xml:lang="en">
   <db:info>
      <db:title>Writing Source Code for Translation</db:title>
      <db:abstract>
         <db:para>How to write source code in a way that makes it possible for user-visible text to be translated</db:para>
         <db:para>
            <db:simplelist>
               <db:member>
                  <db:link xlink:href="i18n-plural-rules.html" xlink:title="next">Translation Rules for Plurals &gt;</db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="internationalization.html" xlink:title="previous">&lt; </db:link>
               </db:member>
               <db:member>
                  <db:link xlink:href="internationalization.html" xlink:title="contents">^  ^</db:link>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:abstract>
      <db:pubdate>2018-09-27+02:00</db:pubdate>
      <db:date>2018-09-27+02:00</db:date>
      <db:productname>Qt</db:productname>
      <db:productnumber>1.2</db:productnumber>
   </db:info>
   <db:para>How to write source code in a way that makes it possible for user-visible text to be translated.</db:para>
   <db:para>Writing cross-platform international software with Qt is a gentle, incremental process. Your software can become internationalized in the stages described in the following sections. For more information about internalizing Qt Quick application, see <db:link xlink:href="qtquick-internationalization.html" xrefstyle="page" annotations="Internationalization and Localization with Qt Quick">Internationalization and Localization with Qt Quick</db:link>.</db:para>
   <db:section xml:id="using-qstring-for-all-user-visible-text">
      <db:title>Using QString for All User-Visible Text</db:title>
      <db:para>Since <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> uses the Unicode encoding internally, every language in the world can be processed transparently using familiar text processing operations. Also, since all Qt functions that present text to the user take a <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> as a parameter, there is no <db:code>char *</db:code> to <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> conversion overhead.</db:para>
      <db:para>Strings that are in "programmer space" (such as <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> names and file format texts) need not use <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>; the traditional <db:code>char *</db:code> or the <db:code><db:link xlink:href="qbytearray.html" xrefstyle="class" annotations="QByteArray">QByteArray</db:link></db:code> class will suffice.</db:para>
      <db:para>You're unlikely to notice that you are using Unicode; <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>, and <db:code><db:link xlink:href="qchar.html" xrefstyle="class" annotations="QChar">QChar</db:link></db:code> are just easier versions of the crude <db:code>const char *</db:code> and <db:code>char</db:code> from traditional C.</db:para>
      <db:para>
         <db:code>char *</db:code> strings in source code are assumed to be UTF-8 encoded when being implicitly converted to a <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>. If your C string literal uses a different encoding, use <db:code><db:link xlink:href="qstring.html#fromLatin1" xrefstyle="function" annotations="QString::fromLatin1()">QString::fromLatin1()</db:link></db:code> or <db:code><db:link xlink:href="qtextcodec.html" xrefstyle="class" annotations="QTextCodec">QTextCodec</db:link></db:code> to convert the literal to a Unicode encoded <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>.</db:para>
   </db:section>
   <db:section xml:id="using-tr-for-all-literal-text">
      <db:title>Using tr() for All Literal Text</db:title>
      <db:para>Wherever your program uses a string literal (quoted text) that will be presented to the user, ensure that it is processed by the <db:code><db:link xlink:href="qcoreapplication.html#translate" xrefstyle="function" annotations="QCoreApplication::translate()">QCoreApplication::translate()</db:link></db:code> function. Essentially all that is necessary to achieve this is to use the <db:code><db:link xlink:href="qobject.html#tr" xrefstyle="function" annotations="QObject::tr()">tr()</db:link></db:code> function to obtain translated text for your classes, typically for display purposes. This function is also used to indicate which text strings in an application are translatable.</db:para>
      <db:para>For example, assuming the <db:code>LoginWidget</db:code> is a subclass of <db:code><db:link xlink:href="qwidget.html" xrefstyle="class" annotations="QWidget">QWidget</db:link></db:code>:</db:para>
      <db:programlisting>
LoginWidget::LoginWidget()
{
    QLabel *label = new QLabel(tr("Password:"));
    ...
}
</db:programlisting>
      <db:para>This accounts for 99% of the user-visible strings you're likely to write.</db:para>
      <db:para>If the quoted text is not in a member function of a <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> subclass, use either the tr() function of an appropriate class, or the <db:code><db:link xlink:href="qcoreapplication.html#translate" xrefstyle="function" annotations="QCoreApplication::translate()">QCoreApplication::translate()</db:link></db:code> function directly:</db:para>
      <db:programlisting>
void some_global_function(LoginWidget *logwid)
{
    QLabel *label = new QLabel(
                LoginWidget::tr("Password:"), logwid);
}

void same_global_function(LoginWidget *logwid)
{
    QLabel *label = new QLabel(
                QCoreApplication::translate("LoginWidget", "Password:"), logwid);
}
</db:programlisting>
      <db:para>Qt indexes each translatable string by the <db:emphasis>translation context</db:emphasis> it is associated with; this is generally the name of the <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> subclass it is used in.</db:para>
      <db:para>Translation contexts are defined for new <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code>-based classes by the use of the <db:code><db:link xlink:href="qobject.html#Q_OBJECT" xrefstyle="function" annotations="Q_OBJECT">Q_OBJECT</db:link></db:code> macro in each new class definition.</db:para>
      <db:para>When tr() is called, it looks up the translatable string using a <db:code><db:link xlink:href="qtranslator.html" xrefstyle="class" annotations="QTranslator">QTranslator</db:link></db:code> object. For translation to work, one or more of these must have been installed on the application object in the way described in <db:link xlink:href="internationalization.html#enabling-translation" xrefstyle="" annotations="Enabling Translation">Enabling Translation</db:link>.</db:para>
      <db:para>Translating strings in QML works exactly the same way as in C++, with the only difference being that you need to call qsTr() instead of <db:code><db:link xlink:href="qobject.html#tr" xrefstyle="function" annotations="QObject::tr()">tr()</db:link></db:code>. See also the page on <db:link xlink:href="qtquick-internationalization.html" xrefstyle="page" annotations="Internationalization and Localization with Qt Quick">Internationalization and Localization with Qt Quick</db:link>.</db:para>
   </db:section>
   <db:section xml:id="defining-a-translation-context">
      <db:title>Defining a Translation Context</db:title>
      <db:para>The translation context for <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> and each <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> subclass is the class name itself. Developers subclassing <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> must use the <db:code><db:link xlink:href="qobject.html#Q_OBJECT" xrefstyle="function" annotations="Q_OBJECT">Q_OBJECT</db:link></db:code> macro in their class definition to override the translation context. This macro sets the context to the name of the subclass.</db:para>
      <db:para>For example, the following class definition includes the <db:code><db:link xlink:href="qobject.html#Q_OBJECT" xrefstyle="function" annotations="Q_OBJECT">Q_OBJECT</db:link></db:code> macro, implementing a new tr() that uses the <db:code>MainWindow</db:code> context:</db:para>
      <db:programlisting language="other">class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow();
    ...</db:programlisting>
      <db:programlisting>    ...</db:programlisting>
      <db:para>If <db:code><db:link xlink:href="qobject.html#Q_OBJECT" xrefstyle="function" annotations="Q_OBJECT">Q_OBJECT</db:link></db:code> is not used in a class definition, the context will be inherited from the base class. For example, since all <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code>-based classes in Qt provide a context, a new <db:code><db:link xlink:href="qwidget.html" xrefstyle="class" annotations="QWidget">QWidget</db:link></db:code> subclass defined without a <db:code><db:link xlink:href="qobject.html#Q_OBJECT" xrefstyle="function" annotations="Q_OBJECT">Q_OBJECT</db:link></db:code> macro will use the <db:code>QWidget</db:code> context if its tr() function is invoked.</db:para>
   </db:section>
   <db:section xml:id="using-tr-to-obtain-a-translation">
      <db:title>Using tr() to Obtain a Translation</db:title>
      <db:para>The following example shows how a translation is obtained for the class shown in the previous section:</db:para>
      <db:programlisting language="other">void MainWindow::createMenus()
{
    fileMenu = menuBar()-&gt;addMenu(tr("&amp;File"));
    ...</db:programlisting>
      <db:programlisting>    ...</db:programlisting>
      <db:para>Here, the translation context is <db:code>MainWindow</db:code> because it is the <db:code>MainWindow::tr()</db:code> function that is invoked. The text returned by the tr() function is a translation of "&amp;File" obtained from the <db:code>MainWindow</db:code> context.</db:para>
      <db:para>When Qt's translation tool, <db:link xlink:href="linguist-manager.html#using-lupdate" xrefstyle="page" annotations="Using lupdate">lupdate</db:link>, is used to process a set of source files, the text wrapped in tr() calls is stored in a section of the translation file that corresponds to its translation context.</db:para>
      <db:para>In some situations, it is useful to give a translation context explicitly by fully qualifying the call to tr(); for example:</db:para>
      <db:programlisting>
QString text = QScrollBar::tr("Page up");
</db:programlisting>
      <db:para>This call obtains the translated text for "Page up" from the <db:code>QScrollBar</db:code> context. Developers can also use the <db:code><db:link xlink:href="qcoreapplication.html#translate" xrefstyle="function" annotations="QCoreApplication::translate()">QCoreApplication::translate()</db:link></db:code> function to obtain a translation for a particular translation context.</db:para>
   </db:section>
   <db:section xml:id="using-tr-to-localize-numbers">
      <db:title>Using tr() to Localize Numbers</db:title>
      <db:para>You can localize numbers by using appropriate tr() strings:</db:para>
      <db:programlisting>
void Clock::setTime(const QTime &amp;time)
{
    if (tr("AMPM") == "AMPM") {
        // 12-hour clock
    } else {
        // 24-hour clock
    }
}
</db:programlisting>
      <db:para>In the example, for the US we would leave the translation of "AMPM" as it is and thereby use the 12-hour clock branch; but in Europe we would translate it as something else to make the code use the 24-hour clock branch.</db:para>
   </db:section>
   <db:section xml:id="translating-non-qt-classes">
      <db:title>Translating Non-Qt Classes</db:title>
      <db:para>It is sometimes necessary to provide internationalization support for strings used in classes that do not inherit <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> or use the <db:code><db:link xlink:href="qobject.html#Q_OBJECT" xrefstyle="function" annotations="Q_OBJECT">Q_OBJECT</db:link></db:code> macro to enable translation features. Since Qt translates strings at run-time based on the class they are associated with and <db:code>lupdate</db:code> looks for translatable strings in the source code, non-Qt classes must use mechanisms that also provide this information.</db:para>
      <db:para>One way to do this is to add translation support to a non-Qt class using the <db:code><db:link xlink:href="qcoreapplication.html#Q_DECLARE_TR_FUNCTIONS" xrefstyle="function" annotations="Q_DECLARE_TR_FUNCTIONS()">Q_DECLARE_TR_FUNCTIONS()</db:link></db:code> macro; for example:</db:para>
      <db:programlisting>
class MyClass
{
    Q_DECLARE_TR_FUNCTIONS(MyClass)

public:
    MyClass();
    
};
</db:programlisting>
      <db:programlisting>    ...</db:programlisting>
      <db:para>This provides the class with <db:code><db:link xlink:href="qobject.html#tr" xrefstyle="function" annotations="QObject::tr()">tr()</db:link></db:code> functions that can be used to translate strings associated with the class, and makes it possible for <db:code>lupdate</db:code> to find translatable strings in the source code.</db:para>
      <db:para>Alternatively, the <db:code><db:link xlink:href="qcoreapplication.html#translate" xrefstyle="function" annotations="QCoreApplication::translate()">QCoreApplication::translate()</db:link></db:code> function can be called with a specific context, and this will be recognized by <db:code>lupdate</db:code> and Qt Linguist.</db:para>
   </db:section>
   <db:section xml:id="translator-comments">
      <db:title>Translator Comments</db:title>
      <db:para>Developers can include information about each translatable string to help translators with the translation process. These are extracted when <db:code>lupdate</db:code> is used to process the source files. The recommended way to add comments is to annotate the tr() calls in your code with comments of the form:</db:para>
      <db:para>
         <db:code>//: ...</db:code>
      </db:para>
      <db:para>or</db:para>
      <db:para>
         <db:code><db:emphasis>/*</db:emphasis>: ... <db:emphasis>*/</db:emphasis></db:code>
      </db:para>
      <db:para>Examples:</db:para>
      <db:programlisting>
//: This name refers to a host name.
hostNameLabel-&gt;setText(tr("Name:"));

/*: This text refers to a C++ code example. */
QString example = tr("Example");
</db:programlisting>
      <db:para>In these examples, the comments will be associated with the strings passed to tr() in the context of each call.</db:para>
   </db:section>
   <db:section xml:id="adding-meta-data-to-strings">
      <db:title>Adding Meta-Data to Strings</db:title>
      <db:para>Additional data can be attached to each translatable message. These are extracted when <db:code>lupdate</db:code> is used to process the source files. The recommended way to add meta-data is to annotate the tr() calls in your code with comments of the form:</db:para>
      <db:para>
         <db:code>//= &lt;id&gt;</db:code>
      </db:para>
      <db:para>This can be used to give the message a unique identifier to support tools which need it.</db:para>
      <db:para>An alternative way to attach meta-data is to use the following syntax:</db:para>
      <db:para>
         <db:code>//~ &lt;field name&gt; &lt;field contents&gt;</db:code>
      </db:para>
      <db:para>This can be used to attach meta-data to the message. The field name should consist of a domain prefix (possibly the conventional file extension of the file format the field is inspired by), a hyphen and the actual field name in underscore-delimited notation. For storage in TS files, the field name together with the prefix "extra-" will form an XML element name. The field contents will be XML-escaped, but otherwise appear verbatim as the element's contents. Any number of unique fields can be added to each message.</db:para>
      <db:para>Example:</db:para>
      <db:programlisting>
//: This is a comment for the translator.
//= qtn_foo_bar
//~ loc-layout_id foo_dialog
//~ loc-blank False
//~ magic-stuff This might mean something magic.
QString text = MyMagicClass::tr("Sim sala bim.");
</db:programlisting>
      <db:para>You can use the keyword <db:emphasis>TRANSLATOR</db:emphasis> for translator comments. Meta-data appearing right in front of the TRANSLATOR keyword applies to the whole TS file.</db:para>
   </db:section>
   <db:section xml:id="disambiguation">
      <db:title>Disambiguation</db:title>
      <db:para>If the same translatable string is used in different roles within the same translation context, an additional identifying string may be passed in the call to <db:code><db:link xlink:href="qobject.html#tr" xrefstyle="function" annotations="QObject::tr()">tr()</db:link></db:code>. This optional disambiguation argument is used to distinguish between otherwise identical strings.</db:para>
      <db:para>Example:</db:para>
      <db:programlisting>
MyWindow::MyWindow()
{
    QLabel *senderLabel = new QLabel(tr("Name:"));
    QLabel *recipientLabel = new QLabel(tr("Name:", "recipient"));
    </db:programlisting>
      <db:programlisting>    ...</db:programlisting>
      <db:para>In Qt 4.4 and earlier, this disambiguation parameter was the preferred way to specify comments to translators.</db:para>
   </db:section>
   <db:section xml:id="handling-plurals">
      <db:title>Handling Plurals</db:title>
      <db:para>Some translatable strings contain placeholders for integer values and need to be translated differently depending on the values in use.</db:para>
      <db:para>To help with this problem, developers pass an additional integer argument to the <db:code><db:link xlink:href="qobject.html#tr" xrefstyle="function" annotations="QObject::tr()">tr()</db:link></db:code> function, and typically use a special notation for plurals in each translatable string.</db:para>
      <db:para>If this argument is equal or greater than zero, all occurrences of <db:code>%n</db:code> in the resulting string are replaced with a decimal representation of the value supplied. In addition, the translation used will adapt to the value according to the rules for each language.</db:para>
      <db:para>Example:</db:para>
      <db:programlisting>
int n = messages.count();
showMessage(tr("%n message(s) saved", "", n));
</db:programlisting>
      <db:para>The table below shows what string is returned depending on the active translation:</db:para>
      <db:informaltable>
         <db:thead>
            <db:tr>
               <db:th/>
               <db:th colspan="3">
                  <db:para>Active Translation</db:para>
               </db:th>
            </db:tr>
            <db:tr>
               <db:th>
                  <db:para>
                     <db:code role="argument">n</db:code>
                  </db:para>
               </db:th>
               <db:th>
                  <db:para>No Translation</db:para>
               </db:th>
               <db:th>
                  <db:para>French</db:para>
               </db:th>
               <db:th>
                  <db:para>English</db:para>
               </db:th>
            </db:tr>
         </db:thead>
         <db:tbody>
            <db:tr>
               <db:td>
                  <db:para>0</db:para>
               </db:td>
               <db:td>
                  <db:para>"0 message(s) saved"</db:para>
               </db:td>
               <db:td>
                  <db:para>"0 message sauvegardé"</db:para>
               </db:td>
               <db:td>
                  <db:para>"0 message<db:emphasis role="bold">s</db:emphasis> saved"</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>1</db:para>
               </db:td>
               <db:td>
                  <db:para>"1 message(s) saved"</db:para>
               </db:td>
               <db:td>
                  <db:para>"1 message sauvegardé"</db:para>
               </db:td>
               <db:td>
                  <db:para>"1 message saved"</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>2</db:para>
               </db:td>
               <db:td>
                  <db:para>"2 message(s) saved"</db:para>
               </db:td>
               <db:td>
                  <db:para>"2 message<db:emphasis role="bold">s</db:emphasis> sauvegardé<db:emphasis role="bold">s</db:emphasis>"</db:para>
               </db:td>
               <db:td>
                  <db:para>"2 message<db:emphasis role="bold">s</db:emphasis> saved"</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>37</db:para>
               </db:td>
               <db:td>
                  <db:para>"37 message(s) saved"</db:para>
               </db:td>
               <db:td>
                  <db:para>"37 message<db:emphasis role="bold">s</db:emphasis> sauvegardé<db:emphasis role="bold">s</db:emphasis>"</db:para>
               </db:td>
               <db:td>
                  <db:para>"37 message<db:emphasis role="bold">s</db:emphasis> saved"</db:para>
               </db:td>
            </db:tr>
         </db:tbody>
      </db:informaltable>
      <db:para>This idiom is more flexible than the traditional approach; e.g.,</db:para>
      <db:programlisting>
n == 1 ? tr("%n message saved") : tr("%n messages saved")
</db:programlisting>
      <db:para>because it also works with target languages that have several plural forms (e.g., Irish has a special "dual" form that should be used when <db:code>n</db:code> is 2), and it handles the <db:emphasis>n</db:emphasis> == 0 case correctly for languages such as French that require the singular.</db:para>
      <db:para>To handle plural forms in the native language, you need to load a translation file for this language, too. The lupdate tool has the <db:code>-pluralonly</db:code> command line option, which allows the creation of TS files containing only entries with plural forms.</db:para>
      <db:para>See the <db:link xlink:href="http://doc.qt.io/archives/qq/" xrefstyle="page" annotations="Qt Quarterly">Qt Quarterly</db:link> Article Plural Forms in Translations for further details on this issue.</db:para>
      <db:para>Instead of <db:code>%n</db:code>, you can use <db:code>%Ln</db:code> to produce a localized representation of <db:code role="argument">n</db:code>. The conversion uses the default locale, set using <db:code><db:link xlink:href="qlocale.html#setDefault" xrefstyle="function" annotations="QLocale::setDefault()">QLocale::setDefault()</db:link></db:code>. (If no default locale was specified, the system wide locale is used.)</db:para>
      <db:para>A summary of the rules used to translate strings containing plurals can be found in the <db:link xlink:href="i18n-plural-rules.html" xrefstyle="page" annotations="Translation Rules for Plurals">Translation Rules for Plurals</db:link> document.</db:para>
   </db:section>
   <db:section xml:id="translating-text-that-is-outside-of-a-qobject-subclass">
      <db:title>Translating Text That is Outside of a QObject Subclass</db:title>
   </db:section>
   <db:section xml:id="using-qcoreapplication-translate">
      <db:title>Using QCoreApplication::translate()</db:title>
      <db:para>If the quoted text is not in a member function of a <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> subclass, use either the tr() function of an appropriate class, or the <db:code><db:link xlink:href="qcoreapplication.html#translate" xrefstyle="function" annotations="QCoreApplication::translate()">QCoreApplication::translate()</db:link></db:code> function directly:</db:para>
      <db:programlisting>
void some_global_function(LoginWidget *logwid)
{
    QLabel *label = new QLabel(
            LoginWidget::tr("Password:"), logwid);
}

void same_global_function(LoginWidget *logwid)
{
    QLabel *label = new QLabel(
            QCoreApplication::translate("LoginWidget", "Password:"),
            logwid);
}
</db:programlisting>
   </db:section>
   <db:section xml:id="using-qt-tr-noop-and-qt-translate-noop-in-c">
      <db:title>Using QT_TR_NOOP() and QT_TRANSLATE_NOOP() in C++</db:title>
      <db:para>If you need to have translatable text completely outside a function, there are two macros to help: <db:code><db:link xlink:href="qtglobal.html#QT_TR_NOOP" xrefstyle="function" annotations="QT_TR_NOOP()">QT_TR_NOOP()</db:link></db:code> and <db:code><db:link xlink:href="qtglobal.html#QT_TRANSLATE_NOOP" xrefstyle="function" annotations="QT_TRANSLATE_NOOP()">QT_TRANSLATE_NOOP()</db:link></db:code>. They merely mark the text for extraction by the <db:code>lupdate</db:code> tool. The macros expand to just the text (without the context).</db:para>
      <db:para>Example of <db:code><db:link xlink:href="qtglobal.html#QT_TR_NOOP" xrefstyle="function" annotations="QT_TR_NOOP()">QT_TR_NOOP()</db:link></db:code>:</db:para>
      <db:programlisting>
QString FriendlyConversation::greeting(int type)
{
    static const char *greeting_strings[] = {
        QT_TR_NOOP("Hello"),
        QT_TR_NOOP("Goodbye")
    };
    return tr(greeting_strings[type]);
}
</db:programlisting>
      <db:para>Example of <db:code><db:link xlink:href="qtglobal.html#QT_TRANSLATE_NOOP" xrefstyle="function" annotations="QT_TRANSLATE_NOOP()">QT_TRANSLATE_NOOP()</db:link></db:code>:</db:para>
      <db:programlisting>
static const char *greeting_strings[] = {
    QT_TRANSLATE_NOOP("FriendlyConversation", "Hello"),
    QT_TRANSLATE_NOOP("FriendlyConversation", "Goodbye")
};

QString FriendlyConversation::greeting(int type)
{
    return tr(greeting_strings[type]);
}

QString global_greeting(int type)
{
    return QCoreApplication::translate("FriendlyConversation",
                                       greeting_strings[type]);
}
</db:programlisting>
      <db:para>If you disable the <db:code>const char *</db:code> to <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> automatic conversion by compiling your software with the macro <db:code>QT_NO_CAST_FROM_ASCII</db:code> defined, you'll be very likely to catch any strings you are missing. See <db:code><db:link xlink:href="qstring.html#fromUtf8" xrefstyle="function" annotations="QString::fromUtf8()">QString::fromUtf8()</db:link></db:code> and <db:code><db:link xlink:href="qstring.html#fromLatin1" xrefstyle="function" annotations="QString::fromLatin1()">QString::fromLatin1()</db:link></db:code> for more information.</db:para>
   </db:section>
   <db:section xml:id="using-qkeysequence-for-accelerator-values">
      <db:title>Using QKeySequence() for Accelerator Values</db:title>
      <db:para>Accelerator values such as Ctrl+Q or Alt+F need to be translated too. If you hardcode <db:code>Qt::CTRL + Qt::Key_Q</db:code> for "quit" in your application, translators won't be able to override it. The correct idiom is:</db:para>
      <db:programlisting language="other">exitAct = new QAction(tr("E&amp;xit"), this);
exitAct-&gt;setShortcuts(QKeySequence::Quit);</db:programlisting>
   </db:section>
   <db:section xml:id="using-numbered-arguments">
      <db:title>Using Numbered Arguments</db:title>
      <db:para>The <db:code><db:link xlink:href="qstring.html#arg" xrefstyle="function" annotations="QString::arg()">QString::arg()</db:link></db:code> functions offer a simple means for substituting arguments:</db:para>
      <db:programlisting>
void FileCopier::showProgress(int done, int total,
                              const QString &amp;currentFile)
{
    label.setText(tr("%1 of %2 files copied.\nCopying: %3")
                  .arg(done)
                  .arg(total)
                  .arg(currentFile));
}
</db:programlisting>
      <db:para>In some languages the order of arguments may need to change, and this can easily be achieved by changing the order of the % arguments. For example:</db:para>
      <db:programlisting>
QString s1 = "%1 of %2 files copied. Copying: %3";
QString s2 = "Kopierer nu %3. Av totalt %2 filer er %1 kopiert.";

qDebug() &lt;&lt; s1.arg(5).arg(10).arg("somefile.txt");
qDebug() &lt;&lt; s2.arg(5).arg(10).arg("somefile.txt");
</db:programlisting>
      <db:para>produces the correct output in English and Norwegian:</db:para>
      <db:programlisting>
5 of 10 files copied. Copying: somefile.txt
Kopierer nu somefile.txt. Av totalt 10 filer er 5 kopiert.
</db:programlisting>
   </db:section>
   <db:section xml:id="further-reading">
      <db:title>Further Reading</db:title>
      <db:para>
         <db:link xlink:href="qtlinguist-index.html" xrefstyle="page" annotations="Qt Linguist Manual">Qt Linguist Manual</db:link>, <db:link xlink:href="qtlinguist-hellotr-example.html" xrefstyle="page" annotations="Hello tr() Example">Hello tr() Example</db:link>, <db:link xlink:href="i18n-plural-rules.html" xrefstyle="page" annotations="Translation Rules for Plurals">Translation Rules for Plurals</db:link>
      </db:para>
   </db:section>
</db:article>
