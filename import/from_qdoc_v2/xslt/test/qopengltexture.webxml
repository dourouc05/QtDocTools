<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <class threadsafety="unspecified" name="QOpenGLTexture" href="qopengltexture.html" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="57" since="5.2" module="QtGui" brief="Encapsulates an OpenGL texture object">
            <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="1960" column="4">
                <brief>The <link raw="QOpenGLTexture" href="qopengltexture.html" type="class">QOpenGLTexture</link> class encapsulates an OpenGL texture object.</brief>
                <para>
                    <link raw="QOpenGLTexture" href="qopengltexture.html" type="class">QOpenGLTexture</link> makes it easy to work with OpenGL textures and the myriad features and targets that they offer depending upon the capabilities of your OpenGL implementation.</para>
                <para>The typical usage pattern for <link raw="QOpenGLTexture" href="qopengltexture.html" type="class">QOpenGLTexture</link> is</para>
                <list type="bullet">
                    <item>
                        <para>Instantiate the object specifying the texture target type</para>
                    </item>
                    <item>
                        <para>Set properties that affect the storage requirements e.g. storage format, dimensions</para>
                    </item>
                    <item>
                        <para>Allocate the server-side storage</para>
                    </item>
                    <item>
                        <para>Optionally upload pixel data</para>
                    </item>
                    <item>
                        <para>Optionally set any additional properties e.g. filtering and border options</para>
                    </item>
                    <item>
                        <para>Render with texture or render to texture</para>
                    </item>
                </list>
                <para>In the common case of simply using a <link raw="QImage" href="qimage.html" type="class">QImage</link> as the source of texture pixel data most of the above steps are performed automatically.</para>
                <code>// Prepare texture
QOpenGLTexture *texture = new QOpenGLTexture(QImage(fileName).mirrored());
texture-&gt;setMinificationFilter(QOpenGLTexture::LinearMipMapLinear);
texture-&gt;setMagnificationFilter(QOpenGLTexture::Linear);
...
// Render with texture
texture-&gt;bind();
glDrawArrays(...);</code>
                <para>Note that the <link raw="QImage" href="qimage.html" type="class">QImage</link> is mirrored vertically to account for the fact that OpenGL and <link raw="QImage" href="qimage.html" type="class">QImage</link> use opposite directions for the y axis. Another option would be to transform your texture coordinates.</para>
            </description>
            <variable threadsafety="unspecified" name="staticMetaObject" fullname="QOpenGLTexture::staticMetaObject" href="qopengltexture.html#staticMetaObject-var" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="59" type="const QMetaObject" static="true">
                <description path="" line="0" column="0"/>
            </variable>
            <function threadsafety="unspecified" name="qt_check_for_QGADGET_macro" fullname="QOpenGLTexture::qt_check_for_QGADGET_macro" href="qopengltexture.html#qt_check_for_QGADGET_macro" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="59" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void qt_check_for_QGADGET_macro()">
                <description path="" line="0" column="0"/>
            </function>
            <typedef threadsafety="unspecified" name="QtGadgetHelper" fullname="QOpenGLTexture::QtGadgetHelper" href="qopengltexture.html#QtGadgetHelper-typedef" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="59">
                <description path="" line="0" column="0"/>
            </typedef>
            <function threadsafety="unspecified" name="qt_static_metacall" fullname="QOpenGLTexture::qt_static_metacall" href="qopengltexture.html#qt_static_metacall" status="active" access="private" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="59" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void qt_static_metacall(QObject *, QMetaObject::Call , int , void **)">
                <parameter type="QObject *" name="" default=""/>
                <parameter type="QMetaObject::Call" name="" default=""/>
                <parameter type="int" name="" default=""/>
                <parameter type="void **" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <enum threadsafety="unspecified" name="Target" fullname="QOpenGLTexture::Target" href="qopengltexture.html#Target-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="61">
                <value name="Target1D" value="0x0DE0"/>
                <value name="Target1DArray" value="0x8C18"/>
                <value name="Target2D" value="0x0DE1"/>
                <value name="Target2DArray" value="0x8C1A"/>
                <value name="Target3D" value="0x806F"/>
                <value name="TargetCubeMap" value="0x8513"/>
                <value name="TargetCubeMapArray" value="0x9009"/>
                <value name="Target2DMultisample" value="0x9100"/>
                <value name="Target2DMultisampleArray" value="0x9102"/>
                <value name="TargetRectangle" value="0x84F5"/>
                <value name="TargetBuffer" value="0x8C2A"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2010" column="4">
                    <para>This enum defines the texture target of a <link raw="QOpenGLTexture" href="qopengltexture.html" type="class">QOpenGLTexture</link> object.</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::Target1D</term>Target1D</definition>
                        <item>
                            <para>A 1-dimensional texture. Equivalent to GL_TEXTURE_1D.</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Target1DArray</term>Target1DArray</definition>
                        <item>
                            <para>An array of 1-dimensional textures. Equivalent to GL_TEXTURE_1D_ARRAY</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Target2D</term>Target2D</definition>
                        <item>
                            <para>A 2-dimensional texture. Equivalent to GL_TEXTURE_2D</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Target2DArray</term>Target2DArray</definition>
                        <item>
                            <para>An array of 1-dimensional textures. Equivalent to GL_TEXTURE_2D_ARRAY</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Target3D</term>Target3D</definition>
                        <item>
                            <para>A 3-dimensional texture. Equivalent to GL_TEXTURE_3D</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::TargetCubeMap</term>TargetCubeMap</definition>
                        <item>
                            <para>A cubemap texture. Equivalent to GL_TEXTURE_CUBE_MAP</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::TargetCubeMapArray</term>TargetCubeMapArray</definition>
                        <item>
                            <para>An array of cubemap textures. Equivalent to GL_TEXTURE_CUBE_MAP_ARRAY</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Target2DMultisample</term>Target2DMultisample</definition>
                        <item>
                            <para>A 2-dimensional texture with multisample support. Equivalent to GL_TEXTURE_2D_MULTISAMPLE</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Target2DMultisampleArray</term>Target2DMultisampleArray</definition>
                        <item>
                            <para>An array of 2-dimensional textures with multisample support. Equivalent to GL_TEXTURE_2D_MULTISAMPLE_ARRAY</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::TargetRectangle</term>TargetRectangle</definition>
                        <item>
                            <para>A rectangular 2-dimensional texture. Equivalent to GL_TEXTURE_RECTANGLE</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::TargetBuffer</term>TargetBuffer</definition>
                        <item>
                            <para>A texture with data from an OpenGL buffer object. Equivalent to GL_TEXTURE_BUFFER</para>
                        </item>
                    </list>
                </description>
            </enum>
            <enum threadsafety="unspecified" name="BindingTarget" fullname="QOpenGLTexture::BindingTarget" href="qopengltexture.html#BindingTarget-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="76">
                <value name="BindingTarget1D" value="0x8068"/>
                <value name="BindingTarget1DArray" value="0x8C1C"/>
                <value name="BindingTarget2D" value="0x8069"/>
                <value name="BindingTarget2DArray" value="0x8C1D"/>
                <value name="BindingTarget3D" value="0x806A"/>
                <value name="BindingTargetCubeMap" value="0x8514"/>
                <value name="BindingTargetCubeMapArray" value="0x900A"/>
                <value name="BindingTarget2DMultisample" value="0x9104"/>
                <value name="BindingTarget2DMultisampleArray" value="0x9105"/>
                <value name="BindingTargetRectangle" value="0x84F6"/>
                <value name="BindingTargetBuffer" value="0x8C2C"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2038" column="4">
                    <para>This enum defines the possible binding targets of texture units.</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::BindingTarget1D</term>BindingTarget1D</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_BINDING_1D</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::BindingTarget1DArray</term>BindingTarget1DArray</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_BINDING_1D_ARRAY</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::BindingTarget2D</term>BindingTarget2D</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_BINDING_2D</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::BindingTarget2DArray</term>BindingTarget2DArray</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_BINDING_2D_ARRAY</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::BindingTarget3D</term>BindingTarget3D</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_BINDING_3D</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::BindingTargetCubeMap</term>BindingTargetCubeMap</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_BINDING_CUBE_MAP</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::BindingTargetCubeMapArray</term>BindingTargetCubeMapArray</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_BINDING_CUBE_MAP_ARRAY</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::BindingTarget2DMultisample</term>BindingTarget2DMultisample</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_BINDING_2D_MULTISAMPLE</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::BindingTarget2DMultisampleArray</term>BindingTarget2DMultisampleArray</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::BindingTargetRectangle</term>BindingTargetRectangle</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_BINDING_RECTANGLE</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::BindingTargetBuffer</term>BindingTargetBuffer</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_BINDING_BUFFER</para>
                        </item>
                    </list>
                </description>
            </enum>
            <enum threadsafety="unspecified" name="MipMapGeneration" fullname="QOpenGLTexture::MipMapGeneration" href="qopengltexture.html#MipMapGeneration-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="91">
                <value name="GenerateMipMaps" value="0"/>
                <value name="DontGenerateMipMaps" value="1"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2055" column="4">
                    <para>This enum defines the options to control mipmap generation.</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::GenerateMipMaps</term>GenerateMipMaps</definition>
                        <item>
                            <para>Mipmaps should be generated</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::DontGenerateMipMaps</term>DontGenerateMipMaps</definition>
                        <item>
                            <para>Mipmaps should not be generated</para>
                        </item>
                    </list>
                </description>
            </enum>
            <enum threadsafety="unspecified" name="TextureUnitReset" fullname="QOpenGLTexture::TextureUnitReset" href="qopengltexture.html#TextureUnitReset-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="97">
                <value name="ResetTextureUnit" value="0"/>
                <value name="DontResetTextureUnit" value="1"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2063" column="4">
                    <para>This enum defines options ot control texture unit activation.</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::ResetTextureUnit</term>ResetTextureUnit</definition>
                        <item>
                            <para>The previous active texture unit will be reset</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::DontResetTextureUnit</term>DontResetTextureUnit</definition>
                        <item>
                            <para>The previous active texture unit will not be rest</para>
                        </item>
                    </list>
                </description>
            </enum>
            <enum threadsafety="unspecified" name="TextureFormat" fullname="QOpenGLTexture::TextureFormat" href="qopengltexture.html#TextureFormat-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="103">
                <value name="NoFormat" value="0"/>
                <value name="R8_UNorm" value="0x8229"/>
                <value name="RG8_UNorm" value="0x822B"/>
                <value name="RGB8_UNorm" value="0x8051"/>
                <value name="RGBA8_UNorm" value="0x8058"/>
                <value name="R16_UNorm" value="0x822A"/>
                <value name="RG16_UNorm" value="0x822C"/>
                <value name="RGB16_UNorm" value="0x8054"/>
                <value name="RGBA16_UNorm" value="0x805B"/>
                <value name="R8_SNorm" value="0x8F94"/>
                <value name="RG8_SNorm" value="0x8F95"/>
                <value name="RGB8_SNorm" value="0x8F96"/>
                <value name="RGBA8_SNorm" value="0x8F97"/>
                <value name="R16_SNorm" value="0x8F98"/>
                <value name="RG16_SNorm" value="0x8F99"/>
                <value name="RGB16_SNorm" value="0x8F9A"/>
                <value name="RGBA16_SNorm" value="0x8F9B"/>
                <value name="R8U" value="0x8232"/>
                <value name="RG8U" value="0x8238"/>
                <value name="RGB8U" value="0x8D7D"/>
                <value name="RGBA8U" value="0x8D7C"/>
                <value name="R16U" value="0x8234"/>
                <value name="RG16U" value="0x823A"/>
                <value name="RGB16U" value="0x8D77"/>
                <value name="RGBA16U" value="0x8D76"/>
                <value name="R32U" value="0x8236"/>
                <value name="RG32U" value="0x823C"/>
                <value name="RGB32U" value="0x8D71"/>
                <value name="RGBA32U" value="0x8D70"/>
                <value name="R8I" value="0x8231"/>
                <value name="RG8I" value="0x8237"/>
                <value name="RGB8I" value="0x8D8F"/>
                <value name="RGBA8I" value="0x8D8E"/>
                <value name="R16I" value="0x8233"/>
                <value name="RG16I" value="0x8239"/>
                <value name="RGB16I" value="0x8D89"/>
                <value name="RGBA16I" value="0x8D88"/>
                <value name="R32I" value="0x8235"/>
                <value name="RG32I" value="0x823B"/>
                <value name="RGB32I" value="0x8D83"/>
                <value name="RGBA32I" value="0x8D82"/>
                <value name="R16F" value="0x822D"/>
                <value name="RG16F" value="0x822F"/>
                <value name="RGB16F" value="0x881B"/>
                <value name="RGBA16F" value="0x881A"/>
                <value name="R32F" value="0x822E"/>
                <value name="RG32F" value="0x8230"/>
                <value name="RGB32F" value="0x8815"/>
                <value name="RGBA32F" value="0x8814"/>
                <value name="RGB9E5" value="0x8C3D"/>
                <value name="RG11B10F" value="0x8C3A"/>
                <value name="RG3B2" value="0x2A10"/>
                <value name="R5G6B5" value="0x8D62"/>
                <value name="RGB5A1" value="0x8057"/>
                <value name="RGBA4" value="0x8056"/>
                <value name="RGB10A2" value="0x906F"/>
                <value name="D16" value="0x81A5"/>
                <value name="D24" value="0x81A6"/>
                <value name="D24S8" value="0x88F0"/>
                <value name="D32" value="0x81A7"/>
                <value name="D32F" value="0x8CAC"/>
                <value name="D32FS8X24" value="0x8CAD"/>
                <value name="S8" value="0x8D48"/>
                <value name="RGB_DXT1" value="0x83F0"/>
                <value name="RGBA_DXT1" value="0x83F1"/>
                <value name="RGBA_DXT3" value="0x83F2"/>
                <value name="RGBA_DXT5" value="0x83F3"/>
                <value name="R_ATI1N_UNorm" value="0x8DBB"/>
                <value name="R_ATI1N_SNorm" value="0x8DBC"/>
                <value name="RG_ATI2N_UNorm" value="0x8DBD"/>
                <value name="RG_ATI2N_SNorm" value="0x8DBE"/>
                <value name="RGB_BP_UNSIGNED_FLOAT" value="0x8E8F"/>
                <value name="RGB_BP_SIGNED_FLOAT" value="0x8E8E"/>
                <value name="RGB_BP_UNorm" value="0x8E8C"/>
                <value name="R11_EAC_UNorm" value="0x9270"/>
                <value name="R11_EAC_SNorm" value="0x9271"/>
                <value name="RG11_EAC_UNorm" value="0x9272"/>
                <value name="RG11_EAC_SNorm" value="0x9273"/>
                <value name="RGB8_ETC2" value="0x9274"/>
                <value name="SRGB8_ETC2" value="0x9275"/>
                <value name="RGB8_PunchThrough_Alpha1_ETC2" value="0x9276"/>
                <value name="SRGB8_PunchThrough_Alpha1_ETC2" value="0x9277"/>
                <value name="RGBA8_ETC2_EAC" value="0x9278"/>
                <value name="SRGB8_Alpha8_ETC2_EAC" value="0x9279"/>
                <value name="RGB8_ETC1" value="0x8D64"/>
                <value name="RGBA_ASTC_4x4" value="0x93B0"/>
                <value name="RGBA_ASTC_5x4" value="0x93B1"/>
                <value name="RGBA_ASTC_5x5" value="0x93B2"/>
                <value name="RGBA_ASTC_6x5" value="0x93B3"/>
                <value name="RGBA_ASTC_6x6" value="0x93B4"/>
                <value name="RGBA_ASTC_8x5" value="0x93B5"/>
                <value name="RGBA_ASTC_8x6" value="0x93B6"/>
                <value name="RGBA_ASTC_8x8" value="0x93B7"/>
                <value name="RGBA_ASTC_10x5" value="0x93B8"/>
                <value name="RGBA_ASTC_10x6" value="0x93B9"/>
                <value name="RGBA_ASTC_10x8" value="0x93BA"/>
                <value name="RGBA_ASTC_10x10" value="0x93BB"/>
                <value name="RGBA_ASTC_12x10" value="0x93BC"/>
                <value name="RGBA_ASTC_12x12" value="0x93BD"/>
                <value name="SRGB8_Alpha8_ASTC_4x4" value="0x93D0"/>
                <value name="SRGB8_Alpha8_ASTC_5x4" value="0x93D1"/>
                <value name="SRGB8_Alpha8_ASTC_5x5" value="0x93D2"/>
                <value name="SRGB8_Alpha8_ASTC_6x5" value="0x93D3"/>
                <value name="SRGB8_Alpha8_ASTC_6x6" value="0x93D4"/>
                <value name="SRGB8_Alpha8_ASTC_8x5" value="0x93D5"/>
                <value name="SRGB8_Alpha8_ASTC_8x6" value="0x93D6"/>
                <value name="SRGB8_Alpha8_ASTC_8x8" value="0x93D7"/>
                <value name="SRGB8_Alpha8_ASTC_10x5" value="0x93D8"/>
                <value name="SRGB8_Alpha8_ASTC_10x6" value="0x93D9"/>
                <value name="SRGB8_Alpha8_ASTC_10x8" value="0x93DA"/>
                <value name="SRGB8_Alpha8_ASTC_10x10" value="0x93DB"/>
                <value name="SRGB8_Alpha8_ASTC_12x10" value="0x93DC"/>
                <value name="SRGB8_Alpha8_ASTC_12x12" value="0x93DD"/>
                <value name="SRGB8" value="0x8C41"/>
                <value name="SRGB8_Alpha8" value="0x8C43"/>
                <value name="SRGB_DXT1" value="0x8C4C"/>
                <value name="SRGB_Alpha_DXT1" value="0x8C4D"/>
                <value name="SRGB_Alpha_DXT3" value="0x8C4E"/>
                <value name="SRGB_Alpha_DXT5" value="0x8C4F"/>
                <value name="SRGB_BP_UNorm" value="0x8E8D"/>
                <value name="DepthFormat" value="0x1902"/>
                <value name="AlphaFormat" value="0x1906"/>
                <value name="RGBFormat" value="0x1907"/>
                <value name="RGBAFormat" value="0x1908"/>
                <value name="LuminanceFormat" value="0x1909"/>
                <value name="LuminanceAlphaFormat" value="0x190A"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2071" column="4">
                    <para>This enum defines the possible texture formats. Depending upon your OpenGL implementation only a subset of these may be supported.</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::NoFormat</term>NoFormat</definition>
                        <item>
                            <para>Equivalent to GL_NONE</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R8_UNorm</term>R8_UNorm</definition>
                        <item>
                            <para>Equivalent to GL_R8</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG8_UNorm</term>RG8_UNorm</definition>
                        <item>
                            <para>Equivalent to GL_RG8</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB8_UNorm</term>RGB8_UNorm</definition>
                        <item>
                            <para>Equivalent to GL_RGB8</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA8_UNorm</term>RGBA8_UNorm</definition>
                        <item>
                            <para>Equivalent to GL_RGBA8</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R16_UNorm</term>R16_UNorm</definition>
                        <item>
                            <para>Equivalent to GL_R16</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG16_UNorm</term>RG16_UNorm</definition>
                        <item>
                            <para>Equivalent to GL_RG16</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB16_UNorm</term>RGB16_UNorm</definition>
                        <item>
                            <para>Equivalent to GL_RGB16</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA16_UNorm</term>RGBA16_UNorm</definition>
                        <item>
                            <para>Equivalent to GL_RGBA16</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R8_SNorm</term>R8_SNorm</definition>
                        <item>
                            <para>Equivalent to GL_R8_SNORM</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG8_SNorm</term>RG8_SNorm</definition>
                        <item>
                            <para>Equivalent to GL_RG8_SNORM</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB8_SNorm</term>RGB8_SNorm</definition>
                        <item>
                            <para>Equivalent to GL_RGB8_SNORM</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA8_SNorm</term>RGBA8_SNorm</definition>
                        <item>
                            <para>Equivalent to GL_RGBA8_SNORM</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R16_SNorm</term>R16_SNorm</definition>
                        <item>
                            <para>Equivalent to GL_R16_SNORM</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG16_SNorm</term>RG16_SNorm</definition>
                        <item>
                            <para>Equivalent to GL_RG16_SNORM</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB16_SNorm</term>RGB16_SNorm</definition>
                        <item>
                            <para>Equivalent to GL_RGB16_SNORM</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA16_SNorm</term>RGBA16_SNorm</definition>
                        <item>
                            <para>Equivalent to GL_RGBA16_SNORM</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R8U</term>R8U</definition>
                        <item>
                            <para>Equivalent to GL_R8UI</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG8U</term>RG8U</definition>
                        <item>
                            <para>Equivalent to GL_RG8UI</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB8U</term>RGB8U</definition>
                        <item>
                            <para>Equivalent to GL_RGB8UI</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA8U</term>RGBA8U</definition>
                        <item>
                            <para>Equivalent to GL_RGBA8UI</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R16U</term>R16U</definition>
                        <item>
                            <para>Equivalent to GL_R16UI</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG16U</term>RG16U</definition>
                        <item>
                            <para>Equivalent to GL_RG16UI</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB16U</term>RGB16U</definition>
                        <item>
                            <para>Equivalent to GL_RGB16UI</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA16U</term>RGBA16U</definition>
                        <item>
                            <para>Equivalent to GL_RGBA16UI</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R32U</term>R32U</definition>
                        <item>
                            <para>Equivalent to GL_R32UI</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG32U</term>RG32U</definition>
                        <item>
                            <para>Equivalent to GL_RG32UI</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB32U</term>RGB32U</definition>
                        <item>
                            <para>Equivalent to GL_RGB32UI</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA32U</term>RGBA32U</definition>
                        <item>
                            <para>Equivalent to GL_RGBA32UI</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R8I</term>R8I</definition>
                        <item>
                            <para>Equivalent to GL_R8I</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG8I</term>RG8I</definition>
                        <item>
                            <para>Equivalent to GL_RG8I</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB8I</term>RGB8I</definition>
                        <item>
                            <para>Equivalent to GL_RGB8I</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA8I</term>RGBA8I</definition>
                        <item>
                            <para>Equivalent to GL_RGBA8I</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R16I</term>R16I</definition>
                        <item>
                            <para>Equivalent to GL_R16I</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG16I</term>RG16I</definition>
                        <item>
                            <para>Equivalent to GL_RG16I</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB16I</term>RGB16I</definition>
                        <item>
                            <para>Equivalent to GL_RGB16I</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA16I</term>RGBA16I</definition>
                        <item>
                            <para>Equivalent to GL_RGBA16I</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R32I</term>R32I</definition>
                        <item>
                            <para>Equivalent to GL_R32I</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG32I</term>RG32I</definition>
                        <item>
                            <para>Equivalent to GL_RG32I</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB32I</term>RGB32I</definition>
                        <item>
                            <para>Equivalent to GL_RGB32I</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA32I</term>RGBA32I</definition>
                        <item>
                            <para>Equivalent to GL_RGBA32I</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R16F</term>R16F</definition>
                        <item>
                            <para>Equivalent to GL_R16F</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG16F</term>RG16F</definition>
                        <item>
                            <para>Equivalent to GL_RG16F</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB16F</term>RGB16F</definition>
                        <item>
                            <para>Equivalent to GL_RGB16F</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA16F</term>RGBA16F</definition>
                        <item>
                            <para>Equivalent to GL_RGBA16F</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R32F</term>R32F</definition>
                        <item>
                            <para>Equivalent to GL_R32F</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG32F</term>RG32F</definition>
                        <item>
                            <para>Equivalent to GL_RG32F</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB32F</term>RGB32F</definition>
                        <item>
                            <para>Equivalent to GL_RGB32F</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA32F</term>RGBA32F</definition>
                        <item>
                            <para>Equivalent to GL_RGBA32F</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB9E5</term>RGB9E5</definition>
                        <item>
                            <para>Equivalent to GL_RGB9_E5</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG11B10F</term>RG11B10F</definition>
                        <item>
                            <para>Equivalent to GL_R11F_G11F_B10F</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG3B2</term>RG3B2</definition>
                        <item>
                            <para>Equivalent to GL_R3_G3_B2</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R5G6B5</term>R5G6B5</definition>
                        <item>
                            <para>Equivalent to GL_RGB565</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB5A1</term>RGB5A1</definition>
                        <item>
                            <para>Equivalent to GL_RGB5_A1</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA4</term>RGBA4</definition>
                        <item>
                            <para>Equivalent to GL_RGBA4</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB10A2</term>RGB10A2</definition>
                        <item>
                            <para>Equivalent to GL_RGB10_A2UI</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::D16</term>D16</definition>
                        <item>
                            <para>Equivalent to GL_DEPTH_COMPONENT16</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::D24</term>D24</definition>
                        <item>
                            <para>Equivalent to GL_DEPTH_COMPONENT24</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::D24S8</term>D24S8</definition>
                        <item>
                            <para>Equivalent to GL_DEPTH24_STENCIL8</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::D32</term>D32</definition>
                        <item>
                            <para>Equivalent to GL_DEPTH_COMPONENT32</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::D32F</term>D32F</definition>
                        <item>
                            <para>Equivalent to GL_DEPTH_COMPONENT32F</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::D32FS8X24</term>D32FS8X24</definition>
                        <item>
                            <para>Equivalent to GL_DEPTH32F_STENCIL8</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::S8</term>S8</definition>
                        <item>
                            <para>Equivalent to GL_STENCIL_INDEX8. Introduced in Qt 5.4</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB_DXT1</term>RGB_DXT1</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGB_S3TC_DXT1_EXT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_DXT1</term>RGBA_DXT1</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_DXT3</term>RGBA_DXT3</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_S3TC_DXT3_EXT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_DXT5</term>RGBA_DXT5</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_S3TC_DXT5_EXT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R_ATI1N_UNorm</term>R_ATI1N_UNorm</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RED_RGTC1</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R_ATI1N_SNorm</term>R_ATI1N_SNorm</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SIGNED_RED_RGTC1</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG_ATI2N_UNorm</term>RG_ATI2N_UNorm</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RG_RGTC2</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG_ATI2N_SNorm</term>RG_ATI2N_SNorm</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SIGNED_RG_RGTC2</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB_BP_UNSIGNED_FLOAT</term>RGB_BP_UNSIGNED_FLOAT</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB_BP_SIGNED_FLOAT</term>RGB_BP_SIGNED_FLOAT</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB_BP_UNorm</term>RGB_BP_UNorm</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_BPTC_UNORM_ARB</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R11_EAC_UNorm</term>R11_EAC_UNorm</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_R11_EAC</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::R11_EAC_SNorm</term>R11_EAC_SNorm</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SIGNED_R11_EAC</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG11_EAC_UNorm</term>RG11_EAC_UNorm</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RG11_EAC</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG11_EAC_SNorm</term>RG11_EAC_SNorm</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SIGNED_RG11_EAC</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB8_ETC2</term>RGB8_ETC2</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGB8_ETC2</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_ETC2</term>SRGB8_ETC2</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ETC2</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB8_PunchThrough_Alpha1_ETC2</term>RGB8_PunchThrough_Alpha1_ETC2</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_PunchThrough_Alpha1_ETC2</term>SRGB8_PunchThrough_Alpha1_ETC2</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA8_ETC2_EAC</term>RGBA8_ETC2_EAC</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA8_ETC2_EAC</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8_ETC2_EAC</term>SRGB8_Alpha8_ETC2_EAC</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB8_ETC1</term>RGB8_ETC1</definition>
                        <item>
                            <para>Equivalent to GL_ETC1_RGB8_OES</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_ASTC_4x4</term>RGBA_ASTC_4x4</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_ASTC_4x4_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_ASTC_5x4</term>RGBA_ASTC_5x4</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_ASTC_5x4_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_ASTC_5x5</term>RGBA_ASTC_5x5</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_ASTC_5x5_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_ASTC_6x5</term>RGBA_ASTC_6x5</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_ASTC_6x5_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_ASTC_6x6</term>RGBA_ASTC_6x6</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_ASTC_6x6_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_ASTC_8x5</term>RGBA_ASTC_8x5</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_ASTC_8x5_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_ASTC_8x6</term>RGBA_ASTC_8x6</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_ASTC_8x6_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_ASTC_8x8</term>RGBA_ASTC_8x8</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_ASTC_8x8_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_ASTC_10x5</term>RGBA_ASTC_10x5</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_ASTC_10x5_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_ASTC_10x6</term>RGBA_ASTC_10x6</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_ASTC_10x6_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_ASTC_10x8</term>RGBA_ASTC_10x8</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_ASTC_10x8_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_ASTC_10x10</term>RGBA_ASTC_10x10</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_ASTC_10x10_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_ASTC_12x10</term>RGBA_ASTC_12x10</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_ASTC_12x10_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_ASTC_12x12</term>RGBA_ASTC_12x12</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_RGBA_ASTC_12x12_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8_ASTC_4x4</term>SRGB8_Alpha8_ASTC_4x4</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8_ASTC_5x4</term>SRGB8_Alpha8_ASTC_5x4</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8_ASTC_5x5</term>SRGB8_Alpha8_ASTC_5x5</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8_ASTC_6x5</term>SRGB8_Alpha8_ASTC_6x5</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8_ASTC_6x6</term>SRGB8_Alpha8_ASTC_6x6</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8_ASTC_8x5</term>SRGB8_Alpha8_ASTC_8x5</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8_ASTC_8x6</term>SRGB8_Alpha8_ASTC_8x6</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8_ASTC_8x8</term>SRGB8_Alpha8_ASTC_8x8</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8_ASTC_10x5</term>SRGB8_Alpha8_ASTC_10x5</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8_ASTC_10x6</term>SRGB8_Alpha8_ASTC_10x6</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8_ASTC_10x8</term>SRGB8_Alpha8_ASTC_10x8</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8_ASTC_10x10</term>SRGB8_Alpha8_ASTC_10x10</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8_ASTC_12x10</term>SRGB8_Alpha8_ASTC_12x10</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8_ASTC_12x12</term>SRGB8_Alpha8_ASTC_12x12</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8</term>SRGB8</definition>
                        <item>
                            <para>Equivalent to GL_SRGB8</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB8_Alpha8</term>SRGB8_Alpha8</definition>
                        <item>
                            <para>Equivalent to GL_SRGB8_ALPHA8</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB_DXT1</term>SRGB_DXT1</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB_S3TC_DXT1_EXT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB_Alpha_DXT1</term>SRGB_Alpha_DXT1</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB_Alpha_DXT3</term>SRGB_Alpha_DXT3</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB_Alpha_DXT5</term>SRGB_Alpha_DXT5</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SRGB_BP_UNorm</term>SRGB_BP_UNorm</definition>
                        <item>
                            <para>Equivalent to GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::DepthFormat</term>DepthFormat</definition>
                        <item>
                            <para>Equivalent to GL_DEPTH_COMPONENT (only OpenGL ES 3 or ES 2 with OES_depth_texture)</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::AlphaFormat</term>AlphaFormat</definition>
                        <item>
                            <para>Equivalent to GL_ALPHA (OpenGL ES 2 only)</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBFormat</term>RGBFormat</definition>
                        <item>
                            <para>Equivalent to GL_RGB (OpenGL ES 2 only)</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBAFormat</term>RGBAFormat</definition>
                        <item>
                            <para>Equivalent to GL_RGBA (OpenGL ES 2 only)</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::LuminanceFormat</term>LuminanceFormat</definition>
                        <item>
                            <para>Equivalent to GL_LUMINANCE (OpenGL ES 2 only)</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::LuminanceAlphaFormat</term>LuminanceAlphaFormat</definition>
                        <item>
                            <para>Equivalent to GL_LUMINANCE_ALPHA (OpenGL ES 2 only)</para>
                        </item>
                    </list>
                </description>
            </enum>
            <enum threadsafety="unspecified" name="CubeMapFace" fullname="QOpenGLTexture::CubeMapFace" href="qopengltexture.html#CubeMapFace-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="286">
                <value name="CubeMapPositiveX" value="0x8515"/>
                <value name="CubeMapNegativeX" value="0x8516"/>
                <value name="CubeMapPositiveY" value="0x8517"/>
                <value name="CubeMapNegativeY" value="0x8518"/>
                <value name="CubeMapPositiveZ" value="0x8519"/>
                <value name="CubeMapNegativeZ" value="0x851A"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2221" column="4">
                    <para>This enum defines the possible CubeMap faces.</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::CubeMapPositiveX</term>CubeMapPositiveX</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_CUBE_MAP_POSITIVE_X</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::CubeMapNegativeX</term>CubeMapNegativeX</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_CUBE_MAP_NEGATIVE_X</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::CubeMapPositiveY</term>CubeMapPositiveY</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_CUBE_MAP_POSITIVE_Y</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::CubeMapNegativeY</term>CubeMapNegativeY</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::CubeMapPositiveZ</term>CubeMapPositiveZ</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_CUBE_MAP_POSITIVE_Z</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::CubeMapNegativeZ</term>CubeMapNegativeZ</definition>
                        <item>
                            <para>Equivalent to GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</para>
                        </item>
                    </list>
                </description>
            </enum>
            <enum threadsafety="unspecified" name="PixelFormat" fullname="QOpenGLTexture::PixelFormat" href="qopengltexture.html#PixelFormat-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="296">
                <value name="NoSourceFormat" value="0"/>
                <value name="Red" value="0x1903"/>
                <value name="RG" value="0x8227"/>
                <value name="RGB" value="0x1907"/>
                <value name="BGR" value="0x80E0"/>
                <value name="RGBA" value="0x1908"/>
                <value name="BGRA" value="0x80E1"/>
                <value name="Red_Integer" value="0x8D94"/>
                <value name="RG_Integer" value="0x8228"/>
                <value name="RGB_Integer" value="0x8D98"/>
                <value name="BGR_Integer" value="0x8D9A"/>
                <value name="RGBA_Integer" value="0x8D99"/>
                <value name="BGRA_Integer" value="0x8D9B"/>
                <value name="Stencil" value="0x1901"/>
                <value name="Depth" value="0x1902"/>
                <value name="DepthStencil" value="0x84F9"/>
                <value name="Alpha" value="0x1906"/>
                <value name="Luminance" value="0x1909"/>
                <value name="LuminanceAlpha" value="0x190A"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2233" column="4">
                    <para>This enum defines the possible client-side pixel formats for a pixel transfer operation.</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::NoSourceFormat</term>NoSourceFormat</definition>
                        <item>
                            <para>Equivalent to GL_NONE</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Red</term>Red</definition>
                        <item>
                            <para>Equivalent to GL_RED</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG</term>RG</definition>
                        <item>
                            <para>Equivalent to GL_RG</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB</term>RGB</definition>
                        <item>
                            <para>Equivalent to GL_RGB</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::BGR</term>BGR</definition>
                        <item>
                            <para>Equivalent to GL_BGR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA</term>RGBA</definition>
                        <item>
                            <para>Equivalent to GL_RGBA</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::BGRA</term>BGRA</definition>
                        <item>
                            <para>Equivalent to GL_BGRA</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Red_Integer</term>Red_Integer</definition>
                        <item>
                            <para>Equivalent to GL_RED_INTEGER</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RG_Integer</term>RG_Integer</definition>
                        <item>
                            <para>Equivalent to GL_RG_INTEGER</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGB_Integer</term>RGB_Integer</definition>
                        <item>
                            <para>Equivalent to GL_RGB_INTEGER</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::BGR_Integer</term>BGR_Integer</definition>
                        <item>
                            <para>Equivalent to GL_BGR_INTEGER</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::RGBA_Integer</term>RGBA_Integer</definition>
                        <item>
                            <para>Equivalent to GL_RGBA_INTEGER</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::BGRA_Integer</term>BGRA_Integer</definition>
                        <item>
                            <para>Equivalent to GL_BGRA_INTEGER</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Stencil</term>Stencil</definition>
                        <item>
                            <para>Equivalent to GL_STENCIL_INDEX. Introduced in Qt 5.4</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Depth</term>Depth</definition>
                        <item>
                            <para>Equivalent to GL_DEPTH_COMPONENT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::DepthStencil</term>DepthStencil</definition>
                        <item>
                            <para>Equivalent to GL_DEPTH_STENCIL</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Alpha</term>Alpha</definition>
                        <item>
                            <para>Equivalent to GL_ALPHA (OpenGL ES 2 only)</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Luminance</term>Luminance</definition>
                        <item>
                            <para>Equivalent to GL_LUMINANCE (OpenGL ES 2 only)</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::LuminanceAlpha</term>LuminanceAlpha</definition>
                        <item>
                            <para>Equivalent to GL_LUMINANCE_ALPHA (OpenGL ES 2 only)</para>
                        </item>
                    </list>
                </description>
            </enum>
            <enum threadsafety="unspecified" name="PixelType" fullname="QOpenGLTexture::PixelType" href="qopengltexture.html#PixelType-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="319">
                <value name="NoPixelType" value="0"/>
                <value name="Int8" value="0x1400"/>
                <value name="UInt8" value="0x1401"/>
                <value name="Int16" value="0x1402"/>
                <value name="UInt16" value="0x1403"/>
                <value name="Int32" value="0x1404"/>
                <value name="UInt32" value="0x1405"/>
                <value name="Float16" value="0x140B"/>
                <value name="Float16OES" value="0x8D61"/>
                <value name="Float32" value="0x1406"/>
                <value name="UInt32_RGB9_E5" value="0x8C3E"/>
                <value name="UInt32_RG11B10F" value="0x8C3B"/>
                <value name="UInt8_RG3B2" value="0x8032"/>
                <value name="UInt8_RG3B2_Rev" value="0x8362"/>
                <value name="UInt16_RGB5A1" value="0x8034"/>
                <value name="UInt16_RGB5A1_Rev" value="0x8366"/>
                <value name="UInt16_R5G6B5" value="0x8363"/>
                <value name="UInt16_R5G6B5_Rev" value="0x8364"/>
                <value name="UInt16_RGBA4" value="0x8033"/>
                <value name="UInt16_RGBA4_Rev" value="0x8365"/>
                <value name="UInt32_RGBA8" value="0x8035"/>
                <value name="UInt32_RGBA8_Rev" value="0x8367"/>
                <value name="UInt32_RGB10A2" value="0x8036"/>
                <value name="UInt32_RGB10A2_Rev" value="0x8368"/>
                <value name="UInt32_D24S8" value="0x84FA"/>
                <value name="Float32_D32_UInt32_S8_X24" value="0x8DAD"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2260" column="4">
                    <para>This enum defines the possible pixel data types for a pixel transfer operation</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::NoPixelType</term>NoPixelType</definition>
                        <item>
                            <para>Equivalent to GL_NONE</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Int8</term>Int8</definition>
                        <item>
                            <para>Equivalent to GL_BYTE</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt8</term>UInt8</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_BYTE</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Int16</term>Int16</definition>
                        <item>
                            <para>Equivalent to GL_SHORT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt16</term>UInt16</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_SHORT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Int32</term>Int32</definition>
                        <item>
                            <para>Equivalent to GL_INT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt32</term>UInt32</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_INT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Float16</term>Float16</definition>
                        <item>
                            <para>Equivalent to GL_HALF_FLOAT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Float16OES</term>Float16OES</definition>
                        <item>
                            <para>Equivalent to GL_HALF_FLOAT_OES</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Float32</term>Float32</definition>
                        <item>
                            <para>Equivalent to GL_FLOAT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt32_RGB9_E5</term>UInt32_RGB9_E5</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_INT_5_9_9_9_REV</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt32_RG11B10F</term>UInt32_RG11B10F</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_INT_10F_11F_11F_REV</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt8_RG3B2</term>UInt8_RG3B2</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_BYTE_3_3_2</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt8_RG3B2_Rev</term>UInt8_RG3B2_Rev</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_BYTE_2_3_3_REV</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt16_RGB5A1</term>UInt16_RGB5A1</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_SHORT_5_5_5_1</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt16_RGB5A1_Rev</term>UInt16_RGB5A1_Rev</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_SHORT_1_5_5_5_REV</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt16_R5G6B5</term>UInt16_R5G6B5</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_SHORT_5_6_5</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt16_R5G6B5_Rev</term>UInt16_R5G6B5_Rev</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_SHORT_5_6_5_REV</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt16_RGBA4</term>UInt16_RGBA4</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_SHORT_4_4_4_4</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt16_RGBA4_Rev</term>UInt16_RGBA4_Rev</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_SHORT_4_4_4_4_REV</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt32_RGBA8</term>UInt32_RGBA8</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_INT_8_8_8_8</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt32_RGBA8_Rev</term>UInt32_RGBA8_Rev</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_INT_8_8_8_8_REV</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt32_RGB10A2</term>UInt32_RGB10A2</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_INT_10_10_10_2</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt32_RGB10A2_Rev</term>UInt32_RGB10A2_Rev</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_INT_2_10_10_10_REV</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::UInt32_D24S8</term>UInt32_D24S8</definition>
                        <item>
                            <para>Equivalent to GL_UNSIGNED_INT_24_8. Introduced in Qt 5.4</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Float32_D32_UInt32_S8_X24</term>Float32_D32_UInt32_S8_X24</definition>
                        <item>
                            <para>Equivalent to GL_FLOAT_32_UNSIGNED_INT_24_8_REV. Introduced in Qt 5.4</para>
                        </item>
                    </list>
                </description>
            </enum>
            <enum threadsafety="unspecified" name="SwizzleComponent" fullname="QOpenGLTexture::SwizzleComponent" href="qopengltexture.html#SwizzleComponent-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="349">
                <value name="SwizzleRed" value="0x8E42"/>
                <value name="SwizzleGreen" value="0x8E43"/>
                <value name="SwizzleBlue" value="0x8E44"/>
                <value name="SwizzleAlpha" value="0x8E45"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2318" column="4">
                    <para>This enum defines the texture color components that can be assigned a swizzle mask.</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::SwizzleRed</term>SwizzleRed</definition>
                        <item>
                            <para>The red component. Equivalent to GL_TEXTURE_SWIZZLE_R</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SwizzleGreen</term>SwizzleGreen</definition>
                        <item>
                            <para>The green component. Equivalent to GL_TEXTURE_SWIZZLE_G</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SwizzleBlue</term>SwizzleBlue</definition>
                        <item>
                            <para>The blue component. Equivalent to GL_TEXTURE_SWIZZLE_B</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::SwizzleAlpha</term>SwizzleAlpha</definition>
                        <item>
                            <para>The alpha component. Equivalent to GL_TEXTURE_SWIZZLE_A</para>
                        </item>
                    </list>
                </description>
            </enum>
            <enum threadsafety="unspecified" name="SwizzleValue" fullname="QOpenGLTexture::SwizzleValue" href="qopengltexture.html#SwizzleValue-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="357">
                <value name="RedValue" value="0x1903"/>
                <value name="GreenValue" value="0x1904"/>
                <value name="BlueValue" value="0x1905"/>
                <value name="AlphaValue" value="0x1906"/>
                <value name="ZeroValue" value="0"/>
                <value name="OneValue" value="1"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2328" column="4">
                    <para>This enum defines the possible mask values for texture swizzling.</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::RedValue</term>RedValue</definition>
                        <item>
                            <para>Maps the component to the red channel. Equivalent to GL_RED</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::GreenValue</term>GreenValue</definition>
                        <item>
                            <para>Maps the component to the green channel. Equivalent to GL_GREEN</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::BlueValue</term>BlueValue</definition>
                        <item>
                            <para>Maps the component to the blue channel. Equivalent to GL_BLUE</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::AlphaValue</term>AlphaValue</definition>
                        <item>
                            <para>Maps the component to the alpha channel. Equivalent to GL_ALPHA</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::ZeroValue</term>ZeroValue</definition>
                        <item>
                            <para>Maps the component to a fixed value of 0. Equivalent to GL_ZERO</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::OneValue</term>OneValue</definition>
                        <item>
                            <para>Maps the component to a fixed value of 1. Equivalent to GL_ONE</para>
                        </item>
                    </list>
                </description>
            </enum>
            <enum threadsafety="unspecified" name="WrapMode" fullname="QOpenGLTexture::WrapMode" href="qopengltexture.html#WrapMode-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="367">
                <value name="Repeat" value="0x2901"/>
                <value name="MirroredRepeat" value="0x8370"/>
                <value name="ClampToEdge" value="0x812F"/>
                <value name="ClampToBorder" value="0x812D"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2340" column="4">
                    <para>This enum defines the possible texture coordinate wrapping modes.</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::Repeat</term>Repeat</definition>
                        <item>
                            <para>Texture coordinate is repeated. Equivalent to GL_REPEAT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::MirroredRepeat</term>MirroredRepeat</definition>
                        <item>
                            <para>Texture coordinate is reflected about 0 and 1. Equivalent to GL_MIRRORED_REPEAT</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::ClampToEdge</term>ClampToEdge</definition>
                        <item>
                            <para>Clamps the texture coordinates to [0,1]. Equivalent to GL_CLAMP_TO_EDGE</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::ClampToBorder</term>ClampToBorder</definition>
                        <item>
                            <para>As for  but also blends samples at 0 and 1 with a fixed border color. Equivalent to GL_CLAMP_TO_BORDER</para>
                        </item>
                    </list>
                </description>
            </enum>
            <enum threadsafety="unspecified" name="CoordinateDirection" fullname="QOpenGLTexture::CoordinateDirection" href="qopengltexture.html#CoordinateDirection-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="375">
                <value name="DirectionS" value="0x2802"/>
                <value name="DirectionT" value="0x2803"/>
                <value name="DirectionR" value="0x8072"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2351" column="4">
                    <para>This enum defines the possible texture coordinate directions</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::DirectionS</term>DirectionS</definition>
                        <item>
                            <para>The horizontal direction. Equivalent to GL_TEXTURE_WRAP_S</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::DirectionT</term>DirectionT</definition>
                        <item>
                            <para>The vertical direction. Equivalent to GL_TEXTURE_WRAP_T</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::DirectionR</term>DirectionR</definition>
                        <item>
                            <para>The depth direction. Equivalent to GL_TEXTURE_WRAP_R</para>
                        </item>
                    </list>
                </description>
            </enum>
            <enum threadsafety="unspecified" name="Feature" fullname="QOpenGLTexture::Feature" href="qopengltexture.html#Feature-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="383" typedef="QOpenGLTexture::Features">
                <value name="ImmutableStorage" value="0x00000001"/>
                <value name="ImmutableMultisampleStorage" value="0x00000002"/>
                <value name="TextureRectangle" value="0x00000004"/>
                <value name="TextureArrays" value="0x00000008"/>
                <value name="Texture3D" value="0x00000010"/>
                <value name="TextureMultisample" value="0x00000020"/>
                <value name="TextureBuffer" value="0x00000040"/>
                <value name="TextureCubeMapArrays" value="0x00000080"/>
                <value name="Swizzle" value="0x00000100"/>
                <value name="StencilTexturing" value="0x00000200"/>
                <value name="AnisotropicFiltering" value="0x00000400"/>
                <value name="NPOTTextures" value="0x00000800"/>
                <value name="NPOTTextureRepeat" value="0x00001000"/>
                <value name="Texture1D" value="0x00002000"/>
                <value name="TextureComparisonOperators" value="0x00004000"/>
                <value name="TextureMipMapLevel" value="0x00008000"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2292" column="4">
                    <para>This enum defines the OpenGL texture-related features that can be tested for.</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::ImmutableStorage</term>ImmutableStorage</definition>
                        <item>
                            <para>Support for immutable texture storage</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::ImmutableMultisampleStorage</term>ImmutableMultisampleStorage</definition>
                        <item>
                            <para>Support for immutable texture storage with multisample targets</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::TextureRectangle</term>TextureRectangle</definition>
                        <item>
                            <para>Support for the GL_TEXTURE_RECTANGLE target</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::TextureArrays</term>TextureArrays</definition>
                        <item>
                            <para>Support for texture targets with array layers</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Texture3D</term>Texture3D</definition>
                        <item>
                            <para>Support for the 3 dimensional texture target</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::TextureMultisample</term>TextureMultisample</definition>
                        <item>
                            <para>Support for texture targets that have multisample capabilities</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::TextureBuffer</term>TextureBuffer</definition>
                        <item>
                            <para>Support for textures that use OpenGL buffer objects as their data source</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::TextureCubeMapArrays</term>TextureCubeMapArrays</definition>
                        <item>
                            <para>Support for cubemap array texture target</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Swizzle</term>Swizzle</definition>
                        <item>
                            <para>Support for texture component swizzle masks</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::StencilTexturing</term>StencilTexturing</definition>
                        <item>
                            <para>Support for stencil texturing (i.e. looking up depth or stencil components of a combined depth/stencil format texture in GLSL shaders).</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::AnisotropicFiltering</term>AnisotropicFiltering</definition>
                        <item>
                            <para>Support for anisotropic texture filtering</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::NPOTTextures</term>NPOTTextures</definition>
                        <item>
                            <para>Basic support for non-power-of-two textures</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::NPOTTextureRepeat</term>NPOTTextureRepeat</definition>
                        <item>
                            <para>Full support for non-power-of-two textures including texture repeat modes</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Texture1D</term>Texture1D</definition>
                        <item>
                            <para>Support for the 1 dimensional texture target</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::TextureComparisonOperators</term>TextureComparisonOperators</definition>
                        <item>
                            <para>Support for texture comparison operators</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::TextureMipMapLevel</term>TextureMipMapLevel</definition>
                        <item>
                            <para>Support for setting the base and maximum mipmap levels</para>
                        </item>
                    </list>
                </description>
            </enum>
            <typedef threadsafety="unspecified" name="Features" fullname="QOpenGLTexture::Features" href="qopengltexture.html#Feature-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="404" enum="QOpenGLTexture::Feature">
                <description path="" line="0" column="0"/>
            </typedef>
            <function threadsafety="unspecified" name="QOpenGLTexture" fullname="QOpenGLTexture::QOpenGLTexture" href="qopengltexture.html#QOpenGLTexture" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="407" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="QOpenGLTexture(QOpenGLTexture::Target target)">
                <parameter type="QOpenGLTexture::Target" name="target" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2360" column="4">
                    <para>Creates a <link raw="QOpenGLTexture" href="qopengltexture.html" type="class">QOpenGLTexture</link> object that can later be bound to <argument>target</argument>.</para>
                    <para>This does not create the underlying OpenGL texture object. Therefore, construction using this constructor does not require a valid current OpenGL context.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="QOpenGLTexture" fullname="QOpenGLTexture::QOpenGLTexture" href="qopengltexture.html#QOpenGLTexture-1" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="408" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="QOpenGLTexture(const QImage &amp;image, QOpenGLTexture::MipMapGeneration genMipMaps)">
                <parameter type="const QImage &amp;" name="image" default=""/>
                <parameter type="QOpenGLTexture::MipMapGeneration" name="genMipMaps" default="GenerateMipMaps"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2372" column="4">
                    <para>Creates a <link raw="QOpenGLTexture" href="qopengltexture.html" type="class">QOpenGLTexture</link> object that can later be bound to the 2D texture target and contains the pixel data contained in <argument>image</argument>. If you wish to have a chain of mipmaps generated then set <argument>genMipMaps</argument> to <teletype type="highlighted">true</teletype> (this is the default).</para>
                    <para>This does create the underlying OpenGL texture object. Therefore, construction using this constructor does require a valid current OpenGL context.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="~QOpenGLTexture" fullname="QOpenGLTexture::~QOpenGLTexture" href="qopengltexture.html#dtor.QOpenGLTexture" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="409" virtual="non" meta="destructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="~QOpenGLTexture()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="target" fullname="QOpenGLTexture::target" href="qopengltexture.html#target" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="411" since="5.4" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QOpenGLTexture::Target" signature="QOpenGLTexture::Target target() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2392" column="4">
                    <para>Returns the binding target of this texture.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="create" fullname="QOpenGLTexture::create" href="qopengltexture.html#create" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="414" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool create()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2403" column="4">
                    <para>Creates the underlying OpenGL texture object. This requires a current valid OpenGL context. If the texture object already exists, this function does nothing.</para>
                    <para>Once the texture object is created you can obtain the object name from the <link raw="textureId()" href="qopengltexture.html#textureId" type="function">textureId()</link> function. This may be useful if you wish to make some raw OpenGL calls related to this texture.</para>
                    <para>Normally it should not be necessary to call this function directly as all functions that set properties of the texture object implicitly call  on your behalf.</para>
                    <para>Returns <teletype type="highlighted">true</teletype> if the creation succeeded, otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <see-also>
                        <link raw="destroy()" href="qopengltexture.html#destroy" type="function">destroy()</link>
                        <link raw="isCreated()" href="qopengltexture.html#isCreated" type="function">isCreated()</link>
                        <link raw="textureId()" href="qopengltexture.html#textureId" type="function">textureId()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="destroy" fullname="QOpenGLTexture::destroy" href="qopengltexture.html#destroy" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="415" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void destroy()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2426" column="4">
                    <para>Destroys the underlying OpenGL texture object. This requires a current valid OpenGL context.</para>
                    <see-also>
                        <link raw="create()" href="qopengltexture.html#create" type="function">create()</link>
                        <link raw="isCreated()" href="qopengltexture.html#isCreated" type="function">isCreated()</link>
                        <link raw="textureId()" href="qopengltexture.html#textureId" type="function">textureId()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isCreated" fullname="QOpenGLTexture::isCreated" href="qopengltexture.html#isCreated" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="416" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isCreated() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2438" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if the underlying OpenGL texture object has been created.</para>
                    <see-also>
                        <link raw="create()" href="qopengltexture.html#create" type="function">create()</link>
                        <link raw="destroy()" href="qopengltexture.html#destroy" type="function">destroy()</link>
                        <link raw="textureId()" href="qopengltexture.html#textureId" type="function">textureId()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="textureId" fullname="QOpenGLTexture::textureId" href="qopengltexture.html#textureId" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="417" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="GLuint" signature="GLuint textureId() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2449" column="4">
                    <para>Returns the name of the underlying OpenGL texture object or 0 if it has not yet been created.</para>
                    <see-also>
                        <link raw="create()" href="qopengltexture.html#create" type="function">create()</link>
                        <link raw="destroy()" href="qopengltexture.html#destroy" type="function">destroy()</link>
                        <link raw="isCreated()" href="qopengltexture.html#isCreated" type="function">isCreated()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="bind" fullname="QOpenGLTexture::bind" href="qopengltexture.html#bind" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="420" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void bind()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2461" column="4">
                    <para>Binds this texture to the currently active texture unit ready for rendering. Note that you do not need to bind <link raw="QOpenGLTexture" href="qopengltexture.html" type="class">QOpenGLTexture</link> objects in order to modify them as the implementation makes use of the EXT_direct_state_access extension where available and simulates it where it is not.</para>
                    <see-also>
                        <link raw="release()" href="qopengltexture.html#release" type="function">release()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="bind" fullname="QOpenGLTexture::bind" href="qopengltexture.html#bind-1" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="421" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void bind(uint unit, QOpenGLTexture::TextureUnitReset reset)">
                <parameter type="uint" name="unit" default=""/>
                <parameter type="QOpenGLTexture::TextureUnitReset" name="reset" default="DontResetTextureUnit"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2477" column="4">
                    <para>Binds this texture to texture unit <argument>unit</argument> ready for rendering. Note that you do not need to bind <link raw="QOpenGLTexture" href="qopengltexture.html" type="class">QOpenGLTexture</link> objects in order to modify them as the implementation makes use of the EXT_direct_state_access extension where available and simulates it where it is not.</para>
                    <para>If parameter <argument>reset</argument> is <teletype type="highlighted">true</teletype> then this function will restore the active unit to the texture unit that was active upon entry.</para>
                    <see-also>
                        <link raw="release()" href="qopengltexture.html#release" type="function">release()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="release" fullname="QOpenGLTexture::release" href="qopengltexture.html#release" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="422" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void release()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2496" column="4">
                    <para>Unbinds this texture from the currently active texture unit.</para>
                    <see-also>
                        <link raw="bind()" href="qopengltexture.html#bind" type="function">bind()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="release" fullname="QOpenGLTexture::release" href="qopengltexture.html#release-1" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="423" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void release(uint unit, QOpenGLTexture::TextureUnitReset reset)">
                <parameter type="uint" name="unit" default=""/>
                <parameter type="QOpenGLTexture::TextureUnitReset" name="reset" default="DontResetTextureUnit"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2507" column="4">
                    <para>Unbinds this texture from texture unit <argument>unit</argument>.</para>
                    <para>If parameter <argument>reset</argument> is <teletype type="highlighted">true</teletype> then this function will restore the active unit to the texture unit that was active upon entry.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="isBound" fullname="QOpenGLTexture::isBound" href="qopengltexture.html#isBound" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="425" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isBound() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2520" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this texture is bound to the corresponding target of the currently active texture unit.</para>
                    <see-also>
                        <link raw="bind()" href="qopengltexture.html#bind" type="function">bind()</link>
                        <link raw="release()" href="qopengltexture.html#release" type="function">release()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isBound" fullname="QOpenGLTexture::isBound" href="qopengltexture.html#isBound-1" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="426" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isBound(uint unit)">
                <parameter type="uint" name="unit" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2533" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this texture is bound to the corresponding target of texture unit <argument>unit</argument>.</para>
                    <see-also>
                        <link raw="bind()" href="qopengltexture.html#bind" type="function">bind()</link>
                        <link raw="release()" href="qopengltexture.html#release" type="function">release()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="boundTextureId" fullname="QOpenGLTexture::boundTextureId" href="qopengltexture.html#boundTextureId" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="427" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="GLuint" signature="GLuint boundTextureId(QOpenGLTexture::BindingTarget target)">
                <parameter type="QOpenGLTexture::BindingTarget" name="target" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2546" column="4">
                    <para>Returns the <link raw="textureId" href="qopengltexture.html#textureId" type="function">textureId</link> of the texture that is bound to the <argument>target</argument> of the currently active texture unit.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="boundTextureId" fullname="QOpenGLTexture::boundTextureId" href="qopengltexture.html#boundTextureId-1" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="428" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="GLuint" signature="GLuint boundTextureId(uint unit, QOpenGLTexture::BindingTarget target)">
                <parameter type="uint" name="unit" default=""/>
                <parameter type="QOpenGLTexture::BindingTarget" name="target" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2563" column="4">
                    <para>Returns the <link raw="textureId" href="qopengltexture.html#textureId" type="function">textureId</link> of the texture that is bound to the <argument>target</argument> of the texture unit <argument>unit</argument>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setFormat" fullname="QOpenGLTexture::setFormat" href="qopengltexture.html#setFormat" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="431" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setFormat(QOpenGLTexture::TextureFormat format)">
                <parameter type="QOpenGLTexture::TextureFormat" name="format" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2589" column="4">
                    <para>Sets the format of this texture object to <argument>format</argument>. This function must be called before texture storage is allocated.</para>
                    <para>Note that all formats may not be supported. The exact set of supported formats is dependent upon your OpenGL implementation and version.</para>
                    <see-also>
                        <link raw="format()" href="qopengltexture.html#format" type="function">format()</link>
                        <link raw="allocateStorage()" href="qopengltexture.html#allocateStorage" type="function">allocateStorage()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="format" fullname="QOpenGLTexture::format" href="qopengltexture.html#format" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="432" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QOpenGLTexture::TextureFormat" signature="QOpenGLTexture::TextureFormat format() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2792" column="4">
                    <para>Returns the format of this texture object.</para>
                    <see-also>
                        <link raw="setFormat()" href="qopengltexture.html#setFormat" type="function">setFormat()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setSize" fullname="QOpenGLTexture::setSize" href="qopengltexture.html#setSize" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="433" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setSize(int width, int height, int depth)">
                <parameter type="int" name="width" default=""/>
                <parameter type="int" name="height" default="1"/>
                <parameter type="int" name="depth" default="1"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2808" column="4">
                    <para>Sets the dimensions of this texture object to <argument>width</argument>, <argument>height</argument>, and <argument>depth</argument>. The default for each dimension is 1. The maximum allowable texture size is dependent upon your OpenGL implementation. Allocating storage for a texture less than the maximum size can still fail if your system is low on resources.</para>
                    <para>If a non-power-of-two <argument>width</argument>, <argument>height</argument> or <argument>depth</argument> is provided and your OpenGL implementation doesn't have support for repeating non-power-of-two textures, then the wrap mode is automatically set to <link raw="ClampToEdge" href="qopengltexture.html#WrapMode-enum" type="enum" enum="QOpenGLTexture::WrapMode">ClampToEdge</link>.</para>
                    <see-also>
                        <link raw="width()" href="qopengltexture.html#width" type="function">width()</link>
                        <link raw="height()" href="qopengltexture.html#height" type="function">height()</link>
                        <link raw="depth()" href="qopengltexture.html#depth" type="function">depth()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="width" fullname="QOpenGLTexture::width" href="qopengltexture.html#width" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="434" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="int" signature="int width() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2869" column="4">
                    <para>Returns the width of a 1D, 2D or 3D texture.</para>
                    <see-also>
                        <link raw="height()" href="qopengltexture.html#height" type="function">height()</link>
                        <link raw="depth()" href="qopengltexture.html#depth" type="function">depth()</link>
                        <link raw="setSize()" href="qopengltexture.html#setSize" type="function">setSize()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="height" fullname="QOpenGLTexture::height" href="qopengltexture.html#height" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="435" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="int" signature="int height() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2880" column="4">
                    <para>Returns the height of a 2D or 3D texture.</para>
                    <see-also>
                        <link raw="width()" href="qopengltexture.html#width" type="function">width()</link>
                        <link raw="depth()" href="qopengltexture.html#depth" type="function">depth()</link>
                        <link raw="setSize()" href="qopengltexture.html#setSize" type="function">setSize()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="depth" fullname="QOpenGLTexture::depth" href="qopengltexture.html#depth" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="436" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="int" signature="int depth() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2891" column="4">
                    <para>Returns the depth of a 3D texture.</para>
                    <see-also>
                        <link raw="width()" href="qopengltexture.html#width" type="function">width()</link>
                        <link raw="height()" href="qopengltexture.html#height" type="function">height()</link>
                        <link raw="setSize()" href="qopengltexture.html#setSize" type="function">setSize()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMipLevels" fullname="QOpenGLTexture::setMipLevels" href="qopengltexture.html#setMipLevels" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="437" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setMipLevels(int levels)">
                <parameter type="int" name="levels" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2902" column="4">
                    <para>For texture targets that support mipmaps, this function sets the requested number of mipmap <argument>levels</argument> to allocate storage for. This function should be called before storage is allocated for the texture.</para>
                    <para>If the texture target does not support mipmaps this function has no effect.</para>
                    <see-also>
                        <link raw="mipLevels()" href="qopengltexture.html#mipLevels" type="function">mipLevels()</link>
                        <link raw="maximumMipLevels()" href="qopengltexture.html#maximumMipLevels" type="function">maximumMipLevels()</link>
                        <link raw="isStorageAllocated()" href="qopengltexture.html#isStorageAllocated" type="function">isStorageAllocated()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="mipLevels" fullname="QOpenGLTexture::mipLevels" href="qopengltexture.html#mipLevels" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="438" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="int" signature="int mipLevels() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2943" column="4">
                    <para>Returns the number of mipmap levels for this texture. If storage has not yet been allocated for this texture it returns the requested number of mipmap levels.</para>
                    <see-also>
                        <link raw="setMipLevels()" href="qopengltexture.html#setMipLevels" type="function">setMipLevels()</link>
                        <link raw="maximumMipLevels()" href="qopengltexture.html#maximumMipLevels" type="function">maximumMipLevels()</link>
                        <link raw="isStorageAllocated()" href="qopengltexture.html#isStorageAllocated" type="function">isStorageAllocated()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="maximumMipLevels" fullname="QOpenGLTexture::maximumMipLevels" href="qopengltexture.html#maximumMipLevels" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="439" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="int" signature="int maximumMipLevels() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2956" column="4">
                    <para>Returns the maximum number of mipmap levels that this texture can have given the current dimensions.</para>
                    <see-also>
                        <link raw="setMipLevels()" href="qopengltexture.html#setMipLevels" type="function">setMipLevels()</link>
                        <link raw="mipLevels()" href="qopengltexture.html#mipLevels" type="function">mipLevels()</link>
                        <link raw="setSize()" href="qopengltexture.html#setSize" type="function">setSize()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setLayers" fullname="QOpenGLTexture::setLayers" href="qopengltexture.html#setLayers" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="440" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setLayers(int layers)">
                <parameter type="int" name="layers" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="2968" column="4">
                    <para>Sets the number of array <argument>layers</argument> to allocate storage for. This function should be called before storage is allocated for the texture.</para>
                    <para>For targets that do not support array layers this function has no effect.</para>
                    <see-also>
                        <link raw="layers()" href="qopengltexture.html#layers" type="function">layers()</link>
                        <link raw="isStorageAllocated()" href="qopengltexture.html#isStorageAllocated" type="function">isStorageAllocated()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="layers" fullname="QOpenGLTexture::layers" href="qopengltexture.html#layers" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="441" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="int" signature="int layers() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3007" column="4">
                    <para>Returns the number of array layers for this texture. If storage has not yet been allocated for this texture then this function returns the requested number of array layers.</para>
                    <para>For texture targets that do not support array layers this will return 1.</para>
                    <see-also>
                        <link raw="setLayers()" href="qopengltexture.html#setLayers" type="function">setLayers()</link>
                        <link raw="isStorageAllocated()" href="qopengltexture.html#isStorageAllocated" type="function">isStorageAllocated()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="faces" fullname="QOpenGLTexture::faces" href="qopengltexture.html#faces" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="442" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="int" signature="int faces() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3023" column="4">
                    <para>Returns the number of faces for this texture. For cubemap and cubemap array type targets this will be 6.</para>
                    <para>For non-cubemap type targets this will return 1.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setSamples" fullname="QOpenGLTexture::setSamples" href="qopengltexture.html#setSamples" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="443" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setSamples(int samples)">
                <parameter type="int" name="samples" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3035" column="4">
                    <para>Sets the number of <argument>samples</argument> to allocate storage for when rendering to a multisample capable texture target. This function should be called before storage is allocated for the texture.</para>
                    <para>For targets that do not support multisampling this function has no effect.</para>
                    <see-also>
                        <link raw="samples()" href="qopengltexture.html#samples" type="function">samples()</link>
                        <link raw="isStorageAllocated()" href="qopengltexture.html#isStorageAllocated" type="function">isStorageAllocated()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="samples" fullname="QOpenGLTexture::samples" href="qopengltexture.html#samples" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="444" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="int" signature="int samples() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3076" column="4">
                    <para>Returns the number of multisample sample points for this texture. If storage has not yet been allocated for this texture then this function returns the requested number of samples.</para>
                    <para>For texture targets that do not support multisampling this will return 0.</para>
                    <see-also>
                        <link raw="setSamples()" href="qopengltexture.html#setSamples" type="function">setSamples()</link>
                        <link raw="isStorageAllocated()" href="qopengltexture.html#isStorageAllocated" type="function">isStorageAllocated()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setFixedSamplePositions" fullname="QOpenGLTexture::setFixedSamplePositions" href="qopengltexture.html#setFixedSamplePositions" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="445" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setFixedSamplePositions(bool fixed)">
                <parameter type="bool" name="fixed" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3092" column="4">
                    <para>Sets whether the sample positions and number of samples used with a multisample capable texture target to <argument>fixed</argument>. If set to <teletype type="highlighted">true</teletype> the sample positions and number of samples used are the same for all texels in the image and will not depend upon the image size or internal format. This function should be called before storage is allocated for the texture.</para>
                    <para>For targets that do not support multisampling this function has no effect.</para>
                    <para>The default value is <teletype type="highlighted">true</teletype>.</para>
                    <see-also>
                        <link raw="isFixedSamplePositions()" href="qopengltexture.html#isFixedSamplePositions" type="function">isFixedSamplePositions()</link>
                        <link raw="isStorageAllocated()" href="qopengltexture.html#isStorageAllocated" type="function">isStorageAllocated()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isFixedSamplePositions" fullname="QOpenGLTexture::isFixedSamplePositions" href="qopengltexture.html#isFixedSamplePositions" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="446" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isFixedSamplePositions() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3138" column="4">
                    <para>Returns whether this texture uses a fixed pattern of multisample samples. If storage has not yet been allocated for this texture then this function returns the requested fixed sample position setting.</para>
                    <para>For texture targets that do not support multisampling this will return <teletype type="highlighted">true</teletype>.</para>
                    <see-also>
                        <link raw="setFixedSamplePositions()" href="qopengltexture.html#setFixedSamplePositions" type="function">setFixedSamplePositions()</link>
                        <link raw="isStorageAllocated()" href="qopengltexture.html#isStorageAllocated" type="function">isStorageAllocated()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="allocateStorage" fullname="QOpenGLTexture::allocateStorage" href="qopengltexture.html#allocateStorage" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="447" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void allocateStorage()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3154" column="4">
                    <para>Allocates server-side storage for this texture object taking into account, the format, dimensions, mipmap levels, array layers and cubemap faces.</para>
                    <para>Once storage has been allocated it is no longer possible to change these properties.</para>
                    <para>If supported <link raw="QOpenGLTexture" href="qopengltexture.html" type="class">QOpenGLTexture</link> makes use of immutable texture storage.</para>
                    <para>Once storage has been allocated for the texture then pixel data can be uploaded via one of the <link raw="setData()" href="qopengltexture.html#setData" type="function">setData()</link> overloads.</para>
                    <para>
                        <bold>Note:</bold> If immutable texture storage is not available, then a default pixel format and pixel type will be used to create the mutable storage. You can use the other  overload to specify exactly the pixel format and the pixel type to use when allocating mutable storage; this is particulary useful under certain OpenGL ES implementations (notably, OpenGL ES 2), where the pixel format and the pixel type used at allocation time must perfectly match the format and the type passed to any subsequent <link raw="setData()" href="qopengltexture.html#setData" type="function">setData()</link> call.</para>
                    <see-also>
                        <link raw="isStorageAllocated()" href="qopengltexture.html#isStorageAllocated" type="function">isStorageAllocated()</link>
                        <link raw="setData()" href="qopengltexture.html#setData" type="function">setData()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="allocateStorage" fullname="QOpenGLTexture::allocateStorage" href="qopengltexture.html#allocateStorage-1" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="448" since="5.5" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void allocateStorage(QOpenGLTexture::PixelFormat pixelFormat, QOpenGLTexture::PixelType pixelType)">
                <parameter type="QOpenGLTexture::PixelFormat" name="pixelFormat" default=""/>
                <parameter type="QOpenGLTexture::PixelType" name="pixelType" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3190" column="4">
                    <para>Allocates server-side storage for this texture object taking into account, the format, dimensions, mipmap levels, array layers and cubemap faces.</para>
                    <para>Once storage has been allocated it is no longer possible to change these properties.</para>
                    <para>If supported <link raw="QOpenGLTexture" href="qopengltexture.html" type="class">QOpenGLTexture</link> makes use of immutable texture storage. However, if immutable texture storage is not available, then the specified <argument>pixelFormat</argument> and <argument>pixelType</argument> will be used to allocate mutable storage; note that in certain OpenGL implementations (notably, OpenGL ES 2) they must perfectly match the format and the type passed to any subsequent <link raw="setData()" href="qopengltexture.html#setData" type="function">setData()</link> call.</para>
                    <para>Once storage has been allocated for the texture then pixel data can be uploaded via one of the <link raw="setData()" href="qopengltexture.html#setData" type="function">setData()</link> overloads.</para>
                    <see-also>
                        <link raw="isStorageAllocated()" href="qopengltexture.html#isStorageAllocated" type="function">isStorageAllocated()</link>
                        <link raw="setData()" href="qopengltexture.html#setData" type="function">setData()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isStorageAllocated" fullname="QOpenGLTexture::isStorageAllocated" href="qopengltexture.html#isStorageAllocated" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="449" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isStorageAllocated() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3219" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if server-side storage for this texture as been allocated.</para>
                    <para>The texture format, dimensions, mipmap levels and array layers cannot be altered once storage ihas been allocated.</para>
                    <see-also>
                        <link raw="allocateStorage()" href="qopengltexture.html#allocateStorage" type="function">allocateStorage()</link>
                        <link raw="setSize()" href="qopengltexture.html#setSize" type="function">setSize()</link>
                        <link raw="setMipLevels()" href="qopengltexture.html#setMipLevels" type="function">setMipLevels()</link>
                        <link raw="setLayers()" href="qopengltexture.html#setLayers" type="function">setLayers()</link>
                        <link raw="setFormat()" href="qopengltexture.html#setFormat" type="function">setFormat()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="createTextureView" fullname="QOpenGLTexture::createTextureView" href="qopengltexture.html#createTextureView" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="451" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QOpenGLTexture *" signature="QOpenGLTexture * createTextureView(QOpenGLTexture::Target target, QOpenGLTexture::TextureFormat viewFormat, int minimumMipmapLevel, int maximumMipmapLevel, int minimumLayer, int maximumLayer) const">
                <parameter type="QOpenGLTexture::Target" name="target" default=""/>
                <parameter type="QOpenGLTexture::TextureFormat" name="viewFormat" default=""/>
                <parameter type="int" name="minimumMipmapLevel" default=""/>
                <parameter type="int" name="maximumMipmapLevel" default=""/>
                <parameter type="int" name="minimumLayer" default=""/>
                <parameter type="int" name="maximumLayer" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3234" column="4">
                    <para>Attempts to create a texture view onto this texture. A texture view is somewhat analogous to a view in SQL in that it presents a restricted or reinterpreted view of the original data. Texture views do not allocate any more server-side storage, insted relying on the storage buffer of the source texture.</para>
                    <para>Texture views are only available when using immutable storage. For more information on texture views see http://www.opengl.org/wiki/Texture_Storage#Texture_views.</para>
                    <para>The <argument>target</argument> argument specifies the target to use for the view. Only some targets can be used depending upon the target of the original target. For e.g. a view onto a <link raw="Target1DArray" href="qopengltexture.html#Target-enum" type="enum" enum="QOpenGLTexture::Target">Target1DArray</link> texture can specify either <link raw="Target1DArray" href="qopengltexture.html#Target-enum" type="enum" enum="QOpenGLTexture::Target">Target1DArray</link> or <link raw="Target1D" href="qopengltexture.html#Target-enum" type="enum" enum="QOpenGLTexture::Target">Target1D</link> but for the latter the number of array layers specified with <argument>minimumLayer</argument> and <argument>maximumLayer</argument> must be exactly 1.</para>
                    <para>Simpliar constraints apply for the <argument>viewFormat</argument>. See the above link and the specification for more details.</para>
                    <para>The <argument>minimumMipmapLevel</argument>, <argument>maximumMipmapLevel</argument>, <argument>minimumLayer</argument>, and <argument>maximumLayer</argument> arguments serve to restrict the parts of the texture accessible by the texture view.</para>
                    <para>If creation of the texture view fails this function will return 0. If the function succeeds it will return a pointer to a new <link raw="QOpenGLTexture" href="qopengltexture.html" type="class">QOpenGLTexture</link> object that will return <teletype type="highlighted">true</teletype> from its <link raw="isTextureView()" href="qopengltexture.html#isTextureView" type="function">isTextureView()</link> function.</para>
                    <see-also>
                        <link raw="isTextureView()" href="qopengltexture.html#isTextureView" type="function">isTextureView()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isTextureView" fullname="QOpenGLTexture::isTextureView" href="qopengltexture.html#isTextureView" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="455" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isTextureView() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3283" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this texture object is actually a view onto another texture object.</para>
                    <see-also>
                        <link raw="createTextureView()" href="qopengltexture.html#createTextureView" type="function">createTextureView()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setData" fullname="QOpenGLTexture::setData" href="qopengltexture-obsolete.html#setData-4" status="obsolete" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="460" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="4" type="void" signature="void setData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="mipLevel" default=""/>
                <parameter type="int" name="layer" default=""/>
                <parameter type="QOpenGLTexture::CubeMapFace" name="cubeFace" default=""/>
                <parameter type="QOpenGLTexture::PixelFormat" name="sourceFormat" default=""/>
                <parameter type="QOpenGLTexture::PixelType" name="sourceType" default=""/>
                <parameter type="void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3384" column="4">
                    <para>This is an overloaded function.</para>
                    <see-also>
                        <link raw="setCompressedData()" href="qopengltexture.html#setCompressedData" type="function">setCompressedData()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setData" fullname="QOpenGLTexture::setData" href="qopengltexture-obsolete.html#setData-1" status="obsolete" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="463" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" type="void" signature="void setData(int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="mipLevel" default=""/>
                <parameter type="int" name="layer" default=""/>
                <parameter type="QOpenGLTexture::PixelFormat" name="sourceFormat" default=""/>
                <parameter type="QOpenGLTexture::PixelType" name="sourceType" default=""/>
                <parameter type="void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3404" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setData" fullname="QOpenGLTexture::setData" href="qopengltexture-obsolete.html#setData-2" status="obsolete" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="466" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="2" type="void" signature="void setData(int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="mipLevel" default=""/>
                <parameter type="QOpenGLTexture::PixelFormat" name="sourceFormat" default=""/>
                <parameter type="QOpenGLTexture::PixelType" name="sourceType" default=""/>
                <parameter type="void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3417" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setData" fullname="QOpenGLTexture::setData" href="qopengltexture-obsolete.html#setData-3" status="obsolete" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="469" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="3" type="void" signature="void setData(QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="QOpenGLTexture::PixelFormat" name="sourceFormat" default=""/>
                <parameter type="QOpenGLTexture::PixelType" name="sourceType" default=""/>
                <parameter type="void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3430" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setData" fullname="QOpenGLTexture::setData" href="qopengltexture.html#setData" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="473" since="5.3" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="mipLevel" default=""/>
                <parameter type="int" name="layer" default=""/>
                <parameter type="QOpenGLTexture::CubeMapFace" name="cubeFace" default=""/>
                <parameter type="QOpenGLTexture::PixelFormat" name="sourceFormat" default=""/>
                <parameter type="QOpenGLTexture::PixelType" name="sourceType" default=""/>
                <parameter type="const void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3296" column="4">
                    <para>Uploads pixel <argument>data</argument> for this texture object <argument>mipLevel</argument>, array <argument>layer</argument>, and <argument>cubeFace</argument>. Storage must have been allocated before uploading pixel data. Some overloads of  will set appropriate dimensions, mipmap levels, and array layers and then allocate storage for you if they have enough information to do so. This will be noted in the function documentation.</para>
                    <para>The structure of the pixel data pointed to by <argument>data</argument> is specified by <argument>sourceFormat</argument> and <argument>sourceType</argument>. The pixel data upload can optionally be controlled by <argument>options</argument>.</para>
                    <para>If using a compressed <link raw="format()" href="qopengltexture.html#format" type="function">format()</link> then you should use <link raw="setCompressedData()" href="qopengltexture.html#setCompressedData" type="function">setCompressedData()</link> instead of this function.</para>
                    <see-also>
                        <link raw="setCompressedData()" href="qopengltexture.html#setCompressedData" type="function">setCompressedData()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setData" fullname="QOpenGLTexture::setData" href="qopengltexture.html#setData-5" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="476" since="5.9" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="5" type="void" signature="void setData(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="mipLevel" default=""/>
                <parameter type="int" name="layer" default=""/>
                <parameter type="int" name="layerCount" default=""/>
                <parameter type="QOpenGLTexture::CubeMapFace" name="cubeFace" default=""/>
                <parameter type="QOpenGLTexture::PixelFormat" name="sourceFormat" default=""/>
                <parameter type="QOpenGLTexture::PixelType" name="sourceType" default=""/>
                <parameter type="const void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3326" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Parameter <argument>layerCount</argument> is the number of layers in a texture array that are being uploaded/populated by this call.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setData" fullname="QOpenGLTexture::setData" href="qopengltexture.html#setData-6" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="479" since="5.3" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="6" type="void" signature="void setData(int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="mipLevel" default=""/>
                <parameter type="int" name="layer" default=""/>
                <parameter type="QOpenGLTexture::PixelFormat" name="sourceFormat" default=""/>
                <parameter type="QOpenGLTexture::PixelType" name="sourceType" default=""/>
                <parameter type="const void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3345" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setData" fullname="QOpenGLTexture::setData" href="qopengltexture.html#setData-7" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="482" since="5.3" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="7" type="void" signature="void setData(int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="mipLevel" default=""/>
                <parameter type="QOpenGLTexture::PixelFormat" name="sourceFormat" default=""/>
                <parameter type="QOpenGLTexture::PixelType" name="sourceType" default=""/>
                <parameter type="const void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3358" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setData" fullname="QOpenGLTexture::setData" href="qopengltexture.html#setData-8" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="485" since="5.3" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="8" type="void" signature="void setData(QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="QOpenGLTexture::PixelFormat" name="sourceFormat" default=""/>
                <parameter type="QOpenGLTexture::PixelType" name="sourceType" default=""/>
                <parameter type="const void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3371" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setCompressedData" fullname="QOpenGLTexture::setCompressedData" href="qopengltexture-obsolete.html#setCompressedData-4" status="obsolete" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="491" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="4" type="void" signature="void setCompressedData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="mipLevel" default=""/>
                <parameter type="int" name="layer" default=""/>
                <parameter type="QOpenGLTexture::CubeMapFace" name="cubeFace" default=""/>
                <parameter type="int" name="dataSize" default=""/>
                <parameter type="void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3556" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setCompressedData" fullname="QOpenGLTexture::setCompressedData" href="qopengltexture-obsolete.html#setCompressedData-1" status="obsolete" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="494" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" type="void" signature="void setCompressedData(int mipLevel, int layer, int dataSize, void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="mipLevel" default=""/>
                <parameter type="int" name="layer" default=""/>
                <parameter type="int" name="dataSize" default=""/>
                <parameter type="void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3574" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setCompressedData" fullname="QOpenGLTexture::setCompressedData" href="qopengltexture-obsolete.html#setCompressedData-2" status="obsolete" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="497" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="2" type="void" signature="void setCompressedData(int mipLevel, int dataSize, void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="mipLevel" default=""/>
                <parameter type="int" name="dataSize" default=""/>
                <parameter type="void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3586" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setCompressedData" fullname="QOpenGLTexture::setCompressedData" href="qopengltexture-obsolete.html#setCompressedData-3" status="obsolete" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="499" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="3" type="void" signature="void setCompressedData(int dataSize, void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="dataSize" default=""/>
                <parameter type="void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3598" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setCompressedData" fullname="QOpenGLTexture::setCompressedData" href="qopengltexture.html#setCompressedData" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="503" since="5.3" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setCompressedData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="mipLevel" default=""/>
                <parameter type="int" name="layer" default=""/>
                <parameter type="QOpenGLTexture::CubeMapFace" name="cubeFace" default=""/>
                <parameter type="int" name="dataSize" default=""/>
                <parameter type="const void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3479" column="4">
                    <para>Uploads compressed pixel <argument>data</argument> to <argument>mipLevel</argument>, array <argument>layer</argument>, and <argument>cubeFace</argument>. The pixel transfer can optionally be controlled with <argument>options</argument>. The <argument>dataSize</argument> argument should specify the size of the data pointed to by <argument>data</argument>.</para>
                    <para>If not using a compressed <link raw="format()" href="qopengltexture.html#format" type="function">format()</link> then you should use <link raw="setData()" href="qopengltexture.html#setData" type="function">setData()</link> instead of this function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setCompressedData" fullname="QOpenGLTexture::setCompressedData" href="qopengltexture.html#setCompressedData-5" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="506" since="5.9" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="5" type="void" signature="void setCompressedData(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="mipLevel" default=""/>
                <parameter type="int" name="layer" default=""/>
                <parameter type="int" name="layerCount" default=""/>
                <parameter type="QOpenGLTexture::CubeMapFace" name="cubeFace" default=""/>
                <parameter type="int" name="dataSize" default=""/>
                <parameter type="const void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3503" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Parameter <argument>layerCount</argument> is the number of layers in a texture array that are being uploaded/populated by this call.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setCompressedData" fullname="QOpenGLTexture::setCompressedData" href="qopengltexture.html#setCompressedData-6" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="509" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="6" type="void" signature="void setCompressedData(int mipLevel, int layer, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="mipLevel" default=""/>
                <parameter type="int" name="layer" default=""/>
                <parameter type="int" name="dataSize" default=""/>
                <parameter type="const void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3522" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setCompressedData" fullname="QOpenGLTexture::setCompressedData" href="qopengltexture.html#setCompressedData-7" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="512" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="7" type="void" signature="void setCompressedData(int mipLevel, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="mipLevel" default=""/>
                <parameter type="int" name="dataSize" default=""/>
                <parameter type="const void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3533" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setCompressedData" fullname="QOpenGLTexture::setCompressedData" href="qopengltexture.html#setCompressedData-8" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="514" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="8" type="void" signature="void setCompressedData(int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)">
                <parameter type="int" name="dataSize" default=""/>
                <parameter type="const void *" name="data" default=""/>
                <parameter type="const QOpenGLPixelTransferOptions *const" name="options" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3544" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setData" fullname="QOpenGLTexture::setData" href="qopengltexture.html#setData-9" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="518" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="9" type="void" signature="void setData(const QImage &amp;image, QOpenGLTexture::MipMapGeneration genMipMaps)">
                <parameter type="const QImage &amp;" name="image" default=""/>
                <parameter type="QOpenGLTexture::MipMapGeneration" name="genMipMaps" default="GenerateMipMaps"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3443" column="4">
                    <para>This overload of <link raw="setData()" href="qopengltexture.html#setData" type="function">setData()</link> will allocate storage for you. The pixel data is contained in <argument>image</argument>. Mipmaps are generated by default. Set <argument>genMipMaps</argument> to <link raw="DontGenerateMipMaps" href="qopengltexture.html#MipMapGeneration-enum" type="enum" enum="QOpenGLTexture::MipMapGeneration">DontGenerateMipMaps</link> to turn off mipmap generation.</para>
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="hasFeature" fullname="QOpenGLTexture::hasFeature" href="qopengltexture.html#hasFeature" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="520" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool hasFeature(QOpenGLTexture::Feature feature)">
                <parameter type="QOpenGLTexture::Feature" name="feature" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3611" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if your OpenGL implementation and version supports the texture feature <argument>feature</argument>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMipBaseLevel" fullname="QOpenGLTexture::setMipBaseLevel" href="qopengltexture.html#setMipBaseLevel" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="523" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setMipBaseLevel(int baseLevel)">
                <parameter type="int" name="baseLevel" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3786" column="4">
                    <para>Sets the base mipmap level used for all texture lookups with this texture to <argument>baseLevel</argument>.</para>
                    <para>
                        <bold>Note:</bold> This function has no effect on Qt built for OpenGL ES 2.</para>
                    <see-also>
                        <link raw="mipBaseLevel()" href="qopengltexture.html#mipBaseLevel" type="function">mipBaseLevel()</link>
                        <link raw="setMipMaxLevel()" href="qopengltexture.html#setMipMaxLevel" type="function">setMipMaxLevel()</link>
                        <link raw="setMipLevelRange()" href="qopengltexture.html#setMipLevelRange" type="function">setMipLevelRange()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="mipBaseLevel" fullname="QOpenGLTexture::mipBaseLevel" href="qopengltexture.html#mipBaseLevel" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="524" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="int" signature="int mipBaseLevel() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3807" column="4">
                    <para>Returns the mipmap base level used for all texture lookups with this texture. The default is 0.</para>
                    <see-also>
                        <link raw="setMipBaseLevel()" href="qopengltexture.html#setMipBaseLevel" type="function">setMipBaseLevel()</link>
                        <link raw="mipMaxLevel()" href="qopengltexture.html#mipMaxLevel" type="function">mipMaxLevel()</link>
                        <link raw="mipLevelRange()" href="qopengltexture.html#mipLevelRange" type="function">mipLevelRange()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMipMaxLevel" fullname="QOpenGLTexture::setMipMaxLevel" href="qopengltexture.html#setMipMaxLevel" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="525" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setMipMaxLevel(int maxLevel)">
                <parameter type="int" name="maxLevel" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3819" column="4">
                    <para>Sets the maximum mipmap level used for all texture lookups with this texture to <argument>maxLevel</argument>.</para>
                    <para>
                        <bold>Note:</bold> This function has no effect on Qt built for OpenGL ES 2.</para>
                    <see-also>
                        <link raw="mipMaxLevel()" href="qopengltexture.html#mipMaxLevel" type="function">mipMaxLevel()</link>
                        <link raw="setMipBaseLevel()" href="qopengltexture.html#setMipBaseLevel" type="function">setMipBaseLevel()</link>
                        <link raw="setMipLevelRange()" href="qopengltexture.html#setMipLevelRange" type="function">setMipLevelRange()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="mipMaxLevel" fullname="QOpenGLTexture::mipMaxLevel" href="qopengltexture.html#mipMaxLevel" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="526" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="int" signature="int mipMaxLevel() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3840" column="4">
                    <para>Returns the mipmap maximum level used for all texture lookups with this texture.</para>
                    <see-also>
                        <link raw="setMipMaxLevel()" href="qopengltexture.html#setMipMaxLevel" type="function">setMipMaxLevel()</link>
                        <link raw="mipBaseLevel()" href="qopengltexture.html#mipBaseLevel" type="function">mipBaseLevel()</link>
                        <link raw="mipLevelRange()" href="qopengltexture.html#mipLevelRange" type="function">mipLevelRange()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMipLevelRange" fullname="QOpenGLTexture::setMipLevelRange" href="qopengltexture.html#setMipLevelRange" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="527" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setMipLevelRange(int baseLevel, int maxLevel)">
                <parameter type="int" name="baseLevel" default=""/>
                <parameter type="int" name="maxLevel" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3851" column="4">
                    <para>Sets the range of mipmap levels that can be used for texture lookups with this texture to range from <argument>baseLevel</argument> to <argument>maxLevel</argument>.</para>
                    <para>
                        <bold>Note:</bold> This function has no effect on Qt built for OpenGL ES 2.</para>
                    <see-also>
                        <link raw="setMipBaseLevel()" href="qopengltexture.html#setMipBaseLevel" type="function">setMipBaseLevel()</link>
                        <link raw="setMipMaxLevel()" href="qopengltexture.html#setMipMaxLevel" type="function">setMipMaxLevel()</link>
                        <link raw="mipLevelRange()" href="qopengltexture.html#mipLevelRange" type="function">mipLevelRange()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="mipLevelRange" fullname="QOpenGLTexture::mipLevelRange" href="qopengltexture.html#mipLevelRange" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="528" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QPair&lt;int, int&gt;" signature="QPair&lt;int, int&gt; mipLevelRange() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3873" column="4">
                    <para>Returns the range of mipmap levels that can be used for texture lookups with this texture.</para>
                    <see-also>
                        <link raw="setMipLevelRange()" href="qopengltexture.html#setMipLevelRange" type="function">setMipLevelRange()</link>
                        <link raw="mipBaseLevel()" href="qopengltexture.html#mipBaseLevel" type="function">mipBaseLevel()</link>
                        <link raw="mipMaxLevel()" href="qopengltexture.html#mipMaxLevel" type="function">mipMaxLevel()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setAutoMipMapGenerationEnabled" fullname="QOpenGLTexture::setAutoMipMapGenerationEnabled" href="qopengltexture.html#setAutoMipMapGenerationEnabled" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="530" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setAutoMipMapGenerationEnabled(bool enabled)">
                <parameter type="bool" name="enabled" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3884" column="4">
                    <para>If <argument>enabled</argument> is <teletype type="highlighted">true</teletype>, enables automatic mipmap generation for this texture object to occur whenever the level 0 mipmap data is set via <link raw="setData()" href="qopengltexture.html#setData" type="function">setData()</link>.</para>
                    <para>The automatic mipmap generation is enabled by default.</para>
                    <para>
                        <bold>Note:</bold> Mipmap generation is not supported for compressed textures with OpenGL ES 2.0.</para>
                    <see-also>
                        <link raw="isAutoMipMapGenerationEnabled()" href="qopengltexture.html#isAutoMipMapGenerationEnabled" type="function">isAutoMipMapGenerationEnabled()</link>
                        <link raw="generateMipMaps()" href="qopengltexture.html#generateMipMaps" type="function">generateMipMaps()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isAutoMipMapGenerationEnabled" fullname="QOpenGLTexture::isAutoMipMapGenerationEnabled" href="qopengltexture.html#isAutoMipMapGenerationEnabled" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="531" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isAutoMipMapGenerationEnabled() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3900" column="4">
                    <para>Returns whether auto mipmap generation is enabled for this texture object.</para>
                    <see-also>
                        <link raw="setAutoMipMapGenerationEnabled()" href="qopengltexture.html#setAutoMipMapGenerationEnabled" type="function">setAutoMipMapGenerationEnabled()</link>
                        <link raw="generateMipMaps()" href="qopengltexture.html#generateMipMaps" type="function">generateMipMaps()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="generateMipMaps" fullname="QOpenGLTexture::generateMipMaps" href="qopengltexture.html#generateMipMaps" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="533" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void generateMipMaps()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3911" column="4">
                    <para>Generates mipmaps for this texture object from mipmap level 0. If you are using a texture target and filtering option that requires mipmaps and you have disabled automatic mipmap generation then you need to call this function or the overload to create the mipmap chain.</para>
                    <para>
                        <bold>Note:</bold> Mipmap generation is not supported for compressed textures with OpenGL ES 2.0.</para>
                    <see-also>
                        <link raw="setAutoMipMapGenerationEnabled()" href="qopengltexture.html#setAutoMipMapGenerationEnabled" type="function">setAutoMipMapGenerationEnabled()</link>
                        <link raw="setMipLevels()" href="qopengltexture.html#setMipLevels" type="function">setMipLevels()</link>
                        <link raw="mipLevels()" href="qopengltexture.html#mipLevels" type="function">mipLevels()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="generateMipMaps" fullname="QOpenGLTexture::generateMipMaps" href="qopengltexture.html#generateMipMaps-1" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="534" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void generateMipMaps(int baseLevel, bool resetBaseLevel)">
                <parameter type="int" name="baseLevel" default=""/>
                <parameter type="bool" name="resetBaseLevel" default="true"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3935" column="4">
                    <para>Generates mipmaps for this texture object from mipmap level <argument>baseLevel</argument>. If you are using a texture target and filtering option that requires mipmaps and you have disabled automatic mipmap generation then you need to call this function or the overload to create the mipmap chain.</para>
                    <para>The generation of mipmaps to above <argument>baseLevel</argument> is achieved by setting the mipmap base level to <argument>baseLevel</argument> and then generating the mipmap chain. If <argument>resetBaseLevel</argument> is <teletype type="highlighted">true</teletype>, then the baseLevel of the texture will be reset to its previous value.</para>
                    <see-also>
                        <link raw="setAutoMipMapGenerationEnabled()" href="qopengltexture.html#setAutoMipMapGenerationEnabled" type="function">setAutoMipMapGenerationEnabled()</link>
                        <link raw="setMipLevels()" href="qopengltexture.html#setMipLevels" type="function">setMipLevels()</link>
                        <link raw="mipLevels()" href="qopengltexture.html#mipLevels" type="function">mipLevels()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setSwizzleMask" fullname="QOpenGLTexture::setSwizzleMask" href="qopengltexture.html#setSwizzleMask" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="536" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setSwizzleMask(QOpenGLTexture::SwizzleComponent component, QOpenGLTexture::SwizzleValue value)">
                <parameter type="QOpenGLTexture::SwizzleComponent" name="component" default=""/>
                <parameter type="QOpenGLTexture::SwizzleValue" name="value" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="3966" column="4">
                    <para>GLSL shaders are able to reorder the components of the vec4 returned by texture functions. It is also desirable to be able to control this reordering from CPU side code. This is made possible by swizzle masks since OpenGL 3.3.</para>
                    <para>Each component of the texture can be mapped to one of the <link raw="SwizzleValue" href="qopengltexture.html#SwizzleValue-enum" type="enum" enum="QOpenGLTexture::SwizzleValue">SwizzleValue</link> options.</para>
                    <para>This function maps <argument>component</argument> to the output <argument>value</argument>.</para>
                    <para>
                        <bold>Note:</bold> This function has no effect on Mac and Qt built for OpenGL ES 2.</para>
                    <see-also>
                        <link raw="swizzleMask()" href="qopengltexture.html#swizzleMask" type="function">swizzleMask()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setSwizzleMask" fullname="QOpenGLTexture::setSwizzleMask" href="qopengltexture.html#setSwizzleMask-1" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="537" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" type="void" signature="void setSwizzleMask(QOpenGLTexture::SwizzleValue r, QOpenGLTexture::SwizzleValue g, QOpenGLTexture::SwizzleValue b, QOpenGLTexture::SwizzleValue a)">
                <parameter type="QOpenGLTexture::SwizzleValue" name="r" default=""/>
                <parameter type="QOpenGLTexture::SwizzleValue" name="g" default=""/>
                <parameter type="QOpenGLTexture::SwizzleValue" name="b" default=""/>
                <parameter type="QOpenGLTexture::SwizzleValue" name="a" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4001" column="4">
                    <para>Parameters <argument>r</argument>, <argument>g</argument>, <argument>b</argument>, and <argument>a</argument> are values used for setting the colors red, green, blue, and the alpha value. <para>This is an overloaded function.</para></para>
                </description>
            </function>
            <function threadsafety="unspecified" name="swizzleMask" fullname="QOpenGLTexture::swizzleMask" href="qopengltexture.html#swizzleMask" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="539" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QOpenGLTexture::SwizzleValue" signature="QOpenGLTexture::SwizzleValue swizzleMask(QOpenGLTexture::SwizzleComponent component) const">
                <parameter type="QOpenGLTexture::SwizzleComponent" name="component" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4036" column="4">
                    <para>Returns the swizzle mask for texture <argument>component</argument>.</para>
                    <see-also>
                        <link raw="setSwizzleMask()" href="qopengltexture.html#setSwizzleMask" type="function">setSwizzleMask()</link>
                    </see-also>
                </description>
            </function>
            <enum threadsafety="unspecified" name="DepthStencilMode" fullname="QOpenGLTexture::DepthStencilMode" href="qopengltexture.html#DepthStencilMode-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="541" since="5.4">
                <value name="DepthMode" value="0x1902"/>
                <value name="StencilMode" value="0x1901"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4045" column="4">
                    <para>This enum specifies which component of a depth/stencil texture is accessed when the texture is sampled.</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::DepthMode</term>DepthMode</definition>
                        <item>
                            <para>Equivalent to GL_DEPTH_COMPONENT.</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::StencilMode</term>StencilMode</definition>
                        <item>
                            <para>Equivalent to GL_STENCIL_INDEX.</para>
                        </item>
                    </list>
                </description>
            </enum>
            <function threadsafety="unspecified" name="setDepthStencilMode" fullname="QOpenGLTexture::setDepthStencilMode" href="qopengltexture.html#setDepthStencilMode" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="547" since="5.4" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setDepthStencilMode(QOpenGLTexture::DepthStencilMode mode)">
                <parameter type="QOpenGLTexture::DepthStencilMode" name="mode" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4055" column="4">
                    <para>If using a texture that has a combined depth/stencil format this function sets which component of the texture is accessed to <argument>mode</argument>.</para>
                    <para>When the parameter is set to <link raw="DepthMode" href="qopengltexture.html#DepthStencilMode-enum" type="enum" enum="QOpenGLTexture::DepthStencilMode">DepthMode</link>, then accessing it from the shader will access the depth component as a single float, as normal. But when the parameter is set to <link raw="StencilMode" href="qopengltexture.html#DepthStencilMode-enum" type="enum" enum="QOpenGLTexture::DepthStencilMode">StencilMode</link>, the shader will access the stencil component.</para>
                    <para>
                        <bold>Note:</bold> This function has no effect on Mac and Qt built for OpenGL ES 2.</para>
                    <see-also>
                        <link raw="depthStencilMode()" href="qopengltexture.html#depthStencilMode" type="function">depthStencilMode()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="depthStencilMode" fullname="QOpenGLTexture::depthStencilMode" href="qopengltexture.html#depthStencilMode" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="548" since="5.4" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QOpenGLTexture::DepthStencilMode" signature="QOpenGLTexture::DepthStencilMode depthStencilMode() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4089" column="4">
                    <para>Returns the depth stencil mode for textures using a combined depth/stencil format.</para>
                    <see-also>
                        <link raw="setDepthStencilMode()" href="qopengltexture.html#setDepthStencilMode" type="function">setDepthStencilMode()</link>
                    </see-also>
                </description>
            </function>
            <enum threadsafety="unspecified" name="ComparisonFunction" fullname="QOpenGLTexture::ComparisonFunction" href="qopengltexture.html#ComparisonFunction-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="550" since="5.5">
                <value name="CompareLessEqual" value="0x0203"/>
                <value name="CompareGreaterEqual" value="0x0206"/>
                <value name="CompareLess" value="0x0201"/>
                <value name="CompareGreater" value="0x0204"/>
                <value name="CompareEqual" value="0x0202"/>
                <value name="CommpareNotEqual" value="0x0205"/>
                <value name="CompareAlways" value="0x0207"/>
                <value name="CompareNever" value="0x0200"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4101" column="4">
                    <para>This enum specifies which comparison operator is used when texture comparison is enabled on this texture.</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::CompareLessEqual</term>CompareLessEqual</definition>
                        <item>
                            <para>Equivalent to GL_LEQUAL.</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::CompareGreaterEqual</term>CompareGreaterEqual</definition>
                        <item>
                            <para>Equivalent to GL_GEQUAL.</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::CompareLess</term>CompareLess</definition>
                        <item>
                            <para>Equivalent to GL_LESS.</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::CompareGreater</term>CompareGreater</definition>
                        <item>
                            <para>Equivalent to GL_GREATER.</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::CompareEqual</term>CompareEqual</definition>
                        <item>
                            <para>Equivalent to GL_EQUAL.</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::CommpareNotEqual</term>CommpareNotEqual</definition>
                        <item>
                            <para>Equivalent to GL_NOTEQUAL.</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::CompareAlways</term>CompareAlways</definition>
                        <item>
                            <para>Equivalent to GL_ALWAYS.</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::CompareNever</term>CompareNever</definition>
                        <item>
                            <para>Equivalent to GL_NEVER.</para>
                        </item>
                    </list>
                </description>
            </enum>
            <function threadsafety="unspecified" name="setComparisonFunction" fullname="QOpenGLTexture::setComparisonFunction" href="qopengltexture.html#setComparisonFunction" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="562" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setComparisonFunction(QOpenGLTexture::ComparisonFunction function)">
                <parameter type="QOpenGLTexture::ComparisonFunction" name="function" default=""/>
                <description path="" line="0" column="0">
                    <see-also>
                        <link raw="comparisonFunction()" href="qopengltexture.html#comparisonFunction" type="function">comparisonFunction()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="comparisonFunction" fullname="QOpenGLTexture::comparisonFunction" href="qopengltexture.html#comparisonFunction" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="563" since="5.5" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QOpenGLTexture::ComparisonFunction" signature="QOpenGLTexture::ComparisonFunction comparisonFunction() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4138" column="4">
                    <para>Returns the texture comparison operator set on this texture. By default, a texture has a <link raw="CompareLessEqual" href="qopengltexture.html#ComparisonFunction-enum" type="enum" enum="QOpenGLTexture::ComparisonFunction">CompareLessEqual</link> comparison function.</para>
                    <see-also>
                        <link raw="setComparisonFunction()" href="qopengltexture.html#setComparisonFunction" type="function">setComparisonFunction()</link>
                    </see-also>
                </description>
            </function>
            <enum threadsafety="unspecified" name="ComparisonMode" fullname="QOpenGLTexture::ComparisonMode" href="qopengltexture.html#ComparisonMode-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="565" since="5.5">
                <value name="CompareRefToTexture" value="0x884E"/>
                <value name="CompareNone" value="0x0000"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4152" column="4">
                    <para>This enum specifies which comparison mode is used when sampling this texture.</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::CompareRefToTexture</term>CompareRefToTexture</definition>
                        <item>
                            <para>Equivalent to GL_COMPARE_REF_TO_TEXTURE.</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::CompareNone</term>CompareNone</definition>
                        <item>
                            <para>Equivalent to GL_NONE.</para>
                        </item>
                    </list>
                </description>
            </enum>
            <function threadsafety="unspecified" name="setComparisonMode" fullname="QOpenGLTexture::setComparisonMode" href="qopengltexture.html#setComparisonMode" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="570" since="5.5" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setComparisonMode(QOpenGLTexture::ComparisonMode mode)">
                <parameter type="QOpenGLTexture::ComparisonMode" name="mode" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4161" column="4">
                    <para>Sets the texture comparison mode on this texture to <argument>mode</argument>. The texture comparison mode is used by shadow samplers when sampling a depth texture.</para>
                    <see-also>
                        <link raw="comparisonMode()" href="qopengltexture.html#comparisonMode" type="function">comparisonMode()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="comparisonMode" fullname="QOpenGLTexture::comparisonMode" href="qopengltexture.html#comparisonMode" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="571" since="5.5" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QOpenGLTexture::ComparisonMode" signature="QOpenGLTexture::ComparisonMode comparisonMode() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4181" column="4">
                    <para>Returns the texture comparison mode set on this texture. By default, a texture has a <link raw="CompareNone" href="qopengltexture.html#ComparisonMode-enum" type="enum" enum="QOpenGLTexture::ComparisonMode">CompareNone</link> comparison mode (i.e. comparisons are disabled).</para>
                    <see-also>
                        <link raw="setComparisonMode()" href="qopengltexture.html#setComparisonMode" type="function">setComparisonMode()</link>
                    </see-also>
                </description>
            </function>
            <enum threadsafety="unspecified" name="Filter" fullname="QOpenGLTexture::Filter" href="qopengltexture.html#Filter-enum" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="574">
                <value name="Nearest" value="0x2600"/>
                <value name="Linear" value="0x2601"/>
                <value name="NearestMipMapNearest" value="0x2700"/>
                <value name="NearestMipMapLinear" value="0x2702"/>
                <value name="LinearMipMapNearest" value="0x2701"/>
                <value name="LinearMipMapLinear" value="0x2703"/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="1999" column="4">
                    <para>This enum defines the filtering parameters for a <link raw="QOpenGLTexture" href="qopengltexture.html" type="class">QOpenGLTexture</link> object.</para>
                    <list type="enum">
                        <definition>
                            <term>QOpenGLTexture::Nearest</term>Nearest</definition>
                        <item>
                            <para>Equivalent to GL_NEAREST</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::Linear</term>Linear</definition>
                        <item>
                            <para>Equivalent to GL_LINEAR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::NearestMipMapNearest</term>NearestMipMapNearest</definition>
                        <item>
                            <para>Equivalent to GL_NEAREST_MIPMAP_NEAREST</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::NearestMipMapLinear</term>NearestMipMapLinear</definition>
                        <item>
                            <para>Equivalent to GL_NEAREST_MIPMAP_LINEAR</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::LinearMipMapNearest</term>LinearMipMapNearest</definition>
                        <item>
                            <para>Equivalent to GL_LINEAR_MIPMAP_NEAREST</para>
                        </item>
                        <definition>
                            <term>QOpenGLTexture::LinearMipMapLinear</term>LinearMipMapLinear</definition>
                        <item>
                            <para>Equivalent to GL_LINEAR_MIPMAP_LINEAR</para>
                        </item>
                    </list>
                </description>
            </enum>
            <function threadsafety="unspecified" name="setMinificationFilter" fullname="QOpenGLTexture::setMinificationFilter" href="qopengltexture.html#setMinificationFilter" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="584" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setMinificationFilter(QOpenGLTexture::Filter filter)">
                <parameter type="QOpenGLTexture::Filter" name="filter" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4195" column="4">
                    <para>Sets the filter used for minification to <argument>filter</argument>.</para>
                    <see-also>
                        <link raw="minificationFilter()" href="qopengltexture.html#minificationFilter" type="function">minificationFilter()</link>
                        <link raw="setMagnificationFilter()" href="qopengltexture.html#setMagnificationFilter" type="function">setMagnificationFilter()</link>
                        <link raw="setMinMagFilters()" href="qopengltexture.html#setMinMagFilters" type="function">setMinMagFilters()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="minificationFilter" fullname="QOpenGLTexture::minificationFilter" href="qopengltexture.html#minificationFilter" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="585" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QOpenGLTexture::Filter" signature="QOpenGLTexture::Filter minificationFilter() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4210" column="4">
                    <para>Returns the minification filter.</para>
                    <see-also>
                        <link raw="setMinificationFilter()" href="qopengltexture.html#setMinificationFilter" type="function">setMinificationFilter()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMagnificationFilter" fullname="QOpenGLTexture::setMagnificationFilter" href="qopengltexture.html#setMagnificationFilter" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="586" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setMagnificationFilter(QOpenGLTexture::Filter filter)">
                <parameter type="QOpenGLTexture::Filter" name="filter" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4221" column="4">
                    <para>Sets the magnification filter to <argument>filter</argument>.</para>
                    <see-also>
                        <link raw="magnificationFilter()" href="qopengltexture.html#magnificationFilter" type="function">magnificationFilter()</link>
                        <link raw="setMinificationFilter()" href="qopengltexture.html#setMinificationFilter" type="function">setMinificationFilter()</link>
                        <link raw="setMinMagFilters()" href="qopengltexture.html#setMinMagFilters" type="function">setMinMagFilters()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="magnificationFilter" fullname="QOpenGLTexture::magnificationFilter" href="qopengltexture.html#magnificationFilter" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="587" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QOpenGLTexture::Filter" signature="QOpenGLTexture::Filter magnificationFilter() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4236" column="4">
                    <para>Returns the magnification filter.</para>
                    <see-also>
                        <link raw="setMagnificationFilter()" href="qopengltexture.html#setMagnificationFilter" type="function">setMagnificationFilter()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMinMagFilters" fullname="QOpenGLTexture::setMinMagFilters" href="qopengltexture.html#setMinMagFilters" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="588" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setMinMagFilters(QOpenGLTexture::Filter minificationFilter, QOpenGLTexture::Filter magnificationFilter)">
                <parameter type="QOpenGLTexture::Filter" name="minificationFilter" default=""/>
                <parameter type="QOpenGLTexture::Filter" name="magnificationFilter" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4247" column="4">
                    <para>Sets the minification filter to <argument>minificationFilter</argument> and the magnification filter to <argument>magnificationFilter</argument>.</para>
                    <see-also>
                        <link raw="minMagFilters()" href="qopengltexture.html#minMagFilters" type="function">minMagFilters()</link>
                        <link raw="setMinificationFilter()" href="qopengltexture.html#setMinificationFilter" type="function">setMinificationFilter()</link>
                        <link raw="setMagnificationFilter()" href="qopengltexture.html#setMagnificationFilter" type="function">setMagnificationFilter()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="minMagFilters" fullname="QOpenGLTexture::minMagFilters" href="qopengltexture.html#minMagFilters" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="590" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QPair&lt;QOpenGLTexture::Filter, QOpenGLTexture::Filter&gt;" signature="QPair&lt;QOpenGLTexture::Filter, QOpenGLTexture::Filter&gt; minMagFilters() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4266" column="4">
                    <para>Returns the current minification and magnification filters.</para>
                    <see-also>
                        <link raw="setMinMagFilters()" href="qopengltexture.html#setMinMagFilters" type="function">setMinMagFilters()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMaximumAnisotropy" fullname="QOpenGLTexture::setMaximumAnisotropy" href="qopengltexture.html#setMaximumAnisotropy" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="591" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setMaximumAnisotropy(float anisotropy)">
                <parameter type="float" name="anisotropy" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4277" column="4">
                    <para>If your OpenGL implementation supports the GL_EXT_texture_filter_anisotropic extension this function sets the maximum anisotropy level to <argument>anisotropy</argument>.</para>
                    <see-also>
                        <link raw="maximumAnisotropy()" href="qopengltexture.html#maximumAnisotropy" type="function">maximumAnisotropy()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="maximumAnisotropy" fullname="QOpenGLTexture::maximumAnisotropy" href="qopengltexture.html#maximumAnisotropy" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="592" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="float" signature="float maximumAnisotropy() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4297" column="4">
                    <para>Returns the maximum level of anisotropy to be accounted for when performing texture lookups. This requires the GL_EXT_texture_filter_anisotropic extension.</para>
                    <see-also>
                        <link raw="setMaximumAnisotropy()" href="qopengltexture.html#setMaximumAnisotropy" type="function">setMaximumAnisotropy()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setWrapMode" fullname="QOpenGLTexture::setWrapMode" href="qopengltexture.html#setWrapMode" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="594" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setWrapMode(QOpenGLTexture::WrapMode mode)">
                <parameter type="QOpenGLTexture::WrapMode" name="mode" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4309" column="4">
                    <para>Sets the wrap (or repeat mode) for all texture dimentions to <argument>mode</argument>.</para>
                    <see-also>
                        <link raw="wrapMode()" href="qopengltexture.html#wrapMode" type="function">wrapMode()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setWrapMode" fullname="QOpenGLTexture::setWrapMode" href="qopengltexture.html#setWrapMode-1" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="595" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" type="void" signature="void setWrapMode(QOpenGLTexture::CoordinateDirection direction, QOpenGLTexture::WrapMode mode)">
                <parameter type="QOpenGLTexture::CoordinateDirection" name="direction" default=""/>
                <parameter type="QOpenGLTexture::WrapMode" name="mode" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4323" column="4">
                    <para>Holds the texture dimension <argument>direction</argument>. <para>This is an overloaded function.</para></para>
                </description>
            </function>
            <function threadsafety="unspecified" name="wrapMode" fullname="QOpenGLTexture::wrapMode" href="qopengltexture.html#wrapMode" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="596" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QOpenGLTexture::WrapMode" signature="QOpenGLTexture::WrapMode wrapMode(QOpenGLTexture::CoordinateDirection direction) const">
                <parameter type="QOpenGLTexture::CoordinateDirection" name="direction" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4336" column="4">
                    <para>Returns the wrap mode for the texture dimension <argument>direction</argument>.</para>
                    <see-also>
                        <link raw="setWrapMode()" href="qopengltexture.html#setWrapMode" type="function">setWrapMode()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setBorderColor" fullname="QOpenGLTexture::setBorderColor" href="qopengltexture.html#setBorderColor" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="598" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setBorderColor(QColor color)">
                <parameter type="QColor" name="color" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4347" column="4">
                    <para>Sets the border color of the texture to <argument>color</argument>.</para>
                    <para>
                        <bold>Note:</bold> This function has no effect on Mac and Qt built for OpenGL ES 2.</para>
                    <see-also>
                        <link raw="borderColor()" href="qopengltexture.html#borderColor" type="function">borderColor()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setBorderColor" fullname="QOpenGLTexture::setBorderColor" href="qopengltexture.html#setBorderColor-1" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="599" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" type="void" signature="void setBorderColor(float r, float g, float b, float a)">
                <parameter type="float" name="r" default=""/>
                <parameter type="float" name="g" default=""/>
                <parameter type="float" name="b" default=""/>
                <parameter type="float" name="a" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4359" column="4">
                    <para>Sets the color red to <argument>r</argument>, green to <argument>g</argument>, blue to <argument>b</argument>, and <argument>a</argument> to the alpha value. <para>This is an overloaded function.</para></para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setBorderColor" fullname="QOpenGLTexture::setBorderColor" href="qopengltexture.html#setBorderColor-2" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="600" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="2" type="void" signature="void setBorderColor(int r, int g, int b, int a)">
                <parameter type="int" name="r" default=""/>
                <parameter type="int" name="g" default=""/>
                <parameter type="int" name="b" default=""/>
                <parameter type="int" name="a" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4392" column="4">
                    <para>Sets the color red to <argument>r</argument>, green to <argument>g</argument>, blue to <argument>b</argument>, and the alpha value to <argument>a</argument>. <para>This is an overloaded function.</para></para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setBorderColor" fullname="QOpenGLTexture::setBorderColor" href="qopengltexture.html#setBorderColor-3" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="601" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="3" type="void" signature="void setBorderColor(uint r, uint g, uint b, uint a)">
                <parameter type="uint" name="r" default=""/>
                <parameter type="uint" name="g" default=""/>
                <parameter type="uint" name="b" default=""/>
                <parameter type="uint" name="a" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4427" column="4">
                    <para>Sets the color red to <argument>r</argument>, green to <argument>g</argument>, blue to <argument>b</argument>, and the alpha value to <argument>a</argument>. <para>This is an overloaded function.</para></para>
                </description>
            </function>
            <function threadsafety="unspecified" name="borderColor" fullname="QOpenGLTexture::borderColor" href="qopengltexture.html#borderColor" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="603" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QColor" signature="QColor borderColor() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4462" column="4">
                    <para>Returns the  of this texture.</para>
                    <see-also>
                        <link raw="setBorderColor()" href="qopengltexture.html#setBorderColor" type="function">setBorderColor()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="borderColor" fullname="QOpenGLTexture::borderColor" href="qopengltexture.html#borderColor-1" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="604" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void borderColor(float *border) const">
                <parameter type="float *" name="border" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4480" column="4">
                    <para>Writes the texture border color into the first four elements of the array pointed to by <argument>border</argument>.</para>
                    <see-also>
                        <link raw="setBorderColor()" href="qopengltexture.html#setBorderColor" type="function">setBorderColor()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="borderColor" fullname="QOpenGLTexture::borderColor" href="qopengltexture.html#borderColor-2" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="605" virtual="non" meta="plain" const="true" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="2" type="void" signature="void borderColor(int *border) const">
                <parameter type="int *" name="border" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4499" column="4">
                    <para>Writes the texture border color into the first four elements of the array pointed to by <argument>border</argument>.</para>
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="borderColor" fullname="QOpenGLTexture::borderColor" href="qopengltexture.html#borderColor-3" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="606" virtual="non" meta="plain" const="true" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="3" type="void" signature="void borderColor(unsigned int *border) const">
                <parameter type="unsigned int *" name="border" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4518" column="4">
                    <para>Writes the texture border color into the first four elements of the array pointed to by <argument>border</argument>.</para>
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMinimumLevelOfDetail" fullname="QOpenGLTexture::setMinimumLevelOfDetail" href="qopengltexture.html#setMinimumLevelOfDetail" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="608" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setMinimumLevelOfDetail(float value)">
                <parameter type="float" name="value" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4537" column="4">
                    <para>Sets the minimum level of detail to <argument>value</argument>. This limits the selection of highest resolution mipmap (lowest mipmap level). The default value is -1000.</para>
                    <para>
                        <bold>Note:</bold> This function has no effect on Qt built for OpenGL ES 2.</para>
                    <see-also>
                        <link raw="minimumLevelOfDetail()" href="qopengltexture.html#minimumLevelOfDetail" type="function">minimumLevelOfDetail()</link>
                        <link raw="setMaximumLevelOfDetail()" href="qopengltexture.html#setMaximumLevelOfDetail" type="function">setMaximumLevelOfDetail()</link>
                        <link raw="setLevelOfDetailRange()" href="qopengltexture.html#setLevelOfDetailRange" type="function">setLevelOfDetailRange()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="minimumLevelOfDetail" fullname="QOpenGLTexture::minimumLevelOfDetail" href="qopengltexture.html#minimumLevelOfDetail" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="609" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="float" signature="float minimumLevelOfDetail() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4563" column="4">
                    <para>Returns the minimum level of detail parameter.</para>
                    <see-also>
                        <link raw="setMinimumLevelOfDetail()" href="qopengltexture.html#setMinimumLevelOfDetail" type="function">setMinimumLevelOfDetail()</link>
                        <link raw="maximumLevelOfDetail()" href="qopengltexture.html#maximumLevelOfDetail" type="function">maximumLevelOfDetail()</link>
                        <link raw="levelOfDetailRange()" href="qopengltexture.html#levelOfDetailRange" type="function">levelOfDetailRange()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setMaximumLevelOfDetail" fullname="QOpenGLTexture::setMaximumLevelOfDetail" href="qopengltexture.html#setMaximumLevelOfDetail" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="610" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setMaximumLevelOfDetail(float value)">
                <parameter type="float" name="value" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4574" column="4">
                    <para>Sets the maximum level of detail to <argument>value</argument>. This limits the selection of lowest resolution mipmap (highest mipmap level). The default value is 1000.</para>
                    <para>
                        <bold>Note:</bold> This function has no effect on Qt built for OpenGL ES 2.</para>
                    <see-also>
                        <link raw="maximumLevelOfDetail()" href="qopengltexture.html#maximumLevelOfDetail" type="function">maximumLevelOfDetail()</link>
                        <link raw="setMinimumLevelOfDetail()" href="qopengltexture.html#setMinimumLevelOfDetail" type="function">setMinimumLevelOfDetail()</link>
                        <link raw="setLevelOfDetailRange()" href="qopengltexture.html#setLevelOfDetailRange" type="function">setLevelOfDetailRange()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="maximumLevelOfDetail" fullname="QOpenGLTexture::maximumLevelOfDetail" href="qopengltexture.html#maximumLevelOfDetail" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="611" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="float" signature="float maximumLevelOfDetail() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4600" column="4">
                    <para>Returns the maximum level of detail parameter.</para>
                    <see-also>
                        <link raw="setMaximumLevelOfDetail()" href="qopengltexture.html#setMaximumLevelOfDetail" type="function">setMaximumLevelOfDetail()</link>
                        <link raw="minimumLevelOfDetail()" href="qopengltexture.html#minimumLevelOfDetail" type="function">minimumLevelOfDetail()</link>
                        <link raw="levelOfDetailRange()" href="qopengltexture.html#levelOfDetailRange" type="function">levelOfDetailRange()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setLevelOfDetailRange" fullname="QOpenGLTexture::setLevelOfDetailRange" href="qopengltexture.html#setLevelOfDetailRange" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="612" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setLevelOfDetailRange(float min, float max)">
                <parameter type="float" name="min" default=""/>
                <parameter type="float" name="max" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4611" column="4">
                    <para>Sets the minimum level of detail parameters to <argument>min</argument> and the maximum level to <argument>max</argument>.</para>
                    <para>
                        <bold>Note:</bold> This function has no effect on Qt built for OpenGL ES 2.</para>
                    <see-also>
                        <link raw="levelOfDetailRange()" href="qopengltexture.html#levelOfDetailRange" type="function">levelOfDetailRange()</link>
                        <link raw="setMinimumLevelOfDetail()" href="qopengltexture.html#setMinimumLevelOfDetail" type="function">setMinimumLevelOfDetail()</link>
                        <link raw="setMaximumLevelOfDetail()" href="qopengltexture.html#setMaximumLevelOfDetail" type="function">setMaximumLevelOfDetail()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="levelOfDetailRange" fullname="QOpenGLTexture::levelOfDetailRange" href="qopengltexture.html#levelOfDetailRange" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="613" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QPair&lt;float, float&gt;" signature="QPair&lt;float, float&gt; levelOfDetailRange() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4639" column="4">
                    <para>Returns the minimum and maximum level of detail parameters.</para>
                    <see-also>
                        <link raw="setLevelOfDetailRange()" href="qopengltexture.html#setLevelOfDetailRange" type="function">setLevelOfDetailRange()</link>
                        <link raw="minimumLevelOfDetail()" href="qopengltexture.html#minimumLevelOfDetail" type="function">minimumLevelOfDetail()</link>
                        <link raw="maximumLevelOfDetail()" href="qopengltexture.html#maximumLevelOfDetail" type="function">maximumLevelOfDetail()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setLevelofDetailBias" fullname="QOpenGLTexture::setLevelofDetailBias" href="qopengltexture.html#setLevelofDetailBias" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="614" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setLevelofDetailBias(float bias)">
                <parameter type="float" name="bias" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4650" column="4">
                    <para>Sets the level of detail bias to <argument>bias</argument>. Level of detail bias affects the point at which mipmapping levels change. Increasing values for level of detail bias makes the overall images blurrier or smoother. Decreasing values make the overall images sharper.</para>
                    <para>
                        <bold>Note:</bold> This function has no effect on Qt built for OpenGL ES 2.</para>
                    <see-also>
                        <link raw="levelofDetailBias()" href="qopengltexture.html#levelofDetailBias" type="function">levelofDetailBias()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="levelofDetailBias" fullname="QOpenGLTexture::levelofDetailBias" href="qopengltexture.html#levelofDetailBias" status="active" access="public" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="615" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="float" signature="float levelofDetailBias() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.cpp" line="4677" column="4">
                    <para>Returns the level of detail bias parameter.</para>
                    <see-also>
                        <link raw="setLevelofDetailBias()" href="qopengltexture.html#setLevelofDetailBias" type="function">setLevelofDetailBias()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="QOpenGLTexture" fullname="QOpenGLTexture::QOpenGLTexture" href="qopengltexture.html#QOpenGLTexture-2" status="active" access="private" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="622" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="QOpenGLTexture(const QOpenGLTexture &amp;)">
                <parameter type="const QOpenGLTexture &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="operator=" fullname="QOpenGLTexture::operator=" href="qopengltexture.html#operator-eq" status="active" access="private" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="622" virtual="non" meta="copy-assign" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QOpenGLTexture &amp;" signature="QOpenGLTexture &amp; operator=(const QOpenGLTexture &amp;)">
                <parameter type="const QOpenGLTexture &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="d_func" fullname="QOpenGLTexture::d_func" href="qopengltexture.html#d_func" status="active" access="private" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="623" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QOpenGLTexturePrivate *" signature="QOpenGLTexturePrivate * d_func()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="d_func" fullname="QOpenGLTexture::d_func" href="qopengltexture.html#d_func-1" status="active" access="private" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="623" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="const QOpenGLTexturePrivate *" signature="const QOpenGLTexturePrivate * d_func() const">
                <description path="" line="0" column="0"/>
            </function>
            <variable threadsafety="unspecified" name="d_ptr" fullname="QOpenGLTexture::d_ptr" href="qopengltexture.html#d_ptr-var" status="active" access="private" location="qopengltexture.h" filepath="C:/Qt/5.11.1/Src/qtbase/src/gui/opengl/qopengltexture.h" lineno="624" type="QScopedPointer&lt;QOpenGLTexturePrivate&gt;" static="false">
                <description path="" line="0" column="0"/>
            </variable>
        </class>
    </document>
</WebXML>
