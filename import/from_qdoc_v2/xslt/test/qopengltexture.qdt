<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.2">
   <db:info>
      <db:title>QOpenGLTexture</db:title>
      <db:abstract>
         <db:para>Encapsulates an OpenGL texture object</db:para>
      </db:abstract>
   </db:info>
   <db:classsynopsis>
      <db:ooclass>
         <db:classname>QOpenGLTexture</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="module">QtGui</db:classsynopsisinfo>
      <db:namespacesynopsisinfo role="headers">#include &lt;qopengltexture.h&gt;</db:namespacesynopsisinfo>
      <db:classsynopsisinfo role="since">5.2</db:classsynopsisinfo>
   </db:classsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The <db:code><db:link xlink:href="qopengltexture.html" xrefstyle="class" annotations="QOpenGLTexture">QOpenGLTexture</db:link></db:code> class encapsulates an OpenGL texture object.</db:para>
      <db:para>
         <db:code><db:link xlink:href="qopengltexture.html" xrefstyle="class" annotations="QOpenGLTexture">QOpenGLTexture</db:link></db:code> makes it easy to work with OpenGL textures and the myriad features and targets that they offer depending upon the capabilities of your OpenGL implementation.</db:para>
      <db:para>The typical usage pattern for <db:code><db:link xlink:href="qopengltexture.html" xrefstyle="class" annotations="QOpenGLTexture">QOpenGLTexture</db:link></db:code> is</db:para>
      <db:itemizedlist>
         <db:listitem>
            <db:para>Instantiate the object specifying the texture target type</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Set properties that affect the storage requirements e.g. storage format, dimensions</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Allocate the server-side storage</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Optionally upload pixel data</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Optionally set any additional properties e.g. filtering and border options</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Render with texture or render to texture</db:para>
         </db:listitem>
      </db:itemizedlist>
      <db:para>In the common case of simply using a <db:code><db:link xlink:href="qimage.html" xrefstyle="class" annotations="QImage">QImage</db:link></db:code> as the source of texture pixel data most of the above steps are performed automatically.</db:para>
      <db:programlisting language="other">// Prepare texture
QOpenGLTexture *texture = new QOpenGLTexture(QImage(fileName).mirrored());
texture-&gt;setMinificationFilter(QOpenGLTexture::LinearMipMapLinear);
texture-&gt;setMagnificationFilter(QOpenGLTexture::Linear);
...
// Render with texture
texture-&gt;bind();
glDrawArrays(...);</db:programlisting>
      <db:para>Note that the <db:code><db:link xlink:href="qimage.html" xrefstyle="class" annotations="QImage">QImage</db:link></db:code> is mirrored vertically to account for the fact that OpenGL and <db:code><db:link xlink:href="qimage.html" xrefstyle="class" annotations="QImage">QImage</db:link></db:code> use opposite directions for the y axis. Another option would be to transform your texture coordinates.</db:para>
   </db:section>
   <db:section>
      <db:title>Member Type Documentation</db:title>
      <db:section>
         <db:title>enum QOpenGLTexture::BindingTarget, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::BindingTarget</db:enumname>
            <db:enumitem>
               <db:enumidentifier>BindingTarget1D</db:enumidentifier>
               <db:enumvalue>0x8068</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>BindingTarget1DArray</db:enumidentifier>
               <db:enumvalue>0x8C1C</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>BindingTarget2D</db:enumidentifier>
               <db:enumvalue>0x8069</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>BindingTarget2DArray</db:enumidentifier>
               <db:enumvalue>0x8C1D</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>BindingTarget3D</db:enumidentifier>
               <db:enumvalue>0x806A</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>BindingTargetCubeMap</db:enumidentifier>
               <db:enumvalue>0x8514</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>BindingTargetCubeMapArray</db:enumidentifier>
               <db:enumvalue>0x900A</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>BindingTarget2DMultisample</db:enumidentifier>
               <db:enumvalue>0x9104</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>BindingTarget2DMultisampleArray</db:enumidentifier>
               <db:enumvalue>0x9105</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>BindingTargetRectangle</db:enumidentifier>
               <db:enumvalue>0x84F6</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>BindingTargetBuffer</db:enumidentifier>
               <db:enumvalue>0x8C2C</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>QOpenGLTexture::Features</db:typedefname>
         </db:typedefsynopsis>
         <db:para>This enum defines the possible binding targets of texture units.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::BindingTarget1D</db:td>
                  <db:td>0x8068</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_BINDING_1D</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::BindingTarget1DArray</db:td>
                  <db:td>0x8C1C</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_BINDING_1D_ARRAY</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::BindingTarget2D</db:td>
                  <db:td>0x8069</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_BINDING_2D</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::BindingTarget2DArray</db:td>
                  <db:td>0x8C1D</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_BINDING_2D_ARRAY</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::BindingTarget3D</db:td>
                  <db:td>0x806A</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_BINDING_3D</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::BindingTargetCubeMap</db:td>
                  <db:td>0x8514</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_BINDING_CUBE_MAP</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::BindingTargetCubeMapArray</db:td>
                  <db:td>0x900A</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_BINDING_CUBE_MAP_ARRAY</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::BindingTarget2DMultisample</db:td>
                  <db:td>0x9104</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_BINDING_2D_MULTISAMPLE</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::BindingTarget2DMultisampleArray</db:td>
                  <db:td>0x9105</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::BindingTargetRectangle</db:td>
                  <db:td>0x84F6</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_BINDING_RECTANGLE</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::BindingTargetBuffer</db:td>
                  <db:td>0x8C2C</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_BINDING_BUFFER</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The <db:code>Features</db:code> type is a typedef for <db:code>QFlags&lt;BindingTarget&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::ComparisonFunction, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::ComparisonFunction</db:enumname>
            <db:enumsynopsisinfo role="since">5.5</db:enumsynopsisinfo>
            <db:enumitem>
               <db:enumidentifier>CompareLessEqual</db:enumidentifier>
               <db:enumvalue>0x0203</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CompareGreaterEqual</db:enumidentifier>
               <db:enumvalue>0x0206</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CompareLess</db:enumidentifier>
               <db:enumvalue>0x0201</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CompareGreater</db:enumidentifier>
               <db:enumvalue>0x0204</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CompareEqual</db:enumidentifier>
               <db:enumvalue>0x0202</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CommpareNotEqual</db:enumidentifier>
               <db:enumvalue>0x0205</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CompareAlways</db:enumidentifier>
               <db:enumvalue>0x0207</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CompareNever</db:enumidentifier>
               <db:enumvalue>0x0200</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:para>This enum specifies which comparison operator is used when texture comparison is enabled on this texture.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::CompareLessEqual</db:td>
                  <db:td>0x0203</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_LEQUAL.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::CompareGreaterEqual</db:td>
                  <db:td>0x0206</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_GEQUAL.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::CompareLess</db:td>
                  <db:td>0x0201</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_LESS.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::CompareGreater</db:td>
                  <db:td>0x0204</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_GREATER.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::CompareEqual</db:td>
                  <db:td>0x0202</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_EQUAL.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::CommpareNotEqual</db:td>
                  <db:td>0x0205</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_NOTEQUAL.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::CompareAlways</db:td>
                  <db:td>0x0207</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_ALWAYS.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::CompareNever</db:td>
                  <db:td>0x0200</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_NEVER.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>This enum was introduced or modified in Qt 5.5.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::ComparisonMode, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::ComparisonMode</db:enumname>
            <db:enumsynopsisinfo role="since">5.5</db:enumsynopsisinfo>
            <db:enumitem>
               <db:enumidentifier>CompareRefToTexture</db:enumidentifier>
               <db:enumvalue>0x884E</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CompareNone</db:enumidentifier>
               <db:enumvalue>0x0000</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:para>This enum specifies which comparison mode is used when sampling this texture.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::CompareRefToTexture</db:td>
                  <db:td>0x884E</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPARE_REF_TO_TEXTURE.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::CompareNone</db:td>
                  <db:td>0x0000</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_NONE.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>This enum was introduced or modified in Qt 5.5.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::CoordinateDirection, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::CoordinateDirection</db:enumname>
            <db:enumitem>
               <db:enumidentifier>DirectionS</db:enumidentifier>
               <db:enumvalue>0x2802</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>DirectionT</db:enumidentifier>
               <db:enumvalue>0x2803</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>DirectionR</db:enumidentifier>
               <db:enumvalue>0x8072</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>QOpenGLTexture::Features</db:typedefname>
         </db:typedefsynopsis>
         <db:para>This enum defines the possible texture coordinate directions</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::DirectionS</db:td>
                  <db:td>0x2802</db:td>
                  <db:td>
                     <db:para>The horizontal direction. Equivalent to GL_TEXTURE_WRAP_S</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::DirectionT</db:td>
                  <db:td>0x2803</db:td>
                  <db:td>
                     <db:para>The vertical direction. Equivalent to GL_TEXTURE_WRAP_T</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::DirectionR</db:td>
                  <db:td>0x8072</db:td>
                  <db:td>
                     <db:para>The depth direction. Equivalent to GL_TEXTURE_WRAP_R</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The <db:code>Features</db:code> type is a typedef for <db:code>QFlags&lt;CoordinateDirection&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::CubeMapFace, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::CubeMapFace</db:enumname>
            <db:enumitem>
               <db:enumidentifier>CubeMapPositiveX</db:enumidentifier>
               <db:enumvalue>0x8515</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CubeMapNegativeX</db:enumidentifier>
               <db:enumvalue>0x8516</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CubeMapPositiveY</db:enumidentifier>
               <db:enumvalue>0x8517</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CubeMapNegativeY</db:enumidentifier>
               <db:enumvalue>0x8518</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CubeMapPositiveZ</db:enumidentifier>
               <db:enumvalue>0x8519</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CubeMapNegativeZ</db:enumidentifier>
               <db:enumvalue>0x851A</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>QOpenGLTexture::Features</db:typedefname>
         </db:typedefsynopsis>
         <db:para>This enum defines the possible CubeMap faces.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::CubeMapPositiveX</db:td>
                  <db:td>0x8515</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_CUBE_MAP_POSITIVE_X</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::CubeMapNegativeX</db:td>
                  <db:td>0x8516</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_CUBE_MAP_NEGATIVE_X</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::CubeMapPositiveY</db:td>
                  <db:td>0x8517</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_CUBE_MAP_POSITIVE_Y</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::CubeMapNegativeY</db:td>
                  <db:td>0x8518</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::CubeMapPositiveZ</db:td>
                  <db:td>0x8519</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_CUBE_MAP_POSITIVE_Z</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::CubeMapNegativeZ</db:td>
                  <db:td>0x851A</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The <db:code>Features</db:code> type is a typedef for <db:code>QFlags&lt;CubeMapFace&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::DepthStencilMode, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::DepthStencilMode</db:enumname>
            <db:enumsynopsisinfo role="since">5.4</db:enumsynopsisinfo>
            <db:enumitem>
               <db:enumidentifier>DepthMode</db:enumidentifier>
               <db:enumvalue>0x1902</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>StencilMode</db:enumidentifier>
               <db:enumvalue>0x1901</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:para>This enum specifies which component of a depth/stencil texture is accessed when the texture is sampled.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::DepthMode</db:td>
                  <db:td>0x1902</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_DEPTH_COMPONENT.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::StencilMode</db:td>
                  <db:td>0x1901</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_STENCIL_INDEX.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>This enum was introduced or modified in Qt 5.4.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::Feature, flags QOpenGLTexture::Features</db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::Feature</db:enumname>
            <db:enumitem>
               <db:enumidentifier>ImmutableStorage</db:enumidentifier>
               <db:enumvalue>0x00000001</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>ImmutableMultisampleStorage</db:enumidentifier>
               <db:enumvalue>0x00000002</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>TextureRectangle</db:enumidentifier>
               <db:enumvalue>0x00000004</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>TextureArrays</db:enumidentifier>
               <db:enumvalue>0x00000008</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Texture3D</db:enumidentifier>
               <db:enumvalue>0x00000010</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>TextureMultisample</db:enumidentifier>
               <db:enumvalue>0x00000020</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>TextureBuffer</db:enumidentifier>
               <db:enumvalue>0x00000040</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>TextureCubeMapArrays</db:enumidentifier>
               <db:enumvalue>0x00000080</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Swizzle</db:enumidentifier>
               <db:enumvalue>0x00000100</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>StencilTexturing</db:enumidentifier>
               <db:enumvalue>0x00000200</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>AnisotropicFiltering</db:enumidentifier>
               <db:enumvalue>0x00000400</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>NPOTTextures</db:enumidentifier>
               <db:enumvalue>0x00000800</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>NPOTTextureRepeat</db:enumidentifier>
               <db:enumvalue>0x00001000</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Texture1D</db:enumidentifier>
               <db:enumvalue>0x00002000</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>TextureComparisonOperators</db:enumidentifier>
               <db:enumvalue>0x00004000</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>TextureMipMapLevel</db:enumidentifier>
               <db:enumvalue>0x00008000</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>QOpenGLTexture::Features</db:typedefname>
         </db:typedefsynopsis>
         <db:para>This enum defines the OpenGL texture-related features that can be tested for.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::ImmutableStorage</db:td>
                  <db:td>0x00000001</db:td>
                  <db:td>
                     <db:para>Support for immutable texture storage</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::ImmutableMultisampleStorage</db:td>
                  <db:td>0x00000002</db:td>
                  <db:td>
                     <db:para>Support for immutable texture storage with multisample targets</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::TextureRectangle</db:td>
                  <db:td>0x00000004</db:td>
                  <db:td>
                     <db:para>Support for the GL_TEXTURE_RECTANGLE target</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::TextureArrays</db:td>
                  <db:td>0x00000008</db:td>
                  <db:td>
                     <db:para>Support for texture targets with array layers</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Texture3D</db:td>
                  <db:td>0x00000010</db:td>
                  <db:td>
                     <db:para>Support for the 3 dimensional texture target</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::TextureMultisample</db:td>
                  <db:td>0x00000020</db:td>
                  <db:td>
                     <db:para>Support for texture targets that have multisample capabilities</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::TextureBuffer</db:td>
                  <db:td>0x00000040</db:td>
                  <db:td>
                     <db:para>Support for textures that use OpenGL buffer objects as their data source</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::TextureCubeMapArrays</db:td>
                  <db:td>0x00000080</db:td>
                  <db:td>
                     <db:para>Support for cubemap array texture target</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Swizzle</db:td>
                  <db:td>0x00000100</db:td>
                  <db:td>
                     <db:para>Support for texture component swizzle masks</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::StencilTexturing</db:td>
                  <db:td>0x00000200</db:td>
                  <db:td>
                     <db:para>Support for stencil texturing (i.e. looking up depth or stencil components of a combined depth/stencil format texture in GLSL shaders).</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::AnisotropicFiltering</db:td>
                  <db:td>0x00000400</db:td>
                  <db:td>
                     <db:para>Support for anisotropic texture filtering</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::NPOTTextures</db:td>
                  <db:td>0x00000800</db:td>
                  <db:td>
                     <db:para>Basic support for non-power-of-two textures</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::NPOTTextureRepeat</db:td>
                  <db:td>0x00001000</db:td>
                  <db:td>
                     <db:para>Full support for non-power-of-two textures including texture repeat modes</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Texture1D</db:td>
                  <db:td>0x00002000</db:td>
                  <db:td>
                     <db:para>Support for the 1 dimensional texture target</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::TextureComparisonOperators</db:td>
                  <db:td>0x00004000</db:td>
                  <db:td>
                     <db:para>Support for texture comparison operators</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::TextureMipMapLevel</db:td>
                  <db:td>0x00008000</db:td>
                  <db:td>
                     <db:para>Support for setting the base and maximum mipmap levels</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The <db:code>Features</db:code> type is a typedef for <db:code>QFlags&lt;Feature&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::Filter, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::Filter</db:enumname>
            <db:enumitem>
               <db:enumidentifier>Nearest</db:enumidentifier>
               <db:enumvalue>0x2600</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Linear</db:enumidentifier>
               <db:enumvalue>0x2601</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>NearestMipMapNearest</db:enumidentifier>
               <db:enumvalue>0x2700</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>NearestMipMapLinear</db:enumidentifier>
               <db:enumvalue>0x2702</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>LinearMipMapNearest</db:enumidentifier>
               <db:enumvalue>0x2701</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>LinearMipMapLinear</db:enumidentifier>
               <db:enumvalue>0x2703</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:para>This enum defines the filtering parameters for a <db:code><db:link xlink:href="qopengltexture.html" xrefstyle="class" annotations="QOpenGLTexture">QOpenGLTexture</db:link></db:code> object.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::Nearest</db:td>
                  <db:td>0x2600</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_NEAREST</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Linear</db:td>
                  <db:td>0x2601</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_LINEAR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::NearestMipMapNearest</db:td>
                  <db:td>0x2700</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_NEAREST_MIPMAP_NEAREST</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::NearestMipMapLinear</db:td>
                  <db:td>0x2702</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_NEAREST_MIPMAP_LINEAR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::LinearMipMapNearest</db:td>
                  <db:td>0x2701</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_LINEAR_MIPMAP_NEAREST</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::LinearMipMapLinear</db:td>
                  <db:td>0x2703</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_LINEAR_MIPMAP_LINEAR</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::MipMapGeneration, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::MipMapGeneration</db:enumname>
            <db:enumitem>
               <db:enumidentifier>GenerateMipMaps</db:enumidentifier>
               <db:enumvalue>0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>DontGenerateMipMaps</db:enumidentifier>
               <db:enumvalue>1</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>QOpenGLTexture::Features</db:typedefname>
         </db:typedefsynopsis>
         <db:para>This enum defines the options to control mipmap generation.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::GenerateMipMaps</db:td>
                  <db:td>0</db:td>
                  <db:td>
                     <db:para>Mipmaps should be generated</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::DontGenerateMipMaps</db:td>
                  <db:td>1</db:td>
                  <db:td>
                     <db:para>Mipmaps should not be generated</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The <db:code>Features</db:code> type is a typedef for <db:code>QFlags&lt;MipMapGeneration&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::PixelFormat, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::PixelFormat</db:enumname>
            <db:enumitem>
               <db:enumidentifier>NoSourceFormat</db:enumidentifier>
               <db:enumvalue>0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Red</db:enumidentifier>
               <db:enumvalue>0x1903</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG</db:enumidentifier>
               <db:enumvalue>0x8227</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB</db:enumidentifier>
               <db:enumvalue>0x1907</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>BGR</db:enumidentifier>
               <db:enumvalue>0x80E0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA</db:enumidentifier>
               <db:enumvalue>0x1908</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>BGRA</db:enumidentifier>
               <db:enumvalue>0x80E1</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Red_Integer</db:enumidentifier>
               <db:enumvalue>0x8D94</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG_Integer</db:enumidentifier>
               <db:enumvalue>0x8228</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB_Integer</db:enumidentifier>
               <db:enumvalue>0x8D98</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>BGR_Integer</db:enumidentifier>
               <db:enumvalue>0x8D9A</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_Integer</db:enumidentifier>
               <db:enumvalue>0x8D99</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>BGRA_Integer</db:enumidentifier>
               <db:enumvalue>0x8D9B</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Stencil</db:enumidentifier>
               <db:enumvalue>0x1901</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Depth</db:enumidentifier>
               <db:enumvalue>0x1902</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>DepthStencil</db:enumidentifier>
               <db:enumvalue>0x84F9</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Alpha</db:enumidentifier>
               <db:enumvalue>0x1906</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Luminance</db:enumidentifier>
               <db:enumvalue>0x1909</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>LuminanceAlpha</db:enumidentifier>
               <db:enumvalue>0x190A</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>QOpenGLTexture::Features</db:typedefname>
         </db:typedefsynopsis>
         <db:para>This enum defines the possible client-side pixel formats for a pixel transfer operation.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::NoSourceFormat</db:td>
                  <db:td>0</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_NONE</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Red</db:td>
                  <db:td>0x1903</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RED</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG</db:td>
                  <db:td>0x8227</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RG</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB</db:td>
                  <db:td>0x1907</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::BGR</db:td>
                  <db:td>0x80E0</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_BGR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA</db:td>
                  <db:td>0x1908</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::BGRA</db:td>
                  <db:td>0x80E1</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_BGRA</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Red_Integer</db:td>
                  <db:td>0x8D94</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RED_INTEGER</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG_Integer</db:td>
                  <db:td>0x8228</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RG_INTEGER</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB_Integer</db:td>
                  <db:td>0x8D98</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB_INTEGER</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::BGR_Integer</db:td>
                  <db:td>0x8D9A</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_BGR_INTEGER</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_Integer</db:td>
                  <db:td>0x8D99</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA_INTEGER</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::BGRA_Integer</db:td>
                  <db:td>0x8D9B</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_BGRA_INTEGER</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Stencil</db:td>
                  <db:td>0x1901</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_STENCIL_INDEX. Introduced in Qt 5.4</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Depth</db:td>
                  <db:td>0x1902</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_DEPTH_COMPONENT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::DepthStencil</db:td>
                  <db:td>0x84F9</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_DEPTH_STENCIL</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Alpha</db:td>
                  <db:td>0x1906</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_ALPHA (OpenGL ES 2 only)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Luminance</db:td>
                  <db:td>0x1909</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_LUMINANCE (OpenGL ES 2 only)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::LuminanceAlpha</db:td>
                  <db:td>0x190A</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_LUMINANCE_ALPHA (OpenGL ES 2 only)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The <db:code>Features</db:code> type is a typedef for <db:code>QFlags&lt;PixelFormat&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::PixelType, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::PixelType</db:enumname>
            <db:enumitem>
               <db:enumidentifier>NoPixelType</db:enumidentifier>
               <db:enumvalue>0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Int8</db:enumidentifier>
               <db:enumvalue>0x1400</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt8</db:enumidentifier>
               <db:enumvalue>0x1401</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Int16</db:enumidentifier>
               <db:enumvalue>0x1402</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt16</db:enumidentifier>
               <db:enumvalue>0x1403</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Int32</db:enumidentifier>
               <db:enumvalue>0x1404</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt32</db:enumidentifier>
               <db:enumvalue>0x1405</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Float16</db:enumidentifier>
               <db:enumvalue>0x140B</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Float16OES</db:enumidentifier>
               <db:enumvalue>0x8D61</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Float32</db:enumidentifier>
               <db:enumvalue>0x1406</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt32_RGB9_E5</db:enumidentifier>
               <db:enumvalue>0x8C3E</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt32_RG11B10F</db:enumidentifier>
               <db:enumvalue>0x8C3B</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt8_RG3B2</db:enumidentifier>
               <db:enumvalue>0x8032</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt8_RG3B2_Rev</db:enumidentifier>
               <db:enumvalue>0x8362</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt16_RGB5A1</db:enumidentifier>
               <db:enumvalue>0x8034</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt16_RGB5A1_Rev</db:enumidentifier>
               <db:enumvalue>0x8366</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt16_R5G6B5</db:enumidentifier>
               <db:enumvalue>0x8363</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt16_R5G6B5_Rev</db:enumidentifier>
               <db:enumvalue>0x8364</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt16_RGBA4</db:enumidentifier>
               <db:enumvalue>0x8033</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt16_RGBA4_Rev</db:enumidentifier>
               <db:enumvalue>0x8365</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt32_RGBA8</db:enumidentifier>
               <db:enumvalue>0x8035</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt32_RGBA8_Rev</db:enumidentifier>
               <db:enumvalue>0x8367</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt32_RGB10A2</db:enumidentifier>
               <db:enumvalue>0x8036</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt32_RGB10A2_Rev</db:enumidentifier>
               <db:enumvalue>0x8368</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>UInt32_D24S8</db:enumidentifier>
               <db:enumvalue>0x84FA</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Float32_D32_UInt32_S8_X24</db:enumidentifier>
               <db:enumvalue>0x8DAD</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>QOpenGLTexture::Features</db:typedefname>
         </db:typedefsynopsis>
         <db:para>This enum defines the possible pixel data types for a pixel transfer operation</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::NoPixelType</db:td>
                  <db:td>0</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_NONE</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Int8</db:td>
                  <db:td>0x1400</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_BYTE</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt8</db:td>
                  <db:td>0x1401</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_BYTE</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Int16</db:td>
                  <db:td>0x1402</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_SHORT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt16</db:td>
                  <db:td>0x1403</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_SHORT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Int32</db:td>
                  <db:td>0x1404</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_INT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt32</db:td>
                  <db:td>0x1405</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_INT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Float16</db:td>
                  <db:td>0x140B</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_HALF_FLOAT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Float16OES</db:td>
                  <db:td>0x8D61</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_HALF_FLOAT_OES</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Float32</db:td>
                  <db:td>0x1406</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_FLOAT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt32_RGB9_E5</db:td>
                  <db:td>0x8C3E</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_INT_5_9_9_9_REV</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt32_RG11B10F</db:td>
                  <db:td>0x8C3B</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_INT_10F_11F_11F_REV</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt8_RG3B2</db:td>
                  <db:td>0x8032</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_BYTE_3_3_2</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt8_RG3B2_Rev</db:td>
                  <db:td>0x8362</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_BYTE_2_3_3_REV</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt16_RGB5A1</db:td>
                  <db:td>0x8034</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_SHORT_5_5_5_1</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt16_RGB5A1_Rev</db:td>
                  <db:td>0x8366</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_SHORT_1_5_5_5_REV</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt16_R5G6B5</db:td>
                  <db:td>0x8363</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_SHORT_5_6_5</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt16_R5G6B5_Rev</db:td>
                  <db:td>0x8364</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_SHORT_5_6_5_REV</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt16_RGBA4</db:td>
                  <db:td>0x8033</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_SHORT_4_4_4_4</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt16_RGBA4_Rev</db:td>
                  <db:td>0x8365</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_SHORT_4_4_4_4_REV</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt32_RGBA8</db:td>
                  <db:td>0x8035</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_INT_8_8_8_8</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt32_RGBA8_Rev</db:td>
                  <db:td>0x8367</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_INT_8_8_8_8_REV</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt32_RGB10A2</db:td>
                  <db:td>0x8036</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_INT_10_10_10_2</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt32_RGB10A2_Rev</db:td>
                  <db:td>0x8368</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_INT_2_10_10_10_REV</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::UInt32_D24S8</db:td>
                  <db:td>0x84FA</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_UNSIGNED_INT_24_8. Introduced in Qt 5.4</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Float32_D32_UInt32_S8_X24</db:td>
                  <db:td>0x8DAD</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_FLOAT_32_UNSIGNED_INT_24_8_REV. Introduced in Qt 5.4</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The <db:code>Features</db:code> type is a typedef for <db:code>QFlags&lt;PixelType&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::SwizzleComponent, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::SwizzleComponent</db:enumname>
            <db:enumitem>
               <db:enumidentifier>SwizzleRed</db:enumidentifier>
               <db:enumvalue>0x8E42</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SwizzleGreen</db:enumidentifier>
               <db:enumvalue>0x8E43</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SwizzleBlue</db:enumidentifier>
               <db:enumvalue>0x8E44</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SwizzleAlpha</db:enumidentifier>
               <db:enumvalue>0x8E45</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>QOpenGLTexture::Features</db:typedefname>
         </db:typedefsynopsis>
         <db:para>This enum defines the texture color components that can be assigned a swizzle mask.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::SwizzleRed</db:td>
                  <db:td>0x8E42</db:td>
                  <db:td>
                     <db:para>The red component. Equivalent to GL_TEXTURE_SWIZZLE_R</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SwizzleGreen</db:td>
                  <db:td>0x8E43</db:td>
                  <db:td>
                     <db:para>The green component. Equivalent to GL_TEXTURE_SWIZZLE_G</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SwizzleBlue</db:td>
                  <db:td>0x8E44</db:td>
                  <db:td>
                     <db:para>The blue component. Equivalent to GL_TEXTURE_SWIZZLE_B</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SwizzleAlpha</db:td>
                  <db:td>0x8E45</db:td>
                  <db:td>
                     <db:para>The alpha component. Equivalent to GL_TEXTURE_SWIZZLE_A</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The <db:code>Features</db:code> type is a typedef for <db:code>QFlags&lt;SwizzleComponent&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::SwizzleValue, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::SwizzleValue</db:enumname>
            <db:enumitem>
               <db:enumidentifier>RedValue</db:enumidentifier>
               <db:enumvalue>0x1903</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>GreenValue</db:enumidentifier>
               <db:enumvalue>0x1904</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>BlueValue</db:enumidentifier>
               <db:enumvalue>0x1905</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>AlphaValue</db:enumidentifier>
               <db:enumvalue>0x1906</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>ZeroValue</db:enumidentifier>
               <db:enumvalue>0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>OneValue</db:enumidentifier>
               <db:enumvalue>1</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>QOpenGLTexture::Features</db:typedefname>
         </db:typedefsynopsis>
         <db:para>This enum defines the possible mask values for texture swizzling.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::RedValue</db:td>
                  <db:td>0x1903</db:td>
                  <db:td>
                     <db:para>Maps the component to the red channel. Equivalent to GL_RED</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::GreenValue</db:td>
                  <db:td>0x1904</db:td>
                  <db:td>
                     <db:para>Maps the component to the green channel. Equivalent to GL_GREEN</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::BlueValue</db:td>
                  <db:td>0x1905</db:td>
                  <db:td>
                     <db:para>Maps the component to the blue channel. Equivalent to GL_BLUE</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::AlphaValue</db:td>
                  <db:td>0x1906</db:td>
                  <db:td>
                     <db:para>Maps the component to the alpha channel. Equivalent to GL_ALPHA</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::ZeroValue</db:td>
                  <db:td>0</db:td>
                  <db:td>
                     <db:para>Maps the component to a fixed value of 0. Equivalent to GL_ZERO</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::OneValue</db:td>
                  <db:td>1</db:td>
                  <db:td>
                     <db:para>Maps the component to a fixed value of 1. Equivalent to GL_ONE</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The <db:code>Features</db:code> type is a typedef for <db:code>QFlags&lt;SwizzleValue&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::Target, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::Target</db:enumname>
            <db:enumitem>
               <db:enumidentifier>Target1D</db:enumidentifier>
               <db:enumvalue>0x0DE0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Target1DArray</db:enumidentifier>
               <db:enumvalue>0x8C18</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Target2D</db:enumidentifier>
               <db:enumvalue>0x0DE1</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Target2DArray</db:enumidentifier>
               <db:enumvalue>0x8C1A</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Target3D</db:enumidentifier>
               <db:enumvalue>0x806F</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>TargetCubeMap</db:enumidentifier>
               <db:enumvalue>0x8513</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>TargetCubeMapArray</db:enumidentifier>
               <db:enumvalue>0x9009</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Target2DMultisample</db:enumidentifier>
               <db:enumvalue>0x9100</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Target2DMultisampleArray</db:enumidentifier>
               <db:enumvalue>0x9102</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>TargetRectangle</db:enumidentifier>
               <db:enumvalue>0x84F5</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>TargetBuffer</db:enumidentifier>
               <db:enumvalue>0x8C2A</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>QOpenGLTexture::Features</db:typedefname>
         </db:typedefsynopsis>
         <db:para>This enum defines the texture target of a <db:code><db:link xlink:href="qopengltexture.html" xrefstyle="class" annotations="QOpenGLTexture">QOpenGLTexture</db:link></db:code> object.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::Target1D</db:td>
                  <db:td>0x0DE0</db:td>
                  <db:td>
                     <db:para>A 1-dimensional texture. Equivalent to GL_TEXTURE_1D.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Target1DArray</db:td>
                  <db:td>0x8C18</db:td>
                  <db:td>
                     <db:para>An array of 1-dimensional textures. Equivalent to GL_TEXTURE_1D_ARRAY</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Target2D</db:td>
                  <db:td>0x0DE1</db:td>
                  <db:td>
                     <db:para>A 2-dimensional texture. Equivalent to GL_TEXTURE_2D</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Target2DArray</db:td>
                  <db:td>0x8C1A</db:td>
                  <db:td>
                     <db:para>An array of 1-dimensional textures. Equivalent to GL_TEXTURE_2D_ARRAY</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Target3D</db:td>
                  <db:td>0x806F</db:td>
                  <db:td>
                     <db:para>A 3-dimensional texture. Equivalent to GL_TEXTURE_3D</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::TargetCubeMap</db:td>
                  <db:td>0x8513</db:td>
                  <db:td>
                     <db:para>A cubemap texture. Equivalent to GL_TEXTURE_CUBE_MAP</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::TargetCubeMapArray</db:td>
                  <db:td>0x9009</db:td>
                  <db:td>
                     <db:para>An array of cubemap textures. Equivalent to GL_TEXTURE_CUBE_MAP_ARRAY</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Target2DMultisample</db:td>
                  <db:td>0x9100</db:td>
                  <db:td>
                     <db:para>A 2-dimensional texture with multisample support. Equivalent to GL_TEXTURE_2D_MULTISAMPLE</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::Target2DMultisampleArray</db:td>
                  <db:td>0x9102</db:td>
                  <db:td>
                     <db:para>An array of 2-dimensional textures with multisample support. Equivalent to GL_TEXTURE_2D_MULTISAMPLE_ARRAY</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::TargetRectangle</db:td>
                  <db:td>0x84F5</db:td>
                  <db:td>
                     <db:para>A rectangular 2-dimensional texture. Equivalent to GL_TEXTURE_RECTANGLE</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::TargetBuffer</db:td>
                  <db:td>0x8C2A</db:td>
                  <db:td>
                     <db:para>A texture with data from an OpenGL buffer object. Equivalent to GL_TEXTURE_BUFFER</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The <db:code>Features</db:code> type is a typedef for <db:code>QFlags&lt;Target&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::TextureFormat, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::TextureFormat</db:enumname>
            <db:enumitem>
               <db:enumidentifier>NoFormat</db:enumidentifier>
               <db:enumvalue>0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R8_UNorm</db:enumidentifier>
               <db:enumvalue>0x8229</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG8_UNorm</db:enumidentifier>
               <db:enumvalue>0x822B</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB8_UNorm</db:enumidentifier>
               <db:enumvalue>0x8051</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA8_UNorm</db:enumidentifier>
               <db:enumvalue>0x8058</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R16_UNorm</db:enumidentifier>
               <db:enumvalue>0x822A</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG16_UNorm</db:enumidentifier>
               <db:enumvalue>0x822C</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB16_UNorm</db:enumidentifier>
               <db:enumvalue>0x8054</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA16_UNorm</db:enumidentifier>
               <db:enumvalue>0x805B</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R8_SNorm</db:enumidentifier>
               <db:enumvalue>0x8F94</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG8_SNorm</db:enumidentifier>
               <db:enumvalue>0x8F95</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB8_SNorm</db:enumidentifier>
               <db:enumvalue>0x8F96</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA8_SNorm</db:enumidentifier>
               <db:enumvalue>0x8F97</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R16_SNorm</db:enumidentifier>
               <db:enumvalue>0x8F98</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG16_SNorm</db:enumidentifier>
               <db:enumvalue>0x8F99</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB16_SNorm</db:enumidentifier>
               <db:enumvalue>0x8F9A</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA16_SNorm</db:enumidentifier>
               <db:enumvalue>0x8F9B</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R8U</db:enumidentifier>
               <db:enumvalue>0x8232</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG8U</db:enumidentifier>
               <db:enumvalue>0x8238</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB8U</db:enumidentifier>
               <db:enumvalue>0x8D7D</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA8U</db:enumidentifier>
               <db:enumvalue>0x8D7C</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R16U</db:enumidentifier>
               <db:enumvalue>0x8234</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG16U</db:enumidentifier>
               <db:enumvalue>0x823A</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB16U</db:enumidentifier>
               <db:enumvalue>0x8D77</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA16U</db:enumidentifier>
               <db:enumvalue>0x8D76</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R32U</db:enumidentifier>
               <db:enumvalue>0x8236</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG32U</db:enumidentifier>
               <db:enumvalue>0x823C</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB32U</db:enumidentifier>
               <db:enumvalue>0x8D71</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA32U</db:enumidentifier>
               <db:enumvalue>0x8D70</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R8I</db:enumidentifier>
               <db:enumvalue>0x8231</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG8I</db:enumidentifier>
               <db:enumvalue>0x8237</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB8I</db:enumidentifier>
               <db:enumvalue>0x8D8F</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA8I</db:enumidentifier>
               <db:enumvalue>0x8D8E</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R16I</db:enumidentifier>
               <db:enumvalue>0x8233</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG16I</db:enumidentifier>
               <db:enumvalue>0x8239</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB16I</db:enumidentifier>
               <db:enumvalue>0x8D89</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA16I</db:enumidentifier>
               <db:enumvalue>0x8D88</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R32I</db:enumidentifier>
               <db:enumvalue>0x8235</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG32I</db:enumidentifier>
               <db:enumvalue>0x823B</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB32I</db:enumidentifier>
               <db:enumvalue>0x8D83</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA32I</db:enumidentifier>
               <db:enumvalue>0x8D82</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R16F</db:enumidentifier>
               <db:enumvalue>0x822D</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG16F</db:enumidentifier>
               <db:enumvalue>0x822F</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB16F</db:enumidentifier>
               <db:enumvalue>0x881B</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA16F</db:enumidentifier>
               <db:enumvalue>0x881A</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R32F</db:enumidentifier>
               <db:enumvalue>0x822E</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG32F</db:enumidentifier>
               <db:enumvalue>0x8230</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB32F</db:enumidentifier>
               <db:enumvalue>0x8815</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA32F</db:enumidentifier>
               <db:enumvalue>0x8814</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB9E5</db:enumidentifier>
               <db:enumvalue>0x8C3D</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG11B10F</db:enumidentifier>
               <db:enumvalue>0x8C3A</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG3B2</db:enumidentifier>
               <db:enumvalue>0x2A10</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R5G6B5</db:enumidentifier>
               <db:enumvalue>0x8D62</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB5A1</db:enumidentifier>
               <db:enumvalue>0x8057</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA4</db:enumidentifier>
               <db:enumvalue>0x8056</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB10A2</db:enumidentifier>
               <db:enumvalue>0x906F</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>D16</db:enumidentifier>
               <db:enumvalue>0x81A5</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>D24</db:enumidentifier>
               <db:enumvalue>0x81A6</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>D24S8</db:enumidentifier>
               <db:enumvalue>0x88F0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>D32</db:enumidentifier>
               <db:enumvalue>0x81A7</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>D32F</db:enumidentifier>
               <db:enumvalue>0x8CAC</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>D32FS8X24</db:enumidentifier>
               <db:enumvalue>0x8CAD</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>S8</db:enumidentifier>
               <db:enumvalue>0x8D48</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB_DXT1</db:enumidentifier>
               <db:enumvalue>0x83F0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_DXT1</db:enumidentifier>
               <db:enumvalue>0x83F1</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_DXT3</db:enumidentifier>
               <db:enumvalue>0x83F2</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_DXT5</db:enumidentifier>
               <db:enumvalue>0x83F3</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R_ATI1N_UNorm</db:enumidentifier>
               <db:enumvalue>0x8DBB</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R_ATI1N_SNorm</db:enumidentifier>
               <db:enumvalue>0x8DBC</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG_ATI2N_UNorm</db:enumidentifier>
               <db:enumvalue>0x8DBD</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG_ATI2N_SNorm</db:enumidentifier>
               <db:enumvalue>0x8DBE</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB_BP_UNSIGNED_FLOAT</db:enumidentifier>
               <db:enumvalue>0x8E8F</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB_BP_SIGNED_FLOAT</db:enumidentifier>
               <db:enumvalue>0x8E8E</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB_BP_UNorm</db:enumidentifier>
               <db:enumvalue>0x8E8C</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R11_EAC_UNorm</db:enumidentifier>
               <db:enumvalue>0x9270</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>R11_EAC_SNorm</db:enumidentifier>
               <db:enumvalue>0x9271</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG11_EAC_UNorm</db:enumidentifier>
               <db:enumvalue>0x9272</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RG11_EAC_SNorm</db:enumidentifier>
               <db:enumvalue>0x9273</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB8_ETC2</db:enumidentifier>
               <db:enumvalue>0x9274</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_ETC2</db:enumidentifier>
               <db:enumvalue>0x9275</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB8_PunchThrough_Alpha1_ETC2</db:enumidentifier>
               <db:enumvalue>0x9276</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_PunchThrough_Alpha1_ETC2</db:enumidentifier>
               <db:enumvalue>0x9277</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA8_ETC2_EAC</db:enumidentifier>
               <db:enumvalue>0x9278</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8_ETC2_EAC</db:enumidentifier>
               <db:enumvalue>0x9279</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGB8_ETC1</db:enumidentifier>
               <db:enumvalue>0x8D64</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_ASTC_4x4</db:enumidentifier>
               <db:enumvalue>0x93B0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_ASTC_5x4</db:enumidentifier>
               <db:enumvalue>0x93B1</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_ASTC_5x5</db:enumidentifier>
               <db:enumvalue>0x93B2</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_ASTC_6x5</db:enumidentifier>
               <db:enumvalue>0x93B3</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_ASTC_6x6</db:enumidentifier>
               <db:enumvalue>0x93B4</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_ASTC_8x5</db:enumidentifier>
               <db:enumvalue>0x93B5</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_ASTC_8x6</db:enumidentifier>
               <db:enumvalue>0x93B6</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_ASTC_8x8</db:enumidentifier>
               <db:enumvalue>0x93B7</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_ASTC_10x5</db:enumidentifier>
               <db:enumvalue>0x93B8</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_ASTC_10x6</db:enumidentifier>
               <db:enumvalue>0x93B9</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_ASTC_10x8</db:enumidentifier>
               <db:enumvalue>0x93BA</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_ASTC_10x10</db:enumidentifier>
               <db:enumvalue>0x93BB</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_ASTC_12x10</db:enumidentifier>
               <db:enumvalue>0x93BC</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBA_ASTC_12x12</db:enumidentifier>
               <db:enumvalue>0x93BD</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8_ASTC_4x4</db:enumidentifier>
               <db:enumvalue>0x93D0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8_ASTC_5x4</db:enumidentifier>
               <db:enumvalue>0x93D1</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8_ASTC_5x5</db:enumidentifier>
               <db:enumvalue>0x93D2</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8_ASTC_6x5</db:enumidentifier>
               <db:enumvalue>0x93D3</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8_ASTC_6x6</db:enumidentifier>
               <db:enumvalue>0x93D4</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8_ASTC_8x5</db:enumidentifier>
               <db:enumvalue>0x93D5</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8_ASTC_8x6</db:enumidentifier>
               <db:enumvalue>0x93D6</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8_ASTC_8x8</db:enumidentifier>
               <db:enumvalue>0x93D7</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8_ASTC_10x5</db:enumidentifier>
               <db:enumvalue>0x93D8</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8_ASTC_10x6</db:enumidentifier>
               <db:enumvalue>0x93D9</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8_ASTC_10x8</db:enumidentifier>
               <db:enumvalue>0x93DA</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8_ASTC_10x10</db:enumidentifier>
               <db:enumvalue>0x93DB</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8_ASTC_12x10</db:enumidentifier>
               <db:enumvalue>0x93DC</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8_ASTC_12x12</db:enumidentifier>
               <db:enumvalue>0x93DD</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8</db:enumidentifier>
               <db:enumvalue>0x8C41</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB8_Alpha8</db:enumidentifier>
               <db:enumvalue>0x8C43</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB_DXT1</db:enumidentifier>
               <db:enumvalue>0x8C4C</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB_Alpha_DXT1</db:enumidentifier>
               <db:enumvalue>0x8C4D</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB_Alpha_DXT3</db:enumidentifier>
               <db:enumvalue>0x8C4E</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB_Alpha_DXT5</db:enumidentifier>
               <db:enumvalue>0x8C4F</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>SRGB_BP_UNorm</db:enumidentifier>
               <db:enumvalue>0x8E8D</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>DepthFormat</db:enumidentifier>
               <db:enumvalue>0x1902</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>AlphaFormat</db:enumidentifier>
               <db:enumvalue>0x1906</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBFormat</db:enumidentifier>
               <db:enumvalue>0x1907</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RGBAFormat</db:enumidentifier>
               <db:enumvalue>0x1908</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>LuminanceFormat</db:enumidentifier>
               <db:enumvalue>0x1909</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>LuminanceAlphaFormat</db:enumidentifier>
               <db:enumvalue>0x190A</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>QOpenGLTexture::Features</db:typedefname>
         </db:typedefsynopsis>
         <db:para>This enum defines the possible texture formats. Depending upon your OpenGL implementation only a subset of these may be supported.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::NoFormat</db:td>
                  <db:td>0</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_NONE</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R8_UNorm</db:td>
                  <db:td>0x8229</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_R8</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG8_UNorm</db:td>
                  <db:td>0x822B</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RG8</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB8_UNorm</db:td>
                  <db:td>0x8051</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB8</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA8_UNorm</db:td>
                  <db:td>0x8058</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA8</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R16_UNorm</db:td>
                  <db:td>0x822A</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_R16</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG16_UNorm</db:td>
                  <db:td>0x822C</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RG16</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB16_UNorm</db:td>
                  <db:td>0x8054</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB16</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA16_UNorm</db:td>
                  <db:td>0x805B</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA16</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R8_SNorm</db:td>
                  <db:td>0x8F94</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_R8_SNORM</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG8_SNorm</db:td>
                  <db:td>0x8F95</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RG8_SNORM</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB8_SNorm</db:td>
                  <db:td>0x8F96</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB8_SNORM</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA8_SNorm</db:td>
                  <db:td>0x8F97</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA8_SNORM</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R16_SNorm</db:td>
                  <db:td>0x8F98</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_R16_SNORM</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG16_SNorm</db:td>
                  <db:td>0x8F99</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RG16_SNORM</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB16_SNorm</db:td>
                  <db:td>0x8F9A</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB16_SNORM</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA16_SNorm</db:td>
                  <db:td>0x8F9B</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA16_SNORM</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R8U</db:td>
                  <db:td>0x8232</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_R8UI</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG8U</db:td>
                  <db:td>0x8238</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RG8UI</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB8U</db:td>
                  <db:td>0x8D7D</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB8UI</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA8U</db:td>
                  <db:td>0x8D7C</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA8UI</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R16U</db:td>
                  <db:td>0x8234</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_R16UI</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG16U</db:td>
                  <db:td>0x823A</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RG16UI</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB16U</db:td>
                  <db:td>0x8D77</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB16UI</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA16U</db:td>
                  <db:td>0x8D76</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA16UI</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R32U</db:td>
                  <db:td>0x8236</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_R32UI</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG32U</db:td>
                  <db:td>0x823C</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RG32UI</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB32U</db:td>
                  <db:td>0x8D71</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB32UI</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA32U</db:td>
                  <db:td>0x8D70</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA32UI</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R8I</db:td>
                  <db:td>0x8231</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_R8I</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG8I</db:td>
                  <db:td>0x8237</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RG8I</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB8I</db:td>
                  <db:td>0x8D8F</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB8I</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA8I</db:td>
                  <db:td>0x8D8E</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA8I</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R16I</db:td>
                  <db:td>0x8233</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_R16I</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG16I</db:td>
                  <db:td>0x8239</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RG16I</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB16I</db:td>
                  <db:td>0x8D89</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB16I</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA16I</db:td>
                  <db:td>0x8D88</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA16I</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R32I</db:td>
                  <db:td>0x8235</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_R32I</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG32I</db:td>
                  <db:td>0x823B</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RG32I</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB32I</db:td>
                  <db:td>0x8D83</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB32I</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA32I</db:td>
                  <db:td>0x8D82</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA32I</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R16F</db:td>
                  <db:td>0x822D</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_R16F</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG16F</db:td>
                  <db:td>0x822F</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RG16F</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB16F</db:td>
                  <db:td>0x881B</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB16F</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA16F</db:td>
                  <db:td>0x881A</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA16F</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R32F</db:td>
                  <db:td>0x822E</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_R32F</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG32F</db:td>
                  <db:td>0x8230</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RG32F</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB32F</db:td>
                  <db:td>0x8815</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB32F</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA32F</db:td>
                  <db:td>0x8814</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA32F</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB9E5</db:td>
                  <db:td>0x8C3D</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB9_E5</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG11B10F</db:td>
                  <db:td>0x8C3A</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_R11F_G11F_B10F</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG3B2</db:td>
                  <db:td>0x2A10</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_R3_G3_B2</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R5G6B5</db:td>
                  <db:td>0x8D62</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB565</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB5A1</db:td>
                  <db:td>0x8057</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB5_A1</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA4</db:td>
                  <db:td>0x8056</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA4</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB10A2</db:td>
                  <db:td>0x906F</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB10_A2UI</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::D16</db:td>
                  <db:td>0x81A5</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_DEPTH_COMPONENT16</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::D24</db:td>
                  <db:td>0x81A6</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_DEPTH_COMPONENT24</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::D24S8</db:td>
                  <db:td>0x88F0</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_DEPTH24_STENCIL8</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::D32</db:td>
                  <db:td>0x81A7</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_DEPTH_COMPONENT32</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::D32F</db:td>
                  <db:td>0x8CAC</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_DEPTH_COMPONENT32F</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::D32FS8X24</db:td>
                  <db:td>0x8CAD</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_DEPTH32F_STENCIL8</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::S8</db:td>
                  <db:td>0x8D48</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_STENCIL_INDEX8. Introduced in Qt 5.4</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB_DXT1</db:td>
                  <db:td>0x83F0</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGB_S3TC_DXT1_EXT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_DXT1</db:td>
                  <db:td>0x83F1</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_DXT3</db:td>
                  <db:td>0x83F2</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_S3TC_DXT3_EXT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_DXT5</db:td>
                  <db:td>0x83F3</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_S3TC_DXT5_EXT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R_ATI1N_UNorm</db:td>
                  <db:td>0x8DBB</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RED_RGTC1</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R_ATI1N_SNorm</db:td>
                  <db:td>0x8DBC</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SIGNED_RED_RGTC1</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG_ATI2N_UNorm</db:td>
                  <db:td>0x8DBD</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RG_RGTC2</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG_ATI2N_SNorm</db:td>
                  <db:td>0x8DBE</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SIGNED_RG_RGTC2</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB_BP_UNSIGNED_FLOAT</db:td>
                  <db:td>0x8E8F</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB_BP_SIGNED_FLOAT</db:td>
                  <db:td>0x8E8E</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB_BP_UNorm</db:td>
                  <db:td>0x8E8C</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_BPTC_UNORM_ARB</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R11_EAC_UNorm</db:td>
                  <db:td>0x9270</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_R11_EAC</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::R11_EAC_SNorm</db:td>
                  <db:td>0x9271</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SIGNED_R11_EAC</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG11_EAC_UNorm</db:td>
                  <db:td>0x9272</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RG11_EAC</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RG11_EAC_SNorm</db:td>
                  <db:td>0x9273</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SIGNED_RG11_EAC</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB8_ETC2</db:td>
                  <db:td>0x9274</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGB8_ETC2</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_ETC2</db:td>
                  <db:td>0x9275</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ETC2</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB8_PunchThrough_Alpha1_ETC2</db:td>
                  <db:td>0x9276</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_PunchThrough_Alpha1_ETC2</db:td>
                  <db:td>0x9277</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA8_ETC2_EAC</db:td>
                  <db:td>0x9278</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA8_ETC2_EAC</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8_ETC2_EAC</db:td>
                  <db:td>0x9279</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGB8_ETC1</db:td>
                  <db:td>0x8D64</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_ETC1_RGB8_OES</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_ASTC_4x4</db:td>
                  <db:td>0x93B0</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_4x4_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_ASTC_5x4</db:td>
                  <db:td>0x93B1</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_5x4_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_ASTC_5x5</db:td>
                  <db:td>0x93B2</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_5x5_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_ASTC_6x5</db:td>
                  <db:td>0x93B3</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_6x5_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_ASTC_6x6</db:td>
                  <db:td>0x93B4</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_6x6_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_ASTC_8x5</db:td>
                  <db:td>0x93B5</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_8x5_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_ASTC_8x6</db:td>
                  <db:td>0x93B6</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_8x6_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_ASTC_8x8</db:td>
                  <db:td>0x93B7</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_8x8_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_ASTC_10x5</db:td>
                  <db:td>0x93B8</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_10x5_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_ASTC_10x6</db:td>
                  <db:td>0x93B9</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_10x6_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_ASTC_10x8</db:td>
                  <db:td>0x93BA</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_10x8_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_ASTC_10x10</db:td>
                  <db:td>0x93BB</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_10x10_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_ASTC_12x10</db:td>
                  <db:td>0x93BC</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_12x10_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBA_ASTC_12x12</db:td>
                  <db:td>0x93BD</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_12x12_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8_ASTC_4x4</db:td>
                  <db:td>0x93D0</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8_ASTC_5x4</db:td>
                  <db:td>0x93D1</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8_ASTC_5x5</db:td>
                  <db:td>0x93D2</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8_ASTC_6x5</db:td>
                  <db:td>0x93D3</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8_ASTC_6x6</db:td>
                  <db:td>0x93D4</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8_ASTC_8x5</db:td>
                  <db:td>0x93D5</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8_ASTC_8x6</db:td>
                  <db:td>0x93D6</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8_ASTC_8x8</db:td>
                  <db:td>0x93D7</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8_ASTC_10x5</db:td>
                  <db:td>0x93D8</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8_ASTC_10x6</db:td>
                  <db:td>0x93D9</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8_ASTC_10x8</db:td>
                  <db:td>0x93DA</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8_ASTC_10x10</db:td>
                  <db:td>0x93DB</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8_ASTC_12x10</db:td>
                  <db:td>0x93DC</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8_ASTC_12x12</db:td>
                  <db:td>0x93DD</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8</db:td>
                  <db:td>0x8C41</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_SRGB8</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB8_Alpha8</db:td>
                  <db:td>0x8C43</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_SRGB8_ALPHA8</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB_DXT1</db:td>
                  <db:td>0x8C4C</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB_S3TC_DXT1_EXT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB_Alpha_DXT1</db:td>
                  <db:td>0x8C4D</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB_Alpha_DXT3</db:td>
                  <db:td>0x8C4E</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB_Alpha_DXT5</db:td>
                  <db:td>0x8C4F</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::SRGB_BP_UNorm</db:td>
                  <db:td>0x8E8D</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::DepthFormat</db:td>
                  <db:td>0x1902</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_DEPTH_COMPONENT (only OpenGL ES 3 or ES 2 with OES_depth_texture)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::AlphaFormat</db:td>
                  <db:td>0x1906</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_ALPHA (OpenGL ES 2 only)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBFormat</db:td>
                  <db:td>0x1907</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGB (OpenGL ES 2 only)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::RGBAFormat</db:td>
                  <db:td>0x1908</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_RGBA (OpenGL ES 2 only)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::LuminanceFormat</db:td>
                  <db:td>0x1909</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_LUMINANCE (OpenGL ES 2 only)</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::LuminanceAlphaFormat</db:td>
                  <db:td>0x190A</db:td>
                  <db:td>
                     <db:para>Equivalent to GL_LUMINANCE_ALPHA (OpenGL ES 2 only)</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The <db:code>Features</db:code> type is a typedef for <db:code>QFlags&lt;TextureFormat&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::TextureUnitReset, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::TextureUnitReset</db:enumname>
            <db:enumitem>
               <db:enumidentifier>ResetTextureUnit</db:enumidentifier>
               <db:enumvalue>0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>DontResetTextureUnit</db:enumidentifier>
               <db:enumvalue>1</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>QOpenGLTexture::Features</db:typedefname>
         </db:typedefsynopsis>
         <db:para>This enum defines options ot control texture unit activation.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::ResetTextureUnit</db:td>
                  <db:td>0</db:td>
                  <db:td>
                     <db:para>The previous active texture unit will be reset</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::DontResetTextureUnit</db:td>
                  <db:td>1</db:td>
                  <db:td>
                     <db:para>The previous active texture unit will not be rest</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The <db:code>Features</db:code> type is a typedef for <db:code>QFlags&lt;TextureUnitReset&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QOpenGLTexture::WrapMode, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QOpenGLTexture::WrapMode</db:enumname>
            <db:enumitem>
               <db:enumidentifier>Repeat</db:enumidentifier>
               <db:enumvalue>0x2901</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>MirroredRepeat</db:enumidentifier>
               <db:enumvalue>0x8370</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>ClampToEdge</db:enumidentifier>
               <db:enumvalue>0x812F</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>ClampToBorder</db:enumidentifier>
               <db:enumvalue>0x812D</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>QOpenGLTexture::Features</db:typedefname>
         </db:typedefsynopsis>
         <db:para>This enum defines the possible texture coordinate wrapping modes.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QOpenGLTexture::Repeat</db:td>
                  <db:td>0x2901</db:td>
                  <db:td>
                     <db:para>Texture coordinate is repeated. Equivalent to GL_REPEAT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::MirroredRepeat</db:td>
                  <db:td>0x8370</db:td>
                  <db:td>
                     <db:para>Texture coordinate is reflected about 0 and 1. Equivalent to GL_MIRRORED_REPEAT</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::ClampToEdge</db:td>
                  <db:td>0x812F</db:td>
                  <db:td>
                     <db:para>Clamps the texture coordinates to [0,1]. Equivalent to GL_CLAMP_TO_EDGE</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QOpenGLTexture::ClampToBorder</db:td>
                  <db:td>0x812D</db:td>
                  <db:td>
                     <db:para>As for  but also blends samples at 0 and 1 with a fixed border color. Equivalent to GL_CLAMP_TO_BORDER</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The <db:code>Features</db:code> type is a typedef for <db:code>QFlags&lt;WrapMode&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Member Function Documentation</db:title>
      <db:section>
         <db:title> QOpenGLTexture::QOpenGLTexture(QOpenGLTexture::Target target)</db:title>
         <db:constructorsynopsis>
            <db:modifier>public</db:modifier>
            <db:methodname>QOpenGLTexture</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::Target</db:type>
               <db:parameter>target</db:parameter>
            </db:methodparam>
         </db:constructorsynopsis>
         <db:para>Creates a <db:code><db:link xlink:href="qopengltexture.html" xrefstyle="class" annotations="QOpenGLTexture">QOpenGLTexture</db:link></db:code> object that can later be bound to <db:code role="argument">target</db:code>.</db:para>
         <db:para>This does not create the underlying OpenGL texture object. Therefore, construction using this constructor does not require a valid current OpenGL context.</db:para>
      </db:section>
      <db:section>
         <db:title> QOpenGLTexture::QOpenGLTexture(const QImage &amp;image, QOpenGLTexture::MipMapGeneration genMipMaps)</db:title>
         <db:constructorsynopsis>
            <db:modifier>public</db:modifier>
            <db:methodname>QOpenGLTexture</db:methodname>
            <db:methodparam>
               <db:type>const QImage &amp;</db:type>
               <db:parameter>image</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::MipMapGeneration</db:type>
               <db:parameter>genMipMaps</db:parameter>
               <db:initializer>GenerateMipMaps</db:initializer>
            </db:methodparam>
         </db:constructorsynopsis>
         <db:para>Creates a <db:code><db:link xlink:href="qopengltexture.html" xrefstyle="class" annotations="QOpenGLTexture">QOpenGLTexture</db:link></db:code> object that can later be bound to the 2D texture target and contains the pixel data contained in <db:code role="argument">image</db:code>. If you wish to have a chain of mipmaps generated then set <db:code role="argument">genMipMaps</db:code> to <db:code>true</db:code> (this is the default).</db:para>
         <db:para>This does create the underlying OpenGL texture object. Therefore, construction using this constructor does require a valid current OpenGL context.</db:para>
      </db:section>
      <db:section>
         <db:title>GLuint QOpenGLTexture::boundTextureId(QOpenGLTexture::BindingTarget target)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:type>GLuint</db:type>
            <db:methodname>boundTextureId</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::BindingTarget</db:type>
               <db:parameter>target</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the <db:code><db:link xlink:href="qopengltexture.html#textureId" xrefstyle="function" annotations="textureId">textureId</db:link></db:code> of the texture that is bound to the <db:code role="argument">target</db:code> of the currently active texture unit.</db:para>
      </db:section>
      <db:section>
         <db:title>GLuint QOpenGLTexture::boundTextureId(uint unit, QOpenGLTexture::BindingTarget target)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:type>GLuint</db:type>
            <db:methodname>boundTextureId</db:methodname>
            <db:methodparam>
               <db:type>uint</db:type>
               <db:parameter>unit</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::BindingTarget</db:type>
               <db:parameter>target</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the <db:code><db:link xlink:href="qopengltexture.html#textureId" xrefstyle="function" annotations="textureId">textureId</db:link></db:code> of the texture that is bound to the <db:code role="argument">target</db:code> of the texture unit <db:code role="argument">unit</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>GLuint QOpenGLTexture::textureId() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>GLuint</db:type>
            <db:methodname>textureId</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the name of the underlying OpenGL texture object or 0 if it has not yet been created.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#create" xrefstyle="function" annotations="create()">create()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#destroy" xrefstyle="function" annotations="destroy()">destroy()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isCreated" xrefstyle="function" annotations="isCreated()">isCreated()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QColor QOpenGLTexture::borderColor() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QColor</db:type>
            <db:methodname>borderColor</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the  of this texture.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setBorderColor" xrefstyle="function" annotations="setBorderColor()">setBorderColor()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QOpenGLTexture * QOpenGLTexture::createTextureView(QOpenGLTexture::Target target, QOpenGLTexture::TextureFormat viewFormat, int minimumMipmapLevel, int maximumMipmapLevel, int minimumLayer, int maximumLayer) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QOpenGLTexture *</db:type>
            <db:methodname>createTextureView</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::Target</db:type>
               <db:parameter>target</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::TextureFormat</db:type>
               <db:parameter>viewFormat</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>minimumMipmapLevel</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>maximumMipmapLevel</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>minimumLayer</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>maximumLayer</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Attempts to create a texture view onto this texture. A texture view is somewhat analogous to a view in SQL in that it presents a restricted or reinterpreted view of the original data. Texture views do not allocate any more server-side storage, insted relying on the storage buffer of the source texture.</db:para>
         <db:para>Texture views are only available when using immutable storage. For more information on texture views see http://www.opengl.org/wiki/Texture_Storage#Texture_views.</db:para>
         <db:para>The <db:code role="argument">target</db:code> argument specifies the target to use for the view. Only some targets can be used depending upon the target of the original target. For e.g. a view onto a <db:code><db:link xlink:href="qopengltexture.html#Target-enum" xrefstyle="enum" annotations="Target1DArray">Target1DArray</db:link></db:code> texture can specify either <db:code><db:link xlink:href="qopengltexture.html#Target-enum" xrefstyle="enum" annotations="Target1DArray">Target1DArray</db:link></db:code> or <db:code><db:link xlink:href="qopengltexture.html#Target-enum" xrefstyle="enum" annotations="Target1D">Target1D</db:link></db:code> but for the latter the number of array layers specified with <db:code role="argument">minimumLayer</db:code> and <db:code role="argument">maximumLayer</db:code> must be exactly 1.</db:para>
         <db:para>Simpliar constraints apply for the <db:code role="argument">viewFormat</db:code>. See the above link and the specification for more details.</db:para>
         <db:para>The <db:code role="argument">minimumMipmapLevel</db:code>, <db:code role="argument">maximumMipmapLevel</db:code>, <db:code role="argument">minimumLayer</db:code>, and <db:code role="argument">maximumLayer</db:code> arguments serve to restrict the parts of the texture accessible by the texture view.</db:para>
         <db:para>If creation of the texture view fails this function will return 0. If the function succeeds it will return a pointer to a new <db:code><db:link xlink:href="qopengltexture.html" xrefstyle="class" annotations="QOpenGLTexture">QOpenGLTexture</db:link></db:code> object that will return <db:code>true</db:code> from its <db:code><db:link xlink:href="qopengltexture.html#isTextureView" xrefstyle="function" annotations="isTextureView()">isTextureView()</db:link></db:code> function.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isTextureView" xrefstyle="function" annotations="isTextureView()">isTextureView()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QOpenGLTexture::ComparisonFunction QOpenGLTexture::comparisonFunction() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QOpenGLTexture::ComparisonFunction</db:type>
            <db:methodname>comparisonFunction</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the texture comparison operator set on this texture. By default, a texture has a <db:code><db:link xlink:href="qopengltexture.html#ComparisonFunction-enum" xrefstyle="enum" annotations="CompareLessEqual">CompareLessEqual</db:link></db:code> comparison function.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setComparisonFunction" xrefstyle="function" annotations="setComparisonFunction()">setComparisonFunction()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.5.</db:para>
      </db:section>
      <db:section>
         <db:title>QOpenGLTexture::ComparisonMode QOpenGLTexture::comparisonMode() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QOpenGLTexture::ComparisonMode</db:type>
            <db:methodname>comparisonMode</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the texture comparison mode set on this texture. By default, a texture has a <db:code><db:link xlink:href="qopengltexture.html#ComparisonMode-enum" xrefstyle="enum" annotations="CompareNone">CompareNone</db:link></db:code> comparison mode (i.e. comparisons are disabled).</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setComparisonMode" xrefstyle="function" annotations="setComparisonMode()">setComparisonMode()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.5.</db:para>
      </db:section>
      <db:section>
         <db:title>QOpenGLTexture::DepthStencilMode QOpenGLTexture::depthStencilMode() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QOpenGLTexture::DepthStencilMode</db:type>
            <db:methodname>depthStencilMode</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the depth stencil mode for textures using a combined depth/stencil format.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setDepthStencilMode" xrefstyle="function" annotations="setDepthStencilMode()">setDepthStencilMode()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.4.</db:para>
      </db:section>
      <db:section>
         <db:title>QOpenGLTexture::Filter QOpenGLTexture::magnificationFilter() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QOpenGLTexture::Filter</db:type>
            <db:methodname>magnificationFilter</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the magnification filter.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMagnificationFilter" xrefstyle="function" annotations="setMagnificationFilter()">setMagnificationFilter()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QOpenGLTexture::Filter QOpenGLTexture::minificationFilter() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QOpenGLTexture::Filter</db:type>
            <db:methodname>minificationFilter</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the minification filter.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMinificationFilter" xrefstyle="function" annotations="setMinificationFilter()">setMinificationFilter()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QOpenGLTexture::SwizzleValue QOpenGLTexture::swizzleMask(QOpenGLTexture::SwizzleComponent component) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QOpenGLTexture::SwizzleValue</db:type>
            <db:methodname>swizzleMask</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::SwizzleComponent</db:type>
               <db:parameter>component</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the swizzle mask for texture <db:code role="argument">component</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setSwizzleMask" xrefstyle="function" annotations="setSwizzleMask()">setSwizzleMask()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QOpenGLTexture::Target QOpenGLTexture::target() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QOpenGLTexture::Target</db:type>
            <db:methodname>target</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the binding target of this texture.</db:para>
         <db:para>This property was introduced in Qt 5.4.</db:para>
      </db:section>
      <db:section>
         <db:title>QOpenGLTexture::TextureFormat QOpenGLTexture::format() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QOpenGLTexture::TextureFormat</db:type>
            <db:methodname>format</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the format of this texture object.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setFormat" xrefstyle="function" annotations="setFormat()">setFormat()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QOpenGLTexture::WrapMode QOpenGLTexture::wrapMode(QOpenGLTexture::CoordinateDirection direction) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QOpenGLTexture::WrapMode</db:type>
            <db:methodname>wrapMode</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::CoordinateDirection</db:type>
               <db:parameter>direction</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the wrap mode for the texture dimension <db:code role="argument">direction</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setWrapMode" xrefstyle="function" annotations="setWrapMode()">setWrapMode()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QPair&lt;QOpenGLTexture::Filter, QOpenGLTexture::Filter&gt; QOpenGLTexture::minMagFilters() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QPair&lt;QOpenGLTexture::Filter, QOpenGLTexture::Filter&gt;</db:type>
            <db:methodname>minMagFilters</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the current minification and magnification filters.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMinMagFilters" xrefstyle="function" annotations="setMinMagFilters()">setMinMagFilters()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QPair&lt;float, float&gt; QOpenGLTexture::levelOfDetailRange() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QPair&lt;float, float&gt;</db:type>
            <db:methodname>levelOfDetailRange</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the minimum and maximum level of detail parameters.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setLevelOfDetailRange" xrefstyle="function" annotations="setLevelOfDetailRange()">setLevelOfDetailRange()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#minimumLevelOfDetail" xrefstyle="function" annotations="minimumLevelOfDetail()">minimumLevelOfDetail()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#maximumLevelOfDetail" xrefstyle="function" annotations="maximumLevelOfDetail()">maximumLevelOfDetail()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QPair&lt;int, int&gt; QOpenGLTexture::mipLevelRange() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QPair&lt;int, int&gt;</db:type>
            <db:methodname>mipLevelRange</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the range of mipmap levels that can be used for texture lookups with this texture.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMipLevelRange" xrefstyle="function" annotations="setMipLevelRange()">setMipLevelRange()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#mipBaseLevel" xrefstyle="function" annotations="mipBaseLevel()">mipBaseLevel()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#mipMaxLevel" xrefstyle="function" annotations="mipMaxLevel()">mipMaxLevel()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QOpenGLTexture::create()</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>create</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Creates the underlying OpenGL texture object. This requires a current valid OpenGL context. If the texture object already exists, this function does nothing.</db:para>
         <db:para>Once the texture object is created you can obtain the object name from the <db:code><db:link xlink:href="qopengltexture.html#textureId" xrefstyle="function" annotations="textureId()">textureId()</db:link></db:code> function. This may be useful if you wish to make some raw OpenGL calls related to this texture.</db:para>
         <db:para>Normally it should not be necessary to call this function directly as all functions that set properties of the texture object implicitly call  on your behalf.</db:para>
         <db:para>Returns <db:code>true</db:code> if the creation succeeded, otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#destroy" xrefstyle="function" annotations="destroy()">destroy()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isCreated" xrefstyle="function" annotations="isCreated()">isCreated()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#textureId" xrefstyle="function" annotations="textureId()">textureId()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QOpenGLTexture::hasFeature(QOpenGLTexture::Feature feature)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>hasFeature</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::Feature</db:type>
               <db:parameter>feature</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if your OpenGL implementation and version supports the texture feature <db:code role="argument">feature</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>bool QOpenGLTexture::isAutoMipMapGenerationEnabled() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isAutoMipMapGenerationEnabled</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns whether auto mipmap generation is enabled for this texture object.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setAutoMipMapGenerationEnabled" xrefstyle="function" annotations="setAutoMipMapGenerationEnabled()">setAutoMipMapGenerationEnabled()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#generateMipMaps" xrefstyle="function" annotations="generateMipMaps()">generateMipMaps()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QOpenGLTexture::isBound() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isBound</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if this texture is bound to the corresponding target of the currently active texture unit.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#bind" xrefstyle="function" annotations="bind()">bind()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#release" xrefstyle="function" annotations="release()">release()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QOpenGLTexture::isBound(uint unit)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isBound</db:methodname>
            <db:methodparam>
               <db:type>uint</db:type>
               <db:parameter>unit</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if this texture is bound to the corresponding target of texture unit <db:code role="argument">unit</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#bind" xrefstyle="function" annotations="bind()">bind()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#release" xrefstyle="function" annotations="release()">release()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QOpenGLTexture::isCreated() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isCreated</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if the underlying OpenGL texture object has been created.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#create" xrefstyle="function" annotations="create()">create()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#destroy" xrefstyle="function" annotations="destroy()">destroy()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#textureId" xrefstyle="function" annotations="textureId()">textureId()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QOpenGLTexture::isFixedSamplePositions() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isFixedSamplePositions</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns whether this texture uses a fixed pattern of multisample samples. If storage has not yet been allocated for this texture then this function returns the requested fixed sample position setting.</db:para>
         <db:para>For texture targets that do not support multisampling this will return <db:code>true</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setFixedSamplePositions" xrefstyle="function" annotations="setFixedSamplePositions()">setFixedSamplePositions()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isStorageAllocated" xrefstyle="function" annotations="isStorageAllocated()">isStorageAllocated()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QOpenGLTexture::isStorageAllocated() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isStorageAllocated</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if server-side storage for this texture as been allocated.</db:para>
         <db:para>The texture format, dimensions, mipmap levels and array layers cannot be altered once storage ihas been allocated.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#allocateStorage" xrefstyle="function" annotations="allocateStorage()">allocateStorage()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setSize" xrefstyle="function" annotations="setSize()">setSize()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMipLevels" xrefstyle="function" annotations="setMipLevels()">setMipLevels()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setLayers" xrefstyle="function" annotations="setLayers()">setLayers()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setFormat" xrefstyle="function" annotations="setFormat()">setFormat()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QOpenGLTexture::isTextureView() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isTextureView</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if this texture object is actually a view onto another texture object.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#createTextureView" xrefstyle="function" annotations="createTextureView()">createTextureView()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>float QOpenGLTexture::levelofDetailBias() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>float</db:type>
            <db:methodname>levelofDetailBias</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the level of detail bias parameter.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setLevelofDetailBias" xrefstyle="function" annotations="setLevelofDetailBias()">setLevelofDetailBias()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>float QOpenGLTexture::maximumAnisotropy() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>float</db:type>
            <db:methodname>maximumAnisotropy</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the maximum level of anisotropy to be accounted for when performing texture lookups. This requires the GL_EXT_texture_filter_anisotropic extension.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMaximumAnisotropy" xrefstyle="function" annotations="setMaximumAnisotropy()">setMaximumAnisotropy()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>float QOpenGLTexture::maximumLevelOfDetail() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>float</db:type>
            <db:methodname>maximumLevelOfDetail</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the maximum level of detail parameter.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMaximumLevelOfDetail" xrefstyle="function" annotations="setMaximumLevelOfDetail()">setMaximumLevelOfDetail()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#minimumLevelOfDetail" xrefstyle="function" annotations="minimumLevelOfDetail()">minimumLevelOfDetail()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#levelOfDetailRange" xrefstyle="function" annotations="levelOfDetailRange()">levelOfDetailRange()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>float QOpenGLTexture::minimumLevelOfDetail() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>float</db:type>
            <db:methodname>minimumLevelOfDetail</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the minimum level of detail parameter.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMinimumLevelOfDetail" xrefstyle="function" annotations="setMinimumLevelOfDetail()">setMinimumLevelOfDetail()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#maximumLevelOfDetail" xrefstyle="function" annotations="maximumLevelOfDetail()">maximumLevelOfDetail()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#levelOfDetailRange" xrefstyle="function" annotations="levelOfDetailRange()">levelOfDetailRange()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QOpenGLTexture::depth() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>depth</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the depth of a 3D texture.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#width" xrefstyle="function" annotations="width()">width()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#height" xrefstyle="function" annotations="height()">height()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setSize" xrefstyle="function" annotations="setSize()">setSize()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QOpenGLTexture::faces() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>faces</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the number of faces for this texture. For cubemap and cubemap array type targets this will be 6.</db:para>
         <db:para>For non-cubemap type targets this will return 1.</db:para>
      </db:section>
      <db:section>
         <db:title>int QOpenGLTexture::height() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>height</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the height of a 2D or 3D texture.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#width" xrefstyle="function" annotations="width()">width()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#depth" xrefstyle="function" annotations="depth()">depth()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setSize" xrefstyle="function" annotations="setSize()">setSize()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QOpenGLTexture::layers() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>layers</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the number of array layers for this texture. If storage has not yet been allocated for this texture then this function returns the requested number of array layers.</db:para>
         <db:para>For texture targets that do not support array layers this will return 1.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setLayers" xrefstyle="function" annotations="setLayers()">setLayers()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isStorageAllocated" xrefstyle="function" annotations="isStorageAllocated()">isStorageAllocated()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QOpenGLTexture::maximumMipLevels() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>maximumMipLevels</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the maximum number of mipmap levels that this texture can have given the current dimensions.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMipLevels" xrefstyle="function" annotations="setMipLevels()">setMipLevels()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#mipLevels" xrefstyle="function" annotations="mipLevels()">mipLevels()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setSize" xrefstyle="function" annotations="setSize()">setSize()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QOpenGLTexture::mipBaseLevel() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>mipBaseLevel</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the mipmap base level used for all texture lookups with this texture. The default is 0.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMipBaseLevel" xrefstyle="function" annotations="setMipBaseLevel()">setMipBaseLevel()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#mipMaxLevel" xrefstyle="function" annotations="mipMaxLevel()">mipMaxLevel()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#mipLevelRange" xrefstyle="function" annotations="mipLevelRange()">mipLevelRange()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QOpenGLTexture::mipLevels() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>mipLevels</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the number of mipmap levels for this texture. If storage has not yet been allocated for this texture it returns the requested number of mipmap levels.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMipLevels" xrefstyle="function" annotations="setMipLevels()">setMipLevels()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#maximumMipLevels" xrefstyle="function" annotations="maximumMipLevels()">maximumMipLevels()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isStorageAllocated" xrefstyle="function" annotations="isStorageAllocated()">isStorageAllocated()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QOpenGLTexture::mipMaxLevel() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>mipMaxLevel</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the mipmap maximum level used for all texture lookups with this texture.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMipMaxLevel" xrefstyle="function" annotations="setMipMaxLevel()">setMipMaxLevel()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#mipBaseLevel" xrefstyle="function" annotations="mipBaseLevel()">mipBaseLevel()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#mipLevelRange" xrefstyle="function" annotations="mipLevelRange()">mipLevelRange()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QOpenGLTexture::samples() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>samples</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the number of multisample sample points for this texture. If storage has not yet been allocated for this texture then this function returns the requested number of samples.</db:para>
         <db:para>For texture targets that do not support multisampling this will return 0.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setSamples" xrefstyle="function" annotations="setSamples()">setSamples()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isStorageAllocated" xrefstyle="function" annotations="isStorageAllocated()">isStorageAllocated()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QOpenGLTexture::width() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>width</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the width of a 1D, 2D or 3D texture.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#height" xrefstyle="function" annotations="height()">height()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#depth" xrefstyle="function" annotations="depth()">depth()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setSize" xrefstyle="function" annotations="setSize()">setSize()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::allocateStorage()</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>allocateStorage</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Allocates server-side storage for this texture object taking into account, the format, dimensions, mipmap levels, array layers and cubemap faces.</db:para>
         <db:para>Once storage has been allocated it is no longer possible to change these properties.</db:para>
         <db:para>If supported <db:code><db:link xlink:href="qopengltexture.html" xrefstyle="class" annotations="QOpenGLTexture">QOpenGLTexture</db:link></db:code> makes use of immutable texture storage.</db:para>
         <db:para>Once storage has been allocated for the texture then pixel data can be uploaded via one of the <db:code><db:link xlink:href="qopengltexture.html#setData" xrefstyle="function" annotations="setData()">setData()</db:link></db:code> overloads.</db:para>
         <db:note>
            <db:para> If immutable texture storage is not available, then a default pixel format and pixel type will be used to create the mutable storage. You can use the other  overload to specify exactly the pixel format and the pixel type to use when allocating mutable storage; this is particulary useful under certain OpenGL ES implementations (notably, OpenGL ES 2), where the pixel format and the pixel type used at allocation time must perfectly match the format and the type passed to any subsequent <db:code><db:link xlink:href="qopengltexture.html#setData" xrefstyle="function" annotations="setData()">setData()</db:link></db:code> call.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isStorageAllocated" xrefstyle="function" annotations="isStorageAllocated()">isStorageAllocated()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setData" xrefstyle="function" annotations="setData()">setData()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::allocateStorage(QOpenGLTexture::PixelFormat pixelFormat, QOpenGLTexture::PixelType pixelType)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>allocateStorage</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::PixelFormat</db:type>
               <db:parameter>pixelFormat</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::PixelType</db:type>
               <db:parameter>pixelType</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Allocates server-side storage for this texture object taking into account, the format, dimensions, mipmap levels, array layers and cubemap faces.</db:para>
         <db:para>Once storage has been allocated it is no longer possible to change these properties.</db:para>
         <db:para>If supported <db:code><db:link xlink:href="qopengltexture.html" xrefstyle="class" annotations="QOpenGLTexture">QOpenGLTexture</db:link></db:code> makes use of immutable texture storage. However, if immutable texture storage is not available, then the specified <db:code role="argument">pixelFormat</db:code> and <db:code role="argument">pixelType</db:code> will be used to allocate mutable storage; note that in certain OpenGL implementations (notably, OpenGL ES 2) they must perfectly match the format and the type passed to any subsequent <db:code><db:link xlink:href="qopengltexture.html#setData" xrefstyle="function" annotations="setData()">setData()</db:link></db:code> call.</db:para>
         <db:para>Once storage has been allocated for the texture then pixel data can be uploaded via one of the <db:code><db:link xlink:href="qopengltexture.html#setData" xrefstyle="function" annotations="setData()">setData()</db:link></db:code> overloads.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isStorageAllocated" xrefstyle="function" annotations="isStorageAllocated()">isStorageAllocated()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setData" xrefstyle="function" annotations="setData()">setData()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.5.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::bind()</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>bind</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Binds this texture to the currently active texture unit ready for rendering. Note that you do not need to bind <db:code><db:link xlink:href="qopengltexture.html" xrefstyle="class" annotations="QOpenGLTexture">QOpenGLTexture</db:link></db:code> objects in order to modify them as the implementation makes use of the EXT_direct_state_access extension where available and simulates it where it is not.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#release" xrefstyle="function" annotations="release()">release()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::bind(uint unit, QOpenGLTexture::TextureUnitReset reset)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>bind</db:methodname>
            <db:methodparam>
               <db:type>uint</db:type>
               <db:parameter>unit</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::TextureUnitReset</db:type>
               <db:parameter>reset</db:parameter>
               <db:initializer>DontResetTextureUnit</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Binds this texture to texture unit <db:code role="argument">unit</db:code> ready for rendering. Note that you do not need to bind <db:code><db:link xlink:href="qopengltexture.html" xrefstyle="class" annotations="QOpenGLTexture">QOpenGLTexture</db:link></db:code> objects in order to modify them as the implementation makes use of the EXT_direct_state_access extension where available and simulates it where it is not.</db:para>
         <db:para>If parameter <db:code role="argument">reset</db:code> is <db:code>true</db:code> then this function will restore the active unit to the texture unit that was active upon entry.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#release" xrefstyle="function" annotations="release()">release()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::borderColor(float *border) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>borderColor</db:methodname>
            <db:methodparam>
               <db:type>float *</db:type>
               <db:parameter>border</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Writes the texture border color into the first four elements of the array pointed to by <db:code role="argument">border</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setBorderColor" xrefstyle="function" annotations="setBorderColor()">setBorderColor()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::borderColor(int *border) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>borderColor</db:methodname>
            <db:methodparam>
               <db:type>int *</db:type>
               <db:parameter>border</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Writes the texture border color into the first four elements of the array pointed to by <db:code role="argument">border</db:code>.</db:para>
         <db:para>This is an overloaded function.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::borderColor(unsigned int *border) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>borderColor</db:methodname>
            <db:methodparam>
               <db:type>unsigned int *</db:type>
               <db:parameter>border</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Writes the texture border color into the first four elements of the array pointed to by <db:code role="argument">border</db:code>.</db:para>
         <db:para>This is an overloaded function.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::destroy()</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>destroy</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Destroys the underlying OpenGL texture object. This requires a current valid OpenGL context.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#create" xrefstyle="function" annotations="create()">create()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isCreated" xrefstyle="function" annotations="isCreated()">isCreated()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#textureId" xrefstyle="function" annotations="textureId()">textureId()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::generateMipMaps()</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>generateMipMaps</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Generates mipmaps for this texture object from mipmap level 0. If you are using a texture target and filtering option that requires mipmaps and you have disabled automatic mipmap generation then you need to call this function or the overload to create the mipmap chain.</db:para>
         <db:note>
            <db:para> Mipmap generation is not supported for compressed textures with OpenGL ES 2.0.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setAutoMipMapGenerationEnabled" xrefstyle="function" annotations="setAutoMipMapGenerationEnabled()">setAutoMipMapGenerationEnabled()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMipLevels" xrefstyle="function" annotations="setMipLevels()">setMipLevels()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#mipLevels" xrefstyle="function" annotations="mipLevels()">mipLevels()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::generateMipMaps(int baseLevel, bool resetBaseLevel)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>generateMipMaps</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>baseLevel</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>resetBaseLevel</db:parameter>
               <db:initializer>true</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Generates mipmaps for this texture object from mipmap level <db:code role="argument">baseLevel</db:code>. If you are using a texture target and filtering option that requires mipmaps and you have disabled automatic mipmap generation then you need to call this function or the overload to create the mipmap chain.</db:para>
         <db:para>The generation of mipmaps to above <db:code role="argument">baseLevel</db:code> is achieved by setting the mipmap base level to <db:code role="argument">baseLevel</db:code> and then generating the mipmap chain. If <db:code role="argument">resetBaseLevel</db:code> is <db:code>true</db:code>, then the baseLevel of the texture will be reset to its previous value.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setAutoMipMapGenerationEnabled" xrefstyle="function" annotations="setAutoMipMapGenerationEnabled()">setAutoMipMapGenerationEnabled()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMipLevels" xrefstyle="function" annotations="setMipLevels()">setMipLevels()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#mipLevels" xrefstyle="function" annotations="mipLevels()">mipLevels()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::release()</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>release</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Unbinds this texture from the currently active texture unit.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#bind" xrefstyle="function" annotations="bind()">bind()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::release(uint unit, QOpenGLTexture::TextureUnitReset reset)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>release</db:methodname>
            <db:methodparam>
               <db:type>uint</db:type>
               <db:parameter>unit</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::TextureUnitReset</db:type>
               <db:parameter>reset</db:parameter>
               <db:initializer>DontResetTextureUnit</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Unbinds this texture from texture unit <db:code role="argument">unit</db:code>.</db:para>
         <db:para>If parameter <db:code role="argument">reset</db:code> is <db:code>true</db:code> then this function will restore the active unit to the texture unit that was active upon entry.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setAutoMipMapGenerationEnabled(bool enabled)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setAutoMipMapGenerationEnabled</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>enabled</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>If <db:code role="argument">enabled</db:code> is <db:code>true</db:code>, enables automatic mipmap generation for this texture object to occur whenever the level 0 mipmap data is set via <db:code><db:link xlink:href="qopengltexture.html#setData" xrefstyle="function" annotations="setData()">setData()</db:link></db:code>.</db:para>
         <db:para>The automatic mipmap generation is enabled by default.</db:para>
         <db:note>
            <db:para> Mipmap generation is not supported for compressed textures with OpenGL ES 2.0.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isAutoMipMapGenerationEnabled" xrefstyle="function" annotations="isAutoMipMapGenerationEnabled()">isAutoMipMapGenerationEnabled()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#generateMipMaps" xrefstyle="function" annotations="generateMipMaps()">generateMipMaps()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setBorderColor(QColor color)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setBorderColor</db:methodname>
            <db:methodparam>
               <db:type>QColor</db:type>
               <db:parameter>color</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the border color of the texture to <db:code role="argument">color</db:code>.</db:para>
         <db:note>
            <db:para> This function has no effect on Mac and Qt built for OpenGL ES 2.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#borderColor" xrefstyle="function" annotations="borderColor()">borderColor()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setBorderColor(float r, float g, float b, float a)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setBorderColor</db:methodname>
            <db:methodparam>
               <db:type>float</db:type>
               <db:parameter>r</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>float</db:type>
               <db:parameter>g</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>float</db:type>
               <db:parameter>b</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>float</db:type>
               <db:parameter>a</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the color red to <db:code role="argument">r</db:code>, green to <db:code role="argument">g</db:code>, blue to <db:code role="argument">b</db:code>, and <db:code role="argument">a</db:code> to the alpha value. </db:para>
         <db:para>This is an overloaded function.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setBorderColor(int r, int g, int b, int a)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setBorderColor</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>r</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>g</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>b</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>a</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the color red to <db:code role="argument">r</db:code>, green to <db:code role="argument">g</db:code>, blue to <db:code role="argument">b</db:code>, and the alpha value to <db:code role="argument">a</db:code>. </db:para>
         <db:para>This is an overloaded function.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setBorderColor(uint r, uint g, uint b, uint a)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setBorderColor</db:methodname>
            <db:methodparam>
               <db:type>uint</db:type>
               <db:parameter>r</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>uint</db:type>
               <db:parameter>g</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>uint</db:type>
               <db:parameter>b</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>uint</db:type>
               <db:parameter>a</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the color red to <db:code role="argument">r</db:code>, green to <db:code role="argument">g</db:code>, blue to <db:code role="argument">b</db:code>, and the alpha value to <db:code role="argument">a</db:code>. </db:para>
         <db:para>This is an overloaded function.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setComparisonMode(QOpenGLTexture::ComparisonMode mode)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setComparisonMode</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::ComparisonMode</db:type>
               <db:parameter>mode</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the texture comparison mode on this texture to <db:code role="argument">mode</db:code>. The texture comparison mode is used by shadow samplers when sampling a depth texture.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#comparisonMode" xrefstyle="function" annotations="comparisonMode()">comparisonMode()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.5.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setCompressedData(int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setCompressedData</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>dataSize</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const void *</db:type>
               <db:parameter>data</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QOpenGLPixelTransferOptions *const</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This is an overloaded function.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setCompressedData(int mipLevel, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setCompressedData</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>mipLevel</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>dataSize</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const void *</db:type>
               <db:parameter>data</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QOpenGLPixelTransferOptions *const</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This is an overloaded function.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setCompressedData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setCompressedData</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>mipLevel</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>layer</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::CubeMapFace</db:type>
               <db:parameter>cubeFace</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>dataSize</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const void *</db:type>
               <db:parameter>data</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QOpenGLPixelTransferOptions *const</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Uploads compressed pixel <db:code role="argument">data</db:code> to <db:code role="argument">mipLevel</db:code>, array <db:code role="argument">layer</db:code>, and <db:code role="argument">cubeFace</db:code>. The pixel transfer can optionally be controlled with <db:code role="argument">options</db:code>. The <db:code role="argument">dataSize</db:code> argument should specify the size of the data pointed to by <db:code role="argument">data</db:code>.</db:para>
         <db:para>If not using a compressed <db:code><db:link xlink:href="qopengltexture.html#format" xrefstyle="function" annotations="format()">format()</db:link></db:code> then you should use <db:code><db:link xlink:href="qopengltexture.html#setData" xrefstyle="function" annotations="setData()">setData()</db:link></db:code> instead of this function.</db:para>
         <db:para>This property was introduced in Qt 5.3.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setCompressedData(int mipLevel, int layer, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setCompressedData</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>mipLevel</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>layer</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>dataSize</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const void *</db:type>
               <db:parameter>data</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QOpenGLPixelTransferOptions *const</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This is an overloaded function.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setCompressedData(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setCompressedData</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>mipLevel</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>layer</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>layerCount</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::CubeMapFace</db:type>
               <db:parameter>cubeFace</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>dataSize</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const void *</db:type>
               <db:parameter>data</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QOpenGLPixelTransferOptions *const</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Parameter <db:code role="argument">layerCount</db:code> is the number of layers in a texture array that are being uploaded/populated by this call.</db:para>
         <db:para>This property was introduced in Qt 5.9.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setData(QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setData</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::PixelFormat</db:type>
               <db:parameter>sourceFormat</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::PixelType</db:type>
               <db:parameter>sourceType</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const void *</db:type>
               <db:parameter>data</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QOpenGLPixelTransferOptions *const</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This is an overloaded function.</db:para>
         <db:para>This property was introduced in Qt 5.3.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setData(const QImage &amp;image, QOpenGLTexture::MipMapGeneration genMipMaps)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setData</db:methodname>
            <db:methodparam>
               <db:type>const QImage &amp;</db:type>
               <db:parameter>image</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::MipMapGeneration</db:type>
               <db:parameter>genMipMaps</db:parameter>
               <db:initializer>GenerateMipMaps</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This overload of <db:code><db:link xlink:href="qopengltexture.html#setData" xrefstyle="function" annotations="setData()">setData()</db:link></db:code> will allocate storage for you. The pixel data is contained in <db:code role="argument">image</db:code>. Mipmaps are generated by default. Set <db:code role="argument">genMipMaps</db:code> to <db:code><db:link xlink:href="qopengltexture.html#MipMapGeneration-enum" xrefstyle="enum" annotations="DontGenerateMipMaps">DontGenerateMipMaps</db:link></db:code> to turn off mipmap generation.</db:para>
         <db:para>This is an overloaded function.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setData(int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setData</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>mipLevel</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::PixelFormat</db:type>
               <db:parameter>sourceFormat</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::PixelType</db:type>
               <db:parameter>sourceType</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const void *</db:type>
               <db:parameter>data</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QOpenGLPixelTransferOptions *const</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This is an overloaded function.</db:para>
         <db:para>This property was introduced in Qt 5.3.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setData</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>mipLevel</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>layer</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::CubeMapFace</db:type>
               <db:parameter>cubeFace</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::PixelFormat</db:type>
               <db:parameter>sourceFormat</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::PixelType</db:type>
               <db:parameter>sourceType</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const void *</db:type>
               <db:parameter>data</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QOpenGLPixelTransferOptions *const</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Uploads pixel <db:code role="argument">data</db:code> for this texture object <db:code role="argument">mipLevel</db:code>, array <db:code role="argument">layer</db:code>, and <db:code role="argument">cubeFace</db:code>. Storage must have been allocated before uploading pixel data. Some overloads of  will set appropriate dimensions, mipmap levels, and array layers and then allocate storage for you if they have enough information to do so. This will be noted in the function documentation.</db:para>
         <db:para>The structure of the pixel data pointed to by <db:code role="argument">data</db:code> is specified by <db:code role="argument">sourceFormat</db:code> and <db:code role="argument">sourceType</db:code>. The pixel data upload can optionally be controlled by <db:code role="argument">options</db:code>.</db:para>
         <db:para>If using a compressed <db:code><db:link xlink:href="qopengltexture.html#format" xrefstyle="function" annotations="format()">format()</db:link></db:code> then you should use <db:code><db:link xlink:href="qopengltexture.html#setCompressedData" xrefstyle="function" annotations="setCompressedData()">setCompressedData()</db:link></db:code> instead of this function.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setCompressedData" xrefstyle="function" annotations="setCompressedData()">setCompressedData()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.3.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setData(int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setData</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>mipLevel</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>layer</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::PixelFormat</db:type>
               <db:parameter>sourceFormat</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::PixelType</db:type>
               <db:parameter>sourceType</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const void *</db:type>
               <db:parameter>data</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QOpenGLPixelTransferOptions *const</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This is an overloaded function.</db:para>
         <db:para>This property was introduced in Qt 5.3.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setData(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setData</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>mipLevel</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>layer</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>layerCount</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::CubeMapFace</db:type>
               <db:parameter>cubeFace</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::PixelFormat</db:type>
               <db:parameter>sourceFormat</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::PixelType</db:type>
               <db:parameter>sourceType</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const void *</db:type>
               <db:parameter>data</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QOpenGLPixelTransferOptions *const</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Parameter <db:code role="argument">layerCount</db:code> is the number of layers in a texture array that are being uploaded/populated by this call.</db:para>
         <db:para>This property was introduced in Qt 5.9.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setDepthStencilMode(QOpenGLTexture::DepthStencilMode mode)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setDepthStencilMode</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::DepthStencilMode</db:type>
               <db:parameter>mode</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>If using a texture that has a combined depth/stencil format this function sets which component of the texture is accessed to <db:code role="argument">mode</db:code>.</db:para>
         <db:para>When the parameter is set to <db:code><db:link xlink:href="qopengltexture.html#DepthStencilMode-enum" xrefstyle="enum" annotations="DepthMode">DepthMode</db:link></db:code>, then accessing it from the shader will access the depth component as a single float, as normal. But when the parameter is set to <db:code><db:link xlink:href="qopengltexture.html#DepthStencilMode-enum" xrefstyle="enum" annotations="StencilMode">StencilMode</db:link></db:code>, the shader will access the stencil component.</db:para>
         <db:note>
            <db:para> This function has no effect on Mac and Qt built for OpenGL ES 2.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#depthStencilMode" xrefstyle="function" annotations="depthStencilMode()">depthStencilMode()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.4.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setFixedSamplePositions(bool fixed)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setFixedSamplePositions</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>fixed</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets whether the sample positions and number of samples used with a multisample capable texture target to <db:code role="argument">fixed</db:code>. If set to <db:code>true</db:code> the sample positions and number of samples used are the same for all texels in the image and will not depend upon the image size or internal format. This function should be called before storage is allocated for the texture.</db:para>
         <db:para>For targets that do not support multisampling this function has no effect.</db:para>
         <db:para>The default value is <db:code>true</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isFixedSamplePositions" xrefstyle="function" annotations="isFixedSamplePositions()">isFixedSamplePositions()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isStorageAllocated" xrefstyle="function" annotations="isStorageAllocated()">isStorageAllocated()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setFormat(QOpenGLTexture::TextureFormat format)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setFormat</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::TextureFormat</db:type>
               <db:parameter>format</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the format of this texture object to <db:code role="argument">format</db:code>. This function must be called before texture storage is allocated.</db:para>
         <db:para>Note that all formats may not be supported. The exact set of supported formats is dependent upon your OpenGL implementation and version.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#format" xrefstyle="function" annotations="format()">format()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#allocateStorage" xrefstyle="function" annotations="allocateStorage()">allocateStorage()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setLayers(int layers)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setLayers</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>layers</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the number of array <db:code role="argument">layers</db:code> to allocate storage for. This function should be called before storage is allocated for the texture.</db:para>
         <db:para>For targets that do not support array layers this function has no effect.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#layers" xrefstyle="function" annotations="layers()">layers()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isStorageAllocated" xrefstyle="function" annotations="isStorageAllocated()">isStorageAllocated()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setLevelOfDetailRange(float min, float max)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setLevelOfDetailRange</db:methodname>
            <db:methodparam>
               <db:type>float</db:type>
               <db:parameter>min</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>float</db:type>
               <db:parameter>max</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the minimum level of detail parameters to <db:code role="argument">min</db:code> and the maximum level to <db:code role="argument">max</db:code>.</db:para>
         <db:note>
            <db:para> This function has no effect on Qt built for OpenGL ES 2.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#levelOfDetailRange" xrefstyle="function" annotations="levelOfDetailRange()">levelOfDetailRange()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMinimumLevelOfDetail" xrefstyle="function" annotations="setMinimumLevelOfDetail()">setMinimumLevelOfDetail()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMaximumLevelOfDetail" xrefstyle="function" annotations="setMaximumLevelOfDetail()">setMaximumLevelOfDetail()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setLevelofDetailBias(float bias)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setLevelofDetailBias</db:methodname>
            <db:methodparam>
               <db:type>float</db:type>
               <db:parameter>bias</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the level of detail bias to <db:code role="argument">bias</db:code>. Level of detail bias affects the point at which mipmapping levels change. Increasing values for level of detail bias makes the overall images blurrier or smoother. Decreasing values make the overall images sharper.</db:para>
         <db:note>
            <db:para> This function has no effect on Qt built for OpenGL ES 2.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#levelofDetailBias" xrefstyle="function" annotations="levelofDetailBias()">levelofDetailBias()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setMagnificationFilter(QOpenGLTexture::Filter filter)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setMagnificationFilter</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::Filter</db:type>
               <db:parameter>filter</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the magnification filter to <db:code role="argument">filter</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#magnificationFilter" xrefstyle="function" annotations="magnificationFilter()">magnificationFilter()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMinificationFilter" xrefstyle="function" annotations="setMinificationFilter()">setMinificationFilter()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMinMagFilters" xrefstyle="function" annotations="setMinMagFilters()">setMinMagFilters()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setMaximumAnisotropy(float anisotropy)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setMaximumAnisotropy</db:methodname>
            <db:methodparam>
               <db:type>float</db:type>
               <db:parameter>anisotropy</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>If your OpenGL implementation supports the GL_EXT_texture_filter_anisotropic extension this function sets the maximum anisotropy level to <db:code role="argument">anisotropy</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#maximumAnisotropy" xrefstyle="function" annotations="maximumAnisotropy()">maximumAnisotropy()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setMaximumLevelOfDetail(float value)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setMaximumLevelOfDetail</db:methodname>
            <db:methodparam>
               <db:type>float</db:type>
               <db:parameter>value</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the maximum level of detail to <db:code role="argument">value</db:code>. This limits the selection of lowest resolution mipmap (highest mipmap level). The default value is 1000.</db:para>
         <db:note>
            <db:para> This function has no effect on Qt built for OpenGL ES 2.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#maximumLevelOfDetail" xrefstyle="function" annotations="maximumLevelOfDetail()">maximumLevelOfDetail()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMinimumLevelOfDetail" xrefstyle="function" annotations="setMinimumLevelOfDetail()">setMinimumLevelOfDetail()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setLevelOfDetailRange" xrefstyle="function" annotations="setLevelOfDetailRange()">setLevelOfDetailRange()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setMinMagFilters(QOpenGLTexture::Filter minificationFilter, QOpenGLTexture::Filter magnificationFilter)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setMinMagFilters</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::Filter</db:type>
               <db:parameter>minificationFilter</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::Filter</db:type>
               <db:parameter>magnificationFilter</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the minification filter to <db:code role="argument">minificationFilter</db:code> and the magnification filter to <db:code role="argument">magnificationFilter</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#minMagFilters" xrefstyle="function" annotations="minMagFilters()">minMagFilters()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMinificationFilter" xrefstyle="function" annotations="setMinificationFilter()">setMinificationFilter()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMagnificationFilter" xrefstyle="function" annotations="setMagnificationFilter()">setMagnificationFilter()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setMinificationFilter(QOpenGLTexture::Filter filter)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setMinificationFilter</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::Filter</db:type>
               <db:parameter>filter</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the filter used for minification to <db:code role="argument">filter</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#minificationFilter" xrefstyle="function" annotations="minificationFilter()">minificationFilter()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMagnificationFilter" xrefstyle="function" annotations="setMagnificationFilter()">setMagnificationFilter()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMinMagFilters" xrefstyle="function" annotations="setMinMagFilters()">setMinMagFilters()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setMinimumLevelOfDetail(float value)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setMinimumLevelOfDetail</db:methodname>
            <db:methodparam>
               <db:type>float</db:type>
               <db:parameter>value</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the minimum level of detail to <db:code role="argument">value</db:code>. This limits the selection of highest resolution mipmap (lowest mipmap level). The default value is -1000.</db:para>
         <db:note>
            <db:para> This function has no effect on Qt built for OpenGL ES 2.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#minimumLevelOfDetail" xrefstyle="function" annotations="minimumLevelOfDetail()">minimumLevelOfDetail()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMaximumLevelOfDetail" xrefstyle="function" annotations="setMaximumLevelOfDetail()">setMaximumLevelOfDetail()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setLevelOfDetailRange" xrefstyle="function" annotations="setLevelOfDetailRange()">setLevelOfDetailRange()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setMipBaseLevel(int baseLevel)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setMipBaseLevel</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>baseLevel</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the base mipmap level used for all texture lookups with this texture to <db:code role="argument">baseLevel</db:code>.</db:para>
         <db:note>
            <db:para> This function has no effect on Qt built for OpenGL ES 2.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#mipBaseLevel" xrefstyle="function" annotations="mipBaseLevel()">mipBaseLevel()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMipMaxLevel" xrefstyle="function" annotations="setMipMaxLevel()">setMipMaxLevel()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMipLevelRange" xrefstyle="function" annotations="setMipLevelRange()">setMipLevelRange()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setMipLevelRange(int baseLevel, int maxLevel)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setMipLevelRange</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>baseLevel</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>maxLevel</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the range of mipmap levels that can be used for texture lookups with this texture to range from <db:code role="argument">baseLevel</db:code> to <db:code role="argument">maxLevel</db:code>.</db:para>
         <db:note>
            <db:para> This function has no effect on Qt built for OpenGL ES 2.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMipBaseLevel" xrefstyle="function" annotations="setMipBaseLevel()">setMipBaseLevel()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMipMaxLevel" xrefstyle="function" annotations="setMipMaxLevel()">setMipMaxLevel()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#mipLevelRange" xrefstyle="function" annotations="mipLevelRange()">mipLevelRange()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setMipLevels(int levels)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setMipLevels</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>levels</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>For texture targets that support mipmaps, this function sets the requested number of mipmap <db:code role="argument">levels</db:code> to allocate storage for. This function should be called before storage is allocated for the texture.</db:para>
         <db:para>If the texture target does not support mipmaps this function has no effect.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#mipLevels" xrefstyle="function" annotations="mipLevels()">mipLevels()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#maximumMipLevels" xrefstyle="function" annotations="maximumMipLevels()">maximumMipLevels()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isStorageAllocated" xrefstyle="function" annotations="isStorageAllocated()">isStorageAllocated()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setMipMaxLevel(int maxLevel)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setMipMaxLevel</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>maxLevel</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the maximum mipmap level used for all texture lookups with this texture to <db:code role="argument">maxLevel</db:code>.</db:para>
         <db:note>
            <db:para> This function has no effect on Qt built for OpenGL ES 2.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#mipMaxLevel" xrefstyle="function" annotations="mipMaxLevel()">mipMaxLevel()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMipBaseLevel" xrefstyle="function" annotations="setMipBaseLevel()">setMipBaseLevel()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#setMipLevelRange" xrefstyle="function" annotations="setMipLevelRange()">setMipLevelRange()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setSamples(int samples)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setSamples</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>samples</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the number of <db:code role="argument">samples</db:code> to allocate storage for when rendering to a multisample capable texture target. This function should be called before storage is allocated for the texture.</db:para>
         <db:para>For targets that do not support multisampling this function has no effect.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#samples" xrefstyle="function" annotations="samples()">samples()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#isStorageAllocated" xrefstyle="function" annotations="isStorageAllocated()">isStorageAllocated()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setSize(int width, int height, int depth)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setSize</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>width</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>height</db:parameter>
               <db:initializer>1</db:initializer>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>depth</db:parameter>
               <db:initializer>1</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the dimensions of this texture object to <db:code role="argument">width</db:code>, <db:code role="argument">height</db:code>, and <db:code role="argument">depth</db:code>. The default for each dimension is 1. The maximum allowable texture size is dependent upon your OpenGL implementation. Allocating storage for a texture less than the maximum size can still fail if your system is low on resources.</db:para>
         <db:para>If a non-power-of-two <db:code role="argument">width</db:code>, <db:code role="argument">height</db:code> or <db:code role="argument">depth</db:code> is provided and your OpenGL implementation doesn't have support for repeating non-power-of-two textures, then the wrap mode is automatically set to <db:code><db:link xlink:href="qopengltexture.html#WrapMode-enum" xrefstyle="enum" annotations="ClampToEdge">ClampToEdge</db:link></db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#width" xrefstyle="function" annotations="width()">width()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#height" xrefstyle="function" annotations="height()">height()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#depth" xrefstyle="function" annotations="depth()">depth()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setSwizzleMask(QOpenGLTexture::SwizzleComponent component, QOpenGLTexture::SwizzleValue value)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setSwizzleMask</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::SwizzleComponent</db:type>
               <db:parameter>component</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::SwizzleValue</db:type>
               <db:parameter>value</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>GLSL shaders are able to reorder the components of the vec4 returned by texture functions. It is also desirable to be able to control this reordering from CPU side code. This is made possible by swizzle masks since OpenGL 3.3.</db:para>
         <db:para>Each component of the texture can be mapped to one of the <db:code><db:link xlink:href="qopengltexture.html#SwizzleValue-enum" xrefstyle="enum" annotations="SwizzleValue">SwizzleValue</db:link></db:code> options.</db:para>
         <db:para>This function maps <db:code role="argument">component</db:code> to the output <db:code role="argument">value</db:code>.</db:para>
         <db:note>
            <db:para> This function has no effect on Mac and Qt built for OpenGL ES 2.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#swizzleMask" xrefstyle="function" annotations="swizzleMask()">swizzleMask()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setSwizzleMask(QOpenGLTexture::SwizzleValue r, QOpenGLTexture::SwizzleValue g, QOpenGLTexture::SwizzleValue b, QOpenGLTexture::SwizzleValue a)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setSwizzleMask</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::SwizzleValue</db:type>
               <db:parameter>r</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::SwizzleValue</db:type>
               <db:parameter>g</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::SwizzleValue</db:type>
               <db:parameter>b</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::SwizzleValue</db:type>
               <db:parameter>a</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Parameters <db:code role="argument">r</db:code>, <db:code role="argument">g</db:code>, <db:code role="argument">b</db:code>, and <db:code role="argument">a</db:code> are values used for setting the colors red, green, blue, and the alpha value. </db:para>
         <db:para>This is an overloaded function.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setWrapMode(QOpenGLTexture::CoordinateDirection direction, QOpenGLTexture::WrapMode mode)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setWrapMode</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::CoordinateDirection</db:type>
               <db:parameter>direction</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QOpenGLTexture::WrapMode</db:type>
               <db:parameter>mode</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Holds the texture dimension <db:code role="argument">direction</db:code>. </db:para>
         <db:para>This is an overloaded function.</db:para>
      </db:section>
      <db:section>
         <db:title>void QOpenGLTexture::setWrapMode(QOpenGLTexture::WrapMode mode)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setWrapMode</db:methodname>
            <db:methodparam>
               <db:type>QOpenGLTexture::WrapMode</db:type>
               <db:parameter>mode</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the wrap (or repeat mode) for all texture dimentions to <db:code role="argument">mode</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qopengltexture.html#wrapMode" xrefstyle="function" annotations="wrapMode()">wrapMode()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
   </db:section>
</db:article>
