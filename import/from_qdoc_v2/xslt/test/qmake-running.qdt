<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink">
   <db:info>
      <db:title>Running qmake</db:title>
      <db:abstract>
         <db:para/>
      </db:abstract>
      <db:extendedlink>
         <link xlink:type="arc"
               xlink:from="qmake-running.html"
               xlink:to="qmake-platform-notes.html"
               xlink:title="next"
               xlink:label="Platform Notes"/>
      </db:extendedlink>
      <db:extendedlink>
         <link xlink:type="arc"
               xlink:from="qmake-running.html"
               xlink:to="qmake-common-projects.html"
               xlink:title="previous"
               xlink:label="Building Common Project Types"/>
      </db:extendedlink>
      <db:extendedlink>
         <link xlink:type="arc"
               xlink:from="qmake-running.html"
               xlink:to="qmake-manual.html"
               xlink:title="contents"
               xlink:label="qmake Manual"/>
      </db:extendedlink>
   </db:info>
   <db:para xml:id="">The behavior of qmake can be customized when it is run by specifying various options on the command line. These allow the build process to be fine-tuned, provide useful diagnostic information, and can be used to specify the target platform for your project.</db:para>
   <db:section xml:id="command-syntax">
      <db:title>Command Syntax</db:title>
      <db:para xml:id="">The syntax used to run qmake takes the following simple form:</db:para>
      <db:programlisting>/****************************************************************************&#xD;
**&#xD;
** Copyright (C) 2016 The Qt Company Ltd.&#xD;
** Contact: https://www.qt.io/licensing/&#xD;
**&#xD;
** This file is part of the documentation of the Qt Toolkit.&#xD;
**&#xD;
** $QT_BEGIN_LICENSE:BSD$&#xD;
** Commercial License Usage&#xD;
** Licensees holding valid commercial Qt licenses may use this file in&#xD;
** accordance with the commercial license agreement provided with the&#xD;
** Software or, alternatively, in accordance with the terms contained in&#xD;
** a written agreement between you and The Qt Company. For licensing terms&#xD;
** and conditions see https://www.qt.io/terms-conditions. For further&#xD;
** information use the contact form at https://www.qt.io/contact-us.&#xD;
**&#xD;
** BSD License Usage&#xD;
** Alternatively, you may use this file under the terms of the BSD license&#xD;
** as follows:&#xD;
**&#xD;
** "Redistribution and use in source and binary forms, with or without&#xD;
** modification, are permitted provided that the following conditions are&#xD;
** met:&#xD;
**   * Redistributions of source code must retain the above copyright&#xD;
**     notice, this list of conditions and the following disclaimer.&#xD;
**   * Redistributions in binary form must reproduce the above copyright&#xD;
**     notice, this list of conditions and the following disclaimer in&#xD;
**     the documentation and/or other materials provided with the&#xD;
**     distribution.&#xD;
**   * Neither the name of The Qt Company Ltd nor the names of its&#xD;
**     contributors may be used to endorse or promote products derived&#xD;
**     from this software without specific prior written permission.&#xD;
**&#xD;
**&#xD;
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#xD;
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#xD;
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR&#xD;
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT&#xD;
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xD;
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xD;
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,&#xD;
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY&#xD;
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&#xD;
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#xD;
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."&#xD;
**&#xD;
** $QT_END_LICENSE$&#xD;
**&#xD;
****************************************************************************/&#xD;
&#xD;
#! [0]&#xD;
make all&#xD;
#! [0]&#xD;
&#xD;
&#xD;
#! [1]&#xD;
CONFIG += qt debug&#xD;
#! [1]&#xD;
&#xD;
&#xD;
#! [2]&#xD;
QT += network xml&#xD;
#! [2]&#xD;
&#xD;
&#xD;
#! [3]&#xD;
QT = network xml # This will omit the core and gui modules.&#xD;
#! [3]&#xD;
&#xD;
&#xD;
#! [4]&#xD;
QT -= gui # Only the core module is used.&#xD;
#! [4]&#xD;
&#xD;
&#xD;
#! [5]&#xD;
CONFIG += link_pkgconfig&#xD;
PKGCONFIG += ogg dbus-1&#xD;
#! [5]&#xD;
&#xD;
&#xD;
#! [6]&#xD;
LIBS += -L/usr/local/lib -lmath&#xD;
#! [6]&#xD;
&#xD;
&#xD;
#! [7]&#xD;
INCLUDEPATH = c:/msdev/include d:/stl/include&#xD;
#! [7]&#xD;
&#xD;
&#xD;
#! [8]&#xD;
qmake [mode] [options] files&#xD;
#! [8]&#xD;
&#xD;
&#xD;
#! [9]&#xD;
qmake -makefile [options] files&#xD;
#! [9]&#xD;
&#xD;
&#xD;
#! [10]&#xD;
qmake -makefile -o Makefile "CONFIG+=test" test.pro&#xD;
#! [10]&#xD;
&#xD;
&#xD;
#! [11]&#xD;
qmake "CONFIG+=test" test.pro&#xD;
#! [11]&#xD;
&#xD;
&#xD;
#! [12]&#xD;
qmake -project [options] files&#xD;
#! [12]&#xD;
&#xD;
&#xD;
#! [13]&#xD;
qmake -spec macx-g++&#xD;
#! [13]&#xD;
&#xD;
&#xD;
#! [14]&#xD;
LIBS += -F/path/to/framework/directory/&#xD;
#! [14]&#xD;
&#xD;
&#xD;
#! [15]&#xD;
LIBS += -framework TheFramework&#xD;
#! [15]&#xD;
&#xD;
&#xD;
#! [16]&#xD;
TEMPLATE = lib&#xD;
CONFIG += lib_bundle&#xD;
#! [16]&#xD;
&#xD;
&#xD;
#! [17]&#xD;
FRAMEWORK_HEADERS.version = Versions&#xD;
FRAMEWORK_HEADERS.files = path/to/header_one.h path/to/header_two.h&#xD;
FRAMEWORK_HEADERS.path = Headers&#xD;
QMAKE_BUNDLE_DATA += FRAMEWORK_HEADERS&#xD;
#! [17]&#xD;
&#xD;
&#xD;
#! [19]&#xD;
qmake -spec macx-xcode project.pro&#xD;
#! [19]&#xD;
&#xD;
&#xD;
#! [20]&#xD;
qmake -tp vc&#xD;
#! [20]&#xD;
&#xD;
&#xD;
#! [21]&#xD;
qmake -tp vc -r&#xD;
#! [21]&#xD;
&#xD;
&#xD;
#! [22]&#xD;
CONFIG -= embed_manifest_exe&#xD;
#! [22]&#xD;
&#xD;
&#xD;
#! [23]&#xD;
CONFIG -= embed_manifest_dll&#xD;
#! [23]&#xD;
&#xD;
&#xD;
#! [24]&#xD;
make all&#xD;
#! [24]&#xD;
&#xD;
&#xD;
#! [25]&#xD;
build_pass:CONFIG(debug, debug|release) {&#xD;
    unix: TARGET = $$join(TARGET,,,_debug)&#xD;
    else: TARGET = $$join(TARGET,,,d)&#xD;
}&#xD;
#! [25]&#xD;
&#xD;
&#xD;
#! [26]&#xD;
CONFIG += console newstuff&#xD;
...&#xD;
newstuff {&#xD;
    SOURCES += new.cpp&#xD;
    HEADERS += new.h&#xD;
}&#xD;
#! [26]&#xD;
&#xD;
&#xD;
#! [27]&#xD;
DEFINES += USE_MY_STUFF&#xD;
#! [27]&#xD;
&#xD;
&#xD;
#! [30]&#xD;
DESTDIR = ../../lib&#xD;
#! [30]&#xD;
&#xD;
&#xD;
#! [31]&#xD;
DISTFILES += ../program.txt&#xD;
#! [31]&#xD;
&#xD;
&#xD;
#! [32]&#xD;
FORMS = mydialog.ui \&#xD;
    mywidget.ui \&#xD;
        myconfig.ui&#xD;
#! [32]&#xD;
&#xD;
&#xD;
#! [34]&#xD;
HEADERS = myclass.h \&#xD;
          login.h \&#xD;
          mainwindow.h&#xD;
#! [34]&#xD;
&#xD;
&#xD;
#! [35]&#xD;
INCLUDEPATH = c:/msdev/include d:/stl/include&#xD;
#! [35]&#xD;
&#xD;
&#xD;
#! [36]&#xD;
target.path += $$[QT_INSTALL_PLUGINS]/imageformats&#xD;
INSTALLS += target&#xD;
#! [36]&#xD;
&#xD;
&#xD;
#! [37]&#xD;
LEXSOURCES = lexer.l&#xD;
#! [37]&#xD;
&#xD;
&#xD;
#! [38]&#xD;
unix:LIBS += -L/usr/local/lib -lmath&#xD;
win32:LIBS += c:/mylibs/math.lib&#xD;
#! [38]&#xD;
&#xD;
&#xD;
#! [39]&#xD;
CONFIG += no_lflags_merge&#xD;
#! [39]&#xD;
&#xD;
&#xD;
#! [40]&#xD;
unix:MOC_DIR = ../myproject/tmp&#xD;
win32:MOC_DIR = c:/myproject/tmp&#xD;
#! [40]&#xD;
&#xD;
&#xD;
#! [41]&#xD;
unix:OBJECTS_DIR = ../myproject/tmp&#xD;
win32:OBJECTS_DIR = c:/myproject/tmp&#xD;
#! [41]&#xD;
&#xD;
&#xD;
#! [43]&#xD;
FRAMEWORK_HEADERS.version = Versions&#xD;
FRAMEWORK_HEADERS.files = path/to/header_one.h path/to/header_two.h&#xD;
FRAMEWORK_HEADERS.path = Headers&#xD;
QMAKE_BUNDLE_DATA += FRAMEWORK_HEADERS&#xD;
#! [43]&#xD;
&#xD;
&#xD;
#! [44]&#xD;
QMAKE_BUNDLE_EXTENSION = .myframework&#xD;
#! [44]&#xD;
&#xD;
&#xD;
#! [45]&#xD;
QMAKE_RESOURCE_FLAGS += -threshold 0 -compress 9&#xD;
#! [45]&#xD;
&#xD;
&#xD;
#! [47]&#xD;
QT -= gui # Only the core module is used.&#xD;
#! [47]&#xD;
&#xD;
&#xD;
#! [48]&#xD;
unix:RCC_DIR = ../myproject/resources&#xD;
win32:RCC_DIR = c:/myproject/resources&#xD;
#! [48]&#xD;
&#xD;
&#xD;
#! [49]&#xD;
SOURCES = myclass.cpp \&#xD;
      login.cpp \&#xD;
      mainwindow.cpp&#xD;
#! [49]&#xD;
&#xD;
&#xD;
#! [50]&#xD;
SUBDIRS = kernel \&#xD;
          tools \&#xD;
          myapp&#xD;
#! [50]&#xD;
&#xD;
&#xD;
#! [51]&#xD;
CONFIG += ordered&#xD;
#! [51]&#xD;
&#xD;
&#xD;
#! [52]&#xD;
TEMPLATE = app&#xD;
TARGET = myapp&#xD;
SOURCES = main.cpp&#xD;
#! [52]&#xD;
&#xD;
&#xD;
#! [53]&#xD;
TEMPLATE = lib&#xD;
SOURCES = main.cpp&#xD;
TARGET = mylib&#xD;
#! [53]&#xD;
&#xD;
&#xD;
#! [54]&#xD;
unix:UI_DIR = ../myproject/ui&#xD;
win32:UI_DIR = c:/myproject/ui&#xD;
#! [54]&#xD;
&#xD;
&#xD;
#! [57]&#xD;
win32:VERSION = 1.2.3.4 # major.minor.patch.build&#xD;
else:VERSION = 1.2.3    # major.minor.patch&#xD;
#! [57]&#xD;
&#xD;
&#xD;
#! [58]&#xD;
YACCSOURCES = moc.y&#xD;
#! [58]&#xD;
&#xD;
&#xD;
#! [59]&#xD;
FILE = /etc/passwd&#xD;
FILENAME = $$basename(FILE) #passwd&#xD;
#! [59]&#xD;
&#xD;
&#xD;
#! [60]&#xD;
CONFIG = debug&#xD;
CONFIG += release&#xD;
CONFIG(release, debug|release):message(Release build!) #will print&#xD;
CONFIG(debug, debug|release):message(Debug build!) #no print&#xD;
#! [60]&#xD;
&#xD;
&#xD;
#! [61]&#xD;
contains( drivers, network ) {&#xD;
    # drivers contains 'network'&#xD;
    message( "Configuring for network build..." )&#xD;
    HEADERS += network.h&#xD;
    SOURCES += network.cpp&#xD;
}&#xD;
#! [61]&#xD;
&#xD;
&#xD;
#! [62]&#xD;
error(An error has occurred in the configuration process.)&#xD;
#! [62]&#xD;
&#xD;
&#xD;
#! [63]&#xD;
exists( $(QTDIR)/lib/libqt-mt* ) {&#xD;
      message( "Configuring for multi-threaded Qt..." )&#xD;
      CONFIG += thread&#xD;
}&#xD;
#! [63]&#xD;
&#xD;
&#xD;
#! [64]&#xD;
MY_VAR = one two three four&#xD;
MY_VAR2 = $$join(MY_VAR, " -L", -L) -Lfive&#xD;
MY_VAR3 = $$member(MY_VAR, 2) $$find(MY_VAR, t.*)&#xD;
#! [64]&#xD;
&#xD;
&#xD;
#! [65]&#xD;
LIST = 1 2 3&#xD;
for(a, LIST):exists(file.$${a}):message(I see a file.$${a}!)&#xD;
#! [65]&#xD;
&#xD;
&#xD;
#! [66]&#xD;
include( shared.pri )&#xD;
OPTIONS = standard custom&#xD;
!include( options.pri ) {&#xD;
    message( "No custom build options specified" )&#xD;
OPTIONS -= custom&#xD;
}&#xD;
#! [66]&#xD;
&#xD;
&#xD;
#! [67]&#xD;
isEmpty( CONFIG ) {&#xD;
CONFIG += warn_on debug&#xD;
}&#xD;
#! [67]&#xD;
&#xD;
&#xD;
#! [68]&#xD;
message( "This is a message" )&#xD;
#! [68]&#xD;
&#xD;
&#xD;
#! [69]&#xD;
!build_pass:message( "This is a message" )&#xD;
#! [69]&#xD;
&#xD;
&#xD;
#! [70]&#xD;
This is a test.&#xD;
#! [70]&#xD;
&#xD;
&#xD;
#! [71]&#xD;
system("ls /bin"): HAS_BIN = TRUE&#xD;
#! [71]&#xD;
&#xD;
&#xD;
#! [72]&#xD;
UNAME = $$system(uname -s)&#xD;
contains( UNAME, [lL]inux ):message( This looks like Linux ($$UNAME) to me )&#xD;
#! [72]&#xD;
&#xD;
&#xD;
#! [73]&#xD;
ARGS = 1 2 3 2 5 1&#xD;
ARGS = $$unique(ARGS) #1 2 3 5&#xD;
#! [73]&#xD;
&#xD;
&#xD;
#! [74]&#xD;
qmake -set PROPERTY VALUE&#xD;
#! [74]&#xD;
&#xD;
&#xD;
#! [75]&#xD;
qmake -query PROPERTY&#xD;
qmake -query #queries all current PROPERTY/VALUE pairs&#xD;
#! [75]&#xD;
&#xD;
&#xD;
#! [77]&#xD;
qmake -query "QT_INSTALL_PREFIX"&#xD;
#! [77]&#xD;
&#xD;
&#xD;
#! [78]&#xD;
QMAKE_VERS = $$[QMAKE_VERSION]&#xD;
#! [78]&#xD;
&#xD;
&#xD;
#! [79]&#xD;
documentation.path = /usr/local/program/doc&#xD;
documentation.files = docs/*&#xD;
#! [79]&#xD;
&#xD;
&#xD;
#! [80]&#xD;
INSTALLS += documentation&#xD;
#! [80]&#xD;
&#xD;
&#xD;
#! [81]&#xD;
unix:documentation.extra = create_docs; mv master.doc toc.doc&#xD;
#! [81]&#xD;
&#xD;
&#xD;
#! [82]&#xD;
target.path = /usr/local/myprogram&#xD;
INSTALLS += target&#xD;
#! [82]&#xD;
&#xD;
&#xD;
#! [83]&#xD;
CONFIG += create_prl&#xD;
#! [83]&#xD;
&#xD;
&#xD;
#! [84]&#xD;
CONFIG += link_prl&#xD;
#! [84]&#xD;
&#xD;
&#xD;
#! [85]&#xD;
QMAKE_EXT_MOC = .mymoc&#xD;
#! [85]&#xD;
&#xD;
&#xD;
#! [86]&#xD;
mytarget.target = .buildfile&#xD;
mytarget.commands = touch $$mytarget.target&#xD;
mytarget.depends = mytarget2&#xD;
&#xD;
mytarget2.commands = @echo Building $$mytarget.target&#xD;
#! [86]&#xD;
&#xD;
&#xD;
#! [87]&#xD;
QMAKE_EXTRA_TARGETS += mytarget mytarget2&#xD;
#! [87]&#xD;
&#xD;
&#xD;
#! [88]&#xD;
new_moc.output  = moc_${QMAKE_FILE_BASE}.cpp&#xD;
new_moc.commands = moc ${QMAKE_FILE_NAME} -o ${QMAKE_FILE_OUT}&#xD;
new_moc.depend_command = g++ -E -M ${QMAKE_FILE_NAME} | sed "s,^.*: ,,"&#xD;
new_moc.input = NEW_HEADERS&#xD;
QMAKE_EXTRA_COMPILERS += new_moc&#xD;
#! [88]&#xD;
&#xD;
&#xD;
#! [89]&#xD;
TARGET = myapp&#xD;
#! [89]&#xD;
&#xD;
&#xD;
#! [90]&#xD;
DEFINES += USE_MY_STUFF&#xD;
#! [90]&#xD;
&#xD;
&#xD;
#! [91]&#xD;
DEFINES -= USE_MY_STUFF&#xD;
#! [91]&#xD;
&#xD;
&#xD;
#! [92]&#xD;
DEFINES *= USE_MY_STUFF&#xD;
#! [92]&#xD;
&#xD;
&#xD;
#! [93]&#xD;
DEFINES ~= s/QT_[DT].+/QT&#xD;
#! [93]&#xD;
&#xD;
&#xD;
#! [94]&#xD;
EVERYTHING = $$SOURCES $$HEADERS&#xD;
message("The project contains the following files:")&#xD;
message($$EVERYTHING)&#xD;
#! [94]&#xD;
&#xD;
&#xD;
#! [95]&#xD;
win32:DEFINES += USE_MY_STUFF&#xD;
#! [95]&#xD;
&#xD;
&#xD;
#! [96]&#xD;
win32:xml {&#xD;
    message(Building for Windows)&#xD;
    SOURCES += xmlhandler_win.cpp&#xD;
} else:xml {&#xD;
    SOURCES += xmlhandler.cpp&#xD;
} else {&#xD;
    message("Unknown configuration")&#xD;
}&#xD;
#! [96]&#xD;
&#xD;
&#xD;
#! [97]&#xD;
MY_VARIABLE = value&#xD;
#! [97]&#xD;
&#xD;
&#xD;
#! [98]&#xD;
MY_DEFINES = $$DEFINES&#xD;
#! [98]&#xD;
&#xD;
&#xD;
#! [99]&#xD;
MY_DEFINES = $${DEFINES}&#xD;
#! [99]&#xD;
&#xD;
&#xD;
#! [100]&#xD;
TARGET = myproject_$${TEMPLATE}&#xD;
#! [100]&#xD;
&#xD;
&#xD;
#! [101]&#xD;
target.path = $$[QT_INSTALL_PLUGINS]/designer&#xD;
INSTALLS += target&#xD;
#! [101]&#xD;
&#xD;
&#xD;
#! [102]&#xD;
defineReplace(functionName){&#xD;
    #function code&#xD;
}&#xD;
#! [102]&#xD;
&#xD;
&#xD;
#! [103]&#xD;
CONFIG += myfeatures&#xD;
#! [103]&#xD;
&#xD;
&#xD;
#! [105]&#xD;
PRECOMPILED_HEADER = stable.h&#xD;
#! [105]&#xD;
&#xD;
&#xD;
#! [106]&#xD;
precompile_header:!isEmpty(PRECOMPILED_HEADER) {&#xD;
DEFINES += USING_PCH&#xD;
}&#xD;
#! [106]&#xD;
&#xD;
&#xD;
#! [107]&#xD;
PRECOMPILED_HEADER = window.h&#xD;
SOURCES            = window.cpp&#xD;
#! [107]&#xD;
&#xD;
&#xD;
#! [108]&#xD;
SOURCES += hello.cpp&#xD;
#! [108]&#xD;
&#xD;
&#xD;
#! [109]&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [109]&#xD;
&#xD;
&#xD;
#! [110]&#xD;
SOURCES = hello.cpp \&#xD;
          main.cpp&#xD;
#! [110]&#xD;
&#xD;
&#xD;
#! [111]&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [111]&#xD;
&#xD;
&#xD;
#! [112]&#xD;
TARGET = helloworld&#xD;
#! [112]&#xD;
&#xD;
&#xD;
#! [113]&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [113]&#xD;
&#xD;
&#xD;
#! [114]&#xD;
qmake -o Makefile hello.pro&#xD;
#! [114]&#xD;
&#xD;
&#xD;
#! [115]&#xD;
qmake -tp vc hello.pro&#xD;
#! [115]&#xD;
&#xD;
&#xD;
#! [116]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [116]&#xD;
&#xD;
&#xD;
#! [117]&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
#! [117]&#xD;
&#xD;
&#xD;
#! [118]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
unix {&#xD;
    SOURCES += hellounix.cpp&#xD;
}&#xD;
#! [118]&#xD;
&#xD;
&#xD;
#! [119]&#xD;
!exists( main.cpp ) {&#xD;
    error( "No main.cpp file found" )&#xD;
}&#xD;
#! [119]&#xD;
&#xD;
&#xD;
#! [120]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
unix {&#xD;
    SOURCES += hellounix.cpp&#xD;
}&#xD;
!exists( main.cpp ) {&#xD;
    error( "No main.cpp file found" )&#xD;
}&#xD;
#! [120]&#xD;
&#xD;
&#xD;
#! [121]&#xD;
win32 {&#xD;
    debug {&#xD;
        CONFIG += console&#xD;
    }&#xD;
}&#xD;
#! [121]&#xD;
&#xD;
&#xD;
#! [122]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
unix {&#xD;
    SOURCES += hellounix.cpp&#xD;
}&#xD;
!exists( main.cpp ) {&#xD;
    error( "No main.cpp file found" )&#xD;
}&#xD;
win32:debug {&#xD;
    CONFIG += console&#xD;
}&#xD;
#! [122]&#xD;
&#xD;
&#xD;
#! [123]&#xD;
TEMPLATE = app&#xD;
DESTDIR  = c:/helloapp&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
DEFINES += USE_MY_STUFF&#xD;
CONFIG  += release&#xD;
#! [123]&#xD;
&#xD;
&#xD;
#! [124]&#xD;
make all&#xD;
#! [124]&#xD;
&#xD;
&#xD;
#! [125]&#xD;
make&#xD;
#! [125]&#xD;
&#xD;
&#xD;
#! [126]&#xD;
make install&#xD;
#! [126]&#xD;
&#xD;
&#xD;
#! [127]&#xD;
CONFIG(debug, debug|release) {&#xD;
    mac: TARGET = $$join(TARGET,,,_debug)&#xD;
    win32: TARGET = $$join(TARGET,,d)&#xD;
}&#xD;
#! [127]&#xD;
&#xD;
#! [149]&#xD;
SUBDIRS += my_executable my_library&#xD;
my_executable.subdir = app&#xD;
my_executable.depends = my_library&#xD;
my_library.subdir = lib&#xD;
#! [149]&#xD;
&#xD;
#! [157]&#xD;
packagesExist(sqlite3 QtNetwork QtDeclarative) {&#xD;
    DEFINES += USE_FANCY_UI&#xD;
}&#xD;
#! [157]&#xD;
&#xD;
#! [158]&#xD;
#ifdef USE_FANCY_UI&#xD;
    // Use the fancy UI, as we have extra packages available&#xD;
#endif&#xD;
#! [158]&#xD;
&#xD;
#! [159]&#xD;
message($$absolute_path("readme.txt", "/home/johndoe/myproject"))&#xD;
#! [159]&#xD;
&#xD;
&#xD;
#! [160]&#xD;
TARGET = helloworld&#xD;
equals(TARGET, "helloworld") {&#xD;
    message("The target assignment was successful.")&#xD;
}&#xD;
#! [160]&#xD;
&#xD;
&#xD;
#! [161]&#xD;
CONTACT = firstname middlename surname phone&#xD;
message($$first(CONTACT))&#xD;
#! [161]&#xD;
&#xD;
&#xD;
#! [162]&#xD;
CONTACT = firstname middlename surname phone&#xD;
message($$last(CONTACT))&#xD;
#! [162]&#xD;
&#xD;
&#xD;
#! [163]&#xD;
message($$format_number(BAD, ibase=16 width=6 zeropad))&#xD;
#! [163]&#xD;
&#xD;
&#xD;
#! [164]&#xD;
ANSWER = 42&#xD;
greaterThan(ANSWER, 1) {&#xD;
    message("The answer might be correct.")&#xD;
}&#xD;
#! [164]&#xD;
&#xD;
&#xD;
#! [165]&#xD;
ANSWER = 42&#xD;
lessThan(ANSWER, 1) {&#xD;
    message("The answer might be wrong.")&#xD;
}&#xD;
#! [165]&#xD;
&#xD;
&#xD;
#! [166]&#xD;
if(linux-g++*|macx-g++*):CONFIG(debug, debug|release) {&#xD;
    message("We are on Linux or Mac OS, and we are in debug mode.")&#xD;
}&#xD;
#! [166]&#xD;
&#xD;
&#xD;
#! [167]&#xD;
CONTACT = firstname:middlename:surname:phone&#xD;
message($$section(CONTACT, :, 2, 2))&#xD;
#! [167]&#xD;
&#xD;
&#xD;
#! [168]&#xD;
CONTACT = firstname:middlename:surname:phone&#xD;
message($$split(CONTACT, :))&#xD;
#! [168]&#xD;
&#xD;
#! [169]&#xD;
NARF = zort&#xD;
unset(NARF)&#xD;
!defined(NARF, var) {&#xD;
    message("NARF is not defined.")&#xD;
}&#xD;
#! [169]&#xD;
&#xD;
&#xD;
#! [170]&#xD;
for(var, $$list(foo bar baz)) {&#xD;
    ...&#xD;
}&#xD;
#! [170]&#xD;
&#xD;
&#xD;
#! [171]&#xD;
values = foo bar baz&#xD;
for(var, values) {&#xD;
    ...&#xD;
}&#xD;
#! [171]&#xD;
&#xD;
&#xD;
#! [172]&#xD;
VALUE = 123&#xD;
TMP_VALUE = x$$VALUE&#xD;
greaterThan(TMP_VALUE, x456): message("Condition may be true.")&#xD;
#! [172]&#xD;
&#xD;
&#xD;
#! [173]&#xD;
message("First line$$escape_expand(\\n)Second line")&#xD;
#! [173]&#xD;
&#xD;
&#xD;
#! [174]&#xD;
TEMPLATE = subdirs&#xD;
SUBDIRS = one two three&#xD;
prepareRecursiveTarget(check)&#xD;
#! [174]&#xD;
&#xD;
&#xD;
#! [175]&#xD;
two.CONFIG += no_check_target&#xD;
#! [175]&#xD;
&#xD;
&#xD;
#! [176]&#xD;
QMAKE_EXTRA_TARGETS += check&#xD;
#! [176]&#xD;
&#xD;
&#xD;
#! [177]&#xD;
# &lt;project root&gt;/features/mycheck.prf&#xD;
equals(TEMPLATE, subdirs) {&#xD;
    prepareRecursiveTarget(check)&#xD;
} else {&#xD;
    check.commands = echo hello user&#xD;
}&#xD;
QMAKE_EXTRA_TARGETS += check&#xD;
#! [177]&#xD;
&#xD;
&#xD;
#! [178]&#xD;
# &lt;project root&gt;/.qmake.conf&#xD;
CONFIG += mycheck&#xD;
#! [178]&#xD;
&#xD;
&#xD;
#! [179]&#xD;
# &lt;project root&gt;/project.pro&#xD;
load(configure)&#xD;
#! [179]&#xD;
&#xD;
&#xD;
#! [180]&#xD;
# &lt;project root&gt;/config.tests/test/test.pro&#xD;
SOURCES = main.cpp&#xD;
LIBS += -ltheFeature&#xD;
# Note that the test project is built without Qt by default.&#xD;
#! [180]&#xD;
&#xD;
&#xD;
#! [181]&#xD;
// &lt;project root&gt;/config.tests/test/main.cpp&#xD;
#include &lt;TheFeature/MainHeader.h&gt;&#xD;
int main() { return featureFunction(); }&#xD;
#! [181]&#xD;
&#xD;
&#xD;
#! [182]&#xD;
# &lt;project root&gt;/project.pro&#xD;
qtCompileTest(test)&#xD;
#! [182]&#xD;
&#xD;
#! [183]&#xD;
# &lt;project root&gt;/project.pro&#xD;
QMAKE_SONAME_PREFIX = @rpath&#xD;
#! [183]&#xD;
&#xD;
#! [184]&#xD;
# &lt;project root&gt;/project.pro&#xD;
QMAKE_SONAME_PREFIX = @executable_path/../Frameworks&#xD;
QMAKE_SONAME_PREFIX = @loader_path/Frameworks&#xD;
QMAKE_SONAME_PREFIX = /Library/Frameworks&#xD;
#! [184]&#xD;
&#xD;
#! [185]&#xD;
VERSION_PE_HEADER = 1.2&#xD;
#! [185]&#xD;
&#xD;
#! [186]&#xD;
RC_DEFINES += USE_MY_STUFF&#xD;
#! [186]&#xD;
&#xD;
#! [187]&#xD;
win32-g++:contains(QMAKE_HOST.arch, x86_64):{&#xD;
    message("Host is 64bit")&#xD;
    ...&#xD;
}&#xD;
#! [187]&#xD;
</db:programlisting>
   </db:section>
   <db:section xml:id="operating-modes">
      <db:title>Operating Modes</db:title>
      <db:para xml:id="">qmake supports two different modes of operation. In the default mode, qmake uses the information in a project file to generate a Makefile, but it is also possible to use qmake to generate project files. If you want to explicitly set the mode, you must specify it before all other options. The <db:code>mode</db:code> can be either of the following two values:</db:para>
      <db:itemizedlist>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-makefile</db:code> qmake output will be a Makefile.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-project</db:code> qmake output will be a project file. </db:para>
            <db:note xml:id="">
               <db:para> It is likely that the created file will need to be edited. For example, adding the <db:code>QT</db:code> variable to suit what modules are required for the project.</db:para>
            </db:note>
         </db:listitem>
      </db:itemizedlist>
      <db:para xml:id="">You can use the <db:code>options</db:code> to specify both general and mode-specific settings. Options that only apply to the Makefile mode are described in the <db:link xlink:href="qmake-running.html#makefilemode" xrefstyle="page" annotations="#MakefileMode">Makefile Mode Options</db:link> section, whereas options that influence the creation of project files are described in the <db:link xlink:href="qmake-running.html#projectmode" xrefstyle="page" annotations="#ProjectMode">Project Mode Options</db:link> section.</db:para>
   </db:section>
   <db:section xml:id="files">
      <db:title>Files</db:title>
      <db:para xml:id="">The <db:code>files</db:code> argument represents a list of one or more project files, separated by spaces.</db:para>
   </db:section>
   <db:section xml:id="general-options">
      <db:title>General Options</db:title>
      <db:para xml:id="">A wide range of options can be specified on the command line to qmake in order to customize the build process, and to override default settings for your platform. The following basic options provide help on using qmake, specify where qmake writes the output file, and control the level of debugging information that will be written to the console:</db:para>
      <db:itemizedlist>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-help</db:code> qmake will go over these features and give some useful help.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-o file</db:code> qmake output will be directed to <db:code>file</db:code>. If this option is not specified, qmake will try to use a suitable file name for its output, depending on the mode it is running in. If '-' is specified, output is directed to stdout.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-d</db:code> qmake will output debugging information. Adding <db:code>-d</db:code> more than once increases verbosity.</db:para>
         </db:listitem>
      </db:itemizedlist>
      <db:para xml:id="">The template used for the project is usually specified by the <db:link xlink:href="qmake-variable-reference.html#template" xrefstyle="page" annotations="TEMPLATE">TEMPLATE</db:link> variable in the project file. You can override or modify this by using the following options:</db:para>
      <db:itemizedlist>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-t tmpl</db:code> qmake will override any set <db:code>TEMPLATE</db:code> variables with <db:code>tmpl</db:code>, but only <db:emphasis>after</db:emphasis> the .pro file has been processed.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-tp prefix</db:code> qmake will add <db:code>prefix</db:code> to the <db:code>TEMPLATE</db:code> variable.</db:para>
         </db:listitem>
      </db:itemizedlist>
      <db:para xml:id="">The level of warning information can be fine-tuned to help you find problems in your project file:</db:para>
      <db:itemizedlist>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-Wall</db:code> qmake will report all known warnings.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-Wnone</db:code> No warning information will be generated by qmake.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-Wparser</db:code> qmake will only generate parser warnings. This will alert you to common pitfalls and potential problems in the parsing of your project files.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-Wlogic</db:code> qmake will warn of common pitfalls and potential problems in your project file. For example, qmake will report multiple occurrences of files in lists and missing files.</db:para>
         </db:listitem>
      </db:itemizedlist>
   </db:section>
   <db:section xml:id="makefile-mode-options">
      <db:title>Makefile Mode Options</db:title>
      <db:programlisting>/****************************************************************************&#xD;
**&#xD;
** Copyright (C) 2016 The Qt Company Ltd.&#xD;
** Contact: https://www.qt.io/licensing/&#xD;
**&#xD;
** This file is part of the documentation of the Qt Toolkit.&#xD;
**&#xD;
** $QT_BEGIN_LICENSE:BSD$&#xD;
** Commercial License Usage&#xD;
** Licensees holding valid commercial Qt licenses may use this file in&#xD;
** accordance with the commercial license agreement provided with the&#xD;
** Software or, alternatively, in accordance with the terms contained in&#xD;
** a written agreement between you and The Qt Company. For licensing terms&#xD;
** and conditions see https://www.qt.io/terms-conditions. For further&#xD;
** information use the contact form at https://www.qt.io/contact-us.&#xD;
**&#xD;
** BSD License Usage&#xD;
** Alternatively, you may use this file under the terms of the BSD license&#xD;
** as follows:&#xD;
**&#xD;
** "Redistribution and use in source and binary forms, with or without&#xD;
** modification, are permitted provided that the following conditions are&#xD;
** met:&#xD;
**   * Redistributions of source code must retain the above copyright&#xD;
**     notice, this list of conditions and the following disclaimer.&#xD;
**   * Redistributions in binary form must reproduce the above copyright&#xD;
**     notice, this list of conditions and the following disclaimer in&#xD;
**     the documentation and/or other materials provided with the&#xD;
**     distribution.&#xD;
**   * Neither the name of The Qt Company Ltd nor the names of its&#xD;
**     contributors may be used to endorse or promote products derived&#xD;
**     from this software without specific prior written permission.&#xD;
**&#xD;
**&#xD;
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#xD;
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#xD;
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR&#xD;
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT&#xD;
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xD;
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xD;
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,&#xD;
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY&#xD;
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&#xD;
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#xD;
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."&#xD;
**&#xD;
** $QT_END_LICENSE$&#xD;
**&#xD;
****************************************************************************/&#xD;
&#xD;
#! [0]&#xD;
make all&#xD;
#! [0]&#xD;
&#xD;
&#xD;
#! [1]&#xD;
CONFIG += qt debug&#xD;
#! [1]&#xD;
&#xD;
&#xD;
#! [2]&#xD;
QT += network xml&#xD;
#! [2]&#xD;
&#xD;
&#xD;
#! [3]&#xD;
QT = network xml # This will omit the core and gui modules.&#xD;
#! [3]&#xD;
&#xD;
&#xD;
#! [4]&#xD;
QT -= gui # Only the core module is used.&#xD;
#! [4]&#xD;
&#xD;
&#xD;
#! [5]&#xD;
CONFIG += link_pkgconfig&#xD;
PKGCONFIG += ogg dbus-1&#xD;
#! [5]&#xD;
&#xD;
&#xD;
#! [6]&#xD;
LIBS += -L/usr/local/lib -lmath&#xD;
#! [6]&#xD;
&#xD;
&#xD;
#! [7]&#xD;
INCLUDEPATH = c:/msdev/include d:/stl/include&#xD;
#! [7]&#xD;
&#xD;
&#xD;
#! [8]&#xD;
qmake [mode] [options] files&#xD;
#! [8]&#xD;
&#xD;
&#xD;
#! [9]&#xD;
qmake -makefile [options] files&#xD;
#! [9]&#xD;
&#xD;
&#xD;
#! [10]&#xD;
qmake -makefile -o Makefile "CONFIG+=test" test.pro&#xD;
#! [10]&#xD;
&#xD;
&#xD;
#! [11]&#xD;
qmake "CONFIG+=test" test.pro&#xD;
#! [11]&#xD;
&#xD;
&#xD;
#! [12]&#xD;
qmake -project [options] files&#xD;
#! [12]&#xD;
&#xD;
&#xD;
#! [13]&#xD;
qmake -spec macx-g++&#xD;
#! [13]&#xD;
&#xD;
&#xD;
#! [14]&#xD;
LIBS += -F/path/to/framework/directory/&#xD;
#! [14]&#xD;
&#xD;
&#xD;
#! [15]&#xD;
LIBS += -framework TheFramework&#xD;
#! [15]&#xD;
&#xD;
&#xD;
#! [16]&#xD;
TEMPLATE = lib&#xD;
CONFIG += lib_bundle&#xD;
#! [16]&#xD;
&#xD;
&#xD;
#! [17]&#xD;
FRAMEWORK_HEADERS.version = Versions&#xD;
FRAMEWORK_HEADERS.files = path/to/header_one.h path/to/header_two.h&#xD;
FRAMEWORK_HEADERS.path = Headers&#xD;
QMAKE_BUNDLE_DATA += FRAMEWORK_HEADERS&#xD;
#! [17]&#xD;
&#xD;
&#xD;
#! [19]&#xD;
qmake -spec macx-xcode project.pro&#xD;
#! [19]&#xD;
&#xD;
&#xD;
#! [20]&#xD;
qmake -tp vc&#xD;
#! [20]&#xD;
&#xD;
&#xD;
#! [21]&#xD;
qmake -tp vc -r&#xD;
#! [21]&#xD;
&#xD;
&#xD;
#! [22]&#xD;
CONFIG -= embed_manifest_exe&#xD;
#! [22]&#xD;
&#xD;
&#xD;
#! [23]&#xD;
CONFIG -= embed_manifest_dll&#xD;
#! [23]&#xD;
&#xD;
&#xD;
#! [24]&#xD;
make all&#xD;
#! [24]&#xD;
&#xD;
&#xD;
#! [25]&#xD;
build_pass:CONFIG(debug, debug|release) {&#xD;
    unix: TARGET = $$join(TARGET,,,_debug)&#xD;
    else: TARGET = $$join(TARGET,,,d)&#xD;
}&#xD;
#! [25]&#xD;
&#xD;
&#xD;
#! [26]&#xD;
CONFIG += console newstuff&#xD;
...&#xD;
newstuff {&#xD;
    SOURCES += new.cpp&#xD;
    HEADERS += new.h&#xD;
}&#xD;
#! [26]&#xD;
&#xD;
&#xD;
#! [27]&#xD;
DEFINES += USE_MY_STUFF&#xD;
#! [27]&#xD;
&#xD;
&#xD;
#! [30]&#xD;
DESTDIR = ../../lib&#xD;
#! [30]&#xD;
&#xD;
&#xD;
#! [31]&#xD;
DISTFILES += ../program.txt&#xD;
#! [31]&#xD;
&#xD;
&#xD;
#! [32]&#xD;
FORMS = mydialog.ui \&#xD;
    mywidget.ui \&#xD;
        myconfig.ui&#xD;
#! [32]&#xD;
&#xD;
&#xD;
#! [34]&#xD;
HEADERS = myclass.h \&#xD;
          login.h \&#xD;
          mainwindow.h&#xD;
#! [34]&#xD;
&#xD;
&#xD;
#! [35]&#xD;
INCLUDEPATH = c:/msdev/include d:/stl/include&#xD;
#! [35]&#xD;
&#xD;
&#xD;
#! [36]&#xD;
target.path += $$[QT_INSTALL_PLUGINS]/imageformats&#xD;
INSTALLS += target&#xD;
#! [36]&#xD;
&#xD;
&#xD;
#! [37]&#xD;
LEXSOURCES = lexer.l&#xD;
#! [37]&#xD;
&#xD;
&#xD;
#! [38]&#xD;
unix:LIBS += -L/usr/local/lib -lmath&#xD;
win32:LIBS += c:/mylibs/math.lib&#xD;
#! [38]&#xD;
&#xD;
&#xD;
#! [39]&#xD;
CONFIG += no_lflags_merge&#xD;
#! [39]&#xD;
&#xD;
&#xD;
#! [40]&#xD;
unix:MOC_DIR = ../myproject/tmp&#xD;
win32:MOC_DIR = c:/myproject/tmp&#xD;
#! [40]&#xD;
&#xD;
&#xD;
#! [41]&#xD;
unix:OBJECTS_DIR = ../myproject/tmp&#xD;
win32:OBJECTS_DIR = c:/myproject/tmp&#xD;
#! [41]&#xD;
&#xD;
&#xD;
#! [43]&#xD;
FRAMEWORK_HEADERS.version = Versions&#xD;
FRAMEWORK_HEADERS.files = path/to/header_one.h path/to/header_two.h&#xD;
FRAMEWORK_HEADERS.path = Headers&#xD;
QMAKE_BUNDLE_DATA += FRAMEWORK_HEADERS&#xD;
#! [43]&#xD;
&#xD;
&#xD;
#! [44]&#xD;
QMAKE_BUNDLE_EXTENSION = .myframework&#xD;
#! [44]&#xD;
&#xD;
&#xD;
#! [45]&#xD;
QMAKE_RESOURCE_FLAGS += -threshold 0 -compress 9&#xD;
#! [45]&#xD;
&#xD;
&#xD;
#! [47]&#xD;
QT -= gui # Only the core module is used.&#xD;
#! [47]&#xD;
&#xD;
&#xD;
#! [48]&#xD;
unix:RCC_DIR = ../myproject/resources&#xD;
win32:RCC_DIR = c:/myproject/resources&#xD;
#! [48]&#xD;
&#xD;
&#xD;
#! [49]&#xD;
SOURCES = myclass.cpp \&#xD;
      login.cpp \&#xD;
      mainwindow.cpp&#xD;
#! [49]&#xD;
&#xD;
&#xD;
#! [50]&#xD;
SUBDIRS = kernel \&#xD;
          tools \&#xD;
          myapp&#xD;
#! [50]&#xD;
&#xD;
&#xD;
#! [51]&#xD;
CONFIG += ordered&#xD;
#! [51]&#xD;
&#xD;
&#xD;
#! [52]&#xD;
TEMPLATE = app&#xD;
TARGET = myapp&#xD;
SOURCES = main.cpp&#xD;
#! [52]&#xD;
&#xD;
&#xD;
#! [53]&#xD;
TEMPLATE = lib&#xD;
SOURCES = main.cpp&#xD;
TARGET = mylib&#xD;
#! [53]&#xD;
&#xD;
&#xD;
#! [54]&#xD;
unix:UI_DIR = ../myproject/ui&#xD;
win32:UI_DIR = c:/myproject/ui&#xD;
#! [54]&#xD;
&#xD;
&#xD;
#! [57]&#xD;
win32:VERSION = 1.2.3.4 # major.minor.patch.build&#xD;
else:VERSION = 1.2.3    # major.minor.patch&#xD;
#! [57]&#xD;
&#xD;
&#xD;
#! [58]&#xD;
YACCSOURCES = moc.y&#xD;
#! [58]&#xD;
&#xD;
&#xD;
#! [59]&#xD;
FILE = /etc/passwd&#xD;
FILENAME = $$basename(FILE) #passwd&#xD;
#! [59]&#xD;
&#xD;
&#xD;
#! [60]&#xD;
CONFIG = debug&#xD;
CONFIG += release&#xD;
CONFIG(release, debug|release):message(Release build!) #will print&#xD;
CONFIG(debug, debug|release):message(Debug build!) #no print&#xD;
#! [60]&#xD;
&#xD;
&#xD;
#! [61]&#xD;
contains( drivers, network ) {&#xD;
    # drivers contains 'network'&#xD;
    message( "Configuring for network build..." )&#xD;
    HEADERS += network.h&#xD;
    SOURCES += network.cpp&#xD;
}&#xD;
#! [61]&#xD;
&#xD;
&#xD;
#! [62]&#xD;
error(An error has occurred in the configuration process.)&#xD;
#! [62]&#xD;
&#xD;
&#xD;
#! [63]&#xD;
exists( $(QTDIR)/lib/libqt-mt* ) {&#xD;
      message( "Configuring for multi-threaded Qt..." )&#xD;
      CONFIG += thread&#xD;
}&#xD;
#! [63]&#xD;
&#xD;
&#xD;
#! [64]&#xD;
MY_VAR = one two three four&#xD;
MY_VAR2 = $$join(MY_VAR, " -L", -L) -Lfive&#xD;
MY_VAR3 = $$member(MY_VAR, 2) $$find(MY_VAR, t.*)&#xD;
#! [64]&#xD;
&#xD;
&#xD;
#! [65]&#xD;
LIST = 1 2 3&#xD;
for(a, LIST):exists(file.$${a}):message(I see a file.$${a}!)&#xD;
#! [65]&#xD;
&#xD;
&#xD;
#! [66]&#xD;
include( shared.pri )&#xD;
OPTIONS = standard custom&#xD;
!include( options.pri ) {&#xD;
    message( "No custom build options specified" )&#xD;
OPTIONS -= custom&#xD;
}&#xD;
#! [66]&#xD;
&#xD;
&#xD;
#! [67]&#xD;
isEmpty( CONFIG ) {&#xD;
CONFIG += warn_on debug&#xD;
}&#xD;
#! [67]&#xD;
&#xD;
&#xD;
#! [68]&#xD;
message( "This is a message" )&#xD;
#! [68]&#xD;
&#xD;
&#xD;
#! [69]&#xD;
!build_pass:message( "This is a message" )&#xD;
#! [69]&#xD;
&#xD;
&#xD;
#! [70]&#xD;
This is a test.&#xD;
#! [70]&#xD;
&#xD;
&#xD;
#! [71]&#xD;
system("ls /bin"): HAS_BIN = TRUE&#xD;
#! [71]&#xD;
&#xD;
&#xD;
#! [72]&#xD;
UNAME = $$system(uname -s)&#xD;
contains( UNAME, [lL]inux ):message( This looks like Linux ($$UNAME) to me )&#xD;
#! [72]&#xD;
&#xD;
&#xD;
#! [73]&#xD;
ARGS = 1 2 3 2 5 1&#xD;
ARGS = $$unique(ARGS) #1 2 3 5&#xD;
#! [73]&#xD;
&#xD;
&#xD;
#! [74]&#xD;
qmake -set PROPERTY VALUE&#xD;
#! [74]&#xD;
&#xD;
&#xD;
#! [75]&#xD;
qmake -query PROPERTY&#xD;
qmake -query #queries all current PROPERTY/VALUE pairs&#xD;
#! [75]&#xD;
&#xD;
&#xD;
#! [77]&#xD;
qmake -query "QT_INSTALL_PREFIX"&#xD;
#! [77]&#xD;
&#xD;
&#xD;
#! [78]&#xD;
QMAKE_VERS = $$[QMAKE_VERSION]&#xD;
#! [78]&#xD;
&#xD;
&#xD;
#! [79]&#xD;
documentation.path = /usr/local/program/doc&#xD;
documentation.files = docs/*&#xD;
#! [79]&#xD;
&#xD;
&#xD;
#! [80]&#xD;
INSTALLS += documentation&#xD;
#! [80]&#xD;
&#xD;
&#xD;
#! [81]&#xD;
unix:documentation.extra = create_docs; mv master.doc toc.doc&#xD;
#! [81]&#xD;
&#xD;
&#xD;
#! [82]&#xD;
target.path = /usr/local/myprogram&#xD;
INSTALLS += target&#xD;
#! [82]&#xD;
&#xD;
&#xD;
#! [83]&#xD;
CONFIG += create_prl&#xD;
#! [83]&#xD;
&#xD;
&#xD;
#! [84]&#xD;
CONFIG += link_prl&#xD;
#! [84]&#xD;
&#xD;
&#xD;
#! [85]&#xD;
QMAKE_EXT_MOC = .mymoc&#xD;
#! [85]&#xD;
&#xD;
&#xD;
#! [86]&#xD;
mytarget.target = .buildfile&#xD;
mytarget.commands = touch $$mytarget.target&#xD;
mytarget.depends = mytarget2&#xD;
&#xD;
mytarget2.commands = @echo Building $$mytarget.target&#xD;
#! [86]&#xD;
&#xD;
&#xD;
#! [87]&#xD;
QMAKE_EXTRA_TARGETS += mytarget mytarget2&#xD;
#! [87]&#xD;
&#xD;
&#xD;
#! [88]&#xD;
new_moc.output  = moc_${QMAKE_FILE_BASE}.cpp&#xD;
new_moc.commands = moc ${QMAKE_FILE_NAME} -o ${QMAKE_FILE_OUT}&#xD;
new_moc.depend_command = g++ -E -M ${QMAKE_FILE_NAME} | sed "s,^.*: ,,"&#xD;
new_moc.input = NEW_HEADERS&#xD;
QMAKE_EXTRA_COMPILERS += new_moc&#xD;
#! [88]&#xD;
&#xD;
&#xD;
#! [89]&#xD;
TARGET = myapp&#xD;
#! [89]&#xD;
&#xD;
&#xD;
#! [90]&#xD;
DEFINES += USE_MY_STUFF&#xD;
#! [90]&#xD;
&#xD;
&#xD;
#! [91]&#xD;
DEFINES -= USE_MY_STUFF&#xD;
#! [91]&#xD;
&#xD;
&#xD;
#! [92]&#xD;
DEFINES *= USE_MY_STUFF&#xD;
#! [92]&#xD;
&#xD;
&#xD;
#! [93]&#xD;
DEFINES ~= s/QT_[DT].+/QT&#xD;
#! [93]&#xD;
&#xD;
&#xD;
#! [94]&#xD;
EVERYTHING = $$SOURCES $$HEADERS&#xD;
message("The project contains the following files:")&#xD;
message($$EVERYTHING)&#xD;
#! [94]&#xD;
&#xD;
&#xD;
#! [95]&#xD;
win32:DEFINES += USE_MY_STUFF&#xD;
#! [95]&#xD;
&#xD;
&#xD;
#! [96]&#xD;
win32:xml {&#xD;
    message(Building for Windows)&#xD;
    SOURCES += xmlhandler_win.cpp&#xD;
} else:xml {&#xD;
    SOURCES += xmlhandler.cpp&#xD;
} else {&#xD;
    message("Unknown configuration")&#xD;
}&#xD;
#! [96]&#xD;
&#xD;
&#xD;
#! [97]&#xD;
MY_VARIABLE = value&#xD;
#! [97]&#xD;
&#xD;
&#xD;
#! [98]&#xD;
MY_DEFINES = $$DEFINES&#xD;
#! [98]&#xD;
&#xD;
&#xD;
#! [99]&#xD;
MY_DEFINES = $${DEFINES}&#xD;
#! [99]&#xD;
&#xD;
&#xD;
#! [100]&#xD;
TARGET = myproject_$${TEMPLATE}&#xD;
#! [100]&#xD;
&#xD;
&#xD;
#! [101]&#xD;
target.path = $$[QT_INSTALL_PLUGINS]/designer&#xD;
INSTALLS += target&#xD;
#! [101]&#xD;
&#xD;
&#xD;
#! [102]&#xD;
defineReplace(functionName){&#xD;
    #function code&#xD;
}&#xD;
#! [102]&#xD;
&#xD;
&#xD;
#! [103]&#xD;
CONFIG += myfeatures&#xD;
#! [103]&#xD;
&#xD;
&#xD;
#! [105]&#xD;
PRECOMPILED_HEADER = stable.h&#xD;
#! [105]&#xD;
&#xD;
&#xD;
#! [106]&#xD;
precompile_header:!isEmpty(PRECOMPILED_HEADER) {&#xD;
DEFINES += USING_PCH&#xD;
}&#xD;
#! [106]&#xD;
&#xD;
&#xD;
#! [107]&#xD;
PRECOMPILED_HEADER = window.h&#xD;
SOURCES            = window.cpp&#xD;
#! [107]&#xD;
&#xD;
&#xD;
#! [108]&#xD;
SOURCES += hello.cpp&#xD;
#! [108]&#xD;
&#xD;
&#xD;
#! [109]&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [109]&#xD;
&#xD;
&#xD;
#! [110]&#xD;
SOURCES = hello.cpp \&#xD;
          main.cpp&#xD;
#! [110]&#xD;
&#xD;
&#xD;
#! [111]&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [111]&#xD;
&#xD;
&#xD;
#! [112]&#xD;
TARGET = helloworld&#xD;
#! [112]&#xD;
&#xD;
&#xD;
#! [113]&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [113]&#xD;
&#xD;
&#xD;
#! [114]&#xD;
qmake -o Makefile hello.pro&#xD;
#! [114]&#xD;
&#xD;
&#xD;
#! [115]&#xD;
qmake -tp vc hello.pro&#xD;
#! [115]&#xD;
&#xD;
&#xD;
#! [116]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [116]&#xD;
&#xD;
&#xD;
#! [117]&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
#! [117]&#xD;
&#xD;
&#xD;
#! [118]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
unix {&#xD;
    SOURCES += hellounix.cpp&#xD;
}&#xD;
#! [118]&#xD;
&#xD;
&#xD;
#! [119]&#xD;
!exists( main.cpp ) {&#xD;
    error( "No main.cpp file found" )&#xD;
}&#xD;
#! [119]&#xD;
&#xD;
&#xD;
#! [120]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
unix {&#xD;
    SOURCES += hellounix.cpp&#xD;
}&#xD;
!exists( main.cpp ) {&#xD;
    error( "No main.cpp file found" )&#xD;
}&#xD;
#! [120]&#xD;
&#xD;
&#xD;
#! [121]&#xD;
win32 {&#xD;
    debug {&#xD;
        CONFIG += console&#xD;
    }&#xD;
}&#xD;
#! [121]&#xD;
&#xD;
&#xD;
#! [122]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
unix {&#xD;
    SOURCES += hellounix.cpp&#xD;
}&#xD;
!exists( main.cpp ) {&#xD;
    error( "No main.cpp file found" )&#xD;
}&#xD;
win32:debug {&#xD;
    CONFIG += console&#xD;
}&#xD;
#! [122]&#xD;
&#xD;
&#xD;
#! [123]&#xD;
TEMPLATE = app&#xD;
DESTDIR  = c:/helloapp&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
DEFINES += USE_MY_STUFF&#xD;
CONFIG  += release&#xD;
#! [123]&#xD;
&#xD;
&#xD;
#! [124]&#xD;
make all&#xD;
#! [124]&#xD;
&#xD;
&#xD;
#! [125]&#xD;
make&#xD;
#! [125]&#xD;
&#xD;
&#xD;
#! [126]&#xD;
make install&#xD;
#! [126]&#xD;
&#xD;
&#xD;
#! [127]&#xD;
CONFIG(debug, debug|release) {&#xD;
    mac: TARGET = $$join(TARGET,,,_debug)&#xD;
    win32: TARGET = $$join(TARGET,,d)&#xD;
}&#xD;
#! [127]&#xD;
&#xD;
#! [149]&#xD;
SUBDIRS += my_executable my_library&#xD;
my_executable.subdir = app&#xD;
my_executable.depends = my_library&#xD;
my_library.subdir = lib&#xD;
#! [149]&#xD;
&#xD;
#! [157]&#xD;
packagesExist(sqlite3 QtNetwork QtDeclarative) {&#xD;
    DEFINES += USE_FANCY_UI&#xD;
}&#xD;
#! [157]&#xD;
&#xD;
#! [158]&#xD;
#ifdef USE_FANCY_UI&#xD;
    // Use the fancy UI, as we have extra packages available&#xD;
#endif&#xD;
#! [158]&#xD;
&#xD;
#! [159]&#xD;
message($$absolute_path("readme.txt", "/home/johndoe/myproject"))&#xD;
#! [159]&#xD;
&#xD;
&#xD;
#! [160]&#xD;
TARGET = helloworld&#xD;
equals(TARGET, "helloworld") {&#xD;
    message("The target assignment was successful.")&#xD;
}&#xD;
#! [160]&#xD;
&#xD;
&#xD;
#! [161]&#xD;
CONTACT = firstname middlename surname phone&#xD;
message($$first(CONTACT))&#xD;
#! [161]&#xD;
&#xD;
&#xD;
#! [162]&#xD;
CONTACT = firstname middlename surname phone&#xD;
message($$last(CONTACT))&#xD;
#! [162]&#xD;
&#xD;
&#xD;
#! [163]&#xD;
message($$format_number(BAD, ibase=16 width=6 zeropad))&#xD;
#! [163]&#xD;
&#xD;
&#xD;
#! [164]&#xD;
ANSWER = 42&#xD;
greaterThan(ANSWER, 1) {&#xD;
    message("The answer might be correct.")&#xD;
}&#xD;
#! [164]&#xD;
&#xD;
&#xD;
#! [165]&#xD;
ANSWER = 42&#xD;
lessThan(ANSWER, 1) {&#xD;
    message("The answer might be wrong.")&#xD;
}&#xD;
#! [165]&#xD;
&#xD;
&#xD;
#! [166]&#xD;
if(linux-g++*|macx-g++*):CONFIG(debug, debug|release) {&#xD;
    message("We are on Linux or Mac OS, and we are in debug mode.")&#xD;
}&#xD;
#! [166]&#xD;
&#xD;
&#xD;
#! [167]&#xD;
CONTACT = firstname:middlename:surname:phone&#xD;
message($$section(CONTACT, :, 2, 2))&#xD;
#! [167]&#xD;
&#xD;
&#xD;
#! [168]&#xD;
CONTACT = firstname:middlename:surname:phone&#xD;
message($$split(CONTACT, :))&#xD;
#! [168]&#xD;
&#xD;
#! [169]&#xD;
NARF = zort&#xD;
unset(NARF)&#xD;
!defined(NARF, var) {&#xD;
    message("NARF is not defined.")&#xD;
}&#xD;
#! [169]&#xD;
&#xD;
&#xD;
#! [170]&#xD;
for(var, $$list(foo bar baz)) {&#xD;
    ...&#xD;
}&#xD;
#! [170]&#xD;
&#xD;
&#xD;
#! [171]&#xD;
values = foo bar baz&#xD;
for(var, values) {&#xD;
    ...&#xD;
}&#xD;
#! [171]&#xD;
&#xD;
&#xD;
#! [172]&#xD;
VALUE = 123&#xD;
TMP_VALUE = x$$VALUE&#xD;
greaterThan(TMP_VALUE, x456): message("Condition may be true.")&#xD;
#! [172]&#xD;
&#xD;
&#xD;
#! [173]&#xD;
message("First line$$escape_expand(\\n)Second line")&#xD;
#! [173]&#xD;
&#xD;
&#xD;
#! [174]&#xD;
TEMPLATE = subdirs&#xD;
SUBDIRS = one two three&#xD;
prepareRecursiveTarget(check)&#xD;
#! [174]&#xD;
&#xD;
&#xD;
#! [175]&#xD;
two.CONFIG += no_check_target&#xD;
#! [175]&#xD;
&#xD;
&#xD;
#! [176]&#xD;
QMAKE_EXTRA_TARGETS += check&#xD;
#! [176]&#xD;
&#xD;
&#xD;
#! [177]&#xD;
# &lt;project root&gt;/features/mycheck.prf&#xD;
equals(TEMPLATE, subdirs) {&#xD;
    prepareRecursiveTarget(check)&#xD;
} else {&#xD;
    check.commands = echo hello user&#xD;
}&#xD;
QMAKE_EXTRA_TARGETS += check&#xD;
#! [177]&#xD;
&#xD;
&#xD;
#! [178]&#xD;
# &lt;project root&gt;/.qmake.conf&#xD;
CONFIG += mycheck&#xD;
#! [178]&#xD;
&#xD;
&#xD;
#! [179]&#xD;
# &lt;project root&gt;/project.pro&#xD;
load(configure)&#xD;
#! [179]&#xD;
&#xD;
&#xD;
#! [180]&#xD;
# &lt;project root&gt;/config.tests/test/test.pro&#xD;
SOURCES = main.cpp&#xD;
LIBS += -ltheFeature&#xD;
# Note that the test project is built without Qt by default.&#xD;
#! [180]&#xD;
&#xD;
&#xD;
#! [181]&#xD;
// &lt;project root&gt;/config.tests/test/main.cpp&#xD;
#include &lt;TheFeature/MainHeader.h&gt;&#xD;
int main() { return featureFunction(); }&#xD;
#! [181]&#xD;
&#xD;
&#xD;
#! [182]&#xD;
# &lt;project root&gt;/project.pro&#xD;
qtCompileTest(test)&#xD;
#! [182]&#xD;
&#xD;
#! [183]&#xD;
# &lt;project root&gt;/project.pro&#xD;
QMAKE_SONAME_PREFIX = @rpath&#xD;
#! [183]&#xD;
&#xD;
#! [184]&#xD;
# &lt;project root&gt;/project.pro&#xD;
QMAKE_SONAME_PREFIX = @executable_path/../Frameworks&#xD;
QMAKE_SONAME_PREFIX = @loader_path/Frameworks&#xD;
QMAKE_SONAME_PREFIX = /Library/Frameworks&#xD;
#! [184]&#xD;
&#xD;
#! [185]&#xD;
VERSION_PE_HEADER = 1.2&#xD;
#! [185]&#xD;
&#xD;
#! [186]&#xD;
RC_DEFINES += USE_MY_STUFF&#xD;
#! [186]&#xD;
&#xD;
#! [187]&#xD;
win32-g++:contains(QMAKE_HOST.arch, x86_64):{&#xD;
    message("Host is 64bit")&#xD;
    ...&#xD;
}&#xD;
#! [187]&#xD;
</db:programlisting>
      <db:para xml:id="">In Makefile mode, qmake will generate a Makefile that is used to build the project. Additionally, the following options may be used in this mode to influence the way the project file is generated:</db:para>
      <db:itemizedlist>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-after</db:code> qmake will process assignments given on the command line after the specified files.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-nocache</db:code> qmake will ignore the <db:code>.qmake.cache</db:code> file.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-nodepend</db:code> qmake will not generate any dependency information.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-cache file</db:code> qmake will use <db:code>file</db:code> as the cache file, ignoring any other .qmake.cache files found.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-spec spec</db:code> qmake will use <db:code>spec</db:code> as a path to platform and compiler information, and ignore the value of <db:link xlink:href="qmake-environment-reference.html#qmakespec" xrefstyle="page" annotations="QMAKESPEC">QMAKESPEC</db:link>.</db:para>
         </db:listitem>
      </db:itemizedlist>
      <db:para xml:id="">You may also pass qmake assignments on the command line. They are processed before all of the files specified. For example, the following command generates a Makefile from test.pro:</db:para>
      <db:programlisting>/****************************************************************************&#xD;
**&#xD;
** Copyright (C) 2016 The Qt Company Ltd.&#xD;
** Contact: https://www.qt.io/licensing/&#xD;
**&#xD;
** This file is part of the documentation of the Qt Toolkit.&#xD;
**&#xD;
** $QT_BEGIN_LICENSE:BSD$&#xD;
** Commercial License Usage&#xD;
** Licensees holding valid commercial Qt licenses may use this file in&#xD;
** accordance with the commercial license agreement provided with the&#xD;
** Software or, alternatively, in accordance with the terms contained in&#xD;
** a written agreement between you and The Qt Company. For licensing terms&#xD;
** and conditions see https://www.qt.io/terms-conditions. For further&#xD;
** information use the contact form at https://www.qt.io/contact-us.&#xD;
**&#xD;
** BSD License Usage&#xD;
** Alternatively, you may use this file under the terms of the BSD license&#xD;
** as follows:&#xD;
**&#xD;
** "Redistribution and use in source and binary forms, with or without&#xD;
** modification, are permitted provided that the following conditions are&#xD;
** met:&#xD;
**   * Redistributions of source code must retain the above copyright&#xD;
**     notice, this list of conditions and the following disclaimer.&#xD;
**   * Redistributions in binary form must reproduce the above copyright&#xD;
**     notice, this list of conditions and the following disclaimer in&#xD;
**     the documentation and/or other materials provided with the&#xD;
**     distribution.&#xD;
**   * Neither the name of The Qt Company Ltd nor the names of its&#xD;
**     contributors may be used to endorse or promote products derived&#xD;
**     from this software without specific prior written permission.&#xD;
**&#xD;
**&#xD;
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#xD;
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#xD;
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR&#xD;
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT&#xD;
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xD;
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xD;
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,&#xD;
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY&#xD;
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&#xD;
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#xD;
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."&#xD;
**&#xD;
** $QT_END_LICENSE$&#xD;
**&#xD;
****************************************************************************/&#xD;
&#xD;
#! [0]&#xD;
make all&#xD;
#! [0]&#xD;
&#xD;
&#xD;
#! [1]&#xD;
CONFIG += qt debug&#xD;
#! [1]&#xD;
&#xD;
&#xD;
#! [2]&#xD;
QT += network xml&#xD;
#! [2]&#xD;
&#xD;
&#xD;
#! [3]&#xD;
QT = network xml # This will omit the core and gui modules.&#xD;
#! [3]&#xD;
&#xD;
&#xD;
#! [4]&#xD;
QT -= gui # Only the core module is used.&#xD;
#! [4]&#xD;
&#xD;
&#xD;
#! [5]&#xD;
CONFIG += link_pkgconfig&#xD;
PKGCONFIG += ogg dbus-1&#xD;
#! [5]&#xD;
&#xD;
&#xD;
#! [6]&#xD;
LIBS += -L/usr/local/lib -lmath&#xD;
#! [6]&#xD;
&#xD;
&#xD;
#! [7]&#xD;
INCLUDEPATH = c:/msdev/include d:/stl/include&#xD;
#! [7]&#xD;
&#xD;
&#xD;
#! [8]&#xD;
qmake [mode] [options] files&#xD;
#! [8]&#xD;
&#xD;
&#xD;
#! [9]&#xD;
qmake -makefile [options] files&#xD;
#! [9]&#xD;
&#xD;
&#xD;
#! [10]&#xD;
qmake -makefile -o Makefile "CONFIG+=test" test.pro&#xD;
#! [10]&#xD;
&#xD;
&#xD;
#! [11]&#xD;
qmake "CONFIG+=test" test.pro&#xD;
#! [11]&#xD;
&#xD;
&#xD;
#! [12]&#xD;
qmake -project [options] files&#xD;
#! [12]&#xD;
&#xD;
&#xD;
#! [13]&#xD;
qmake -spec macx-g++&#xD;
#! [13]&#xD;
&#xD;
&#xD;
#! [14]&#xD;
LIBS += -F/path/to/framework/directory/&#xD;
#! [14]&#xD;
&#xD;
&#xD;
#! [15]&#xD;
LIBS += -framework TheFramework&#xD;
#! [15]&#xD;
&#xD;
&#xD;
#! [16]&#xD;
TEMPLATE = lib&#xD;
CONFIG += lib_bundle&#xD;
#! [16]&#xD;
&#xD;
&#xD;
#! [17]&#xD;
FRAMEWORK_HEADERS.version = Versions&#xD;
FRAMEWORK_HEADERS.files = path/to/header_one.h path/to/header_two.h&#xD;
FRAMEWORK_HEADERS.path = Headers&#xD;
QMAKE_BUNDLE_DATA += FRAMEWORK_HEADERS&#xD;
#! [17]&#xD;
&#xD;
&#xD;
#! [19]&#xD;
qmake -spec macx-xcode project.pro&#xD;
#! [19]&#xD;
&#xD;
&#xD;
#! [20]&#xD;
qmake -tp vc&#xD;
#! [20]&#xD;
&#xD;
&#xD;
#! [21]&#xD;
qmake -tp vc -r&#xD;
#! [21]&#xD;
&#xD;
&#xD;
#! [22]&#xD;
CONFIG -= embed_manifest_exe&#xD;
#! [22]&#xD;
&#xD;
&#xD;
#! [23]&#xD;
CONFIG -= embed_manifest_dll&#xD;
#! [23]&#xD;
&#xD;
&#xD;
#! [24]&#xD;
make all&#xD;
#! [24]&#xD;
&#xD;
&#xD;
#! [25]&#xD;
build_pass:CONFIG(debug, debug|release) {&#xD;
    unix: TARGET = $$join(TARGET,,,_debug)&#xD;
    else: TARGET = $$join(TARGET,,,d)&#xD;
}&#xD;
#! [25]&#xD;
&#xD;
&#xD;
#! [26]&#xD;
CONFIG += console newstuff&#xD;
...&#xD;
newstuff {&#xD;
    SOURCES += new.cpp&#xD;
    HEADERS += new.h&#xD;
}&#xD;
#! [26]&#xD;
&#xD;
&#xD;
#! [27]&#xD;
DEFINES += USE_MY_STUFF&#xD;
#! [27]&#xD;
&#xD;
&#xD;
#! [30]&#xD;
DESTDIR = ../../lib&#xD;
#! [30]&#xD;
&#xD;
&#xD;
#! [31]&#xD;
DISTFILES += ../program.txt&#xD;
#! [31]&#xD;
&#xD;
&#xD;
#! [32]&#xD;
FORMS = mydialog.ui \&#xD;
    mywidget.ui \&#xD;
        myconfig.ui&#xD;
#! [32]&#xD;
&#xD;
&#xD;
#! [34]&#xD;
HEADERS = myclass.h \&#xD;
          login.h \&#xD;
          mainwindow.h&#xD;
#! [34]&#xD;
&#xD;
&#xD;
#! [35]&#xD;
INCLUDEPATH = c:/msdev/include d:/stl/include&#xD;
#! [35]&#xD;
&#xD;
&#xD;
#! [36]&#xD;
target.path += $$[QT_INSTALL_PLUGINS]/imageformats&#xD;
INSTALLS += target&#xD;
#! [36]&#xD;
&#xD;
&#xD;
#! [37]&#xD;
LEXSOURCES = lexer.l&#xD;
#! [37]&#xD;
&#xD;
&#xD;
#! [38]&#xD;
unix:LIBS += -L/usr/local/lib -lmath&#xD;
win32:LIBS += c:/mylibs/math.lib&#xD;
#! [38]&#xD;
&#xD;
&#xD;
#! [39]&#xD;
CONFIG += no_lflags_merge&#xD;
#! [39]&#xD;
&#xD;
&#xD;
#! [40]&#xD;
unix:MOC_DIR = ../myproject/tmp&#xD;
win32:MOC_DIR = c:/myproject/tmp&#xD;
#! [40]&#xD;
&#xD;
&#xD;
#! [41]&#xD;
unix:OBJECTS_DIR = ../myproject/tmp&#xD;
win32:OBJECTS_DIR = c:/myproject/tmp&#xD;
#! [41]&#xD;
&#xD;
&#xD;
#! [43]&#xD;
FRAMEWORK_HEADERS.version = Versions&#xD;
FRAMEWORK_HEADERS.files = path/to/header_one.h path/to/header_two.h&#xD;
FRAMEWORK_HEADERS.path = Headers&#xD;
QMAKE_BUNDLE_DATA += FRAMEWORK_HEADERS&#xD;
#! [43]&#xD;
&#xD;
&#xD;
#! [44]&#xD;
QMAKE_BUNDLE_EXTENSION = .myframework&#xD;
#! [44]&#xD;
&#xD;
&#xD;
#! [45]&#xD;
QMAKE_RESOURCE_FLAGS += -threshold 0 -compress 9&#xD;
#! [45]&#xD;
&#xD;
&#xD;
#! [47]&#xD;
QT -= gui # Only the core module is used.&#xD;
#! [47]&#xD;
&#xD;
&#xD;
#! [48]&#xD;
unix:RCC_DIR = ../myproject/resources&#xD;
win32:RCC_DIR = c:/myproject/resources&#xD;
#! [48]&#xD;
&#xD;
&#xD;
#! [49]&#xD;
SOURCES = myclass.cpp \&#xD;
      login.cpp \&#xD;
      mainwindow.cpp&#xD;
#! [49]&#xD;
&#xD;
&#xD;
#! [50]&#xD;
SUBDIRS = kernel \&#xD;
          tools \&#xD;
          myapp&#xD;
#! [50]&#xD;
&#xD;
&#xD;
#! [51]&#xD;
CONFIG += ordered&#xD;
#! [51]&#xD;
&#xD;
&#xD;
#! [52]&#xD;
TEMPLATE = app&#xD;
TARGET = myapp&#xD;
SOURCES = main.cpp&#xD;
#! [52]&#xD;
&#xD;
&#xD;
#! [53]&#xD;
TEMPLATE = lib&#xD;
SOURCES = main.cpp&#xD;
TARGET = mylib&#xD;
#! [53]&#xD;
&#xD;
&#xD;
#! [54]&#xD;
unix:UI_DIR = ../myproject/ui&#xD;
win32:UI_DIR = c:/myproject/ui&#xD;
#! [54]&#xD;
&#xD;
&#xD;
#! [57]&#xD;
win32:VERSION = 1.2.3.4 # major.minor.patch.build&#xD;
else:VERSION = 1.2.3    # major.minor.patch&#xD;
#! [57]&#xD;
&#xD;
&#xD;
#! [58]&#xD;
YACCSOURCES = moc.y&#xD;
#! [58]&#xD;
&#xD;
&#xD;
#! [59]&#xD;
FILE = /etc/passwd&#xD;
FILENAME = $$basename(FILE) #passwd&#xD;
#! [59]&#xD;
&#xD;
&#xD;
#! [60]&#xD;
CONFIG = debug&#xD;
CONFIG += release&#xD;
CONFIG(release, debug|release):message(Release build!) #will print&#xD;
CONFIG(debug, debug|release):message(Debug build!) #no print&#xD;
#! [60]&#xD;
&#xD;
&#xD;
#! [61]&#xD;
contains( drivers, network ) {&#xD;
    # drivers contains 'network'&#xD;
    message( "Configuring for network build..." )&#xD;
    HEADERS += network.h&#xD;
    SOURCES += network.cpp&#xD;
}&#xD;
#! [61]&#xD;
&#xD;
&#xD;
#! [62]&#xD;
error(An error has occurred in the configuration process.)&#xD;
#! [62]&#xD;
&#xD;
&#xD;
#! [63]&#xD;
exists( $(QTDIR)/lib/libqt-mt* ) {&#xD;
      message( "Configuring for multi-threaded Qt..." )&#xD;
      CONFIG += thread&#xD;
}&#xD;
#! [63]&#xD;
&#xD;
&#xD;
#! [64]&#xD;
MY_VAR = one two three four&#xD;
MY_VAR2 = $$join(MY_VAR, " -L", -L) -Lfive&#xD;
MY_VAR3 = $$member(MY_VAR, 2) $$find(MY_VAR, t.*)&#xD;
#! [64]&#xD;
&#xD;
&#xD;
#! [65]&#xD;
LIST = 1 2 3&#xD;
for(a, LIST):exists(file.$${a}):message(I see a file.$${a}!)&#xD;
#! [65]&#xD;
&#xD;
&#xD;
#! [66]&#xD;
include( shared.pri )&#xD;
OPTIONS = standard custom&#xD;
!include( options.pri ) {&#xD;
    message( "No custom build options specified" )&#xD;
OPTIONS -= custom&#xD;
}&#xD;
#! [66]&#xD;
&#xD;
&#xD;
#! [67]&#xD;
isEmpty( CONFIG ) {&#xD;
CONFIG += warn_on debug&#xD;
}&#xD;
#! [67]&#xD;
&#xD;
&#xD;
#! [68]&#xD;
message( "This is a message" )&#xD;
#! [68]&#xD;
&#xD;
&#xD;
#! [69]&#xD;
!build_pass:message( "This is a message" )&#xD;
#! [69]&#xD;
&#xD;
&#xD;
#! [70]&#xD;
This is a test.&#xD;
#! [70]&#xD;
&#xD;
&#xD;
#! [71]&#xD;
system("ls /bin"): HAS_BIN = TRUE&#xD;
#! [71]&#xD;
&#xD;
&#xD;
#! [72]&#xD;
UNAME = $$system(uname -s)&#xD;
contains( UNAME, [lL]inux ):message( This looks like Linux ($$UNAME) to me )&#xD;
#! [72]&#xD;
&#xD;
&#xD;
#! [73]&#xD;
ARGS = 1 2 3 2 5 1&#xD;
ARGS = $$unique(ARGS) #1 2 3 5&#xD;
#! [73]&#xD;
&#xD;
&#xD;
#! [74]&#xD;
qmake -set PROPERTY VALUE&#xD;
#! [74]&#xD;
&#xD;
&#xD;
#! [75]&#xD;
qmake -query PROPERTY&#xD;
qmake -query #queries all current PROPERTY/VALUE pairs&#xD;
#! [75]&#xD;
&#xD;
&#xD;
#! [77]&#xD;
qmake -query "QT_INSTALL_PREFIX"&#xD;
#! [77]&#xD;
&#xD;
&#xD;
#! [78]&#xD;
QMAKE_VERS = $$[QMAKE_VERSION]&#xD;
#! [78]&#xD;
&#xD;
&#xD;
#! [79]&#xD;
documentation.path = /usr/local/program/doc&#xD;
documentation.files = docs/*&#xD;
#! [79]&#xD;
&#xD;
&#xD;
#! [80]&#xD;
INSTALLS += documentation&#xD;
#! [80]&#xD;
&#xD;
&#xD;
#! [81]&#xD;
unix:documentation.extra = create_docs; mv master.doc toc.doc&#xD;
#! [81]&#xD;
&#xD;
&#xD;
#! [82]&#xD;
target.path = /usr/local/myprogram&#xD;
INSTALLS += target&#xD;
#! [82]&#xD;
&#xD;
&#xD;
#! [83]&#xD;
CONFIG += create_prl&#xD;
#! [83]&#xD;
&#xD;
&#xD;
#! [84]&#xD;
CONFIG += link_prl&#xD;
#! [84]&#xD;
&#xD;
&#xD;
#! [85]&#xD;
QMAKE_EXT_MOC = .mymoc&#xD;
#! [85]&#xD;
&#xD;
&#xD;
#! [86]&#xD;
mytarget.target = .buildfile&#xD;
mytarget.commands = touch $$mytarget.target&#xD;
mytarget.depends = mytarget2&#xD;
&#xD;
mytarget2.commands = @echo Building $$mytarget.target&#xD;
#! [86]&#xD;
&#xD;
&#xD;
#! [87]&#xD;
QMAKE_EXTRA_TARGETS += mytarget mytarget2&#xD;
#! [87]&#xD;
&#xD;
&#xD;
#! [88]&#xD;
new_moc.output  = moc_${QMAKE_FILE_BASE}.cpp&#xD;
new_moc.commands = moc ${QMAKE_FILE_NAME} -o ${QMAKE_FILE_OUT}&#xD;
new_moc.depend_command = g++ -E -M ${QMAKE_FILE_NAME} | sed "s,^.*: ,,"&#xD;
new_moc.input = NEW_HEADERS&#xD;
QMAKE_EXTRA_COMPILERS += new_moc&#xD;
#! [88]&#xD;
&#xD;
&#xD;
#! [89]&#xD;
TARGET = myapp&#xD;
#! [89]&#xD;
&#xD;
&#xD;
#! [90]&#xD;
DEFINES += USE_MY_STUFF&#xD;
#! [90]&#xD;
&#xD;
&#xD;
#! [91]&#xD;
DEFINES -= USE_MY_STUFF&#xD;
#! [91]&#xD;
&#xD;
&#xD;
#! [92]&#xD;
DEFINES *= USE_MY_STUFF&#xD;
#! [92]&#xD;
&#xD;
&#xD;
#! [93]&#xD;
DEFINES ~= s/QT_[DT].+/QT&#xD;
#! [93]&#xD;
&#xD;
&#xD;
#! [94]&#xD;
EVERYTHING = $$SOURCES $$HEADERS&#xD;
message("The project contains the following files:")&#xD;
message($$EVERYTHING)&#xD;
#! [94]&#xD;
&#xD;
&#xD;
#! [95]&#xD;
win32:DEFINES += USE_MY_STUFF&#xD;
#! [95]&#xD;
&#xD;
&#xD;
#! [96]&#xD;
win32:xml {&#xD;
    message(Building for Windows)&#xD;
    SOURCES += xmlhandler_win.cpp&#xD;
} else:xml {&#xD;
    SOURCES += xmlhandler.cpp&#xD;
} else {&#xD;
    message("Unknown configuration")&#xD;
}&#xD;
#! [96]&#xD;
&#xD;
&#xD;
#! [97]&#xD;
MY_VARIABLE = value&#xD;
#! [97]&#xD;
&#xD;
&#xD;
#! [98]&#xD;
MY_DEFINES = $$DEFINES&#xD;
#! [98]&#xD;
&#xD;
&#xD;
#! [99]&#xD;
MY_DEFINES = $${DEFINES}&#xD;
#! [99]&#xD;
&#xD;
&#xD;
#! [100]&#xD;
TARGET = myproject_$${TEMPLATE}&#xD;
#! [100]&#xD;
&#xD;
&#xD;
#! [101]&#xD;
target.path = $$[QT_INSTALL_PLUGINS]/designer&#xD;
INSTALLS += target&#xD;
#! [101]&#xD;
&#xD;
&#xD;
#! [102]&#xD;
defineReplace(functionName){&#xD;
    #function code&#xD;
}&#xD;
#! [102]&#xD;
&#xD;
&#xD;
#! [103]&#xD;
CONFIG += myfeatures&#xD;
#! [103]&#xD;
&#xD;
&#xD;
#! [105]&#xD;
PRECOMPILED_HEADER = stable.h&#xD;
#! [105]&#xD;
&#xD;
&#xD;
#! [106]&#xD;
precompile_header:!isEmpty(PRECOMPILED_HEADER) {&#xD;
DEFINES += USING_PCH&#xD;
}&#xD;
#! [106]&#xD;
&#xD;
&#xD;
#! [107]&#xD;
PRECOMPILED_HEADER = window.h&#xD;
SOURCES            = window.cpp&#xD;
#! [107]&#xD;
&#xD;
&#xD;
#! [108]&#xD;
SOURCES += hello.cpp&#xD;
#! [108]&#xD;
&#xD;
&#xD;
#! [109]&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [109]&#xD;
&#xD;
&#xD;
#! [110]&#xD;
SOURCES = hello.cpp \&#xD;
          main.cpp&#xD;
#! [110]&#xD;
&#xD;
&#xD;
#! [111]&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [111]&#xD;
&#xD;
&#xD;
#! [112]&#xD;
TARGET = helloworld&#xD;
#! [112]&#xD;
&#xD;
&#xD;
#! [113]&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [113]&#xD;
&#xD;
&#xD;
#! [114]&#xD;
qmake -o Makefile hello.pro&#xD;
#! [114]&#xD;
&#xD;
&#xD;
#! [115]&#xD;
qmake -tp vc hello.pro&#xD;
#! [115]&#xD;
&#xD;
&#xD;
#! [116]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [116]&#xD;
&#xD;
&#xD;
#! [117]&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
#! [117]&#xD;
&#xD;
&#xD;
#! [118]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
unix {&#xD;
    SOURCES += hellounix.cpp&#xD;
}&#xD;
#! [118]&#xD;
&#xD;
&#xD;
#! [119]&#xD;
!exists( main.cpp ) {&#xD;
    error( "No main.cpp file found" )&#xD;
}&#xD;
#! [119]&#xD;
&#xD;
&#xD;
#! [120]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
unix {&#xD;
    SOURCES += hellounix.cpp&#xD;
}&#xD;
!exists( main.cpp ) {&#xD;
    error( "No main.cpp file found" )&#xD;
}&#xD;
#! [120]&#xD;
&#xD;
&#xD;
#! [121]&#xD;
win32 {&#xD;
    debug {&#xD;
        CONFIG += console&#xD;
    }&#xD;
}&#xD;
#! [121]&#xD;
&#xD;
&#xD;
#! [122]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
unix {&#xD;
    SOURCES += hellounix.cpp&#xD;
}&#xD;
!exists( main.cpp ) {&#xD;
    error( "No main.cpp file found" )&#xD;
}&#xD;
win32:debug {&#xD;
    CONFIG += console&#xD;
}&#xD;
#! [122]&#xD;
&#xD;
&#xD;
#! [123]&#xD;
TEMPLATE = app&#xD;
DESTDIR  = c:/helloapp&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
DEFINES += USE_MY_STUFF&#xD;
CONFIG  += release&#xD;
#! [123]&#xD;
&#xD;
&#xD;
#! [124]&#xD;
make all&#xD;
#! [124]&#xD;
&#xD;
&#xD;
#! [125]&#xD;
make&#xD;
#! [125]&#xD;
&#xD;
&#xD;
#! [126]&#xD;
make install&#xD;
#! [126]&#xD;
&#xD;
&#xD;
#! [127]&#xD;
CONFIG(debug, debug|release) {&#xD;
    mac: TARGET = $$join(TARGET,,,_debug)&#xD;
    win32: TARGET = $$join(TARGET,,d)&#xD;
}&#xD;
#! [127]&#xD;
&#xD;
#! [149]&#xD;
SUBDIRS += my_executable my_library&#xD;
my_executable.subdir = app&#xD;
my_executable.depends = my_library&#xD;
my_library.subdir = lib&#xD;
#! [149]&#xD;
&#xD;
#! [157]&#xD;
packagesExist(sqlite3 QtNetwork QtDeclarative) {&#xD;
    DEFINES += USE_FANCY_UI&#xD;
}&#xD;
#! [157]&#xD;
&#xD;
#! [158]&#xD;
#ifdef USE_FANCY_UI&#xD;
    // Use the fancy UI, as we have extra packages available&#xD;
#endif&#xD;
#! [158]&#xD;
&#xD;
#! [159]&#xD;
message($$absolute_path("readme.txt", "/home/johndoe/myproject"))&#xD;
#! [159]&#xD;
&#xD;
&#xD;
#! [160]&#xD;
TARGET = helloworld&#xD;
equals(TARGET, "helloworld") {&#xD;
    message("The target assignment was successful.")&#xD;
}&#xD;
#! [160]&#xD;
&#xD;
&#xD;
#! [161]&#xD;
CONTACT = firstname middlename surname phone&#xD;
message($$first(CONTACT))&#xD;
#! [161]&#xD;
&#xD;
&#xD;
#! [162]&#xD;
CONTACT = firstname middlename surname phone&#xD;
message($$last(CONTACT))&#xD;
#! [162]&#xD;
&#xD;
&#xD;
#! [163]&#xD;
message($$format_number(BAD, ibase=16 width=6 zeropad))&#xD;
#! [163]&#xD;
&#xD;
&#xD;
#! [164]&#xD;
ANSWER = 42&#xD;
greaterThan(ANSWER, 1) {&#xD;
    message("The answer might be correct.")&#xD;
}&#xD;
#! [164]&#xD;
&#xD;
&#xD;
#! [165]&#xD;
ANSWER = 42&#xD;
lessThan(ANSWER, 1) {&#xD;
    message("The answer might be wrong.")&#xD;
}&#xD;
#! [165]&#xD;
&#xD;
&#xD;
#! [166]&#xD;
if(linux-g++*|macx-g++*):CONFIG(debug, debug|release) {&#xD;
    message("We are on Linux or Mac OS, and we are in debug mode.")&#xD;
}&#xD;
#! [166]&#xD;
&#xD;
&#xD;
#! [167]&#xD;
CONTACT = firstname:middlename:surname:phone&#xD;
message($$section(CONTACT, :, 2, 2))&#xD;
#! [167]&#xD;
&#xD;
&#xD;
#! [168]&#xD;
CONTACT = firstname:middlename:surname:phone&#xD;
message($$split(CONTACT, :))&#xD;
#! [168]&#xD;
&#xD;
#! [169]&#xD;
NARF = zort&#xD;
unset(NARF)&#xD;
!defined(NARF, var) {&#xD;
    message("NARF is not defined.")&#xD;
}&#xD;
#! [169]&#xD;
&#xD;
&#xD;
#! [170]&#xD;
for(var, $$list(foo bar baz)) {&#xD;
    ...&#xD;
}&#xD;
#! [170]&#xD;
&#xD;
&#xD;
#! [171]&#xD;
values = foo bar baz&#xD;
for(var, values) {&#xD;
    ...&#xD;
}&#xD;
#! [171]&#xD;
&#xD;
&#xD;
#! [172]&#xD;
VALUE = 123&#xD;
TMP_VALUE = x$$VALUE&#xD;
greaterThan(TMP_VALUE, x456): message("Condition may be true.")&#xD;
#! [172]&#xD;
&#xD;
&#xD;
#! [173]&#xD;
message("First line$$escape_expand(\\n)Second line")&#xD;
#! [173]&#xD;
&#xD;
&#xD;
#! [174]&#xD;
TEMPLATE = subdirs&#xD;
SUBDIRS = one two three&#xD;
prepareRecursiveTarget(check)&#xD;
#! [174]&#xD;
&#xD;
&#xD;
#! [175]&#xD;
two.CONFIG += no_check_target&#xD;
#! [175]&#xD;
&#xD;
&#xD;
#! [176]&#xD;
QMAKE_EXTRA_TARGETS += check&#xD;
#! [176]&#xD;
&#xD;
&#xD;
#! [177]&#xD;
# &lt;project root&gt;/features/mycheck.prf&#xD;
equals(TEMPLATE, subdirs) {&#xD;
    prepareRecursiveTarget(check)&#xD;
} else {&#xD;
    check.commands = echo hello user&#xD;
}&#xD;
QMAKE_EXTRA_TARGETS += check&#xD;
#! [177]&#xD;
&#xD;
&#xD;
#! [178]&#xD;
# &lt;project root&gt;/.qmake.conf&#xD;
CONFIG += mycheck&#xD;
#! [178]&#xD;
&#xD;
&#xD;
#! [179]&#xD;
# &lt;project root&gt;/project.pro&#xD;
load(configure)&#xD;
#! [179]&#xD;
&#xD;
&#xD;
#! [180]&#xD;
# &lt;project root&gt;/config.tests/test/test.pro&#xD;
SOURCES = main.cpp&#xD;
LIBS += -ltheFeature&#xD;
# Note that the test project is built without Qt by default.&#xD;
#! [180]&#xD;
&#xD;
&#xD;
#! [181]&#xD;
// &lt;project root&gt;/config.tests/test/main.cpp&#xD;
#include &lt;TheFeature/MainHeader.h&gt;&#xD;
int main() { return featureFunction(); }&#xD;
#! [181]&#xD;
&#xD;
&#xD;
#! [182]&#xD;
# &lt;project root&gt;/project.pro&#xD;
qtCompileTest(test)&#xD;
#! [182]&#xD;
&#xD;
#! [183]&#xD;
# &lt;project root&gt;/project.pro&#xD;
QMAKE_SONAME_PREFIX = @rpath&#xD;
#! [183]&#xD;
&#xD;
#! [184]&#xD;
# &lt;project root&gt;/project.pro&#xD;
QMAKE_SONAME_PREFIX = @executable_path/../Frameworks&#xD;
QMAKE_SONAME_PREFIX = @loader_path/Frameworks&#xD;
QMAKE_SONAME_PREFIX = /Library/Frameworks&#xD;
#! [184]&#xD;
&#xD;
#! [185]&#xD;
VERSION_PE_HEADER = 1.2&#xD;
#! [185]&#xD;
&#xD;
#! [186]&#xD;
RC_DEFINES += USE_MY_STUFF&#xD;
#! [186]&#xD;
&#xD;
#! [187]&#xD;
win32-g++:contains(QMAKE_HOST.arch, x86_64):{&#xD;
    message("Host is 64bit")&#xD;
    ...&#xD;
}&#xD;
#! [187]&#xD;
</db:programlisting>
      <db:para xml:id="">However, some of the specified options can be omitted as they are default values:</db:para>
      <db:programlisting>/****************************************************************************&#xD;
**&#xD;
** Copyright (C) 2016 The Qt Company Ltd.&#xD;
** Contact: https://www.qt.io/licensing/&#xD;
**&#xD;
** This file is part of the documentation of the Qt Toolkit.&#xD;
**&#xD;
** $QT_BEGIN_LICENSE:BSD$&#xD;
** Commercial License Usage&#xD;
** Licensees holding valid commercial Qt licenses may use this file in&#xD;
** accordance with the commercial license agreement provided with the&#xD;
** Software or, alternatively, in accordance with the terms contained in&#xD;
** a written agreement between you and The Qt Company. For licensing terms&#xD;
** and conditions see https://www.qt.io/terms-conditions. For further&#xD;
** information use the contact form at https://www.qt.io/contact-us.&#xD;
**&#xD;
** BSD License Usage&#xD;
** Alternatively, you may use this file under the terms of the BSD license&#xD;
** as follows:&#xD;
**&#xD;
** "Redistribution and use in source and binary forms, with or without&#xD;
** modification, are permitted provided that the following conditions are&#xD;
** met:&#xD;
**   * Redistributions of source code must retain the above copyright&#xD;
**     notice, this list of conditions and the following disclaimer.&#xD;
**   * Redistributions in binary form must reproduce the above copyright&#xD;
**     notice, this list of conditions and the following disclaimer in&#xD;
**     the documentation and/or other materials provided with the&#xD;
**     distribution.&#xD;
**   * Neither the name of The Qt Company Ltd nor the names of its&#xD;
**     contributors may be used to endorse or promote products derived&#xD;
**     from this software without specific prior written permission.&#xD;
**&#xD;
**&#xD;
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#xD;
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#xD;
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR&#xD;
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT&#xD;
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xD;
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xD;
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,&#xD;
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY&#xD;
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&#xD;
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#xD;
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."&#xD;
**&#xD;
** $QT_END_LICENSE$&#xD;
**&#xD;
****************************************************************************/&#xD;
&#xD;
#! [0]&#xD;
make all&#xD;
#! [0]&#xD;
&#xD;
&#xD;
#! [1]&#xD;
CONFIG += qt debug&#xD;
#! [1]&#xD;
&#xD;
&#xD;
#! [2]&#xD;
QT += network xml&#xD;
#! [2]&#xD;
&#xD;
&#xD;
#! [3]&#xD;
QT = network xml # This will omit the core and gui modules.&#xD;
#! [3]&#xD;
&#xD;
&#xD;
#! [4]&#xD;
QT -= gui # Only the core module is used.&#xD;
#! [4]&#xD;
&#xD;
&#xD;
#! [5]&#xD;
CONFIG += link_pkgconfig&#xD;
PKGCONFIG += ogg dbus-1&#xD;
#! [5]&#xD;
&#xD;
&#xD;
#! [6]&#xD;
LIBS += -L/usr/local/lib -lmath&#xD;
#! [6]&#xD;
&#xD;
&#xD;
#! [7]&#xD;
INCLUDEPATH = c:/msdev/include d:/stl/include&#xD;
#! [7]&#xD;
&#xD;
&#xD;
#! [8]&#xD;
qmake [mode] [options] files&#xD;
#! [8]&#xD;
&#xD;
&#xD;
#! [9]&#xD;
qmake -makefile [options] files&#xD;
#! [9]&#xD;
&#xD;
&#xD;
#! [10]&#xD;
qmake -makefile -o Makefile "CONFIG+=test" test.pro&#xD;
#! [10]&#xD;
&#xD;
&#xD;
#! [11]&#xD;
qmake "CONFIG+=test" test.pro&#xD;
#! [11]&#xD;
&#xD;
&#xD;
#! [12]&#xD;
qmake -project [options] files&#xD;
#! [12]&#xD;
&#xD;
&#xD;
#! [13]&#xD;
qmake -spec macx-g++&#xD;
#! [13]&#xD;
&#xD;
&#xD;
#! [14]&#xD;
LIBS += -F/path/to/framework/directory/&#xD;
#! [14]&#xD;
&#xD;
&#xD;
#! [15]&#xD;
LIBS += -framework TheFramework&#xD;
#! [15]&#xD;
&#xD;
&#xD;
#! [16]&#xD;
TEMPLATE = lib&#xD;
CONFIG += lib_bundle&#xD;
#! [16]&#xD;
&#xD;
&#xD;
#! [17]&#xD;
FRAMEWORK_HEADERS.version = Versions&#xD;
FRAMEWORK_HEADERS.files = path/to/header_one.h path/to/header_two.h&#xD;
FRAMEWORK_HEADERS.path = Headers&#xD;
QMAKE_BUNDLE_DATA += FRAMEWORK_HEADERS&#xD;
#! [17]&#xD;
&#xD;
&#xD;
#! [19]&#xD;
qmake -spec macx-xcode project.pro&#xD;
#! [19]&#xD;
&#xD;
&#xD;
#! [20]&#xD;
qmake -tp vc&#xD;
#! [20]&#xD;
&#xD;
&#xD;
#! [21]&#xD;
qmake -tp vc -r&#xD;
#! [21]&#xD;
&#xD;
&#xD;
#! [22]&#xD;
CONFIG -= embed_manifest_exe&#xD;
#! [22]&#xD;
&#xD;
&#xD;
#! [23]&#xD;
CONFIG -= embed_manifest_dll&#xD;
#! [23]&#xD;
&#xD;
&#xD;
#! [24]&#xD;
make all&#xD;
#! [24]&#xD;
&#xD;
&#xD;
#! [25]&#xD;
build_pass:CONFIG(debug, debug|release) {&#xD;
    unix: TARGET = $$join(TARGET,,,_debug)&#xD;
    else: TARGET = $$join(TARGET,,,d)&#xD;
}&#xD;
#! [25]&#xD;
&#xD;
&#xD;
#! [26]&#xD;
CONFIG += console newstuff&#xD;
...&#xD;
newstuff {&#xD;
    SOURCES += new.cpp&#xD;
    HEADERS += new.h&#xD;
}&#xD;
#! [26]&#xD;
&#xD;
&#xD;
#! [27]&#xD;
DEFINES += USE_MY_STUFF&#xD;
#! [27]&#xD;
&#xD;
&#xD;
#! [30]&#xD;
DESTDIR = ../../lib&#xD;
#! [30]&#xD;
&#xD;
&#xD;
#! [31]&#xD;
DISTFILES += ../program.txt&#xD;
#! [31]&#xD;
&#xD;
&#xD;
#! [32]&#xD;
FORMS = mydialog.ui \&#xD;
    mywidget.ui \&#xD;
        myconfig.ui&#xD;
#! [32]&#xD;
&#xD;
&#xD;
#! [34]&#xD;
HEADERS = myclass.h \&#xD;
          login.h \&#xD;
          mainwindow.h&#xD;
#! [34]&#xD;
&#xD;
&#xD;
#! [35]&#xD;
INCLUDEPATH = c:/msdev/include d:/stl/include&#xD;
#! [35]&#xD;
&#xD;
&#xD;
#! [36]&#xD;
target.path += $$[QT_INSTALL_PLUGINS]/imageformats&#xD;
INSTALLS += target&#xD;
#! [36]&#xD;
&#xD;
&#xD;
#! [37]&#xD;
LEXSOURCES = lexer.l&#xD;
#! [37]&#xD;
&#xD;
&#xD;
#! [38]&#xD;
unix:LIBS += -L/usr/local/lib -lmath&#xD;
win32:LIBS += c:/mylibs/math.lib&#xD;
#! [38]&#xD;
&#xD;
&#xD;
#! [39]&#xD;
CONFIG += no_lflags_merge&#xD;
#! [39]&#xD;
&#xD;
&#xD;
#! [40]&#xD;
unix:MOC_DIR = ../myproject/tmp&#xD;
win32:MOC_DIR = c:/myproject/tmp&#xD;
#! [40]&#xD;
&#xD;
&#xD;
#! [41]&#xD;
unix:OBJECTS_DIR = ../myproject/tmp&#xD;
win32:OBJECTS_DIR = c:/myproject/tmp&#xD;
#! [41]&#xD;
&#xD;
&#xD;
#! [43]&#xD;
FRAMEWORK_HEADERS.version = Versions&#xD;
FRAMEWORK_HEADERS.files = path/to/header_one.h path/to/header_two.h&#xD;
FRAMEWORK_HEADERS.path = Headers&#xD;
QMAKE_BUNDLE_DATA += FRAMEWORK_HEADERS&#xD;
#! [43]&#xD;
&#xD;
&#xD;
#! [44]&#xD;
QMAKE_BUNDLE_EXTENSION = .myframework&#xD;
#! [44]&#xD;
&#xD;
&#xD;
#! [45]&#xD;
QMAKE_RESOURCE_FLAGS += -threshold 0 -compress 9&#xD;
#! [45]&#xD;
&#xD;
&#xD;
#! [47]&#xD;
QT -= gui # Only the core module is used.&#xD;
#! [47]&#xD;
&#xD;
&#xD;
#! [48]&#xD;
unix:RCC_DIR = ../myproject/resources&#xD;
win32:RCC_DIR = c:/myproject/resources&#xD;
#! [48]&#xD;
&#xD;
&#xD;
#! [49]&#xD;
SOURCES = myclass.cpp \&#xD;
      login.cpp \&#xD;
      mainwindow.cpp&#xD;
#! [49]&#xD;
&#xD;
&#xD;
#! [50]&#xD;
SUBDIRS = kernel \&#xD;
          tools \&#xD;
          myapp&#xD;
#! [50]&#xD;
&#xD;
&#xD;
#! [51]&#xD;
CONFIG += ordered&#xD;
#! [51]&#xD;
&#xD;
&#xD;
#! [52]&#xD;
TEMPLATE = app&#xD;
TARGET = myapp&#xD;
SOURCES = main.cpp&#xD;
#! [52]&#xD;
&#xD;
&#xD;
#! [53]&#xD;
TEMPLATE = lib&#xD;
SOURCES = main.cpp&#xD;
TARGET = mylib&#xD;
#! [53]&#xD;
&#xD;
&#xD;
#! [54]&#xD;
unix:UI_DIR = ../myproject/ui&#xD;
win32:UI_DIR = c:/myproject/ui&#xD;
#! [54]&#xD;
&#xD;
&#xD;
#! [57]&#xD;
win32:VERSION = 1.2.3.4 # major.minor.patch.build&#xD;
else:VERSION = 1.2.3    # major.minor.patch&#xD;
#! [57]&#xD;
&#xD;
&#xD;
#! [58]&#xD;
YACCSOURCES = moc.y&#xD;
#! [58]&#xD;
&#xD;
&#xD;
#! [59]&#xD;
FILE = /etc/passwd&#xD;
FILENAME = $$basename(FILE) #passwd&#xD;
#! [59]&#xD;
&#xD;
&#xD;
#! [60]&#xD;
CONFIG = debug&#xD;
CONFIG += release&#xD;
CONFIG(release, debug|release):message(Release build!) #will print&#xD;
CONFIG(debug, debug|release):message(Debug build!) #no print&#xD;
#! [60]&#xD;
&#xD;
&#xD;
#! [61]&#xD;
contains( drivers, network ) {&#xD;
    # drivers contains 'network'&#xD;
    message( "Configuring for network build..." )&#xD;
    HEADERS += network.h&#xD;
    SOURCES += network.cpp&#xD;
}&#xD;
#! [61]&#xD;
&#xD;
&#xD;
#! [62]&#xD;
error(An error has occurred in the configuration process.)&#xD;
#! [62]&#xD;
&#xD;
&#xD;
#! [63]&#xD;
exists( $(QTDIR)/lib/libqt-mt* ) {&#xD;
      message( "Configuring for multi-threaded Qt..." )&#xD;
      CONFIG += thread&#xD;
}&#xD;
#! [63]&#xD;
&#xD;
&#xD;
#! [64]&#xD;
MY_VAR = one two three four&#xD;
MY_VAR2 = $$join(MY_VAR, " -L", -L) -Lfive&#xD;
MY_VAR3 = $$member(MY_VAR, 2) $$find(MY_VAR, t.*)&#xD;
#! [64]&#xD;
&#xD;
&#xD;
#! [65]&#xD;
LIST = 1 2 3&#xD;
for(a, LIST):exists(file.$${a}):message(I see a file.$${a}!)&#xD;
#! [65]&#xD;
&#xD;
&#xD;
#! [66]&#xD;
include( shared.pri )&#xD;
OPTIONS = standard custom&#xD;
!include( options.pri ) {&#xD;
    message( "No custom build options specified" )&#xD;
OPTIONS -= custom&#xD;
}&#xD;
#! [66]&#xD;
&#xD;
&#xD;
#! [67]&#xD;
isEmpty( CONFIG ) {&#xD;
CONFIG += warn_on debug&#xD;
}&#xD;
#! [67]&#xD;
&#xD;
&#xD;
#! [68]&#xD;
message( "This is a message" )&#xD;
#! [68]&#xD;
&#xD;
&#xD;
#! [69]&#xD;
!build_pass:message( "This is a message" )&#xD;
#! [69]&#xD;
&#xD;
&#xD;
#! [70]&#xD;
This is a test.&#xD;
#! [70]&#xD;
&#xD;
&#xD;
#! [71]&#xD;
system("ls /bin"): HAS_BIN = TRUE&#xD;
#! [71]&#xD;
&#xD;
&#xD;
#! [72]&#xD;
UNAME = $$system(uname -s)&#xD;
contains( UNAME, [lL]inux ):message( This looks like Linux ($$UNAME) to me )&#xD;
#! [72]&#xD;
&#xD;
&#xD;
#! [73]&#xD;
ARGS = 1 2 3 2 5 1&#xD;
ARGS = $$unique(ARGS) #1 2 3 5&#xD;
#! [73]&#xD;
&#xD;
&#xD;
#! [74]&#xD;
qmake -set PROPERTY VALUE&#xD;
#! [74]&#xD;
&#xD;
&#xD;
#! [75]&#xD;
qmake -query PROPERTY&#xD;
qmake -query #queries all current PROPERTY/VALUE pairs&#xD;
#! [75]&#xD;
&#xD;
&#xD;
#! [77]&#xD;
qmake -query "QT_INSTALL_PREFIX"&#xD;
#! [77]&#xD;
&#xD;
&#xD;
#! [78]&#xD;
QMAKE_VERS = $$[QMAKE_VERSION]&#xD;
#! [78]&#xD;
&#xD;
&#xD;
#! [79]&#xD;
documentation.path = /usr/local/program/doc&#xD;
documentation.files = docs/*&#xD;
#! [79]&#xD;
&#xD;
&#xD;
#! [80]&#xD;
INSTALLS += documentation&#xD;
#! [80]&#xD;
&#xD;
&#xD;
#! [81]&#xD;
unix:documentation.extra = create_docs; mv master.doc toc.doc&#xD;
#! [81]&#xD;
&#xD;
&#xD;
#! [82]&#xD;
target.path = /usr/local/myprogram&#xD;
INSTALLS += target&#xD;
#! [82]&#xD;
&#xD;
&#xD;
#! [83]&#xD;
CONFIG += create_prl&#xD;
#! [83]&#xD;
&#xD;
&#xD;
#! [84]&#xD;
CONFIG += link_prl&#xD;
#! [84]&#xD;
&#xD;
&#xD;
#! [85]&#xD;
QMAKE_EXT_MOC = .mymoc&#xD;
#! [85]&#xD;
&#xD;
&#xD;
#! [86]&#xD;
mytarget.target = .buildfile&#xD;
mytarget.commands = touch $$mytarget.target&#xD;
mytarget.depends = mytarget2&#xD;
&#xD;
mytarget2.commands = @echo Building $$mytarget.target&#xD;
#! [86]&#xD;
&#xD;
&#xD;
#! [87]&#xD;
QMAKE_EXTRA_TARGETS += mytarget mytarget2&#xD;
#! [87]&#xD;
&#xD;
&#xD;
#! [88]&#xD;
new_moc.output  = moc_${QMAKE_FILE_BASE}.cpp&#xD;
new_moc.commands = moc ${QMAKE_FILE_NAME} -o ${QMAKE_FILE_OUT}&#xD;
new_moc.depend_command = g++ -E -M ${QMAKE_FILE_NAME} | sed "s,^.*: ,,"&#xD;
new_moc.input = NEW_HEADERS&#xD;
QMAKE_EXTRA_COMPILERS += new_moc&#xD;
#! [88]&#xD;
&#xD;
&#xD;
#! [89]&#xD;
TARGET = myapp&#xD;
#! [89]&#xD;
&#xD;
&#xD;
#! [90]&#xD;
DEFINES += USE_MY_STUFF&#xD;
#! [90]&#xD;
&#xD;
&#xD;
#! [91]&#xD;
DEFINES -= USE_MY_STUFF&#xD;
#! [91]&#xD;
&#xD;
&#xD;
#! [92]&#xD;
DEFINES *= USE_MY_STUFF&#xD;
#! [92]&#xD;
&#xD;
&#xD;
#! [93]&#xD;
DEFINES ~= s/QT_[DT].+/QT&#xD;
#! [93]&#xD;
&#xD;
&#xD;
#! [94]&#xD;
EVERYTHING = $$SOURCES $$HEADERS&#xD;
message("The project contains the following files:")&#xD;
message($$EVERYTHING)&#xD;
#! [94]&#xD;
&#xD;
&#xD;
#! [95]&#xD;
win32:DEFINES += USE_MY_STUFF&#xD;
#! [95]&#xD;
&#xD;
&#xD;
#! [96]&#xD;
win32:xml {&#xD;
    message(Building for Windows)&#xD;
    SOURCES += xmlhandler_win.cpp&#xD;
} else:xml {&#xD;
    SOURCES += xmlhandler.cpp&#xD;
} else {&#xD;
    message("Unknown configuration")&#xD;
}&#xD;
#! [96]&#xD;
&#xD;
&#xD;
#! [97]&#xD;
MY_VARIABLE = value&#xD;
#! [97]&#xD;
&#xD;
&#xD;
#! [98]&#xD;
MY_DEFINES = $$DEFINES&#xD;
#! [98]&#xD;
&#xD;
&#xD;
#! [99]&#xD;
MY_DEFINES = $${DEFINES}&#xD;
#! [99]&#xD;
&#xD;
&#xD;
#! [100]&#xD;
TARGET = myproject_$${TEMPLATE}&#xD;
#! [100]&#xD;
&#xD;
&#xD;
#! [101]&#xD;
target.path = $$[QT_INSTALL_PLUGINS]/designer&#xD;
INSTALLS += target&#xD;
#! [101]&#xD;
&#xD;
&#xD;
#! [102]&#xD;
defineReplace(functionName){&#xD;
    #function code&#xD;
}&#xD;
#! [102]&#xD;
&#xD;
&#xD;
#! [103]&#xD;
CONFIG += myfeatures&#xD;
#! [103]&#xD;
&#xD;
&#xD;
#! [105]&#xD;
PRECOMPILED_HEADER = stable.h&#xD;
#! [105]&#xD;
&#xD;
&#xD;
#! [106]&#xD;
precompile_header:!isEmpty(PRECOMPILED_HEADER) {&#xD;
DEFINES += USING_PCH&#xD;
}&#xD;
#! [106]&#xD;
&#xD;
&#xD;
#! [107]&#xD;
PRECOMPILED_HEADER = window.h&#xD;
SOURCES            = window.cpp&#xD;
#! [107]&#xD;
&#xD;
&#xD;
#! [108]&#xD;
SOURCES += hello.cpp&#xD;
#! [108]&#xD;
&#xD;
&#xD;
#! [109]&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [109]&#xD;
&#xD;
&#xD;
#! [110]&#xD;
SOURCES = hello.cpp \&#xD;
          main.cpp&#xD;
#! [110]&#xD;
&#xD;
&#xD;
#! [111]&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [111]&#xD;
&#xD;
&#xD;
#! [112]&#xD;
TARGET = helloworld&#xD;
#! [112]&#xD;
&#xD;
&#xD;
#! [113]&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [113]&#xD;
&#xD;
&#xD;
#! [114]&#xD;
qmake -o Makefile hello.pro&#xD;
#! [114]&#xD;
&#xD;
&#xD;
#! [115]&#xD;
qmake -tp vc hello.pro&#xD;
#! [115]&#xD;
&#xD;
&#xD;
#! [116]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [116]&#xD;
&#xD;
&#xD;
#! [117]&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
#! [117]&#xD;
&#xD;
&#xD;
#! [118]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
unix {&#xD;
    SOURCES += hellounix.cpp&#xD;
}&#xD;
#! [118]&#xD;
&#xD;
&#xD;
#! [119]&#xD;
!exists( main.cpp ) {&#xD;
    error( "No main.cpp file found" )&#xD;
}&#xD;
#! [119]&#xD;
&#xD;
&#xD;
#! [120]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
unix {&#xD;
    SOURCES += hellounix.cpp&#xD;
}&#xD;
!exists( main.cpp ) {&#xD;
    error( "No main.cpp file found" )&#xD;
}&#xD;
#! [120]&#xD;
&#xD;
&#xD;
#! [121]&#xD;
win32 {&#xD;
    debug {&#xD;
        CONFIG += console&#xD;
    }&#xD;
}&#xD;
#! [121]&#xD;
&#xD;
&#xD;
#! [122]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
unix {&#xD;
    SOURCES += hellounix.cpp&#xD;
}&#xD;
!exists( main.cpp ) {&#xD;
    error( "No main.cpp file found" )&#xD;
}&#xD;
win32:debug {&#xD;
    CONFIG += console&#xD;
}&#xD;
#! [122]&#xD;
&#xD;
&#xD;
#! [123]&#xD;
TEMPLATE = app&#xD;
DESTDIR  = c:/helloapp&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
DEFINES += USE_MY_STUFF&#xD;
CONFIG  += release&#xD;
#! [123]&#xD;
&#xD;
&#xD;
#! [124]&#xD;
make all&#xD;
#! [124]&#xD;
&#xD;
&#xD;
#! [125]&#xD;
make&#xD;
#! [125]&#xD;
&#xD;
&#xD;
#! [126]&#xD;
make install&#xD;
#! [126]&#xD;
&#xD;
&#xD;
#! [127]&#xD;
CONFIG(debug, debug|release) {&#xD;
    mac: TARGET = $$join(TARGET,,,_debug)&#xD;
    win32: TARGET = $$join(TARGET,,d)&#xD;
}&#xD;
#! [127]&#xD;
&#xD;
#! [149]&#xD;
SUBDIRS += my_executable my_library&#xD;
my_executable.subdir = app&#xD;
my_executable.depends = my_library&#xD;
my_library.subdir = lib&#xD;
#! [149]&#xD;
&#xD;
#! [157]&#xD;
packagesExist(sqlite3 QtNetwork QtDeclarative) {&#xD;
    DEFINES += USE_FANCY_UI&#xD;
}&#xD;
#! [157]&#xD;
&#xD;
#! [158]&#xD;
#ifdef USE_FANCY_UI&#xD;
    // Use the fancy UI, as we have extra packages available&#xD;
#endif&#xD;
#! [158]&#xD;
&#xD;
#! [159]&#xD;
message($$absolute_path("readme.txt", "/home/johndoe/myproject"))&#xD;
#! [159]&#xD;
&#xD;
&#xD;
#! [160]&#xD;
TARGET = helloworld&#xD;
equals(TARGET, "helloworld") {&#xD;
    message("The target assignment was successful.")&#xD;
}&#xD;
#! [160]&#xD;
&#xD;
&#xD;
#! [161]&#xD;
CONTACT = firstname middlename surname phone&#xD;
message($$first(CONTACT))&#xD;
#! [161]&#xD;
&#xD;
&#xD;
#! [162]&#xD;
CONTACT = firstname middlename surname phone&#xD;
message($$last(CONTACT))&#xD;
#! [162]&#xD;
&#xD;
&#xD;
#! [163]&#xD;
message($$format_number(BAD, ibase=16 width=6 zeropad))&#xD;
#! [163]&#xD;
&#xD;
&#xD;
#! [164]&#xD;
ANSWER = 42&#xD;
greaterThan(ANSWER, 1) {&#xD;
    message("The answer might be correct.")&#xD;
}&#xD;
#! [164]&#xD;
&#xD;
&#xD;
#! [165]&#xD;
ANSWER = 42&#xD;
lessThan(ANSWER, 1) {&#xD;
    message("The answer might be wrong.")&#xD;
}&#xD;
#! [165]&#xD;
&#xD;
&#xD;
#! [166]&#xD;
if(linux-g++*|macx-g++*):CONFIG(debug, debug|release) {&#xD;
    message("We are on Linux or Mac OS, and we are in debug mode.")&#xD;
}&#xD;
#! [166]&#xD;
&#xD;
&#xD;
#! [167]&#xD;
CONTACT = firstname:middlename:surname:phone&#xD;
message($$section(CONTACT, :, 2, 2))&#xD;
#! [167]&#xD;
&#xD;
&#xD;
#! [168]&#xD;
CONTACT = firstname:middlename:surname:phone&#xD;
message($$split(CONTACT, :))&#xD;
#! [168]&#xD;
&#xD;
#! [169]&#xD;
NARF = zort&#xD;
unset(NARF)&#xD;
!defined(NARF, var) {&#xD;
    message("NARF is not defined.")&#xD;
}&#xD;
#! [169]&#xD;
&#xD;
&#xD;
#! [170]&#xD;
for(var, $$list(foo bar baz)) {&#xD;
    ...&#xD;
}&#xD;
#! [170]&#xD;
&#xD;
&#xD;
#! [171]&#xD;
values = foo bar baz&#xD;
for(var, values) {&#xD;
    ...&#xD;
}&#xD;
#! [171]&#xD;
&#xD;
&#xD;
#! [172]&#xD;
VALUE = 123&#xD;
TMP_VALUE = x$$VALUE&#xD;
greaterThan(TMP_VALUE, x456): message("Condition may be true.")&#xD;
#! [172]&#xD;
&#xD;
&#xD;
#! [173]&#xD;
message("First line$$escape_expand(\\n)Second line")&#xD;
#! [173]&#xD;
&#xD;
&#xD;
#! [174]&#xD;
TEMPLATE = subdirs&#xD;
SUBDIRS = one two three&#xD;
prepareRecursiveTarget(check)&#xD;
#! [174]&#xD;
&#xD;
&#xD;
#! [175]&#xD;
two.CONFIG += no_check_target&#xD;
#! [175]&#xD;
&#xD;
&#xD;
#! [176]&#xD;
QMAKE_EXTRA_TARGETS += check&#xD;
#! [176]&#xD;
&#xD;
&#xD;
#! [177]&#xD;
# &lt;project root&gt;/features/mycheck.prf&#xD;
equals(TEMPLATE, subdirs) {&#xD;
    prepareRecursiveTarget(check)&#xD;
} else {&#xD;
    check.commands = echo hello user&#xD;
}&#xD;
QMAKE_EXTRA_TARGETS += check&#xD;
#! [177]&#xD;
&#xD;
&#xD;
#! [178]&#xD;
# &lt;project root&gt;/.qmake.conf&#xD;
CONFIG += mycheck&#xD;
#! [178]&#xD;
&#xD;
&#xD;
#! [179]&#xD;
# &lt;project root&gt;/project.pro&#xD;
load(configure)&#xD;
#! [179]&#xD;
&#xD;
&#xD;
#! [180]&#xD;
# &lt;project root&gt;/config.tests/test/test.pro&#xD;
SOURCES = main.cpp&#xD;
LIBS += -ltheFeature&#xD;
# Note that the test project is built without Qt by default.&#xD;
#! [180]&#xD;
&#xD;
&#xD;
#! [181]&#xD;
// &lt;project root&gt;/config.tests/test/main.cpp&#xD;
#include &lt;TheFeature/MainHeader.h&gt;&#xD;
int main() { return featureFunction(); }&#xD;
#! [181]&#xD;
&#xD;
&#xD;
#! [182]&#xD;
# &lt;project root&gt;/project.pro&#xD;
qtCompileTest(test)&#xD;
#! [182]&#xD;
&#xD;
#! [183]&#xD;
# &lt;project root&gt;/project.pro&#xD;
QMAKE_SONAME_PREFIX = @rpath&#xD;
#! [183]&#xD;
&#xD;
#! [184]&#xD;
# &lt;project root&gt;/project.pro&#xD;
QMAKE_SONAME_PREFIX = @executable_path/../Frameworks&#xD;
QMAKE_SONAME_PREFIX = @loader_path/Frameworks&#xD;
QMAKE_SONAME_PREFIX = /Library/Frameworks&#xD;
#! [184]&#xD;
&#xD;
#! [185]&#xD;
VERSION_PE_HEADER = 1.2&#xD;
#! [185]&#xD;
&#xD;
#! [186]&#xD;
RC_DEFINES += USE_MY_STUFF&#xD;
#! [186]&#xD;
&#xD;
#! [187]&#xD;
win32-g++:contains(QMAKE_HOST.arch, x86_64):{&#xD;
    message("Host is 64bit")&#xD;
    ...&#xD;
}&#xD;
#! [187]&#xD;
</db:programlisting>
      <db:para xml:id="">If you are certain you want your variables processed after the files specified, then you may pass the <db:code>-after</db:code> option. When this is specified, all assignments on the command line after the <db:code>-after</db:code> option will be postponed until after the specified files are parsed.</db:para>
   </db:section>
   <db:section xml:id="project-mode-options">
      <db:title>Project Mode Options</db:title>
      <db:programlisting>/****************************************************************************&#xD;
**&#xD;
** Copyright (C) 2016 The Qt Company Ltd.&#xD;
** Contact: https://www.qt.io/licensing/&#xD;
**&#xD;
** This file is part of the documentation of the Qt Toolkit.&#xD;
**&#xD;
** $QT_BEGIN_LICENSE:BSD$&#xD;
** Commercial License Usage&#xD;
** Licensees holding valid commercial Qt licenses may use this file in&#xD;
** accordance with the commercial license agreement provided with the&#xD;
** Software or, alternatively, in accordance with the terms contained in&#xD;
** a written agreement between you and The Qt Company. For licensing terms&#xD;
** and conditions see https://www.qt.io/terms-conditions. For further&#xD;
** information use the contact form at https://www.qt.io/contact-us.&#xD;
**&#xD;
** BSD License Usage&#xD;
** Alternatively, you may use this file under the terms of the BSD license&#xD;
** as follows:&#xD;
**&#xD;
** "Redistribution and use in source and binary forms, with or without&#xD;
** modification, are permitted provided that the following conditions are&#xD;
** met:&#xD;
**   * Redistributions of source code must retain the above copyright&#xD;
**     notice, this list of conditions and the following disclaimer.&#xD;
**   * Redistributions in binary form must reproduce the above copyright&#xD;
**     notice, this list of conditions and the following disclaimer in&#xD;
**     the documentation and/or other materials provided with the&#xD;
**     distribution.&#xD;
**   * Neither the name of The Qt Company Ltd nor the names of its&#xD;
**     contributors may be used to endorse or promote products derived&#xD;
**     from this software without specific prior written permission.&#xD;
**&#xD;
**&#xD;
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#xD;
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#xD;
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR&#xD;
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT&#xD;
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xD;
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xD;
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,&#xD;
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY&#xD;
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&#xD;
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#xD;
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."&#xD;
**&#xD;
** $QT_END_LICENSE$&#xD;
**&#xD;
****************************************************************************/&#xD;
&#xD;
#! [0]&#xD;
make all&#xD;
#! [0]&#xD;
&#xD;
&#xD;
#! [1]&#xD;
CONFIG += qt debug&#xD;
#! [1]&#xD;
&#xD;
&#xD;
#! [2]&#xD;
QT += network xml&#xD;
#! [2]&#xD;
&#xD;
&#xD;
#! [3]&#xD;
QT = network xml # This will omit the core and gui modules.&#xD;
#! [3]&#xD;
&#xD;
&#xD;
#! [4]&#xD;
QT -= gui # Only the core module is used.&#xD;
#! [4]&#xD;
&#xD;
&#xD;
#! [5]&#xD;
CONFIG += link_pkgconfig&#xD;
PKGCONFIG += ogg dbus-1&#xD;
#! [5]&#xD;
&#xD;
&#xD;
#! [6]&#xD;
LIBS += -L/usr/local/lib -lmath&#xD;
#! [6]&#xD;
&#xD;
&#xD;
#! [7]&#xD;
INCLUDEPATH = c:/msdev/include d:/stl/include&#xD;
#! [7]&#xD;
&#xD;
&#xD;
#! [8]&#xD;
qmake [mode] [options] files&#xD;
#! [8]&#xD;
&#xD;
&#xD;
#! [9]&#xD;
qmake -makefile [options] files&#xD;
#! [9]&#xD;
&#xD;
&#xD;
#! [10]&#xD;
qmake -makefile -o Makefile "CONFIG+=test" test.pro&#xD;
#! [10]&#xD;
&#xD;
&#xD;
#! [11]&#xD;
qmake "CONFIG+=test" test.pro&#xD;
#! [11]&#xD;
&#xD;
&#xD;
#! [12]&#xD;
qmake -project [options] files&#xD;
#! [12]&#xD;
&#xD;
&#xD;
#! [13]&#xD;
qmake -spec macx-g++&#xD;
#! [13]&#xD;
&#xD;
&#xD;
#! [14]&#xD;
LIBS += -F/path/to/framework/directory/&#xD;
#! [14]&#xD;
&#xD;
&#xD;
#! [15]&#xD;
LIBS += -framework TheFramework&#xD;
#! [15]&#xD;
&#xD;
&#xD;
#! [16]&#xD;
TEMPLATE = lib&#xD;
CONFIG += lib_bundle&#xD;
#! [16]&#xD;
&#xD;
&#xD;
#! [17]&#xD;
FRAMEWORK_HEADERS.version = Versions&#xD;
FRAMEWORK_HEADERS.files = path/to/header_one.h path/to/header_two.h&#xD;
FRAMEWORK_HEADERS.path = Headers&#xD;
QMAKE_BUNDLE_DATA += FRAMEWORK_HEADERS&#xD;
#! [17]&#xD;
&#xD;
&#xD;
#! [19]&#xD;
qmake -spec macx-xcode project.pro&#xD;
#! [19]&#xD;
&#xD;
&#xD;
#! [20]&#xD;
qmake -tp vc&#xD;
#! [20]&#xD;
&#xD;
&#xD;
#! [21]&#xD;
qmake -tp vc -r&#xD;
#! [21]&#xD;
&#xD;
&#xD;
#! [22]&#xD;
CONFIG -= embed_manifest_exe&#xD;
#! [22]&#xD;
&#xD;
&#xD;
#! [23]&#xD;
CONFIG -= embed_manifest_dll&#xD;
#! [23]&#xD;
&#xD;
&#xD;
#! [24]&#xD;
make all&#xD;
#! [24]&#xD;
&#xD;
&#xD;
#! [25]&#xD;
build_pass:CONFIG(debug, debug|release) {&#xD;
    unix: TARGET = $$join(TARGET,,,_debug)&#xD;
    else: TARGET = $$join(TARGET,,,d)&#xD;
}&#xD;
#! [25]&#xD;
&#xD;
&#xD;
#! [26]&#xD;
CONFIG += console newstuff&#xD;
...&#xD;
newstuff {&#xD;
    SOURCES += new.cpp&#xD;
    HEADERS += new.h&#xD;
}&#xD;
#! [26]&#xD;
&#xD;
&#xD;
#! [27]&#xD;
DEFINES += USE_MY_STUFF&#xD;
#! [27]&#xD;
&#xD;
&#xD;
#! [30]&#xD;
DESTDIR = ../../lib&#xD;
#! [30]&#xD;
&#xD;
&#xD;
#! [31]&#xD;
DISTFILES += ../program.txt&#xD;
#! [31]&#xD;
&#xD;
&#xD;
#! [32]&#xD;
FORMS = mydialog.ui \&#xD;
    mywidget.ui \&#xD;
        myconfig.ui&#xD;
#! [32]&#xD;
&#xD;
&#xD;
#! [34]&#xD;
HEADERS = myclass.h \&#xD;
          login.h \&#xD;
          mainwindow.h&#xD;
#! [34]&#xD;
&#xD;
&#xD;
#! [35]&#xD;
INCLUDEPATH = c:/msdev/include d:/stl/include&#xD;
#! [35]&#xD;
&#xD;
&#xD;
#! [36]&#xD;
target.path += $$[QT_INSTALL_PLUGINS]/imageformats&#xD;
INSTALLS += target&#xD;
#! [36]&#xD;
&#xD;
&#xD;
#! [37]&#xD;
LEXSOURCES = lexer.l&#xD;
#! [37]&#xD;
&#xD;
&#xD;
#! [38]&#xD;
unix:LIBS += -L/usr/local/lib -lmath&#xD;
win32:LIBS += c:/mylibs/math.lib&#xD;
#! [38]&#xD;
&#xD;
&#xD;
#! [39]&#xD;
CONFIG += no_lflags_merge&#xD;
#! [39]&#xD;
&#xD;
&#xD;
#! [40]&#xD;
unix:MOC_DIR = ../myproject/tmp&#xD;
win32:MOC_DIR = c:/myproject/tmp&#xD;
#! [40]&#xD;
&#xD;
&#xD;
#! [41]&#xD;
unix:OBJECTS_DIR = ../myproject/tmp&#xD;
win32:OBJECTS_DIR = c:/myproject/tmp&#xD;
#! [41]&#xD;
&#xD;
&#xD;
#! [43]&#xD;
FRAMEWORK_HEADERS.version = Versions&#xD;
FRAMEWORK_HEADERS.files = path/to/header_one.h path/to/header_two.h&#xD;
FRAMEWORK_HEADERS.path = Headers&#xD;
QMAKE_BUNDLE_DATA += FRAMEWORK_HEADERS&#xD;
#! [43]&#xD;
&#xD;
&#xD;
#! [44]&#xD;
QMAKE_BUNDLE_EXTENSION = .myframework&#xD;
#! [44]&#xD;
&#xD;
&#xD;
#! [45]&#xD;
QMAKE_RESOURCE_FLAGS += -threshold 0 -compress 9&#xD;
#! [45]&#xD;
&#xD;
&#xD;
#! [47]&#xD;
QT -= gui # Only the core module is used.&#xD;
#! [47]&#xD;
&#xD;
&#xD;
#! [48]&#xD;
unix:RCC_DIR = ../myproject/resources&#xD;
win32:RCC_DIR = c:/myproject/resources&#xD;
#! [48]&#xD;
&#xD;
&#xD;
#! [49]&#xD;
SOURCES = myclass.cpp \&#xD;
      login.cpp \&#xD;
      mainwindow.cpp&#xD;
#! [49]&#xD;
&#xD;
&#xD;
#! [50]&#xD;
SUBDIRS = kernel \&#xD;
          tools \&#xD;
          myapp&#xD;
#! [50]&#xD;
&#xD;
&#xD;
#! [51]&#xD;
CONFIG += ordered&#xD;
#! [51]&#xD;
&#xD;
&#xD;
#! [52]&#xD;
TEMPLATE = app&#xD;
TARGET = myapp&#xD;
SOURCES = main.cpp&#xD;
#! [52]&#xD;
&#xD;
&#xD;
#! [53]&#xD;
TEMPLATE = lib&#xD;
SOURCES = main.cpp&#xD;
TARGET = mylib&#xD;
#! [53]&#xD;
&#xD;
&#xD;
#! [54]&#xD;
unix:UI_DIR = ../myproject/ui&#xD;
win32:UI_DIR = c:/myproject/ui&#xD;
#! [54]&#xD;
&#xD;
&#xD;
#! [57]&#xD;
win32:VERSION = 1.2.3.4 # major.minor.patch.build&#xD;
else:VERSION = 1.2.3    # major.minor.patch&#xD;
#! [57]&#xD;
&#xD;
&#xD;
#! [58]&#xD;
YACCSOURCES = moc.y&#xD;
#! [58]&#xD;
&#xD;
&#xD;
#! [59]&#xD;
FILE = /etc/passwd&#xD;
FILENAME = $$basename(FILE) #passwd&#xD;
#! [59]&#xD;
&#xD;
&#xD;
#! [60]&#xD;
CONFIG = debug&#xD;
CONFIG += release&#xD;
CONFIG(release, debug|release):message(Release build!) #will print&#xD;
CONFIG(debug, debug|release):message(Debug build!) #no print&#xD;
#! [60]&#xD;
&#xD;
&#xD;
#! [61]&#xD;
contains( drivers, network ) {&#xD;
    # drivers contains 'network'&#xD;
    message( "Configuring for network build..." )&#xD;
    HEADERS += network.h&#xD;
    SOURCES += network.cpp&#xD;
}&#xD;
#! [61]&#xD;
&#xD;
&#xD;
#! [62]&#xD;
error(An error has occurred in the configuration process.)&#xD;
#! [62]&#xD;
&#xD;
&#xD;
#! [63]&#xD;
exists( $(QTDIR)/lib/libqt-mt* ) {&#xD;
      message( "Configuring for multi-threaded Qt..." )&#xD;
      CONFIG += thread&#xD;
}&#xD;
#! [63]&#xD;
&#xD;
&#xD;
#! [64]&#xD;
MY_VAR = one two three four&#xD;
MY_VAR2 = $$join(MY_VAR, " -L", -L) -Lfive&#xD;
MY_VAR3 = $$member(MY_VAR, 2) $$find(MY_VAR, t.*)&#xD;
#! [64]&#xD;
&#xD;
&#xD;
#! [65]&#xD;
LIST = 1 2 3&#xD;
for(a, LIST):exists(file.$${a}):message(I see a file.$${a}!)&#xD;
#! [65]&#xD;
&#xD;
&#xD;
#! [66]&#xD;
include( shared.pri )&#xD;
OPTIONS = standard custom&#xD;
!include( options.pri ) {&#xD;
    message( "No custom build options specified" )&#xD;
OPTIONS -= custom&#xD;
}&#xD;
#! [66]&#xD;
&#xD;
&#xD;
#! [67]&#xD;
isEmpty( CONFIG ) {&#xD;
CONFIG += warn_on debug&#xD;
}&#xD;
#! [67]&#xD;
&#xD;
&#xD;
#! [68]&#xD;
message( "This is a message" )&#xD;
#! [68]&#xD;
&#xD;
&#xD;
#! [69]&#xD;
!build_pass:message( "This is a message" )&#xD;
#! [69]&#xD;
&#xD;
&#xD;
#! [70]&#xD;
This is a test.&#xD;
#! [70]&#xD;
&#xD;
&#xD;
#! [71]&#xD;
system("ls /bin"): HAS_BIN = TRUE&#xD;
#! [71]&#xD;
&#xD;
&#xD;
#! [72]&#xD;
UNAME = $$system(uname -s)&#xD;
contains( UNAME, [lL]inux ):message( This looks like Linux ($$UNAME) to me )&#xD;
#! [72]&#xD;
&#xD;
&#xD;
#! [73]&#xD;
ARGS = 1 2 3 2 5 1&#xD;
ARGS = $$unique(ARGS) #1 2 3 5&#xD;
#! [73]&#xD;
&#xD;
&#xD;
#! [74]&#xD;
qmake -set PROPERTY VALUE&#xD;
#! [74]&#xD;
&#xD;
&#xD;
#! [75]&#xD;
qmake -query PROPERTY&#xD;
qmake -query #queries all current PROPERTY/VALUE pairs&#xD;
#! [75]&#xD;
&#xD;
&#xD;
#! [77]&#xD;
qmake -query "QT_INSTALL_PREFIX"&#xD;
#! [77]&#xD;
&#xD;
&#xD;
#! [78]&#xD;
QMAKE_VERS = $$[QMAKE_VERSION]&#xD;
#! [78]&#xD;
&#xD;
&#xD;
#! [79]&#xD;
documentation.path = /usr/local/program/doc&#xD;
documentation.files = docs/*&#xD;
#! [79]&#xD;
&#xD;
&#xD;
#! [80]&#xD;
INSTALLS += documentation&#xD;
#! [80]&#xD;
&#xD;
&#xD;
#! [81]&#xD;
unix:documentation.extra = create_docs; mv master.doc toc.doc&#xD;
#! [81]&#xD;
&#xD;
&#xD;
#! [82]&#xD;
target.path = /usr/local/myprogram&#xD;
INSTALLS += target&#xD;
#! [82]&#xD;
&#xD;
&#xD;
#! [83]&#xD;
CONFIG += create_prl&#xD;
#! [83]&#xD;
&#xD;
&#xD;
#! [84]&#xD;
CONFIG += link_prl&#xD;
#! [84]&#xD;
&#xD;
&#xD;
#! [85]&#xD;
QMAKE_EXT_MOC = .mymoc&#xD;
#! [85]&#xD;
&#xD;
&#xD;
#! [86]&#xD;
mytarget.target = .buildfile&#xD;
mytarget.commands = touch $$mytarget.target&#xD;
mytarget.depends = mytarget2&#xD;
&#xD;
mytarget2.commands = @echo Building $$mytarget.target&#xD;
#! [86]&#xD;
&#xD;
&#xD;
#! [87]&#xD;
QMAKE_EXTRA_TARGETS += mytarget mytarget2&#xD;
#! [87]&#xD;
&#xD;
&#xD;
#! [88]&#xD;
new_moc.output  = moc_${QMAKE_FILE_BASE}.cpp&#xD;
new_moc.commands = moc ${QMAKE_FILE_NAME} -o ${QMAKE_FILE_OUT}&#xD;
new_moc.depend_command = g++ -E -M ${QMAKE_FILE_NAME} | sed "s,^.*: ,,"&#xD;
new_moc.input = NEW_HEADERS&#xD;
QMAKE_EXTRA_COMPILERS += new_moc&#xD;
#! [88]&#xD;
&#xD;
&#xD;
#! [89]&#xD;
TARGET = myapp&#xD;
#! [89]&#xD;
&#xD;
&#xD;
#! [90]&#xD;
DEFINES += USE_MY_STUFF&#xD;
#! [90]&#xD;
&#xD;
&#xD;
#! [91]&#xD;
DEFINES -= USE_MY_STUFF&#xD;
#! [91]&#xD;
&#xD;
&#xD;
#! [92]&#xD;
DEFINES *= USE_MY_STUFF&#xD;
#! [92]&#xD;
&#xD;
&#xD;
#! [93]&#xD;
DEFINES ~= s/QT_[DT].+/QT&#xD;
#! [93]&#xD;
&#xD;
&#xD;
#! [94]&#xD;
EVERYTHING = $$SOURCES $$HEADERS&#xD;
message("The project contains the following files:")&#xD;
message($$EVERYTHING)&#xD;
#! [94]&#xD;
&#xD;
&#xD;
#! [95]&#xD;
win32:DEFINES += USE_MY_STUFF&#xD;
#! [95]&#xD;
&#xD;
&#xD;
#! [96]&#xD;
win32:xml {&#xD;
    message(Building for Windows)&#xD;
    SOURCES += xmlhandler_win.cpp&#xD;
} else:xml {&#xD;
    SOURCES += xmlhandler.cpp&#xD;
} else {&#xD;
    message("Unknown configuration")&#xD;
}&#xD;
#! [96]&#xD;
&#xD;
&#xD;
#! [97]&#xD;
MY_VARIABLE = value&#xD;
#! [97]&#xD;
&#xD;
&#xD;
#! [98]&#xD;
MY_DEFINES = $$DEFINES&#xD;
#! [98]&#xD;
&#xD;
&#xD;
#! [99]&#xD;
MY_DEFINES = $${DEFINES}&#xD;
#! [99]&#xD;
&#xD;
&#xD;
#! [100]&#xD;
TARGET = myproject_$${TEMPLATE}&#xD;
#! [100]&#xD;
&#xD;
&#xD;
#! [101]&#xD;
target.path = $$[QT_INSTALL_PLUGINS]/designer&#xD;
INSTALLS += target&#xD;
#! [101]&#xD;
&#xD;
&#xD;
#! [102]&#xD;
defineReplace(functionName){&#xD;
    #function code&#xD;
}&#xD;
#! [102]&#xD;
&#xD;
&#xD;
#! [103]&#xD;
CONFIG += myfeatures&#xD;
#! [103]&#xD;
&#xD;
&#xD;
#! [105]&#xD;
PRECOMPILED_HEADER = stable.h&#xD;
#! [105]&#xD;
&#xD;
&#xD;
#! [106]&#xD;
precompile_header:!isEmpty(PRECOMPILED_HEADER) {&#xD;
DEFINES += USING_PCH&#xD;
}&#xD;
#! [106]&#xD;
&#xD;
&#xD;
#! [107]&#xD;
PRECOMPILED_HEADER = window.h&#xD;
SOURCES            = window.cpp&#xD;
#! [107]&#xD;
&#xD;
&#xD;
#! [108]&#xD;
SOURCES += hello.cpp&#xD;
#! [108]&#xD;
&#xD;
&#xD;
#! [109]&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [109]&#xD;
&#xD;
&#xD;
#! [110]&#xD;
SOURCES = hello.cpp \&#xD;
          main.cpp&#xD;
#! [110]&#xD;
&#xD;
&#xD;
#! [111]&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [111]&#xD;
&#xD;
&#xD;
#! [112]&#xD;
TARGET = helloworld&#xD;
#! [112]&#xD;
&#xD;
&#xD;
#! [113]&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [113]&#xD;
&#xD;
&#xD;
#! [114]&#xD;
qmake -o Makefile hello.pro&#xD;
#! [114]&#xD;
&#xD;
&#xD;
#! [115]&#xD;
qmake -tp vc hello.pro&#xD;
#! [115]&#xD;
&#xD;
&#xD;
#! [116]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
#! [116]&#xD;
&#xD;
&#xD;
#! [117]&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
#! [117]&#xD;
&#xD;
&#xD;
#! [118]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
unix {&#xD;
    SOURCES += hellounix.cpp&#xD;
}&#xD;
#! [118]&#xD;
&#xD;
&#xD;
#! [119]&#xD;
!exists( main.cpp ) {&#xD;
    error( "No main.cpp file found" )&#xD;
}&#xD;
#! [119]&#xD;
&#xD;
&#xD;
#! [120]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
unix {&#xD;
    SOURCES += hellounix.cpp&#xD;
}&#xD;
!exists( main.cpp ) {&#xD;
    error( "No main.cpp file found" )&#xD;
}&#xD;
#! [120]&#xD;
&#xD;
&#xD;
#! [121]&#xD;
win32 {&#xD;
    debug {&#xD;
        CONFIG += console&#xD;
    }&#xD;
}&#xD;
#! [121]&#xD;
&#xD;
&#xD;
#! [122]&#xD;
CONFIG += debug&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
win32 {&#xD;
    SOURCES += hellowin.cpp&#xD;
}&#xD;
unix {&#xD;
    SOURCES += hellounix.cpp&#xD;
}&#xD;
!exists( main.cpp ) {&#xD;
    error( "No main.cpp file found" )&#xD;
}&#xD;
win32:debug {&#xD;
    CONFIG += console&#xD;
}&#xD;
#! [122]&#xD;
&#xD;
&#xD;
#! [123]&#xD;
TEMPLATE = app&#xD;
DESTDIR  = c:/helloapp&#xD;
HEADERS += hello.h&#xD;
SOURCES += hello.cpp&#xD;
SOURCES += main.cpp&#xD;
DEFINES += USE_MY_STUFF&#xD;
CONFIG  += release&#xD;
#! [123]&#xD;
&#xD;
&#xD;
#! [124]&#xD;
make all&#xD;
#! [124]&#xD;
&#xD;
&#xD;
#! [125]&#xD;
make&#xD;
#! [125]&#xD;
&#xD;
&#xD;
#! [126]&#xD;
make install&#xD;
#! [126]&#xD;
&#xD;
&#xD;
#! [127]&#xD;
CONFIG(debug, debug|release) {&#xD;
    mac: TARGET = $$join(TARGET,,,_debug)&#xD;
    win32: TARGET = $$join(TARGET,,d)&#xD;
}&#xD;
#! [127]&#xD;
&#xD;
#! [149]&#xD;
SUBDIRS += my_executable my_library&#xD;
my_executable.subdir = app&#xD;
my_executable.depends = my_library&#xD;
my_library.subdir = lib&#xD;
#! [149]&#xD;
&#xD;
#! [157]&#xD;
packagesExist(sqlite3 QtNetwork QtDeclarative) {&#xD;
    DEFINES += USE_FANCY_UI&#xD;
}&#xD;
#! [157]&#xD;
&#xD;
#! [158]&#xD;
#ifdef USE_FANCY_UI&#xD;
    // Use the fancy UI, as we have extra packages available&#xD;
#endif&#xD;
#! [158]&#xD;
&#xD;
#! [159]&#xD;
message($$absolute_path("readme.txt", "/home/johndoe/myproject"))&#xD;
#! [159]&#xD;
&#xD;
&#xD;
#! [160]&#xD;
TARGET = helloworld&#xD;
equals(TARGET, "helloworld") {&#xD;
    message("The target assignment was successful.")&#xD;
}&#xD;
#! [160]&#xD;
&#xD;
&#xD;
#! [161]&#xD;
CONTACT = firstname middlename surname phone&#xD;
message($$first(CONTACT))&#xD;
#! [161]&#xD;
&#xD;
&#xD;
#! [162]&#xD;
CONTACT = firstname middlename surname phone&#xD;
message($$last(CONTACT))&#xD;
#! [162]&#xD;
&#xD;
&#xD;
#! [163]&#xD;
message($$format_number(BAD, ibase=16 width=6 zeropad))&#xD;
#! [163]&#xD;
&#xD;
&#xD;
#! [164]&#xD;
ANSWER = 42&#xD;
greaterThan(ANSWER, 1) {&#xD;
    message("The answer might be correct.")&#xD;
}&#xD;
#! [164]&#xD;
&#xD;
&#xD;
#! [165]&#xD;
ANSWER = 42&#xD;
lessThan(ANSWER, 1) {&#xD;
    message("The answer might be wrong.")&#xD;
}&#xD;
#! [165]&#xD;
&#xD;
&#xD;
#! [166]&#xD;
if(linux-g++*|macx-g++*):CONFIG(debug, debug|release) {&#xD;
    message("We are on Linux or Mac OS, and we are in debug mode.")&#xD;
}&#xD;
#! [166]&#xD;
&#xD;
&#xD;
#! [167]&#xD;
CONTACT = firstname:middlename:surname:phone&#xD;
message($$section(CONTACT, :, 2, 2))&#xD;
#! [167]&#xD;
&#xD;
&#xD;
#! [168]&#xD;
CONTACT = firstname:middlename:surname:phone&#xD;
message($$split(CONTACT, :))&#xD;
#! [168]&#xD;
&#xD;
#! [169]&#xD;
NARF = zort&#xD;
unset(NARF)&#xD;
!defined(NARF, var) {&#xD;
    message("NARF is not defined.")&#xD;
}&#xD;
#! [169]&#xD;
&#xD;
&#xD;
#! [170]&#xD;
for(var, $$list(foo bar baz)) {&#xD;
    ...&#xD;
}&#xD;
#! [170]&#xD;
&#xD;
&#xD;
#! [171]&#xD;
values = foo bar baz&#xD;
for(var, values) {&#xD;
    ...&#xD;
}&#xD;
#! [171]&#xD;
&#xD;
&#xD;
#! [172]&#xD;
VALUE = 123&#xD;
TMP_VALUE = x$$VALUE&#xD;
greaterThan(TMP_VALUE, x456): message("Condition may be true.")&#xD;
#! [172]&#xD;
&#xD;
&#xD;
#! [173]&#xD;
message("First line$$escape_expand(\\n)Second line")&#xD;
#! [173]&#xD;
&#xD;
&#xD;
#! [174]&#xD;
TEMPLATE = subdirs&#xD;
SUBDIRS = one two three&#xD;
prepareRecursiveTarget(check)&#xD;
#! [174]&#xD;
&#xD;
&#xD;
#! [175]&#xD;
two.CONFIG += no_check_target&#xD;
#! [175]&#xD;
&#xD;
&#xD;
#! [176]&#xD;
QMAKE_EXTRA_TARGETS += check&#xD;
#! [176]&#xD;
&#xD;
&#xD;
#! [177]&#xD;
# &lt;project root&gt;/features/mycheck.prf&#xD;
equals(TEMPLATE, subdirs) {&#xD;
    prepareRecursiveTarget(check)&#xD;
} else {&#xD;
    check.commands = echo hello user&#xD;
}&#xD;
QMAKE_EXTRA_TARGETS += check&#xD;
#! [177]&#xD;
&#xD;
&#xD;
#! [178]&#xD;
# &lt;project root&gt;/.qmake.conf&#xD;
CONFIG += mycheck&#xD;
#! [178]&#xD;
&#xD;
&#xD;
#! [179]&#xD;
# &lt;project root&gt;/project.pro&#xD;
load(configure)&#xD;
#! [179]&#xD;
&#xD;
&#xD;
#! [180]&#xD;
# &lt;project root&gt;/config.tests/test/test.pro&#xD;
SOURCES = main.cpp&#xD;
LIBS += -ltheFeature&#xD;
# Note that the test project is built without Qt by default.&#xD;
#! [180]&#xD;
&#xD;
&#xD;
#! [181]&#xD;
// &lt;project root&gt;/config.tests/test/main.cpp&#xD;
#include &lt;TheFeature/MainHeader.h&gt;&#xD;
int main() { return featureFunction(); }&#xD;
#! [181]&#xD;
&#xD;
&#xD;
#! [182]&#xD;
# &lt;project root&gt;/project.pro&#xD;
qtCompileTest(test)&#xD;
#! [182]&#xD;
&#xD;
#! [183]&#xD;
# &lt;project root&gt;/project.pro&#xD;
QMAKE_SONAME_PREFIX = @rpath&#xD;
#! [183]&#xD;
&#xD;
#! [184]&#xD;
# &lt;project root&gt;/project.pro&#xD;
QMAKE_SONAME_PREFIX = @executable_path/../Frameworks&#xD;
QMAKE_SONAME_PREFIX = @loader_path/Frameworks&#xD;
QMAKE_SONAME_PREFIX = /Library/Frameworks&#xD;
#! [184]&#xD;
&#xD;
#! [185]&#xD;
VERSION_PE_HEADER = 1.2&#xD;
#! [185]&#xD;
&#xD;
#! [186]&#xD;
RC_DEFINES += USE_MY_STUFF&#xD;
#! [186]&#xD;
&#xD;
#! [187]&#xD;
win32-g++:contains(QMAKE_HOST.arch, x86_64):{&#xD;
    message("Host is 64bit")&#xD;
    ...&#xD;
}&#xD;
#! [187]&#xD;
</db:programlisting>
      <db:para xml:id="">In project mode, qmake will generate a project file. Additionally, you may supply the following options in this mode:</db:para>
      <db:itemizedlist>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-r</db:code> qmake will look through supplied directories recursively.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para xml:id="">
               <db:code>-nopwd</db:code> qmake will not look in your current working directory for source code. It will only use the specified <db:code>files</db:code>.</db:para>
         </db:listitem>
      </db:itemizedlist>
      <db:para xml:id="">In this mode, the <db:code>files</db:code> argument can be a list of files or directories. If a directory is specified, it will be included in the <db:link xlink:href="qmake-variable-reference.html#dependpath" xrefstyle="page" annotations="DEPENDPATH">DEPENDPATH</db:link> variable, and relevant code from there will be included in the generated project file. If a file is given, it will be appended to the correct variable, depending on its extension. For example, UI files are added to <db:link xlink:href="qmake-variable-reference.html#forms" xrefstyle="page" annotations="FORMS">FORMS</db:link>, and C++ files are added to <db:link xlink:href="qmake-variable-reference.html#sources" xrefstyle="page" annotations="SOURCES">SOURCES</db:link>.</db:para>
      <db:para xml:id="">You may also pass assignments on the command line in this mode. When doing so, these assignments will be placed last in the generated project file.</db:para>
   </db:section>
</db:article>
