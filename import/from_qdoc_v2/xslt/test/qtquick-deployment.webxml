<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <page name="qtquick-deployment.html" href="qtquick-deployment.html" status="active" location="deployment.qdoc" filepath="C:/Qt/5.11.1/Src/qtdoc/doc/src/qmlapp/deployment.qdoc" lineno="28" subtype="page" title="Deploying QML Applications" fulltitle="Deploying QML Applications" subtitle="" module="QtDoc" brief="Deploying QML applications">
            <contents name="deploying-applications-with-qt-creator" title="Deploying Applications with Qt Creator" level="1"/>
            <contents name="qml-caching" title="QML Caching" level="1"/>
            <contents name="compiling-qml-ahead-of-time" title="Compiling QML Ahead of Time" level="1"/>
            <contents name="limitations" title="Limitations" level="2"/>
            <contents name="prototyping-with-qml-scene" title="Prototyping with QML Scene" level="1"/>
            <contents name="initializing-the-qml-runtime-in-applications" title="Initializing the QML Runtime in Applications" level="1"/>
            <contents name="initializing-with-qquickview" title="Initializing with QQuickView" level="2"/>
            <contents name="creating-a-qqmlengine-directly" title="Creating a QQmlEngine directly" level="2"/>
            <contents name="managing-resource-files-with-the-qt-resource-system" title="Managing Resource Files with the Qt Resource System" level="1"/>
            <description path="C:/Qt/5.11.1/Src/qtdoc/doc/src/qmlapp/deployment.qdoc" line="28" column="4">
                <brief>Deploying QML applications</brief>
                <para>QML documents are loaded and executed by the QML runtime. This includes the Declarative UI engine along with the built-in QML types and plugin modules, and it also provides access to third-party QML types and modules.</para>
                <para>Applications that use QML need to invoke the QML runtime in order to execute QML documents. This can be done by creating a QQuickView or a <link raw="QQmlEngine" href="qqmlengine.html" type="class">QQmlEngine</link>, as described below. In addition, the Declarative UI package includes the qmlscene tool, which loads <teletype type="highlighted">.qml</teletype> files. This tool is useful for developing and testing QML code without the need to write a C++ application to load the QML runtime.</para>
                <section id="deploying-applications-with-qt-creator">
                    <heading level="1">Deploying Applications with Qt Creator</heading>
                    <para>
                        <link raw="Qt Creator Manual" href="http://doc.qt.io/qtcreator/index.html" type="page" page="Qt Creator Manual">Qt Creator</link> deploys and packages QML applications to various platforms. For mobile devices, Qt Creator can directly bundle applications to the respective platform package formats such as APK.</para>
                    <para>For more information, visit:</para>
                    <list type="bullet">
                        <item>
                            <para>
                                <link raw="Deploying Qt Applications" href="deployment.html" type="page" page="Deploying Qt Applications">Deploying Qt Applications</link></para>
                        </item>
                        <item>
                            <para>
                                <link raw="Qt Creator: Running on Multiple Platforms" href="http://doc.qt.io/qtcreator/creator-running-targets.html" type="page" page="Qt Creator: Running on Multiple Platforms">Running on Multiple Platforms</link></para>
                        </item>
                        <item>
                            <para>
                                <link raw="Qt Creator: Deploying to Devices" href="http://doc.qt.io/qtcreator/creator-deployment.html" type="page" page="Qt Creator: Deploying to Devices">Deploying to Devices</link></para>
                        </item>
                    </list>
                    <para>When running applications on the target platform, the application needs to access the location of the QML libraries. When using <link raw="qmake Manual" href="qmake-manual.html" type="page" page="qmake Manual">qmake</link>, the <teletype type="highlighted">QT_INSTALL_QML</teletype> environment points to the location of the libraries. The <link raw="Downloads" href="http://qt.io/download" type="page" page="Downloads">Qt Installers</link> install the QML libraries in <italic>&lt;version&gt;</italic>
                        <teletype type="highlighted">/</teletype>
                        <italic>&lt;compiler&gt;</italic>
                        <teletype type="highlighted">/qml</teletype> directory.</para>
                </section>
                <section id="qml-caching">
                    <heading level="1">QML Caching</heading>
                    <para>The QML runtime loads QML documents by parsing them and generating byte code. Most of the time the document hasn't changed since the last time it was loaded. In order to speed up this loading process, the QML runtime maintains a cache file for each qml document. This cache file contains the compiled byte code and a binary representation of the QML document structure. In addition, when multiple applications use the same QML document, the memory needed for the code is shared between application processes. The cache files are loaded via the <teletype type="highlighted">mmap()</teletype> system call on POSIX compliant operating systems or <teletype type="highlighted">CreateFileMapping()</teletype> on Windows, resulting in significant memory savings.</para>
                    <para>Each time you load a changed QML document, the cache is automatically re-created. Cache files are located in the same directory as the source code, if the directory is writable. Otherwise they will be placed in a sub-directory of <link raw="QStandardPaths::CacheLocation" href="qstandardpaths.html#StandardLocation-enum" type="enum" enum="QStandardPaths::StandardLocation">QStandardPaths::CacheLocation</link> with the name &quot;qmlcache&quot;. The file extension is <teletype type="highlighted">.qmlc</teletype> for QML documents and <teletype type="highlighted">.jsc</teletype> for imported JavaScript modules. On the Android platform, cache files are always stored in the cache directory.</para>
                </section>
                <section id="compiling-qml-ahead-of-time">
                    <heading level="1">Compiling QML Ahead of Time</heading>
                    <para>The automatic caching of compiled QML documents into cache files results in significantly faster load times of applications. However, the initial creation of cache files can still take time, especially when the application starts for the very first time. To avoid that initial step and provide faster start-up times from the very beginning, Qt's build system allows you to perform the compilation step for QML files at the same time as the rest of your application.</para>
                    <para>If you would like to deploy your application with QML files compiled ahead of time, then you must organize the files and the build system in a specific way:</para>
                    <list type="bullet">
                        <item>
                            <para>All QML documents (including JavaScript files) must be included as resources through <link raw="The Qt Resource System" href="resources.html" type="page" page="The Qt Resource System">Qt's Resource system</link>.</para>
                        </item>
                        <item>
                            <para>Your application must load the QML documents via the <teletype type="highlighted">qrc:///</teletype> URL scheme.</para>
                        </item>
                        <item>
                            <para>You can enable Ahead-of-Time compilation using the <teletype type="highlighted">CONFIG+=qtquickcompiler</teletype> directive.</para>
                        </item>
                        <item>
                            <para>If you are using the CMake build system, then you can achieve this inserting a <teletype type="highlighted">find_package(Qt5QuickCompiler)</teletype> call into your <teletype type="highlighted">CMakeLists.txt</teletype> and replace the use of of <teletype type="highlighted">qt5_add_resources</teletype> with <teletype type="highlighted">qtquick_compiler_add_resources</teletype> .</para>
                        </item>
                    </list>
                    <para>One added benefit of this way of developing and deploying the application is that you will be notified of syntax errors in your QML documents at application compile time, instead of run-time when loading the file.</para>
                </section>
                <section id="limitations">
                    <heading level="2">Limitations</heading>
                    <para>Currently this feature will tie your application to the Qt version you are compiling against, because it will replace the QML document source code in the resources with the compiled binary version. The source files are not present anymore. That means that when using the same application against a different version of Qt without recompiling it, loading the QML documents will fail with an error message.</para>
                    <para>The Ahead-of-Time compilation is implemented this way because the feature originates from an add-on for use in commercial application environments, where the deployment of source code is not desirable and requiring a recompilation when changing Qt is usually acceptable.</para>
                    <para>We plan to implement support for retaining the source documents in a future version of Qt.</para>
                </section>
                <section id="prototyping-with-qml-scene">
                    <heading level="1">Prototyping with QML Scene</heading>
                    <para>The Declarative UI package includes a QML runtime tool, <link raw="qtquick-qmlscene.html" href="qtquick-qmlscene.html" type="page" page="Prototyping with qmlscene">qmlscene</link>, which loads and displays QML documents. This is useful during the application development phase for prototyping QML-based applications without writing your own C++ applications to invoke the QML runtime.</para>
                </section>
                <section id="initializing-the-qml-runtime-in-applications">
                    <heading level="1">Initializing the QML Runtime in Applications</heading>
                    <para>To run an application that uses QML, the QML runtime must be invoked by the application. This is done by writing a Qt C++ application that loads the <link raw="QQmlEngine" href="qqmlengine.html" type="class">QQmlEngine</link> by either:</para>
                    <list type="bullet">
                        <item>
                            <para>Loading the QML file through a QQuickView instance, or</para>
                        </item>
                        <item>
                            <para>Creating a <link raw="QQmlEngine" href="qqmlengine.html" type="class">QQmlEngine</link> instance and loading QML files with <link raw="QQmlComponent" href="qqmlcomponent.html" type="class">QQmlComponent</link></para>
                        </item>
                    </list>
                </section>
                <section id="initializing-with-qquickview">
                    <heading level="2">Initializing with QQuickView</heading>
                    <para>QQuickView is a <link raw="QWindow" href="qwindow.html" type="class">QWindow</link>-based class that is able to load QML files. For example, if there is a QML file, <teletype type="highlighted">application.qml</teletype>, it will look like this:</para>
                    <para>It can be loaded in a Qt application's <teletype type="highlighted">main.cpp</teletype> file like this:</para>
                    <code>#include &lt;QGuiApplication&gt;
#include &lt;QQuickView&gt;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    QQuickView view;
    view.setSource(QUrl::fromLocalFile(&quot;application.qml&quot;));
    view.show();

    return app.exec();
}</code>
                    <para>This creates a <link raw="QWindow" href="qwindow.html" type="class">QWindow</link>-based view that displays the contents of <teletype type="highlighted">application.qml</teletype>.</para>
                    <para>The application's <teletype type="highlighted">.pro</teletype> <link raw="Creating Project Files" href="qmake-project-files.html" type="page" page="Creating Project Files">project file</link> must specify the <teletype type="highlighted">declarative</teletype> module for the <teletype type="highlighted">QT</teletype> variable. For example:</para>
                    <code>TEMPLATE += app
QT += quick
SOURCES += main.cpp</code>
                </section>
                <section id="creating-a-qqmlengine-directly">
                    <heading level="2">Creating a QQmlEngine directly</heading>
                    <para>If <teletype type="highlighted">application.qml</teletype> does not have any graphical components, or if it is preferred to avoid QQuickView for other reasons, the <link raw="QQmlEngine" href="qqmlengine.html" type="class">QQmlEngine</link> can be constructed directly instead. In this case, <teletype type="highlighted">application.qml</teletype> is loaded as a <link raw="QQmlComponent" href="qqmlcomponent.html" type="class">QQmlComponent</link> instance rather than placed into a view:</para>
                    <code>#include &lt;QGuiApplication&gt;
#include &lt;QQmlEngine&gt;
#include &lt;QQmlContext&gt;
#include &lt;QQmlComponent&gt;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    QQmlEngine engine;
    QQmlContext *objectContext = new QQmlContext(engine.rootContext());

    QQmlComponent component(&amp;engine, &quot;application.qml&quot;);
    QObject *object = component.create(objectContext);

    // ... delete object and objectContext when necessary

    return app.exec();
}</code>
                    <para>
                        <link raw="QGuiApplication" href="qguiapplication.html" type="class">QGuiApplication</link> can be replaced by a <link raw="QCoreApplication" href="qcoreapplication.html" type="class">QCoreApplication</link> in the code above in case you are not using any graphical items from Qt Quick. This allows using QML as a language without any dependencies to the <link raw="Qt GUI" href="qtgui-index.html" type="page" page="Qt GUI">Qt GUI</link> module.</para>
                    <para>See <link raw="qtqml-cppintegration-data.html" href="qtqml-cppintegration-data.html" type="page" page="Data Type Conversion Between QML and C++">qtqml-cppintegration-exposecppattributes.html</link>{Exposing Attributes of C++ Types to QML} for more information about using <link raw="QQmlEngine" href="qqmlengine.html" type="class">QQmlEngine</link>, <link raw="QQmlContext" href="qqmlcontext.html" type="class">QQmlContext</link> and <link raw="QQmlComponent" href="qqmlcomponent.html" type="class">QQmlComponent</link>, as well as details on including QML files through <link raw="The Qt Resource System" href="resources.html" type="page" page="The Qt Resource System">Qt's Resource system</link>.</para>
                </section>
                <section id="managing-resource-files-with-the-qt-resource-system">
                    <heading level="1">Managing Resource Files with the Qt Resource System</heading>
                    <para>The <link raw="The Qt Resource System" href="resources.html" type="page" page="The Qt Resource System">Qt resource system</link> allows resource files to be stored as binary files in an application executable. This can be useful when building a mixed QML/C++ application as it enables QML files (as well as other resources such as images and sound files) to be referred to through the resource system URI scheme rather than relative or absolute paths to filesystem resources. Note, however, that if you use the resource system, the application executable must be re-compiled whenever a QML source file is changed in order to update the resources in the package.</para>
                    <para>To use the resource system in a mixed QML/C++ application:</para>
                    <list type="bullet">
                        <item>
                            <para>Create a <teletype type="highlighted">.qrc</teletype> <link raw="The Qt Resource System" href="resources.html" type="page" page="The Qt Resource System">resource collection file</link> that lists resource files in XML format</para>
                        </item>
                        <item>
                            <para>From C++, load the main QML file as a resource using the <teletype type="highlighted">:/</teletype> prefix or as a URL with the <teletype type="highlighted">qrc</teletype> scheme</para>
                        </item>
                    </list>
                    <para>Once this is done, all files specified by relative paths in QML will be loaded from the resource system instead. Use of the resource system is completely transparent to the QML layer; this means all QML code should refer to resource files using relative paths and should <italic>not</italic> use the <teletype type="highlighted">qrc</teletype> scheme. This scheme should only be used from C++ code for referring to resource files.</para>
                    <para>Here is a application packaged using the <link raw="The Qt Resource System" href="resources.html" type="page" page="The Qt Resource System">Qt resource system</link>. The directory structure looks like this:</para>
                    <code>project
    |- example.qrc
    |- main.qml
    |- images
        |- background.png
    |- main.cpp
    |- project.pro</code>
                    <para>The <teletype type="highlighted">main.qml</teletype> and <teletype type="highlighted">background.png</teletype> files will be packaged as resource files. This is done in the <teletype type="highlighted">example.qrc</teletype> resource collection file:</para>
                    <quotefile>qmlapp/qtbinding/resources/example.qrc</quotefile>
                    <para>Since <teletype type="highlighted">background.png</teletype> is a resource file, <teletype type="highlighted">main.qml</teletype> can refer to it using the relative path specified in <teletype type="highlighted">example.qrc</teletype>:</para>
                    <snippet location="qmlapp/qtbinding/resources/main.qml" path="C:/Qt/5.11.1/Src/qtdoc/doc/snippets/qmlapp/qtbinding/resources/main.qml" identifier="0"/>
                    <para>To allow QML to locate resource files correctly, the <teletype type="highlighted">main.cpp</teletype> loads the main QML file, <teletype type="highlighted">main.qml</teletype>, as a resource file using the <teletype type="highlighted">qrc</teletype> scheme:</para>
                    <snippet location="qmlapp/qtbinding/resources/main.cpp" path="C:/Qt/5.11.1/Src/qtdoc/doc/snippets/qmlapp/qtbinding/resources/main.cpp" identifier="0"/>
                    <para>Finally, <teletype type="highlighted">project.pro</teletype> uses the RESOURCES variable to indicate that <teletype type="highlighted">example.qrc</teletype> should be used to build the application resources:</para>
                    <quotefile>qmlapp/qtbinding/resources/resources.pro</quotefile>
                    <para>See <link raw="The Qt Resource System" href="resources.html" type="page" page="The Qt Resource System">The Qt Resource System</link> for more information.</para>
                </section>
            </description>
        </page>
    </document>
</WebXML>
