<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <qmlmodule name="QtQuick.LocalStorage" qml-module-name="QtQuick.LocalStorage" qml-module-version="2.11" href="qtquick-localstorage-qmlmodule.html" status="active" seen="true" title="Qt Quick Local Storage QML Types" module="QtQuick" groups="qmlmodules" brief="Provides a JavaScript object singleton type for accessing a local SQLite database">
            <target name="opendatabasesync" title="openDatabaseSync"/>
            <contents name="methods" title="Methods" level="1"/>
            <contents name="detailed-description" title="Detailed Description" level="1"/>
            <contents name="open-or-create-a-database" title="Open or Create a Database" level="3"/>
            <contents name="db-changeversion-from-to-callback-tx" title="db.changeVersion(from, to, callback(tx))" level="3"/>
            <contents name="db-transaction-callback-tx" title="db.transaction(callback(tx))" level="3"/>
            <contents name="db-readtransaction-callback-tx" title="db.readTransaction(callback(tx))" level="3"/>
            <contents name="results-tx-executesql-statement-values" title="results = tx.executeSql(statement, values)" level="3"/>
            <contents name="method-documentation" title="Method Documentation" level="1"/>
            <description path="C:/Qt/5.11.1/Src/qtdeclarative/src/imports/localstorage/plugin.cpp" line="525" column="4">
                <brief>Provides a JavaScript object singleton type for accessing a local SQLite database</brief>
                <para>This is a singleton type for reading and writing to SQLite databases.</para>
                <section id="methods">
                    <heading level="1">Methods</heading>
                    <list type="bullet">
                        <item>
                            <para>object <bold>
                                    <link raw="#openDatabaseSync" href="qtquick-localstorage-qmlmodule.html#opendatabasesync" type="">openDatabaseSync</link>
                                </bold>(string name, string version, string description, int estimated_size, jsobject callback(db))</para>
                        </item>
                    </list>
                </section>
                <section id="detailed-description">
                    <heading level="1">Detailed Description</heading>
                    <para>To use the types in this module, import the module and call the relevant functions using the <teletype type="highlighted">LocalStorage</teletype> type:</para>
                    <code>import QtQuick.LocalStorage 2.0
import QtQuick 2.0

Item {
    Component.onCompleted: {
        var db = LocalStorage.openDatabaseSync(...)
    }
}</code>
                    <para>These databases are user-specific and QML-specific, but accessible to all QML applications. They are stored in the <teletype type="highlighted">Databases</teletype> subdirectory of <link raw="QQmlEngine::offlineStoragePath()" href="qqmlengine.html#offlineStoragePath-prop" type="function">QQmlEngine::offlineStoragePath()</link>, currently as SQLite databases.</para>
                    <para>Database connections are automatically closed during Javascript garbage collection.</para>
                    <para>The API can be used from JavaScript functions in your QML:</para>
                    <snippet location="qml/localstorage/hello.qml" path="C:/Qt/5.11.1/Src/qtdeclarative/src/quick/doc/snippets/qml/localstorage/hello.qml" identifier="0"/>
                    <para>The API conforms to the Synchronous API of the HTML5 Web Database API, W3C Working Draft 29 October 2009.</para>
                    <para>The <link raw="Qt Quick Examples - Local Storage" href="qtquick-localstorage-example.html" type="page" page="Qt Quick Examples - Local Storage">SQL Local Storage example</link> demonstrates the basics of using the Offline Storage API.</para>
                </section>
                <section id="open-or-create-a-database">
                    <heading level="3">Open or Create a Database</heading>
                    <code>import QtQuick.LocalStorage 2.0 as Sql

db = Sql.openDatabaseSync(identifier, version, description, estimated_size, callback(db))</code>
                    <para>The above code returns the database identified by <italic>identifier</italic>. If the database does not already exist, it is created, and the function <italic>callback</italic> is called with the database as a parameter. <italic>identifier</italic> is the name of the physical file (with or without full path) containing the database. <italic>description</italic> and <italic>estimated_size</italic> are written to the INI file (described below), but are currently unused.</para>
                    <para>May throw exception with code property SQLException.DATABASE_ERR, or SQLException.VERSION_ERR.</para>
                    <para>When a database is first created, an INI file is also created specifying its characteristics:</para>
                    <table>
                        <header>
                            <item>
                                <para>
                                    <bold>Key</bold></para>
                            </item>
                            <item>
                                <para>
                                    <bold>Value</bold></para>
                            </item>
                        </header>
                        <row>
                            <item>
                                <para>Identifier</para>
                            </item>
                            <item>
                                <para>The name of the database passed to <teletype type="highlighted">openDatabase()</teletype></para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Version</para>
                            </item>
                            <item>
                                <para>The version of the database passed to <teletype type="highlighted">openDatabase()</teletype></para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Description</para>
                            </item>
                            <item>
                                <para>The description of the database passed to <teletype type="highlighted">openDatabase()</teletype></para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>EstimatedSize</para>
                            </item>
                            <item>
                                <para>The estimated size (in bytes) of the database passed to <teletype type="highlighted">openDatabase()</teletype></para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Driver</para>
                            </item>
                            <item>
                                <para>Currently &quot;QSQLITE&quot;</para>
                            </item>
                        </row>
                    </table>
                    <para>This data can be used by application tools.</para>
                </section>
                <section id="db-changeversion-from-to-callback-tx">
                    <heading level="3">db.changeVersion(from, to, callback(tx))</heading>
                    <para>This method allows you to perform a <italic>Scheme Upgrade</italic>.</para>
                    <para>If the current version of <italic>db</italic> is not <italic>from</italic>, then an exception is thrown.</para>
                    <para>Otherwise, a database transaction is created and passed to <italic>callback</italic>. In this function, you can call <italic>executeSql</italic> on <italic>tx</italic> to upgrade the database.</para>
                    <para>May throw exception with code property SQLException.DATABASE_ERR or SQLException.UNKNOWN_ERR.</para>
                    <para>See example below.</para>
                    <badcode>var db = LocalStorage.openDatabaseSync(&quot;ActivityTrackDB&quot;, &quot;&quot;, &quot;Database tracking sports activities&quot;, 1000000);
if (db.version == &quot;0.1&quot;) {
    db.changeVersion(&quot;0.1&quot;, &quot;0.2&quot;, function(tx) {
        tx.executeSql(&quot;INSERT INTO trip_log VALUES(?, ?, ?)&quot;,
                    [ &quot;01/10/2016&quot;,&quot;Sylling - Vikersund&quot;, &quot;53&quot; ]);
    }
});</badcode>
                </section>
                <section id="db-transaction-callback-tx">
                    <heading level="3">db.transaction(callback(tx))</heading>
                    <para>This method creates a read/write transaction and passed to <italic>callback</italic>. In this function, you can call <italic>executeSql</italic> on <italic>tx</italic> to read and modify the database.</para>
                    <para>If the callback throws exceptions, the transaction is rolled back. Below you will find an example of a database transaction which catches exceptions.</para>
                    <quotefromfile>localstorage/localstorage/Database.js</quotefromfile>
                    <skipuntil>dbInit()</skipuntil>
                    <printto>dbGetHandle</printto>
                    <para>In the example you can see an <teletype type="highlighted">insert</teletype> statement where values are assigned to the fields, and the record is written into the table. That is an <teletype type="highlighted">insert</teletype> statement with a syntax that is usual for a relational database. It is however also possible to work with JSON objects and store them in a table.</para>
                    <para>Let's suppose a simple example where we store trips in JSON format using <teletype type="highlighted">date</teletype> as the unique key. An example of a table that could be used for that purpose:</para>
                    <badcode>create table trip_log(date text, data text)</badcode>
                    <para>The assignment of values to a JSON object:</para>
                    <badcode>var obj = {description = &quot;Vikersund - Noresund&quot;, distance = &quot;60&quot;}</badcode>
                    <para>In that case, the data could be saved in the following way:</para>
                    <badcode>db.transaction(function(tx) {
    result = tx.executeSQL(&quot;insert into trip_log values (?,?)&quot;,
                           [&quot;01/11/2016&quot;, JSON.stringify(obj)])</badcode>
                </section>
                <section id="db-readtransaction-callback-tx">
                    <heading level="3">db.readTransaction(callback(tx))</heading>
                    <para>This method creates a read-only transaction and passed to <italic>callback</italic>. In this function, you can call <italic>executeSql</italic> on <italic>tx</italic> to read the database (with <teletype type="highlighted">select</teletype> statements).</para>
                </section>
                <section id="results-tx-executesql-statement-values">
                    <heading level="3">results = tx.executeSql(statement, values)</heading>
                    <para>This method executes an SQL <italic>statement</italic>, binding the list of <italic>values</italic> to SQL positional parameters (&quot;?&quot;).</para>
                    <para>It returns a results object, with the following properties:</para>
                    <table>
                        <header>
                            <item>
                                <para>
                                    <bold>Type</bold></para>
                            </item>
                            <item>
                                <para>
                                    <bold>Property</bold></para>
                            </item>
                            <item>
                                <para>
                                    <bold>Value</bold></para>
                            </item>
                            <item>
                                <para>
                                    <bold>Applicability</bold></para>
                            </item>
                        </header>
                        <row>
                            <item>
                                <para>int</para>
                            </item>
                            <item>
                                <para>rows.length</para>
                            </item>
                            <item>
                                <para>The number of rows in the result</para>
                            </item>
                            <item>
                                <para>SELECT</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>var</para>
                            </item>
                            <item>
                                <para>rows.item(i)</para>
                            </item>
                            <item>
                                <para>Function that returns row <italic>i</italic> of the result</para>
                            </item>
                            <item>
                                <para>SELECT</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>int</para>
                            </item>
                            <item>
                                <para>rowsAffected</para>
                            </item>
                            <item>
                                <para>The number of rows affected by a modification</para>
                            </item>
                            <item>
                                <para>UPDATE, DELETE</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>string</para>
                            </item>
                            <item>
                                <para>insertId</para>
                            </item>
                            <item>
                                <para>The id of the row inserted</para>
                            </item>
                            <item>
                                <para>INSERT</para>
                            </item>
                        </row>
                    </table>
                    <para>May throw exception with code property SQLException.DATABASE_ERR, SQLException.SYNTAX_ERR, or SQLException.UNKNOWN_ERR.</para>
                    <para>See below for an example:</para>
                    <quotefromfile>localstorage/localstorage/Database.js</quotefromfile>
                    <skipto>dbReadAll()</skipto>
                    <printto>dbUpdate(Pdate</printto>
                </section>
                <section id="method-documentation">
                    <heading level="1">Method Documentation</heading>
                    <target name="opendatabasesync"/>
                    <code>object openDatabaseSync(string name, string version, string description, int estimated_size, jsobject callback(db))</code>
                    <para>Opens or creates a local storage sql database by the given parameters.</para>
                    <list type="bullet">
                        <item>
                            <para>
                                <teletype type="highlighted">name</teletype> is the database name</para>
                        </item>
                        <item>
                            <para>
                                <teletype type="highlighted">version</teletype> is the database version</para>
                        </item>
                        <item>
                            <para>
                                <teletype type="highlighted">description</teletype> is the database display name</para>
                        </item>
                        <item>
                            <para>
                                <teletype type="highlighted">estimated_size</teletype> is the database's estimated size, in bytes</para>
                        </item>
                        <item>
                            <para>
                                <teletype type="highlighted">callback</teletype> is an optional parameter, which is invoked if the database has not yet been created.</para>
                        </item>
                    </list>
                    <para>Returns the created database object.</para>
                </section>
            </description>
        </qmlmodule>
    </document>
</WebXML>
