<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.2">
   <db:info>
      <db:title>Qt3DCore</db:title>
      <db:abstract>
         <db:para>Contains classes that are the foundation for Qt 3D simulation framework, as well as classes that provide the ability to render using the Qt 3D framework</db:para>
      </db:abstract>
      <db:pubdate>2018-09-09+02:00</db:pubdate>
      <db:date>2018-09-09+02:00</db:date>
      <db:productname>Qt</db:productname>
      <db:productnumber>1.2</db:productnumber>
   </db:info>
   <db:namespacesynopsis>
      <db:namespace>
         <db:namespacename>Qt3DCore</db:namespacename>
      </db:namespace>
      <db:namespacesynopsisinfo role="module">Qt3DCore</db:namespacesynopsisinfo>
      <db:namespacesynopsisinfo role="headers">#include &lt;qnodeid.h&gt;</db:namespacesynopsisinfo>
   </db:namespacesynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>Contains classes that are the foundation for Qt 3D simulation framework, as well as classes that provide the ability to render using the Qt 3D framework.</db:para>
   </db:section>
   <db:section>
      <db:title>Namespaces</db:title>
      <db:section>
         <db:title>namespace Qt3DCore::Quick</db:title>
         <db:namespacesynopsis>
            <db:namespace>
               <db:namespacename>Quick</db:namespacename>
            </db:namespace>
            <db:namespacesynopsisinfo role="module">Qt3DCore</db:namespacesynopsisinfo>
            <db:namespacesynopsisinfo role="headers">#include &lt;qqmlaspectengine.h&gt;</db:namespacesynopsisinfo>
         </db:namespacesynopsis>
         <db:para>Contains classes used for implementing QML functionality into Qt3D applications.</db:para>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Member Types Documentation</db:title>
      <db:section>
         <db:title>Qt3DCore::QAbstractAspect</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QAbstractAspect</db:ooclass>
            <db:fieldsynopsis>
               <db:type>const QMetaObject</db:type>
               <db:varname>staticMetaObject</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>metaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>void *</db:type>
               <db:methodname>qt_metacast</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>int</db:type>
               <db:methodname>qt_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>tr</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>trUtf8</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>static</db:modifier>
               <db:void/>
               <db:methodname>qt_static_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QAbstractAspect</db:methodname>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>~QAbstractAspect</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>scheduleSingleShotJob</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QAspectJobPtr &amp;</db:type>
                  <db:parameter>job</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QAbstractAspect</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QAbstractAspectPrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>Qt3DCore::QNodeId</db:type>
               <db:methodname>rootEntityId</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:void/>
               <db:methodname>registerBackendType</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QBackendNodeMapperPtr &amp;</db:type>
                  <db:parameter>functor</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:void/>
               <db:methodname>registerBackendType</db:methodname>
               <db:methodparam>
                  <db:type>const QMetaObject &amp;</db:type>
                  <db:parameter>obj</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const Qt3DCore::QBackendNodeMapperPtr &amp;</db:type>
                  <db:parameter>functor</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:void/>
               <db:methodname>unregisterBackendType</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:void/>
               <db:methodname>unregisterBackendType</db:methodname>
               <db:methodparam>
                  <db:type>const QMetaObject &amp;</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>QVariant</db:type>
               <db:methodname>executeCommand</db:methodname>
               <db:methodparam>
                  <db:type>const QStringList &amp;</db:type>
                  <db:parameter>args</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>QVector&lt;Qt3DCore::QAspectJobPtr&gt;</db:type>
               <db:methodname>jobsToExecute</db:methodname>
               <db:methodparam>
                  <db:type>qint64</db:type>
                  <db:parameter>time</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:void/>
               <db:methodname>onRegistered</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:void/>
               <db:methodname>onUnregistered</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:void/>
               <db:methodname>onEngineStartup</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:void/>
               <db:methodname>onEngineShutdown</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QAbstractAspectPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QAbstractAspectPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>
            <db:code><db:link xlink:href="qt3dcore-qabstractaspect.html" xrefstyle="class" annotations="QAbstractAspect">QAbstractAspect</db:link></db:code> is the base class for aspects that provide a vertical slice of behavior.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QAbstractSkeleton</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QAbstractSkeleton</db:ooclass>
            <db:fieldsynopsis>
               <db:type>const QMetaObject</db:type>
               <db:varname>staticMetaObject</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>metaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>void *</db:type>
               <db:methodname>qt_metacast</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>int</db:type>
               <db:methodname>qt_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>tr</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>trUtf8</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>static</db:modifier>
               <db:void/>
               <db:methodname>qt_static_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:destructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>~QAbstractSkeleton</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>int</db:type>
               <db:methodname>jointCount</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>jointCountChanged</db:methodname>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>jointCount</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QAbstractSkeleton</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QAbstractSkeletonPrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:modifier>override</db:modifier>
               <db:void/>
               <db:methodname>sceneChangeEvent</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QSceneChangePtr &amp;</db:type>
                  <db:parameter>change</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QAbstractSkeletonPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QAbstractSkeletonPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>int</db:type>
               <db:varname>jointCount</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>int</db:type>
               <db:methodname>jointCount</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>A skeleton contains the joints for a skinned mesh</db:para>
         <db:para>Do not use this class directly. You should use <db:code><db:link xlink:href="qt3dcore-qskeletonloader.html" xrefstyle="class" annotations="QSkeletonLoader">QSkeletonLoader</db:link></db:code> if loading skeleton data from a file (most likely) or <db:code><db:link xlink:href="qt3dcore-qskeleton.html" xrefstyle="class" annotations="QSkeleton">QSkeleton</db:link></db:code> if creating the skeleton and skinned mesh data yourself (mainly for people creating editors or tooling).</db:para>
         <db:para>This class was introduced in Qt 5.10.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QArmature</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QArmature</db:ooclass>
            <db:fieldsynopsis>
               <db:type>const QMetaObject</db:type>
               <db:varname>staticMetaObject</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>metaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>void *</db:type>
               <db:methodname>qt_metacast</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>int</db:type>
               <db:methodname>qt_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>tr</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>trUtf8</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>static</db:modifier>
               <db:void/>
               <db:methodname>qt_static_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QArmature</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>~QArmature</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QAbstractSkeleton *</db:type>
               <db:methodname>skeleton</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setSkeleton</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QAbstractSkeleton *</db:type>
                  <db:parameter>skeleton</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>skeletonChanged</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QAbstractSkeleton *</db:type>
                  <db:parameter>skeleton</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QArmature</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QArmaturePrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QArmaturePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QArmaturePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>override</db:modifier>
               <db:type>Qt3DCore::QNodeCreatedChangeBasePtr</db:type>
               <db:methodname>createNodeCreationChange</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>Qt3DCore::QAbstractSkeleton*</db:type>
               <db:varname>skeleton</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>Qt3DCore::QAbstractSkeleton*</db:type>
               <db:methodname>skeleton</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setSkeleton</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QAbstractSkeleton*</db:type>
                  <db:parameter>skeleton</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>Used to calculate skinning transform matrices and set them on shaders</db:para>
         <db:para>The Armature component is aggregated by entities to give them the ability to calculate the palette of skinning transform matrices needed to properly render skinned meshes.</db:para>
         <db:para>Each vertex in a skinned mesh is associated (bound) to up to 4 joints in a skeleton. For each joint affecting a vertex the mesh also provides a weight which determines the level of influence of the corresponding joint. The skinning palette used for performing the transformation of skinned vertices is provided by the Armature and is calculated from the joints contained in the referenced skeleton.</db:para>
         <db:para>Updating the local transform of a joint results in the skinning matrices being recalculated and the skinned mesh vertices bound to that joint moving accordingly.</db:para>
         <db:para>This class was introduced in Qt 5.10.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QAspectEngine</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QAspectEngine</db:ooclass>
            <db:fieldsynopsis>
               <db:type>const QMetaObject</db:type>
               <db:varname>staticMetaObject</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>metaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>void *</db:type>
               <db:methodname>qt_metacast</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>int</db:type>
               <db:methodname>qt_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>tr</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>trUtf8</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>static</db:modifier>
               <db:void/>
               <db:methodname>qt_static_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QAspectEngine</db:methodname>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QAspectEngine</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setRootEntity</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QEntityPtr</db:type>
                  <db:parameter>root</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QEntityPtr</db:type>
               <db:methodname>rootEntity</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>registerAspect</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QAbstractAspect *</db:type>
                  <db:parameter>aspect</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>registerAspect</db:methodname>
               <db:methodparam>
                  <db:type>const QString &amp;</db:type>
                  <db:parameter>name</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>unregisterAspect</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QAbstractAspect *</db:type>
                  <db:parameter>aspect</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>unregisterAspect</db:methodname>
               <db:methodparam>
                  <db:type>const QString &amp;</db:type>
                  <db:parameter>name</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QVector&lt;Qt3DCore::QAbstractAspect *&gt;</db:type>
               <db:methodname>aspects</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QVariant</db:type>
               <db:methodname>executeCommand</db:methodname>
               <db:methodparam>
                  <db:type>const QString &amp;</db:type>
                  <db:parameter>command</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QAspectEnginePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QAspectEnginePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>Responsible for handling all the <db:code><db:link xlink:href="qt3dcore-qabstractaspect.html" xrefstyle="class" annotations="QAbstractAspect">QAbstractAspect</db:link></db:code> subclasses that have been registered with the scene.</db:para>
         <db:para>The Qt3D run loop is controlled by the Qt3DRender::QAspectEngine.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qt3dcore-qabstractaspect.html" xrefstyle="class" annotations="Qt3DCore::QAbstractAspect">Qt3DCore::QAbstractAspect</db:link></db:code> subclasses can be registered by calling Qt3DCore::QAspectEngine::registerAspect() which will take care of registering the aspect and in turn that will call Qt3DCore::QAbstractAspect::onRegistered();</db:para>
         <db:para>The simulation loop is launched as soon as a root <db:code><db:link xlink:href="qt3dcore-qentity.html" xrefstyle="class" annotations="Qt3DCore::QEntity">Qt3DCore::QEntity</db:link></db:code> is set on the <db:code><db:link xlink:href="qt3dcore-qaspectengine.html" xrefstyle="class" annotations="Qt3DCore::QAspectEngine">Qt3DCore::QAspectEngine</db:link></db:code>. This is followed by a call to onEngineStartup() on each aspect so that they can start their simulation work.</db:para>
         <db:para>The simulation loop is stopped when the root entity is set to Qt3DCore::QEntityPtr(). This calls onEngineShutdown() on each aspect so that they can stop performing their simulation work.</db:para>
         <db:para>Setting a new valid root entity would restart the simulation loop again.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QAspectJob</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QAspectJob</db:ooclass>
            <db:fieldsynopsis>
               <db:type>Qt3DCore::QAspectJobPrivate *</db:type>
               <db:varname>d_ptr</db:varname>
            </db:fieldsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QAspectJob</db:methodname>
               <db:void/>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QAspectJob</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>addDependency</db:methodname>
               <db:methodparam>
                  <db:type>QWeakPointer&lt;Qt3DCore::QAspectJob&gt;</db:type>
                  <db:parameter>dependency</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>removeDependency</db:methodname>
               <db:methodparam>
                  <db:type>QWeakPointer&lt;Qt3DCore::QAspectJob&gt;</db:type>
                  <db:parameter>dependency</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QVector&lt;QWeakPointer&lt;Qt3DCore::QAspectJob&gt; &gt;</db:type>
               <db:methodname>dependencies</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>run</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QAspectJob</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QAspectJobPrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QAspectJob</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QAspectJob &amp;</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QAspectJob &amp;</db:type>
               <db:methodname>operator=</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QAspectJob &amp;</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QAspectJobPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QAspectJobPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>The base class for jobs executed in an aspect</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QBackendNode</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QBackendNode</db:ooclass>
            <db:fieldsynopsis>
               <db:type>Qt3DCore::QBackendNodePrivate *</db:type>
               <db:varname>d_ptr</db:varname>
            </db:fieldsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QBackendNode</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QBackendNode::Mode</db:type>
                  <db:parameter>mode</db:parameter>
                  <db:initializer>ReadOnly</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QBackendNode</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNodeId</db:type>
               <db:methodname>peerId</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setEnabled</db:methodname>
               <db:methodparam>
                  <db:type>bool</db:type>
                  <db:parameter>enabled</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>bool</db:type>
               <db:methodname>isEnabled</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QBackendNode::Mode</db:type>
               <db:methodname>mode</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>Qt3DCore::QBackendNodePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>const Qt3DCore::QBackendNodePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QBackendNode</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QBackendNodePrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:void/>
               <db:methodname>notifyObservers</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QSceneChangePtr &amp;</db:type>
                  <db:parameter>e</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>QNodeCommand::CommandId</db:type>
               <db:methodname>sendCommand</db:methodname>
               <db:methodparam>
                  <db:type>const QString &amp;</db:type>
                  <db:parameter>name</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const QVariant &amp;</db:type>
                  <db:parameter>data</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>QNodeCommand::CommandId</db:type>
                  <db:parameter>replyTo</db:parameter>
                  <db:initializer>QNodeCommand::CommandId()</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:void/>
               <db:methodname>sendReply</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QNodeCommandPtr &amp;</db:type>
                  <db:parameter>command</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:void/>
               <db:methodname>sceneChangeEvent</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QSceneChangePtr &amp;</db:type>
                  <db:parameter>e</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QBackendNode</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QBackendNode &amp;</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QBackendNode &amp;</db:type>
               <db:methodname>operator=</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QBackendNode &amp;</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:void/>
               <db:methodname>setPeerId</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>id</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:void/>
               <db:methodname>initializeFromPeer</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QNodeCreatedChangeBasePtr &amp;</db:type>
                  <db:parameter>change</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:enumsynopsis>
               <db:enumname>Qt3DCore::QBackendNode::Mode</db:enumname>
               <db:enumitem>
                  <db:enumidentifier>ReadOnly</db:enumidentifier>
                  <db:enumvalue>0</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>ReadWrite</db:enumidentifier>
                  <db:enumvalue>1</db:enumvalue>
               </db:enumitem>
            </db:enumsynopsis>
         </db:classsynopsis>
         <db:para>The base class for all Qt3D backend nodes</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QBackendNodeMapper</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QBackendNodeMapper</db:ooclass>
            <db:destructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>~QBackendNodeMapper</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QBackendNode *</db:type>
               <db:methodname>create</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QNodeCreatedChangeBasePtr &amp;</db:type>
                  <db:parameter>change</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QBackendNode *</db:type>
               <db:methodname>get</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>id</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>destroy</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>id</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>Creates and maps backend nodes to their respective frontend nodes</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QComponent</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QComponent</db:ooclass>
            <db:fieldsynopsis>
               <db:type>const QMetaObject</db:type>
               <db:varname>staticMetaObject</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>metaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>void *</db:type>
               <db:methodname>qt_metacast</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>int</db:type>
               <db:methodname>qt_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>tr</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>trUtf8</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>static</db:modifier>
               <db:void/>
               <db:methodname>qt_static_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QComponent</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QComponent</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>bool</db:type>
               <db:methodname>isShareable</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QVector&lt;Qt3DCore::QEntity *&gt;</db:type>
               <db:methodname>entities</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setShareable</db:methodname>
               <db:methodparam>
                  <db:type>bool</db:type>
                  <db:parameter>isShareable</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>shareableChanged</db:methodname>
               <db:methodparam>
                  <db:type>bool</db:type>
                  <db:parameter>isShareable</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>addedToEntity</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QEntity *</db:type>
                  <db:parameter>entity</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>removedFromEntity</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QEntity *</db:type>
                  <db:parameter>entity</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QComponent</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QComponentPrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QComponentPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QComponentPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>bool</db:type>
               <db:varname>isShareable</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>bool</db:type>
               <db:methodname>isShareable</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setShareable</db:methodname>
               <db:methodparam>
                  <db:type>bool</db:type>
                  <db:parameter>isShareable</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>The base class of scene nodes that can be aggregated by <db:code><db:link xlink:href="qt3dcore-qentity.html" xrefstyle="class" annotations="Qt3DCore::QEntity">Qt3DCore::QEntity</db:link></db:code> instances as a component.</db:para>
         <db:para>A <db:code><db:link xlink:href="qt3dcore-qcomponent.html" xrefstyle="class" annotations="Qt3DCore::QComponent">Qt3DCore::QComponent</db:link></db:code> provides a vertical slice of behavior that can be assigned to and sometimes shared across <db:code><db:link xlink:href="qt3dcore-qentity.html" xrefstyle="class" annotations="Qt3DCore::QEntity">Qt3DCore::QEntity</db:link></db:code> instances.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qt3dcore-qcomponent.html" xrefstyle="class" annotations="Qt3DCore::QComponent">Qt3DCore::QComponent</db:link></db:code> subclasses are often aggregated in groups that impart useful behavior to the aggregating entity. For example, to have an Entity that gets drawn by the Qt3D renderer aspect, an entity would most likely aggregate <db:code><db:link xlink:href="qt3dcore-qtransform.html" xrefstyle="class" annotations="Qt3DCore::QTransform">Qt3DCore::QTransform</db:link></db:code>, <db:code><db:link xlink:href="qt3drender-qmesh.html" xrefstyle="class" annotations="Qt3DRender::QMesh">Qt3DRender::QMesh</db:link></db:code>, and <db:code><db:link xlink:href="qt3drender-qmaterial.html" xrefstyle="class" annotations="Qt3DRender::QMaterial">Qt3DRender::QMaterial</db:link></db:code> components.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qt3dcore-qentity.html" xrefstyle="class" annotations="Qt3DCore::QEntity">Qt3DCore::QEntity</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This class was introduced in Qt 5.5.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QComponentAddedChange</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QComponentAddedChange</db:ooclass>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QComponentAddedChange</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QEntity *</db:type>
                  <db:parameter>entity</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const Qt3DCore::QComponent *</db:type>
                  <db:parameter>component</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QComponentAddedChange</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QComponent *</db:type>
                  <db:parameter>component</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const Qt3DCore::QEntity *</db:type>
                  <db:parameter>entity</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QComponentAddedChange</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNodeId</db:type>
               <db:methodname>entityId</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNodeId</db:type>
               <db:methodname>componentId</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>componentMetaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QComponentAddedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QComponentAddedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qcomponentaddedchange.html" xrefstyle="class" annotations="QComponentAddedChange">QComponentAddedChange</db:link></db:code> class is used to notify when a component is added to an entity</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QComponentRemovedChange</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QComponentRemovedChange</db:ooclass>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QComponentRemovedChange</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QEntity *</db:type>
                  <db:parameter>entity</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const Qt3DCore::QComponent *</db:type>
                  <db:parameter>component</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QComponentRemovedChange</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QComponent *</db:type>
                  <db:parameter>component</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const Qt3DCore::QEntity *</db:type>
                  <db:parameter>entity</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QComponentRemovedChange</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNodeId</db:type>
               <db:methodname>entityId</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNodeId</db:type>
               <db:methodname>componentId</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>componentMetaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QComponentRemovedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QComponentRemovedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qcomponentremovedchange.html" xrefstyle="class" annotations="QComponentRemovedChange">QComponentRemovedChange</db:link></db:code> class is used to notify when a component is removed from an entity</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QDynamicPropertyUpdatedChange</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QDynamicPropertyUpdatedChange</db:ooclass>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QDynamicPropertyUpdatedChange</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QDynamicPropertyUpdatedChange</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QByteArray</db:type>
               <db:methodname>propertyName</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setPropertyName</db:methodname>
               <db:methodparam>
                  <db:type>const QByteArray &amp;</db:type>
                  <db:parameter>name</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QVariant</db:type>
               <db:methodname>value</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setValue</db:methodname>
               <db:methodparam>
                  <db:type>const QVariant &amp;</db:type>
                  <db:parameter>value</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>Qt3DCore::QDynamicPropertyUpdatedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>const Qt3DCore::QDynamicPropertyUpdatedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>protected</db:modifier>
               <db:methodname>QDynamicPropertyUpdatedChange</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QDynamicPropertyUpdatedChangePrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
         </db:classsynopsis>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qdynamicpropertyupdatedchange.html" xrefstyle="class" annotations="QDynamicPropertyUpdatedChange">QDynamicPropertyUpdatedChange</db:link></db:code> class is used to notify when a dynamic property value is updated</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QEntity</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QEntity</db:ooclass>
            <db:fieldsynopsis>
               <db:type>const QMetaObject</db:type>
               <db:varname>staticMetaObject</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>metaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>void *</db:type>
               <db:methodname>qt_metacast</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>int</db:type>
               <db:methodname>qt_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>tr</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>trUtf8</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>static</db:modifier>
               <db:void/>
               <db:methodname>qt_static_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QEntity</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QEntity</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QComponentVector</db:type>
               <db:methodname>components</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>addComponent</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QComponent *</db:type>
                  <db:parameter>comp</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>removeComponent</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QComponent *</db:type>
                  <db:parameter>comp</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QEntity *</db:type>
               <db:methodname>parentEntity</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QEntity</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QEntityPrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QEntityPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QEntityPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>override</db:modifier>
               <db:type>Qt3DCore::QNodeCreatedChangeBasePtr</db:type>
               <db:methodname>createNodeCreationChange</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>
            <db:code><db:link xlink:href="qt3dcore-qentity.html" xrefstyle="class" annotations="Qt3DCore::QEntity">Qt3DCore::QEntity</db:link></db:code> is a <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="Qt3DCore::QNode">Qt3DCore::QNode</db:link></db:code> subclass that can aggregate several <db:code><db:link xlink:href="qt3dcore-qcomponent.html" xrefstyle="class" annotations="Qt3DCore::QComponent">Qt3DCore::QComponent</db:link></db:code> instances that will specify its behavior.</db:para>
         <db:para>By itself a <db:code><db:link xlink:href="qt3dcore-qentity.html" xrefstyle="class" annotations="Qt3DCore::QEntity">Qt3DCore::QEntity</db:link></db:code> is an empty shell. The behavior of a <db:code><db:link xlink:href="qt3dcore-qentity.html" xrefstyle="class" annotations="Qt3DCore::QEntity">Qt3DCore::QEntity</db:link></db:code> object is defined by the <db:code><db:link xlink:href="qt3dcore-qcomponent.html" xrefstyle="class" annotations="Qt3DCore::QComponent">Qt3DCore::QComponent</db:link></db:code> objects it references. Each Qt3D backend aspect will be able to interpret and process an Entity by recognizing which components it is made up of. One aspect may decide to only process entities composed of a single <db:code><db:link xlink:href="qt3dcore-qtransform.html" xrefstyle="class" annotations="Qt3DCore::QTransform">Qt3DCore::QTransform</db:link></db:code> component whilst another may focus on <db:code><db:link xlink:href="qt3dinput-qmousehandler.html" xrefstyle="class" annotations="Qt3DInput::QMouseHandler">Qt3DInput::QMouseHandler</db:link></db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qt3dcore-qcomponent.html" xrefstyle="class" annotations="Qt3DCore::QComponent">Qt3DCore::QComponent</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qt3dcore-qtransform.html" xrefstyle="class" annotations="Qt3DCore::QTransform">Qt3DCore::QTransform</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This class was introduced in Qt 5.5.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QJoint</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QJoint</db:ooclass>
            <db:fieldsynopsis>
               <db:type>const QMetaObject</db:type>
               <db:varname>staticMetaObject</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>metaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>void *</db:type>
               <db:methodname>qt_metacast</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>int</db:type>
               <db:methodname>qt_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>tr</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>trUtf8</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>static</db:modifier>
               <db:void/>
               <db:methodname>qt_static_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QJoint</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>~QJoint</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QVector3D</db:type>
               <db:methodname>scale</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QQuaternion</db:type>
               <db:methodname>rotation</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QVector3D</db:type>
               <db:methodname>translation</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QMatrix4x4</db:type>
               <db:methodname>inverseBindMatrix</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>float</db:type>
               <db:methodname>rotationX</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>float</db:type>
               <db:methodname>rotationY</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>float</db:type>
               <db:methodname>rotationZ</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>name</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>addChildJoint</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QJoint *</db:type>
                  <db:parameter>joint</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>removeChildJoint</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QJoint *</db:type>
                  <db:parameter>joint</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QVector&lt;Qt3DCore::QJoint *&gt;</db:type>
               <db:methodname>childJoints</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setScale</db:methodname>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>scale</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setRotation</db:methodname>
               <db:methodparam>
                  <db:type>const QQuaternion &amp;</db:type>
                  <db:parameter>rotation</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setTranslation</db:methodname>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>translation</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setInverseBindMatrix</db:methodname>
               <db:methodparam>
                  <db:type>const QMatrix4x4 &amp;</db:type>
                  <db:parameter>inverseBindMatrix</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setRotationX</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationX</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setRotationY</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationY</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setRotationZ</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationZ</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setName</db:methodname>
               <db:methodparam>
                  <db:type>const QString &amp;</db:type>
                  <db:parameter>name</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setToIdentity</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>scaleChanged</db:methodname>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>scale</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>rotationChanged</db:methodname>
               <db:methodparam>
                  <db:type>const QQuaternion &amp;</db:type>
                  <db:parameter>rotation</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>translationChanged</db:methodname>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>translation</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>inverseBindMatrixChanged</db:methodname>
               <db:methodparam>
                  <db:type>const QMatrix4x4 &amp;</db:type>
                  <db:parameter>inverseBindMatrix</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>rotationXChanged</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationX</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>rotationYChanged</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationY</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>rotationZChanged</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationZ</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>nameChanged</db:methodname>
               <db:methodparam>
                  <db:type>const QString &amp;</db:type>
                  <db:parameter>name</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QJointPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QJointPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>override</db:modifier>
               <db:type>Qt3DCore::QNodeCreatedChangeBasePtr</db:type>
               <db:methodname>createNodeCreationChange</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>QVector3D</db:type>
               <db:varname>scale</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>QVector3D</db:type>
               <db:methodname>scale</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setScale</db:methodname>
               <db:methodparam>
                  <db:type>QVector3D</db:type>
                  <db:parameter>scale</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>QQuaternion</db:type>
               <db:varname>rotation</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>QQuaternion</db:type>
               <db:methodname>rotation</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setRotation</db:methodname>
               <db:methodparam>
                  <db:type>QQuaternion</db:type>
                  <db:parameter>rotation</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>QVector3D</db:type>
               <db:varname>translation</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>QVector3D</db:type>
               <db:methodname>translation</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setTranslation</db:methodname>
               <db:methodparam>
                  <db:type>QVector3D</db:type>
                  <db:parameter>translation</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>QMatrix4x4</db:type>
               <db:varname>inverseBindMatrix</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>QMatrix4x4</db:type>
               <db:methodname>inverseBindMatrix</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setInverseBindMatrix</db:methodname>
               <db:methodparam>
                  <db:type>QMatrix4x4</db:type>
                  <db:parameter>inverseBindMatrix</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>float</db:type>
               <db:varname>rotationX</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>float</db:type>
               <db:methodname>rotationX</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setRotationX</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationX</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>float</db:type>
               <db:varname>rotationY</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>float</db:type>
               <db:methodname>rotationY</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setRotationY</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationY</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>float</db:type>
               <db:varname>rotationZ</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>float</db:type>
               <db:methodname>rotationZ</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setRotationZ</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationZ</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>QString</db:type>
               <db:varname>name</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>QString</db:type>
               <db:methodname>name</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setName</db:methodname>
               <db:methodparam>
                  <db:type>QString</db:type>
                  <db:parameter>name</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>Used to transforms parts of skinned meshes</db:para>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qjoint.html" xrefstyle="class" annotations="QJoint">QJoint</db:link></db:code> node is used to build skeletons as part of the skinned mesh support in Qt 3D. A joint can be transformed by way of its scale, rotation and translation properties. Any mesh vertices that are bound to the joint will have their transformations updated accordingly.</db:para>
         <db:para>This class was introduced in Qt 5.10.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QNode</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QNode</db:ooclass>
            <db:fieldsynopsis>
               <db:type>const QMetaObject</db:type>
               <db:varname>staticMetaObject</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>metaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>void *</db:type>
               <db:methodname>qt_metacast</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>int</db:type>
               <db:methodname>qt_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>tr</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>trUtf8</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>static</db:modifier>
               <db:void/>
               <db:methodname>qt_static_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QNode</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>~QNode</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNodeId</db:type>
               <db:methodname>id</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNode *</db:type>
               <db:methodname>parentNode</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>bool</db:type>
               <db:methodname>notificationsBlocked</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>bool</db:type>
               <db:methodname>blockNotifications</db:methodname>
               <db:methodparam>
                  <db:type>bool</db:type>
                  <db:parameter>block</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNodeVector</db:type>
               <db:methodname>childNodes</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>bool</db:type>
               <db:methodname>isEnabled</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNode::PropertyTrackingMode</db:type>
               <db:methodname>defaultPropertyTrackingMode</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setPropertyTracking</db:methodname>
               <db:methodparam>
                  <db:type>const QString &amp;</db:type>
                  <db:parameter>propertyName</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode::PropertyTrackingMode</db:type>
                  <db:parameter>trackMode</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNode::PropertyTrackingMode</db:type>
               <db:methodname>propertyTracking</db:methodname>
               <db:methodparam>
                  <db:type>const QString &amp;</db:type>
                  <db:parameter>propertyName</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>clearPropertyTracking</db:methodname>
               <db:methodparam>
                  <db:type>const QString &amp;</db:type>
                  <db:parameter>propertyName</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>clearPropertyTrackings</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QNodeCommand::CommandId</db:type>
               <db:methodname>sendCommand</db:methodname>
               <db:methodparam>
                  <db:type>const QString &amp;</db:type>
                  <db:parameter>name</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const QVariant &amp;</db:type>
                  <db:parameter>data</db:parameter>
                  <db:initializer>QVariant()</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>QNodeCommand::CommandId</db:type>
                  <db:parameter>replyTo</db:parameter>
                  <db:initializer>QNodeCommand::CommandId()</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>sendReply</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QNodeCommandPtr &amp;</db:type>
                  <db:parameter>command</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setParent</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setEnabled</db:methodname>
               <db:methodparam>
                  <db:type>bool</db:type>
                  <db:parameter>isEnabled</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setDefaultPropertyTrackingMode</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode::PropertyTrackingMode</db:type>
                  <db:parameter>mode</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>parentChanged</db:methodname>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter>parent</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>enabledChanged</db:methodname>
               <db:methodparam>
                  <db:type>bool</db:type>
                  <db:parameter>enabled</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>defaultPropertyTrackingModeChanged</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode::PropertyTrackingMode</db:type>
                  <db:parameter>mode</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>nodeDestroyed</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QNode</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodePrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:void/>
               <db:methodname>notifyObservers</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QSceneChangePtr &amp;</db:type>
                  <db:parameter>change</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:void/>
               <db:methodname>sceneChangeEvent</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QSceneChangePtr &amp;</db:type>
                  <db:parameter>change</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QNodePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QNodePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QNodeCreatedChangeBasePtr</db:type>
               <db:methodname>createNodeCreationChange</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:void/>
               <db:methodname>setParent</db:methodname>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNodeId</db:type>
               <db:methodname>qIdForNode</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>node</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNodeIdVector</db:type>
               <db:methodname>qIdsForNodes</db:methodname>
               <db:methodparam>
                  <db:type>const T &amp;</db:type>
                  <db:parameter>nodes</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:enumsynopsis>
               <db:enumname>Qt3DCore::QNode::PropertyTrackingMode</db:enumname>
               <db:enumitem>
                  <db:enumidentifier>TrackFinalValues</db:enumidentifier>
                  <db:enumvalue>0</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>DontTrackValues</db:enumidentifier>
                  <db:enumvalue>1</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>TrackAllValues</db:enumidentifier>
                  <db:enumvalue>2</db:enumvalue>
               </db:enumitem>
            </db:enumsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>Qt3DCore::QNode*</db:type>
               <db:varname>parent</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>Qt3DCore::QNode*</db:type>
               <db:methodname>parentNode</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setParent</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode*</db:type>
                  <db:parameter>parent</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>bool</db:type>
               <db:varname>enabled</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>bool</db:type>
               <db:methodname>isEnabled</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setEnabled</db:methodname>
               <db:methodparam>
                  <db:type>bool</db:type>
                  <db:parameter>enabled</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>PropertyTrackingMode</db:type>
               <db:varname>defaultPropertyTrackingMode</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>PropertyTrackingMode</db:type>
               <db:methodname>defaultPropertyTrackingMode</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setDefaultPropertyTrackingMode</db:methodname>
               <db:methodparam>
                  <db:type>PropertyTrackingMode</db:type>
                  <db:parameter>defaultPropertyTrackingMode</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>
            <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> is the base class of all Qt3D node classes used to build a Qt3D scene.</db:para>
         <db:para>The owernship of <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> is determined by the <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> parent/child relationship between nodes. By itself, a <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> has no visual appearance and no particular meaning, it is there as a way of building a node based tree structure.</db:para>
         <db:para>The parent of a <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> instance can only be another <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> instance.</db:para>
         <db:para>Each <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> instance has a unique id that allows it to be recognizable from other instances.</db:para>
         <db:para>When properties are defined on a <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> subclass, their NOTIFY signal will automatically generate notifications that the Qt3D backend aspects will receive.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qt3dcore-qentity.html" xrefstyle="class" annotations="QEntity">QEntity</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qt3dcore-qcomponent.html" xrefstyle="class" annotations="QComponent">QComponent</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This class was introduced in Qt 5.5.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QNodeCommand</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QNodeCommand</db:ooclass>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QNodeCommand</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>id</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QNodeCommand</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNodeCommand::CommandId</db:type>
               <db:methodname>commandId</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>name</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setName</db:methodname>
               <db:methodparam>
                  <db:type>const QString &amp;</db:type>
                  <db:parameter>name</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QVariant</db:type>
               <db:methodname>data</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setData</db:methodname>
               <db:methodparam>
                  <db:type>const QVariant &amp;</db:type>
                  <db:parameter>data</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNodeCommand::CommandId</db:type>
               <db:methodname>inReplyTo</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setReplyToCommandId</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeCommand::CommandId</db:type>
                  <db:parameter>id</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>protected</db:modifier>
               <db:methodname>QNodeCommand</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeCommandPrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>id</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QNodeCommandPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QNodeCommandPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qnodecommand.html" xrefstyle="class" annotations="QNodeCommand">QNodeCommand</db:link></db:code> class is the base class for all <db:code><db:link xlink:href="qt3dcore-qscenechange.html#ChangeFlag-enum" xrefstyle="enum" annotations="CommandRequested">CommandRequested</db:link></db:code>
            <db:code><db:link xlink:href="qt3dcore-qscenechange.html" xrefstyle="class" annotations="QSceneChange">QSceneChange</db:link></db:code> events</db:para>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qnodecommand.html" xrefstyle="class" annotations="QNodeCommand">QNodeCommand</db:link></db:code> class is the base class for all <db:code><db:link xlink:href="qt3dcore-qscenechange.html" xrefstyle="class" annotations="QSceneChange">QSceneChange</db:link></db:code> events that have the changeType() <db:code><db:link xlink:href="qt3dcore-qscenechange.html#ChangeFlag-enum" xrefstyle="enum" annotations="CommandRequested">CommandRequested</db:link></db:code>.</db:para>
         <db:para>You can subclass this to create your own node update types for communication between your <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> and <db:code><db:link xlink:href="qt3dcore-qbackendnode.html" xrefstyle="class" annotations="QBackendNode">QBackendNode</db:link></db:code> subclasses when writing your own aspects.</db:para>
         <db:para>This class was introduced in Qt 5.10.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QNodeCreatedChange</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QNodeCreatedChange</db:ooclass>
            <db:fieldsynopsis>
               <db:type>T</db:type>
               <db:varname>data</db:varname>
            </db:fieldsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QNodeCreatedChange</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QNode *</db:type>
                  <db:parameter>_node</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
         </db:classsynopsis>
         <db:para>Used to notify when a node is created.</db:para>
         <db:para>This class was introduced in Qt 5.7.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QNodeCreatedChangeBase</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QNodeCreatedChangeBase</db:ooclass>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QNodeCreatedChangeBase</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QNode *</db:type>
                  <db:parameter>node</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QNodeCreatedChangeBase</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNodeId</db:type>
               <db:methodname>parentId</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>metaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>bool</db:type>
               <db:methodname>isNodeEnabled</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>protected</db:modifier>
               <db:methodname>QNodeCreatedChangeBase</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeCreatedChangeBasePrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const Qt3DCore::QNode *</db:type>
                  <db:parameter>node</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QNodeCreatedChangeBasePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QNodeCreatedChangeBasePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qnodecreatedchangebase.html" xrefstyle="class" annotations="QNodeCreatedChangeBase">QNodeCreatedChangeBase</db:link></db:code> class is the base class for all <db:code><db:link xlink:href="qt3dcore-qscenechange.html#ChangeFlag-enum" xrefstyle="enum" annotations="NodeCreated">NodeCreated</db:link></db:code>
            <db:code><db:link xlink:href="qt3dcore-qscenechange.html" xrefstyle="class" annotations="QSceneChange">QSceneChange</db:link></db:code> events</db:para>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qnodecreatedchangebase.html" xrefstyle="class" annotations="QNodeCreatedChangeBase">QNodeCreatedChangeBase</db:link></db:code> class is the base class for all <db:code><db:link xlink:href="qt3dcore-qscenechange.html" xrefstyle="class" annotations="QSceneChange">QSceneChange</db:link></db:code> events that have the changeType() <db:code><db:link xlink:href="qt3dcore-qscenechange.html#ChangeFlag-enum" xrefstyle="enum" annotations="NodeCreated">NodeCreated</db:link></db:code>. You should not need to instantiate this class. Usually you should be using one of its subclasses such as <db:code><db:link xlink:href="qt3dcore-qnodecreatedchange.html" xrefstyle="class" annotations="QNodeCreatedChange">QNodeCreatedChange</db:link></db:code>.</db:para>
         <db:para>You can subclass this to create your own node update types for communication between your <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> and <db:code><db:link xlink:href="qt3dcore-qbackendnode.html" xrefstyle="class" annotations="QBackendNode">QBackendNode</db:link></db:code> subclasses when writing your own aspects.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QNodeDestroyedChange</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QNodeDestroyedChange</db:ooclass>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QNodeDestroyedChange</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QNode *</db:type>
                  <db:parameter>node</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const QVector&lt;Qt3DCore::QNodeIdTypePair&gt; &amp;</db:type>
                  <db:parameter>subtreeIdsAndTypes</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QNodeDestroyedChange</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QVector&lt;Qt3DCore::QNodeIdTypePair&gt;</db:type>
               <db:methodname>subtreeIdsAndTypes</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QNodeDestroyedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QNodeDestroyedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>Used to notify when a node is destroyed.</db:para>
         <db:para>This class was introduced in Qt 5.7.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QNodeId</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QNodeId</db:ooclass>
            <db:fieldsynopsis>
               <db:type>quint64</db:type>
               <db:varname>m_id</db:varname>
            </db:fieldsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QNodeId</db:methodname>
               <db:methodparam>
                  <db:type>quint64</db:type>
                  <db:parameter>i</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QNodeId</db:methodname>
               <db:void/>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>Qt3DCore::QNodeId</db:type>
               <db:methodname>createId</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>bool</db:type>
               <db:methodname>isNull</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>bool</db:type>
               <db:methodname>operator==</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>other</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>bool</db:type>
               <db:methodname>operator!=</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>other</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>bool</db:type>
               <db:methodname>operator&lt;</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>other</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>bool</db:type>
               <db:methodname>operator&gt;</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>other</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>quint64</db:type>
               <db:methodname>id</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>bool</db:type>
               <db:methodname>operator bool</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>uint</db:type>
               <db:methodname>qHash</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>id</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>uint</db:type>
                  <db:parameter>seed</db:parameter>
                  <db:initializer>...</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>Uniquely identifies a <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code>
         </db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QPropertyNodeAddedChange</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QPropertyNodeAddedChange</db:ooclass>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QPropertyNodeAddedChange</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>node</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>~QPropertyNodeAddedChange</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNodeId</db:type>
               <db:methodname>addedNodeId</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>metaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QPropertyNodeAddedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QPropertyNodeAddedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>Used to notify when a node is added to a property</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QPropertyNodeRemovedChange</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QPropertyNodeRemovedChange</db:ooclass>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QPropertyNodeRemovedChange</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>node</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>~QPropertyNodeRemovedChange</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNodeId</db:type>
               <db:methodname>removedNodeId</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>metaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QPropertyNodeRemovedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QPropertyNodeRemovedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qpropertynoderemovedchange.html" xrefstyle="class" annotations="QPropertyNodeRemovedChange">QPropertyNodeRemovedChange</db:link></db:code> class is used to notify when a node is removed from a property</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QPropertyUpdatedChange</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QPropertyUpdatedChange</db:ooclass>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QPropertyUpdatedChange</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QPropertyUpdatedChange</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QVariant</db:type>
               <db:methodname>value</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setValue</db:methodname>
               <db:methodparam>
                  <db:type>const QVariant &amp;</db:type>
                  <db:parameter>value</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>Qt3DCore::QPropertyUpdatedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>const Qt3DCore::QPropertyUpdatedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QPropertyUpdatedChange</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QPropertyUpdatedChangePrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
         </db:classsynopsis>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qpropertyupdatedchange.html" xrefstyle="class" annotations="QPropertyUpdatedChange">QPropertyUpdatedChange</db:link></db:code> class is used to notify when a property value is updated</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QPropertyUpdatedChangeBase</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QPropertyUpdatedChangeBase</db:ooclass>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QPropertyUpdatedChangeBase</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:constructorsynopsis>
               <db:modifier>protected</db:modifier>
               <db:methodname>QPropertyUpdatedChangeBase</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:constructorsynopsis>
               <db:modifier>protected</db:modifier>
               <db:methodname>QPropertyUpdatedChangeBase</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QPropertyUpdatedChangeBasePrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>Qt3DCore::QPropertyUpdatedChangeBasePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>const Qt3DCore::QPropertyUpdatedChangeBasePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qpropertyupdatedchangebase.html" xrefstyle="class" annotations="QPropertyUpdatedChangeBase">QPropertyUpdatedChangeBase</db:link></db:code> class is the base class for all <db:code><db:link xlink:href="qt3dcore-qscenechange.html#ChangeFlag-enum" xrefstyle="enum" annotations="PropertyUpdated">PropertyUpdated</db:link></db:code>
            <db:code><db:link xlink:href="qt3dcore-qscenechange.html" xrefstyle="class" annotations="QSceneChange">QSceneChange</db:link></db:code> events</db:para>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qpropertyupdatedchangebase.html" xrefstyle="class" annotations="QPropertyUpdatedChangeBase">QPropertyUpdatedChangeBase</db:link></db:code> class is the base class for all <db:code><db:link xlink:href="qt3dcore-qscenechange.html" xrefstyle="class" annotations="QSceneChange">QSceneChange</db:link></db:code> events that have the changeType() <db:code><db:link xlink:href="qt3dcore-qscenechange.html#ChangeFlag-enum" xrefstyle="enum" annotations="PropertyUpdated">PropertyUpdated</db:link></db:code>. You should not need to instantiate this class. Usually you should be using one of its subclasses such as <db:code><db:link xlink:href="qt3dcore-qpropertyupdatedchange.html" xrefstyle="class" annotations="QPropertyUpdatedChange">QPropertyUpdatedChange</db:link></db:code> or QTypedPropertyUpdatedChange.</db:para>
         <db:para>You can subclass this to create your own node update types for communication between your <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> and <db:code><db:link xlink:href="qt3dcore-qbackendnode.html" xrefstyle="class" annotations="QBackendNode">QBackendNode</db:link></db:code> subclasses when writing your own aspects.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QPropertyValueAddedChange</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QPropertyValueAddedChange</db:ooclass>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QPropertyValueAddedChange</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QPropertyValueAddedChange</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setAddedValue</db:methodname>
               <db:methodparam>
                  <db:type>const QVariant &amp;</db:type>
                  <db:parameter>value</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QVariant</db:type>
               <db:methodname>addedValue</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QPropertyValueAddedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QPropertyValueAddedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>Used to notify when a value is added to a property</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QPropertyValueAddedChangeBase</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QPropertyValueAddedChangeBase</db:ooclass>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QPropertyValueAddedChangeBase</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:constructorsynopsis>
               <db:modifier>protected</db:modifier>
               <db:methodname>QPropertyValueAddedChangeBase</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QPropertyValueAddedChangeBase</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QPropertyValueAddedChangeBasePrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>Qt3DCore::QPropertyValueAddedChangeBasePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>const Qt3DCore::QPropertyValueAddedChangeBasePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qpropertyvalueaddedchangebase.html" xrefstyle="class" annotations="QPropertyValueAddedChangeBase">QPropertyValueAddedChangeBase</db:link></db:code> class is the base class for all <db:code><db:link xlink:href="qt3dcore-qscenechange.html#ChangeFlag-enum" xrefstyle="enum" annotations="PropertyValueAdded">PropertyValueAdded</db:link></db:code>
            <db:code><db:link xlink:href="qt3dcore-qscenechange.html" xrefstyle="class" annotations="QSceneChange">QSceneChange</db:link></db:code> events</db:para>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qpropertyvalueaddedchangebase.html" xrefstyle="class" annotations="QPropertyValueAddedChangeBase">QPropertyValueAddedChangeBase</db:link></db:code> class is the base class for all <db:code><db:link xlink:href="qt3dcore-qscenechange.html" xrefstyle="class" annotations="QSceneChange">QSceneChange</db:link></db:code> events that have the changeType() <db:code><db:link xlink:href="qt3dcore-qscenechange.html#ChangeFlag-enum" xrefstyle="enum" annotations="PropertyValueAdded">PropertyValueAdded</db:link></db:code>. You should not need to instantiate this class. Usually you should be using one of its subclasses such as <db:code><db:link xlink:href="qt3dcore-qpropertynodeaddedchange.html" xrefstyle="class" annotations="QPropertyNodeAddedChange">QPropertyNodeAddedChange</db:link></db:code>.</db:para>
         <db:para>You can subclass this to create your own node added types for communication between your <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> and <db:code><db:link xlink:href="qt3dcore-qbackendnode.html" xrefstyle="class" annotations="QBackendNode">QBackendNode</db:link></db:code> subclasses when writing your own aspects.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QPropertyValueRemovedChange</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QPropertyValueRemovedChange</db:ooclass>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QPropertyValueRemovedChange</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QPropertyValueRemovedChange</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setRemovedValue</db:methodname>
               <db:methodparam>
                  <db:type>const QVariant &amp;</db:type>
                  <db:parameter>value</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QVariant</db:type>
               <db:methodname>removedValue</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QPropertyValueRemovedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QPropertyValueRemovedChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>Used to notify when a value is added to a property</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QPropertyValueRemovedChangeBase</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QPropertyValueRemovedChangeBase</db:ooclass>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QPropertyValueRemovedChangeBase</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>Qt3DCore::QPropertyValueRemovedChangeBasePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>const Qt3DCore::QPropertyValueRemovedChangeBasePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>protected</db:modifier>
               <db:methodname>QPropertyValueRemovedChangeBase</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QPropertyValueRemovedChangeBase</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QPropertyValueRemovedChangeBasePrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
         </db:classsynopsis>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qpropertyvalueremovedchangebase.html" xrefstyle="class" annotations="QPropertyValueRemovedChangeBase">QPropertyValueRemovedChangeBase</db:link></db:code> class is the base class for all <db:code><db:link xlink:href="qt3dcore-qscenechange.html#ChangeFlag-enum" xrefstyle="enum" annotations="PropertyValueRemoved">PropertyValueRemoved</db:link></db:code>
            <db:code><db:link xlink:href="qt3dcore-qscenechange.html" xrefstyle="class" annotations="QSceneChange">QSceneChange</db:link></db:code> events</db:para>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qpropertyvalueremovedchangebase.html" xrefstyle="class" annotations="QPropertyValueRemovedChangeBase">QPropertyValueRemovedChangeBase</db:link></db:code> class is the base class for all <db:code><db:link xlink:href="qt3dcore-qscenechange.html" xrefstyle="class" annotations="QSceneChange">QSceneChange</db:link></db:code> events that have the changeType() <db:code><db:link xlink:href="qt3dcore-qscenechange.html#ChangeFlag-enum" xrefstyle="enum" annotations="PropertyValueRemoved">PropertyValueRemoved</db:link></db:code>. You should not need to instantiate this class. Usually you should be using one of its subclasses such as <db:code><db:link xlink:href="qt3dcore-qpropertynoderemovedchange.html" xrefstyle="class" annotations="QPropertyNodeRemovedChange">QPropertyNodeRemovedChange</db:link></db:code>.</db:para>
         <db:para>You can subclass this to create your own node Removed types for communication between your <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> and <db:code><db:link xlink:href="qt3dcore-qbackendnode.html" xrefstyle="class" annotations="QBackendNode">QBackendNode</db:link></db:code> subclasses when writing your own aspects.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QSceneChange</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QSceneChange</db:ooclass>
            <db:fieldsynopsis>
               <db:type>Qt3DCore::QSceneChangePrivate *</db:type>
               <db:varname>d_ptr</db:varname>
            </db:fieldsynopsis>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QSceneChange</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::ChangeFlag</db:type>
               <db:methodname>type</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setDeliveryFlags</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QSceneChange::DeliveryFlags</db:type>
                  <db:parameter>flags</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QSceneChange::DeliveryFlags</db:type>
               <db:methodname>deliveryFlags</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QNodeId</db:type>
               <db:methodname>subjectId</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>Qt3DCore::QSceneChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>const Qt3DCore::QSceneChangePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>protected</db:modifier>
               <db:methodname>QSceneChange</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::ChangeFlag</db:type>
                  <db:parameter>type</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QSceneChange</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QSceneChangePrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::ChangeFlag</db:type>
                  <db:parameter>type</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QSceneChange</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QSceneChange &amp;</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QSceneChange &amp;</db:type>
               <db:methodname>operator=</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QSceneChange &amp;</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:enumsynopsis>
               <db:enumname>Qt3DCore::QSceneChange::DeliveryFlag</db:enumname>
               <db:enumitem>
                  <db:enumidentifier>BackendNodes</db:enumidentifier>
                  <db:enumvalue>0x0001</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>Nodes</db:enumidentifier>
                  <db:enumvalue>0x0010</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>DeliverToAll</db:enumidentifier>
                  <db:enumvalue>BackendNodes | Nodes</db:enumvalue>
               </db:enumitem>
            </db:enumsynopsis>
            <db:typedefsynopsis>
               <db:typedefname>Qt3DCore::QSceneChange::DeliveryFlags</db:typedefname>
            </db:typedefsynopsis>
            <db:enumsynopsis>
               <db:enumname>Qt3DCore::ChangeFlag</db:enumname>
               <db:enumitem>
                  <db:enumidentifier>NodeCreated</db:enumidentifier>
                  <db:enumvalue>1 &lt;&lt; 0</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>NodeDeleted</db:enumidentifier>
                  <db:enumvalue>1 &lt;&lt; 1</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>PropertyUpdated</db:enumidentifier>
                  <db:enumvalue>1 &lt;&lt; 2</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>PropertyValueAdded</db:enumidentifier>
                  <db:enumvalue>1 &lt;&lt; 3</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>PropertyValueRemoved</db:enumidentifier>
                  <db:enumvalue>1 &lt;&lt; 4</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>ComponentAdded</db:enumidentifier>
                  <db:enumvalue>1 &lt;&lt; 5</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>ComponentRemoved</db:enumidentifier>
                  <db:enumvalue>1 &lt;&lt; 6</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>CommandRequested</db:enumidentifier>
                  <db:enumvalue>1 &lt;&lt; 7</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>CallbackTriggered</db:enumidentifier>
                  <db:enumvalue>1 &lt;&lt; 8</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>AllChanges</db:enumidentifier>
                  <db:enumvalue>0xFFFFFFFF</db:enumvalue>
               </db:enumitem>
            </db:enumsynopsis>
            <db:typedefsynopsis>
               <db:typedefname>Qt3DCore::QSceneChangePtr</db:typedefname>
            </db:typedefsynopsis>
         </db:classsynopsis>
         <db:para>The base class for changes that can be sent and received by Qt3D's change notification system.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QSkeleton</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QSkeleton</db:ooclass>
            <db:fieldsynopsis>
               <db:type>const QMetaObject</db:type>
               <db:varname>staticMetaObject</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>metaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>void *</db:type>
               <db:methodname>qt_metacast</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>int</db:type>
               <db:methodname>qt_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>tr</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>trUtf8</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>static</db:modifier>
               <db:void/>
               <db:methodname>qt_static_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QSkeleton</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>~QSkeleton</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QJoint *</db:type>
               <db:methodname>rootJoint</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setRootJoint</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QJoint *</db:type>
                  <db:parameter>rootJoint</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>rootJointChanged</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QJoint *</db:type>
                  <db:parameter>rootJoint</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QSkeletonPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QSkeletonPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>override</db:modifier>
               <db:type>Qt3DCore::QNodeCreatedChangeBasePtr</db:type>
               <db:methodname>createNodeCreationChange</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>Qt3DCore::QJoint*</db:type>
               <db:varname>rootJoint</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>Qt3DCore::QJoint*</db:type>
               <db:methodname>rootJoint</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setRootJoint</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QJoint*</db:type>
                  <db:parameter>rootJoint</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>Holds the data for a skeleton to be used with skinned meshes</db:para>
         <db:para>Use <db:code><db:link xlink:href="qt3dcore-qskeleton.html" xrefstyle="class" annotations="QSkeleton">QSkeleton</db:link></db:code> if you wish to manually create the joints of a skeleton for use with skinned meshes. This is mainly of use to people creating editors, tooling, or dynamic skeletons. It is more common that a Qt 3D application would simply consume an existing skeleton and skinned mesh as created in a digital content creation tool such as Blender. For this use case, please see <db:code><db:link xlink:href="qt3dcore-qskeletonloader.html" xrefstyle="class" annotations="QSkeletonLoader">QSkeletonLoader</db:link></db:code>.</db:para>
         <db:para>This class was introduced in Qt 5.10.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QSkeletonLoader</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QSkeletonLoader</db:ooclass>
            <db:fieldsynopsis>
               <db:type>const QMetaObject</db:type>
               <db:varname>staticMetaObject</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>metaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>void *</db:type>
               <db:methodname>qt_metacast</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>int</db:type>
               <db:methodname>qt_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>tr</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>trUtf8</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>static</db:modifier>
               <db:void/>
               <db:methodname>qt_static_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QSkeletonLoader</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QSkeletonLoader</db:methodname>
               <db:methodparam>
                  <db:type>const QUrl &amp;</db:type>
                  <db:parameter>source</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>~QSkeletonLoader</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QUrl</db:type>
               <db:methodname>source</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QSkeletonLoader::Status</db:type>
               <db:methodname>status</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>bool</db:type>
               <db:methodname>isCreateJointsEnabled</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>Qt3DCore::QJoint *</db:type>
               <db:methodname>rootJoint</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setSource</db:methodname>
               <db:methodparam>
                  <db:type>const QUrl &amp;</db:type>
                  <db:parameter>source</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setCreateJointsEnabled</db:methodname>
               <db:methodparam>
                  <db:type>bool</db:type>
                  <db:parameter>enabled</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>sourceChanged</db:methodname>
               <db:methodparam>
                  <db:type>const QUrl &amp;</db:type>
                  <db:parameter>source</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>statusChanged</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QSkeletonLoader::Status</db:type>
                  <db:parameter>status</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>createJointsEnabledChanged</db:methodname>
               <db:methodparam>
                  <db:type>bool</db:type>
                  <db:parameter>createJointsEnabled</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>rootJointChanged</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QJoint *</db:type>
                  <db:parameter>rootJoint</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QSkeletonLoader</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QSkeletonLoaderPrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>override</db:modifier>
               <db:void/>
               <db:methodname>sceneChangeEvent</db:methodname>
               <db:methodparam>
                  <db:type>const Qt3DCore::QSceneChangePtr &amp;</db:type>
                  <db:parameter>change</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QSkeletonLoaderPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QSkeletonLoaderPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>override</db:modifier>
               <db:type>Qt3DCore::QNodeCreatedChangeBasePtr</db:type>
               <db:methodname>createNodeCreationChange</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:void/>
               <db:methodname>setRootJoint</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QJoint *</db:type>
                  <db:parameter>rootJoint</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:enumsynopsis>
               <db:enumname>Qt3DCore::QSkeletonLoader::Status</db:enumname>
               <db:enumitem>
                  <db:enumidentifier>NotReady</db:enumidentifier>
                  <db:enumvalue>0</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>Ready</db:enumidentifier>
                  <db:enumvalue>1</db:enumvalue>
               </db:enumitem>
               <db:enumitem>
                  <db:enumidentifier>Error</db:enumidentifier>
                  <db:enumvalue>2</db:enumvalue>
               </db:enumitem>
            </db:enumsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>QUrl</db:type>
               <db:varname>source</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>QUrl</db:type>
               <db:methodname>source</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setSource</db:methodname>
               <db:methodparam>
                  <db:type>QUrl</db:type>
                  <db:parameter>source</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>Status</db:type>
               <db:varname>status</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>Status</db:type>
               <db:methodname>status</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>bool</db:type>
               <db:varname>createJointsEnabled</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>bool</db:type>
               <db:methodname>isCreateJointsEnabled</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setCreateJointsEnabled</db:methodname>
               <db:methodparam>
                  <db:type>bool</db:type>
                  <db:parameter>createJointsEnabled</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>Qt3DCore::QJoint*</db:type>
               <db:varname>rootJoint</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>Qt3DCore::QJoint*</db:type>
               <db:methodname>rootJoint</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>Used to load a skeleton of joints from file</db:para>
         <db:para>Use <db:link xlink:href="qml-qt3d-core-skeletonloader.html" xrefstyle="" annotations="SkeletonLoader">SkeletonLoader</db:link> if you wish to load a whole skeleton from file rather than creating the joints yourself using Skeleton and Joints. Creating a skeleton and binding the vertices of a mesh to the skeleton is most easily performed in a 3D digital content creation tool such as Blender. The resulting skeleton and mesh can then be exported in a suitable format such as glTF 2 for consumption by Qt 3D.</db:para>
         <db:para>This class was introduced in Qt 5.10.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QStaticPropertyUpdatedChangeBase</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QStaticPropertyUpdatedChangeBase</db:ooclass>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QStaticPropertyUpdatedChangeBase</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const char *</db:type>
               <db:methodname>propertyName</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setPropertyName</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>name</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>protected</db:modifier>
               <db:methodname>QStaticPropertyUpdatedChangeBase</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QStaticPropertyUpdatedChangeBase</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QStaticPropertyUpdatedChangeBasePrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>Qt3DCore::QStaticPropertyUpdatedChangeBasePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>const Qt3DCore::QStaticPropertyUpdatedChangeBasePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qstaticpropertyupdatedchangebase.html" xrefstyle="class" annotations="QStaticPropertyUpdatedChangeBase">QStaticPropertyUpdatedChangeBase</db:link></db:code> class is the base class for all static <db:code><db:link xlink:href="qt3dcore-qscenechange.html#ChangeFlag-enum" xrefstyle="enum" annotations="PropertyUpdated">PropertyUpdated</db:link></db:code>
            <db:code><db:link xlink:href="qt3dcore-qscenechange.html" xrefstyle="class" annotations="QSceneChange">QSceneChange</db:link></db:code> events</db:para>
         <db:para>This class was introduced in Qt 5.7.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QStaticPropertyValueAddedChangeBase</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QStaticPropertyValueAddedChangeBase</db:ooclass>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QStaticPropertyValueAddedChangeBase</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const char *</db:type>
               <db:methodname>propertyName</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setPropertyName</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>name</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>Qt3DCore::QStaticPropertyValueAddedChangeBasePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>const Qt3DCore::QStaticPropertyValueAddedChangeBasePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>protected</db:modifier>
               <db:methodname>QStaticPropertyValueAddedChangeBase</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:constructorsynopsis>
               <db:modifier>protected</db:modifier>
               <db:methodname>QStaticPropertyValueAddedChangeBase</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QStaticPropertyValueAddedChangeBasePrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
         </db:classsynopsis>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qstaticpropertyvalueaddedchangebase.html" xrefstyle="class" annotations="QStaticPropertyValueAddedChangeBase">QStaticPropertyValueAddedChangeBase</db:link></db:code> class is the base class for all static <db:code><db:link xlink:href="qt3dcore-qscenechange.html#ChangeFlag-enum" xrefstyle="enum" annotations="PropertyValueAdded">PropertyValueAdded</db:link></db:code>
            <db:code><db:link xlink:href="qt3dcore-qscenechange.html" xrefstyle="class" annotations="QSceneChange">QSceneChange</db:link></db:code> events</db:para>
         <db:para>This class was introduced in Qt 5.7.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QStaticPropertyValueRemovedChangeBase</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QStaticPropertyValueRemovedChangeBase</db:ooclass>
            <db:destructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>~QStaticPropertyValueRemovedChangeBase</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const char *</db:type>
               <db:methodname>propertyName</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setPropertyName</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>name</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>Qt3DCore::QStaticPropertyValueRemovedChangeBasePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>protected</db:modifier>
               <db:type>const Qt3DCore::QStaticPropertyValueRemovedChangeBasePrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>protected</db:modifier>
               <db:methodname>QStaticPropertyValueRemovedChangeBase</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:constructorsynopsis>
               <db:modifier>protected</db:modifier>
               <db:methodname>QStaticPropertyValueRemovedChangeBase</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QStaticPropertyValueRemovedChangeBasePrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNodeId</db:type>
                  <db:parameter>subjectId</db:parameter>
               </db:methodparam>
            </db:constructorsynopsis>
         </db:classsynopsis>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qstaticpropertyvalueremovedchangebase.html" xrefstyle="class" annotations="QStaticPropertyValueRemovedChangeBase">QStaticPropertyValueRemovedChangeBase</db:link></db:code> class is the base class for all static <db:code><db:link xlink:href="qt3dcore-qscenechange.html#ChangeFlag-enum" xrefstyle="enum" annotations="PropertyValueRemoved">PropertyValueRemoved</db:link></db:code>
            <db:code><db:link xlink:href="qt3dcore-qscenechange.html" xrefstyle="class" annotations="QSceneChange">QSceneChange</db:link></db:code> events</db:para>
         <db:para>This class was introduced in Qt 5.7.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QTransform</db:title>
         <db:classsynopsis>
            <db:ooclass>Qt3DCore::QTransform</db:ooclass>
            <db:fieldsynopsis>
               <db:type>const QMetaObject</db:type>
               <db:varname>staticMetaObject</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>const QMetaObject *</db:type>
               <db:methodname>metaObject</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>void *</db:type>
               <db:methodname>qt_metacast</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>int</db:type>
               <db:methodname>qt_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>tr</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QString</db:type>
               <db:methodname>trUtf8</db:methodname>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>s</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const char *</db:type>
                  <db:parameter>c</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter>n</db:parameter>
                  <db:initializer>Q_OBJECT</db:initializer>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>static</db:modifier>
               <db:void/>
               <db:methodname>qt_static_metacall</db:methodname>
               <db:methodparam>
                  <db:type>QObject *</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>QMetaObject::Call</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>int</db:type>
                  <db:parameter/>
               </db:methodparam>
               <db:methodparam>
                  <db:type>void **</db:type>
                  <db:parameter/>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>public</db:modifier>
               <db:methodname>QTransform</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:destructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>~QTransform</db:methodname>
               <db:void/>
            </db:destructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>float</db:type>
               <db:methodname>scale</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QVector3D</db:type>
               <db:methodname>scale3D</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QQuaternion</db:type>
               <db:methodname>rotation</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QVector3D</db:type>
               <db:methodname>translation</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QQuaternion</db:type>
               <db:methodname>fromAxisAndAngle</db:methodname>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>axis</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>angle</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QQuaternion</db:type>
               <db:methodname>fromAxisAndAngle</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>x</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>y</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>z</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>angle</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QQuaternion</db:type>
               <db:methodname>fromAxesAndAngles</db:methodname>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>axis1</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>angle1</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>axis2</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>angle2</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QQuaternion</db:type>
               <db:methodname>fromAxesAndAngles</db:methodname>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>axis1</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>angle1</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>axis2</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>angle2</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>axis3</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>angle3</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QQuaternion</db:type>
               <db:methodname>fromAxes</db:methodname>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>xAxis</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>yAxis</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>zAxis</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QQuaternion</db:type>
               <db:methodname>fromEulerAngles</db:methodname>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>eulerAngles</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QQuaternion</db:type>
               <db:methodname>fromEulerAngles</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>pitch</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>yaw</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>roll</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QMatrix4x4</db:type>
               <db:methodname>rotateAround</db:methodname>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>point</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>angle</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>axis</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:modifier>static</db:modifier>
               <db:type>QMatrix4x4</db:type>
               <db:methodname>rotateFromAxes</db:methodname>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>xAxis</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>yAxis</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>zAxis</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>QMatrix4x4</db:type>
               <db:methodname>matrix</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>float</db:type>
               <db:methodname>rotationX</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>float</db:type>
               <db:methodname>rotationY</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>public</db:modifier>
               <db:type>float</db:type>
               <db:methodname>rotationZ</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setScale</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>scale</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setScale3D</db:methodname>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>scale</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setRotation</db:methodname>
               <db:methodparam>
                  <db:type>const QQuaternion &amp;</db:type>
                  <db:parameter>rotation</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setTranslation</db:methodname>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>translation</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setMatrix</db:methodname>
               <db:methodparam>
                  <db:type>const QMatrix4x4 &amp;</db:type>
                  <db:parameter>matrix</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setRotationX</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationX</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setRotationY</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationY</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>slot</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>setRotationZ</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationZ</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>scaleChanged</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>scale</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>scale3DChanged</db:methodname>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>scale</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>rotationChanged</db:methodname>
               <db:methodparam>
                  <db:type>const QQuaternion &amp;</db:type>
                  <db:parameter>rotation</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>translationChanged</db:methodname>
               <db:methodparam>
                  <db:type>const QVector3D &amp;</db:type>
                  <db:parameter>translation</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>matrixChanged</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>rotationXChanged</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationX</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>rotationYChanged</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationY</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>signal</db:modifier>
               <db:modifier>public</db:modifier>
               <db:void/>
               <db:methodname>rotationZChanged</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationZ</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:constructorsynopsis>
               <db:modifier>private</db:modifier>
               <db:methodname>QTransform</db:methodname>
               <db:methodparam>
                  <db:type>Qt3DCore::QTransformPrivate &amp;</db:type>
                  <db:parameter>dd</db:parameter>
               </db:methodparam>
               <db:methodparam>
                  <db:type>Qt3DCore::QNode *</db:type>
                  <db:parameter>parent</db:parameter>
                  <db:initializer>nullptr</db:initializer>
               </db:methodparam>
            </db:constructorsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>Qt3DCore::QTransformPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:type>const Qt3DCore::QTransformPrivate *</db:type>
               <db:methodname>d_func</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:modifier>private</db:modifier>
               <db:modifier>override</db:modifier>
               <db:type>Qt3DCore::QNodeCreatedChangeBasePtr</db:type>
               <db:methodname>createNodeCreationChange</db:methodname>
               <db:void/>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>QMatrix4x4</db:type>
               <db:varname>matrix</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>QMatrix4x4</db:type>
               <db:methodname>matrix</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setMatrix</db:methodname>
               <db:methodparam>
                  <db:type>QMatrix4x4</db:type>
                  <db:parameter>matrix</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>float</db:type>
               <db:varname>scale</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>float</db:type>
               <db:methodname>scale</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setScale</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>scale</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>QVector3D</db:type>
               <db:varname>scale3D</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>QVector3D</db:type>
               <db:methodname>scale3D</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setScale3D</db:methodname>
               <db:methodparam>
                  <db:type>QVector3D</db:type>
                  <db:parameter>scale3D</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>QQuaternion</db:type>
               <db:varname>rotation</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>QQuaternion</db:type>
               <db:methodname>rotation</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setRotation</db:methodname>
               <db:methodparam>
                  <db:type>QQuaternion</db:type>
                  <db:parameter>rotation</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>QVector3D</db:type>
               <db:varname>translation</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>QVector3D</db:type>
               <db:methodname>translation</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setTranslation</db:methodname>
               <db:methodparam>
                  <db:type>QVector3D</db:type>
                  <db:parameter>translation</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>float</db:type>
               <db:varname>rotationX</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>float</db:type>
               <db:methodname>rotationX</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setRotationX</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationX</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>float</db:type>
               <db:varname>rotationY</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>float</db:type>
               <db:methodname>rotationY</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setRotationY</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationY</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
            <db:fieldsynopsis>
               <db:modifier>(Qt property)</db:modifier>
               <db:type>float</db:type>
               <db:varname>rotationZ</db:varname>
            </db:fieldsynopsis>
            <db:methodsynopsis>
               <db:type>float</db:type>
               <db:methodname>rotationZ</db:methodname>
               <db:void/>
               <db:modifier>const</db:modifier>
            </db:methodsynopsis>
            <db:methodsynopsis>
               <db:void/>
               <db:methodname>setRotationZ</db:methodname>
               <db:methodparam>
                  <db:type>float</db:type>
                  <db:parameter>rotationZ</db:parameter>
               </db:methodparam>
            </db:methodsynopsis>
         </db:classsynopsis>
         <db:para>Used to perform transforms on meshes</db:para>
         <db:para>The <db:code><db:link xlink:href="qt3dcore-qtransform.html" xrefstyle="class" annotations="QTransform">QTransform</db:link></db:code> component is not shareable between multiple <db:code><db:link xlink:href="qt3dcore-qentity.html" xrefstyle="class" annotations="QEntity">QEntity</db:link></db:code>'s. The transformation is held as <db:code><db:link xlink:href="qvector3d.html" xrefstyle="class" annotations="QVector3D">QVector3D</db:link></db:code> scale, <db:code><db:link xlink:href="qquaternion.html" xrefstyle="class" annotations="QQuaternion">QQuaternion</db:link></db:code> rotation and <db:code><db:link xlink:href="qvector3d.html" xrefstyle="class" annotations="QVector3D">QVector3D</db:link></db:code> translation components. The transformations are applied to the mesh in that order. When <db:code><db:link xlink:href="qt3dcore-qtransform.html#matrix-prop" xrefstyle="property" annotations="QTransform::matrix">QTransform::matrix</db:link></db:code> property is set, it is decomposed to these transform components and corresponding signals are emitted.</db:para>
         <db:para>Several helper functions are provided to set up the <db:code><db:link xlink:href="qt3dcore-qtransform.html" xrefstyle="class" annotations="QTransform">QTransform</db:link></db:code>; <db:code><db:link xlink:href="qt3dcore-qtransform.html#fromAxisAndAngle" xrefstyle="function" annotations="fromAxisAndAngle">fromAxisAndAngle</db:link></db:code> and <db:code><db:link xlink:href="qt3dcore-qtransform.html#fromAxesAndAngles" xrefstyle="function" annotations="fromAxesAndAngles">fromAxesAndAngles</db:link></db:code> can be used to set the rotation around specific axes, <db:code><db:link xlink:href="qt3dcore-qtransform.html#fromEulerAngles" xrefstyle="function" annotations="fromEulerAngles">fromEulerAngles</db:link></db:code> can be used to set the rotation based on euler angles and <db:code><db:link xlink:href="qt3dcore-qtransform.html#rotateAround" xrefstyle="function" annotations="rotateAround">rotateAround</db:link></db:code> can be used to rotate the object around specific point relative to local origin.</db:para>
         <db:para>This class was introduced in Qt 5.6.</db:para>
      </db:section>
      <db:section>
         <db:title>enum Qt3DCore::ChangeFlag, flags Qt3DCore::ChangeFlags</db:title>
         <db:enumsynopsis>
            <db:enumname>Qt3DCore::ChangeFlag</db:enumname>
            <db:enumitem>
               <db:enumidentifier>NodeCreated</db:enumidentifier>
               <db:enumvalue>1 &lt;&lt; 0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>NodeDeleted</db:enumidentifier>
               <db:enumvalue>1 &lt;&lt; 1</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>PropertyUpdated</db:enumidentifier>
               <db:enumvalue>1 &lt;&lt; 2</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>PropertyValueAdded</db:enumidentifier>
               <db:enumvalue>1 &lt;&lt; 3</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>PropertyValueRemoved</db:enumidentifier>
               <db:enumvalue>1 &lt;&lt; 4</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>ComponentAdded</db:enumidentifier>
               <db:enumvalue>1 &lt;&lt; 5</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>ComponentRemoved</db:enumidentifier>
               <db:enumvalue>1 &lt;&lt; 6</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CommandRequested</db:enumidentifier>
               <db:enumvalue>1 &lt;&lt; 7</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CallbackTriggered</db:enumidentifier>
               <db:enumvalue>1 &lt;&lt; 8</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>AllChanges</db:enumidentifier>
               <db:enumvalue>0xFFFFFFFF</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::ChangeFlags</db:typedefname>
         </db:typedefsynopsis>
         <db:para>The types of change that can be sent and received by Qt3D's change notification system.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>Qt3DCore::NodeCreated</db:td>
                  <db:td>1 &lt;&lt; 0</db:td>
                  <db:td>
                     <db:para>A new instance of a <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> subclass has been created.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>Qt3DCore::NodeDeleted</db:td>
                  <db:td>1 &lt;&lt; 1</db:td>
                  <db:td>
                     <db:para>A <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> has been deleted.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>Qt3DCore::PropertyUpdated</db:td>
                  <db:td>1 &lt;&lt; 2</db:td>
                  <db:td>
                     <db:para>A <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> property has been updated.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>Qt3DCore::PropertyValueAdded</db:td>
                  <db:td>1 &lt;&lt; 3</db:td>
                  <db:td>
                     <db:para>A <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> has been added to the scene.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>Qt3DCore::PropertyValueRemoved</db:td>
                  <db:td>1 &lt;&lt; 4</db:td>
                  <db:td>
                     <db:para>A <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> has been removed from the scene.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>Qt3DCore::CommandRequested</db:td>
                  <db:td>1 &lt;&lt; 7</db:td>
                  <db:td>
                     <db:para>A <db:code><db:link xlink:href="qt3dcore-qnodecommand.html" xrefstyle="class" annotations="QNodeCommand">QNodeCommand</db:link></db:code> has been sent between a node and its backend.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>Qt3DCore::ComponentAdded</db:td>
                  <db:td>1 &lt;&lt; 5</db:td>
                  <db:td>
                     <db:para>A <db:code><db:link xlink:href="qt3dcore-qcomponent.html" xrefstyle="class" annotations="QComponent">QComponent</db:link></db:code> has been added to a <db:code><db:link xlink:href="qt3dcore-qentity.html" xrefstyle="class" annotations="QEntity">QEntity</db:link></db:code>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>Qt3DCore::ComponentRemoved</db:td>
                  <db:td>1 &lt;&lt; 6</db:td>
                  <db:td>
                     <db:para>A <db:code><db:link xlink:href="qt3dcore-qcomponent.html" xrefstyle="class" annotations="QComponent">QComponent</db:link></db:code> has been removed from a <db:code><db:link xlink:href="qt3dcore-qentity.html" xrefstyle="class" annotations="QEntity">QEntity</db:link></db:code>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>Qt3DCore::CallbackTriggered</db:td>
                  <db:td>1 &lt;&lt; 8</db:td>
                  <db:td>
                     <db:para>A <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> triggered a callback.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>Qt3DCore::AllChanges</db:td>
                  <db:td>0xFFFFFFFF</db:td>
                  <db:td>
                     <db:para>Allows an observer to monitor for any of the above changes.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The <db:code>ChangeFlags</db:code> type is a typedef for <db:code>QFlags&lt;ChangeFlag&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QAspectJobPtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QAspectJobPtr</db:typedefname>
         </db:typedefsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QBackendNodeMapperPtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qaspectjob.html" xrefstyle="class" annotations="QAspectJob">QAspectJob</db:link></db:code>.</db:para>
         <db:para>The <db:code>QBackendNodeMapperPtr</db:code> type is a typedef for <db:code>QFlags&lt;QAspectJobPtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QBackendNodeMapperPtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QBackendNodeMapperPtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qbackendnodemapper.html" xrefstyle="class" annotations="QBackendNodeMapper">QBackendNodeMapper</db:link></db:code>.</db:para>
         <db:para>The <db:code>ChangeFlags</db:code> type is a typedef for <db:code>QFlags&lt;QBackendNodeMapperPtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QComponentAddedChangePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QComponentAddedChangePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qcomponentaddedchange.html" xrefstyle="class" annotations="QComponentAddedChange">QComponentAddedChange</db:link></db:code>.</db:para>
         <db:para>The <db:code>QComponentRemovedChangePtr</db:code> type is a typedef for <db:code>QFlags&lt;QComponentAddedChangePtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QComponentRemovedChangePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QComponentRemovedChangePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qcomponentremovedchange.html" xrefstyle="class" annotations="QComponentRemovedChange">QComponentRemovedChange</db:link></db:code>.</db:para>
         <db:para>The <db:code>QPropertyUpdatedChangeBasePtr</db:code> type is a typedef for <db:code>QFlags&lt;QComponentRemovedChangePtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QComponentVector</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QComponentVector</db:typedefname>
         </db:typedefsynopsis>
         <db:para>List of <db:code><db:link xlink:href="qt3dcore-qcomponent.html" xrefstyle="class" annotations="QComponent">QComponent</db:link></db:code> pointers.</db:para>
         <db:para>The <db:code>QNodeDestroyedChangePtr</db:code> type is a typedef for <db:code>QFlags&lt;QComponentVector&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QDynamicPropertyUpdatedChangePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QDynamicPropertyUpdatedChangePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QComponentVector</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qdynamicpropertyupdatedchange.html" xrefstyle="class" annotations="QDynamicPropertyUpdatedChange">QDynamicPropertyUpdatedChange</db:link></db:code>.</db:para>
         <db:para>The <db:code>QComponentVector</db:code> type is a typedef for <db:code>QFlags&lt;QDynamicPropertyUpdatedChangePtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QEntityPtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QEntityPtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qentity.html" xrefstyle="class" annotations="QEntity">QEntity</db:link></db:code>.</db:para>
         <db:para>The <db:code>QComponentAddedChangePtr</db:code> type is a typedef for <db:code>QFlags&lt;QEntityPtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QNodeCommandPtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QNodeCommandPtr</db:typedefname>
         </db:typedefsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QNodeVector</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qnodecommand.html" xrefstyle="class" annotations="QNodeCommand">QNodeCommand</db:link></db:code>.</db:para>
         <db:para>The <db:code>QNodeVector</db:code> type is a typedef for <db:code>QFlags&lt;QNodeCommandPtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QNodeCreatedChangeBasePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QNodeCreatedChangeBasePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qnodecreatedchangebase.html" xrefstyle="class" annotations="QNodeCreatedChangeBase">QNodeCreatedChangeBase</db:link></db:code>.</db:para>
         <db:para>The <db:code>QNodeCommandPtr</db:code> type is a typedef for <db:code>QFlags&lt;QNodeCreatedChangeBasePtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QNodeDestroyedChangePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QNodeDestroyedChangePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qnodedestroyedchange.html" xrefstyle="class" annotations="QNodeDestroyedChange">QNodeDestroyedChange</db:link></db:code>.</db:para>
         <db:para>The <db:code>QPropertyValueAddedChangeBasePtr</db:code> type is a typedef for <db:code>QFlags&lt;QNodeDestroyedChangePtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QNodeIdVector</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QNodeIdVector</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A vector of <db:code><db:link xlink:href="qt3dcore-qnodeid.html" xrefstyle="class" annotations="QNodeId">QNodeId</db:link></db:code>s.</db:para>
         <db:para>The <db:code>QAspectJobPtr</db:code> type is a typedef for <db:code>QFlags&lt;QNodeIdVector&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QNodePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QNodePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code>.</db:para>
         <db:para>The <db:code>QEntityPtr</db:code> type is a typedef for <db:code>QFlags&lt;QNodePtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QNodeVector</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QNodeVector</db:typedefname>
         </db:typedefsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QNodePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>List of <db:code><db:link xlink:href="qt3dcore-qnode.html" xrefstyle="class" annotations="QNode">QNode</db:link></db:code> pointers.</db:para>
         <db:para>The <db:code>QNodePtr</db:code> type is a typedef for <db:code>QFlags&lt;QNodeVector&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QPropertyNodeAddedChangePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QPropertyNodeAddedChangePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qpropertynodeaddedchange.html" xrefstyle="class" annotations="QPropertyNodeAddedChange">QPropertyNodeAddedChange</db:link></db:code>.</db:para>
         <db:para>The <db:code>QPropertyValueRemovedChangeBasePtr</db:code> type is a typedef for <db:code>QFlags&lt;QPropertyNodeAddedChangePtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QPropertyNodeRemovedChangePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QPropertyNodeRemovedChangePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qpropertynoderemovedchange.html" xrefstyle="class" annotations="QPropertyNodeRemovedChange">QPropertyNodeRemovedChange</db:link></db:code>.</db:para>
         <db:para>The <db:code>QStaticPropertyUpdatedChangeBasePtr</db:code> type is a typedef for <db:code>QFlags&lt;QPropertyNodeRemovedChangePtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QPropertyUpdatedChangeBasePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QPropertyUpdatedChangeBasePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qpropertyupdatedchangebase.html" xrefstyle="class" annotations="QPropertyUpdatedChangeBase">QPropertyUpdatedChangeBase</db:link></db:code>.</db:para>
         <db:para>The <db:code>QDynamicPropertyUpdatedChangePtr</db:code> type is a typedef for <db:code>QFlags&lt;QPropertyUpdatedChangeBasePtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QPropertyUpdatedChangePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QPropertyUpdatedChangePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qpropertyupdatedchange.html" xrefstyle="class" annotations="QPropertyUpdatedChange">QPropertyUpdatedChange</db:link></db:code>.</db:para>
         <db:para>The <db:code>QPropertyValueAddedChangePtr</db:code> type is a typedef for <db:code>QFlags&lt;QPropertyUpdatedChangePtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QPropertyValueAddedChangeBasePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QPropertyValueAddedChangeBasePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qpropertyvalueaddedchangebase.html" xrefstyle="class" annotations="QPropertyValueAddedChangeBase">QPropertyValueAddedChangeBase</db:link></db:code>.</db:para>
         <db:para>The <db:code>QPropertyNodeAddedChangePtr</db:code> type is a typedef for <db:code>QFlags&lt;QPropertyValueAddedChangeBasePtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QPropertyValueAddedChangePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QPropertyValueAddedChangePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qpropertyvalueaddedchange.html" xrefstyle="class" annotations="QPropertyValueAddedChange">QPropertyValueAddedChange</db:link></db:code>.</db:para>
         <db:para>The <db:code>QPropertyValueRemovedChangePtr</db:code> type is a typedef for <db:code>QFlags&lt;QPropertyValueAddedChangePtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QPropertyValueRemovedChangeBasePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QPropertyValueRemovedChangeBasePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qpropertyvalueremovedchangebase.html" xrefstyle="class" annotations="QPropertyValueRemovedChangeBase">QPropertyValueRemovedChangeBase</db:link></db:code>.</db:para>
         <db:para>The <db:code>QPropertyNodeRemovedChangePtr</db:code> type is a typedef for <db:code>QFlags&lt;QPropertyValueRemovedChangeBasePtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QPropertyValueRemovedChangePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QPropertyValueRemovedChangePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qpropertyvalueremovedchange.html" xrefstyle="class" annotations="QPropertyValueRemovedChange">QPropertyValueRemovedChange</db:link></db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QSceneChangePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QSceneChangePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qscenechange.html" xrefstyle="class" annotations="QSceneChange">QSceneChange</db:link></db:code>.</db:para>
         <db:para>The <db:code>QNodeCreatedChangeBasePtr</db:code> type is a typedef for <db:code>QFlags&lt;QSceneChangePtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
      <db:section>
         <db:title>typedef QStaticPropertyUpdatedChangeBasePtr</db:title>
         <db:typedefsynopsis>
            <db:typedefname>Qt3DCore::QStaticPropertyUpdatedChangeBasePtr</db:typedefname>
         </db:typedefsynopsis>
         <db:para>A shared pointer for <db:code><db:link xlink:href="qt3dcore-qstaticpropertyupdatedchangebase.html" xrefstyle="class" annotations="QStaticPropertyUpdatedChangeBase">QStaticPropertyUpdatedChangeBase</db:link></db:code>.</db:para>
         <db:para>The <db:code>QPropertyUpdatedChangePtr</db:code> type is a typedef for <db:code>QFlags&lt;QStaticPropertyUpdatedChangeBasePtr&gt;</db:code>. It stores an OR combination of  values.</db:para>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Member Function Documentation</db:title>
      <db:section>
         <db:title>QDebug Qt3DCore::operator&lt;&lt;(QDebug d, Qt3DCore::QNodeId id)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QDebug</db:type>
            <db:methodname>operator&lt;&lt;</db:methodname>
            <db:methodparam>
               <db:type>QDebug</db:type>
               <db:parameter>d</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>Qt3DCore::QNodeId</db:type>
               <db:parameter>id</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>&lt;&lt; with <db:code role="argument">d</db:code> and <db:code role="argument">id</db:code>. Returns <db:code><db:link xlink:href="qdebug.html" xrefstyle="class" annotations="QDebug">QDebug</db:link></db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QNodeId Qt3DCore::qIdForNode(Qt3DCore::QNode *node)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>Qt3DCore::QNodeId</db:type>
            <db:methodname>qIdForNode</db:methodname>
            <db:methodparam>
               <db:type>Qt3DCore::QNode *</db:type>
               <db:parameter>node</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns node id for <db:code role="argument">node</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>Qt3DCore::QNodeIdVector Qt3DCore::qIdsForNodes(const T &amp;nodes)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>Qt3DCore::QNodeIdVector</db:type>
            <db:methodname>qIdsForNodes</db:methodname>
            <db:methodparam>
               <db:type>const T &amp;</db:type>
               <db:parameter>nodes</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns vector of node ids for <db:code role="argument">nodes</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>uint Qt3DCore::qHash(Qt3DCore::QNodeId id, uint seed)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>uint</db:type>
            <db:methodname>qHash</db:methodname>
            <db:methodparam>
               <db:type>Qt3DCore::QNodeId</db:type>
               <db:parameter>id</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>uint</db:type>
               <db:parameter>seed</db:parameter>
               <db:initializer>...</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns hash of node with <db:code role="argument">id</db:code> and optional <db:code role="argument">seed</db:code>.</db:para>
      </db:section>
   </db:section>
</db:article>
