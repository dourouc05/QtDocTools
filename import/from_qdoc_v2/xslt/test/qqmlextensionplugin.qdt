<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.2">
  <db:info>
    <db:title>QQmlExtensionPlugin</db:title>
    <db:abstract>
      <db:para>Abstract base for custom QML extension plugins</db:para>
    </db:abstract>
  </db:info>
  <db:classsynopsis>
    <db:ooclass>
      <db:classname>QQmlExtensionPlugin</db:classname>
    </db:ooclass>
    <db:classsynopsisinfo role="module">QtQml</db:classsynopsisinfo>
    <db:namespacesynopsisinfo role="headers">#include &lt;qqmlextensionplugin.h&gt;</db:namespacesynopsisinfo>
    <db:classsynopsisinfo role="since">5.0</db:classsynopsisinfo>
    <db:classsynopsisinfo role="inherits">QObject</db:classsynopsisinfo>
    <db:classsynopsisinfo role="group">plugins</db:classsynopsisinfo>
  </db:classsynopsis>
  <db:section xml:id="details">
    <db:title>Detailed Description</db:title>
    <db:para>The <db:code><db:link xlink:href="qqmlextensionplugin.html" xrefstyle="class" annotations="QQmlExtensionPlugin">QQmlExtensionPlugin</db:link></db:code> class provides an abstract base for custom QML extension plugins.</db:para>
    <db:para>
      <db:code><db:link xlink:href="qqmlextensionplugin.html" xrefstyle="class" annotations="QQmlExtensionPlugin">QQmlExtensionPlugin</db:link></db:code> is a plugin interface that makes it possible to create QML extensions that can be loaded dynamically into QML applications. These extensions allow custom QML types to be made available to the QML engine.</db:para>
    <db:para>To write a QML extension plugin:</db:para>
    <db:orderedlist>
      <db:listitem>
        <db:para>Subclass <db:code><db:link xlink:href="qqmlextensionplugin.html" xrefstyle="class" annotations="QQmlExtensionPlugin">QQmlExtensionPlugin</db:link></db:code>
        </db:para>
        <db:itemizedlist>
          <db:listitem>
            <db:para>Use the <db:code><db:link xlink:href="qtplugin.html#Q_PLUGIN_METADATA" xrefstyle="function" annotations="Q_PLUGIN_METADATA()">Q_PLUGIN_METADATA()</db:link></db:code> macro to register the plugin with the Qt meta object system</db:para>
          </db:listitem>
          <db:listitem>
            <db:para>Override the <db:code><db:link xlink:href="qqmlextensionplugin.html#registerTypes" xrefstyle="function" annotations="QQmlExtensionPlugin::registerTypes()">registerTypes()</db:link></db:code> method and call <db:code><db:link xlink:href="qqmlengine.html#qmlRegisterType-1" xrefstyle="function" annotations="qmlRegisterType()">qmlRegisterType()</db:link></db:code> to register the types to be exported by the plugin</db:para>
          </db:listitem>
        </db:itemizedlist>
      </db:listitem>
      <db:listitem>
        <db:para>Write a project file for the plugin</db:para>
      </db:listitem>
      <db:listitem>
        <db:para>Create a <db:link xlink:href="qtqml-modules-qmldir.html" xrefstyle="page" annotations="Module Definition qmldir Files">qmldir file</db:link> to describe the plugin</db:para>
      </db:listitem>
    </db:orderedlist>
    <db:para>QML extension plugins are for either application-specific or library-like plugins. Library plugins should limit themselves to registering types, as any manipulation of the engine's root context may cause conflicts or other issues in the library user's code.</db:para>
    <db:section xml:id="plugin-example">
      <db:title>Plugin Example</db:title>
      <db:para>Suppose there is a new <db:code>TimeModel</db:code> C++ class that should be made available as a new QML type. It provides the current time through <db:code>hour</db:code> and <db:code>minute</db:code> properties.</db:para>
      <db:programlisting>    </db:programlisting>
      <db:programlisting>    ...</db:programlisting>
      <db:para>To make this type available, we create a plugin class named <db:code>QExampleQmlPlugin</db:code> which is a subclass of <db:code><db:link xlink:href="qqmlextensionplugin.html" xrefstyle="class" annotations="QQmlExtensionPlugin">QQmlExtensionPlugin</db:link></db:code>. It overrides the <db:code><db:link xlink:href="qqmlextensionplugin.html#registerTypes" xrefstyle="function" annotations="QQmlExtensionPlugin::registerTypes()">registerTypes()</db:link></db:code> method in order to register the <db:code>TimeModel</db:code> type using <db:code><db:link xlink:href="qqmlengine.html#qmlRegisterType-1" xrefstyle="function" annotations="qmlRegisterType()">qmlRegisterType()</db:link></db:code>. It also uses the <db:code><db:link xlink:href="qtplugin.html#Q_PLUGIN_METADATA" xrefstyle="function" annotations="Q_PLUGIN_METADATA()">Q_PLUGIN_METADATA()</db:link></db:code> macro in the class definition to register the plugin with the Qt meta object system using a unique identifier for the plugin.</db:para>
      <db:programlisting/>
      <db:para>This registers the <db:code>TimeModel</db:code> class with version <db:code>1.0</db:code> of this plugin library, as a QML type called <db:code>Time</db:code>. The <db:code><db:link xlink:href="qtglobal.html#Q_ASSERT" xrefstyle="function" annotations="Q_ASSERT()">Q_ASSERT()</db:link></db:code> macro can ensure the type namespace is imported correctly by any QML components that use this plugin. The <db:link xlink:href="qtqml-cppintegration-definetypes.html" xrefstyle="page" annotations="Defining QML Types from C++">Defining QML Types from C++</db:link> article has more information about registering C++ types into the runtime.</db:para>
      <db:para>Additionally, the project file (<db:code>.pro</db:code>) defines the project as a plugin library, specifies it should be built into the <db:code>imports/TimeExample</db:code> directory, and registers the plugin target name and various other details:</db:para>
      <db:programlisting language="other">TEMPLATE = lib
        CONFIG += qt plugin
        QT += qml
        
        DESTDIR = imports/TimeExample
        TARGET = qmlqtimeexampleplugin
        SOURCES += qexampleqmlplugin.cpp</db:programlisting>
      <db:para>Finally, a <db:link xlink:href="qtqml-modules-qmldir.html" xrefstyle="page" annotations="Module Definition qmldir Files">qmldir file</db:link> is required in the <db:code>imports/TimeExample</db:code> directory to describe the plugin and the types that it exports. The plugin includes a <db:code>Clock.qml</db:code> file along with the <db:code>qmlqtimeexampleplugin</db:code> that is built by the project (as shown above in the <db:code>.pro</db:code> file) so both of these need to be specified in the <db:code>qmldir</db:code> file:</db:para>
      <db:programlisting>module TimeExample
        Clock 1.0 Clock.qml
        plugin qmlqtimeexampleplugin
      </db:programlisting>
      <db:para>To make things easier for this example, the TimeExample source directory is in <db:code>imports/TimeExample</db:code>, and we build <db:link xlink:href="configure-options.html#source-build-and-install-directories" xrefstyle="page" annotations="Source, Build, and Install Directories">in-source</db:link>. However, the structure of the source directory is not so important, as the <db:code>qmldir</db:code> file can specify paths to installed QML files.</db:para>
      <db:para>What is important is the name of the directory that the qmldir is installed into. When the user imports our module, the QML engine uses the <db:link xlink:href="qtqml-modules-qmldir.html#contents-of-a-module-definition-qmldir-file" xrefstyle="page" annotations="Contents of a Module Definition qmldir File">module identifier</db:link> (<db:code>TimeExample</db:code>) to find the plugin, and so the directory in which it is installed must match the module identifier.</db:para>
      <db:para>Once the project is built and installed, the new <db:code>Time</db:code> component is accessible by any QML component that imports the <db:code>TimeExample</db:code> module</db:para>
      <db:programlisting/>
      <db:para>The full source code is available in the <db:link xlink:href="qtqml-qmlextensionplugins-example.html" xrefstyle="page" annotations="qmlextensionplugins">plugins example</db:link>.</db:para>
      <db:para>The <db:link xlink:href="qtqml-tutorials-extending-qml-example.html" xrefstyle="page" annotations="Writing QML Extensions with C++">Writing QML Extensions with C++</db:link> tutorial also contains a chapter on creating QML plugins.</db:para>
      <db:para>Note that the <db:link xlink:href="qtquick-porting-qt5.html" xrefstyle="page" annotations="Qt Quick 1">Qt Quick 1</db:link> version is called QDeclarativeExtensionPlugin.</db:para>
    </db:section>
    <db:para>
      <db:emphasis role="bold">See Also:</db:emphasis>
      <db:simplelist type="vert">
        <db:member>
          <db:code><db:link xlink:href="qqmlengine.html#importPlugin" xrefstyle="function" annotations="QQmlEngine::importPlugin()">QQmlEngine::importPlugin()</db:link></db:code>
        </db:member>
        <db:member>
          <db:link xlink:href="plugins-howto.html" xrefstyle="page" annotations="How to Create Qt Plugins">How to Create Qt Plugins</db:link>
        </db:member>
      </db:simplelist>
    </db:para>
  </db:section>
  <db:section>
    <db:title>Member Function Documentation</db:title>
    <db:section>
      <db:title> QQmlExtensionPlugin::QQmlExtensionPlugin(QObject *parent)</db:title>
      <db:constructorsynopsis>
        <db:modifier>public</db:modifier>
        <db:methodname>QQmlExtensionPlugin</db:methodname>
        <db:methodparam>
          <db:type>QObject *</db:type>
          <db:parameter>parent</db:parameter>
          <db:initializer>nullptr</db:initializer>
        </db:methodparam>
      </db:constructorsynopsis>
      <db:para>Constructs a QML extension plugin with the given <db:code role="argument">parent</db:code>.</db:para>
      <db:para>Note that this constructor is invoked automatically by the <db:code><db:link xlink:href="qtplugin.html#Q_PLUGIN_METADATA" xrefstyle="function" annotations="Q_PLUGIN_METADATA()">Q_PLUGIN_METADATA()</db:link></db:code> macro, so there is no need for calling it explicitly.</db:para>
    </db:section>
    <db:section>
      <db:title>QUrl QQmlExtensionPlugin::baseUrl() const</db:title>
      <db:methodsynopsis>
        <db:modifier>public</db:modifier>
        <db:type>QUrl</db:type>
        <db:methodname>baseUrl</db:methodname>
        <db:void/>
      </db:methodsynopsis>
      <db:para>Returns the URL of the directory from which the extension is loaded.</db:para>
      <db:para>This is useful when the plugin also needs to load QML files or other assets from the same directory.</db:para>
      <db:para>This property was introduced in Qt 5.1.</db:para>
    </db:section>
  </db:section>
</db:article>
