<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <page name="04-qdoc-commands-textmarkup.html" href="04-qdoc-commands-textmarkup.html" status="active" location="qdoc-manual-markupcmds.qdoc" filepath="C:/Qt/5.11.1/Src/qttools/src/qdoc/doc/qdoc-manual-markupcmds.qdoc" lineno="110" subtype="page" title="Text Markup" fulltitle="Text Markup" subtitle="" module="QDoc">
            <target name="a-command"/>
            <target name="c-command"/>
            <target name="div-command"/>
            <target name="span-command"/>
            <target name="tt-command"/>
            <target name="b-command"/>
            <target name="e-command"/>
            <target name="sub-command"/>
            <target name="sup-command"/>
            <target name="uicontrol-command"/>
            <target name="underline-command"/>
            <target name="backslash-command"/>
            <contents name="a-parameter-marker" title="\a (parameter marker)" level="1"/>
            <contents name="c-code-font" title="\c (code font)" level="1"/>
            <contents name="div" title="\div" level="1"/>
            <contents name="span" title="\span" level="1"/>
            <contents name="tt-teletype-font" title="\tt (teletype font)" level="1"/>
            <contents name="b" title="\b" level="1"/>
            <contents name="e-emphasis-italics" title="\e (emphasis, italics)" level="1"/>
            <contents name="sub" title="\sub" level="1"/>
            <contents name="sup" title="\sup" level="1"/>
            <contents name="uicontrol" title="\uicontrol" level="1"/>
            <contents name="underline" title="\underline" level="1"/>
            <contents name="double-backslash" title="\\ (double backslash)" level="1"/>
            <description path="C:/Qt/5.11.1/Src/qttools/src/qdoc/doc/qdoc-manual-markupcmds.qdoc" line="110" column="4">
                <relation href="05-qdoc-commands-documentstructure.html" type="page" meta="next" description="Document Structure"/>
                <relation href="03-qdoc-commands-markup.html" type="page" meta="previous" description="Markup Commands"/>
                <relation href="qdoc-index.html" type="page" meta="contents" description="QDoc Manual"/>
                <para>The text formatting commands indicate how text is to be rendered.</para>
                <target name="a-command"/>
                <section id="a-parameter-marker">
                    <heading level="1">\a (parameter marker)</heading>
                    <para>The \a command tells QDoc the next word is a formal parameter name.</para>
                    <para>A warning is emitted when a formal parameter is not documented or is misspelled, so when you document a function you should mention each formal parameter by name in the function description, preceded by the \a command. The parameter name is then rendered in italics.</para>
                    <code>/ *!
   Constructs a line edit containing the text
   \a contents. The \a parent parameter is sent
   to the QWidget constructor.
* /

QLineEdit::QLineEdit(const QString &amp;contents, QWidget *parent) :QWidget(parent)
{
   ...
}</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>
                            <bold>
                                <link raw="QLineEdit::QLineEdit" href="qlineedit.html" type="class">QLineEdit::QLineEdit</link> ( const <link raw="QString" href="qstring.html" type="class">QString</link> &amp; contents, <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> *parent )</bold></para>
                        <para>Constructs a line edit containing the text <argument>contents</argument>. The <argument>parent</argument> parameter is sent to the <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> constructor.</para>
                    </quote>
                    <para>The formal parameter name may be enclosed between curly brackets, but that isn't required.</para>
                    <target name="c-command"/>
                </section>
                <section id="c-code-font">
                    <heading level="1">\c (code font)</heading>
                    <para>The \c command is used for rendering variable names, user-defined class names, and C++ keywords (for example, <teletype type="highlighted">int</teletype> and <teletype type="highlighted">for</teletype>) in the code font.</para>
                    <para>The command renders its argument using a monospace font. For example:</para>
                    <code>/ *!
  The \c AnalogClock class provides a clock widget with hour
  and minute hands that is automatically updated every
  few seconds.
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>The <teletype type="highlighted">AnalogClock</teletype> class provides a clock widget with hour and minute hands, which are automatically updated every few seconds.</para>
                    </quote>
                    <para>If the text to be rendered in the code font contains spaces, enclose the entire text in curly brackets.</para>
                    <code>\c {QLineEdit::QLineEdit(const QString &amp;contents, QWidget *parent) :QWidget(parent)}</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>
                            <teletype type="highlighted">QLineEdit::QLineEdit(const QString &amp;contents, QWidget *parent) :QWidget(parent)</teletype></para>
                    </quote>
                    <para>The \c command accepts the special character <teletype type="highlighted">\</teletype> within its argument, which renders it as a normal character. So if you want to use nested commands, you must use the <link raw="tt-command" href="04-qdoc-commands-textmarkup.html#tt-command" type="page" page="Text Markup">teletype (\tt)</link> command instead.</para>
                    <para>See also <link raw="tt-command" href="04-qdoc-commands-textmarkup.html#tt-command" type="page" page="Text Markup">\tt</link> and <link raw="code-command" href="06-qdoc-commands-includecodeinline.html#code-command" type="page" page="Including Code Inline">\code</link>.</para>
                    <target name="div-command"/>
                </section>
                <section id="div">
                    <heading level="1">\div</heading>
                    <para>The \div and \enddiv commands delimit a large or small block of text (which may include other QDoc commands) to which special formatting attributes should be applied.</para>
                    <para>An argument must be provided in curly braces, as in the qdoc comment shown below. The argument is not interpreted but is used as attribute(s) of the tag that is output by qdoc.</para>
                    <para>For example, we might want to render an inline image so that it floats to the right of the current block of text:</para>
                    <code>/ *!
   \div {class=&quot;float-right&quot;}
     \inlineimage qml-column.png
   \enddiv

* /</code>
                    <para>If qdoc is generating HTML, it will translate these commands to:</para>
                    <code>&lt;div class=&quot;float-right&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/qml-column.png&quot; /&gt;&lt;/p&gt;&lt;/div&gt;</code>
                    <para>For HTML, the attribute value <italic>float-right</italic> then will refer to a clause in the style.css file, which in this case could be:</para>
                    <code>div.float-right
{
   float: right; margin-left: 2em
}</code>
                    <para>If qdoc is generating DITA XML, it will translate the commands to:</para>
                    <code>&lt;sectiondiv outputclass=&quot;float-right&quot;&gt;
    &lt;p&gt;
        &lt;fig&gt;
            &lt;image href=&quot;images/qml-column.png&quot; placement=&quot;inline&quot;/&gt;
        &lt;/fig&gt;
    &lt;/p&gt;
&lt;/sectiondiv&gt;</code>
                    <para>Your DITA XML publishing program must then recognize the <italic>outputclass</italic> attribute value.</para>
                    <para>
                        <bold>Note:</bold> Note that the <bold>\div</bold> command can be nested.</para>
                    <para>Below you can find an example taken from the index.qdoc file used to generate index.html for Qt 4.7:</para>
                    <code>\div {class=&quot;indexbox guide&quot;}
    \div {class=&quot;heading&quot;}
        Qt Developer Guide
\enddiv
    \div {class=&quot;indexboxcont indexboxbar&quot;}
        \div {class=&quot;section indexIcon&quot;} \emptyspan
        \enddiv
        \div {class=&quot;section&quot;}
            Qt is a cross-platform application and UI
            framework. Using Qt, you can write web-enabled
            applications once and deploy them across desktop,
            mobile and embedded operating systems without
            rewriting the source code.
        \enddiv
        \div {class=&quot;section sectionlist&quot;}
            \list
               \li \l{Getting Started}
               \li \l{Installation} {Installation}
               \li \l{how-to-learn-qt.html} {How to learn Qt}
               \li \l{tutorials.html} {Tutorials}
               \li \l{Qt Examples} {Examples}
               \li \l{qt4-7-intro.html} {What's new in Qt 4.7}
            \endlist
        \enddiv
    \enddiv
\enddiv</code>
                    <para>When all the class attribute values are defined as they are in the style.css file that is used for rendering the Qt documentation, the above example is rendered as:</para>
                    <para>Qt Developer Guide</para>
                    <raw format="HTML">&lt;span&gt;&lt;/span&gt;</raw>
                    <para>Qt is a cross-platform application and UI framework. Using Qt, you can write web-enabled applications once and deploy them across desktop, mobile and embedded operating systems without rewriting the source code.</para>
                    <list type="bullet">
                        <item>
                            <para>Getting Started</para>
                        </item>
                        <item>
                            <para>Installation</para>
                        </item>
                        <item>
                            <para>How to learn Qt</para>
                        </item>
                        <item>
                            <para>Tutorials</para>
                        </item>
                        <item>
                            <para>Examples</para>
                        </item>
                        <item>
                            <para>What's new in Qt 4.7</para>
                        </item>
                    </list>
                    <para>When generating DITA XML, qdoc outputs the nested <italic>div</italic> commands as:</para>
                    <code>&lt;sectiondiv outputclass=&quot;indexbox guide&quot;&gt;
    &lt;sectiondiv outputclass=&quot;heading&quot;&gt;
        &lt;p&gt;Qt Developer Guide&lt;/p&gt;
    &lt;/sectiondiv&gt;
    &lt;sectiondiv outputclass=&quot;indexboxcont indexboxbar&quot;&gt;
        &lt;sectiondiv outputclass=&quot;section indexIcon&quot;/&gt;
        &lt;sectiondiv outputclass=&quot;section&quot;&gt;
            &lt;p&gt;Qt is a cross-platform application and UI
               framework. Using Qt, you can write
               web-enabled applications once and deploy
               them across desktop, mobile and embedded
               operating systems without rewriting the
               source code.
            &lt;/p&gt;
        &lt;/sectiondiv&gt;
        &lt;sectiondiv outputclass=&quot;section sectionlist&quot;&gt;
            &lt;ul&gt;
                &lt;li&gt;
                    &lt;xref href=&quot;gettingstarted.xml#id-606ee7a8-219b-47b7-8f94-91bc8c76e54c&quot;&gt;Getting started&lt;/xref&gt;
                &lt;/li&gt;
                &lt;li&gt;
                    &lt;xref href=&quot;installation.xml#id-075c20e2-aa1e-4f88-a316-a46517e50443&quot;&gt;Installation&lt;/xref&gt;
                &lt;/li&gt;
                &lt;li&gt;
                    &lt;xref href=&quot;how-to-learn-qt.xml#id-49f509b5-52f9-4cd9-9921-74217b9a5182&quot;&gt;How to learn Qt&lt;/xref&gt;
                &lt;/li&gt;
                &lt;li&gt;
                    &lt;xref href=&quot;tutorials.xml#id-a737f955-a904-455f-b4aa-0dc69ed5a64f&quot;&gt;Tutorials&lt;/xref&gt;
                &lt;/li&gt;
                &lt;li&gt;
                    &lt;xref href=&quot;all-examples.xml#id-98d95159-d65b-4706-b08f-13d80080448d&quot;&gt;Examples&lt;/xref&gt;
                &lt;/li&gt;
                &lt;li&gt;
                    &lt;xref href=&quot;qt4-7-intro.xml#id-519ae0e3-4242-4c2a-b2be-e05d1e95f177&quot;&gt;What's new in Qt 4.7&lt;/xref&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
        &lt;/sectiondiv&gt;
    &lt;/sectiondiv&gt;
&lt;/sectiondiv&gt;</code>
                    <para>Your DITA XML publishing program must recognize the values of the <italic>outputclass</italic> attribute.</para>
                    <para>See also <link raw="span-command" href="04-qdoc-commands-textmarkup.html#span-command" type="page" page="Text Markup">\span</link>.</para>
                    <target name="span-command"/>
                </section>
                <section id="span">
                    <heading level="1">\span</heading>
                    <para>The \span command applies special formatting to a small block of text.</para>
                    <para>Two arguments must be provided, each argument in curly braces, as shown in the QDoc comment below. The first argument is not interpreted, but specifies the formatting attribute(s) of the tag output by QDoc. The second argument is the text to be rendered with the special formatting attributes.</para>
                    <para>For example, we might want to render the first word of each element in a numeric list in blue.</para>
                    <code>/ *!
    Global variables with complex types:
\list 1
        \li \span {class=&quot;variableName&quot;} {mutableComplex1} in globals.cpp at line 14
        \li \span {class=&quot;variableName&quot;} {mutableComplex2} in globals.cpp at line 15
        \li \span {class=&quot;variableName&quot;} {constComplex1} in globals.cpp at line 16
        \li \span {class=&quot;variableName&quot;} {constComplex2} in globals.cpp at line 17
    \endlist
* /</code>
                    <para>Class <italic>variableName</italic> refers to a clause in your style.css.</para>
                    <code>.variableName
{
    font-family: courier;
color: blue
}</code>
                    <para>Using the <italic>variableName</italic> clause shown above, the example is rendered as:</para>
                    <para>Global variables with complex types:</para>
                    <list type="ordered" start="1">
                        <item>
                            <para>mutableComplex1 in globals.cpp at line 14</para>
                        </item>
                        <item>
                            <para>mutableComplex2 in globals.cpp at line 15</para>
                        </item>
                        <item>
                            <para>constComplex1 in globals.cpp at line 16</para>
                        </item>
                        <item>
                            <para>constComplex2 in globals.cpp at line 17</para>
                        </item>
                    </list>
                    <para>
                        <bold>Note:</bold> The <bold>span</bold> command does not cause a new paragraph to be started.</para>
                    <para>See also <link raw="div-command" href="04-qdoc-commands-textmarkup.html#div-command" type="page" page="Text Markup">\div</link>.</para>
                    <target name="tt-command"/>
                </section>
                <section id="tt-teletype-font">
                    <heading level="1">\tt (teletype font)</heading>
                    <para>The \tt command renders its argument in a monospace font. This command behaves just like the <link raw="c-command" href="04-qdoc-commands-textmarkup.html#c-command" type="page" page="Text Markup">\c</link> command, except that \tt allows you to nest QDoc commands within the argument (e.g. <link raw="e-command" href="04-qdoc-commands-textmarkup.html#e-command" type="page" page="Text Markup">\e</link>, <link raw="b-command" href="04-qdoc-commands-textmarkup.html#b-command" type="page" page="Text Markup">\b</link> and <link raw="underline-command" href="04-qdoc-commands-textmarkup.html#underline-command" type="page" page="Text Markup">\underline</link>).</para>
                    <code>/ *!
    After having populated the main container with
    child widgets, \c setupUi() scans the main container's list of
    slots for names with the form
    \tt{on_\e{objectName}_\e{signalName}().}
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>After having populated the main container with child widgets, <teletype type="highlighted">setupUi()</teletype> scans the main container's list of slots for names with the form <teletype>on_<italic>objectName</italic>_<italic>signalName</italic>().</teletype></para>
                    </quote>
                    <para>If the text to be rendered in the code font contains spaces, enclose the entire text in curly brackets.</para>
                    <code>\tt {QLineEdit::QLineEdit(const QString &amp;contents, QWidget *parent) :QWidget(parent)}</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>
                            <teletype>
                                <link raw="QLineEdit::QLineEdit" href="qlineedit.html" type="class">QLineEdit::QLineEdit</link>(const <link raw="QString" href="qstring.html" type="class">QString</link> &amp;contents, <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> *parent) :<link raw="QWidget" href="qwidget.html" type="class">QWidget</link>(parent)</teletype></para>
                    </quote>
                    <para>See also <link raw="c-command" href="04-qdoc-commands-textmarkup.html#c-command" type="page" page="Text Markup">\c</link>.</para>
                    <target name="b-command"/>
                </section>
                <section id="b">
                    <heading level="1">\b</heading>
                    <para>The \b command renders its argument in bold font. This command used to be called \bold.</para>
                    <code>/ *!
    This is regular text; \b {this text is
    rendered using the \\b command}.
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>This is regular text; <bold>this text is rendered using the \b command</bold>.</para>
                    </quote>
                    <target name="e-command"/>
                </section>
                <section id="e-emphasis-italics">
                    <heading level="1">\e (emphasis, italics)</heading>
                    <para>The \e command renders its argument in a special font, normally italics. This command used to be called \i, which is now deprecated.</para>
                    <para>If the argument contains spaces or other punctuation, enclose the argument in curly brackets.</para>
                    <code>/ *!
    Here, we render \e {a few words} in italics.
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>Here, we render <italic>a few words</italic> in italics.</para>
                    </quote>
                    <para>If you want to use other QDoc commands within an argument that contains spaces, you always need to enclose the argument in braces. But QDoc is smart enough to count parentheses [3], so you don't need braces in cases like this:</para>
                    <code>/ *!
    An argument can sometimes contain whitespaces,
    for example: \e QPushButton(tr(&quot;A Brand New Button&quot;))
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>An argument can sometimes contain whitespaces, for example: <italic>QPushButton(tr(&quot;A Brand New Button&quot;))</italic></para>
                    </quote>
                    <para>Finally, trailing punctuation is not included in an argument [4], nor is &quot;'s&quot; [5]</para>
                    <raw format="HTML">        &lt;table align=&quot;center&quot; cellpadding=&quot;2&quot;
           cellspacing=&quot;1&quot; border=&quot;0&quot;&gt;
        &lt;tr valign=&quot;top&quot; bgcolor=&quot;#a2c511&quot;&gt;
            &lt;th&gt;&lt;/th&gt;
            &lt;th&gt;QDoc Syntax&lt;/th&gt;
            &lt;th&gt;Generated Documentation&lt;/th&gt;
        &lt;/tr&gt;

        &lt;tr valign=&quot;top&quot; bgcolor=&quot;#d0d0d0&quot;&gt;
           &lt;td&gt;1&lt;/td&gt;
            &lt;td&gt;A variation of a command button is a \e menu
                button.&lt;/td&gt;
            &lt;td&gt;A variation of a command button is a &lt;i&gt;menu&lt;/i&gt;
                button.&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr valign=&quot;top&quot; bgcolor=&quot;#c0c0c0&quot;&gt;
            &lt;td&gt;2&lt;/td&gt;
            &lt;td&gt;The QPushButton widget provides a
                \e {command button}.&lt;/td&gt;
            &lt;td&gt;The QPushButton widget provides a
                &lt;i&gt;command button&lt;/i&gt;.&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr valign=&quot;top&quot; bgcolor=&quot;#d0d0d0&quot;&gt;
            &lt;td&gt;3&lt;/td&gt;
            &lt;td&gt;Another class of buttons are option buttons
                \e (see QRadioButton).&lt;/td&gt;
            &lt;td&gt;Another class of buttons are option buttons
                &lt;i&gt; (see QRadioButton)&lt;/i&gt;.&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr valign=&quot;top&quot; bgcolor=&quot;#c0c0c0&quot;&gt;
            &lt;td&gt;4&lt;/td&gt;
            &lt;td&gt;A push button emits the signal \e clicked().&lt;/td&gt;
            &lt;td&gt;A push button emits the signal &lt;i&gt;clicked&lt;/i&gt;().&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr valign=&quot;top&quot; bgcolor=&quot;#d0d0d0&quot;&gt;
            &lt;td&gt;5&lt;/td&gt;
            &lt;td&gt;The \e QPushButton's checked property is
                false by default.&lt;/td&gt;
            &lt;td&gt;The &lt;i&gt;QPushButton&lt;/i&gt;'s checked property is
                false by default.&lt;/td&gt;
        &lt;/tr&gt;

        &lt;/table&gt;
    </raw>
                    <target name="sub-command"/>
                </section>
                <section id="sub">
                    <heading level="1">\sub</heading>
                    <para>The \sub command renders its argument lower than the baseline of the regular text, using a smaller font.</para>
                    <code>/ *!
    Definition (Range): Consider the sequence
    {x\sub n}\sub {n &gt; 1} . The set

    {x\sub 2, x\sub 3, x\sub 4, ...} = {x\sub n ; n = 2, 3, 4, ...}

    is called the range of the sequence.
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>Definition (Range): Consider the sequence {x<subscript>n</subscript>}<subscript>n &gt; 1</subscript> . The set</para>
                        <para>{x<subscript>2</subscript>, x<subscript>3</subscript>, x<subscript>4</subscript>, ...} = {x<subscript>n</subscript> ; n = 2, 3, 4, ...}</para>
                        <para>is called the range of the sequence.</para>
                    </quote>
                    <para>If the argument contains spaces or other punctuation, enclose the argument in curly brackets.</para>
                    <target name="sup-command"/>
                </section>
                <section id="sup">
                    <heading level="1">\sup</heading>
                    <para>The \sup command renders its argument higher than the baseline of the regular text, using a smaller font.</para>
                    <code>/ *!
    The series

    1 + a + a\sup 2 + a\sup 3 + a\sup 4 + ...

    is called the \i {geometric series}.
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>The series</para>
                        <para>1 + a + a<superscript>2</superscript> + a<superscript>3</superscript> + a<superscript>4</superscript> + ...</para>
                        <para>is called the <italic>geometric series</italic>.</para>
                    </quote>
                    <para>If the argument contains spaces or other punctuation, enclose the argument in curly brackets.</para>
                    <target name="uicontrol-command"/>
                </section>
                <section id="uicontrol">
                    <heading level="1">\uicontrol</heading>
                    <para>The \uicontrol command is used to mark content as being used for UI control elements. When using HTML, the output is rendered in bold. When using DITA XML the content is enclosed in a <teletype type="highlighted">uicontrol</teletype> tag.</para>
                    <target name="underline-command"/>
                </section>
                <section id="underline">
                    <heading level="1">\underline</heading>
                    <para>The \underline command renders its argument underlined.</para>
                    <code>/ *!
    The \underline {F}ile menu gives the users the possibility
    to edit an existing file, or save a new or modified
    file, and exit the application.
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>The <underline>F</underline>ile menu gives the users the possibility to edit an existing file, or save a new or modified file, and exit the application.</para>
                    </quote>
                    <para>If the argument contains spaces or other punctuation, enclose the argument in curly brackets.</para>
                    <target name="backslash-command"/>
                </section>
                <section id="double-backslash">
                    <heading level="1">\\ (double backslash)</heading>
                    <para>The \\ command expands to a double backslash.</para>
                    <para>QDoc commands always start with a single backslash. To display a single backslash in the text you need to type two backslashes. If you want to display two backslashes, you need to type four.</para>
                    <code>/ *!
    The \\\\ command is useful if you want a
    backslash to appear verbatim, for example,
    writing C:\\windows\\home\\.
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>The \\ command is useful if you want a backslash to appear verbatim, for example, writing C:\windows\home\.</para>
                    </quote>
                    <para>However, if you want your text to appear in a monospace font as well, you can use the <link raw="c-command" href="04-qdoc-commands-textmarkup.html#c-command" type="page" page="Text Markup">\c</link> command instead, which accepts and renders the backslash as any other character. For example:</para>
                    <code>/ *!
    The \\c command is useful if you want a
    backslash to appear verbatim, and the word
    that contains it written in a monospace font,
    like this: \c {C:\windows\home\}.
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>The \c command is useful if you want a backslash to appear verbatim, and the word that contains it written in a monospace font, like this: <teletype type="highlighted">C:\windows\home\</teletype>.</para>
                    </quote>
                </section>
                <see-also>
                    <link raw="\b" href="04-qdoc-commands-textmarkup.html#b" type="page" page="Text Markup">\b</link>
                </see-also>
            </description>
        </page>
    </document>
</WebXML>
