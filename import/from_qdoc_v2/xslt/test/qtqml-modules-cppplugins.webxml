<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <page name="qtqml-modules-cppplugins.html" href="qtqml-modules-cppplugins.html" status="active" location="cppplugins.qdoc" filepath="C:/Qt/5.11.1/Src/qtdeclarative/src/qml/doc/src/qmllanguageref/modules/cppplugins.qdoc" lineno="28" subtype="page" title="Creating C++ Plugins for QML" fulltitle="Creating C++ Plugins for QML" subtitle="" module="QtQml" brief="Description of how to write C++ plugins for QML">
            <contents name="creating-a-plugin" title="Creating a Plugin" level="1"/>
            <contents name="plugin-example" title="Plugin Example" level="1"/>
            <contents name="reference" title="Reference" level="1"/>
            <description path="C:/Qt/5.11.1/Src/qtdeclarative/src/qml/doc/src/qmllanguageref/modules/cppplugins.qdoc" line="28" column="4">
                <brief>Description of how to write C++ plugins for QML</brief>
                <section id="creating-a-plugin">
                    <heading level="1">Creating a Plugin</heading>
                    <para>The <link raw="QQmlEngine" href="qqmlengine.html" type="class">QML engine</link> loads C++ plugins for QML. Such plugins are usually provided in a QML extension module, and can provide types for use by clients in QML documents which import the module. A module requires at least one type registered in order to be considered valid.</para>
                    <para>
                        <link raw="QQmlExtensionPlugin" href="qqmlextensionplugin.html" type="class">QQmlExtensionPlugin</link> is a plugin interface that makes it possible to create QML extensions that can be loaded dynamically into QML applications. These extensions allow custom QML types to be made available to the QML engine.</para>
                    <para>To write a QML extension plugin:</para>
                    <list type="ordered" start="1">
                        <item>
                            <para>Subclass <link raw="QQmlExtensionPlugin" href="qqmlextensionplugin.html" type="class">QQmlExtensionPlugin</link></para>
                            <list type="bullet">
                                <item>
                                    <para>Use the <link raw="Q_PLUGIN_METADATA()" href="qtplugin.html#Q_PLUGIN_METADATA" type="function">Q_PLUGIN_METADATA()</link> macro to register the plugin with the Qt meta object system</para>
                                </item>
                                <item>
                                    <para>Override the <link raw="QQmlExtensionPlugin::registerTypes()" href="qqmlextensionplugin.html#registerTypes" type="function">registerTypes()</link> method and call <link raw="qmlRegisterType()" href="qqmlengine.html#qmlRegisterType-1" type="function">qmlRegisterType()</link> to register the types to be exported by the plugin</para>
                                </item>
                            </list>
                        </item>
                        <item>
                            <para>Write a project file for the plugin</para>
                        </item>
                        <item>
                            <para>Create a <link raw="Module Definition qmldir Files" href="qtqml-modules-qmldir.html" type="page" page="Module Definition qmldir Files">qmldir file</link> to describe the plugin</para>
                        </item>
                    </list>
                    <para>QML extension plugins are for either application-specific or library-like plugins. Library plugins should limit themselves to registering types, as any manipulation of the engine's root context may cause conflicts or other issues in the library user's code.</para>
                </section>
                <section id="plugin-example">
                    <heading level="1">Plugin Example</heading>
                    <para>Suppose there is a new <teletype type="highlighted">TimeModel</teletype> C++ class that should be made available as a new QML type. It provides the current time through <teletype type="highlighted">hour</teletype> and <teletype type="highlighted">minute</teletype> properties.</para>
                    <snippet location="qmlextensionplugins/plugin.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/qmlextensionplugins/plugin.cpp" identifier="0"/>
                    <dots indent="4">...</dots>
                    <para>To make this type available, we create a plugin class named <teletype type="highlighted">QExampleQmlPlugin</teletype> which is a subclass of <link raw="QQmlExtensionPlugin" href="qqmlextensionplugin.html" type="class">QQmlExtensionPlugin</link>. It overrides the <link raw="QQmlExtensionPlugin::registerTypes()" href="qqmlextensionplugin.html#registerTypes" type="function">registerTypes()</link> method in order to register the <teletype type="highlighted">TimeModel</teletype> type using <link raw="qmlRegisterType()" href="qqmlengine.html#qmlRegisterType-1" type="function">qmlRegisterType()</link>. It also uses the <link raw="Q_PLUGIN_METADATA()" href="qtplugin.html#Q_PLUGIN_METADATA" type="function">Q_PLUGIN_METADATA()</link> macro in the class definition to register the plugin with the Qt meta object system using a unique identifier for the plugin.</para>
                    <snippet location="qmlextensionplugins/plugin.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/qmlextensionplugins/plugin.cpp" identifier="plugin"/>
                    <para>This registers the <teletype type="highlighted">TimeModel</teletype> class with version <teletype type="highlighted">1.0</teletype> of this plugin library, as a QML type called <teletype type="highlighted">Time</teletype>. The <link raw="Q_ASSERT()" href="qtglobal.html#Q_ASSERT" type="function">Q_ASSERT()</link> macro can ensure the type namespace is imported correctly by any QML components that use this plugin. The <link raw="Defining QML Types from C++" href="qtqml-cppintegration-definetypes.html" type="page" page="Defining QML Types from C++">Defining QML Types from C++</link> article has more information about registering C++ types into the runtime.</para>
                    <para>Additionally, the project file (<teletype type="highlighted">.pro</teletype>) defines the project as a plugin library, specifies it should be built into the <teletype type="highlighted">imports/TimeExample</teletype> directory, and registers the plugin target name and various other details:</para>
                    <code>TEMPLATE = lib
CONFIG += qt plugin
QT += qml

DESTDIR = imports/TimeExample
TARGET = qmlqtimeexampleplugin
SOURCES += qexampleqmlplugin.cpp</code>
                    <para>Finally, a <link raw="Module Definition qmldir Files" href="qtqml-modules-qmldir.html" type="page" page="Module Definition qmldir Files">qmldir file</link> is required in the <teletype type="highlighted">imports/TimeExample</teletype> directory to describe the plugin and the types that it exports. The plugin includes a <teletype type="highlighted">Clock.qml</teletype> file along with the <teletype type="highlighted">qmlqtimeexampleplugin</teletype> that is built by the project (as shown above in the <teletype type="highlighted">.pro</teletype> file) so both of these need to be specified in the <teletype type="highlighted">qmldir</teletype> file:</para>
                    <quotefile>qmlextensionplugins/imports/TimeExample/qmldir</quotefile>
                    <para>To make things easier for this example, the TimeExample source directory is in <teletype type="highlighted">imports/TimeExample</teletype>, and we build <link raw="Source, Build, and Install Directories" href="configure-options.html#source-build-and-install-directories" type="page" page="Qt Configure Options">in-source</link>. However, the structure of the source directory is not so important, as the <teletype type="highlighted">qmldir</teletype> file can specify paths to installed QML files.</para>
                    <para>What is important is the name of the directory that the qmldir is installed into. When the user imports our module, the QML engine uses the <link raw="Contents of a Module Definition qmldir File" href="qtqml-modules-qmldir.html#contents-of-a-module-definition-qmldir-file" type="page" page="Module Definition qmldir Files">module identifier</link> (<teletype type="highlighted">TimeExample</teletype>) to find the plugin, and so the directory in which it is installed must match the module identifier.</para>
                    <para>Once the project is built and installed, the new <teletype type="highlighted">Time</teletype> component is accessible by any QML component that imports the <teletype type="highlighted">TimeExample</teletype> module</para>
                    <snippet location="qmlextensionplugins/plugins.qml" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/qmlextensionplugins/plugins.qml" identifier="0"/>
                    <para>The full source code is available in the <link raw="qmlextensionplugins" href="qtqml-qmlextensionplugins-example.html" type="page" page="QML Plugin Example">plugins example</link>.</para>
                </section>
                <section id="reference">
                    <heading level="1">Reference</heading>
                    <list type="bullet">
                        <item>
                            <para>
                                <link raw="Writing QML Extensions with C++" href="qtqml-tutorials-extending-qml-example.html" type="page" page="Writing QML Extensions with C++">Writing QML Extensions with C++</link> - contains a chapter on creating QML plugins.</para>
                        </item>
                        <item>
                            <para>
                                <link raw="Defining QML Types from C++" href="qtqml-cppintegration-definetypes.html" type="page" page="Defining QML Types from C++">Defining QML Types from C++</link> - information about registering C++ types into the runtime.</para>
                        </item>
                        <item>
                            <para>
                                <link raw="How to Create Qt Plugins" href="plugins-howto.html" type="page" page="How to Create Qt Plugins">How to Create Qt Plugins</link> - information about Qt plugins</para>
                        </item>
                    </list>
                </section>
            </description>
        </page>
    </document>
</WebXML>
