<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.2">
  <db:info>
    <db:title>QStylePlugin</db:title>
    <db:abstract>
      <db:para>Abstract base for custom QStyle plugins</db:para>
    </db:abstract>
  </db:info>
  <db:classsynopsis>
    <db:ooclass>
      <db:classname>QStylePlugin</db:classname>
    </db:ooclass>
    <db:classsynopsisinfo role="module">QtWidgets</db:classsynopsisinfo>
    <db:namespacesynopsisinfo role="headers">#include &lt;qstyleplugin.h&gt;</db:namespacesynopsisinfo>
    <db:classsynopsisinfo role="inherits">QObject</db:classsynopsisinfo>
    <db:classsynopsisinfo role="group">plugins</db:classsynopsisinfo>
  </db:classsynopsis>
  <db:section xml:id="details">
    <db:title>Detailed Description</db:title>
    <db:para>The <db:code><db:link xlink:href="qstyleplugin.html" xrefstyle="class" annotations="QStylePlugin">QStylePlugin</db:link></db:code> class provides an abstract base for custom <db:code><db:link xlink:href="qstyle.html" xrefstyle="class" annotations="QStyle">QStyle</db:link></db:code> plugins.</db:para>
    <db:para>
      <db:code><db:link xlink:href="qstyleplugin.html" xrefstyle="class" annotations="QStylePlugin">QStylePlugin</db:link></db:code> is a simple plugin interface that makes it easy to create custom styles that can be loaded dynamically into applications using the <db:code><db:link xlink:href="qstylefactory.html" xrefstyle="class" annotations="QStyleFactory">QStyleFactory</db:link></db:code> class.</db:para>
    <db:para>Writing a style plugin is achieved by subclassing this base class, reimplementing the pure virtual <db:code><db:link xlink:href="qstyleplugin.html#create" xrefstyle="function" annotations="create()">create()</db:link></db:code> function, and exporting the class using the <db:code><db:link xlink:href="qtplugin.html#Q_PLUGIN_METADATA" xrefstyle="function" annotations="Q_PLUGIN_METADATA()">Q_PLUGIN_METADATA()</db:link></db:code> macro.</db:para>
    <db:programlisting>
      class MyStylePlugin : public QStylePlugin
      {
      Q_OBJECT
      Q_PLUGIN_METADATA(IID "org.qt-project.Qt.QStyleFactoryInterface" FILE "mystyleplugin.json")
      public:
      MyStylePlugin(QObject *parent = 0);
      
      QStyle *create(const QString &amp;key);
      };
    </db:programlisting>
    <db:para>The json metadata file <db:code>mystyleplugin.json</db:code> for the plugin needs to contain information about the names of the styles the plugins supports as follows:</db:para>
    <db:programlisting>{ "Keys": [ "Rocket", "Starbuster" ] }
      
    </db:programlisting>
    <db:para>See <db:link xlink:href="plugins-howto.html" xrefstyle="page" annotations="How to Create Qt Plugins">How to Create Qt Plugins</db:link> for details.</db:para>
    <db:para>
      <db:emphasis role="bold">See Also:</db:emphasis>
      <db:simplelist type="vert">
        <db:member>
          <db:code><db:link xlink:href="qstylefactory.html" xrefstyle="class" annotations="QStyleFactory">QStyleFactory</db:link></db:code>
        </db:member>
        <db:member>
          <db:code><db:link xlink:href="qstyle.html" xrefstyle="class" annotations="QStyle">QStyle</db:link></db:code>
        </db:member>
      </db:simplelist>
    </db:para>
  </db:section>
  <db:section>
    <db:title>Member Function Documentation</db:title>
    <db:section>
      <db:title> QStylePlugin::QStylePlugin(QObject *parent)</db:title>
      <db:constructorsynopsis>
        <db:modifier>public</db:modifier>
        <db:methodname>QStylePlugin</db:methodname>
        <db:methodparam>
          <db:type>QObject *</db:type>
          <db:parameter>parent</db:parameter>
          <db:initializer>nullptr</db:initializer>
        </db:methodparam>
      </db:constructorsynopsis>
      <db:para>Constructs a style plugin with the given <db:code role="argument">parent</db:code>.</db:para>
      <db:para>Note that this constructor is invoked automatically by the moc generated code that exports the plugin, so there is no need for calling it explicitly.</db:para>
    </db:section>
    <db:section>
      <db:title> QStylePlugin::~QStylePlugin()</db:title>
      <db:destructorsynopsis>
        <db:modifier>public</db:modifier>
        <db:methodname>~QStylePlugin</db:methodname>
        <db:void/>
      </db:destructorsynopsis>
      <db:para>Destroys the style plugin.</db:para>
      <db:para>Note that Qt destroys a plugin automatically when it is no longer used, so there is no need for calling the destructor explicitly.</db:para>
    </db:section>
  </db:section>
</db:article>
