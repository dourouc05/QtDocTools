<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <page name="tutorials/extending-qml" href="qtqml-tutorials-extending-qml-example.html" status="active" location="extending-tutorial.qdoc" filepath="C:/Qt/5.11.1/Src/qtdeclarative/src/qml/doc/src/cppintegration/extending-tutorial.qdoc" lineno="28" subtype="example" title="Writing QML Extensions with C++" fulltitle="Writing QML Extensions with C++" subtitle="" module="QtQml" brief="Tutorial about extending QML with Qt C++">
            <contents name="running-the-tutorial-examples" title="Running the Tutorial Examples" level="1"/>
            <contents name="chapter-1-creating-a-new-type" title="Chapter 1: Creating a New Type" level="1"/>
            <contents name="chapter-2-connecting-to-c-methods-and-signals" title="Chapter 2: Connecting to C++ Methods and Signals" level="1"/>
            <contents name="chapter-3-adding-property-bindings" title="Chapter 3: Adding Property Bindings" level="1"/>
            <contents name="chapter-4-using-custom-property-types" title="Chapter 4: Using Custom Property Types" level="1"/>
            <contents name="chapter-5-using-list-property-types" title="Chapter 5: Using List Property Types" level="1"/>
            <contents name="chapter-6-writing-an-extension-plugin" title="Chapter 6: Writing an Extension Plugin" level="1"/>
            <contents name="chapter-7-summary" title="Chapter 7: Summary" level="1"/>
            <description path="C:/Qt/5.11.1/Src/qtdeclarative/src/qml/doc/src/cppintegration/extending-tutorial.qdoc" line="28" column="4">
                <brief>Tutorial about extending QML with Qt C++.</brief>
                <para>The <link raw="Qt QML" href="qtqml-index.html" type="page" page="Qt QML">Qt QML</link> module provides a set of APIs for extending QML through C++ extensions. You can write extensions to add your own QML types, extend existing Qt types, or call C/C++ functions that are not accessible from ordinary QML code.</para>
                <para>This tutorial shows how to write a QML extension using C++ that includes core QML features, including properties, signals and bindings. It also shows how extensions can be deployed through plugins.</para>
                <para>Many of the topics covered in this tutorial are documented in further detail in <link raw="qtqml-cppintegration-topic.html" href="qtqml-cppintegration-topic.html" type="page" page="Integrating QML and C++">Integrating QML and C++</link> and its documentation sub-topics. In particular, you may be interested in the sub-topics <link raw="qtqml-cppintegration-exposecppattributes.html" href="qtqml-cppintegration-exposecppattributes.html" type="page" page="Exposing Attributes of C++ Types to QML">Exposing Attributes of C++ Classes to QML</link> and <link raw="qtqml-cppintegration-definetypes.html" href="qtqml-cppintegration-definetypes.html" type="page" page="Defining QML Types from C++">Defining QML Types from C++</link>.</para>
                <section id="running-the-tutorial-examples">
                    <heading level="1">Running the Tutorial Examples</heading>
                    <para>The code in this tutorial is available as an example project with subprojects associated with each tutorial chapter. In <link raw="Qt Creator Manual" href="http://doc.qt.io/qtcreator/index.html" type="page" page="Qt Creator Manual">Qt Creator</link>, open the Welcome mode and select the tutorial from Examples. In Edit mode, expand the <italic>extending-qml</italic> project, right-click on the subproject (chapter) you want to run and select Run.</para>
                </section>
                <section id="chapter-1-creating-a-new-type">
                    <heading level="1">Chapter 1: Creating a New Type</heading>
                    <para>
                        <teletype type="highlighted">extending-qml/chapter1-basics</teletype></para>
                    <para>A common task when extending QML is to provide a new QML type that supports some custom functionality beyond what is provided by the built-in <link raw="Qt Quick QML Types" href="qtquick-qmlmodule.html" type="">Qt Quick types</link>. For example, this could be done to implement particular data models, or provide types with custom painting and drawing capabilities, or access system features like network programming that are not accessible through built-in QML features.</para>
                    <para>In this tutorial, we will show how to use the C++ classes in the Qt Quick module to extend QML. The end result will be a simple Pie Chart display implemented by several custom QML types connected together through QML features like bindings and signals, and made available to the QML runtime through a plugin.</para>
                    <para>To begin with, let's create a new QML type called &quot;PieChart&quot; that has two properties: a name and a color. We will make it available in an importable type namespace called &quot;Charts&quot;, with a version of 1.0.</para>
                    <para>We want this <teletype type="highlighted">PieChart</teletype> type to be usable from QML like this:</para>
                    <badcode>import Charts 1.0

PieChart {
    width: 100; height: 100
    name: &quot;A simple pie chart&quot;
    color: &quot;red&quot;
}</badcode>
                    <para>To do this, we need a C++ class that encapsulates this <teletype type="highlighted">PieChart</teletype> type and its two properties. Since QML makes extensive use of Qt's <link raw="Meta-Object System" href="metaobjects.html" type="page" page="The Meta-Object System">meta object system</link>, this new class must:</para>
                    <list type="bullet">
                        <item>
                            <para>Inherit from <link raw="QObject" href="qobject.html" type="class">QObject</link></para>
                        </item>
                        <item>
                            <para>Declare its properties using the <link raw="Q_PROPERTY" href="qobject.html#Q_PROPERTY" type="function">Q_PROPERTY</link> macro</para>
                        </item>
                    </list>
                    <para>Here is our <teletype type="highlighted">PieChart</teletype> class, defined in <teletype type="highlighted">piechart.h</teletype>:</para>
                    <snippet location="tutorials/extending-qml/chapter1-basics/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter1-basics/piechart.h" identifier="0"/>
                    <para>The class inherits from QQuickPaintedItem because we want to override QQuickPaintedItem::paint() in perform drawing operations with the <link raw="QPainter" href="qpainter.html" type="class">QPainter</link> API. If the class just represented some data type and was not an item that actually needed to be displayed, it could simply inherit from <link raw="QObject" href="qobject.html" type="class">QObject</link>. Or, if we want to extend the functionality of an existing <link raw="QObject" href="qobject.html" type="class">QObject</link>-based class, it could inherit from that class instead. Alternatively, if we want to create a visual item that doesn't need to perform drawing operations with the <link raw="QPainter" href="qpainter.html" type="class">QPainter</link> API, we can just subclass QQuickItem.</para>
                    <para>The <teletype type="highlighted">PieChart</teletype> class defines the two properties, <teletype type="highlighted">name</teletype> and <teletype type="highlighted">color</teletype>, with the <link raw="Q_PROPERTY" href="qobject.html#Q_PROPERTY" type="function">Q_PROPERTY</link> macro, and overrides QQuickPaintedItem::paint(). The class implementation in <teletype type="highlighted">piechart.cpp</teletype> simply sets and returns the <teletype type="highlighted">m_name</teletype> and <teletype type="highlighted">m_color</teletype> values as appropriate, and implements <teletype type="highlighted">paint()</teletype> to draw a simple pie chart. It also turns off the <link raw="QGraphicsItem::ItemHasNoContents" href="qgraphicsitem.html#GraphicsItemFlag-enum" type="enum" enum="QGraphicsItem::GraphicsItemFlag">QGraphicsItem::ItemHasNoContents</link> flag to enable painting:</para>
                    <snippet location="tutorials/extending-qml/chapter1-basics/piechart.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter1-basics/piechart.cpp" identifier="0"/>
                    <dots indent="0">...</dots>
                    <snippet location="tutorials/extending-qml/chapter1-basics/piechart.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter1-basics/piechart.cpp" identifier="1"/>
                    <para>Now that we have defined the <teletype type="highlighted">PieChart</teletype> type, we will use it from QML. The <teletype type="highlighted">app.qml</teletype> file creates a <teletype type="highlighted">PieChart</teletype> item and display the pie chart's details using a standard QML <link raw="Text" href="qml-qtquick-text.html" type="">Text</link> item:</para>
                    <snippet location="tutorials/extending-qml/chapter1-basics/app.qml" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter1-basics/app.qml" identifier="0"/>
                    <para>Notice that although the color is specified as a string in QML, it is automatically converted to a <link raw="QColor" href="qcolor.html" type="class">QColor</link> object for the PieChart <teletype type="highlighted">color</teletype> property. Automatic conversions are provided for various other <link raw="QML Basic Types" href="qtqml-typesystem-basictypes.html" type="page" page="QML Basic Types">basic types</link>; for example, a string like &quot;640x480&quot; can be automatically converted to a <link raw="QSize" href="qsize.html" type="class">QSize</link> value.</para>
                    <para>We'll also create a C++ application that uses a QQuickView to run and display <teletype type="highlighted">app.qml</teletype>. The application must register the <teletype type="highlighted">PieChart</teletype> type using the <link raw="qmlRegisterType()" href="qqmlengine.html#qmlRegisterType-1" type="function">qmlRegisterType()</link> function, to allow it to be used from QML. If you don't register the type, <teletype type="highlighted">app.qml</teletype> won't be able to create a <teletype type="highlighted">PieChart</teletype>.</para>
                    <para>Here is the application <teletype type="highlighted">main.cpp</teletype>:</para>
                    <snippet location="tutorials/extending-qml/chapter1-basics/main.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter1-basics/main.cpp" identifier="0"/>
                    <para>This call to <link raw="qmlRegisterType()" href="qqmlengine.html#qmlRegisterType-1" type="function">qmlRegisterType()</link> registers the <teletype type="highlighted">PieChart</teletype> type as a type called &quot;PieChart&quot;, in a type namespace called &quot;Charts&quot;, with a version of 1.0.</para>
                    <para>Lastly, we write a <teletype type="highlighted">.pro</teletype> project file that includes the files and the <teletype type="highlighted">declarative</teletype> library:</para>
                    <quotefile>tutorials/extending-qml/chapter1-basics/chapter1-basics.pro</quotefile>
                    <para>Now we can build and run the application:</para>
                    <image href="images/extending-tutorial-chapter1.png"/>
                    <para>
                        <bold>Note:</bold> You may see a warning <italic>Expression ... depends on non-NOTIFYable properties: PieChart::name</italic>. This happens because we add a binding to the writable <teletype type="highlighted">name</teletype> property, but haven't yet defined a notify signal for it. The QML engine therefore cannot update the binding if the <teletype type="highlighted">name</teletype> value changes. This is addressed in the following chapters.</para>
                    <para>The source code from the following files are referred to in this chapter: <generatedlist contents="examplefiles .*chapter1.*"/></para>
                </section>
                <section id="chapter-2-connecting-to-c-methods-and-signals">
                    <heading level="1">Chapter 2: Connecting to C++ Methods and Signals</heading>
                    <para>
                        <teletype type="highlighted">extending-qml/chapter2-methods</teletype></para>
                    <para>Suppose we want <teletype type="highlighted">PieChart</teletype> to have a &quot;clearChart()&quot; method that erases the chart and then emits a &quot;chartCleared&quot; signal. Our <teletype type="highlighted">app.qml</teletype> would be able to call <teletype type="highlighted">clearChart()</teletype> and receive <teletype type="highlighted">chartCleared()</teletype> signals like this:</para>
                    <snippet location="tutorials/extending-qml/chapter2-methods/app.qml" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter2-methods/app.qml" identifier="0"/>
                    <image href="images/extending-tutorial-chapter2.png"/>
                    <para>To do this, we add a <teletype type="highlighted">clearChart()</teletype> method and a <teletype type="highlighted">chartCleared()</teletype> signal to our C++ class:</para>
                    <snippet location="tutorials/extending-qml/chapter2-methods/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter2-methods/piechart.h" identifier="0"/>
                    <dots indent="4">...</dots>
                    <snippet location="tutorials/extending-qml/chapter2-methods/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter2-methods/piechart.h" identifier="1"/>
                    <dots indent="4">...</dots>
                    <snippet location="tutorials/extending-qml/chapter2-methods/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter2-methods/piechart.h" identifier="2"/>
                    <dots indent="4">...</dots>
                    <snippet location="tutorials/extending-qml/chapter2-methods/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter2-methods/piechart.h" identifier="3"/>
                    <para>The use of <link raw="Q_INVOKABLE" href="qobject.html#Q_INVOKABLE" type="function">Q_INVOKABLE</link> makes the <teletype type="highlighted">clearChart()</teletype> method available to the Qt Meta-Object system, and in turn, to QML. Note that it could have been declared as a Qt slot instead of using <link raw="Q_INVOKABLE" href="qobject.html#Q_INVOKABLE" type="function">Q_INVOKABLE</link>, as slots are also callable from QML. Both of these approaches are valid.</para>
                    <para>The <teletype type="highlighted">clearChart()</teletype> method simply changes the color to <link raw="Qt::transparent" href="qt.html#GlobalColor-enum" type="enum" enum="Qt::GlobalColor">Qt::transparent</link>, repaints the chart, then emits the <teletype type="highlighted">chartCleared()</teletype> signal:</para>
                    <snippet location="tutorials/extending-qml/chapter2-methods/piechart.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter2-methods/piechart.cpp" identifier="0"/>
                    <para>Now when we run the application and click the window, the pie chart disappears, and the application outputs:</para>
                    <badcode>qml: The chart has been cleared</badcode>
                    <para>The source code from the following files are referred to in this chapter: <generatedlist contents="examplefiles .*chapter2.*"/></para>
                </section>
                <section id="chapter-3-adding-property-bindings">
                    <heading level="1">Chapter 3: Adding Property Bindings</heading>
                    <para>
                        <teletype type="highlighted">extending-qml/chapter3-bindings</teletype></para>
                    <para>Property binding is a powerful feature of QML that allows values of different types to be synchronized automatically. It uses signals to notify and update other types' values when property values are changed.</para>
                    <para>Let's enable property bindings for the <teletype type="highlighted">color</teletype> property. That means if we have code like this:</para>
                    <snippet location="tutorials/extending-qml/chapter3-bindings/app.qml" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter3-bindings/app.qml" identifier="0"/>
                    <image href="images/extending-tutorial-chapter3.png"/>
                    <para>The &quot;color: chartA.color&quot; statement binds the <teletype type="highlighted">color</teletype> value of <teletype type="highlighted">chartB</teletype> to the <teletype type="highlighted">color</teletype> of <teletype type="highlighted">chartA</teletype>. Whenever <teletype type="highlighted">chartA</teletype>'s <teletype type="highlighted">color</teletype> value changes, <teletype type="highlighted">chartB</teletype>'s <teletype type="highlighted">color</teletype> value updates to the same value. When the window is clicked, the <teletype type="highlighted">onClicked</teletype> handler in the <link raw="MouseArea" href="qml-qtquick-mousearea.html" type="">MouseArea</link> changes the color of <teletype type="highlighted">chartA</teletype>, thereby changing both charts to the color blue.</para>
                    <para>It's easy to enable property binding for the <teletype type="highlighted">color</teletype> property. We add a <link raw="Qt's Property System" href="properties.html" type="page" page="The Property System">NOTIFY</link> feature to its <link raw="Q_PROPERTY()" href="qobject.html#Q_PROPERTY" type="function">Q_PROPERTY()</link> declaration to indicate that a &quot;colorChanged&quot; signal is emitted whenever the value changes.</para>
                    <snippet location="tutorials/extending-qml/chapter3-bindings/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter3-bindings/piechart.h" identifier="0"/>
                    <dots indent="4">...</dots>
                    <snippet location="tutorials/extending-qml/chapter3-bindings/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter3-bindings/piechart.h" identifier="1"/>
                    <dots indent="4">...</dots>
                    <snippet location="tutorials/extending-qml/chapter3-bindings/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter3-bindings/piechart.h" identifier="2"/>
                    <dots indent="4">...</dots>
                    <snippet location="tutorials/extending-qml/chapter3-bindings/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter3-bindings/piechart.h" identifier="3"/>
                    <para>Then, we emit this signal in <teletype type="highlighted">setPieSlice()</teletype>:</para>
                    <snippet location="tutorials/extending-qml/chapter3-bindings/piechart.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter3-bindings/piechart.cpp" identifier="0"/>
                    <para>It's important for <teletype type="highlighted">setColor()</teletype> to check that the color value has actually changed before emitting <teletype type="highlighted">colorChanged()</teletype>. This ensures the signal is not emitted unnecessarily and also prevents loops when other types respond to the value change.</para>
                    <para>The use of bindings is essential to QML. You should always add NOTIFY signals for properties if they are able to be implemented, so that your properties can be used in bindings. Properties that cannot be bound cannot be automatically updated and cannot be used as flexibly in QML. Also, since bindings are invoked so often and relied upon in QML usage, users of your custom QML types may see unexpected behavior if bindings are not implemented.</para>
                    <para>The source code from the following files are referred to in this chapter: <generatedlist contents="examplefiles .*chapter3.*"/></para>
                </section>
                <section id="chapter-4-using-custom-property-types">
                    <heading level="1">Chapter 4: Using Custom Property Types</heading>
                    <para>
                        <teletype type="highlighted">extending-qml/chapter4-customPropertyTypes</teletype></para>
                    <para>The <teletype type="highlighted">PieChart</teletype> type currently has a string-type property and a color-type property. It could have many other types of properties. For example, it could have an int-type property to store an identifier for each chart:</para>
                    <code>// C++
class PieChart : public QQuickPaintedItem
{
    Q_PROPERTY(int chartId READ chartId WRITE setChartId NOTIFY chartIdChanged)
    ...

public:
    void setChartId(int chartId);
    int chartId() const;
    ...

signals:
    void chartIdChanged();
};

// QML
PieChart {
    ...
    chartId: 100
}</code>
                    <para>Aside from <teletype type="highlighted">int</teletype>, we could use various other property types. Many of the Qt data types such as <link raw="QColor" href="qcolor.html" type="class">QColor</link>, <link raw="QSize" href="qsize.html" type="class">QSize</link> and <link raw="QRect" href="qrect.html" type="class">QRect</link> are automatically supported from QML. (See <link raw="Data Type Conversion Between QML and C++" href="qtqml-cppintegration-data.html" type="page" page="Data Type Conversion Between QML and C++">Data Type Conversion Between QML and C++</link> documentation for a full list.)</para>
                    <para>If we want to create a property whose type is not supported by QML by default, we need to register the type with the QML engine.</para>
                    <para>For example, let's replace the use of the <teletype type="highlighted">property</teletype> with a type called &quot;<link raw="PieSlice" href="qml-qtcharts-pieslice.html" type="">PieSlice</link>&quot; that has a <teletype type="highlighted">color</teletype> property. Instead of assigning a color, we assign an <teletype type="highlighted">PieSlice</teletype> value which itself contains a <teletype type="highlighted">color</teletype>:</para>
                    <snippet location="tutorials/extending-qml/chapter4-customPropertyTypes/app.qml" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter4-customPropertyTypes/app.qml" identifier="0"/>
                    <para>Like <teletype type="highlighted">PieChart</teletype>, this new <teletype type="highlighted">PieSlice</teletype> type inherits from QQuickPaintedItem and declares its properties with <link raw="Q_PROPERTY()" href="qobject.html#Q_PROPERTY" type="function">Q_PROPERTY()</link>:</para>
                    <snippet location="tutorials/extending-qml/chapter4-customPropertyTypes/pieslice.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter4-customPropertyTypes/pieslice.h" identifier="0"/>
                    <para>To use it in <teletype type="highlighted">PieChart</teletype>, we modify the <teletype type="highlighted">color</teletype> property declaration and associated method signatures:</para>
                    <snippet location="tutorials/extending-qml/chapter4-customPropertyTypes/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter4-customPropertyTypes/piechart.h" identifier="0"/>
                    <dots indent="4">...</dots>
                    <snippet location="tutorials/extending-qml/chapter4-customPropertyTypes/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter4-customPropertyTypes/piechart.h" identifier="1"/>
                    <dots indent="4">...</dots>
                    <snippet location="tutorials/extending-qml/chapter4-customPropertyTypes/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter4-customPropertyTypes/piechart.h" identifier="2"/>
                    <dots indent="4">...</dots>
                    <snippet location="tutorials/extending-qml/chapter4-customPropertyTypes/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter4-customPropertyTypes/piechart.h" identifier="3"/>
                    <para>There is one thing to be aware of when implementing <teletype type="highlighted">setPieSlice()</teletype>. The <teletype type="highlighted">PieSlice</teletype> is a visual item, so it must be set as a child of the <teletype type="highlighted">PieChart</teletype> using QQuickItem::setParentItem() so that the <teletype type="highlighted">PieChart</teletype> knows to paint this child item when its contents are drawn:</para>
                    <snippet location="tutorials/extending-qml/chapter4-customPropertyTypes/piechart.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter4-customPropertyTypes/piechart.cpp" identifier="0"/>
                    <para>Like the <teletype type="highlighted">PieChart</teletype> type, the <teletype type="highlighted">PieSlice</teletype> type has to be registered using <link raw="qmlRegisterType()" href="qqmlengine.html#qmlRegisterType-1" type="function">qmlRegisterType()</link> to be used from QML. As with <teletype type="highlighted">PieChart</teletype>, we'll add the type to the &quot;Charts&quot; type namespace, version 1.0:</para>
                    <snippet location="tutorials/extending-qml/chapter4-customPropertyTypes/main.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter4-customPropertyTypes/main.cpp" identifier="0"/>
                    <dots indent="4">...</dots>
                    <snippet location="tutorials/extending-qml/chapter4-customPropertyTypes/main.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter4-customPropertyTypes/main.cpp" identifier="1"/>
                    <dots indent="4">...</dots>
                    <snippet location="tutorials/extending-qml/chapter4-customPropertyTypes/main.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter4-customPropertyTypes/main.cpp" identifier="2"/>
                    <para>The source code from the following files are referred to in this chapter: <generatedlist contents="examplefiles .*chapter4.*"/></para>
                </section>
                <section id="chapter-5-using-list-property-types">
                    <heading level="1">Chapter 5: Using List Property Types</heading>
                    <para>
                        <teletype type="highlighted">extending-qml/chapter5-listproperties</teletype></para>
                    <para>Right now, a <teletype type="highlighted">PieChart</teletype> can only have one <teletype type="highlighted">PieSlice</teletype>. Ideally a chart would have multiple slices, with different colors and sizes. To do this, we could have a <teletype type="highlighted">slices</teletype> property that accepts a list of <teletype type="highlighted">PieSlice</teletype> items:</para>
                    <snippet location="tutorials/extending-qml/chapter5-listproperties/app.qml" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter5-listproperties/app.qml" identifier="0"/>
                    <image href="images/extending-tutorial-chapter5.png"/>
                    <para>To do this, we replace the <teletype type="highlighted">pieSlice</teletype> property in <teletype type="highlighted">PieChart</teletype> with a <teletype type="highlighted">slices</teletype> property, declared as a <link raw="QQmlListProperty" href="qqmllistproperty.html" type="class">QQmlListProperty</link> type. The <link raw="QQmlListProperty" href="qqmllistproperty.html" type="class">QQmlListProperty</link> class enables the creation of list properties in QML extensions. We replace the <teletype type="highlighted">pieSlice()</teletype> function with a <teletype type="highlighted">slices()</teletype> function that returns a list of slices, and add an internal <teletype type="highlighted">append_slice()</teletype> function (discussed below). We also use a <link raw="QList" href="qlist.html" type="class">QList</link> to store the internal list of slices as <teletype type="highlighted">m_slices</teletype>:</para>
                    <snippet location="tutorials/extending-qml/chapter5-listproperties/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter5-listproperties/piechart.h" identifier="0"/>
                    <dots indent="4">...</dots>
                    <snippet location="tutorials/extending-qml/chapter5-listproperties/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter5-listproperties/piechart.h" identifier="1"/>
                    <dots indent="4">...</dots>
                    <snippet location="tutorials/extending-qml/chapter5-listproperties/piechart.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter5-listproperties/piechart.h" identifier="2"/>
                    <para>Although the <teletype type="highlighted">slices</teletype> property does not have an associated <teletype type="highlighted">WRITE</teletype> function, it is still modifiable because of the way <link raw="QQmlListProperty" href="qqmllistproperty.html" type="class">QQmlListProperty</link> works. In the <teletype type="highlighted">PieChart</teletype> implementation, we implement <teletype type="highlighted">PieChart::slices()</teletype> to return a <link raw="QQmlListProperty" href="qqmllistproperty.html" type="class">QQmlListProperty</link> value and indicate that the internal <teletype type="highlighted">PieChart::append_slice()</teletype> function is to be called whenever a request is made from QML to add items to the list:</para>
                    <snippet location="tutorials/extending-qml/chapter5-listproperties/piechart.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter5-listproperties/piechart.cpp" identifier="0"/>
                    <para>The <teletype type="highlighted">append_slice()</teletype> function simply sets the parent item as before, and adds the new item to the <teletype type="highlighted">m_slices</teletype> list. As you can see, the append function for a <link raw="QQmlListProperty" href="qqmllistproperty.html" type="class">QQmlListProperty</link> is called with two arguments: the list property, and the item that is to be appended.</para>
                    <para>The <teletype type="highlighted">PieSlice</teletype> class has also been modified to include <teletype type="highlighted">fromAngle</teletype> and <teletype type="highlighted">angleSpan</teletype> properties and to draw the slice according to these values. This is a straightforward modification if you have read the previous pages in this tutorial, so the code is not shown here.</para>
                    <para>The source code from the following files are referred to in this chapter: <generatedlist contents="examplefiles .*chapter5.*"/></para>
                </section>
                <section id="chapter-6-writing-an-extension-plugin">
                    <heading level="1">Chapter 6: Writing an Extension Plugin</heading>
                    <para>
                        <teletype type="highlighted">extending-qml/chapter6-plugins</teletype></para>
                    <para>Currently the <teletype type="highlighted">PieChart</teletype> and <teletype type="highlighted">PieSlice</teletype> types are used by <teletype type="highlighted">app.qml</teletype>, which is displayed using a QQuickView in a C++ application. An alternative way to use our QML extension is to create a plugin library to make it available to the QML engine as a new QML import module. This allows the <teletype type="highlighted">PieChart</teletype> and <teletype type="highlighted">PieSlice</teletype> types to be registered into a type namespace which can be imported by any QML application, instead of restricting these types to be only used by the one application.</para>
                    <para>The steps for creating a plugin are described in <link raw="Creating C++ Plugins for QML" href="qtqml-modules-cppplugins.html" type="page" page="Creating C++ Plugins for QML">Creating C++ Plugins for QML</link>. To start with, we create a plugin class named <teletype type="highlighted">ChartsPlugin</teletype>. It subclasses <link raw="QQmlExtensionPlugin" href="qqmlextensionplugin.html" type="class">QQmlExtensionPlugin</link> and registers our QML types in the inherited <link raw="QQmlExtensionPlugin::registerTypes()" href="qqmlextensionplugin.html#registerTypes" type="function">registerTypes()</link> method.</para>
                    <para>Here is the <teletype type="highlighted">ChartsPlugin</teletype> definition in <teletype type="highlighted">chartsplugin.h</teletype>:</para>
                    <snippet location="tutorials/extending-qml/chapter6-plugins/import/chartsplugin.h" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter6-plugins/import/chartsplugin.h" identifier="0"/>
                    <para>And its implementation in <teletype type="highlighted">chartsplugin.cpp</teletype>:</para>
                    <snippet location="tutorials/extending-qml/chapter6-plugins/import/chartsplugin.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter6-plugins/import/chartsplugin.cpp" identifier="0"/>
                    <para>Then, we write a <teletype type="highlighted">.pro</teletype> project file that defines the project as a plugin library and specifies with DESTDIR that library files should be built into a <teletype type="highlighted">../Charts</teletype> directory.</para>
                    <quotefile>tutorials/extending-qml/chapter6-plugins/import/import.pro</quotefile>
                    <para>When building this example on Windows or Linux, the <teletype type="highlighted">Charts</teletype> directory will be located at the same level as the application that uses our new import module. This way, the QML engine will find our module as the default search path for QML imports includes the directory of the application executable. On , the plugin binary is copied to <teletype type="highlighted">Contents/PlugIns</teletype> in the the application bundle; this path is set in <link raw="tutorials/extending-qml/chapter6-plugins/app.pro" href="qtqml-tutorials-extending-qml-chapter6-plugins-app-pro.html" type="page" page="tutorials/extending-qml::tutorials/extending-qml/chapter6-plugins/app.pro">chapter6-plugins/app.pro</link>:</para>
                    <quotefromfile>tutorials/extending-qml/chapter6-plugins/app.pro</quotefromfile>
                    <skipto>osx</skipto>
                    <printuntil>}</printuntil>
                    <para>To account for this, we also need to add this location as a <link raw="QML Import Path" href="qtqml-syntax-imports.html#qml-import-path" type="page" page="Import Statements">QML import path</link> in <teletype type="highlighted">main.cpp</teletype>:</para>
                    <snippet location="tutorials/extending-qml/chapter6-plugins/main.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/tutorials/extending-qml/chapter6-plugins/main.cpp" identifier="0"/>
                    <dots indent="4">...</dots>
                    <para>Defining custom import paths is useful also when there are multiple applications using the same QML imports.</para>
                    <para>The <teletype type="highlighted">.pro</teletype> file also contains additional magic to ensure that the <link raw="Module Definition qmldir Files" href="qtqml-modules-qmldir.html" type="page" page="Module Definition qmldir Files">module definition qmldir file</link> is always copied to the same location as the plugin binary.</para>
                    <para>The <teletype type="highlighted">qmldir</teletype> file declares the module name and the plugin that is made available by the module:</para>
                    <quotefile>tutorials/extending-qml/chapter6-plugins/import/qmldir</quotefile>
                    <para>Now we have a QML module that can be imported to any application, provided that the QML engine knows where to find it. The example contains an executable that loads <teletype type="highlighted">app.qml</teletype>, which uses the <teletype type="highlighted">import Charts 1.0</teletype> statement. Alternatively, you can load the QML file using the <link raw="Prototyping with qmlscene" href="qtquick-qmlscene.html" type="page" page="Prototyping with qmlscene">qmlscene tool</link>, setting the import path to the current directory so that it finds the <teletype type="highlighted">qmldir</teletype> file:</para>
                    <code>qmlscene -I . app.qml</code>
                    <para>The module &quot;Charts&quot; will be loaded by the QML engine, and the types provided by that module will be available for use in any QML document which imports it.</para>
                    <para>The source code from the following files are referred to in this chapter: <generatedlist contents="examplefiles .*chapter6.*"/></para>
                </section>
                <section id="chapter-7-summary">
                    <heading level="1">Chapter 7: Summary</heading>
                    <para>In this tutorial, we've shown the basic steps for creating a QML extension:</para>
                    <list type="bullet">
                        <item>
                            <para>Define new QML types by subclassing <link raw="QObject" href="qobject.html" type="class">QObject</link> and registering them with <link raw="qmlRegisterType()" href="qqmlengine.html#qmlRegisterType-1" type="function">qmlRegisterType()</link></para>
                        </item>
                        <item>
                            <para>Add callable methods using <link raw="Q_INVOKABLE" href="qobject.html#Q_INVOKABLE" type="function">Q_INVOKABLE</link> or Qt slots, and connect to Qt signals with an <teletype type="highlighted">onSignal</teletype> syntax</para>
                        </item>
                        <item>
                            <para>Add property bindings by defining <link raw="Qt's Property System" href="properties.html" type="page" page="The Property System">NOTIFY</link> signals</para>
                        </item>
                        <item>
                            <para>Define custom property types if the built-in types are not sufficient</para>
                        </item>
                        <item>
                            <para>Define list property types using <link raw="QQmlListProperty" href="qqmllistproperty.html" type="class">QQmlListProperty</link></para>
                        </item>
                        <item>
                            <para>Create a plugin library by defining a Qt plugin and writing a <link raw="Module Definition qmldir Files" href="qtqml-modules-qmldir.html" type="page" page="Module Definition qmldir Files">qmldir</link> file</para>
                        </item>
                    </list>
                    <para>The <link raw="Integrating QML and C++" href="qtqml-cppintegration-topic.html" type="page" page="Integrating QML and C++">Integrating QML and C++</link> documentation shows other useful features that can be added to QML extensions. For example, we could use <link raw="Default Properties" href="qtqml-syntax-objectattributes.html#default-properties" type="page" page="QML Object Attributes">default properties</link> to allow slices to be added without using the <teletype type="highlighted">slices</teletype> property:</para>
                    <badcode>PieChart {
    PieSlice { ... }
    PieSlice { ... }
    PieSlice { ... }
}</badcode>
                    <para>Or randomly add and remove slices from time to time using <link raw="Property Value Sources" href="qtqml-cppintegration-definetypes.html#property-value-sources" type="page" page="Defining QML Types from C++">property value sources</link>:</para>
                    <badcode>PieChart {
    PieSliceRandomizer on slices {}
}</badcode>
                </section>
                <see-also>
                    <link raw="Integrating QML and C++" href="qtqml-cppintegration-topic.html" type="page" page="Integrating QML and C++">Integrating QML and C++</link>
                </see-also>
            </description>
            <page name="tutorials/extending-qml/chapter1-basics/app.qml" href="qtqml-tutorials-extending-qml-chapter1-basics-app-qml.html" status="active" subtype="file" title="" fulltitle="app.qml Example File" subtitle="tutorials/extending-qml/chapter1-basics/app.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter1-basics/piechart.cpp" href="qtqml-tutorials-extending-qml-chapter1-basics-piechart-cpp.html" status="active" subtype="file" title="" fulltitle="piechart.cpp Example File" subtitle="tutorials/extending-qml/chapter1-basics/piechart.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter1-basics/piechart.h" href="qtqml-tutorials-extending-qml-chapter1-basics-piechart-h.html" status="active" subtype="file" title="" fulltitle="piechart.h Example File" subtitle="tutorials/extending-qml/chapter1-basics/piechart.h">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter2-methods/app.qml" href="qtqml-tutorials-extending-qml-chapter2-methods-app-qml.html" status="active" subtype="file" title="" fulltitle="app.qml Example File" subtitle="tutorials/extending-qml/chapter2-methods/app.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter2-methods/piechart.cpp" href="qtqml-tutorials-extending-qml-chapter2-methods-piechart-cpp.html" status="active" subtype="file" title="" fulltitle="piechart.cpp Example File" subtitle="tutorials/extending-qml/chapter2-methods/piechart.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter2-methods/piechart.h" href="qtqml-tutorials-extending-qml-chapter2-methods-piechart-h.html" status="active" subtype="file" title="" fulltitle="piechart.h Example File" subtitle="tutorials/extending-qml/chapter2-methods/piechart.h">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter3-bindings/app.qml" href="qtqml-tutorials-extending-qml-chapter3-bindings-app-qml.html" status="active" subtype="file" title="" fulltitle="app.qml Example File" subtitle="tutorials/extending-qml/chapter3-bindings/app.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter3-bindings/piechart.cpp" href="qtqml-tutorials-extending-qml-chapter3-bindings-piechart-cpp.html" status="active" subtype="file" title="" fulltitle="piechart.cpp Example File" subtitle="tutorials/extending-qml/chapter3-bindings/piechart.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter3-bindings/piechart.h" href="qtqml-tutorials-extending-qml-chapter3-bindings-piechart-h.html" status="active" subtype="file" title="" fulltitle="piechart.h Example File" subtitle="tutorials/extending-qml/chapter3-bindings/piechart.h">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter4-customPropertyTypes/app.qml" href="qtqml-tutorials-extending-qml-chapter4-custompropertytypes-app-qml.html" status="active" subtype="file" title="" fulltitle="app.qml Example File" subtitle="tutorials/extending-qml/chapter4-customPropertyTypes/app.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter4-customPropertyTypes/piechart.cpp" href="qtqml-tutorials-extending-qml-chapter4-custompropertytypes-piechart-cpp.html" status="active" subtype="file" title="" fulltitle="piechart.cpp Example File" subtitle="tutorials/extending-qml/chapter4-customPropertyTypes/piechart.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter4-customPropertyTypes/piechart.h" href="qtqml-tutorials-extending-qml-chapter4-custompropertytypes-piechart-h.html" status="active" subtype="file" title="" fulltitle="piechart.h Example File" subtitle="tutorials/extending-qml/chapter4-customPropertyTypes/piechart.h">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter4-customPropertyTypes/pieslice.cpp" href="qtqml-tutorials-extending-qml-chapter4-custompropertytypes-pieslice-cpp.html" status="active" subtype="file" title="" fulltitle="pieslice.cpp Example File" subtitle="tutorials/extending-qml/chapter4-customPropertyTypes/pieslice.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter4-customPropertyTypes/pieslice.h" href="qtqml-tutorials-extending-qml-chapter4-custompropertytypes-pieslice-h.html" status="active" subtype="file" title="" fulltitle="pieslice.h Example File" subtitle="tutorials/extending-qml/chapter4-customPropertyTypes/pieslice.h">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter5-listproperties/app.qml" href="qtqml-tutorials-extending-qml-chapter5-listproperties-app-qml.html" status="active" subtype="file" title="" fulltitle="app.qml Example File" subtitle="tutorials/extending-qml/chapter5-listproperties/app.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter5-listproperties/piechart.cpp" href="qtqml-tutorials-extending-qml-chapter5-listproperties-piechart-cpp.html" status="active" subtype="file" title="" fulltitle="piechart.cpp Example File" subtitle="tutorials/extending-qml/chapter5-listproperties/piechart.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter5-listproperties/piechart.h" href="qtqml-tutorials-extending-qml-chapter5-listproperties-piechart-h.html" status="active" subtype="file" title="" fulltitle="piechart.h Example File" subtitle="tutorials/extending-qml/chapter5-listproperties/piechart.h">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter5-listproperties/pieslice.cpp" href="qtqml-tutorials-extending-qml-chapter5-listproperties-pieslice-cpp.html" status="active" subtype="file" title="" fulltitle="pieslice.cpp Example File" subtitle="tutorials/extending-qml/chapter5-listproperties/pieslice.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter5-listproperties/pieslice.h" href="qtqml-tutorials-extending-qml-chapter5-listproperties-pieslice-h.html" status="active" subtype="file" title="" fulltitle="pieslice.h Example File" subtitle="tutorials/extending-qml/chapter5-listproperties/pieslice.h">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter6-plugins/app.qml" href="qtqml-tutorials-extending-qml-chapter6-plugins-app-qml.html" status="active" subtype="file" title="" fulltitle="app.qml Example File" subtitle="tutorials/extending-qml/chapter6-plugins/app.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter6-plugins/import/chartsplugin.cpp" href="qtqml-tutorials-extending-qml-chapter6-plugins-import-chartsplugin-cpp.html" status="active" subtype="file" title="" fulltitle="chartsplugin.cpp Example File" subtitle="tutorials/extending-qml/chapter6-plugins/import/chartsplugin.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter6-plugins/import/chartsplugin.h" href="qtqml-tutorials-extending-qml-chapter6-plugins-import-chartsplugin-h.html" status="active" subtype="file" title="" fulltitle="chartsplugin.h Example File" subtitle="tutorials/extending-qml/chapter6-plugins/import/chartsplugin.h">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter6-plugins/import/piechart.cpp" href="qtqml-tutorials-extending-qml-chapter6-plugins-import-piechart-cpp.html" status="active" subtype="file" title="" fulltitle="piechart.cpp Example File" subtitle="tutorials/extending-qml/chapter6-plugins/import/piechart.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter6-plugins/import/piechart.h" href="qtqml-tutorials-extending-qml-chapter6-plugins-import-piechart-h.html" status="active" subtype="file" title="" fulltitle="piechart.h Example File" subtitle="tutorials/extending-qml/chapter6-plugins/import/piechart.h">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter6-plugins/import/pieslice.cpp" href="qtqml-tutorials-extending-qml-chapter6-plugins-import-pieslice-cpp.html" status="active" subtype="file" title="" fulltitle="pieslice.cpp Example File" subtitle="tutorials/extending-qml/chapter6-plugins/import/pieslice.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter6-plugins/import/pieslice.h" href="qtqml-tutorials-extending-qml-chapter6-plugins-import-pieslice-h.html" status="active" subtype="file" title="" fulltitle="pieslice.h Example File" subtitle="tutorials/extending-qml/chapter6-plugins/import/pieslice.h">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter1-basics/main.cpp" href="qtqml-tutorials-extending-qml-chapter1-basics-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="tutorials/extending-qml/chapter1-basics/main.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/extending-qml.pro" href="qtqml-tutorials-extending-qml-extending-qml-pro.html" status="active" subtype="file" title="" fulltitle="extending-qml.pro Example File" subtitle="tutorials/extending-qml/extending-qml.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter1-basics/chapter1-basics.pro" href="qtqml-tutorials-extending-qml-chapter1-basics-chapter1-basics-pro.html" status="active" subtype="file" title="" fulltitle="chapter1-basics.pro Example File" subtitle="tutorials/extending-qml/chapter1-basics/chapter1-basics.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter1-basics/chapter1-basics.qrc" href="qtqml-tutorials-extending-qml-chapter1-basics-chapter1-basics-qrc.html" status="active" subtype="file" title="" fulltitle="chapter1-basics.qrc Example File" subtitle="tutorials/extending-qml/chapter1-basics/chapter1-basics.qrc">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter2-methods/chapter2-methods.pro" href="qtqml-tutorials-extending-qml-chapter2-methods-chapter2-methods-pro.html" status="active" subtype="file" title="" fulltitle="chapter2-methods.pro Example File" subtitle="tutorials/extending-qml/chapter2-methods/chapter2-methods.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter2-methods/chapter2-methods.qrc" href="qtqml-tutorials-extending-qml-chapter2-methods-chapter2-methods-qrc.html" status="active" subtype="file" title="" fulltitle="chapter2-methods.qrc Example File" subtitle="tutorials/extending-qml/chapter2-methods/chapter2-methods.qrc">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter3-bindings/chapter3-bindings.pro" href="qtqml-tutorials-extending-qml-chapter3-bindings-chapter3-bindings-pro.html" status="active" subtype="file" title="" fulltitle="chapter3-bindings.pro Example File" subtitle="tutorials/extending-qml/chapter3-bindings/chapter3-bindings.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter3-bindings/chapter3-bindings.qrc" href="qtqml-tutorials-extending-qml-chapter3-bindings-chapter3-bindings-qrc.html" status="active" subtype="file" title="" fulltitle="chapter3-bindings.qrc Example File" subtitle="tutorials/extending-qml/chapter3-bindings/chapter3-bindings.qrc">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter4-customPropertyTypes/chapter4-customPropertyTypes.pro" href="qtqml-tutorials-extending-qml-chapter4-custompropertytypes-chapter4-custompropertytypes-pro.html" status="active" subtype="file" title="" fulltitle="chapter4-customPropertyTypes.pro Example File" subtitle="tutorials/extending-qml/chapter4-customPropertyTypes/chapter4-customPropertyTypes.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter4-customPropertyTypes/chapter4-customPropertyTypes.qrc" href="qtqml-tutorials-extending-qml-chapter4-custompropertytypes-chapter4-custompropertytypes-qrc.html" status="active" subtype="file" title="" fulltitle="chapter4-customPropertyTypes.qrc Example File" subtitle="tutorials/extending-qml/chapter4-customPropertyTypes/chapter4-customPropertyTypes.qrc">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter5-listproperties/chapter5-listproperties.pro" href="qtqml-tutorials-extending-qml-chapter5-listproperties-chapter5-listproperties-pro.html" status="active" subtype="file" title="" fulltitle="chapter5-listproperties.pro Example File" subtitle="tutorials/extending-qml/chapter5-listproperties/chapter5-listproperties.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter5-listproperties/chapter5-listproperties.qrc" href="qtqml-tutorials-extending-qml-chapter5-listproperties-chapter5-listproperties-qrc.html" status="active" subtype="file" title="" fulltitle="chapter5-listproperties.qrc Example File" subtitle="tutorials/extending-qml/chapter5-listproperties/chapter5-listproperties.qrc">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter6-plugins/app.pro" href="qtqml-tutorials-extending-qml-chapter6-plugins-app-pro.html" status="active" subtype="file" title="" fulltitle="app.pro Example File" subtitle="tutorials/extending-qml/chapter6-plugins/app.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter6-plugins/app.qrc" href="qtqml-tutorials-extending-qml-chapter6-plugins-app-qrc.html" status="active" subtype="file" title="" fulltitle="app.qrc Example File" subtitle="tutorials/extending-qml/chapter6-plugins/app.qrc">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter6-plugins/chapter6-plugins.pro" href="qtqml-tutorials-extending-qml-chapter6-plugins-chapter6-plugins-pro.html" status="active" subtype="file" title="" fulltitle="chapter6-plugins.pro Example File" subtitle="tutorials/extending-qml/chapter6-plugins/chapter6-plugins.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter6-plugins/import/import.pro" href="qtqml-tutorials-extending-qml-chapter6-plugins-import-import-pro.html" status="active" subtype="file" title="" fulltitle="import.pro Example File" subtitle="tutorials/extending-qml/chapter6-plugins/import/import.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="tutorials/extending-qml/chapter6-plugins/import/qmldir" href="qtqml-tutorials-extending-qml-chapter6-plugins-import-qmldir.html" status="active" subtype="file" title="" fulltitle="qmldir Example File" subtitle="tutorials/extending-qml/chapter6-plugins/import/qmldir">
                <description path="" line="0" column="0"/>
            </page>
        </page>
    </document>
</WebXML>
