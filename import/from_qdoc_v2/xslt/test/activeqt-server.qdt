<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.2"
            xml:lang="en">
   <db:info>
      <db:title>Building ActiveX servers in Qt</db:title>
      <db:abstract>
         <db:para>A Windows-only static library for turning a Qt binary into a COM server</db:para>
      </db:abstract>
      <db:pubdate>2018-09-27+02:00</db:pubdate>
      <db:date>2018-09-27+02:00</db:date>
      <db:productname>Qt</db:productname>
      <db:productnumber>1.2</db:productnumber>
   </db:info>
   <db:para>A Windows-only static library for turning a Qt binary into a COM server.</db:para>
   <db:para>The <db:link xlink:href="qaxserver-module.html" xrefstyle="module" annotations="QAxServer">QAxServer</db:link> module is part of the <db:link xlink:href="activeqt-index.html" xrefstyle="page" annotations="ActiveQt">ActiveQt</db:link> framework. It consists of three classes:</db:para>
   <db:itemizedlist>
      <db:listitem>
         <db:para>
            <db:code><db:link xlink:href="qaxfactory.html" xrefstyle="class" annotations="QAxFactory">QAxFactory</db:link></db:code> defines a factory for the creation of COM objects.</db:para>
      </db:listitem>
      <db:listitem>
         <db:para>
            <db:code><db:link xlink:href="qaxbindable.html" xrefstyle="class" annotations="QAxBindable">QAxBindable</db:link></db:code> provides an interface between the Qt widget and the COM object.</db:para>
      </db:listitem>
      <db:listitem>
         <db:para>
            <db:code><db:link xlink:href="qaxaggregated.html" xrefstyle="class" annotations="QAxAggregated">QAxAggregated</db:link></db:code> can be subclassed to implement additional COM interfaces.</db:para>
      </db:listitem>
   </db:itemizedlist>
   <db:para>Some <db:link xlink:href="examples-activeqt.html" xrefstyle="page" annotations="ActiveQt Examples">example implementations</db:link> of ActiveX controls and COM objects are provided.</db:para>
   <db:para>Topics:</db:para>
   <db:section xml:id="using-the-library">
      <db:title>Using the Library</db:title>
      <db:para>To turn a standard Qt application into a COM server using the <db:link xlink:href="qaxserver-module.html" xrefstyle="module" annotations="QAxServer">QAxServer</db:link> library you must add <db:code>axserver</db:code> to the QT variable in your <db:code>.pro</db:code> file.</db:para>
      <db:para>An out-of-process executable server is generated from a <db:code>.pro</db:code> file like this:</db:para>
      <db:programlisting/>
      <db:para>To build an in-process server, use a <db:code>.pro</db:code> file like this:</db:para>
      <db:programlisting/>
      <db:para>The files <db:code>qaxserver.rc</db:code> and <db:code>qaxserver.def</db:code> are part of the framework and can be used from their usual location (specify a path in the <db:code>.pro</db:code> file), or copied into the project directory. You can modify these files as long as it includes any file as the type library entry, ie. you can add version information or specify a different toolbox icon.</db:para>
      <db:para>Using the <db:code>axserver</db:code> module will cause the <db:code>qmake</db:code> tool to add the required build steps to the build system:</db:para>
      <db:itemizedlist>
         <db:listitem>
            <db:para>Link the binary against <db:code>qaxserver.lib</db:code> instead of <db:code>qtmain.lib</db:code>
            </db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Call the <db:link xlink:href="activeqt-idc.html" xrefstyle="page" annotations="idc">idc</db:link> tool to generate an IDL file for the COM server</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Compile the IDL into a type library using the MIDL tool (part of the compiler installation)</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Attach the resulting type library as a binary resource to the server binary (again using the <db:link xlink:href="activeqt-idc.html" xrefstyle="page" annotations="idc">idc</db:link> tool)</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Register the server</db:para>
         </db:listitem>
      </db:itemizedlist>
      <db:para>To skip the post-processing step, also set the <db:code>qaxserver_no_postlink</db:code> configuration.</db:para>
      <db:para>Additionally you can specify a version number using the <db:code>VERSION</db:code> variable, e.g.</db:para>
      <db:programlisting/>
      <db:para>The version number specified will be used as the version of the type library and of the server when registering.</db:para>
   </db:section>
   <db:section xml:id="out-of-process-vs-in-process">
      <db:title>Out-of-Process vs. In-Process</db:title>
      <db:para>Whether your COM server should run as a stand-alone executable or as a shared library in the client process depends mainly on the type of COM objects you want to provide in the server.</db:para>
      <db:para>An executable server has the advantage of being able to run as a stand-alone application, but adds considerable overhead to the communication between the COM client and the COM object. If the control has a programming error only the server process running the control will crash, and the client application will probably continue to run. Not all COM clients support executable servers.</db:para>
      <db:para>An in-process server is usually smaller and has faster startup time. The communication between client and server is done directly through virtual function calls and does not introduce the overhead required for remote procedure calls. However, if the server crashes the client application is likely to crash as well, and not every functionality is available for in-process servers (i.e. register in the COM's running-object-table).</db:para>
      <db:para>Both server types can use Qt either as a shared library, or statically linked into the server binary.</db:para>
   </db:section>
   <db:section xml:id="typical-errors-during-the-post-build-steps">
      <db:title>Typical Errors During the Post-Build Steps</db:title>
      <db:para>For the <db:link xlink:href="activeqt-index.html" xrefstyle="page" annotations="ActiveQt">ActiveQt</db:link> specific post-processing steps to work the server has to meet some requirements:</db:para>
      <db:itemizedlist>
         <db:listitem>
            <db:para>All controls exposed can be created with nothing but a <db:code><db:link xlink:href="qapplication.html" xrefstyle="class" annotations="QApplication">QApplication</db:link></db:code> instance being present</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>The initial linking of the server includes a temporary type library resource</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>All dependencies required to run the server are in the system path (or in the path used by the calling environment; note that Visual Studio has its own set of environment variables listed in the Tools|Options|Directories dialog).</db:para>
         </db:listitem>
      </db:itemizedlist>
      <db:para>If those requirements are not met one ore more of the following errors are likely to occur:</db:para>
   </db:section>
   <db:section xml:id="the-server-executable-crashes">
      <db:title>The Server Executable Crashes</db:title>
      <db:para>To generate the IDL the widgets exposed as ActiveX controls need to be instantiated (the constructor is called). At this point, nothing else but a <db:code><db:link xlink:href="qapplication.html" xrefstyle="class" annotations="QApplication">QApplication</db:link></db:code> object exists. Your widget constructor must not rely on any other objects to be created, e.g. it should check for null-pointers.</db:para>
      <db:para>To debug your server run it with -dumpidl outputfile and check where it crashes.</db:para>
      <db:para>Note that no functions of the control are called.</db:para>
   </db:section>
   <db:section xml:id="the-server-executable-is-not-a-valid-win32-application">
      <db:title>The Server Executable Is Not a Valid Win32 Application</db:title>
      <db:para>Attaching the type library corrupted the server binary. This is a bug in Windows and happens only with release builds.</db:para>
      <db:para>The first linking step has to link a dummy type library into the executable that can later be replaced by idc. Add a resource file with a type library to your project as demonstrated in the examples.</db:para>
   </db:section>
   <db:section xml:id="unable-to-locate-dll">
      <db:title>"Unable to locate DLL"</db:title>
      <db:para>The build system needs to run the server executable to generate the interface definition, and to register the server. If a dynamic link library the server links against is not in the path this might fail (e.g. Visual Studio calls the server using the environment settings specified in the "Directories" option). Make sure that all DLLs and plugins required by your server are located in a directory that is listed in the path as printed in the error message box (see also <db:link xlink:href="windows-deployment.html#the-windows-deployment-tool" xrefstyle="page" annotations="The Windows Deployment Tool">The Windows Deployment Tool</db:link>).</db:para>
   </db:section>
   <db:section xml:id="cannot-open-file">
      <db:title>"Cannot open file ..."</db:title>
      <db:para>The ActiveX server could not shut down properly when the last client stopped using it. It usually takes about two seconds for the application to terminate, but you might have to use the task manager to kill the process (e.g. when a client doesn't release the controls properly).</db:para>
   </db:section>
   <db:section xml:id="the-control-cannot-be-instantiated">
      <db:title>The Control Cannot be Instantiated</db:title>
      <db:para>In this case, it may help to register the server as Administrator.</db:para>
   </db:section>
   <db:section xml:id="implementing-controls">
      <db:title>Implementing Controls</db:title>
      <db:para>To implement a COM object with Qt, create a subclass of <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> or any existing <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> subclass. If the class is a subclass of <db:code><db:link xlink:href="qwidget.html" xrefstyle="class" annotations="QWidget">QWidget</db:link></db:code>, the COM object will be an ActiveX control.</db:para>
      <db:programlisting>
#include &lt;QWidget&gt;

class MyActiveX : public QWidget
{
    Q_OBJECT
</db:programlisting>
      <db:para>The <db:code><db:link xlink:href="qobject.html#Q_OBJECT" xrefstyle="function" annotations="Q_OBJECT">Q_OBJECT</db:link></db:code> macro is required to provide the meta object information about the widget to the <db:link xlink:href="activeqt-index.html" xrefstyle="page" annotations="ActiveQt">ActiveQt</db:link> framework.</db:para>
      <db:programlisting>
Q_CLASSINFO("ClassID", "{1D9928BD-4453-4bdd-903D-E525ED17FDE5}")
Q_CLASSINFO("InterfaceID", "{99F6860E-2C5A-42ec-87F2-43396F4BE389}")
Q_CLASSINFO("EventsID", "{0A3E9F27-E4F1-45bb-9E47-63099BCCD0E3}")
</db:programlisting>
      <db:para>Use the <db:code><db:link xlink:href="qobject.html#Q_CLASSINFO" xrefstyle="function" annotations="Q_CLASSINFO()">Q_CLASSINFO()</db:link></db:code> macro to specify the COM identifiers for the COM object. <db:code>ClassID</db:code> and <db:code>InterfaceID</db:code> are required, while <db:code>EventsID</db:code> is only necessary when your object has signals. To generate these identifiers, use system tools like <db:code>uuidgen</db:code> or <db:code>guidgen</db:code>.</db:para>
      <db:para>You can specify additional attributes for each of your classes; see <db:link xlink:href="activeqt-server.html#class-information-and-tuning" xrefstyle="page" annotations="Class Information and Tuning">Class Information and Tuning</db:link> for details.</db:para>
      <db:programlisting>
Q_PROPERTY(int value READ value WRITE setValue)
</db:programlisting>
      <db:para>Use the <db:code><db:link xlink:href="qobject.html#Q_PROPERTY" xrefstyle="function" annotations="Q_PROPERTY()">Q_PROPERTY()</db:link></db:code> macro to declare properties for the ActiveX control.</db:para>
      <db:para>Declare a standard constructor taking a parent object, and functions, signals and slots like for any <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> subclass. <db:footnote>
            <db:para>If a standard constructor is not present the compiler will issue an error "no overloaded function takes 2 parameters" when using the default factory through the <db:code><db:link xlink:href="qaxfactory.html#QAXFACTORY_DEFAULT" xrefstyle="function" annotations="QAXFACTORY_DEFAULT()">QAXFACTORY_DEFAULT()</db:link></db:code> macro. If you cannot provide a standard constructor you must implement a <db:code><db:link xlink:href="qaxfactory.html" xrefstyle="class" annotations="QAxFactory">QAxFactory</db:link></db:code> custom factory and call the constructor you have in your implementation of <db:code><db:link xlink:href="qaxfactory.html#createObject" xrefstyle="function" annotations="QAxFactory::createObject">QAxFactory::createObject</db:link></db:code>.</db:para>
         </db:footnote>
      </db:para>
      <db:programlisting>
public:
    MyActiveX(QWidget *parent = 0)
    ...

    int value() const;

public slots:
    void setValue(int v);
    ...

signals:
    void valueChange(int v);
    ...

};
</db:programlisting>
      <db:para>The <db:link xlink:href="activeqt-index.html" xrefstyle="page" annotations="ActiveQt">ActiveQt</db:link> framework will expose properties and public slots as ActiveX properties and methods, and signals as ActiveX events, and convert between the Qt data types and the equivalent COM data types.</db:para>
      <db:section xml:id="data-types">
         <db:title>Data Types</db:title>
         <db:para>The Qt data types that are supported for properties are:</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Qt data type</db:para>
                  </db:th>
                  <db:th>
                     <db:para>COM property</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tr>
               <db:td>
                  <db:para>bool</db:para>
               </db:td>
               <db:td>
                  <db:para>VARIANT_BOOL</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>BSTR</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>int</db:para>
               </db:td>
               <db:td>
                  <db:para>int</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>uint</db:para>
               </db:td>
               <db:td>
                  <db:para>unsigned int</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>double</db:para>
               </db:td>
               <db:td>
                  <db:para>double</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:link xlink:href="qtglobal.html#qlonglong-typedef" xrefstyle="typedef" annotations="qlonglong">qlonglong</db:link>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>CY</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:link xlink:href="qtglobal.html#qulonglong-typedef" xrefstyle="typedef" annotations="qulonglong">qulonglong</db:link>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>CY</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qcolor.html" xrefstyle="class" annotations="QColor">QColor</db:link></db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>OLE_COLOR</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qdate.html" xrefstyle="class" annotations="QDate">QDate</db:link></db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>DATE</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qdatetime.html" xrefstyle="class" annotations="QDateTime">QDateTime</db:link></db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>DATE</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qtime.html" xrefstyle="class" annotations="QTime">QTime</db:link></db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>DATE</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qfont.html" xrefstyle="class" annotations="QFont">QFont</db:link></db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>IFontDisp*</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qpixmap.html" xrefstyle="class" annotations="QPixmap">QPixmap</db:link></db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>IPictureDisp* <db:footnote>
                        <db:para>COM cannot marshal IPictureDisp across process boundaries, so <db:code><db:link xlink:href="qpixmap.html" xrefstyle="class" annotations="QPixmap">QPixmap</db:link></db:code> properties cannot be called for out-of-process servers. You can however marshal the image data via e.g. temporary files. See the Microsoft KB article Q150034 for more information.</db:para>
                     </db:footnote>
                  </db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qvariant.html" xrefstyle="class" annotations="QVariant">QVariant</db:link></db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>VARIANT</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:link xlink:href="qvariant.html#QVariantList-typedef" xrefstyle="typedef" annotations="QVariantList">QVariantList</db:link> (same as <db:code><db:link xlink:href="qlist.html" xrefstyle="class" annotations="QList">QList</db:link></db:code>&lt;<db:code><db:link xlink:href="qvariant.html" xrefstyle="class" annotations="QVariant">QVariant</db:link></db:code>&gt;)</db:para>
               </db:td>
               <db:td>
                  <db:para>SAFEARRAY(VARIANT)</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qstringlist.html" xrefstyle="class" annotations="QStringList">QStringList</db:link></db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>SAFEARRAY(BSTR)</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qbytearray.html" xrefstyle="class" annotations="QByteArray">QByteArray</db:link></db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>SAFEARRAY(BYTE)</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qrect.html" xrefstyle="class" annotations="QRect">QRect</db:link></db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>User defined type</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qsize.html" xrefstyle="class" annotations="QSize">QSize</db:link></db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>User defined type</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qpoint.html" xrefstyle="class" annotations="QPoint">QPoint</db:link></db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>User defined type</db:para>
               </db:td>
            </db:tr>
         </db:informaltable>
         <db:para>The Qt data types that are supported for parameters in signals and slots are:</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Qt data type</db:para>
                  </db:th>
                  <db:th>
                     <db:para>COM parameter</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tr>
               <db:td>
                  <db:para>bool</db:para>
               </db:td>
               <db:td>
                  <db:para>[in] VARIANT_BOOL</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>bool&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in, out] VARIANT_BOOL*</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>, const <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in] BSTR</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in, out] BSTR*</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in, out] BSTR*</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>int</db:para>
               </db:td>
               <db:td>
                  <db:para>[in] int</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>int&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in,out] int</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>uint</db:para>
               </db:td>
               <db:td>
                  <db:para>[in] unsigned int</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>uint&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in, out] unsigned int*</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>double</db:para>
               </db:td>
               <db:td>
                  <db:para>[in] double</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>double&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in, out] double*</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qcolor.html" xrefstyle="class" annotations="QColor">QColor</db:link></db:code>, const <db:code><db:link xlink:href="qcolor.html" xrefstyle="class" annotations="QColor">QColor</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in] OLE_COLOR</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qcolor.html" xrefstyle="class" annotations="QColor">QColor</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in, out] OLE_COLOR*</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qdate.html" xrefstyle="class" annotations="QDate">QDate</db:link></db:code>, const <db:code><db:link xlink:href="qdate.html" xrefstyle="class" annotations="QDate">QDate</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in] DATE</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qdate.html" xrefstyle="class" annotations="QDate">QDate</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in, out] DATE*</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qdatetime.html" xrefstyle="class" annotations="QDateTime">QDateTime</db:link></db:code>, const <db:code><db:link xlink:href="qdatetime.html" xrefstyle="class" annotations="QDateTime">QDateTime</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in] DATE</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qdatetime.html" xrefstyle="class" annotations="QDateTime">QDateTime</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in, out] DATE*</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qfont.html" xrefstyle="class" annotations="QFont">QFont</db:link></db:code>, const <db:code><db:link xlink:href="qfont.html" xrefstyle="class" annotations="QFont">QFont</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in] IFontDisp*</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qfont.html" xrefstyle="class" annotations="QFont">QFont</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in, out] IFontDisp**</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qpixmap.html" xrefstyle="class" annotations="QPixmap">QPixmap</db:link></db:code>, const <db:code><db:link xlink:href="qpixmap.html" xrefstyle="class" annotations="QPixmap">QPixmap</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in] IPictureDisp*</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qpixmap.html" xrefstyle="class" annotations="QPixmap">QPixmap</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in, out] IPictureDisp**</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qlist.html" xrefstyle="class" annotations="QList">QList</db:link></db:code>&lt;<db:code><db:link xlink:href="qvariant.html" xrefstyle="class" annotations="QVariant">QVariant</db:link></db:code>&gt;, const <db:code><db:link xlink:href="qlist.html" xrefstyle="class" annotations="QList">QList</db:link></db:code>&lt;<db:code><db:link xlink:href="qvariant.html" xrefstyle="class" annotations="QVariant">QVariant</db:link></db:code>&gt;&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in] SAFEARRAY(VARIANT)</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qlist.html" xrefstyle="class" annotations="QList">QList</db:link></db:code>&lt;<db:code><db:link xlink:href="qvariant.html" xrefstyle="class" annotations="QVariant">QVariant</db:link></db:code>&gt;&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in, out] SAFEARRAY(VARIANT)*</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qstringlist.html" xrefstyle="class" annotations="QStringList">QStringList</db:link></db:code>, const <db:code><db:link xlink:href="qstringlist.html" xrefstyle="class" annotations="QStringList">QStringList</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in] SAFEARRAY(BSTR)</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qstringlist.html" xrefstyle="class" annotations="QStringList">QStringList</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in, out] SAFEARRAY(BSTR)*</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qbytearray.html" xrefstyle="class" annotations="QByteArray">QByteArray</db:link></db:code>, const <db:code><db:link xlink:href="qbytearray.html" xrefstyle="class" annotations="QByteArray">QByteArray</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in] SAFEARRAY(BYTE)</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qbytearray.html" xrefstyle="class" annotations="QByteArray">QByteArray</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in, out] SAFEARRAY(BYTE)*</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code>*</db:para>
               </db:td>
               <db:td>
                  <db:para>[in] IDispatch*</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qrect.html" xrefstyle="class" annotations="QRect">QRect</db:link></db:code>&amp; <db:footnote>
                        <db:para>OLE needs to marshal user defined types by reference (ByRef), and cannot marshal them by value (ByVal). This is why const-references and object parameters are not supported for <db:code><db:link xlink:href="qrect.html" xrefstyle="class" annotations="QRect">QRect</db:link></db:code>, <db:code><db:link xlink:href="qsize.html" xrefstyle="class" annotations="QSize">QSize</db:link></db:code> and <db:code><db:link xlink:href="qpoint.html" xrefstyle="class" annotations="QPoint">QPoint</db:link></db:code>.</db:para>
                     </db:footnote>
                  </db:para>
                  <db:para>[in, out] struct <db:code><db:link xlink:href="qrect.html" xrefstyle="class" annotations="QRect">QRect</db:link></db:code> (user defined)</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qsize.html" xrefstyle="class" annotations="QSize">QSize</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in, out] struct <db:code><db:link xlink:href="qsize.html" xrefstyle="class" annotations="QSize">QSize</db:link></db:code> (user defined)</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code><db:link xlink:href="qpoint.html" xrefstyle="class" annotations="QPoint">QPoint</db:link></db:code>&amp;</db:para>
               </db:td>
               <db:td>
                  <db:para>[in, out] struct <db:code><db:link xlink:href="qpoint.html" xrefstyle="class" annotations="QPoint">QPoint</db:link></db:code> (user defined)</db:para>
               </db:td>
            </db:tr>
         </db:informaltable>
         <db:para>Also supported are exported enums and flags (see <db:code><db:link xlink:href="qobject-obsolete.html#Q_ENUMS" xrefstyle="function" annotations="Q_ENUMS()">Q_ENUMS()</db:link></db:code> and <db:code><db:link xlink:href="qobject-obsolete.html#Q_FLAGS" xrefstyle="function" annotations="Q_FLAGS()">Q_FLAGS()</db:link></db:code>). The in-parameter types are also supported as return values.</db:para>
         <db:para>Properties and signals/slots that have parameters using any other data types are ignored by the <db:link xlink:href="activeqt-index.html" xrefstyle="page" annotations="ActiveQt">ActiveQt</db:link> framework.</db:para>
         <db:section xml:id="sub-objects">
            <db:title>Sub-Objects</db:title>
            <db:para>COM objects can have multiple sub-objects that can represent a sub element of the COM object. A COM object representing a multi-document spread sheet application can for example provide one sub-object for each spread sheet.</db:para>
            <db:para>Any <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> subclass can be used as the type for a sub object in ActiveX, as long as it is known to the <db:code><db:link xlink:href="qaxfactory.html" xrefstyle="class" annotations="QAxFactory">QAxFactory</db:link></db:code>. Then the type can be used in properties, or as the return type or parameter of a slot.</db:para>
         </db:section>
         <db:section xml:id="property-notification">
            <db:title>Property Notification</db:title>
            <db:para>To make the properties bindable for the ActiveX client, use multiple inheritance from the <db:code><db:link xlink:href="qaxbindable.html" xrefstyle="class" annotations="QAxBindable">QAxBindable</db:link></db:code> class:</db:para>
            <db:programlisting>
#include &lt;QAxBindable&gt;
#include &lt;QWidget&gt;

class MyActiveX : public QWidget, public QAxBindable
{
    Q_OBJECT
</db:programlisting>
            <db:para>When implementing the property write functions, use the <db:code><db:link xlink:href="qaxbindable.html" xrefstyle="class" annotations="QAxBindable">QAxBindable</db:link></db:code> class's requestPropertyChange() and propertyChanged() functions to allow ActiveX clients to bind to the control properties. <db:footnote>
                  <db:para>This is not required, but gives the client more control over the ActiveX control.</db:para>
               </db:footnote>
            </db:para>
            <db:section xml:id="serving-controls">
               <db:title>Serving Controls</db:title>
               <db:para>To make a COM server available to the COM system it must be registered in the system registry using five unique identifiers. These identifiers are provided by tools like <db:code>guidgen</db:code> or <db:code>uuidgen</db:code>. The registration information allows COM to localize the binary providing a requested ActiveX control, marshall remote procedure calls to the control and read type information about the methods and properties exposed by the control.</db:para>
               <db:para>To create the COM object when the client asks for it the server must export an implementation of a <db:code><db:link xlink:href="qaxfactory.html" xrefstyle="class" annotations="QAxFactory">QAxFactory</db:link></db:code>. The easist way to do this is to use a set of macros:</db:para>
               <db:programlisting>
QAXFACTORY_BEGIN("{ad90301a-849e-4e8b-9a91-0a6dc5f6461f}",
                 "{a8f21901-7ff7-4f6a-b939-789620c03d83}")
    QAXCLASS(MyWidget)
    QAXCLASS(MyWidget2)
    QAXTYPE(MySubType)
QAXFACTORY_END()
</db:programlisting>
               <db:para>This will export <db:code>MyWidget</db:code> and <db:code>MyWidget2</db:code> as COM objects that can be created by COM clients, and will register <db:code>MySubType</db:code> as a type that can be used in properties and parameters of <db:code>MyWidget</db:code> and <db:code>MyWidget2</db:code>.</db:para>
               <db:para>The <db:code><db:link xlink:href="qaxfactory.html" xrefstyle="class" annotations="QAxFactory">QAxFactory class documentation</db:link></db:code> explains how to use this macro, and how to implement and use custom factories.</db:para>
               <db:para>For out-of-process executable servers you can implement a main() function to instantiate a <db:code><db:link xlink:href="qapplication.html" xrefstyle="class" annotations="QApplication">QApplication</db:link></db:code> object and enter the event loop just like any normal Qt application. By default the application will start as a standard Qt application, but if you pass <db:code>-activex</db:code> on the command line it will start as an ActiveX server. Use <db:code><db:link xlink:href="qaxfactory.html#isServer" xrefstyle="function" annotations="QAxFactory::isServer()">QAxFactory::isServer()</db:link></db:code> to create and run a standard application interface, or to prevent a stand-alone execution:</db:para>
               <db:programlisting>
#include &lt;QApplication&gt;
#include &lt;QAxFactory&gt;

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    if (!QAxFactory::isServer()) {
        // create and show main window
    }
    return app.exec();
}
</db:programlisting>
               <db:para>This is however not necessary as <db:link xlink:href="activeqt-index.html" xrefstyle="page" annotations="ActiveQt">ActiveQt</db:link> provides a default implementation of a main function. The default implementation calls <db:code><db:link xlink:href="qaxfactory.html#startServer" xrefstyle="function" annotations="QAxFactory::startServer()">QAxFactory::startServer()</db:link></db:code>, creates a <db:code><db:link xlink:href="qapplication.html" xrefstyle="class" annotations="QApplication">QApplication</db:link></db:code> instance and calls exec().</db:para>
               <db:para>To build the ActiveX server executable run <db:code>qmake</db:code> to generate the makefile, and use your compiler's make tool as for any other Qt application. The make process will also register the controls in the system registry by calling the resulting executable with the <db:code>-regserver</db:code> command line option.</db:para>
               <db:para>If the ActiveX server is an executable, the following command line options are supported:</db:para>
               <db:informaltable>
                  <db:thead>
                     <db:tr>
                        <db:th>
                           <db:para>Option</db:para>
                        </db:th>
                        <db:th>
                           <db:para>Result</db:para>
                        </db:th>
                     </db:tr>
                  </db:thead>
                  <db:tr>
                     <db:td>
                        <db:para>
                           <db:code>-regserver</db:code>
                        </db:para>
                     </db:td>
                     <db:td>
                        <db:para>Registers the server in the system registry</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>
                           <db:code>-unregserver</db:code>
                        </db:para>
                     </db:td>
                     <db:td>
                        <db:para>Unregisters the server from the system registry</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>
                           <db:code>-activex</db:code>
                        </db:para>
                     </db:td>
                     <db:td>
                        <db:para>Starts the application as an ActiveX server</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>
                           <db:code>-dumpidl &lt;file&gt; -version x.y</db:code>
                        </db:para>
                     </db:td>
                     <db:td>
                        <db:para>Writes the server's IDL to the specified file. The type library will have version x.y</db:para>
                     </db:td>
                  </db:tr>
               </db:informaltable>
               <db:para>In-process servers can be registered using the <db:code>regsvr32</db:code> tool available on all Windows systems.</db:para>
            </db:section>
            <db:section xml:id="typical-compile-time-problems">
               <db:title>Typical Compile-Time Problems</db:title>
               <db:para>The compiler/linker errors listed are based on those issued by the Microsoft Visual C++ 6.0 compiler.</db:para>
            </db:section>
            <db:section xml:id="no-overloaded-function-takes-2-parameters">
               <db:title>"No overloaded function takes 2 parameters"</db:title>
               <db:para>When the error occurs in code that uses the <db:code><db:link xlink:href="qaxfactory.html#QAXFACTORY_DEFAULT" xrefstyle="function" annotations="QAXFACTORY_DEFAULT()">QAXFACTORY_DEFAULT()</db:link></db:code> macro, the widget class had no constructor that can be used by the default factory. Either add a standard widget constructor or implement a custom factory that doesn't require one.</db:para>
               <db:para>When the error occurs in code that uses the <db:code><db:link xlink:href="qaxfactory.html#QAXFACTORY_EXPORT" xrefstyle="function" annotations="QAXFACTORY_EXPORT()">QAXFACTORY_EXPORT()</db:link></db:code> macro, the <db:code><db:link xlink:href="qaxfactory.html" xrefstyle="class" annotations="QAxFactory">QAxFactory</db:link></db:code> subclass had no appropriate constructor. Provide a public class constructor like</db:para>
               <db:programlisting>
MyFactory(const QUuid &amp;, const QUuid &amp;);
</db:programlisting>
               <db:para>for your factory class.</db:para>
            </db:section>
            <db:section xml:id="syntax-error-bad-suffix-on-number">
               <db:title>"Syntax error: bad suffix on number"</db:title>
               <db:para>The unique identifiers have not been passed as strings into the <db:code><db:link xlink:href="qaxfactory.html#QAXFACTORY_EXPORT" xrefstyle="function" annotations="QAXFACTORY_EXPORT()">QAXFACTORY_EXPORT()</db:link></db:code> or <db:code><db:link xlink:href="qaxfactory.html#QAXFACTORY_DEFAULT" xrefstyle="function" annotations="QAXFACTORY_DEFAULT()">QAXFACTORY_DEFAULT()</db:link></db:code> macro.</db:para>
            </db:section>
            <db:section xml:id="unresolved-external-symbol-ucm-instantiate">
               <db:title>"Unresolved external symbol _ucm_instantiate"</db:title>
               <db:para>The server does not export an implementation of a <db:code><db:link xlink:href="qaxfactory.html" xrefstyle="class" annotations="QAxFactory">QAxFactory</db:link></db:code>. Use the <db:code><db:link xlink:href="qaxfactory.html#QAXFACTORY_EXPORT" xrefstyle="function" annotations="QAXFACTORY_EXPORT()">QAXFACTORY_EXPORT()</db:link></db:code> macro in one of the project's implementation files to instantiate and export a factory, or use the <db:code><db:link xlink:href="qaxfactory.html#QAXFACTORY_DEFAULT" xrefstyle="function" annotations="QAXFACTORY_DEFAULT()">QAXFACTORY_DEFAULT()</db:link></db:code> macro to use the default factory.</db:para>
            </db:section>
            <db:section xml:id="ucm-initialize-already-defined-in">
               <db:title>"_ucm_initialize already defined in ..."</db:title>
               <db:para>The server exports more than one implementation of a <db:code><db:link xlink:href="qaxfactory.html" xrefstyle="class" annotations="QAxFactory">QAxFactory</db:link></db:code>, or exports the same implementation twice. If you use the default factory, the <db:code><db:link xlink:href="qaxfactory.html#QAXFACTORY_DEFAULT" xrefstyle="function" annotations="QAXFACTORY_DEFAULT()">QAXFACTORY_DEFAULT()</db:link></db:code> macro must only be used once in the project. Use a custom <db:code><db:link xlink:href="qaxfactory.html" xrefstyle="class" annotations="QAxFactory">QAxFactory</db:link></db:code> implementation and the <db:code><db:link xlink:href="qaxfactory.html#QAXFACTORY_EXPORT" xrefstyle="function" annotations="QAXFACTORY_EXPORT()">QAXFACTORY_EXPORT()</db:link></db:code> macro if the server provides multiple ActiveX controls.</db:para>
            </db:section>
            <db:section xml:id="distributing-qaxserver-binaries">
               <db:title>Distributing QAxServer Binaries</db:title>
               <db:para>ActiveX servers written with Qt can use Qt either as a shared library, or have Qt linked statically into the binary. Both ways will produce rather large packages (either the server binary itself becomes large, or you have to ship the Qt DLL).</db:para>
            </db:section>
            <db:section xml:id="installing-stand-alone-servers">
               <db:title>Installing Stand-Alone Servers</db:title>
               <db:para>When your ActiveX server can also run as a stand-alone application, run the server executable with the <db:code>-regserver</db:code> command line parameter after installing the executable on the target system. After that the controls provided by the server will be available to ActiveX clients.</db:para>
            </db:section>
            <db:section xml:id="installing-in-process-servers">
               <db:title>Installing In-Process Servers</db:title>
               <db:para>When your ActiveX server is part of an installation package, use the <db:code>regsvr32</db:code> tool provided by Microsoft to register the controls on the target system. If this tool is not present, load the DLL into your installer process, resolve the <db:code>DllRegisterServer</db:code> symbol and call the function:</db:para>
               <db:programlisting>
HMODULE dll = LoadLibrary("myserver.dll");
typedef HRESULT(__stdcall *DllRegisterServerProc)();
DllRegisterServerProc DllRegisterServer =
    (DllRegisterServerProc)GetProcAddress(dll, "DllRegisterServer");

HRESULT res = E_FAIL;
if (DllRegisterServer)
    res = DllRegisterServer();
if (res != S_OK)
    // error handling
</db:programlisting>
            </db:section>
            <db:section xml:id="distributing-servers-over-the-internet">
               <db:title>Distributing Servers over the Internet</db:title>
               <db:para>If you want to use controls in your server in web-pages you need to make the server available to the browser used to view your page, and you need to specify the location of the server package in your page.</db:para>
               <db:para>To specify the location of a server, use the CODEBASE attribute in the OBJECT tag of your web-site. The value can point to the server file itself, to an INF file listing other files the server requires (e.g. the Qt DLL), or a compressed CAB archive.</db:para>
               <db:para>INF and CAB files are documented in almost every book available about ActiveX and COM programming as well as in the MSDN library and various other Online resources. The examples include INF files that can be used to build CAB archives:</db:para>
               <db:programlisting>
[version]
    signature="$CHICAGO$"
    AdvancedINF=2.0
 [Add.Code]
    simpleax.exe=simpleax.exe
 [simpleax.exe]
    file-win32-x86=thiscab
    clsid={DF16845C-92CD-4AAB-A982-EB9840E74669}
    RegisterServer=yes
</db:programlisting>
               <db:para>The CABARC tool from Microsoft can easily generate CAB archives:</db:para>
               <db:programlisting>
cabarc N simpleax.cab simpleax.exe simple.inf
</db:programlisting>
               <db:para>The INF files assume a static build of Qt, so no dependencies to other DLLs are listed in the INF files. To distribute an ActiveX server depending on DLLs you must add the dependencies, and provide the library files with the archive.</db:para>
            </db:section>
            <db:section xml:id="using-the-controls">
               <db:title>Using the Controls</db:title>
               <db:para>To use the ActiveX controls, e.g. to embed them in a web page, use the <db:code>&lt;object&gt;</db:code> HTML tag.</db:para>
               <db:programlisting>
&lt;object ID="MyActiveX1" CLASSID="CLSID:ad90301a-849e-4e8b-9a91-0a6dc5f6461f"&gt;
   ...
&lt;\object&gt;
</db:programlisting>
               <db:para>To initialize the control's properties, use</db:para>
               <db:programlisting>
&lt;object ID=...&gt;
    &lt;param name="name" value="value"&gt;
&lt;\object&gt;
</db:programlisting>
               <db:para>If the web browser supports scripting use JavaScript, VBScript and forms to script the control. The <db:link xlink:href="examples-activeqt.html" xrefstyle="page" annotations="ActiveQt Examples">ActiveQt Examples</db:link> include demonstration HTML pages for the example controls.</db:para>
            </db:section>
            <db:section xml:id="supported-and-unsupported-activex-clients">
               <db:title>Supported and Unsupported ActiveX Clients</db:title>
               <db:para>The following is largly based on our own experiements with ActiveX controls and client applications, and is by no means complete.</db:para>
            </db:section>
            <db:section xml:id="supported-clients">
               <db:title>Supported Clients</db:title>
               <db:para>These standard applications work with ActiveX controls developed with <db:link xlink:href="activeqt-index.html" xrefstyle="page" annotations="ActiveQt">ActiveQt</db:link>. Note that some clients support only in-process controls.</db:para>
               <db:itemizedlist>
                  <db:listitem>
                     <db:para>Internet Explorer</db:para>
                  </db:listitem>
                  <db:listitem>
                     <db:para>Microsoft ActiveX Control Test Container</db:para>
                  </db:listitem>
                  <db:listitem>
                     <db:para>Microsoft Visual Studio 6.0</db:para>
                  </db:listitem>
                  <db:listitem>
                     <db:para>Microsoft Visual Studio.NET/2003</db:para>
                  </db:listitem>
                  <db:listitem>
                     <db:para>Microsoft Visual Basic 6.0</db:para>
                  </db:listitem>
                  <db:listitem>
                     <db:para>MFC- and ATL-based containers</db:para>
                  </db:listitem>
                  <db:listitem>
                     <db:para>Sybase PowerBuilder</db:para>
                  </db:listitem>
                  <db:listitem>
                     <db:para>
                        <db:link xlink:href="activeqt-index.html" xrefstyle="page" annotations="ActiveQt">ActiveQt</db:link> based containers</db:para>
                  </db:listitem>
               </db:itemizedlist>
               <db:para>Microsoft Office applications are supported, but you need to register the controls as "Insertable" objects. Reimplement <db:code><db:link xlink:href="qaxfactory.html#registerClass" xrefstyle="function" annotations="QAxFactory::registerClass">QAxFactory::registerClass</db:link></db:code> to add this attribute to the COM class, or set the "Insertable" class info for your class to "yes" using the <db:code><db:link xlink:href="qobject.html#Q_CLASSINFO" xrefstyle="function" annotations="Q_CLASSINFO">Q_CLASSINFO</db:link></db:code> macro.</db:para>
            </db:section>
            <db:section xml:id="unsupported-clients">
               <db:title>Unsupported Clients</db:title>
               <db:para>We have not managed to make <db:link xlink:href="activeqt-index.html" xrefstyle="page" annotations="ActiveQt">ActiveQt</db:link> based COM objects work with the following client applications.</db:para>
               <db:itemizedlist>
                  <db:listitem>
                     <db:para>Borland C++ Builder (Versions 5 and 6)</db:para>
                  </db:listitem>
                  <db:listitem>
                     <db:para>Borland Delphi</db:para>
                  </db:listitem>
               </db:itemizedlist>
            </db:section>
            <db:section xml:id="typical-runtime-errors">
               <db:title>Typical Runtime Errors</db:title>
            </db:section>
            <db:section xml:id="the-server-does-not-respond">
               <db:title>The Server Does Not Respond</db:title>
               <db:para>If the system is unable to start the server (check with the task manager whether the server runs a process), make sure that no DLL the server depends on is missing from the system path (e.g. the Qt DLL!). Use a dependency walker to view all dependencies of the server binary.</db:para>
               <db:para>If the server runs (e.g. the task manager lists a process), see the following section for information on debugging your server.</db:para>
            </db:section>
            <db:section xml:id="the-object-cannot-be-created">
               <db:title>The Object Cannot Be Created</db:title>
               <db:para>If the server could be built and registered correctly during the build process, but the object cannot be initiliazed e.g. by the OLE/COM Object Viewer application, make sure that no DLL the server depends on is missing from the system path (e.g. the Qt DLL). Use a dependency walker to view all dependencies of the server binary.</db:para>
               <db:para>If the server runs, see the following section for information on debugging your server.</db:para>
            </db:section>
            <db:section xml:id="debugging-runtime-errors">
               <db:title>Debugging Runtime Errors</db:title>
               <db:para>To debug an in-process server in Visual Studio, set the server project as the active project, and specify a client "executable for debug session" in the project settings (e.g. use the ActiveX Test Container). You can set breakpoints in your code, and also step into <db:link xlink:href="activeqt-index.html" xrefstyle="page" annotations="ActiveQt">ActiveQt</db:link> and Qt code if you installed the debug version.</db:para>
               <db:para>To debug an executable server, run the application in a debugger and start with the command line parameter <db:code>-activex</db:code>. Then start your client and create an instance of your ActiveX control. COM will use the existing process for the next client trying to create an ActiveX control.</db:para>
            </db:section>
            <db:section xml:id="class-information-and-tuning">
               <db:title>Class Information and Tuning</db:title>
               <db:para>To provide attributes for each COM class, use the <db:code><db:link xlink:href="qobject.html#Q_CLASSINFO" xrefstyle="function" annotations="Q_CLASSINFO">Q_CLASSINFO</db:link></db:code> macro, which is part of Qt's meta object system.</db:para>
               <db:informaltable>
                  <db:thead>
                     <db:tr>
                        <db:th>
                           <db:para>Key</db:para>
                        </db:th>
                        <db:th>
                           <db:para>Meaning of value</db:para>
                        </db:th>
                     </db:tr>
                  </db:thead>
                  <db:tr>
                     <db:td>
                        <db:para>Version</db:para>
                     </db:td>
                     <db:td>
                        <db:para>The version of the class (1.0 is default)</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>Description</db:para>
                     </db:td>
                     <db:td>
                        <db:para>A string describing the class.</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>ClassID</db:para>
                     </db:td>
                     <db:td>
                        <db:para>The class ID. You must reimplement <db:code><db:link xlink:href="qaxfactory.html#classID" xrefstyle="function" annotations="QAxFactory::classID">QAxFactory::classID</db:link></db:code> if not specified.</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>InterfaceID</db:para>
                     </db:td>
                     <db:td>
                        <db:para>The interface ID. You must reimplement <db:code><db:link xlink:href="qaxfactory.html#interfaceID" xrefstyle="function" annotations="QAxFactory::interfaceID">QAxFactory::interfaceID</db:link></db:code> if not specified.</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>EventsID</db:para>
                     </db:td>
                     <db:td>
                        <db:para>The event interface ID. No signals are exposed as COM events if not specified.</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>DefaultProperty</db:para>
                     </db:td>
                     <db:td>
                        <db:para>The property specified represents the default property of this class. Ie. the default property of a push button would be "text".</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>DefaultSignal</db:para>
                     </db:td>
                     <db:td>
                        <db:para>The signal specified respresents the default signal of this class. Ie. the default signal of a push button would be "clicked".</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>LicenseKey</db:para>
                     </db:td>
                     <db:td>
                        <db:para>Object creation requires the specified license key. The key can be empty to require a licensed machine. By default classes are not licensed. Also see the following section.</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>StockEvents</db:para>
                     </db:td>
                     <db:td>
                        <db:para>Objects expose stock events if value is "yes". See <db:code><db:link xlink:href="qaxfactory.html#hasStockEvents" xrefstyle="function" annotations="QAxFactory::hasStockEvents()">QAxFactory::hasStockEvents()</db:link></db:code>
                        </db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>ToSuperClass</db:para>
                     </db:td>
                     <db:td>
                        <db:para>Objects expose functionality of all super-classes up to and including the class name in value. See <db:code><db:link xlink:href="qaxfactory.html#exposeToSuperClass" xrefstyle="function" annotations="QAxFactory::exposeToSuperClass()">QAxFactory::exposeToSuperClass()</db:link></db:code>
                        </db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>Insertable</db:para>
                     </db:td>
                     <db:td>
                        <db:para>If the value is "yes" the class is registered to be "Insertable" and will be listed in OLE 2 containers (ie. Microsoft Office). This attribute is not be set by default.</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>Aggregatable</db:para>
                     </db:td>
                     <db:td>
                        <db:para>If the value is "no" the class does not support aggregation. By default aggregation is supported.</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>Creatable</db:para>
                     </db:td>
                     <db:td>
                        <db:para>If the value is "no" the class cannot be created by the client, and is only available through the API of another class (ie. the class is a sub-type).</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>RegisterObject</db:para>
                     </db:td>
                     <db:td>
                        <db:para>If the value is "yes" objects of this class are registered with OLE and accessible from the running object table (ie. clients can connect to an already running instance of this class). This attribute is only supported in out-of-process servers.</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>MIME</db:para>
                     </db:td>
                     <db:td>
                        <db:para>The object can handle data and files of the format specified in the value. The value has the format mime:extension:description. Multiple formats are separated by a semicolon.</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>CoClassAlias</db:para>
                     </db:td>
                     <db:td>
                        <db:para>The classname used in the generated IDL and in the registry. This is esp. useful for C++ classes that live in a namespace - by default, <db:link xlink:href="activeqt-index.html" xrefstyle="page" annotations="ActiveQt">ActiveQt</db:link> just removes the "::" to make the IDL compile.</db:para>
                     </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                        <db:para>Implemented Categories</db:para>
                     </db:td>
                     <db:td>
                        <db:para>List of comma-separated Category ID (CATID) UUIDs. Generic mechanism for specifying additional container capabilities, in addition to "control", "insertable" etc. Typical CATIDs include <db:code>CATID_InternetAware</db:code> ("{0DE86A58-2BAA-11CF-A229-00AA003D7352}"), <db:code>CATID_SafeForScripting</db:code> ("{7DD95801-9882-11CF-9FA9-00AA006C42C4}") as well as user-defined CATID values.</db:para>
                     </db:td>
                  </db:tr>
               </db:informaltable>
               <db:para>Note that both keys and values are case sensitive.</db:para>
               <db:para>The following declares version 2.0 of a class that exposes only its own API, and is available in the "Insert Objects" dialog of Microsoft Office applications.</db:para>
               <db:programlisting>
class MyActiveX : public QWidget
{
    Q_OBJECT
    Q_CLASSINFO("Version", "2.0")
    Q_CLASSINFO("ClassID", "{7a4cffd8-cbcd-4ae9-ae7e-343e1e5710df}")
    Q_CLASSINFO("InterfaceID", "{6fb035bf-8019-48d8-be51-ef05427d8994}")
    Q_CLASSINFO("EventsID", "{c42fffdf-6557-47c9-817a-2da2228bc29c}")
    Q_CLASSINFO("Insertable", "yes")
    Q_CLASSINFO("ToSuperClass", "MyActiveX")
    Q_PROPERTY(...)

public:
    MyActiveX(QWidget *parent = 0);

    ...
};
</db:programlisting>
            </db:section>
            <db:section xml:id="developing-licensed-components">
               <db:title>Developing Licensed Components</db:title>
               <db:para>If you develop components you might want to control who is able to instantiate those components. Since the server binary can be shipped to and registered on any client machine it is possible for anybody to use those components in his own software.</db:para>
               <db:para>Licensing components can be done using a variety of techniques, e.g. the code creating the control can provide a license key, or the machine on which the control is supposed to run needs to be licensed.</db:para>
               <db:para>To mark a Qt class as licensed specify a "LicenseKey" using the <db:code><db:link xlink:href="qobject.html#Q_CLASSINFO" xrefstyle="function" annotations="Q_CLASSINFO()">Q_CLASSINFO()</db:link></db:code> macro.</db:para>
               <db:programlisting>
class MyLicensedControl : public QWidget
{
    Q_OBJECT
    Q_CLASSINFO("LicenseKey", "&lt;key string&gt;")
    ...
};
</db:programlisting>
               <db:para>The key is required to be able to create an instance of <db:code>MyLicensedControl</db:code> on a machine that is not licensed itself. The licensed developer can now redistributes the server binary with his application, which creates the control using the value of "LicenseKey", while users of the application cannot create the control without the license key.</db:para>
               <db:para>If a single license key for the control is not sufficient (ie. you want differnet developers to receive different license keys) you can specify an empty key to indicate that the control requires a license, and reimplement <db:code><db:link xlink:href="qaxfactory.html#validateLicenseKey" xrefstyle="function" annotations="QAxFactory::validateLicenseKey()">QAxFactory::validateLicenseKey()</db:link></db:code> to verify that a license exists on the system (ie. through a license file).</db:para>
            </db:section>
            <db:section xml:id="more-interfaces">
               <db:title>More Interfaces</db:title>
               <db:para>ActiveX controls provided by <db:link xlink:href="activeqt-index.html" xrefstyle="page" annotations="ActiveQt">ActiveQt</db:link> servers support a minimal set of COM interfaces to implement the OLE specifications. When the ActiveX class inherits from the <db:code><db:link xlink:href="qaxbindable.html" xrefstyle="class" annotations="QAxBindable">QAxBindable</db:link></db:code> class it can also implement additional COM interfaces.</db:para>
               <db:para>Create a new subclass of <db:code><db:link xlink:href="qaxaggregated.html" xrefstyle="class" annotations="QAxAggregated">QAxAggregated</db:link></db:code> and use multiple inheritance to subclass additional COM interface classes.</db:para>
               <db:programlisting>
class AxImpl : public QAxAggregated, public ISomeCOMInterface
{
public:
    AxImpl() {}

    long queryInterface(const QUuid &amp;iid, void **iface);

    // IUnknown
    QAXAGG_IUNKNOWN

    // ISomeCOMInterface
    ...
}
</db:programlisting>
               <db:para>Reimplement the <db:code><db:link xlink:href="qaxaggregated.html#queryInterface" xrefstyle="function" annotations="QAxAggregated::queryInterface()">QAxAggregated::queryInterface()</db:link></db:code> function to support the additional COM interfaces.</db:para>
               <db:programlisting>
long AxImpl::queryInterface(const QUuid &amp;iid, void **iface)
{
    *iface = 0;
    if (iid == IID_ISomeCOMInterface)
        *iface = (ISomeCOMInterface *)this;
    else
        return E_NOINTERFACE;

    AddRef();
    return S_OK;
}
</db:programlisting>
               <db:para>Since <db:code>ISomeCOMInterface</db:code> is a subclass of <db:code>IUnknown</db:code> you will have to implement the <db:code>QueryInterface()</db:code>, <db:code>AddRef()</db:code>, and <db:code>Release()</db:code> functions. Use the QAXAGG_IUNKNOWN macro in your class definition to do that. If you implement the <db:code>IUnknown</db:code> functions manually, delegate the calls to the interface pointer returned by the <db:code><db:link xlink:href="qaxaggregated.html#controllingUnknown" xrefstyle="function" annotations="QAxAggregated::controllingUnknown()">QAxAggregated::controllingUnknown()</db:link></db:code> function, e.g.</db:para>
               <db:programlisting>
HRESULT AxImpl::QueryInterface(REFIID iid, void **iface)
{
    return controllingUnknown()-&gt;QueryInterface(iid, iface);
}
</db:programlisting>
               <db:para>Do not support the <db:code>IUnknown</db:code> interface itself in your <db:code><db:link xlink:href="qaxaggregated.html#queryInterface" xrefstyle="function" annotations="QAxAggregated::queryInterface()">queryInterface()</db:link></db:code> implementation.</db:para>
               <db:para>Implement the methods of the COM interfaces, and use <db:code><db:link xlink:href="qaxaggregated.html#object" xrefstyle="function" annotations="QAxAggregated::object()">QAxAggregated::object()</db:link></db:code> if you need to make calls to the <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> subclass implementing the control.</db:para>
               <db:para>In your <db:code><db:link xlink:href="qaxbindable.html" xrefstyle="class" annotations="QAxBindable">QAxBindable</db:link></db:code> subclass, implement <db:code><db:link xlink:href="qaxbindable.html#createAggregate" xrefstyle="function" annotations="QAxBindable::createAggregate()">QAxBindable::createAggregate()</db:link></db:code> to return a new object of the <db:code><db:link xlink:href="qaxaggregated.html" xrefstyle="class" annotations="QAxAggregated">QAxAggregated</db:link></db:code> subclass.</db:para>
               <db:programlisting>
class MyActiveX : public QWidget, public QAxBindable
{
    Q_OBJECT

public:
    MyActiveX(QWidget *parent);

    QAxAggregated *createAggregate()
    {
        return new AxImpl();
    }
};
</db:programlisting>
            </db:section>
            <db:section>
               <db:title>See Also</db:title>
               <db:para>
                  <db:emphasis role="bold">See Also:</db:emphasis>
                  <db:simplelist type="vert">
                     <db:member>
                        <db:link xlink:href="activeqt-index.html" xrefstyle="page" annotations="ActiveQt Framework">ActiveQt Framework</db:link>
                     </db:member>
                  </db:simplelist>
               </db:para>
            </db:section>
         </db:section>
      </db:section>
   </db:section>
</db:article>
