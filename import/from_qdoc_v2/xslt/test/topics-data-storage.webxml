<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <page name="topics-data-storage.html" href="topics-data-storage.html" status="active" location="datastorage.qdoc" filepath="C:/Qt/5.11.1/Src/qtdoc/doc/src/datastorage.qdoc" lineno="28" subtype="page" title="Data Storage" fulltitle="Data Storage" subtitle="" module="QtDoc" brief="Qt's data storage features">
            <contents name="saving-and-loading-data" title="Saving and Loading Data" level="1"/>
            <contents name="sql-support-in-qt" title="SQL Support in Qt" level="1"/>
            <contents name="xml-support-in-qt" title="XML Support in Qt" level="1"/>
            <contents name="json-in-qt" title="JSON in Qt" level="1"/>
            <contents name="local-storage" title="Local Storage" level="1"/>
            <contents name="qsettings-class" title="QSettings Class" level="1"/>
            <contents name="resources" title="Resources" level="1"/>
            <contents name="file-archiving" title="File Archiving" level="1"/>
            <description path="C:/Qt/5.11.1/Src/qtdoc/doc/src/datastorage.qdoc" line="28" column="4">
                <brief>Qt's data storage features</brief>
                <section id="saving-and-loading-data">
                    <heading level="1">Saving and Loading Data</heading>
                    <para>The <link raw="QIODevice" href="qiodevice.html" type="class">QIODevice</link> class is the base class for all file and data storage devices in <link raw="Qt Core" href="qtcore-index.html" type="page" page="Qt Core">Qt Core</link>. All classes that are used for reading and writing data inherit from it.</para>
                    <para>Examples of devices are <link raw="QFile" href="qfile.html" type="class">QFile</link>, <link raw="QBuffer" href="qbuffer.html" type="class">QBuffer</link>, <link raw="QTcpSocket" href="qtcpsocket.html" type="class">QTcpSocket</link>, and <link raw="QProcess" href="qprocess.html" type="class">QProcess</link>. <link raw="QFile" href="qfile.html" type="class">QFile</link> is used for reading and writing text, binary files, and resources. The <link raw="QBuffer" href="qbuffer.html" type="class">QBuffer</link> class provides a <link raw="QIODevice" href="qiodevice.html" type="class">QIODevice</link> interface for a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>. <link raw="QTcpSocket" href="qtcpsocket.html" type="class">QTcpSocket</link> enables the developer to establish a TCP connection and transfer streams of data. <link raw="QProcess" href="qprocess.html" type="class">QProcess</link> is used to start external programs, and to read from and write to that process.</para>
                    <list type="bullet">
                        <item>
                            <para>
                                <link raw="Input/Output and Networking" href="io.html" type="">Input/Output and Networking</link> (list of I/O related classes)</para>
                        </item>
                        <item>
                            <para>
                                <link raw="File and Datastream Functions" href="io-functions.html" type="page" page="File and Datastream Functions">File and Datastream Functions</link></para>
                        </item>
                        <item>
                            <para>
                                <link raw="Serializing Qt Data Types" href="datastreamformat.html" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link></para>
                        </item>
                    </list>
                </section>
                <section id="sql-support-in-qt">
                    <heading level="1">SQL Support in Qt</heading>
                    <para>The <link raw="Qt SQL" href="qtsql-index.html" type="page" page="Qt SQL">Qt SQL</link> module uses driver plugins to communicate with several database APIs. Qt has drivers for SQLite, MySQL, DB2, Borland InterBase, Oracle, ODBC, and PostgreSQL. It is also possible to develop your own driver if Qt does not provide the driver needed.</para>
                    <para>Qt's SQL classes can be divided in 3 layers:</para>
                    <table>
                        <header>
                            <item>
                                <para>Layer</para>
                            </item>
                            <item>
                                <para>Purpose</para>
                            </item>
                            <item>
                                <para>Example class</para>
                            </item>
                        </header>
                        <row>
                            <item>
                                <list type="bullet">
                                    <item>
                                        <para>Driver layer</para>
                                    </item>
                                    <item>
                                        <para>SQL API layer</para>
                                    </item>
                                    <item>
                                        <para>User Interface layer</para>
                                    </item>
                                </list>
                            </item>
                            <item>
                                <list type="bullet">
                                    <item>
                                        <para>Low-level communication between database and the SQL API layer</para>
                                    </item>
                                    <item>
                                        <para>Provide access to databases</para>
                                    </item>
                                    <item>
                                        <para>Link data from a database to data-aware widgets</para>
                                    </item>
                                </list>
                            </item>
                            <item>
                                <list type="bullet">
                                    <item>
                                        <para>
                                            <link raw="QSqlDriver" href="qsqldriver.html" type="class">QSqlDriver</link>, <link raw="QSqlDriverCreator" href="qsqldrivercreator.html" type="class">QSqlDriverCreator</link></para>
                                    </item>
                                    <item>
                                        <para>
                                            <link raw="QSqlDatabase" href="qsqldatabase.html" type="class">QSqlDatabase</link>, <link raw="QSqlQuery" href="qsqlquery.html" type="class">QSqlQuery</link></para>
                                    </item>
                                    <item>
                                        <para>
                                            <link raw="QSqlQueryModel" href="qsqlquerymodel.html" type="class">QSqlQueryModel</link> (readonly), <link raw="QSqlTableModel" href="qsqltablemodel.html" type="class">QSqlTableModel</link> (read/write), <link raw="QSqlRelationalTableModel" href="qsqlrelationaltablemodel.html" type="class">QSqlRelationalTableModel</link> (read/write with foreign-key support)</para>
                                    </item>
                                </list>
                            </item>
                        </row>
                    </table>
                    <para>With the MySQL driver, it is possible to connect to a MySQL server. In order to build the QMYSQL Plugin for Unix or , you need the MySQL header files as well as the shared library, libmysqlclient.so. To compile the plugin for Windows, install MySQL.</para>
                    <para>If you use the embedded MySQL Server, you do not need a MySQL server in order to use that database system. In order to do so, you need to link the Qt plugin to libmysqld instead of libmysqlclient.</para>
                    <para>The Qt SQLite plugin is very suitable for local storage. SQLite is a relational database management system contained in a small (~350 KiB) C library. In contrast to other database management systems, SQLite is not a separate process that is accessed from the client application, but an integral part of it. SQLite operates on a single file, which must be set as the database name when opening a connection. If the file does not exist, SQLite will try to create it.</para>
                    <para>SQLite has some restrictions regarding multiple users and multiple transactions. If you are reading or writing on a file from different transactions, your application might freeze until one transaction commits or rolls back.</para>
                    <para>Once the driver part is set up, the data is accessible using the classes, <link raw="QSqlQueryModel" href="qsqlquerymodel.html" type="class">QSqlQueryModel</link>, <link raw="QSqlTableModel" href="qsqltablemodel.html" type="class">QSqlTableModel</link>, and <link raw="QSqlRelationalTableModel" href="qsqlrelationaltablemodel.html" type="class">QSqlRelationalTableModel</link>. <link raw="QSqlTableModel" href="qsqltablemodel.html" type="class">QSqlTableModel</link> and <link raw="QSqlRelationalTableModel" href="qsqlrelationaltablemodel.html" type="class">QSqlRelationalTableModel</link> provide editable models that can used with Qt's item views. <link raw="QSqlTableModel" href="qsqltablemodel.html" type="class">QSqlTableModel</link> has read/write access to a single table, whereas <link raw="QSqlRelationalTableModel" href="qsqlrelationaltablemodel.html" type="class">QSqlRelationalTableModel</link> has read/write access to the main table (not to the table with the foreign key).</para>
                    <para>The following pages contain information about incorporating SQL into applications:</para>
                    <list type="bullet">
                        <item>
                            <para>
                                <link raw="SQL Programming" href="sql-programming.html" type="page" page="SQL Programming">SQL Programming</link></para>
                            <list type="bullet">
                                <item>
                                    <para>
                                        <link raw="Database Classes" href="sql-programming.html#database-classes" type="page" page="SQL Programming">Database Classes</link></para>
                                </item>
                                <item>
                                    <para>
                                        <link raw="Executing SQL Statements" href="sql-sqlstatements.html" type="page" page="Executing SQL Statements">Executing SQL Statements</link></para>
                                </item>
                                <item>
                                    <para>
                                        <link raw="Using the SQL Model Classes" href="sql-model.html" type="page" page="Using the SQL Model Classes">Using the SQL Model Classes</link></para>
                                </item>
                                <item>
                                    <para>
                                        <link raw="Presenting Data in a Table View" href="sql-presenting.html" type="page" page="Presenting Data in a Table View">Presenting Data in a Table View</link></para>
                                </item>
                                <item>
                                    <para>
                                        <link raw="Creating Data-Aware Forms" href="sql-forms.html" type="page" page="Creating Data-Aware Forms">Creating Data-Aware Forms</link></para>
                                </item>
                            </list>
                        </item>
                    </list>
                </section>
                <section id="xml-support-in-qt">
                    <heading level="1">XML Support in Qt</heading>
                    <para>Qt provides APIs to read and parse XML streams, and also to write to these streams. The following key classes facilitate these actions by providing the necessary infrastructure:</para>
                    <list type="bullet">
                        <item>
                            <para>
                                <link raw="QXmlStreamReader" href="qxmlstreamreader.html" type="class">QXmlStreamReader</link> class provides a parser to read XML. It is a well-formed XML 1.0 parser that does not include external parsed entities.</para>
                            <list type="bullet">
                                <item>
                                    <para>It understands and resolves XML namespaces. For example, in case of a StartElement, namespaceUri() returns the namespace the element is in, and <link raw="name()" href="13-qdoc-commands-topics.html#name" type="page" page="Topic Commands">name()</link> returns the element's local name. The combination of namespaceUri() and <link raw="name()" href="13-qdoc-commands-topics.html#name" type="page" page="Topic Commands">name()</link> uniquely identifies an element.</para>
                                </item>
                                <item>
                                    <para>It is not CPU-intensive, as it doesn't store the entire XML document tree in memory. It only stores the current token at the time it is reported.</para>
                                </item>
                            </list>
                        </item>
                        <item>
                            <para>The <link raw="QXmlStreamWriter" href="qxmlstreamwriter.html" type="class">QXmlStreamWriter</link> class provides an XML writer with a simple streaming API. It is the counterpart to <link raw="QXmlStreamReader" href="qxmlstreamreader.html" type="class">QXmlStreamReader</link> for writing XML, and it operates on a <link raw="QIODevice" href="qiodevice.html" type="class">QIODevice</link> specified with setDevice().</para>
                            <list type="bullet">
                                <item>
                                    <para>It is a simple API that provides a dedicated function for every XML token or event you want to write.</para>
                                </item>
                                <item>
                                    <para>It takes care of prefixing namespaces based on the namespaceUri specified while writing elements or attributes. If you have to use certain standardized prefixes, you can force the writer to use them by declaring the namespaces manually with either writeNamespace() or writeDefaultNamespace().</para>
                                </item>
                                <item>
                                    <para>It can automatically format the generated XML data by adding line-breaks and indentation, making it readable. This feature can be turned on with the auto-formatting property.</para>
                                </item>
                                <item>
                                    <para>It encodes XML in UTF-8 by default. Different encodings can be enforced using setCodec().</para>
                                </item>
                            </list>
                        </item>
                    </list>
                    <para>Besides reading and writing to XML streams, Qt also provides APIs for the following additional use cases:</para>
                    <list type="bullet">
                        <item>
                            <para>Querying an XML data source using <link raw="XQuery" href="xmlprocessing.html" type="page" page="XQuery">XQuery</link> and XPath</para>
                        </item>
                        <item>
                            <para>XML transformation using XSLT</para>
                        </item>
                        <item>
                            <para>XML schema validation</para>
                        </item>
                    </list>
                    <para>The following topics provide more insight into Qt XML support:</para>
                    <list type="bullet">
                        <item>
                            <para>
                                <link raw="An Introduction to Namespaces" href="xml-namespaces.html" type="page" page="An Introduction to Namespaces">An Introduction to Namespaces</link></para>
                        </item>
                        <item>
                            <para>
                                <link raw="XML Streaming" href="xml-streaming.html" type="page" page="XML Streaming">XML Streaming</link></para>
                        </item>
                        <item>
                            <para>
                                <link raw="A Short Path to XQuery" href="xquery-introduction.html" type="page" page="A Short Path to XQuery">A Short Path to XQuery</link></para>
                        </item>
                        <item>
                            <para>
                                <link raw="XmlListModel" href="qml-qtquick-xmllistmodel-xmllistmodel.html" type="">XmlListModel</link></para>
                        </item>
                        <item>
                            <para>
                                <link raw="Qt XML Patterns" href="qtxmlpatterns-index.html" type="page" page="Qt XML Patterns">Qt XML Patterns</link></para>
                        </item>
                    </list>
                </section>
                <section id="json-in-qt">
                    <heading level="1">JSON in Qt</heading>
                    <para>JSON is a text-based open standard for data interchange that is easy to read and parse. It is used for representing simple data structures and associative arrays, called objects. It is related to JavaScript, but is a language-independent notation form.</para>
                    <para>An object can take 2 forms:</para>
                    <table>
                        <header>
                            <list type="bullet">
                                <item>
                                    <para>Collection of name/value pairs</para>
                                </item>
                                <item>
                                    <para>Ordered list of values</para>
                                </item>
                            </list>
                        </header>
                        <row>
                            <item>
                                <list type="bullet">
                                    <item>
                                        <para>{ &quot;last_name&quot;: &quot;Routledge&quot;, &quot;first_name&quot;: &quot;Ronald&quot;, &quot;birth_date&quot;: 1960 }</para>
                                    </item>
                                    <item>
                                        <para>&quot;colours&quot;: [&quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;]</para>
                                    </item>
                                </list>
                            </item>
                            <item/>
                        </row>
                    </table>
                    <list type="bullet">
                        <item>
                            <para>
                                <link raw="JSON Support in Qt" href="json.html" type="">JSON Support in Qt</link></para>
                        </item>
                        <item>
                            <para>
                                <link raw="JSON Save Game Example" href="qtcore-serialization-savegame-example.html" type="page" page="JSON Save Game Example">JSON Save Game Example</link></para>
                        </item>
                    </list>
                </section>
                <section id="local-storage">
                    <heading level="1">Local Storage</heading>
                    <para>The Local Storage API provides the ability to access local offline storage in an SQL database from QML and JavaScript.</para>
                    <para>These databases are user-specific and QML-specific, but accessible to all QML applications. They are stored in the Databases subdirectory of QDeclarativeEngine::offlineStoragePath() as SQLite databases (<link raw="SQL Database Drivers" href="sql-driver.html" type="page" page="SQL Database Drivers">SQL Database Drivers</link>).</para>
                    <para>The API conforms to the Synchronous API of the HTML5 Web Database API, W3C Working Draft 29 October 2009 (<link raw="HTML5 Web Database API" href="http://www.w3.org/TR/2009/WD-webdatabase-20091029/" type="page" page="HTML5 Web Database API">HTML5 Web Database API</link>).</para>
                    <para>See <link raw="Qt Quick Examples - Local Storage" href="qtquick-localstorage-example.html" type="page" page="Qt Quick Examples - Local Storage">Qt Quick Examples - Local Storage</link> for a basic demonstration of using the Local Storage API.</para>
                    <list type="bullet">
                        <item>
                            <para>
                                <link raw="Qt Quick Local Storage QML Types" href="qtquick-localstorage-qmlmodule.html" type="">Qt Quick Local Storage QML Types</link></para>
                        </item>
                    </list>
                </section>
                <section id="qsettings-class">
                    <heading level="1">QSettings Class</heading>
                    <para>The <link raw="QSettings" href="qsettings.html" type="class">QSettings</link> class provides persistent storage of application settings. An application usually remembers its settings from the previous session.</para>
                    <para>Settings are stored differently on different platforms. For example, on Windows they are stored in the registry, whereas on  they are stored in XML files.</para>
                    <para>
                        <link raw="QSettings" href="qsettings.html" type="class">QSettings</link> enable you to save and restore application settings in a portable manner. Constructing and destroying a <link raw="QSettings" href="qsettings.html" type="class">QSettings</link> object is lightweight and fast. While creating an object of <link raw="QSettings" href="qsettings.html" type="class">QSettings</link>, it is a good practice to specify not only the name of the application, but also the name of your organization. For example:</para>
                    <code>QSettings settings(&quot;MyCompany&quot;, &quot;Accountancy&quot;);</code>
                </section>
                <section id="resources">
                    <heading level="1">Resources</heading>
                    <para>The Qt Resource System is a platform-independent mechanism for storing binary files in the application's executable. This is handy if your application frequently needs a certain file, or set of files. It also protects against loss of that particular file .</para>
                    <para>Resource data can either be compiled into the binary and accessed immediately in the application code, or a binary resource can be created dynamically and registered with the resource system by the application.</para>
                    <para>By default, resources are accessible from the application code by the same file name as they are stored in the source tree, with a <teletype type="highlighted">:/</teletype> prefix, or by a URL with a qrc scheme.</para>
                    <list type="bullet">
                        <item>
                            <para>
                                <link raw="The Qt Resource System" href="resources.html" type="page" page="The Qt Resource System">The Qt Resource System</link></para>
                        </item>
                    </list>
                </section>
                <section id="file-archiving">
                    <heading level="1">File Archiving</heading>
                    <para>An archive file is a collection of files or directories which are generally compressed in order to reduce the space they would otherwise consume on a drive. Examples of archive files are ZIP, TAR, RAR and 7z.</para>
                    <para>Qt has support for archives produced by zlib (see <link raw="How to compress data with Qt?" href="http://qt-project.org/faq/answer/how_to_compress_data_with_qt" type="page" page="How to compress data with Qt?">qCompress() and qUncompress()</link>).</para>
                </section>
            </description>
        </page>
    </document>
</WebXML>
