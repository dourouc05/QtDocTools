<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink">
   <db:info>
      <db:title>QAndroidJniObject</db:title>
      <db:abstract>
         <db:para>Provides APIs to call Java code from C++</db:para>
      </db:abstract>
   </db:info>
   <db:classsynopsis>
      <db:ooclass>
         <db:classname>QAndroidJniObject</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="module">QtAndroidExtras</db:classsynopsisinfo>
      <db:namespacesynopsisinfo role="headers">#include &lt;jni\qandroidjniobject.h&gt;</db:namespacesynopsisinfo>
      <db:classsynopsisinfo role="since">5.2</db:classsynopsisinfo>
   </db:classsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:section>
         <db:title>General Notes</db:title>
         <db:itemizedlist>
            <db:listitem>
               <db:para>Class names needs to contain the fully-qualified class name, for example: <db:emphasis role="bold">"java/lang/String"</db:emphasis>.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Method signatures are written as <db:emphasis role="bold">"(Arguments)ReturnType"</db:emphasis>
               </db:para>
            </db:listitem>
            <db:listitem>
               <db:para>All object types are returned as a <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code>.</db:para>
            </db:listitem>
         </db:itemizedlist>
      </db:section>
      <db:section>
         <db:title>Method Signatures</db:title>
         <db:para>For functions that take no arguments, <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> provides convenience functions that will use the correct signature based on the provided template type. For example:</db:para>
         <db:programlisting>jint x = QAndroidJniObject::callMethod&lt;jint&gt;("getSize");
QAndroidJniObject::callMethod&lt;void&gt;("touch");</db:programlisting>
         <db:para>In other cases you will need to supply the signature yourself, and it is important that the signature matches the function you want to call. The signature structure is <db:emphasis role="bold">(A)R</db:emphasis>, where <db:emphasis role="bold">A</db:emphasis> is the type of the argument(s) and <db:emphasis role="bold">R</db:emphasis> is the return type. Array types in the signature must have the <db:emphasis role="bold">[</db:emphasis> suffix and the fully-qualified type names must have the <db:emphasis role="bold">L</db:emphasis> prefix and <db:emphasis role="bold">;</db:emphasis> suffix.</db:para>
         <db:para>The example below demonstrates how to call two different static functions.</db:para>
         <db:programlisting>// Java class
package org.qtproject.qt5;
class TestClass
{
   static String fromNumber(int x) { ... }
   static String[] stringArray(String s1, String s2) { ... }
}</db:programlisting>
         <db:para>The signature for the first function is <db:emphasis role="bold">"(I)Ljava/lang/String;"</db:emphasis>
         </db:para>
         <db:programlisting>// C++ code
QAndroidJniObject stringNumber = QAndroidJniObject::callStaticObjectMethod("org/qtproject/qt5/TestClass",
                                                                           "fromNumber"
                                                                           "(I)Ljava/lang/String;",
                                                                           10);</db:programlisting>
         <db:para>and the signature for the second function is <db:emphasis role="bold">"(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;"</db:emphasis>
         </db:para>
         <db:programlisting>// C++ code
QAndroidJniObject string1 = QAndroidJniObject::fromString("String1");
QAndroidJniObject string2 = QAndroidJniObject::fromString("String2");
QAndroidJniObject stringArray = QAndroidJniObject::callStaticObjectMethod("org/qtproject/qt5/TestClass",
                                                                          "stringArray"
                                                                          "(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;"
                                                                           string1.object&lt;jstring&gt;(),
                                                                           string2.object&lt;jstring&gt;());</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Handling Java Exception</db:title>
         <db:para>When calling Java functions that might throw an exception, it is important that you check, handle and clear out the exception before continuing.</db:para>
         <db:note>
            <db:para> It is unsafe to make a JNI call when there are exceptions pending.</db:para>
         </db:note>
         <db:programlisting>/****************************************************************************&#xD;
 **&#xD;
 ** Copyright (C) 2015 The Qt Company Ltd.&#xD;
 ** Contact: http://www.qt.io/licensing/&#xD;
 **&#xD;
 ** This file is part of the documentation of the Qt Toolkit.&#xD;
 **&#xD;
 ** $QT_BEGIN_LICENSE:BSD$&#xD;
 ** Commercial License Usage&#xD;
 ** Licensees holding valid commercial Qt licenses may use this file in&#xD;
 ** accordance with the commercial license agreement provided with the&#xD;
 ** Software or, alternatively, in accordance with the terms contained in&#xD;
 ** a written agreement between you and The Qt Company. For licensing terms&#xD;
 ** and conditions see https://www.qt.io/terms-conditions. For further&#xD;
 ** information use the contact form at https://www.qt.io/contact-us.&#xD;
 **&#xD;
 ** BSD License Usage&#xD;
 ** Alternatively, you may use this file under the terms of the BSD license&#xD;
 ** as follows:&#xD;
 **&#xD;
 ** "Redistribution and use in source and binary forms, with or without&#xD;
 ** modification, are permitted provided that the following conditions are&#xD;
 ** met:&#xD;
 **   * Redistributions of source code must retain the above copyright&#xD;
 **     notice, this list of conditions and the following disclaimer.&#xD;
 **   * Redistributions in binary form must reproduce the above copyright&#xD;
 **     notice, this list of conditions and the following disclaimer in&#xD;
 **     the documentation and/or other materials provided with the&#xD;
 **     distribution.&#xD;
 **   * Neither the name of The Qt Company Ltd nor the names of its&#xD;
 **     contributors may be used to endorse or promote products derived&#xD;
 **     from this software without specific prior written permission.&#xD;
 **&#xD;
 **&#xD;
 ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#xD;
 ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#xD;
 ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR&#xD;
 ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT&#xD;
 ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xD;
 ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xD;
 ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,&#xD;
 ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY&#xD;
 ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&#xD;
 ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#xD;
 ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."&#xD;
 **&#xD;
 ** $QT_END_LICENSE$&#xD;
 **&#xD;
 ****************************************************************************/&#xD;
&#xD;
//! [Working with lists]&#xD;
QStringList getTrackTitles(const QAndroidJniObject &amp;album) {&#xD;
    QStringList stringList;&#xD;
    QAndroidJniObject list = album.callObjectMethod("getTitles",&#xD;
                                                      "()Ljava/util/List;");&#xD;
&#xD;
    if (list.isValid()) {&#xD;
        const int size = list.callMethod&lt;jint&gt;("size");&#xD;
        for (int i = 0; i &lt; size; ++i) {&#xD;
            QAndroidJniObject title = list.callObjectMethod("get", "(I)Ljava/lang/Object;", i);&#xD;
            stringList.append(title.toString());&#xD;
        }&#xD;
    }&#xD;
    return stringList;&#xD;
}&#xD;
//! [Working with lists]&#xD;
&#xD;
//! [QAndroidJniObject scope]&#xD;
void functionScope()&#xD;
{&#xD;
    QString helloString("Hello");&#xD;
    jstring myJString = 0;&#xD;
    {&#xD;
        QAndroidJniObject string = QAndroidJniObject::fromString(helloString);&#xD;
        myJString = string.object&lt;jstring&gt;();&#xD;
    }&#xD;
&#xD;
   // Ops! myJString is no longer valid.&#xD;
}&#xD;
//! [QAndroidJniObject scope]&#xD;
&#xD;
//! [Check for exceptions]&#xD;
void functionException()&#xD;
{&#xD;
    QAndroidJniObject myString = QAndroidJniObject::fromString("Hello");&#xD;
    jchar c = myString.callMethod&lt;jchar&gt;("charAt", "(I)C", 1000);&#xD;
    QAndroidJniEnvironment env;&#xD;
    if (env-&gt;ExceptionCheck()) {&#xD;
        // Handle exception here.&#xD;
        env-&gt;ExceptionClear();&#xD;
    }&#xD;
}&#xD;
//! [Check for exceptions]&#xD;
&#xD;
//! [Registering native methods]&#xD;
static void fromJavaOne(JNIEnv *env, jobject thiz, jint x)&#xD;
{&#xD;
    Q_UNUSED(env)&#xD;
    Q_UNUSED(thiz)&#xD;
    qDebug() &lt;&lt; x &lt;&lt; "&lt; 100";&#xD;
}&#xD;
&#xD;
static void fromJavaTwo(JNIEnv *env, jobject thiz, jint x)&#xD;
{&#xD;
    Q_UNUSED(env)&#xD;
    Q_UNUSED(thiz)&#xD;
    qDebug() &lt;&lt; x &lt;&lt; "&gt;= 100";&#xD;
}&#xD;
&#xD;
void registerNativeMethods() {&#xD;
    JNINativeMethod methods[] {{"callNativeOne", "(I)V", reinterpret_cast&lt;void *&gt;(fromJavaOne)},&#xD;
                               {"callNativeTwo", "(I)V", reinterpret_cast&lt;void *&gt;(fromJavaTwo)}};&#xD;
&#xD;
    QAndroidJniObject javaClass("my/java/project/FooJavaClass");&#xD;
    QAndroidJniEnvironment env;&#xD;
    jclass objectClass = env-&gt;GetObjectClass(javaClass.object&lt;jobject&gt;());&#xD;
    env-&gt;RegisterNatives(objectClass,&#xD;
                         methods,&#xD;
                         sizeof(methods) / sizeof(methods[0]));&#xD;
    env-&gt;DeleteLocalRef(objectClass);&#xD;
}&#xD;
&#xD;
void foo()&#xD;
{&#xD;
    QAndroidJniObject::callStaticMethod&lt;void&gt;("my/java/project/FooJavaClass", "foo", "(I)V", 10);  // Output: 10 &lt; 100&#xD;
    QAndroidJniObject::callStaticMethod&lt;void&gt;("my/java/project/FooJavaClass", "foo", "(I)V", 100); // Output: 100 &gt;= 100&#xD;
}&#xD;
&#xD;
//! [Registering native methods]&#xD;
&#xD;
//! [Java native methods]&#xD;
class FooJavaClass&#xD;
{&#xD;
    public static void foo(int x)&#xD;
    {&#xD;
        if (x &lt; 100)&#xD;
            callNativeOne(x);&#xD;
        else&#xD;
            callNativeTwo(x);&#xD;
    }&#xD;
&#xD;
private static native void callNativeOne(int x);&#xD;
private static native void callNativeTwo(int x);&#xD;
&#xD;
}&#xD;
//! [Java native methods]&#xD;
</db:programlisting>
      </db:section>
      <db:section>
         <db:title>Java Native Methods</db:title>
         <db:para>Java native methods makes it possible to call native code from Java, this is done by creating a function declaration in Java and prefixing it with the <db:emphasis role="bold">native</db:emphasis> keyword. Before a native function can be called from Java, you need to map the Java native function to a native function in your code. Mapping functions can be done by calling the RegisterNatives() function through the <db:code><db:link xlink:href="qandroidjnienvironment.html" xrefstyle="class" annotations="QAndroidJniEnvironment">JNI environment pointer</db:link></db:code>.</db:para>
         <db:para>The example below demonstrates how this could be done.</db:para>
         <db:para>Java implementation:</db:para>
         <db:programlisting>/****************************************************************************&#xD;
 **&#xD;
 ** Copyright (C) 2015 The Qt Company Ltd.&#xD;
 ** Contact: http://www.qt.io/licensing/&#xD;
 **&#xD;
 ** This file is part of the documentation of the Qt Toolkit.&#xD;
 **&#xD;
 ** $QT_BEGIN_LICENSE:BSD$&#xD;
 ** Commercial License Usage&#xD;
 ** Licensees holding valid commercial Qt licenses may use this file in&#xD;
 ** accordance with the commercial license agreement provided with the&#xD;
 ** Software or, alternatively, in accordance with the terms contained in&#xD;
 ** a written agreement between you and The Qt Company. For licensing terms&#xD;
 ** and conditions see https://www.qt.io/terms-conditions. For further&#xD;
 ** information use the contact form at https://www.qt.io/contact-us.&#xD;
 **&#xD;
 ** BSD License Usage&#xD;
 ** Alternatively, you may use this file under the terms of the BSD license&#xD;
 ** as follows:&#xD;
 **&#xD;
 ** "Redistribution and use in source and binary forms, with or without&#xD;
 ** modification, are permitted provided that the following conditions are&#xD;
 ** met:&#xD;
 **   * Redistributions of source code must retain the above copyright&#xD;
 **     notice, this list of conditions and the following disclaimer.&#xD;
 **   * Redistributions in binary form must reproduce the above copyright&#xD;
 **     notice, this list of conditions and the following disclaimer in&#xD;
 **     the documentation and/or other materials provided with the&#xD;
 **     distribution.&#xD;
 **   * Neither the name of The Qt Company Ltd nor the names of its&#xD;
 **     contributors may be used to endorse or promote products derived&#xD;
 **     from this software without specific prior written permission.&#xD;
 **&#xD;
 **&#xD;
 ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#xD;
 ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#xD;
 ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR&#xD;
 ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT&#xD;
 ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xD;
 ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xD;
 ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,&#xD;
 ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY&#xD;
 ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&#xD;
 ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#xD;
 ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."&#xD;
 **&#xD;
 ** $QT_END_LICENSE$&#xD;
 **&#xD;
 ****************************************************************************/&#xD;
&#xD;
//! [Working with lists]&#xD;
QStringList getTrackTitles(const QAndroidJniObject &amp;album) {&#xD;
    QStringList stringList;&#xD;
    QAndroidJniObject list = album.callObjectMethod("getTitles",&#xD;
                                                      "()Ljava/util/List;");&#xD;
&#xD;
    if (list.isValid()) {&#xD;
        const int size = list.callMethod&lt;jint&gt;("size");&#xD;
        for (int i = 0; i &lt; size; ++i) {&#xD;
            QAndroidJniObject title = list.callObjectMethod("get", "(I)Ljava/lang/Object;", i);&#xD;
            stringList.append(title.toString());&#xD;
        }&#xD;
    }&#xD;
    return stringList;&#xD;
}&#xD;
//! [Working with lists]&#xD;
&#xD;
//! [QAndroidJniObject scope]&#xD;
void functionScope()&#xD;
{&#xD;
    QString helloString("Hello");&#xD;
    jstring myJString = 0;&#xD;
    {&#xD;
        QAndroidJniObject string = QAndroidJniObject::fromString(helloString);&#xD;
        myJString = string.object&lt;jstring&gt;();&#xD;
    }&#xD;
&#xD;
   // Ops! myJString is no longer valid.&#xD;
}&#xD;
//! [QAndroidJniObject scope]&#xD;
&#xD;
//! [Check for exceptions]&#xD;
void functionException()&#xD;
{&#xD;
    QAndroidJniObject myString = QAndroidJniObject::fromString("Hello");&#xD;
    jchar c = myString.callMethod&lt;jchar&gt;("charAt", "(I)C", 1000);&#xD;
    QAndroidJniEnvironment env;&#xD;
    if (env-&gt;ExceptionCheck()) {&#xD;
        // Handle exception here.&#xD;
        env-&gt;ExceptionClear();&#xD;
    }&#xD;
}&#xD;
//! [Check for exceptions]&#xD;
&#xD;
//! [Registering native methods]&#xD;
static void fromJavaOne(JNIEnv *env, jobject thiz, jint x)&#xD;
{&#xD;
    Q_UNUSED(env)&#xD;
    Q_UNUSED(thiz)&#xD;
    qDebug() &lt;&lt; x &lt;&lt; "&lt; 100";&#xD;
}&#xD;
&#xD;
static void fromJavaTwo(JNIEnv *env, jobject thiz, jint x)&#xD;
{&#xD;
    Q_UNUSED(env)&#xD;
    Q_UNUSED(thiz)&#xD;
    qDebug() &lt;&lt; x &lt;&lt; "&gt;= 100";&#xD;
}&#xD;
&#xD;
void registerNativeMethods() {&#xD;
    JNINativeMethod methods[] {{"callNativeOne", "(I)V", reinterpret_cast&lt;void *&gt;(fromJavaOne)},&#xD;
                               {"callNativeTwo", "(I)V", reinterpret_cast&lt;void *&gt;(fromJavaTwo)}};&#xD;
&#xD;
    QAndroidJniObject javaClass("my/java/project/FooJavaClass");&#xD;
    QAndroidJniEnvironment env;&#xD;
    jclass objectClass = env-&gt;GetObjectClass(javaClass.object&lt;jobject&gt;());&#xD;
    env-&gt;RegisterNatives(objectClass,&#xD;
                         methods,&#xD;
                         sizeof(methods) / sizeof(methods[0]));&#xD;
    env-&gt;DeleteLocalRef(objectClass);&#xD;
}&#xD;
&#xD;
void foo()&#xD;
{&#xD;
    QAndroidJniObject::callStaticMethod&lt;void&gt;("my/java/project/FooJavaClass", "foo", "(I)V", 10);  // Output: 10 &lt; 100&#xD;
    QAndroidJniObject::callStaticMethod&lt;void&gt;("my/java/project/FooJavaClass", "foo", "(I)V", 100); // Output: 100 &gt;= 100&#xD;
}&#xD;
&#xD;
//! [Registering native methods]&#xD;
&#xD;
//! [Java native methods]&#xD;
class FooJavaClass&#xD;
{&#xD;
    public static void foo(int x)&#xD;
    {&#xD;
        if (x &lt; 100)&#xD;
            callNativeOne(x);&#xD;
        else&#xD;
            callNativeTwo(x);&#xD;
    }&#xD;
&#xD;
private static native void callNativeOne(int x);&#xD;
private static native void callNativeTwo(int x);&#xD;
&#xD;
}&#xD;
//! [Java native methods]&#xD;
</db:programlisting>
         <db:para>C++ Implementation:</db:para>
         <db:programlisting>/****************************************************************************&#xD;
 **&#xD;
 ** Copyright (C) 2015 The Qt Company Ltd.&#xD;
 ** Contact: http://www.qt.io/licensing/&#xD;
 **&#xD;
 ** This file is part of the documentation of the Qt Toolkit.&#xD;
 **&#xD;
 ** $QT_BEGIN_LICENSE:BSD$&#xD;
 ** Commercial License Usage&#xD;
 ** Licensees holding valid commercial Qt licenses may use this file in&#xD;
 ** accordance with the commercial license agreement provided with the&#xD;
 ** Software or, alternatively, in accordance with the terms contained in&#xD;
 ** a written agreement between you and The Qt Company. For licensing terms&#xD;
 ** and conditions see https://www.qt.io/terms-conditions. For further&#xD;
 ** information use the contact form at https://www.qt.io/contact-us.&#xD;
 **&#xD;
 ** BSD License Usage&#xD;
 ** Alternatively, you may use this file under the terms of the BSD license&#xD;
 ** as follows:&#xD;
 **&#xD;
 ** "Redistribution and use in source and binary forms, with or without&#xD;
 ** modification, are permitted provided that the following conditions are&#xD;
 ** met:&#xD;
 **   * Redistributions of source code must retain the above copyright&#xD;
 **     notice, this list of conditions and the following disclaimer.&#xD;
 **   * Redistributions in binary form must reproduce the above copyright&#xD;
 **     notice, this list of conditions and the following disclaimer in&#xD;
 **     the documentation and/or other materials provided with the&#xD;
 **     distribution.&#xD;
 **   * Neither the name of The Qt Company Ltd nor the names of its&#xD;
 **     contributors may be used to endorse or promote products derived&#xD;
 **     from this software without specific prior written permission.&#xD;
 **&#xD;
 **&#xD;
 ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#xD;
 ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#xD;
 ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR&#xD;
 ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT&#xD;
 ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xD;
 ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xD;
 ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,&#xD;
 ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY&#xD;
 ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&#xD;
 ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#xD;
 ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."&#xD;
 **&#xD;
 ** $QT_END_LICENSE$&#xD;
 **&#xD;
 ****************************************************************************/&#xD;
&#xD;
//! [Working with lists]&#xD;
QStringList getTrackTitles(const QAndroidJniObject &amp;album) {&#xD;
    QStringList stringList;&#xD;
    QAndroidJniObject list = album.callObjectMethod("getTitles",&#xD;
                                                      "()Ljava/util/List;");&#xD;
&#xD;
    if (list.isValid()) {&#xD;
        const int size = list.callMethod&lt;jint&gt;("size");&#xD;
        for (int i = 0; i &lt; size; ++i) {&#xD;
            QAndroidJniObject title = list.callObjectMethod("get", "(I)Ljava/lang/Object;", i);&#xD;
            stringList.append(title.toString());&#xD;
        }&#xD;
    }&#xD;
    return stringList;&#xD;
}&#xD;
//! [Working with lists]&#xD;
&#xD;
//! [QAndroidJniObject scope]&#xD;
void functionScope()&#xD;
{&#xD;
    QString helloString("Hello");&#xD;
    jstring myJString = 0;&#xD;
    {&#xD;
        QAndroidJniObject string = QAndroidJniObject::fromString(helloString);&#xD;
        myJString = string.object&lt;jstring&gt;();&#xD;
    }&#xD;
&#xD;
   // Ops! myJString is no longer valid.&#xD;
}&#xD;
//! [QAndroidJniObject scope]&#xD;
&#xD;
//! [Check for exceptions]&#xD;
void functionException()&#xD;
{&#xD;
    QAndroidJniObject myString = QAndroidJniObject::fromString("Hello");&#xD;
    jchar c = myString.callMethod&lt;jchar&gt;("charAt", "(I)C", 1000);&#xD;
    QAndroidJniEnvironment env;&#xD;
    if (env-&gt;ExceptionCheck()) {&#xD;
        // Handle exception here.&#xD;
        env-&gt;ExceptionClear();&#xD;
    }&#xD;
}&#xD;
//! [Check for exceptions]&#xD;
&#xD;
//! [Registering native methods]&#xD;
static void fromJavaOne(JNIEnv *env, jobject thiz, jint x)&#xD;
{&#xD;
    Q_UNUSED(env)&#xD;
    Q_UNUSED(thiz)&#xD;
    qDebug() &lt;&lt; x &lt;&lt; "&lt; 100";&#xD;
}&#xD;
&#xD;
static void fromJavaTwo(JNIEnv *env, jobject thiz, jint x)&#xD;
{&#xD;
    Q_UNUSED(env)&#xD;
    Q_UNUSED(thiz)&#xD;
    qDebug() &lt;&lt; x &lt;&lt; "&gt;= 100";&#xD;
}&#xD;
&#xD;
void registerNativeMethods() {&#xD;
    JNINativeMethod methods[] {{"callNativeOne", "(I)V", reinterpret_cast&lt;void *&gt;(fromJavaOne)},&#xD;
                               {"callNativeTwo", "(I)V", reinterpret_cast&lt;void *&gt;(fromJavaTwo)}};&#xD;
&#xD;
    QAndroidJniObject javaClass("my/java/project/FooJavaClass");&#xD;
    QAndroidJniEnvironment env;&#xD;
    jclass objectClass = env-&gt;GetObjectClass(javaClass.object&lt;jobject&gt;());&#xD;
    env-&gt;RegisterNatives(objectClass,&#xD;
                         methods,&#xD;
                         sizeof(methods) / sizeof(methods[0]));&#xD;
    env-&gt;DeleteLocalRef(objectClass);&#xD;
}&#xD;
&#xD;
void foo()&#xD;
{&#xD;
    QAndroidJniObject::callStaticMethod&lt;void&gt;("my/java/project/FooJavaClass", "foo", "(I)V", 10);  // Output: 10 &lt; 100&#xD;
    QAndroidJniObject::callStaticMethod&lt;void&gt;("my/java/project/FooJavaClass", "foo", "(I)V", 100); // Output: 100 &gt;= 100&#xD;
}&#xD;
&#xD;
//! [Registering native methods]&#xD;
&#xD;
//! [Java native methods]&#xD;
class FooJavaClass&#xD;
{&#xD;
    public static void foo(int x)&#xD;
    {&#xD;
        if (x &lt; 100)&#xD;
            callNativeOne(x);&#xD;
        else&#xD;
            callNativeTwo(x);&#xD;
    }&#xD;
&#xD;
private static native void callNativeOne(int x);&#xD;
private static native void callNativeTwo(int x);&#xD;
&#xD;
}&#xD;
//! [Java native methods]&#xD;
</db:programlisting>
      </db:section>
      <db:section>
         <db:title>The Lifetime of a Java Object</db:title>
         <db:para>Most <db:code><db:link xlink:href="qandroidjniobject.html#object-types" xrefstyle="class" annotations="Object types">objects</db:link></db:code> received from Java will be local references and will only stay valid in the scope you received them. After that, the object becomes eligible for garbage collection. If you want to keep a Java object alive you need to either create a new global reference to the object and release it when you are done, or construct a new <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> and let it manage the lifetime of the Java object.</db:para>
         <db:note>
            <db:para> The <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> does only manage its own references, if you construct a <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> from a global or local reference that reference will not be released by the <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code>.</db:para>
         </db:note>
      </db:section>
      <db:section>
         <db:title>JNI Types</db:title>
      </db:section>
      <db:section>
         <db:title>Object Types</db:title>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Type</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Signature</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tr>
               <db:td>
                  <db:para>jobject</db:para>
               </db:td>
               <db:td>
                  <db:para>Ljava/lang/Object;</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jclass</db:para>
               </db:td>
               <db:td>
                  <db:para>Ljava/lang/Class;</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jstring</db:para>
               </db:td>
               <db:td>
                  <db:para>Ljava/lang/String;</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jthrowable</db:para>
               </db:td>
               <db:td>
                  <db:para>Ljava/lang/Throwable;</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jobjectArray</db:para>
               </db:td>
               <db:td>
                  <db:para>[Ljava/lang/Object;</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jarray</db:para>
               </db:td>
               <db:td>
                  <db:para>[<db:emphasis>&lt;type&gt;</db:emphasis>
                  </db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jbooleanArray</db:para>
               </db:td>
               <db:td>
                  <db:para>[Z</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jbyteArray</db:para>
               </db:td>
               <db:td>
                  <db:para>[B</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jcharArray</db:para>
               </db:td>
               <db:td>
                  <db:para>[C</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jshortArray</db:para>
               </db:td>
               <db:td>
                  <db:para>[S</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jintArray</db:para>
               </db:td>
               <db:td>
                  <db:para>[I</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jlongArray</db:para>
               </db:td>
               <db:td>
                  <db:para>[J</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jfloatArray</db:para>
               </db:td>
               <db:td>
                  <db:para>[F</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jdoubleArray</db:para>
               </db:td>
               <db:td>
                  <db:para>[D</db:para>
               </db:td>
            </db:tr>
         </db:informaltable>
      </db:section>
      <db:section>
         <db:title>Primitive Types</db:title>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Type</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Signature</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tr>
               <db:td>
                  <db:para>jboolean</db:para>
               </db:td>
               <db:td>
                  <db:para>Z</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jbyte</db:para>
               </db:td>
               <db:td>
                  <db:para>B</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jchar</db:para>
               </db:td>
               <db:td>
                  <db:para>C</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jshort</db:para>
               </db:td>
               <db:td>
                  <db:para>S</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jint</db:para>
               </db:td>
               <db:td>
                  <db:para>I</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jlong</db:para>
               </db:td>
               <db:td>
                  <db:para>J</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jfloat</db:para>
               </db:td>
               <db:td>
                  <db:para>F</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>jdouble</db:para>
               </db:td>
               <db:td>
                  <db:para>D</db:para>
               </db:td>
            </db:tr>
         </db:informaltable>
      </db:section>
      <db:section>
         <db:title>Other</db:title>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Type</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Signature</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tr>
               <db:td>
                  <db:para>void</db:para>
               </db:td>
               <db:td>
                  <db:para>V</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:emphasis>Custom type</db:emphasis>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>L<db:emphasis>&lt;fully-qualified-name&gt;</db:emphasis>;</db:para>
               </db:td>
            </db:tr>
         </db:informaltable>
         <db:para>For more information about JNI see: http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/jniTOC.html</db:para>
      </db:section>
      <db:para>
         <db:emphasis role="bold">See Also:</db:emphasis>
         <db:simplelist type="vert">
            <db:member>
               <db:code><db:link xlink:href="qandroidjnienvironment.html" xrefstyle="class" annotations="QAndroidJniEnvironment">QAndroidJniEnvironment</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qandroidjniobject.html#object" xrefstyle="function" annotations="object()">object()</db:link></db:code>
            </db:member>
         </db:simplelist>
      </db:para>
   </db:section>
   <db:section>
      <db:title>Member Function Documentation</db:title>
      <db:section>
         <db:title> QAndroidJniObject::QAndroidJniObject()</db:title>
         <db:constructorsynopsis>
            <db:methodname>QAndroidJniObject</db:methodname>
            <db:void/>
            <db:modifier>public</db:modifier>
         </db:constructorsynopsis>
         <db:para>Constructs an invalid <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qandroidjniobject.html#isValid" xrefstyle="function" annotations="isValid()">isValid()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title> QAndroidJniObject::QAndroidJniObject(const char *className)</db:title>
         <db:constructorsynopsis>
            <db:methodname>QAndroidJniObject</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>className</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:constructorsynopsis>
         <db:para>Constructs a new <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> by calling the default constructor of <db:code role="argument">className</db:code>.</db:para>
         <db:programlisting>...
QAndroidJniObject myJavaString("java/lang/String");
...</db:programlisting>
      </db:section>
      <db:section>
         <db:title> QAndroidJniObject::QAndroidJniObject(const char *className, const char *signature, ... )</db:title>
         <db:constructorsynopsis>
            <db:methodname>QAndroidJniObject</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>className</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>signature</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>...</db:type>
               <db:parameter/>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:constructorsynopsis>
         <db:para>Constructs a new <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> by calling the constructor of <db:code role="argument">className</db:code> with <db:code role="argument">signature</db:code> and arguments.</db:para>
         <db:programlisting>...
jstring myJStringArg = ...;
QAndroidJniObject myNewJavaString("java/lang/String", "(Ljava/lang/String;)V", myJStringArg);
...</db:programlisting>
      </db:section>
      <db:section>
         <db:title> QAndroidJniObject::QAndroidJniObject(int object)</db:title>
         <db:constructorsynopsis>
            <db:methodname>QAndroidJniObject</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>object</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:constructorsynopsis>
         <db:para>Constructs a new <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> around the Java object <db:code role="argument">object</db:code>.</db:para>
         <db:para>Note: The <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> will hold a reference to the Java object <db:code role="argument">object</db:code> and release it when destroyed. Any references to the Java object <db:code role="argument">object</db:code> outside <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> needs to be managed by the caller.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qandroidjniobject.html#fromLocalRef" xrefstyle="function" annotations="fromLocalRef()">fromLocalRef()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title> QAndroidJniObject::QAndroidJniObject(jclass clazz)</db:title>
         <db:constructorsynopsis>
            <db:methodname>QAndroidJniObject</db:methodname>
            <db:methodparam>
               <db:type>jclass</db:type>
               <db:parameter>clazz</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:constructorsynopsis>
         <db:para>Constructs a new <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> by calling the default constructor of <db:code role="argument">clazz</db:code>.</db:para>
         <db:para>Note: The <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> will create a new reference to the class <db:code role="argument">clazz</db:code> and releases it again when it is destroyed. References to the class created outside the <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> needs to be managed by the caller.</db:para>
      </db:section>
      <db:section>
         <db:title> QAndroidJniObject::QAndroidJniObject(jclass clazz, const char *signature, ... )</db:title>
         <db:constructorsynopsis>
            <db:methodname>QAndroidJniObject</db:methodname>
            <db:methodparam>
               <db:type>jclass</db:type>
               <db:parameter>clazz</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>signature</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>...</db:type>
               <db:parameter/>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:constructorsynopsis>
         <db:para>Constructs a new <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> from <db:code role="argument">clazz</db:code> by calling the constructor with <db:code role="argument">signature</db:code> and arguments.</db:para>
         <db:programlisting>jclass myClazz = ...;
QAndroidJniObject::QAndroidJniObject(myClazz, "(I)V", 3);</db:programlisting>
      </db:section>
      <db:section>
         <db:title> QAndroidJniObject::~QAndroidJniObject()</db:title>
         <db:destructorsynopsis>
            <db:methodname>~QAndroidJniObject</db:methodname>
            <db:void/>
            <db:modifier>public</db:modifier>
         </db:destructorsynopsis>
         <db:para>Destroys the <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> and releases any references held by the <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>QAndroidJniObject &amp; QAndroidJniObject::operator=(T object)</db:title>
         <db:methodsynopsis>
            <db:type>QAndroidJniObject &amp;</db:type>
            <db:methodname>operator=</db:methodname>
            <db:methodparam>
               <db:type>T</db:type>
               <db:parameter>object</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Replace the current object with <db:code role="argument">object</db:code>. The old Java object will be released.</db:para>
      </db:section>
      <db:section>
         <db:title>QAndroidJniObject QAndroidJniObject::callObjectMethod(const char *methodName) const</db:title>
         <db:methodsynopsis>
            <db:type>QAndroidJniObject</db:type>
            <db:methodname>callObjectMethod</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>methodName</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Calls the Java objects method <db:code role="argument">methodName</db:code> and returns a new <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> for the returned Java object.</db:para>
         <db:programlisting>...
QAndroidJniObject myJavaString1 = ...;
QAndroidJniObject myJavaString2 = myJavaString1.callObjectMethod&lt;jstring&gt;("toString");
...</db:programlisting>
      </db:section>
      <db:section>
         <db:title>QAndroidJniObject QAndroidJniObject::callObjectMethod(const char *methodName, const char *signature, ... ) const</db:title>
         <db:methodsynopsis>
            <db:type>QAndroidJniObject</db:type>
            <db:methodname>callObjectMethod</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>methodName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>signature</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>...</db:type>
               <db:parameter/>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Calls the Java object's method <db:code role="argument">methodName</db:code> with the signature <db:code role="argument">signature</db:code> and arguments</db:para>
         <db:programlisting>QAndroidJniObject myJavaString; ==&gt; "Hello, Java"
QAndroidJniObject mySubstring = myJavaString.callObjectMethod("substring", "(II)Ljava/lang/String;", 7, 10);</db:programlisting>
      </db:section>
      <db:section>
         <db:title>QAndroidJniObject QAndroidJniObject::callStaticObjectMethod(const char *className, const char *methodName)</db:title>
         <db:methodsynopsis>
            <db:type>QAndroidJniObject</db:type>
            <db:methodname>callStaticObjectMethod</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>className</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>methodName</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Calls the static method with <db:code role="argument">methodName</db:code> on the class <db:code role="argument">className</db:code>.</db:para>
         <db:programlisting>QAndroidJniObject string = QAndroidJniObject::callStaticObjectMethod&lt;jstring&gt;("CustomClass", "getClassName");</db:programlisting>
      </db:section>
      <db:section>
         <db:title>QAndroidJniObject QAndroidJniObject::callStaticObjectMethod(const char *className, const char *methodName, const char *signature, ... )</db:title>
         <db:methodsynopsis>
            <db:type>QAndroidJniObject</db:type>
            <db:methodname>callStaticObjectMethod</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>className</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>methodName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>signature</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>...</db:type>
               <db:parameter/>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Calls the static method with <db:code role="argument">methodName</db:code> and <db:code role="argument">signature</db:code> on the class <db:code role="argument">className</db:code>.</db:para>
         <db:programlisting>QAndroidJniObject thread = QAndroidJniObject::callStaticObjectMethod("java/lang/Thread", "currentThread", "()Ljava/lang/Thread;");
QAndroidJniObject string = QAndroidJniObject::callStaticObjectMethod("java/lang/String", "valueOf", "(I)Ljava/lang/String;", 10);</db:programlisting>
      </db:section>
      <db:section>
         <db:title>QAndroidJniObject QAndroidJniObject::callStaticObjectMethod(jclass clazz, const char *methodName)</db:title>
         <db:methodsynopsis>
            <db:type>QAndroidJniObject</db:type>
            <db:methodname>callStaticObjectMethod</db:methodname>
            <db:methodparam>
               <db:type>jclass</db:type>
               <db:parameter>clazz</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>methodName</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Calls the static method with <db:code role="argument">methodName</db:code> on <db:code role="argument">clazz</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>QAndroidJniObject QAndroidJniObject::callStaticObjectMethod(jclass clazz, const char *methodName, const char *signature, ... )</db:title>
         <db:methodsynopsis>
            <db:type>QAndroidJniObject</db:type>
            <db:methodname>callStaticObjectMethod</db:methodname>
            <db:methodparam>
               <db:type>jclass</db:type>
               <db:parameter>clazz</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>methodName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>signature</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>...</db:type>
               <db:parameter/>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Calls the static method with <db:code role="argument">methodName</db:code> and <db:code role="argument">signature</db:code> on class <db:code role="argument">clazz</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>QAndroidJniObject QAndroidJniObject::fromLocalRef(int localRef)</db:title>
         <db:methodsynopsis>
            <db:type>QAndroidJniObject</db:type>
            <db:methodname>fromLocalRef</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>localRef</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Creates a <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> from the local JNI reference <db:code role="argument">localRef</db:code>. This function takes ownership of <db:code role="argument">localRef</db:code> and frees it before returning.</db:para>
         <db:note>
            <db:para> Only call this function with a local JNI reference. For example, most raw JNI calls, through the JNI environment, returns local references to a java object.</db:para>
         </db:note>
         <db:programlisting>jobject localRef = env-&gt;GetObjectArrayElement(array, index);
QAndroidJniObject element = QAndroidJniObject::fromLocalRef(localRef);</db:programlisting>
         <db:para>This property was introduced in Qt 5.7.</db:para>
      </db:section>
      <db:section>
         <db:title>QAndroidJniObject QAndroidJniObject::fromString(const QString &amp;string)</db:title>
         <db:methodsynopsis>
            <db:type>QAndroidJniObject</db:type>
            <db:methodname>fromString</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>string</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Creates a Java string from the <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>
            <db:code role="argument">string</db:code> and returns a <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> holding that string.</db:para>
         <db:programlisting>...
QString myQString = "QString";
QAndroidJniObject myJavaString = QAndroidJniObject::fromString(myQString);
...</db:programlisting>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qandroidjniobject.html#toString" xrefstyle="function" annotations="toString()">toString()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QAndroidJniObject QAndroidJniObject::getObjectField(const char *fieldName) const</db:title>
         <db:methodsynopsis>
            <db:type>QAndroidJniObject</db:type>
            <db:methodname>getObjectField</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>fieldName</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Retrieves the object of field <db:code role="argument">fieldName</db:code>.</db:para>
         <db:programlisting>QAndroidJniObject field = jniObject.getObjectField&lt;jstring&gt;("FIELD_NAME");</db:programlisting>
      </db:section>
      <db:section>
         <db:title>QAndroidJniObject QAndroidJniObject::getObjectField(const char *fieldName, const char *signature) const</db:title>
         <db:methodsynopsis>
            <db:type>QAndroidJniObject</db:type>
            <db:methodname>getObjectField</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>fieldName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>signature</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Retrieves the object from the field with <db:code role="argument">signature</db:code> and <db:code role="argument">fieldName</db:code>.</db:para>
         <db:note>
            <db:para> Since <db:emphasis role="bold">Qt 5.3</db:emphasis> this function can be used without a template type.</db:para>
         </db:note>
         <db:programlisting>QAndroidJniObject field = jniObject.getObjectField("FIELD_NAME", "Ljava/lang/String;");</db:programlisting>
      </db:section>
      <db:section>
         <db:title>QAndroidJniObject QAndroidJniObject::getStaticObjectField(const char *className, const char *fieldName)</db:title>
         <db:methodsynopsis>
            <db:type>QAndroidJniObject</db:type>
            <db:methodname>getStaticObjectField</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>className</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>fieldName</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Retrieves the object from the field <db:code role="argument">fieldName</db:code> on the class <db:code role="argument">className</db:code>.</db:para>
         <db:programlisting>QAndroidJniObject jobj = QAndroidJniObject::getStaticObjectField&lt;jstring&gt;("class/with/Fields", "FIELD_NAME");</db:programlisting>
      </db:section>
      <db:section>
         <db:title>QAndroidJniObject QAndroidJniObject::getStaticObjectField(const char *className, const char *fieldName, const char *signature)</db:title>
         <db:methodsynopsis>
            <db:type>QAndroidJniObject</db:type>
            <db:methodname>getStaticObjectField</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>className</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>fieldName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>signature</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Retrieves the object from the field with <db:code role="argument">signature</db:code> and <db:code role="argument">fieldName</db:code> on class <db:code role="argument">className</db:code>.</db:para>
         <db:note>
            <db:para> Since <db:emphasis role="bold">Qt 5.3</db:emphasis> this function can be used without a template type.</db:para>
         </db:note>
         <db:programlisting>QAndroidJniObject jobj = QAndroidJniObject::getStaticObjectField("class/with/Fields", "FIELD_NAME", "Ljava/lang/String;");</db:programlisting>
      </db:section>
      <db:section>
         <db:title>QAndroidJniObject QAndroidJniObject::getStaticObjectField(jclass clazz, const char *fieldName)</db:title>
         <db:methodsynopsis>
            <db:type>QAndroidJniObject</db:type>
            <db:methodname>getStaticObjectField</db:methodname>
            <db:methodparam>
               <db:type>jclass</db:type>
               <db:parameter>clazz</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>fieldName</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Retrieves the object from the field <db:code role="argument">fieldName</db:code> on <db:code role="argument">clazz</db:code>.</db:para>
         <db:programlisting>QAndroidJniObject jobj = QAndroidJniObject::getStaticObjectField&lt;jstring&gt;(clazz, "FIELD_NAME");</db:programlisting>
      </db:section>
      <db:section>
         <db:title>QAndroidJniObject QAndroidJniObject::getStaticObjectField(jclass clazz, const char *fieldName, const char *signature)</db:title>
         <db:methodsynopsis>
            <db:type>QAndroidJniObject</db:type>
            <db:methodname>getStaticObjectField</db:methodname>
            <db:methodparam>
               <db:type>jclass</db:type>
               <db:parameter>clazz</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>fieldName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>signature</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Retrieves the object from the field with <db:code role="argument">signature</db:code> and <db:code role="argument">fieldName</db:code> on <db:code role="argument">clazz</db:code>.</db:para>
         <db:note>
            <db:para> Since <db:emphasis role="bold">Qt 5.3</db:emphasis> this function can be used without a template type.</db:para>
         </db:note>
         <db:programlisting>QAndroidJniObject jobj = QAndroidJniObject::getStaticObjectField(clazz, "FIELD_NAME", "Ljava/lang/String;");</db:programlisting>
      </db:section>
      <db:section>
         <db:title>QString QAndroidJniObject::toString() const</db:title>
         <db:methodsynopsis>
            <db:type>QString</db:type>
            <db:methodname>toString</db:methodname>
            <db:void/>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns a <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> with a string representation of the java object. Calling this function on a Java String object is a convenient way of getting the actual string data.</db:para>
         <db:programlisting>QAndroidJniObject string = ...; //  "Hello Java"
QString qstring = string.toString(); // "Hello Java"</db:programlisting>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qandroidjniobject.html#fromString" xrefstyle="function" annotations="fromString()">fromString()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>T QAndroidJniObject::callMethod(const char *methodName) const</db:title>
         <db:methodsynopsis>
            <db:type>T</db:type>
            <db:methodname>callMethod</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>methodName</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Calls the method <db:code role="argument">methodName</db:code> and returns the value.</db:para>
         <db:programlisting>QAndroidJniObject myJavaString = ...;
jint size = myJavaString.callMethod&lt;jint&gt;("length");</db:programlisting>
      </db:section>
      <db:section>
         <db:title>T QAndroidJniObject::callMethod(const char *methodName, const char *sig, ... ) const</db:title>
         <db:methodsynopsis>
            <db:type>T</db:type>
            <db:methodname>callMethod</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>methodName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>sig</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>...</db:type>
               <db:parameter/>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Calls the method <db:code role="argument">methodName</db:code> with a signature <db:code role="argument">sig</db:code> and returns the value.</db:para>
         <db:programlisting>QAndroidJniObject myJavaString = ...;
jint index = myJavaString.callMethod&lt;jint&gt;("indexOf", "(I)I", 0x0051);</db:programlisting>
      </db:section>
      <db:section>
         <db:title>T QAndroidJniObject::callStaticMethod(const char *className, const char *methodName)</db:title>
         <db:methodsynopsis>
            <db:type>T</db:type>
            <db:methodname>callStaticMethod</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>className</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>methodName</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Calls the static method <db:code role="argument">methodName</db:code> on class <db:code role="argument">className</db:code> and returns the value.</db:para>
         <db:programlisting>jint value = QAndroidJniObject::callStaticMethod&lt;jint&gt;("MyClass", "staticMethod");</db:programlisting>
      </db:section>
      <db:section>
         <db:title>T QAndroidJniObject::callStaticMethod(const char *className, const char *methodName, const char *signature, ... )</db:title>
         <db:methodsynopsis>
            <db:type>T</db:type>
            <db:methodname>callStaticMethod</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>className</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>methodName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>signature</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>...</db:type>
               <db:parameter/>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Calls the static method with <db:code role="argument">methodName</db:code> with <db:code role="argument">signature</db:code> on class <db:code role="argument">className</db:code> with optional arguments.</db:para>
         <db:programlisting>...
jint a = 2;
jint b = 4;
jint max = QAndroidJniObject::callStaticMethod&lt;jint&gt;("java/lang/Math", "max", "(II)I", a, b);
...</db:programlisting>
      </db:section>
      <db:section>
         <db:title>T QAndroidJniObject::callStaticMethod(jclass clazz, const char *methodName)</db:title>
         <db:methodsynopsis>
            <db:type>T</db:type>
            <db:methodname>callStaticMethod</db:methodname>
            <db:methodparam>
               <db:type>jclass</db:type>
               <db:parameter>clazz</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>methodName</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Calls the static method <db:code role="argument">methodName</db:code> on <db:code role="argument">clazz</db:code> and returns the value.</db:para>
         <db:programlisting>...
jclass javaMathClass = ...; // ("java/lang/Math")
jdouble randNr = QAndroidJniObject::callStaticMethod&lt;jdouble&gt;(javaMathClass, "random");
...</db:programlisting>
      </db:section>
      <db:section>
         <db:title>T QAndroidJniObject::callStaticMethod(jclass clazz, const char *methodName, const char *signature, ... )</db:title>
         <db:methodsynopsis>
            <db:type>T</db:type>
            <db:methodname>callStaticMethod</db:methodname>
            <db:methodparam>
               <db:type>jclass</db:type>
               <db:parameter>clazz</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>methodName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>signature</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>...</db:type>
               <db:parameter/>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Calls the static method <db:code role="argument">methodName</db:code> with <db:code role="argument">signature</db:code> on <db:code role="argument">clazz</db:code> and returns the value.</db:para>
         <db:programlisting>...
jclass javaMathClass = ...; // ("java/lang/Math")
jint a = 2;
jint b = 4;
jint max = QAndroidJniObject::callStaticMethod&lt;jint&gt;(javaMathClass, "max", "(II)I", a, b);
...</db:programlisting>
      </db:section>
      <db:section>
         <db:title>T QAndroidJniObject::getField(const char *fieldName) const</db:title>
         <db:methodsynopsis>
            <db:type>T</db:type>
            <db:methodname>getField</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>fieldName</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Retrieves the value of the field <db:code role="argument">fieldName</db:code>.</db:para>
         <db:programlisting>QAndroidJniObject volumeControl = ...;
jint fieldValue = volumeControl.getField&lt;jint&gt;("MAX_VOLUME");</db:programlisting>
      </db:section>
      <db:section>
         <db:title>T QAndroidJniObject::getStaticField(const char *className, const char *fieldName)</db:title>
         <db:methodsynopsis>
            <db:type>T</db:type>
            <db:methodname>getStaticField</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>className</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>fieldName</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Retrieves the value from the static field <db:code role="argument">fieldName</db:code> on the class <db:code role="argument">className</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>T QAndroidJniObject::getStaticField(jclass clazz, const char *fieldName)</db:title>
         <db:methodsynopsis>
            <db:type>T</db:type>
            <db:methodname>getStaticField</db:methodname>
            <db:methodparam>
               <db:type>jclass</db:type>
               <db:parameter>clazz</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>fieldName</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Retrieves the value from the static field <db:code role="argument">fieldName</db:code> on <db:code role="argument">clazz</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>T QAndroidJniObject::object() const</db:title>
         <db:methodsynopsis>
            <db:type>T</db:type>
            <db:methodname>object</db:methodname>
            <db:void/>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns the object held by the <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> as type T.</db:para>
         <db:programlisting>QAndroidJniObject string = QAndroidJniObject::fromString("Hello, JNI");
jstring jstring = string.object&lt;jstring&gt;();</db:programlisting>
         <db:note>
            <db:para> The returned object is still owned by the <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code>. If you want to keep the object valid you should create a new <db:code><db:link xlink:href="qandroidjniobject.html" xrefstyle="class" annotations="QAndroidJniObject">QAndroidJniObject</db:link></db:code> or make a new global reference to the object and free it yourself.</db:para>
         </db:note>
         <db:programlisting>/****************************************************************************&#xD;
 **&#xD;
 ** Copyright (C) 2015 The Qt Company Ltd.&#xD;
 ** Contact: http://www.qt.io/licensing/&#xD;
 **&#xD;
 ** This file is part of the documentation of the Qt Toolkit.&#xD;
 **&#xD;
 ** $QT_BEGIN_LICENSE:BSD$&#xD;
 ** Commercial License Usage&#xD;
 ** Licensees holding valid commercial Qt licenses may use this file in&#xD;
 ** accordance with the commercial license agreement provided with the&#xD;
 ** Software or, alternatively, in accordance with the terms contained in&#xD;
 ** a written agreement between you and The Qt Company. For licensing terms&#xD;
 ** and conditions see https://www.qt.io/terms-conditions. For further&#xD;
 ** information use the contact form at https://www.qt.io/contact-us.&#xD;
 **&#xD;
 ** BSD License Usage&#xD;
 ** Alternatively, you may use this file under the terms of the BSD license&#xD;
 ** as follows:&#xD;
 **&#xD;
 ** "Redistribution and use in source and binary forms, with or without&#xD;
 ** modification, are permitted provided that the following conditions are&#xD;
 ** met:&#xD;
 **   * Redistributions of source code must retain the above copyright&#xD;
 **     notice, this list of conditions and the following disclaimer.&#xD;
 **   * Redistributions in binary form must reproduce the above copyright&#xD;
 **     notice, this list of conditions and the following disclaimer in&#xD;
 **     the documentation and/or other materials provided with the&#xD;
 **     distribution.&#xD;
 **   * Neither the name of The Qt Company Ltd nor the names of its&#xD;
 **     contributors may be used to endorse or promote products derived&#xD;
 **     from this software without specific prior written permission.&#xD;
 **&#xD;
 **&#xD;
 ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#xD;
 ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#xD;
 ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR&#xD;
 ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT&#xD;
 ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xD;
 ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xD;
 ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,&#xD;
 ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY&#xD;
 ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&#xD;
 ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#xD;
 ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."&#xD;
 **&#xD;
 ** $QT_END_LICENSE$&#xD;
 **&#xD;
 ****************************************************************************/&#xD;
&#xD;
//! [Working with lists]&#xD;
QStringList getTrackTitles(const QAndroidJniObject &amp;album) {&#xD;
    QStringList stringList;&#xD;
    QAndroidJniObject list = album.callObjectMethod("getTitles",&#xD;
                                                      "()Ljava/util/List;");&#xD;
&#xD;
    if (list.isValid()) {&#xD;
        const int size = list.callMethod&lt;jint&gt;("size");&#xD;
        for (int i = 0; i &lt; size; ++i) {&#xD;
            QAndroidJniObject title = list.callObjectMethod("get", "(I)Ljava/lang/Object;", i);&#xD;
            stringList.append(title.toString());&#xD;
        }&#xD;
    }&#xD;
    return stringList;&#xD;
}&#xD;
//! [Working with lists]&#xD;
&#xD;
//! [QAndroidJniObject scope]&#xD;
void functionScope()&#xD;
{&#xD;
    QString helloString("Hello");&#xD;
    jstring myJString = 0;&#xD;
    {&#xD;
        QAndroidJniObject string = QAndroidJniObject::fromString(helloString);&#xD;
        myJString = string.object&lt;jstring&gt;();&#xD;
    }&#xD;
&#xD;
   // Ops! myJString is no longer valid.&#xD;
}&#xD;
//! [QAndroidJniObject scope]&#xD;
&#xD;
//! [Check for exceptions]&#xD;
void functionException()&#xD;
{&#xD;
    QAndroidJniObject myString = QAndroidJniObject::fromString("Hello");&#xD;
    jchar c = myString.callMethod&lt;jchar&gt;("charAt", "(I)C", 1000);&#xD;
    QAndroidJniEnvironment env;&#xD;
    if (env-&gt;ExceptionCheck()) {&#xD;
        // Handle exception here.&#xD;
        env-&gt;ExceptionClear();&#xD;
    }&#xD;
}&#xD;
//! [Check for exceptions]&#xD;
&#xD;
//! [Registering native methods]&#xD;
static void fromJavaOne(JNIEnv *env, jobject thiz, jint x)&#xD;
{&#xD;
    Q_UNUSED(env)&#xD;
    Q_UNUSED(thiz)&#xD;
    qDebug() &lt;&lt; x &lt;&lt; "&lt; 100";&#xD;
}&#xD;
&#xD;
static void fromJavaTwo(JNIEnv *env, jobject thiz, jint x)&#xD;
{&#xD;
    Q_UNUSED(env)&#xD;
    Q_UNUSED(thiz)&#xD;
    qDebug() &lt;&lt; x &lt;&lt; "&gt;= 100";&#xD;
}&#xD;
&#xD;
void registerNativeMethods() {&#xD;
    JNINativeMethod methods[] {{"callNativeOne", "(I)V", reinterpret_cast&lt;void *&gt;(fromJavaOne)},&#xD;
                               {"callNativeTwo", "(I)V", reinterpret_cast&lt;void *&gt;(fromJavaTwo)}};&#xD;
&#xD;
    QAndroidJniObject javaClass("my/java/project/FooJavaClass");&#xD;
    QAndroidJniEnvironment env;&#xD;
    jclass objectClass = env-&gt;GetObjectClass(javaClass.object&lt;jobject&gt;());&#xD;
    env-&gt;RegisterNatives(objectClass,&#xD;
                         methods,&#xD;
                         sizeof(methods) / sizeof(methods[0]));&#xD;
    env-&gt;DeleteLocalRef(objectClass);&#xD;
}&#xD;
&#xD;
void foo()&#xD;
{&#xD;
    QAndroidJniObject::callStaticMethod&lt;void&gt;("my/java/project/FooJavaClass", "foo", "(I)V", 10);  // Output: 10 &lt; 100&#xD;
    QAndroidJniObject::callStaticMethod&lt;void&gt;("my/java/project/FooJavaClass", "foo", "(I)V", 100); // Output: 100 &gt;= 100&#xD;
}&#xD;
&#xD;
//! [Registering native methods]&#xD;
&#xD;
//! [Java native methods]&#xD;
class FooJavaClass&#xD;
{&#xD;
    public static void foo(int x)&#xD;
    {&#xD;
        if (x &lt; 100)&#xD;
            callNativeOne(x);&#xD;
        else&#xD;
            callNativeTwo(x);&#xD;
    }&#xD;
&#xD;
private static native void callNativeOne(int x);&#xD;
private static native void callNativeTwo(int x);&#xD;
&#xD;
}&#xD;
//! [Java native methods]&#xD;
</db:programlisting>
         <db:note>
            <db:para> Since <db:emphasis role="bold">Qt 5.3</db:emphasis> this function can be used without a template type, if the returned type is a <db:code>jobject</db:code>.</db:para>
         </db:note>
         <db:programlisting>jobject object = jniObject.object();</db:programlisting>
      </db:section>
      <db:section>
         <db:title>bool QAndroidJniObject::isClassAvailable(const char *className)</db:title>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>isClassAvailable</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>className</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns true if the Java class <db:code role="argument">className</db:code> is available.</db:para>
         <db:programlisting>...
if (QAndroidJniObject::isClassAvailable("java/lang/String")) {
   ...
}
...</db:programlisting>
      </db:section>
      <db:section>
         <db:title>bool QAndroidJniObject::isValid() const</db:title>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>isValid</db:methodname>
            <db:void/>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns true if this instance holds a valid Java object.</db:para>
         <db:programlisting>...
QAndroidJniObject qjniObject;                        ==&gt; isValid() == false
QAndroidJniObject qjniObject(0)                      ==&gt; isValid() == false
QAndroidJniObject qjniObject("could/not/find/Class") ==&gt; isValid() == false
...</db:programlisting>
      </db:section>
      <db:section>
         <db:title>bool operator!=(const QAndroidJniObject &amp;o1, const QAndroidJniObject &amp;o2)</db:title>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>operator!=</db:methodname>
            <db:methodparam>
               <db:type>const QAndroidJniObject &amp;</db:type>
               <db:parameter>o1</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QAndroidJniObject &amp;</db:type>
               <db:parameter>o2</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns true if <db:code role="argument">o1</db:code> holds a reference to a different object then <db:code role="argument">o2</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>bool operator==(const QAndroidJniObject &amp;o1, const QAndroidJniObject &amp;o2)</db:title>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>operator==</db:methodname>
            <db:methodparam>
               <db:type>const QAndroidJniObject &amp;</db:type>
               <db:parameter>o1</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QAndroidJniObject &amp;</db:type>
               <db:parameter>o2</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns true if both objects, <db:code role="argument">o1</db:code> and <db:code role="argument">o2</db:code>, are referencing the same Java object, or if both are NULL. In any other cases false will be returned.</db:para>
      </db:section>
      <db:section>
         <db:title>void QAndroidJniObject::setField(const char *fieldName, T value)</db:title>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setField</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>fieldName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>T</db:type>
               <db:parameter>value</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Sets the value of <db:code role="argument">fieldName</db:code> to <db:code role="argument">value</db:code>.</db:para>
         <db:programlisting>...
QAndroidJniObject obj;
obj.setField&lt;jint&gt;("AN_INT_FIELD", 10);
jstring myString = ...
obj.setField&lt;jstring&gt;("A_STRING_FIELD", myString);
...</db:programlisting>
      </db:section>
      <db:section>
         <db:title>void QAndroidJniObject::setField(const char *fieldName, const char *signature, T value)</db:title>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setField</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>fieldName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>signature</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>T</db:type>
               <db:parameter>value</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Sets the value of <db:code role="argument">fieldName</db:code> with <db:code role="argument">signature</db:code> to <db:code role="argument">value</db:code>.</db:para>
         <db:programlisting>QAndroidJniObject stringArray = ...;
QAndroidJniObject obj = ...;
obj.setField&lt;jobjectArray&gt;("KEY_VALUES", "([Ljava/lang/String;)V", stringArray.object&lt;jobjectArray&gt;())</db:programlisting>
      </db:section>
      <db:section>
         <db:title>void QAndroidJniObject::setStaticField(const char *className, const char *fieldName, T value)</db:title>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setStaticField</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>className</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>fieldName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>T</db:type>
               <db:parameter>value</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Sets the value of the static field <db:code role="argument">fieldName</db:code> in class <db:code role="argument">className</db:code> to <db:code role="argument">value</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>void QAndroidJniObject::setStaticField(const char *className, const char *fieldName, const char *signature, T value)</db:title>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setStaticField</db:methodname>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>className</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>fieldName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>signature</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>T</db:type>
               <db:parameter>value</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Sets the static field with <db:code role="argument">fieldName</db:code> and <db:code role="argument">signature</db:code> to <db:code role="argument">value</db:code> on class <db:code role="argument">className</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>void QAndroidJniObject::setStaticField(jclass clazz, const char *fieldName, T value)</db:title>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setStaticField</db:methodname>
            <db:methodparam>
               <db:type>jclass</db:type>
               <db:parameter>clazz</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>fieldName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>T</db:type>
               <db:parameter>value</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Sets the static field <db:code role="argument">fieldName</db:code> of the class <db:code role="argument">clazz</db:code> to <db:code role="argument">value</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>void QAndroidJniObject::setStaticField(jclass clazz, const char *fieldName, const char *signature, T value)</db:title>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setStaticField</db:methodname>
            <db:methodparam>
               <db:type>jclass</db:type>
               <db:parameter>clazz</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>fieldName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const char *</db:type>
               <db:parameter>signature</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>T</db:type>
               <db:parameter>value</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
         </db:methodsynopsis>
         <db:para>Sets the static field with <db:code role="argument">fieldName</db:code> and <db:code role="argument">signature</db:code> to <db:code role="argument">value</db:code> on class <db:code role="argument">clazz</db:code>.</db:para>
      </db:section>
   </db:section>
</db:article>
