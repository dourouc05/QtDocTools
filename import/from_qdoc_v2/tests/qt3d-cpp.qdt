<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.2"
            xml:lang="en">
   <db:info>
      <db:title>Qt 3D C++ Classes</db:title>
      <db:abstract>
         <db:para>Qt 3D module contains functionality to support near-realtime simulation systems</db:para>
      </db:abstract>
      <db:pubdate>2018-10-05+02:00</db:pubdate>
      <db:date>2018-10-05+02:00</db:date>
      <db:productname>Qt</db:productname>
      <db:productnumber>1.2</db:productnumber>
   </db:info>
   <db:para>The Qt 3D module contains functionality to support near-realtime simulation systems.</db:para>
   <db:para>The Qt 3D module provides the foundations and core types used for near-realtime simulations built on the Qt 3D framework.</db:para>
   <db:section xml:id="namespaces">
      <db:title>Namespaces</db:title>
   </db:section>
   <db:section xml:id="classes">
      <db:title>Classes</db:title>
   </db:section>
   <db:section xml:id="qt-3d-core-module">
      <db:title>Qt 3D Core Module</db:title>
      <db:section>
         <db:title>t</db:title>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qabstractaspect.webxml" xlink:title="Qt3DCore::QAbstractAspect" xrefstyle="class" annotations="Qt3DCore::QAbstractAspect">Qt3DCore::QAbstractAspect</db:link>
                  </db:td>
                  <db:td>The base class for aspects that provide a vertical slice of behavior</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qabstractskeleton.webxml" xlink:title="Qt3DCore::QAbstractSkeleton" xrefstyle="class" annotations="Qt3DCore::QAbstractSkeleton">Qt3DCore::QAbstractSkeleton</db:link>
                  </db:td>
                  <db:td>A skeleton contains the joints for a skinned mesh</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qarmature.webxml" xlink:title="Qt3DCore::QArmature" xrefstyle="class" annotations="Qt3DCore::QArmature">Qt3DCore::QArmature</db:link>
                  </db:td>
                  <db:td>Used to calculate skinning transform matrices and set them on shaders</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qaspectengine.webxml" xlink:title="Qt3DCore::QAspectEngine" xrefstyle="class" annotations="Qt3DCore::QAspectEngine">Qt3DCore::QAspectEngine</db:link>
                  </db:td>
                  <db:td>Responsible for handling all the QAbstractAspect subclasses that have been registered with the scene</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qaspectjob.webxml" xlink:title="Qt3DCore::QAspectJob" xrefstyle="class" annotations="Qt3DCore::QAspectJob">Qt3DCore::QAspectJob</db:link>
                  </db:td>
                  <db:td>Base class for jobs executed in an aspect</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qbackendnode.webxml" xlink:title="Qt3DCore::QBackendNode" xrefstyle="class" annotations="Qt3DCore::QBackendNode">Qt3DCore::QBackendNode</db:link>
                  </db:td>
                  <db:td>Base class for all Qt3D backend nodes</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qbackendnodemapper.webxml" xlink:title="Qt3DCore::QBackendNodeMapper" xrefstyle="class" annotations="Qt3DCore::QBackendNodeMapper">Qt3DCore::QBackendNodeMapper</db:link>
                  </db:td>
                  <db:td>Creates and maps backend nodes to their respective frontend nodes</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qcomponent.webxml" xlink:title="Qt3DCore::QComponent" xrefstyle="class" annotations="Qt3DCore::QComponent">Qt3DCore::QComponent</db:link>
                  </db:td>
                  <db:td>Base class of scene nodes that can be aggregated by Qt3DCore::QEntity instances as a component</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qcomponentaddedchange.webxml" xlink:title="Qt3DCore::QComponentAddedChange" xrefstyle="class" annotations="Qt3DCore::QComponentAddedChange">Qt3DCore::QComponentAddedChange</db:link>
                  </db:td>
                  <db:td>Used to notify when a component is added to an entity</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qcomponentremovedchange.webxml" xlink:title="Qt3DCore::QComponentRemovedChange" xrefstyle="class" annotations="Qt3DCore::QComponentRemovedChange">Qt3DCore::QComponentRemovedChange</db:link>
                  </db:td>
                  <db:td>Used to notify when a component is removed from an entity</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qdynamicpropertyupdatedchange.webxml" xlink:title="Qt3DCore::QDynamicPropertyUpdatedChange" xrefstyle="class" annotations="Qt3DCore::QDynamicPropertyUpdatedChange">Qt3DCore::QDynamicPropertyUpdatedChange</db:link>
                  </db:td>
                  <db:td>Used to notify when a dynamic property value is updated</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qentity.webxml" xlink:title="Qt3DCore::QEntity" xrefstyle="class" annotations="Qt3DCore::QEntity">Qt3DCore::QEntity</db:link>
                  </db:td>
                  <db:td>Qt3DCore::QEntity is a Qt3DCore::QNode subclass that can aggregate several Qt3DCore::QComponent instances that will specify its behavior</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qjoint.webxml" xlink:title="Qt3DCore::QJoint" xrefstyle="class" annotations="Qt3DCore::QJoint">Qt3DCore::QJoint</db:link>
                  </db:td>
                  <db:td>Used to transforms parts of skinned meshes</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qnode.webxml" xlink:title="Qt3DCore::QNode" xrefstyle="class" annotations="Qt3DCore::QNode">Qt3DCore::QNode</db:link>
                  </db:td>
                  <db:td>The base class of all Qt3D node classes used to build a Qt3D scene</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qnodecommand.webxml" xlink:title="Qt3DCore::QNodeCommand" xrefstyle="class" annotations="Qt3DCore::QNodeCommand">Qt3DCore::QNodeCommand</db:link>
                  </db:td>
                  <db:td>The base class for all CommandRequested QSceneChange events</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qnodecreatedchange.webxml" xlink:title="Qt3DCore::QNodeCreatedChange" xrefstyle="class" annotations="Qt3DCore::QNodeCreatedChange">Qt3DCore::QNodeCreatedChange</db:link>
                  </db:td>
                  <db:td>Used to notify when a node is created</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qnodecreatedchangebase.webxml" xlink:title="Qt3DCore::QNodeCreatedChangeBase" xrefstyle="class" annotations="Qt3DCore::QNodeCreatedChangeBase">Qt3DCore::QNodeCreatedChangeBase</db:link>
                  </db:td>
                  <db:td>The base class for all NodeCreated QSceneChange events</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qnodedestroyedchange.webxml" xlink:title="Qt3DCore::QNodeDestroyedChange" xrefstyle="class" annotations="Qt3DCore::QNodeDestroyedChange">Qt3DCore::QNodeDestroyedChange</db:link>
                  </db:td>
                  <db:td>Used to notify when a node is destroyed</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qnodeid.webxml" xlink:title="Qt3DCore::QNodeId" xrefstyle="class" annotations="Qt3DCore::QNodeId">Qt3DCore::QNodeId</db:link>
                  </db:td>
                  <db:td>Uniquely identifies a QNode</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qpropertynodeaddedchange.webxml" xlink:title="Qt3DCore::QPropertyNodeAddedChange" xrefstyle="class" annotations="Qt3DCore::QPropertyNodeAddedChange">Qt3DCore::QPropertyNodeAddedChange</db:link>
                  </db:td>
                  <db:td>Used to notify when a node is added to a property</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qpropertynoderemovedchange.webxml" xlink:title="Qt3DCore::QPropertyNodeRemovedChange" xrefstyle="class" annotations="Qt3DCore::QPropertyNodeRemovedChange">Qt3DCore::QPropertyNodeRemovedChange</db:link>
                  </db:td>
                  <db:td>Used to notify when a node is removed from a property</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qpropertyupdatedchange.webxml" xlink:title="Qt3DCore::QPropertyUpdatedChange" xrefstyle="class" annotations="Qt3DCore::QPropertyUpdatedChange">Qt3DCore::QPropertyUpdatedChange</db:link>
                  </db:td>
                  <db:td>Used to notify when a property value is updated</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qpropertyupdatedchangebase.webxml" xlink:title="Qt3DCore::QPropertyUpdatedChangeBase" xrefstyle="class" annotations="Qt3DCore::QPropertyUpdatedChangeBase">Qt3DCore::QPropertyUpdatedChangeBase</db:link>
                  </db:td>
                  <db:td>The base class for all PropertyUpdated QSceneChange events</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qpropertyvalueaddedchange.webxml" xlink:title="Qt3DCore::QPropertyValueAddedChange" xrefstyle="class" annotations="Qt3DCore::QPropertyValueAddedChange">Qt3DCore::QPropertyValueAddedChange</db:link>
                  </db:td>
                  <db:td>Used to notify when a value is added to a property</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qpropertyvalueaddedchangebase.webxml" xlink:title="Qt3DCore::QPropertyValueAddedChangeBase" xrefstyle="class" annotations="Qt3DCore::QPropertyValueAddedChangeBase">Qt3DCore::QPropertyValueAddedChangeBase</db:link>
                  </db:td>
                  <db:td>The base class for all PropertyValueAdded QSceneChange events</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qpropertyvalueremovedchange.webxml" xlink:title="Qt3DCore::QPropertyValueRemovedChange" xrefstyle="class" annotations="Qt3DCore::QPropertyValueRemovedChange">Qt3DCore::QPropertyValueRemovedChange</db:link>
                  </db:td>
                  <db:td>Used to notify when a value is added to a property</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qpropertyvalueremovedchangebase.webxml" xlink:title="Qt3DCore::QPropertyValueRemovedChangeBase" xrefstyle="class" annotations="Qt3DCore::QPropertyValueRemovedChangeBase">Qt3DCore::QPropertyValueRemovedChangeBase</db:link>
                  </db:td>
                  <db:td>The base class for all PropertyValueRemoved QSceneChange events</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qscenechange.webxml" xlink:title="Qt3DCore::QSceneChange" xrefstyle="class" annotations="Qt3DCore::QSceneChange">Qt3DCore::QSceneChange</db:link>
                  </db:td>
                  <db:td>Base class for changes that can be sent and received by Qt3D's change notification system</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qskeleton.webxml" xlink:title="Qt3DCore::QSkeleton" xrefstyle="class" annotations="Qt3DCore::QSkeleton">Qt3DCore::QSkeleton</db:link>
                  </db:td>
                  <db:td>Holds the data for a skeleton to be used with skinned meshes</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qskeletonloader.webxml" xlink:title="Qt3DCore::QSkeletonLoader" xrefstyle="class" annotations="Qt3DCore::QSkeletonLoader">Qt3DCore::QSkeletonLoader</db:link>
                  </db:td>
                  <db:td>Used to load a skeleton of joints from file</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qstaticpropertyupdatedchangebase.webxml" xlink:title="Qt3DCore::QStaticPropertyUpdatedChangeBase" xrefstyle="class" annotations="Qt3DCore::QStaticPropertyUpdatedChangeBase">Qt3DCore::QStaticPropertyUpdatedChangeBase</db:link>
                  </db:td>
                  <db:td>The base class for all static PropertyUpdated QSceneChange events</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qstaticpropertyvalueaddedchangebase.webxml" xlink:title="Qt3DCore::QStaticPropertyValueAddedChangeBase" xrefstyle="class" annotations="Qt3DCore::QStaticPropertyValueAddedChangeBase">Qt3DCore::QStaticPropertyValueAddedChangeBase</db:link>
                  </db:td>
                  <db:td>The base class for all static PropertyValueAdded QSceneChange events</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qstaticpropertyvalueremovedchangebase.webxml" xlink:title="Qt3DCore::QStaticPropertyValueRemovedChangeBase" xrefstyle="class" annotations="Qt3DCore::QStaticPropertyValueRemovedChangeBase">Qt3DCore::QStaticPropertyValueRemovedChangeBase</db:link>
                  </db:td>
                  <db:td>The base class for all static PropertyValueRemoved QSceneChange events</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::qtransform.webxml" xlink:title="Qt3DCore::QTransform" xrefstyle="class" annotations="Qt3DCore::QTransform">Qt3DCore::QTransform</db:link>
                  </db:td>
                  <db:td>Used to perform transforms on meshes</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dcore::quick::qqmlaspectengine.webxml" xlink:title="Qt3DCore::Quick::QQmlAspectEngine" xrefstyle="class" annotations="Qt3DCore::Quick::QQmlAspectEngine">Qt3DCore::Quick::QQmlAspectEngine</db:link>
                  </db:td>
                  <db:td>Environment for the QAspectEngine and a method for instantiating QML components</db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
   </db:section>
   <db:section xml:id="qt-3d-input-module">
      <db:title>Qt 3D Input Module</db:title>
      <db:section>
         <db:title>t</db:title>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qabstractactioninput.webxml" xlink:title="Qt3DInput::QAbstractActionInput" xrefstyle="class" annotations="Qt3DInput::QAbstractActionInput">Qt3DInput::QAbstractActionInput</db:link>
                  </db:td>
                  <db:td>The base class for the Action Input and all Aggregate Action Inputs</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qabstractaxisinput.webxml" xlink:title="Qt3DInput::QAbstractAxisInput" xrefstyle="class" annotations="Qt3DInput::QAbstractAxisInput">Qt3DInput::QAbstractAxisInput</db:link>
                  </db:td>
                  <db:td>QAbstractActionInput is the base class for all Axis Input</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qabstractphysicaldevice.webxml" xlink:title="Qt3DInput::QAbstractPhysicalDevice" xrefstyle="class" annotations="Qt3DInput::QAbstractPhysicalDevice">Qt3DInput::QAbstractPhysicalDevice</db:link>
                  </db:td>
                  <db:td>The base class used by Qt3d to interact with arbitrary input devices</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qaction.webxml" xlink:title="Qt3DInput::QAction" xrefstyle="class" annotations="Qt3DInput::QAction">Qt3DInput::QAction</db:link>
                  </db:td>
                  <db:td>Links a set of QAbstractActionInput that trigger the same event</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qactioninput.webxml" xlink:title="Qt3DInput::QActionInput" xrefstyle="class" annotations="Qt3DInput::QActionInput">Qt3DInput::QActionInput</db:link>
                  </db:td>
                  <db:td>Stores Device and Buttons used to trigger an input event</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qanalogaxisinput.webxml" xlink:title="Qt3DInput::QAnalogAxisInput" xrefstyle="class" annotations="Qt3DInput::QAnalogAxisInput">Qt3DInput::QAnalogAxisInput</db:link>
                  </db:td>
                  <db:td>An axis input controlled by an analog input The axis value is controlled like a traditional analog input such as a joystick</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qaxis.webxml" xlink:title="Qt3DInput::QAxis" xrefstyle="class" annotations="Qt3DInput::QAxis">Qt3DInput::QAxis</db:link>
                  </db:td>
                  <db:td>Stores QAbstractAxisInputs used to trigger an input event</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qaxisaccumulator.webxml" xlink:title="Qt3DInput::QAxisAccumulator" xrefstyle="class" annotations="Qt3DInput::QAxisAccumulator">Qt3DInput::QAxisAccumulator</db:link>
                  </db:td>
                  <db:td>Processes velocity or acceleration data from a QAxis</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qaxissetting.webxml" xlink:title="Qt3DInput::QAxisSetting" xrefstyle="class" annotations="Qt3DInput::QAxisSetting">Qt3DInput::QAxisSetting</db:link>
                  </db:td>
                  <db:td>Stores settings for the specified list of Axis</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qbuttonaxisinput.webxml" xlink:title="Qt3DInput::QButtonAxisInput" xrefstyle="class" annotations="Qt3DInput::QButtonAxisInput">Qt3DInput::QButtonAxisInput</db:link>
                  </db:td>
                  <db:td>An axis input controlled by buttons The axis value is controlled by buttons rather than a traditional analog input such as a joystick</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qinputaspect.webxml" xlink:title="Qt3DInput::QInputAspect" xrefstyle="class" annotations="Qt3DInput::QInputAspect">Qt3DInput::QInputAspect</db:link>
                  </db:td>
                  <db:td>Responsible for creating physical devices and handling associated jobs</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qinputchord.webxml" xlink:title="Qt3DInput::QInputChord" xrefstyle="class" annotations="Qt3DInput::QInputChord">Qt3DInput::QInputChord</db:link>
                  </db:td>
                  <db:td>Represents a set of QAbstractActionInput's that must be triggerd at once</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qinputsequence.webxml" xlink:title="Qt3DInput::QInputSequence" xrefstyle="class" annotations="Qt3DInput::QInputSequence">Qt3DInput::QInputSequence</db:link>
                  </db:td>
                  <db:td>Represents a set of QAbstractActionInput's that must be triggerd one after the other</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qinputsettings.webxml" xlink:title="Qt3DInput::QInputSettings" xrefstyle="class" annotations="Qt3DInput::QInputSettings">Qt3DInput::QInputSettings</db:link>
                  </db:td>
                  <db:td>Holds the pointer to an input event source object</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qkeyevent.webxml" xlink:title="Qt3DInput::QKeyEvent" xrefstyle="class" annotations="Qt3DInput::QKeyEvent">Qt3DInput::QKeyEvent</db:link>
                  </db:td>
                  <db:td>Event type send by KeyBoardHandler</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qkeyboarddevice.webxml" xlink:title="Qt3DInput::QKeyboardDevice" xrefstyle="class" annotations="Qt3DInput::QKeyboardDevice">Qt3DInput::QKeyboardDevice</db:link>
                  </db:td>
                  <db:td>In charge of dispatching keyboard events to attached QQKeyboardHandler objects</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qkeyboardhandler.webxml" xlink:title="Qt3DInput::QKeyboardHandler" xrefstyle="class" annotations="Qt3DInput::QKeyboardHandler">Qt3DInput::QKeyboardHandler</db:link>
                  </db:td>
                  <db:td>Provides keyboard event notification</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qlogicaldevice.webxml" xlink:title="Qt3DInput::QLogicalDevice" xrefstyle="class" annotations="Qt3DInput::QLogicalDevice">Qt3DInput::QLogicalDevice</db:link>
                  </db:td>
                  <db:td>Allows the user to define a set of actions that they wish to use within an application</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qmousedevice.webxml" xlink:title="Qt3DInput::QMouseDevice" xrefstyle="class" annotations="Qt3DInput::QMouseDevice">Qt3DInput::QMouseDevice</db:link>
                  </db:td>
                  <db:td>Delegates mouse events to the attached MouseHandler objects</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qmouseevent.webxml" xlink:title="Qt3DInput::QMouseEvent" xrefstyle="class" annotations="Qt3DInput::QMouseEvent">Qt3DInput::QMouseEvent</db:link>
                  </db:td>
                  <db:td>Qt3DCore::QMouseEvent contains parameters that describe a mouse event</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qmousehandler.webxml" xlink:title="Qt3DInput::QMouseHandler" xrefstyle="class" annotations="Qt3DInput::QMouseHandler">Qt3DInput::QMouseHandler</db:link>
                  </db:td>
                  <db:td>Provides a means of being notified about mouse events when attached to a QMouseDevice instance</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qphysicaldevicecreatedchangebase.webxml" xlink:title="Qt3DInput::QPhysicalDeviceCreatedChangeBase" xrefstyle="class" annotations="Qt3DInput::QPhysicalDeviceCreatedChangeBase">Qt3DInput::QPhysicalDeviceCreatedChangeBase</db:link>
                  </db:td>
                  <db:td>Base class for handling changes in physical devices</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dinput::qwheelevent.webxml" xlink:title="Qt3DInput::QWheelEvent" xrefstyle="class" annotations="Qt3DInput::QWheelEvent">Qt3DInput::QWheelEvent</db:link>
                  </db:td>
                  <db:td>Contains parameters that describe a mouse wheel event</db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
   </db:section>
   <db:section xml:id="qt-3d-logic-module">
      <db:title>Qt 3D Logic Module</db:title>
      <db:section>
         <db:title>t</db:title>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dlogic::qframeaction.webxml" xlink:title="Qt3DLogic::QFrameAction" xrefstyle="class" annotations="Qt3DLogic::QFrameAction">Qt3DLogic::QFrameAction</db:link>
                  </db:td>
                  <db:td>Provides a way to have a synchronous function executed each frame</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dlogic::qlogicaspect.webxml" xlink:title="Qt3DLogic::QLogicAspect" xrefstyle="class" annotations="Qt3DLogic::QLogicAspect">Qt3DLogic::QLogicAspect</db:link>
                  </db:td>
                  <db:td>Responsible for handling frame synchronization jobs</db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
   </db:section>
   <db:section xml:id="qt-3d-render-module">
      <db:title>Qt 3D Render Module</db:title>
      <db:section>
         <db:title>t</db:title>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::assimpimporter.webxml" xlink:title="Qt3DRender::AssimpImporter" xrefstyle="class" annotations="Qt3DRender::AssimpImporter">Qt3DRender::AssimpImporter</db:link>
                  </db:td>
                  <db:td>Provides a generic way of loading various 3D assets format into a Qt3D scene</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::gltfexporter.webxml" xlink:title="Qt3DRender::GLTFExporter" xrefstyle="class" annotations="Qt3DRender::GLTFExporter">Qt3DRender::GLTFExporter</db:link>
                  </db:td>
                  <db:td>Manages the export of a 3D scene to the GLTF format</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::gltfimporter.webxml" xlink:title="Qt3DRender::GLTFImporter" xrefstyle="class" annotations="Qt3DRender::GLTFImporter">Qt3DRender::GLTFImporter</db:link>
                  </db:td>
                  <db:td>Handles importing of gltf files</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qabstractfunctor.webxml" xlink:title="Qt3DRender::QAbstractFunctor" xrefstyle="class" annotations="Qt3DRender::QAbstractFunctor">Qt3DRender::QAbstractFunctor</db:link>
                  </db:td>
                  <db:td>Abstract base class for all functors</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qabstractlight.webxml" xlink:title="Qt3DRender::QAbstractLight" xrefstyle="class" annotations="Qt3DRender::QAbstractLight">Qt3DRender::QAbstractLight</db:link>
                  </db:td>
                  <db:td>Encapsulate a QAbstractLight object in a Qt 3D scene</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qabstractraycaster.webxml" xlink:title="Qt3DRender::QAbstractRayCaster" xrefstyle="class" annotations="Qt3DRender::QAbstractRayCaster">Qt3DRender::QAbstractRayCaster</db:link>
                  </db:td>
                  <db:td>An abstract base class for ray casting in 3d scenes</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qabstracttexture.webxml" xlink:title="Qt3DRender::QAbstractTexture" xrefstyle="class" annotations="Qt3DRender::QAbstractTexture">Qt3DRender::QAbstractTexture</db:link>
                  </db:td>
                  <db:td>A base class to be used to provide textures</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qabstracttextureimage.webxml" xlink:title="Qt3DRender::QAbstractTextureImage" xrefstyle="class" annotations="Qt3DRender::QAbstractTextureImage">Qt3DRender::QAbstractTextureImage</db:link>
                  </db:td>
                  <db:td>Encapsulates the necessary information to create an OpenGL texture image</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qalphacoverage.webxml" xlink:title="Qt3DRender::QAlphaCoverage" xrefstyle="class" annotations="Qt3DRender::QAlphaCoverage">Qt3DRender::QAlphaCoverage</db:link>
                  </db:td>
                  <db:td>Enable alpha-to-coverage multisampling mode</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qalphatest.webxml" xlink:title="Qt3DRender::QAlphaTest" xrefstyle="class" annotations="Qt3DRender::QAlphaTest">Qt3DRender::QAlphaTest</db:link>
                  </db:td>
                  <db:td>Specify alpha reference test</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qattribute.webxml" xlink:title="Qt3DRender::QAttribute" xrefstyle="class" annotations="Qt3DRender::QAttribute">Qt3DRender::QAttribute</db:link>
                  </db:td>
                  <db:td>Defines an attribute and how data should be read from a QBuffer</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qblendequation.webxml" xlink:title="Qt3DRender::QBlendEquation" xrefstyle="class" annotations="Qt3DRender::QBlendEquation">Qt3DRender::QBlendEquation</db:link>
                  </db:td>
                  <db:td>Specifies the equation used for both the RGB blend equation and the Alpha blend equation</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qblendequationarguments.webxml" xlink:title="Qt3DRender::QBlendEquationArguments" xrefstyle="class" annotations="Qt3DRender::QBlendEquationArguments">Qt3DRender::QBlendEquationArguments</db:link>
                  </db:td>
                  <db:td>Encapsulates blending information: specifies how the incoming values (what's going to be drawn) are going to affect the existing values (what is already drawn)</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qblitframebuffer.webxml" xlink:title="Qt3DRender::QBlitFramebuffer" xrefstyle="class" annotations="Qt3DRender::QBlitFramebuffer">Qt3DRender::QBlitFramebuffer</db:link>
                  </db:td>
                  <db:td>FrameGraph node to transfer a rectangle of pixel values from one region of a render target to another</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qbuffer.webxml" xlink:title="Qt3DRender::QBuffer" xrefstyle="class" annotations="Qt3DRender::QBuffer">Qt3DRender::QBuffer</db:link>
                  </db:td>
                  <db:td>Provides a data store for raw data to later be used as vertices or uniforms</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qbuffercapture.webxml" xlink:title="Qt3DRender::QBufferCapture" xrefstyle="class" annotations="Qt3DRender::QBufferCapture">Qt3DRender::QBufferCapture</db:link>
                  </db:td>
                  <db:td>Exchanges buffer data between GPU and CPU</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qbufferdatagenerator.webxml" xlink:title="Qt3DRender::QBufferDataGenerator" xrefstyle="class" annotations="Qt3DRender::QBufferDataGenerator">Qt3DRender::QBufferDataGenerator</db:link>
                  </db:td>
                  <db:td>Provides a mechanism to generate buffer data from a job</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qcamera.webxml" xlink:title="Qt3DRender::QCamera" xrefstyle="class" annotations="Qt3DRender::QCamera">Qt3DRender::QCamera</db:link>
                  </db:td>
                  <db:td>Defines a view point through which the scene will be rendered</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qcameralens.webxml" xlink:title="Qt3DRender::QCameraLens" xrefstyle="class" annotations="Qt3DRender::QCameraLens">Qt3DRender::QCameraLens</db:link>
                  </db:td>
                  <db:td>Qt3DRender::QCameraLens specifies the projection matrix that will be used to define a Camera for a 3D scene</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qcameraselector.webxml" xlink:title="Qt3DRender::QCameraSelector" xrefstyle="class" annotations="Qt3DRender::QCameraSelector">Qt3DRender::QCameraSelector</db:link>
                  </db:td>
                  <db:td>Class to allow for selection of camera to be used</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qclearbuffers.webxml" xlink:title="Qt3DRender::QClearBuffers" xrefstyle="class" annotations="Qt3DRender::QClearBuffers">Qt3DRender::QClearBuffers</db:link>
                  </db:td>
                  <db:td>Class to clear buffers</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qclipplane.webxml" xlink:title="Qt3DRender::QClipPlane" xrefstyle="class" annotations="Qt3DRender::QClipPlane">Qt3DRender::QClipPlane</db:link>
                  </db:td>
                  <db:td>Enables an additional OpenGL clipping plane that can be in shaders using gl_ClipDistance</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qcolormask.webxml" xlink:title="Qt3DRender::QColorMask" xrefstyle="class" annotations="Qt3DRender::QColorMask">Qt3DRender::QColorMask</db:link>
                  </db:td>
                  <db:td>Allows specifying which color components should be written to the currently bound frame buffer</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qcomputecommand.webxml" xlink:title="Qt3DRender::QComputeCommand" xrefstyle="class" annotations="Qt3DRender::QComputeCommand">Qt3DRender::QComputeCommand</db:link>
                  </db:td>
                  <db:td>QComponent to issue work for the compute shader on GPU</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qcullface.webxml" xlink:title="Qt3DRender::QCullFace" xrefstyle="class" annotations="Qt3DRender::QCullFace">Qt3DRender::QCullFace</db:link>
                  </db:td>
                  <db:td>Specifies whether front or back face culling is enabled</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qdepthtest.webxml" xlink:title="Qt3DRender::QDepthTest" xrefstyle="class" annotations="Qt3DRender::QDepthTest">Qt3DRender::QDepthTest</db:link>
                  </db:td>
                  <db:td>Tests the fragment shader's depth value against the depth of a sample being written to</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qdirectionallight.webxml" xlink:title="Qt3DRender::QDirectionalLight" xrefstyle="class" annotations="Qt3DRender::QDirectionalLight">Qt3DRender::QDirectionalLight</db:link>
                  </db:td>
                  <db:td>Encapsulate a Directional Light object in a Qt 3D scene</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qdispatchcompute.webxml" xlink:title="Qt3DRender::QDispatchCompute" xrefstyle="class" annotations="Qt3DRender::QDispatchCompute">Qt3DRender::QDispatchCompute</db:link>
                  </db:td>
                  <db:td>FrameGraph node to issue work for the compute shader on GPU</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qdithering.webxml" xlink:title="Qt3DRender::QDithering" xrefstyle="class" annotations="Qt3DRender::QDithering">Qt3DRender::QDithering</db:link>
                  </db:td>
                  <db:td>Enable dithering</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qeffect.webxml" xlink:title="Qt3DRender::QEffect" xrefstyle="class" annotations="Qt3DRender::QEffect">Qt3DRender::QEffect</db:link>
                  </db:td>
                  <db:td>Base class for effects in a Qt 3D scene</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qenvironmentlight.webxml" xlink:title="Qt3DRender::QEnvironmentLight" xrefstyle="class" annotations="Qt3DRender::QEnvironmentLight">Qt3DRender::QEnvironmentLight</db:link>
                  </db:td>
                  <db:td>Encapsulate an environment light object in a Qt 3D scene</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qfilterkey.webxml" xlink:title="Qt3DRender::QFilterKey" xrefstyle="class" annotations="Qt3DRender::QFilterKey">Qt3DRender::QFilterKey</db:link>
                  </db:td>
                  <db:td>Storage for filter keys and their values</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qframegraphnode.webxml" xlink:title="Qt3DRender::QFrameGraphNode" xrefstyle="class" annotations="Qt3DRender::QFrameGraphNode">Qt3DRender::QFrameGraphNode</db:link>
                  </db:td>
                  <db:td>Base class of all FrameGraph configuration nodes</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qframegraphnodecreatedchangebase.webxml" xlink:title="Qt3DRender::QFrameGraphNodeCreatedChangeBase" xrefstyle="class" annotations="Qt3DRender::QFrameGraphNodeCreatedChangeBase">Qt3DRender::QFrameGraphNodeCreatedChangeBase</db:link>
                  </db:td>
                  <db:td>A base class for changes in the FrameGraphNode</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qfrontface.webxml" xlink:title="Qt3DRender::QFrontFace" xrefstyle="class" annotations="Qt3DRender::QFrontFace">Qt3DRender::QFrontFace</db:link>
                  </db:td>
                  <db:td>Defines front and back facing polygons</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qfrustumculling.webxml" xlink:title="Qt3DRender::QFrustumCulling" xrefstyle="class" annotations="Qt3DRender::QFrustumCulling">Qt3DRender::QFrustumCulling</db:link>
                  </db:td>
                  <db:td>Enable frustum culling for the FrameGraph</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qgeometry.webxml" xlink:title="Qt3DRender::QGeometry" xrefstyle="class" annotations="Qt3DRender::QGeometry">Qt3DRender::QGeometry</db:link>
                  </db:td>
                  <db:td>Encapsulates geometry</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qgeometryrenderer.webxml" xlink:title="Qt3DRender::QGeometryRenderer" xrefstyle="class" annotations="Qt3DRender::QGeometryRenderer">Qt3DRender::QGeometryRenderer</db:link>
                  </db:td>
                  <db:td>Encapsulates geometry rendering</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qgraphicsapifilter.webxml" xlink:title="Qt3DRender::QGraphicsApiFilter" xrefstyle="class" annotations="Qt3DRender::QGraphicsApiFilter">Qt3DRender::QGraphicsApiFilter</db:link>
                  </db:td>
                  <db:td>Identifies the API required for the attached QTechnique</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qlayer.webxml" xlink:title="Qt3DRender::QLayer" xrefstyle="class" annotations="Qt3DRender::QLayer">Qt3DRender::QLayer</db:link>
                  </db:td>
                  <db:td>Way of filtering which entities will be rendered</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qlayerfilter.webxml" xlink:title="Qt3DRender::QLayerFilter" xrefstyle="class" annotations="Qt3DRender::QLayerFilter">Qt3DRender::QLayerFilter</db:link>
                  </db:td>
                  <db:td>Controls layers drawn in a frame graph branch</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qlevelofdetail.webxml" xlink:title="Qt3DRender::QLevelOfDetail" xrefstyle="class" annotations="Qt3DRender::QLevelOfDetail">Qt3DRender::QLevelOfDetail</db:link>
                  </db:td>
                  <db:td>Way of controlling the complexity of rendered entities based on their size on the screen</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qlevelofdetailboundingsphere.webxml" xlink:title="Qt3DRender::QLevelOfDetailBoundingSphere" xrefstyle="class" annotations="Qt3DRender::QLevelOfDetailBoundingSphere">Qt3DRender::QLevelOfDetailBoundingSphere</db:link>
                  </db:td>
                  <db:td>Simple spherical volume, defined by its center and radius</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qlevelofdetailswitch.webxml" xlink:title="Qt3DRender::QLevelOfDetailSwitch" xrefstyle="class" annotations="Qt3DRender::QLevelOfDetailSwitch">Qt3DRender::QLevelOfDetailSwitch</db:link>
                  </db:td>
                  <db:td>Provides a way of enabling child entities based on distance or screen size</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qlinewidth.webxml" xlink:title="Qt3DRender::QLineWidth" xrefstyle="class" annotations="Qt3DRender::QLineWidth">Qt3DRender::QLineWidth</db:link>
                  </db:td>
                  <db:td>Specifies the width of rasterized lines</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qmaterial.webxml" xlink:title="Qt3DRender::QMaterial" xrefstyle="class" annotations="Qt3DRender::QMaterial">Qt3DRender::QMaterial</db:link>
                  </db:td>
                  <db:td>Provides an abstract class that should be the base of all material component classes in a scene</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qmemorybarrier.webxml" xlink:title="Qt3DRender::QMemoryBarrier" xrefstyle="class" annotations="Qt3DRender::QMemoryBarrier">Qt3DRender::QMemoryBarrier</db:link>
                  </db:td>
                  <db:td>Class to emplace a memory barrier</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qmesh.webxml" xlink:title="Qt3DRender::QMesh" xrefstyle="class" annotations="Qt3DRender::QMesh">Qt3DRender::QMesh</db:link>
                  </db:td>
                  <db:td>A custom mesh loader</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qmultisampleantialiasing.webxml" xlink:title="Qt3DRender::QMultiSampleAntiAliasing" xrefstyle="class" annotations="Qt3DRender::QMultiSampleAntiAliasing">Qt3DRender::QMultiSampleAntiAliasing</db:link>
                  </db:td>
                  <db:td>Enable multisample antialiasing</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qnodepthmask.webxml" xlink:title="Qt3DRender::QNoDepthMask" xrefstyle="class" annotations="Qt3DRender::QNoDepthMask">Qt3DRender::QNoDepthMask</db:link>
                  </db:td>
                  <db:td>Disable depth write</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qnodraw.webxml" xlink:title="Qt3DRender::QNoDraw" xrefstyle="class" annotations="Qt3DRender::QNoDraw">Qt3DRender::QNoDraw</db:link>
                  </db:td>
                  <db:td>When a Qt3DRender::QNoDraw node is present in a FrameGraph branch, this prevents the renderer from rendering any primitive</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qobjectpicker.webxml" xlink:title="Qt3DRender::QObjectPicker" xrefstyle="class" annotations="Qt3DRender::QObjectPicker">Qt3DRender::QObjectPicker</db:link>
                  </db:td>
                  <db:td>Instantiates a component that can be used to interact with a QEntity by a process known as picking</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qpaintedtextureimage.webxml" xlink:title="Qt3DRender::QPaintedTextureImage" xrefstyle="class" annotations="Qt3DRender::QPaintedTextureImage">Qt3DRender::QPaintedTextureImage</db:link>
                  </db:td>
                  <db:td>A QAbstractTextureImage that can be written through a QPainter</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qparameter.webxml" xlink:title="Qt3DRender::QParameter" xrefstyle="class" annotations="Qt3DRender::QParameter">Qt3DRender::QParameter</db:link>
                  </db:td>
                  <db:td>Provides storage for a name and value pair. This maps to a shader uniform</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qpickevent.webxml" xlink:title="Qt3DRender::QPickEvent" xrefstyle="class" annotations="Qt3DRender::QPickEvent">Qt3DRender::QPickEvent</db:link>
                  </db:td>
                  <db:td>Holds information when an object is picked</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qpicklineevent.webxml" xlink:title="Qt3DRender::QPickLineEvent" xrefstyle="class" annotations="Qt3DRender::QPickLineEvent">Qt3DRender::QPickLineEvent</db:link>
                  </db:td>
                  <db:td>Holds information when a segment of a line is picked</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qpickpointevent.webxml" xlink:title="Qt3DRender::QPickPointEvent" xrefstyle="class" annotations="Qt3DRender::QPickPointEvent">Qt3DRender::QPickPointEvent</db:link>
                  </db:td>
                  <db:td>Holds information when a segment of a point cloud is picked</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qpicktriangleevent.webxml" xlink:title="Qt3DRender::QPickTriangleEvent" xrefstyle="class" annotations="Qt3DRender::QPickTriangleEvent">Qt3DRender::QPickTriangleEvent</db:link>
                  </db:td>
                  <db:td>Holds information when a triangle is picked</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qpickingsettings.webxml" xlink:title="Qt3DRender::QPickingSettings" xrefstyle="class" annotations="Qt3DRender::QPickingSettings">Qt3DRender::QPickingSettings</db:link>
                  </db:td>
                  <db:td>Specifies how entity picking is handled</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qpointlight.webxml" xlink:title="Qt3DRender::QPointLight" xrefstyle="class" annotations="Qt3DRender::QPointLight">Qt3DRender::QPointLight</db:link>
                  </db:td>
                  <db:td>Encapsulate a Point Light object in a Qt 3D scene</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qpointsize.webxml" xlink:title="Qt3DRender::QPointSize" xrefstyle="class" annotations="Qt3DRender::QPointSize">Qt3DRender::QPointSize</db:link>
                  </db:td>
                  <db:td>Specifies the size of rasterized points. May either be set statically or by shader programs</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qpolygonoffset.webxml" xlink:title="Qt3DRender::QPolygonOffset" xrefstyle="class" annotations="Qt3DRender::QPolygonOffset">Qt3DRender::QPolygonOffset</db:link>
                  </db:td>
                  <db:td>Sets the scale and steps to calculate depth values for polygon offsets</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qproximityfilter.webxml" xlink:title="Qt3DRender::QProximityFilter" xrefstyle="class" annotations="Qt3DRender::QProximityFilter">Qt3DRender::QProximityFilter</db:link>
                  </db:td>
                  <db:td>Select entities which are within a distance threshold of a target entity</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qraycaster.webxml" xlink:title="Qt3DRender::QRayCaster" xrefstyle="class" annotations="Qt3DRender::QRayCaster">Qt3DRender::QRayCaster</db:link>
                  </db:td>
                  <db:td>Qt3DRender::QRayCaster is used to perform ray casting tests in 3d world coordinates</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qraycasterhit.webxml" xlink:title="Qt3DRender::QRayCasterHit" xrefstyle="class" annotations="Qt3DRender::QRayCasterHit">Qt3DRender::QRayCasterHit</db:link>
                  </db:td>
                  <db:td>Details of a hit when casting a ray through a model</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qrenderaspect.webxml" xlink:title="Qt3DRender::QRenderAspect" xrefstyle="class" annotations="Qt3DRender::QRenderAspect">Qt3DRender::QRenderAspect</db:link>
                  </db:td>
                  <db:td/>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qrendercapture.webxml" xlink:title="Qt3DRender::QRenderCapture" xrefstyle="class" annotations="Qt3DRender::QRenderCapture">Qt3DRender::QRenderCapture</db:link>
                  </db:td>
                  <db:td>Frame graph node for render capture</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qrendercapturereply.webxml" xlink:title="Qt3DRender::QRenderCaptureReply" xrefstyle="class" annotations="Qt3DRender::QRenderCaptureReply">Qt3DRender::QRenderCaptureReply</db:link>
                  </db:td>
                  <db:td>Receives the result of render capture request</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qrenderpass.webxml" xlink:title="Qt3DRender::QRenderPass" xrefstyle="class" annotations="Qt3DRender::QRenderPass">Qt3DRender::QRenderPass</db:link>
                  </db:td>
                  <db:td>Encapsulates a Render Pass</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qrenderpassfilter.webxml" xlink:title="Qt3DRender::QRenderPassFilter" xrefstyle="class" annotations="Qt3DRender::QRenderPassFilter">Qt3DRender::QRenderPassFilter</db:link>
                  </db:td>
                  <db:td>Provides storage for vectors of Filter Keys and Parameters</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qrendersettings.webxml" xlink:title="Qt3DRender::QRenderSettings" xrefstyle="class" annotations="Qt3DRender::QRenderSettings">Qt3DRender::QRenderSettings</db:link>
                  </db:td>
                  <db:td>Holds settings related to rendering process and host the active FrameGraph</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qrenderstate.webxml" xlink:title="Qt3DRender::QRenderState" xrefstyle="class" annotations="Qt3DRender::QRenderState">Qt3DRender::QRenderState</db:link>
                  </db:td>
                  <db:td>An abstract base class for all render states</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qrenderstateset.webxml" xlink:title="Qt3DRender::QRenderStateSet" xrefstyle="class" annotations="Qt3DRender::QRenderStateSet">Qt3DRender::QRenderStateSet</db:link>
                  </db:td>
                  <db:td>FrameGraph node offers a way of specifying a set of QRenderState objects to be applied during the execution of a framegraph branch</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qrendersurfaceselector.webxml" xlink:title="Qt3DRender::QRenderSurfaceSelector" xrefstyle="class" annotations="Qt3DRender::QRenderSurfaceSelector">Qt3DRender::QRenderSurfaceSelector</db:link>
                  </db:td>
                  <db:td>Provides a way of specifying the render surface</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qrendertarget.webxml" xlink:title="Qt3DRender::QRenderTarget" xrefstyle="class" annotations="Qt3DRender::QRenderTarget">Qt3DRender::QRenderTarget</db:link>
                  </db:td>
                  <db:td>Encapsulates a target (usually a frame buffer object) which the renderer can render into</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qrendertargetoutput.webxml" xlink:title="Qt3DRender::QRenderTargetOutput" xrefstyle="class" annotations="Qt3DRender::QRenderTargetOutput">Qt3DRender::QRenderTargetOutput</db:link>
                  </db:td>
                  <db:td>Allows the specification of an attachment of a render target (whether it is a color texture, a depth texture, etc... )</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qrendertargetselector.webxml" xlink:title="Qt3DRender::QRenderTargetSelector" xrefstyle="class" annotations="Qt3DRender::QRenderTargetSelector">Qt3DRender::QRenderTargetSelector</db:link>
                  </db:td>
                  <db:td>Provides a way of specifying a render target</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qsceneloader.webxml" xlink:title="Qt3DRender::QSceneLoader" xrefstyle="class" annotations="Qt3DRender::QSceneLoader">Qt3DRender::QSceneLoader</db:link>
                  </db:td>
                  <db:td>Provides the facility to load an existing Scene</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qscissortest.webxml" xlink:title="Qt3DRender::QScissorTest" xrefstyle="class" annotations="Qt3DRender::QScissorTest">Qt3DRender::QScissorTest</db:link>
                  </db:td>
                  <db:td>Discards fragments that fall outside of a certain rectangular portion of the screen</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qscreenraycaster.webxml" xlink:title="Qt3DRender::QScreenRayCaster" xrefstyle="class" annotations="Qt3DRender::QScreenRayCaster">Qt3DRender::QScreenRayCaster</db:link>
                  </db:td>
                  <db:td>Performe ray casting test based on screen coordinates</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qseamlesscubemap.webxml" xlink:title="Qt3DRender::QSeamlessCubemap" xrefstyle="class" annotations="Qt3DRender::QSeamlessCubemap">Qt3DRender::QSeamlessCubemap</db:link>
                  </db:td>
                  <db:td>Enables seamless cubemap texture filtering</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qshaderdata.webxml" xlink:title="Qt3DRender::QShaderData" xrefstyle="class" annotations="Qt3DRender::QShaderData">Qt3DRender::QShaderData</db:link>
                  </db:td>
                  <db:td>Provides a way of specifying values of a Uniform Block or a shader structure</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qshaderprogram.webxml" xlink:title="Qt3DRender::QShaderProgram" xrefstyle="class" annotations="Qt3DRender::QShaderProgram">Qt3DRender::QShaderProgram</db:link>
                  </db:td>
                  <db:td>Encapsulates a Shader Program</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qshaderprogrambuilder.webxml" xlink:title="Qt3DRender::QShaderProgramBuilder" xrefstyle="class" annotations="Qt3DRender::QShaderProgramBuilder">Qt3DRender::QShaderProgramBuilder</db:link>
                  </db:td>
                  <db:td>Generates a Shader Program content from loaded graphs</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qsortpolicy.webxml" xlink:title="Qt3DRender::QSortPolicy" xrefstyle="class" annotations="Qt3DRender::QSortPolicy">Qt3DRender::QSortPolicy</db:link>
                  </db:td>
                  <db:td>Provides storage for the sort types to be used</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qspotlight.webxml" xlink:title="Qt3DRender::QSpotLight" xrefstyle="class" annotations="Qt3DRender::QSpotLight">Qt3DRender::QSpotLight</db:link>
                  </db:td>
                  <db:td>Encapsulate a Spot Light object in a Qt 3D scene</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qstencilmask.webxml" xlink:title="Qt3DRender::QStencilMask" xrefstyle="class" annotations="Qt3DRender::QStencilMask">Qt3DRender::QStencilMask</db:link>
                  </db:td>
                  <db:td>Controls the front and back writing of individual bits in the stencil planes</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qstenciloperation.webxml" xlink:title="Qt3DRender::QStencilOperation" xrefstyle="class" annotations="Qt3DRender::QStencilOperation">Qt3DRender::QStencilOperation</db:link>
                  </db:td>
                  <db:td>Specifies stencil operation</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qstenciloperationarguments.webxml" xlink:title="Qt3DRender::QStencilOperationArguments" xrefstyle="class" annotations="Qt3DRender::QStencilOperationArguments">Qt3DRender::QStencilOperationArguments</db:link>
                  </db:td>
                  <db:td>Sets the actions to be taken when stencil and depth tests fail</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qstenciltest.webxml" xlink:title="Qt3DRender::QStencilTest" xrefstyle="class" annotations="Qt3DRender::QStencilTest">Qt3DRender::QStencilTest</db:link>
                  </db:td>
                  <db:td>Specifies arguments for the stecil test</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qstenciltestarguments.webxml" xlink:title="Qt3DRender::QStencilTestArguments" xrefstyle="class" annotations="Qt3DRender::QStencilTestArguments">Qt3DRender::QStencilTestArguments</db:link>
                  </db:td>
                  <db:td>Specifies arguments for stencil test</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtechnique.webxml" xlink:title="Qt3DRender::QTechnique" xrefstyle="class" annotations="Qt3DRender::QTechnique">Qt3DRender::QTechnique</db:link>
                  </db:td>
                  <db:td>Encapsulates a Technique</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtechniquefilter.webxml" xlink:title="Qt3DRender::QTechniqueFilter" xrefstyle="class" annotations="Qt3DRender::QTechniqueFilter">Qt3DRender::QTechniqueFilter</db:link>
                  </db:td>
                  <db:td>A QFrameGraphNode used to select QTechniques to use</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtexture1d.webxml" xlink:title="Qt3DRender::QTexture1D" xrefstyle="class" annotations="Qt3DRender::QTexture1D">Qt3DRender::QTexture1D</db:link>
                  </db:td>
                  <db:td>A QAbstractTexture with a Target1D target format</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtexture1darray.webxml" xlink:title="Qt3DRender::QTexture1DArray" xrefstyle="class" annotations="Qt3DRender::QTexture1DArray">Qt3DRender::QTexture1DArray</db:link>
                  </db:td>
                  <db:td>A QAbstractTexture with a Target1DArray target format</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtexture2d.webxml" xlink:title="Qt3DRender::QTexture2D" xrefstyle="class" annotations="Qt3DRender::QTexture2D">Qt3DRender::QTexture2D</db:link>
                  </db:td>
                  <db:td>A QAbstractTexture with a Target2D target format</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtexture2darray.webxml" xlink:title="Qt3DRender::QTexture2DArray" xrefstyle="class" annotations="Qt3DRender::QTexture2DArray">Qt3DRender::QTexture2DArray</db:link>
                  </db:td>
                  <db:td>A QAbstractTexture with a Target2DArray target format</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtexture2dmultisample.webxml" xlink:title="Qt3DRender::QTexture2DMultisample" xrefstyle="class" annotations="Qt3DRender::QTexture2DMultisample">Qt3DRender::QTexture2DMultisample</db:link>
                  </db:td>
                  <db:td>A QAbstractTexture with a Target2DMultisample target format</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtexture2dmultisamplearray.webxml" xlink:title="Qt3DRender::QTexture2DMultisampleArray" xrefstyle="class" annotations="Qt3DRender::QTexture2DMultisampleArray">Qt3DRender::QTexture2DMultisampleArray</db:link>
                  </db:td>
                  <db:td>A QAbstractTexture with a Target2DMultisampleArray target format</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtexture3d.webxml" xlink:title="Qt3DRender::QTexture3D" xrefstyle="class" annotations="Qt3DRender::QTexture3D">Qt3DRender::QTexture3D</db:link>
                  </db:td>
                  <db:td>A QAbstractTexture with a Target3D target format</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtexturebuffer.webxml" xlink:title="Qt3DRender::QTextureBuffer" xrefstyle="class" annotations="Qt3DRender::QTextureBuffer">Qt3DRender::QTextureBuffer</db:link>
                  </db:td>
                  <db:td>A QAbstractTexture with a TargetBuffer target format</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtexturecubemap.webxml" xlink:title="Qt3DRender::QTextureCubeMap" xrefstyle="class" annotations="Qt3DRender::QTextureCubeMap">Qt3DRender::QTextureCubeMap</db:link>
                  </db:td>
                  <db:td>A QAbstractTexture with a TargetCubeMap target format</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtexturecubemaparray.webxml" xlink:title="Qt3DRender::QTextureCubeMapArray" xrefstyle="class" annotations="Qt3DRender::QTextureCubeMapArray">Qt3DRender::QTextureCubeMapArray</db:link>
                  </db:td>
                  <db:td>A QAbstractTexture with a TargetCubeMapArray target format</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtexturedata.webxml" xlink:title="Qt3DRender::QTextureData" xrefstyle="class" annotations="Qt3DRender::QTextureData">Qt3DRender::QTextureData</db:link>
                  </db:td>
                  <db:td>Stores texture information such as the target, height, width, depth, layers, wrap, and if mipmaps are enabled</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtexturegenerator.webxml" xlink:title="Qt3DRender::QTextureGenerator" xrefstyle="class" annotations="Qt3DRender::QTextureGenerator">Qt3DRender::QTextureGenerator</db:link>
                  </db:td>
                  <db:td>Provides the image data for a texture</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtextureimage.webxml" xlink:title="Qt3DRender::QTextureImage" xrefstyle="class" annotations="Qt3DRender::QTextureImage">Qt3DRender::QTextureImage</db:link>
                  </db:td>
                  <db:td>Encapsulates the necessary information to create an OpenGL texture image from an image source</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtextureimagedata.webxml" xlink:title="Qt3DRender::QTextureImageData" xrefstyle="class" annotations="Qt3DRender::QTextureImageData">Qt3DRender::QTextureImageData</db:link>
                  </db:td>
                  <db:td>Stores data representing a texture</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtextureimagedatagenerator.webxml" xlink:title="Qt3DRender::QTextureImageDataGenerator" xrefstyle="class" annotations="Qt3DRender::QTextureImageDataGenerator">Qt3DRender::QTextureImageDataGenerator</db:link>
                  </db:td>
                  <db:td>Provides texture image data for QAbstractTextureImage</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtextureloader.webxml" xlink:title="Qt3DRender::QTextureLoader" xrefstyle="class" annotations="Qt3DRender::QTextureLoader">Qt3DRender::QTextureLoader</db:link>
                  </db:td>
                  <db:td>Handles the texture loading and setting the texture's properties</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtexturerectangle.webxml" xlink:title="Qt3DRender::QTextureRectangle" xrefstyle="class" annotations="Qt3DRender::QTextureRectangle">Qt3DRender::QTextureRectangle</db:link>
                  </db:td>
                  <db:td>A QAbstractTexture with a TargetRectangle target format</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qtexturewrapmode.webxml" xlink:title="Qt3DRender::QTextureWrapMode" xrefstyle="class" annotations="Qt3DRender::QTextureWrapMode">Qt3DRender::QTextureWrapMode</db:link>
                  </db:td>
                  <db:td>Defines the wrap mode a Qt3DRender::QAbstractTexture should apply to a texture</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::qviewport.webxml" xlink:title="Qt3DRender::QViewport" xrefstyle="class" annotations="Qt3DRender::QViewport">Qt3DRender::QViewport</db:link>
                  </db:td>
                  <db:td>A viewport on the Qt3D Scene</db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
   </db:section>
   <db:section xml:id="qt-3d-extras-module">
      <db:title>Qt 3D Extras Module</db:title>
      <db:section>
         <db:title>t</db:title>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qabstractcameracontroller.webxml" xlink:title="Qt3DExtras::QAbstractCameraController" xrefstyle="class" annotations="Qt3DExtras::QAbstractCameraController">Qt3DExtras::QAbstractCameraController</db:link>
                  </db:td>
                  <db:td>Basic functionality for camera controllers</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qconegeometry.webxml" xlink:title="Qt3DExtras::QConeGeometry" xrefstyle="class" annotations="Qt3DExtras::QConeGeometry">Qt3DExtras::QConeGeometry</db:link>
                  </db:td>
                  <db:td>Allows creation of a cone in 3D space. * * * * * The QConeGeometry class is most commonly used internally by the QConeMesh * but can also be used in custom Qt3DRender::QGeometryRenderer subclasses. The class * allows for creation of both a cone and a truncated cone</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qconemesh.webxml" xlink:title="Qt3DExtras::QConeMesh" xrefstyle="class" annotations="Qt3DExtras::QConeMesh">Qt3DExtras::QConeMesh</db:link>
                  </db:td>
                  <db:td>A conical mesh</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qcuboidgeometry.webxml" xlink:title="Qt3DExtras::QCuboidGeometry" xrefstyle="class" annotations="Qt3DExtras::QCuboidGeometry">Qt3DExtras::QCuboidGeometry</db:link>
                  </db:td>
                  <db:td>Allows creation of a cuboid in 3D space. * * * * * The QCuboidGeometry class is most commonly used internally by the QCuboidMesh * but can also be used in custom Qt3DRender::QGeometryRenderer subclasses</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qcuboidmesh.webxml" xlink:title="Qt3DExtras::QCuboidMesh" xrefstyle="class" annotations="Qt3DExtras::QCuboidMesh">Qt3DExtras::QCuboidMesh</db:link>
                  </db:td>
                  <db:td>A cuboid mesh</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qcylindergeometry.webxml" xlink:title="Qt3DExtras::QCylinderGeometry" xrefstyle="class" annotations="Qt3DExtras::QCylinderGeometry">Qt3DExtras::QCylinderGeometry</db:link>
                  </db:td>
                  <db:td>Allows creation of a cylinder in 3D space. * * * * * The QCylinderGeometry class is most commonly used internally by the QCylinderMesh * but can also be used in custom Qt3DRender::QGeometryRenderer subclasses</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qcylindermesh.webxml" xlink:title="Qt3DExtras::QCylinderMesh" xrefstyle="class" annotations="Qt3DExtras::QCylinderMesh">Qt3DExtras::QCylinderMesh</db:link>
                  </db:td>
                  <db:td>A cylindrical mesh</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qdiffusemapmaterial.webxml" xlink:title="Qt3DExtras::QDiffuseMapMaterial" xrefstyle="class" annotations="Qt3DExtras::QDiffuseMapMaterial">Qt3DExtras::QDiffuseMapMaterial</db:link>
                  </db:td>
                  <db:td>Default implementation of the phong lighting effect where the diffuse light component is read from a texture map</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qdiffusespecularmapmaterial.webxml" xlink:title="Qt3DExtras::QDiffuseSpecularMapMaterial" xrefstyle="class" annotations="Qt3DExtras::QDiffuseSpecularMapMaterial">Qt3DExtras::QDiffuseSpecularMapMaterial</db:link>
                  </db:td>
                  <db:td>Default implementation of the phong lighting effect where the diffuse and specular light components are read from texture maps</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qdiffusespecularmaterial.webxml" xlink:title="Qt3DExtras::QDiffuseSpecularMaterial" xrefstyle="class" annotations="Qt3DExtras::QDiffuseSpecularMaterial">Qt3DExtras::QDiffuseSpecularMaterial</db:link>
                  </db:td>
                  <db:td>Default implementation of the phong lighting effect</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qextrudedtextgeometry.webxml" xlink:title="Qt3DExtras::QExtrudedTextGeometry" xrefstyle="class" annotations="Qt3DExtras::QExtrudedTextGeometry">Qt3DExtras::QExtrudedTextGeometry</db:link>
                  </db:td>
                  <db:td>Allows creation of a 3D extruded text in 3D space</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qextrudedtextmesh.webxml" xlink:title="Qt3DExtras::QExtrudedTextMesh" xrefstyle="class" annotations="Qt3DExtras::QExtrudedTextMesh">Qt3DExtras::QExtrudedTextMesh</db:link>
                  </db:td>
                  <db:td>A 3D extruded Text mesh</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qfirstpersoncameracontroller.webxml" xlink:title="Qt3DExtras::QFirstPersonCameraController" xrefstyle="class" annotations="Qt3DExtras::QFirstPersonCameraController">Qt3DExtras::QFirstPersonCameraController</db:link>
                  </db:td>
                  <db:td>Allows controlling the scene camera from the first person perspective</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qforwardrenderer.webxml" xlink:title="Qt3DExtras::QForwardRenderer" xrefstyle="class" annotations="Qt3DExtras::QForwardRenderer">Qt3DExtras::QForwardRenderer</db:link>
                  </db:td>
                  <db:td>Default FrameGraph implementation of a forward renderer</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qgoochmaterial.webxml" xlink:title="Qt3DExtras::QGoochMaterial" xrefstyle="class" annotations="Qt3DExtras::QGoochMaterial">Qt3DExtras::QGoochMaterial</db:link>
                  </db:td>
                  <db:td>Material that implements the Gooch shading model, popular in CAD and CAM applications</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qmetalroughmaterial.webxml" xlink:title="Qt3DExtras::QMetalRoughMaterial" xrefstyle="class" annotations="Qt3DExtras::QMetalRoughMaterial">Qt3DExtras::QMetalRoughMaterial</db:link>
                  </db:td>
                  <db:td>Default implementation of PBR lighting</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qmorphphongmaterial.webxml" xlink:title="Qt3DExtras::QMorphPhongMaterial" xrefstyle="class" annotations="Qt3DExtras::QMorphPhongMaterial">Qt3DExtras::QMorphPhongMaterial</db:link>
                  </db:td>
                  <db:td>Default implementation of the phong lighting effect</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qnormaldiffusemapalphamaterial.webxml" xlink:title="Qt3DExtras::QNormalDiffuseMapAlphaMaterial" xrefstyle="class" annotations="Qt3DExtras::QNormalDiffuseMapAlphaMaterial">Qt3DExtras::QNormalDiffuseMapAlphaMaterial</db:link>
                  </db:td>
                  <db:td>Specialization of QNormalDiffuseMapMaterial with alpha coverage and a depth test performed in the rendering pass</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qnormaldiffusemapmaterial.webxml" xlink:title="Qt3DExtras::QNormalDiffuseMapMaterial" xrefstyle="class" annotations="Qt3DExtras::QNormalDiffuseMapMaterial">Qt3DExtras::QNormalDiffuseMapMaterial</db:link>
                  </db:td>
                  <db:td>Default implementation of the phong lighting and bump effect where the diffuse light component is read from a texture map and the normals of the mesh being rendered from a normal texture map</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qnormaldiffusespecularmapmaterial.webxml" xlink:title="Qt3DExtras::QNormalDiffuseSpecularMapMaterial" xrefstyle="class" annotations="Qt3DExtras::QNormalDiffuseSpecularMapMaterial">Qt3DExtras::QNormalDiffuseSpecularMapMaterial</db:link>
                  </db:td>
                  <db:td>Default implementation of the phong lighting and bump effect where the diffuse and specular light components are read from texture maps and the normals of the mesh being rendered from a normal texture map</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qorbitcameracontroller.webxml" xlink:title="Qt3DExtras::QOrbitCameraController" xrefstyle="class" annotations="Qt3DExtras::QOrbitCameraController">Qt3DExtras::QOrbitCameraController</db:link>
                  </db:td>
                  <db:td>Allows controlling the scene camera along orbital path</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qpervertexcolormaterial.webxml" xlink:title="Qt3DExtras::QPerVertexColorMaterial" xrefstyle="class" annotations="Qt3DExtras::QPerVertexColorMaterial">Qt3DExtras::QPerVertexColorMaterial</db:link>
                  </db:td>
                  <db:td>Default implementation for rendering the color properties set for each vertex</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qphongalphamaterial.webxml" xlink:title="Qt3DExtras::QPhongAlphaMaterial" xrefstyle="class" annotations="Qt3DExtras::QPhongAlphaMaterial">Qt3DExtras::QPhongAlphaMaterial</db:link>
                  </db:td>
                  <db:td>Default implementation of the phong lighting effect with alpha</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qphongmaterial.webxml" xlink:title="Qt3DExtras::QPhongMaterial" xrefstyle="class" annotations="Qt3DExtras::QPhongMaterial">Qt3DExtras::QPhongMaterial</db:link>
                  </db:td>
                  <db:td>Default implementation of the phong lighting effect</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qplanegeometry.webxml" xlink:title="Qt3DExtras::QPlaneGeometry" xrefstyle="class" annotations="Qt3DExtras::QPlaneGeometry">Qt3DExtras::QPlaneGeometry</db:link>
                  </db:td>
                  <db:td>Allows creation of a plane in 3D space. * * * * The QPlaneGeometry class is most commonly used internally by the QPlaneMesh * but can also be used in custom Qt3DRender::QGeometryRenderer subclasses</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qplanemesh.webxml" xlink:title="Qt3DExtras::QPlaneMesh" xrefstyle="class" annotations="Qt3DExtras::QPlaneMesh">Qt3DExtras::QPlaneMesh</db:link>
                  </db:td>
                  <db:td>A square planar mesh</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qskyboxentity.webxml" xlink:title="Qt3DExtras::QSkyboxEntity" xrefstyle="class" annotations="Qt3DExtras::QSkyboxEntity">Qt3DExtras::QSkyboxEntity</db:link>
                  </db:td>
                  <db:td>Qt3DExtras::QSkyboxEntity is a convenience Qt3DCore::QEntity subclass that can be used to insert a skybox in a 3D scene</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qspheregeometry.webxml" xlink:title="Qt3DExtras::QSphereGeometry" xrefstyle="class" annotations="Qt3DExtras::QSphereGeometry">Qt3DExtras::QSphereGeometry</db:link>
                  </db:td>
                  <db:td>Allows creation of a sphere in 3D space. * * * * * The QSphereGeometry class is most commonly used internally by the QSphereMesh * but can also be used in custom Qt3DRender::QGeometryRenderer subclasses</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qspheremesh.webxml" xlink:title="Qt3DExtras::QSphereMesh" xrefstyle="class" annotations="Qt3DExtras::QSphereMesh">Qt3DExtras::QSphereMesh</db:link>
                  </db:td>
                  <db:td>A spherical mesh</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qtexturematerial.webxml" xlink:title="Qt3DExtras::QTextureMaterial" xrefstyle="class" annotations="Qt3DExtras::QTextureMaterial">Qt3DExtras::QTextureMaterial</db:link>
                  </db:td>
                  <db:td>Default implementation of a simple unlit texture material</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qtexturedmetalroughmaterial.webxml" xlink:title="Qt3DExtras::QTexturedMetalRoughMaterial" xrefstyle="class" annotations="Qt3DExtras::QTexturedMetalRoughMaterial">Qt3DExtras::QTexturedMetalRoughMaterial</db:link>
                  </db:td>
                  <db:td>This class is deprecated; use QMetalRoughMaterial instead</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qtorusgeometry.webxml" xlink:title="Qt3DExtras::QTorusGeometry" xrefstyle="class" annotations="Qt3DExtras::QTorusGeometry">Qt3DExtras::QTorusGeometry</db:link>
                  </db:td>
                  <db:td>Allows creation of a torus in 3D space. * * * * * The QTorusGeometry class is most commonly used internally by the QTorusMesh * but can also be used in custom Qt3DRender::QGeometryRenderer subclasses</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3dextras::qtorusmesh.webxml" xlink:title="Qt3DExtras::QTorusMesh" xrefstyle="class" annotations="Qt3DExtras::QTorusMesh">Qt3DExtras::QTorusMesh</db:link>
                  </db:td>
                  <db:td>A toroidal mesh</db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
   </db:section>
   <db:section xml:id="qt-3d-animation-module">
      <db:title>Qt 3D Animation Module</db:title>
      <db:section>
         <db:title>t</db:title>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qabstractanimation.webxml" xlink:title="Qt3DAnimation::QAbstractAnimation" xrefstyle="class" annotations="Qt3DAnimation::QAbstractAnimation">Qt3DAnimation::QAbstractAnimation</db:link>
                  </db:td>
                  <db:td>An abstract base class for Qt3D animations</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qabstractanimationclip.webxml" xlink:title="Qt3DAnimation::QAbstractAnimationClip" xrefstyle="class" annotations="Qt3DAnimation::QAbstractAnimationClip">Qt3DAnimation::QAbstractAnimationClip</db:link>
                  </db:td>
                  <db:td>The base class for types providing key frame animation data</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qabstractclipanimator.webxml" xlink:title="Qt3DAnimation::QAbstractClipAnimator" xrefstyle="class" annotations="Qt3DAnimation::QAbstractClipAnimator">Qt3DAnimation::QAbstractClipAnimator</db:link>
                  </db:td>
                  <db:td>The base class for types providing animation playback capabilities</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qabstractclipblendnode.webxml" xlink:title="Qt3DAnimation::QAbstractClipBlendNode" xrefstyle="class" annotations="Qt3DAnimation::QAbstractClipBlendNode">Qt3DAnimation::QAbstractClipBlendNode</db:link>
                  </db:td>
                  <db:td>The base class for types used to construct animation blend trees</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qadditiveclipblend.webxml" xlink:title="Qt3DAnimation::QAdditiveClipBlend" xrefstyle="class" annotations="Qt3DAnimation::QAdditiveClipBlend">Qt3DAnimation::QAdditiveClipBlend</db:link>
                  </db:td>
                  <db:td>Performs an additive blend of two animation clips based on an additive factor</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qanimationaspect.webxml" xlink:title="Qt3DAnimation::QAnimationAspect" xrefstyle="class" annotations="Qt3DAnimation::QAnimationAspect">Qt3DAnimation::QAnimationAspect</db:link>
                  </db:td>
                  <db:td>Provides key-frame animation capabilities to Qt 3D</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qanimationclip.webxml" xlink:title="Qt3DAnimation::QAnimationClip" xrefstyle="class" annotations="Qt3DAnimation::QAnimationClip">Qt3DAnimation::QAnimationClip</db:link>
                  </db:td>
                  <db:td>Specifies key frame animation data</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qanimationclipdata.webxml" xlink:title="Qt3DAnimation::QAnimationClipData" xrefstyle="class" annotations="Qt3DAnimation::QAnimationClipData">Qt3DAnimation::QAnimationClipData</db:link>
                  </db:td>
                  <db:td>Class containing the animation data</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qanimationcliploader.webxml" xlink:title="Qt3DAnimation::QAnimationClipLoader" xrefstyle="class" annotations="Qt3DAnimation::QAnimationClipLoader">Qt3DAnimation::QAnimationClipLoader</db:link>
                  </db:td>
                  <db:td>Enables loading key frame animation data from a file</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qanimationcontroller.webxml" xlink:title="Qt3DAnimation::QAnimationController" xrefstyle="class" annotations="Qt3DAnimation::QAnimationController">Qt3DAnimation::QAnimationController</db:link>
                  </db:td>
                  <db:td>A controller class for animations</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qanimationgroup.webxml" xlink:title="Qt3DAnimation::QAnimationGroup" xrefstyle="class" annotations="Qt3DAnimation::QAnimationGroup">Qt3DAnimation::QAnimationGroup</db:link>
                  </db:td>
                  <db:td>A class grouping animations together</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qblendedclipanimator.webxml" xlink:title="Qt3DAnimation::QBlendedClipAnimator" xrefstyle="class" annotations="Qt3DAnimation::QBlendedClipAnimator">Qt3DAnimation::QBlendedClipAnimator</db:link>
                  </db:td>
                  <db:td>Component providing animation playback capabilities of a tree of blend nodes</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qcallbackmapping.webxml" xlink:title="Qt3DAnimation::QCallbackMapping" xrefstyle="class" annotations="Qt3DAnimation::QCallbackMapping">Qt3DAnimation::QCallbackMapping</db:link>
                  </db:td>
                  <db:td>Allows to map the channels within the clip onto an invocation of a callback object</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qchannelmapper.webxml" xlink:title="Qt3DAnimation::QChannelMapper" xrefstyle="class" annotations="Qt3DAnimation::QChannelMapper">Qt3DAnimation::QChannelMapper</db:link>
                  </db:td>
                  <db:td>Allows to map the channels within the clip onto properties of objects in the application</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qchannelmapping.webxml" xlink:title="Qt3DAnimation::QChannelMapping" xrefstyle="class" annotations="Qt3DAnimation::QChannelMapping">Qt3DAnimation::QChannelMapping</db:link>
                  </db:td>
                  <db:td>Allows to map the channels within the clip onto properties of objects in the application</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qclipanimator.webxml" xlink:title="Qt3DAnimation::QClipAnimator" xrefstyle="class" annotations="Qt3DAnimation::QClipAnimator">Qt3DAnimation::QClipAnimator</db:link>
                  </db:td>
                  <db:td>Component providing simple animation playback capabilities</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qclipblendnodecreatedchangebase.webxml" xlink:title="Qt3DAnimation::QClipBlendNodeCreatedChangeBase" xrefstyle="class" annotations="Qt3DAnimation::QClipBlendNodeCreatedChangeBase">Qt3DAnimation::QClipBlendNodeCreatedChangeBase</db:link>
                  </db:td>
                  <db:td>Base class for changes in QClipBlendNode</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qclipblendvalue.webxml" xlink:title="Qt3DAnimation::QClipBlendValue" xrefstyle="class" annotations="Qt3DAnimation::QClipBlendValue">Qt3DAnimation::QClipBlendValue</db:link>
                  </db:td>
                  <db:td>Class used for including a clip in a blend tree</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qkeyframe.webxml" xlink:title="Qt3DAnimation::QKeyFrame" xrefstyle="class" annotations="Qt3DAnimation::QKeyFrame">Qt3DAnimation::QKeyFrame</db:link>
                  </db:td>
                  <db:td>A base class for handling keyframes</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qkeyframeanimation.webxml" xlink:title="Qt3DAnimation::QKeyframeAnimation" xrefstyle="class" annotations="Qt3DAnimation::QKeyframeAnimation">Qt3DAnimation::QKeyframeAnimation</db:link>
                  </db:td>
                  <db:td>A class implementing simple keyframe animation to a QTransform</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qlerpclipblend.webxml" xlink:title="Qt3DAnimation::QLerpClipBlend" xrefstyle="class" annotations="Qt3DAnimation::QLerpClipBlend">Qt3DAnimation::QLerpClipBlend</db:link>
                  </db:td>
                  <db:td>Performs a linear interpolation of two animation clips based on a normalized factor</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qmorphtarget.webxml" xlink:title="Qt3DAnimation::QMorphTarget" xrefstyle="class" annotations="Qt3DAnimation::QMorphTarget">Qt3DAnimation::QMorphTarget</db:link>
                  </db:td>
                  <db:td>A class providing morph targets to blend-shape animation</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qmorphinganimation.webxml" xlink:title="Qt3DAnimation::QMorphingAnimation" xrefstyle="class" annotations="Qt3DAnimation::QMorphingAnimation">Qt3DAnimation::QMorphingAnimation</db:link>
                  </db:td>
                  <db:td>A class implementing blend-shape morphing animation</db:td>
               </db:tr>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3danimation::qvertexblendanimation.webxml" xlink:title="Qt3DAnimation::QVertexBlendAnimation" xrefstyle="class" annotations="Qt3DAnimation::QVertexBlendAnimation">Qt3DAnimation::QVertexBlendAnimation</db:link>
                  </db:td>
                  <db:td>A class implementing vertex-blend morphing animation</db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
   </db:section>
   <db:section xml:id="qt-3d-scene2d-module">
      <db:title>Qt 3D Scene2D Module</db:title>
      <db:section>
         <db:title>t</db:title>
         <db:informaltable>
            <db:tbody>
               <db:tr>
                  <db:td>
                     <db:link xlink:href="qt3drender::quick::qscene2d.webxml" xlink:title="Qt3DRender::Quick::QScene2D" xrefstyle="class" annotations="Qt3DRender::Quick::QScene2D">Qt3DRender::Quick::QScene2D</db:link>
                  </db:td>
                  <db:td>This class enables rendering qml into a texture, which then can be used as a part of 3D scene</db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
      </db:section>
   </db:section>
</db:article>
