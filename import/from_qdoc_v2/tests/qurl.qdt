<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.2"
            xml:lang="en">
   <db:info>
      <db:title>QUrl</db:title>
      <db:abstract>
         <db:para>Convenient interface for working with URLs</db:para>
      </db:abstract>
      <db:pubdate>2018-09-28+02:00</db:pubdate>
      <db:date>2018-09-28+02:00</db:date>
      <db:productname>Qt</db:productname>
      <db:productnumber>1.2</db:productnumber>
   </db:info>
   <db:classsynopsis>
      <db:ooclass>
         <db:classname>QUrl</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="threadsafety">reentrant</db:classsynopsisinfo>
      <db:classsynopsisinfo role="module">QtCore</db:classsynopsisinfo>
      <db:classsynopsisinfo role="headers">#include &lt;qurl.h&gt;</db:classsynopsisinfo>
      <db:classsynopsisinfo role="group">io</db:classsynopsisinfo>
      <db:classsynopsisinfo role="group">network</db:classsynopsisinfo>
      <db:classsynopsisinfo role="group">shared</db:classsynopsisinfo>
   </db:classsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> class provides a convenient interface for working with URLs.</db:para>
      <db:para>It can parse and construct URLs in both encoded and unencoded form. <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> also has support for internationalized domain names (IDNs).</db:para>
      <db:para>The most common way to use <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> is to initialize it via the constructor by passing a <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>. Otherwise, <db:code><db:link xlink:href="qurl.html#setUrl" xrefstyle="function" annotations="setUrl()">setUrl()</db:link></db:code> can also be used.</db:para>
      <db:para>URLs can be represented in two forms: encoded or unencoded. The unencoded representation is suitable for showing to users, but the encoded representation is typically what you would send to a web server. For example, the unencoded URL "http://b√ºhler.example.com/List of applicants.xml" would be sent to the server as "http://xn--bhler-kva.example.com/List%20of%20applicants.xml".</db:para>
      <db:para>A URL can also be constructed piece by piece by calling <db:code><db:link xlink:href="qurl.html#setScheme" xrefstyle="function" annotations="setScheme()">setScheme()</db:link></db:code>, <db:code><db:link xlink:href="qurl.html#setUserName" xrefstyle="function" annotations="setUserName()">setUserName()</db:link></db:code>, <db:code><db:link xlink:href="qurl.html#setPassword" xrefstyle="function" annotations="setPassword()">setPassword()</db:link></db:code>, <db:code><db:link xlink:href="qurl.html#setHost" xrefstyle="function" annotations="setHost()">setHost()</db:link></db:code>, <db:code><db:link xlink:href="qurl.html#setPort" xrefstyle="function" annotations="setPort()">setPort()</db:link></db:code>, <db:code><db:link xlink:href="qurl.html#setPath" xrefstyle="function" annotations="setPath()">setPath()</db:link></db:code>, <db:code><db:link xlink:href="qurl.html#setQuery" xrefstyle="function" annotations="setQuery()">setQuery()</db:link></db:code> and <db:code><db:link xlink:href="qurl.html#setFragment" xrefstyle="function" annotations="setFragment()">setFragment()</db:link></db:code>. Some convenience functions are also available: <db:code><db:link xlink:href="qurl.html#setAuthority" xrefstyle="function" annotations="setAuthority()">setAuthority()</db:link></db:code> sets the user name, password, host and port. <db:code><db:link xlink:href="qurl.html#setUserInfo" xrefstyle="function" annotations="setUserInfo()">setUserInfo()</db:link></db:code> sets the user name and password at once.</db:para>
      <db:para>Call <db:code><db:link xlink:href="qurl.html#isValid" xrefstyle="function" annotations="isValid()">isValid()</db:link></db:code> to check if the URL is valid. This can be done at any point during the constructing of a URL. If <db:code><db:link xlink:href="qurl.html#isValid" xrefstyle="function" annotations="isValid()">isValid()</db:link></db:code> returns <db:code>false</db:code>, you should <db:code><db:link xlink:href="qurl.html#clear" xrefstyle="function" annotations="clear()">clear()</db:link></db:code> the URL before proceeding, or start over by parsing a new URL with <db:code><db:link xlink:href="qurl.html#setUrl" xrefstyle="function" annotations="setUrl()">setUrl()</db:link></db:code>.</db:para>
      <db:para>Constructing a query is particularly convenient through the use of the <db:code><db:link xlink:href="qurlquery.html" xrefstyle="class" annotations="QUrlQuery">QUrlQuery</db:link></db:code> class and its methods <db:code><db:link xlink:href="qurlquery.html#setQueryItems" xrefstyle="function" annotations="QUrlQuery::setQueryItems()">QUrlQuery::setQueryItems()</db:link></db:code>, <db:code><db:link xlink:href="qurlquery.html#addQueryItem" xrefstyle="function" annotations="QUrlQuery::addQueryItem()">QUrlQuery::addQueryItem()</db:link></db:code> and <db:code><db:link xlink:href="qurlquery.html#removeQueryItem" xrefstyle="function" annotations="QUrlQuery::removeQueryItem()">QUrlQuery::removeQueryItem()</db:link></db:code>. Use <db:code><db:link xlink:href="qurlquery.html#setQueryDelimiters" xrefstyle="function" annotations="QUrlQuery::setQueryDelimiters()">QUrlQuery::setQueryDelimiters()</db:link></db:code> to customize the delimiters used for generating the query string.</db:para>
      <db:para>For the convenience of generating encoded URL strings or query strings, there are two static functions called <db:code><db:link xlink:href="qurl.html#fromPercentEncoding" xrefstyle="function" annotations="fromPercentEncoding()">fromPercentEncoding()</db:link></db:code> and <db:code><db:link xlink:href="qurl.html#toPercentEncoding" xrefstyle="function" annotations="toPercentEncoding()">toPercentEncoding()</db:link></db:code> which deal with percent encoding and decoding of <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> objects.</db:para>
      <db:para>
         <db:code><db:link xlink:href="qurl.html#fromLocalFile" xrefstyle="function" annotations="fromLocalFile()">fromLocalFile()</db:link></db:code> constructs a <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> by parsing a local file path. <db:code><db:link xlink:href="qurl.html#toLocalFile" xrefstyle="function" annotations="toLocalFile()">toLocalFile()</db:link></db:code> converts a URL to a local file path.</db:para>
      <db:para>The human readable representation of the URL is fetched with <db:code><db:link xlink:href="qurl.html#toString" xrefstyle="function" annotations="toString()">toString()</db:link></db:code>. This representation is appropriate for displaying a URL to a user in unencoded form. The encoded form however, as returned by <db:code><db:link xlink:href="qurl.html#toEncoded" xrefstyle="function" annotations="toEncoded()">toEncoded()</db:link></db:code>, is for internal use, passing to web servers, mail clients and so on. Both forms are technically correct and represent the same URL unambiguously -- in fact, passing either form to <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code>'s constructor or to <db:code><db:link xlink:href="qurl.html#setUrl" xrefstyle="function" annotations="setUrl()">setUrl()</db:link></db:code> will yield the same <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> object.</db:para>
      <db:para>
         <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> conforms to the URI specification from <db:link xlink:href="http://www.rfc-editor.org/rfc/rfc3986.txt" xrefstyle="page" annotations="RFC 3986">RFC 3986</db:link> (Uniform Resource Identifier: Generic Syntax), and includes scheme extensions from <db:link xlink:href="http://www.rfc-editor.org/rfc/rfc1738.txt" xrefstyle="page" annotations="RFC 1738">RFC 1738</db:link> (Uniform Resource Locators). Case folding rules in <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> conform to <db:link xlink:href="http://www.rfc-editor.org/rfc/rfc3491.txt" xrefstyle="page" annotations="RFC 3491">RFC 3491</db:link> (Nameprep: A Stringprep Profile for Internationalized Domain Names (IDN)). It is also compatible with the file URI specification from freedesktop.org, provided that the locale encodes file names using UTF-8 (required by IDN).</db:para>
      <db:section xml:id="relative-urls-vs-relative-paths">
         <db:title>Relative URLs vs Relative Paths</db:title>
         <db:para>Calling <db:code><db:link xlink:href="qurl.html#isRelative" xrefstyle="function" annotations="isRelative()">isRelative()</db:link></db:code> will return whether or not the URL is relative. A relative URL has no <db:code><db:link xlink:href="qurl.html#scheme" xrefstyle="function" annotations="scheme">scheme</db:link></db:code>. For example:</db:para>
         <db:programlisting language="other">qDebug() &lt;&lt; QUrl("main.qml").isRelative();          // true: no scheme
qDebug() &lt;&lt; QUrl("qml/main.qml").isRelative();      // true: no scheme
qDebug() &lt;&lt; QUrl("file:main.qml").isRelative();     // false: has "file" scheme
qDebug() &lt;&lt; QUrl("file:qml/main.qml").isRelative(); // false: has "file" scheme</db:programlisting>
         <db:para>Notice that a URL can be absolute while containing a relative path, and vice versa:</db:para>
         <db:programlisting language="other">// Absolute URL, relative path
QUrl url("file:file.txt");
qDebug() &lt;&lt; url.isRelative();                 // false: has "file" scheme
qDebug() &lt;&lt; QDir::isAbsolutePath(url.path()); // false: relative path

// Relative URL, absolute path
url = QUrl("/home/user/file.txt");
qDebug() &lt;&lt; url.isRelative();                 // true: has no scheme
qDebug() &lt;&lt; QDir::isAbsolutePath(url.path()); // true: absolute path</db:programlisting>
         <db:para>A relative URL can be resolved by passing it as an argument to <db:code><db:link xlink:href="qurl.html#resolved" xrefstyle="function" annotations="resolved()">resolved()</db:link></db:code>, which returns an absolute URL. <db:code><db:link xlink:href="qurl.html#isParentOf" xrefstyle="function" annotations="isParentOf()">isParentOf()</db:link></db:code> is used for determining whether one URL is a parent of another.</db:para>
      </db:section>
      <db:section xml:id="error-checking">
         <db:title>Error checking</db:title>
         <db:para>
            <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> is capable of detecting many errors in URLs while parsing it or when components of the URL are set with individual setter methods (like <db:code><db:link xlink:href="qurl.html#setScheme" xrefstyle="function" annotations="setScheme()">setScheme()</db:link></db:code>, <db:code><db:link xlink:href="qurl.html#setHost" xrefstyle="function" annotations="setHost()">setHost()</db:link></db:code> or <db:code><db:link xlink:href="qurl.html#setPath" xrefstyle="function" annotations="setPath()">setPath()</db:link></db:code>). If the parsing or setter function is successful, any previously recorded error conditions will be discarded.</db:para>
         <db:para>By default, <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> setter methods operate in <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="QUrl::TolerantMode">QUrl::TolerantMode</db:link></db:code>, which means they accept some common mistakes and mis-representation of data. An alternate method of parsing is <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="QUrl::StrictMode">QUrl::StrictMode</db:link></db:code>, which applies further checks. See <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="QUrl::ParsingMode">QUrl::ParsingMode</db:link></db:code> for a description of the difference of the parsing modes.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> only checks for conformance with the URL specification. It does not try to verify that high-level protocol URLs are in the format they are expected to be by handlers elsewhere. For example, the following URIs are all considered valid by <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code>, even if they do not make sense when used:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>"http:/filename.html"</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>"mailto://example.com"</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:para>When the parser encounters an error, it signals the event by making <db:code><db:link xlink:href="qurl.html#isValid" xrefstyle="function" annotations="isValid()">isValid()</db:link></db:code> return false and <db:code><db:link xlink:href="qurl.html#toString" xrefstyle="function" annotations="toString()">toString()</db:link></db:code> / <db:code><db:link xlink:href="qurl.html#toEncoded" xrefstyle="function" annotations="toEncoded()">toEncoded()</db:link></db:code> return an empty string. If it is necessary to show the user the reason why the URL failed to parse, the error condition can be obtained from <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> by calling <db:code><db:link xlink:href="qurl.html#errorString" xrefstyle="function" annotations="errorString()">errorString()</db:link></db:code>. Note that this message is highly technical and may not make sense to end-users.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> is capable of recording only one error condition. If more than one error is found, it is undefined which error is reported.</db:para>
      </db:section>
      <db:section xml:id="character-conversions">
         <db:title>Character Conversions</db:title>
         <db:para>Follow these rules to avoid erroneous character conversion when dealing with URLs and strings:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>When creating a <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> to contain a URL from a <db:code><db:link xlink:href="qbytearray.html" xrefstyle="class" annotations="QByteArray">QByteArray</db:link></db:code> or a char*, always use <db:code><db:link xlink:href="qstring.html#fromUtf8" xrefstyle="function" annotations="QString::fromUtf8()">QString::fromUtf8()</db:link></db:code>.</db:para>
            </db:listitem>
         </db:itemizedlist>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Member Types Documentation</db:title>
      <db:section>
         <db:title>enum QUrl::ComponentFormattingOption, flags QUrl::ComponentFormattingOptions</db:title>
         <db:enumsynopsis>
            <db:enumname>QUrl::ComponentFormattingOption</db:enumname>
            <db:enumsynopsisinfo role="since">5.0</db:enumsynopsisinfo>
            <db:enumitem>
               <db:enumidentifier>PrettyDecoded</db:enumidentifier>
               <db:enumvalue>0x000000</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>EncodeSpaces</db:enumidentifier>
               <db:enumvalue>0x100000</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>EncodeUnicode</db:enumidentifier>
               <db:enumvalue>0x200000</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>EncodeDelimiters</db:enumidentifier>
               <db:enumvalue>0x400000 | 0x800000</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>EncodeReserved</db:enumidentifier>
               <db:enumvalue>0x1000000</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>DecodeReserved</db:enumidentifier>
               <db:enumvalue>0x2000000</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>FullyEncoded</db:enumidentifier>
               <db:enumvalue>EncodeSpaces | EncodeUnicode | EncodeDelimiters | EncodeReserved</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>FullyDecoded</db:enumidentifier>
               <db:enumvalue>FullyEncoded | DecodeReserved | 0x4000000</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>QUrl::ComponentFormattingOptions</db:typedefname>
         </db:typedefsynopsis>
         <db:para>The component formatting options define how the components of an URL will be formatted when written out as text. They can be combined with the options from <db:link xlink:href="qurl.html#UrlFormattingOption-enum" xrefstyle="typedef" annotations="QUrl::FormattingOptions">QUrl::FormattingOptions</db:link> when used in <db:code><db:link xlink:href="qurl.html#toString" xrefstyle="function" annotations="toString()">toString()</db:link></db:code> and <db:code><db:link xlink:href="qurl.html#toEncoded" xrefstyle="function" annotations="toEncoded()">toEncoded()</db:link></db:code>.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QUrl::PrettyDecoded</db:td>
                  <db:td>0x000000</db:td>
                  <db:td>
                     <db:para>The component is returned in a "pretty form", with most percent-encoded characters decoded. The exact behavior of  varies from component to component and may also change from Qt release to Qt release. This is the default.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::EncodeSpaces</db:td>
                  <db:td>0x100000</db:td>
                  <db:td>
                     <db:para>Leave space characters in their encoded form ("%20").</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::EncodeUnicode</db:td>
                  <db:td>0x200000</db:td>
                  <db:td>
                     <db:para>Leave non-US-ASCII characters encoded in their UTF-8 percent-encoded form (e.g., "%C3%A9" for the U+00E9 codepoint, LATIN SMALL LETTER E WITH ACUTE).</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::EncodeDelimiters</db:td>
                  <db:td>0x400000 | 0x800000</db:td>
                  <db:td>
                     <db:para>Leave certain delimiters in their encoded form, as would appear in the URL when the full URL is represented as text. The delimiters are affected by this option change from component to component. This flag has no effect in <db:code><db:link xlink:href="qurl.html#toString" xrefstyle="function" annotations="toString()">toString()</db:link></db:code> or <db:code><db:link xlink:href="qurl.html#toEncoded" xrefstyle="function" annotations="toEncoded()">toEncoded()</db:link></db:code>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::EncodeReserved</db:td>
                  <db:td>0x1000000</db:td>
                  <db:td>
                     <db:para>Leave US-ASCII characters not permitted in the URL by the specification in their encoded form. This is the default on <db:code><db:link xlink:href="qurl.html#toString" xrefstyle="function" annotations="toString()">toString()</db:link></db:code> and <db:code><db:link xlink:href="qurl.html#toEncoded" xrefstyle="function" annotations="toEncoded()">toEncoded()</db:link></db:code>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::DecodeReserved</db:td>
                  <db:td>0x2000000</db:td>
                  <db:td>
                     <db:para>Decode the US-ASCII characters that the URL specification does not allow to appear in the URL. This is the default on the getters of individual components.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::FullyEncoded</db:td>
                  <db:td>EncodeSpaces | EncodeUnicode | EncodeDelimiters | EncodeReserved</db:td>
                  <db:td>
                     <db:para>Leave all characters in their properly-encoded form, as this component would appear as part of a URL. When used with <db:code><db:link xlink:href="qurl.html#toString" xrefstyle="function" annotations="toString()">toString()</db:link></db:code>, this produces a fully-compliant URL in <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> form, exactly equal to the result of <db:code><db:link xlink:href="qurl.html#toEncoded" xrefstyle="function" annotations="toEncoded()">toEncoded()</db:link></db:code>
                     </db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::FullyDecoded</db:td>
                  <db:td>FullyEncoded | DecodeReserved | 0x4000000</db:td>
                  <db:td>
                     <db:para>Attempt to decode as much as possible. For individual components of the URL, this decodes every percent encoding sequence, including control characters (U+0000 to U+001F) and UTF-8 sequences found in percent-encoded form. Use of this mode may cause data loss, see below for more information.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>The values of  and  should not be used together in one call. The behavior is undefined if that happens. They are provided as separate values because the behavior of the "pretty mode" with regards to reserved characters is different on certain components and specially on the full URL.</db:para>
         <db:section xml:id="full-decoding">
            <db:title>Full decoding</db:title>
            <db:para>The  mode is similar to the behavior of the functions returning <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> in Qt 4.x, in that every character represents itself and never has any special meaning. This is true even for the percent character ('%'), which should be interpreted to mean a literal percent, not the beginning of a percent-encoded sequence. The same actual character, in all other decoding modes, is represented by the sequence "%25".</db:para>
            <db:para>Whenever re-applying data obtained with  into a <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code>, care must be taken to use the <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="QUrl::DecodedMode">QUrl::DecodedMode</db:link></db:code> parameter to the setters (like <db:code><db:link xlink:href="qurl.html#setPath" xrefstyle="function" annotations="setPath()">setPath()</db:link></db:code> and <db:code><db:link xlink:href="qurl.html#setUserName" xrefstyle="function" annotations="setUserName()">setUserName()</db:link></db:code>). Failure to do so may cause re-interpretation of the percent character ('%') as the beginning of a percent-encoded sequence.</db:para>
            <db:para>This mode is quite useful when portions of a URL are used in a non-URL context. For example, to extract the username, password or file paths in an FTP client application, the  mode should be used.</db:para>
            <db:para>This mode should be used with care, since there are two conditions that cannot be reliably represented in the returned <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>. They are:</db:para>
            <db:itemizedlist>
               <db:listitem>
                  <db:para>
                     <db:emphasis role="bold">Non-UTF-8 sequences:</db:emphasis> URLs may contain sequences of percent-encoded characters that do not form valid UTF-8 sequences. Since URLs need to be decoded using UTF-8, any decoder failure will result in the <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> containing one or more replacement characters where the sequence existed.</db:para>
               </db:listitem>
               <db:listitem>
                  <db:para>
                     <db:emphasis role="bold">Encoded delimiters:</db:emphasis> URLs are also allowed to make a distinction between a delimiter found in its literal form and its equivalent in percent-encoded form. This is most commonly found in the query, but is permitted in most parts of the URL.</db:para>
               </db:listitem>
            </db:itemizedlist>
            <db:para>The following example illustrates the problem:</db:para>
            <db:programlisting language="other">QUrl original("http://example.com/?q=a%2B%3Db%26c");
QUrl copy(original);
copy.setQuery(copy.query(QUrl::FullyDecoded), QUrl::DecodedMode);

qDebug() &lt;&lt; original.toString();   // prints: http://example.com/?q=a%2B%3Db%26c
qDebug() &lt;&lt; copy.toString();       // prints: http://example.com/?q=a+=b&amp;c</db:programlisting>
            <db:para>If the two URLs were used via HTTP GET, the interpretation by the web server would probably be different. In the first case, it would interpret as one parameter, with a key of "q" and value "a+=b&amp;c". In the second case, it would probably interpret as two parameters, one with a key of "q" and value "a =b", and the second with a key "c" and no value.</db:para>
         </db:section>
         <db:section>
            <db:title>Notes</db:title>
            <db:para>This enum was introduced or modified in Qt 5.0.</db:para>
            <db:para>The <db:code>ComponentFormattingOptions</db:code> type is a typedef for <db:code>QFlags&lt;ComponentFormattingOption&gt;</db:code>. It stores an OR combination of  values.</db:para>
         </db:section>
         <db:section>
            <db:title>See Also</db:title>
            <db:para>
               <db:emphasis role="bold">See Also:</db:emphasis>
               <db:simplelist type="vert">
                  <db:member>
                     <db:link xlink:href="qurl.html#UrlFormattingOption-enum" xrefstyle="typedef" annotations="QUrl::FormattingOptions">QUrl::FormattingOptions</db:link>
                  </db:member>
               </db:simplelist>
            </db:para>
         </db:section>
      </db:section>
      <db:section>
         <db:title>enum QUrl::ParsingMode, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QUrl::ParsingMode</db:enumname>
            <db:enumitem>
               <db:enumidentifier>TolerantMode</db:enumidentifier>
               <db:enumvalue>0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>StrictMode</db:enumidentifier>
               <db:enumvalue>1</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>DecodedMode</db:enumidentifier>
               <db:enumvalue>2</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:para>The parsing mode controls the way <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> parses strings.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QUrl::TolerantMode</db:td>
                  <db:td>0</db:td>
                  <db:td>
                     <db:para>
                        <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> will try to correct some common errors in URLs. This mode is useful for parsing URLs coming from sources not known to be strictly standards-conforming.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::StrictMode</db:td>
                  <db:td>1</db:td>
                  <db:td>
                     <db:para>Only valid URLs are accepted. This mode is useful for general URL validation.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::DecodedMode</db:td>
                  <db:td>2</db:td>
                  <db:td>
                     <db:para>
                        <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> will interpret the URL component in the fully-decoded form, where percent characters stand for themselves, not as the beginning of a percent-encoded sequence. This mode is only valid for the setters setting components of a URL; it is not permitted in the <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> constructor, in <db:code><db:link xlink:href="qurl.html#fromEncoded" xrefstyle="function" annotations="fromEncoded()">fromEncoded()</db:link></db:code> or in <db:code><db:link xlink:href="qurl.html#setUrl" xrefstyle="function" annotations="setUrl()">setUrl()</db:link></db:code>. For more information on this mode, see the documentation for <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::ComponentFormattingOption">QUrl::FullyDecoded</db:link></db:code>.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>In , the parser has the following behaviour:</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>Spaces and "%20": unencoded space characters will be accepted and will be treated as equivalent to "%20".</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Single "%" characters: Any occurrences of a percent character "%" not followed by exactly two hexadecimal characters (e.g., "13% coverage.html") will be replaced by "%25". Note that one lone "%" character will trigger the correction mode for all percent characters.</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>Reserved and unreserved characters: An encoded URL should only contain a few characters as literals; all other characters should be percent-encoded. In , these characters will be accepted if they are found in the URL: space / double-quote / "&lt;" / "&gt;" / "" / "^" / "`" / "{" / "|" / "}" Those same characters can be decoded again by passing <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::DecodeReserved">QUrl::DecodeReserved</db:link></db:code> to <db:code><db:link xlink:href="qurl.html#toString" xrefstyle="function" annotations="toString()">toString()</db:link></db:code> or <db:code><db:link xlink:href="qurl.html#toEncoded" xrefstyle="function" annotations="toEncoded()">toEncoded()</db:link></db:code>. In the getters of individual components, those characters are often returned in decoded form.</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:para>When in , if a parsing error is found, <db:code><db:link xlink:href="qurl.html#isValid" xrefstyle="function" annotations="isValid()">isValid()</db:link></db:code> will return <db:code>false</db:code> and <db:code><db:link xlink:href="qurl.html#errorString" xrefstyle="function" annotations="errorString()">errorString()</db:link></db:code> will return a message describing the error. If more than one error is detected, it is undefined which error gets reported.</db:para>
         <db:para>Note that  is not usually enough for parsing user input, which often contains more errors and expectations than the parser can deal with. When dealing with data coming directly from the user -- as opposed to data coming from data-transfer sources, such as other programs -- it is recommended to use <db:code><db:link xlink:href="qurl.html#fromUserInput" xrefstyle="function" annotations="fromUserInput()">fromUserInput()</db:link></db:code>.</db:para>
         <db:para>The <db:code>ComponentFormattingOptions</db:code> type is a typedef for <db:code>QFlags&lt;ParsingMode&gt;</db:code>. It stores an OR combination of  values.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#fromUserInput" xrefstyle="function" annotations="fromUserInput()">fromUserInput()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setUrl" xrefstyle="function" annotations="setUrl()">setUrl()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#toString" xrefstyle="function" annotations="toString()">toString()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#toEncoded" xrefstyle="function" annotations="toEncoded()">toEncoded()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qurl.html#UrlFormattingOption-enum" xrefstyle="typedef" annotations="QUrl::FormattingOptions">QUrl::FormattingOptions</db:link>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>enum QUrl::UrlFormattingOption, flags QUrl::FormattingOptions</db:title>
         <db:enumsynopsis>
            <db:enumname>QUrl::UrlFormattingOption</db:enumname>
            <db:enumitem>
               <db:enumidentifier>None</db:enumidentifier>
               <db:enumvalue>0x0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RemoveScheme</db:enumidentifier>
               <db:enumvalue>0x1</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RemovePassword</db:enumidentifier>
               <db:enumvalue>0x2</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RemoveUserInfo</db:enumidentifier>
               <db:enumvalue>RemovePassword | 0x4</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RemovePort</db:enumidentifier>
               <db:enumvalue>0x8</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RemoveAuthority</db:enumidentifier>
               <db:enumvalue>RemoveUserInfo | RemovePort | 0x10</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RemovePath</db:enumidentifier>
               <db:enumvalue>0x20</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RemoveQuery</db:enumidentifier>
               <db:enumvalue>0x40</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RemoveFragment</db:enumidentifier>
               <db:enumvalue>0x80</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>PreferLocalFile</db:enumidentifier>
               <db:enumvalue>0x200</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>StripTrailingSlash</db:enumidentifier>
               <db:enumvalue>0x400</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>RemoveFilename</db:enumidentifier>
               <db:enumvalue>0x800</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>NormalizePathSegments</db:enumidentifier>
               <db:enumvalue>0x1000</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:para>The formatting options define how the URL is formatted when written out as text.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QUrl::None</db:td>
                  <db:td>0x0</db:td>
                  <db:td>
                     <db:para>The format of the URL is unchanged.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::RemoveScheme</db:td>
                  <db:td>0x1</db:td>
                  <db:td>
                     <db:para>The scheme is removed from the URL.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::RemovePassword</db:td>
                  <db:td>0x2</db:td>
                  <db:td>
                     <db:para>Any password in the URL is removed.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::RemoveUserInfo</db:td>
                  <db:td>RemovePassword | 0x4</db:td>
                  <db:td>
                     <db:para>Any user information in the URL is removed.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::RemovePort</db:td>
                  <db:td>0x8</db:td>
                  <db:td>
                     <db:para>Any specified port is removed from the URL.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::RemoveAuthority</db:td>
                  <db:td>RemoveUserInfo | RemovePort | 0x10</db:td>
                  <db:td/>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::RemovePath</db:td>
                  <db:td>0x20</db:td>
                  <db:td>
                     <db:para>The URL's path is removed, leaving only the scheme, host address, and port (if present).</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::RemoveQuery</db:td>
                  <db:td>0x40</db:td>
                  <db:td>
                     <db:para>The query part of the URL (following a '?' character) is removed.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::RemoveFragment</db:td>
                  <db:td>0x80</db:td>
                  <db:td/>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::RemoveFilename</db:td>
                  <db:td>0x800</db:td>
                  <db:td>
                     <db:para>The filename (i.e. everything after the last '/' in the path) is removed. The trailing '/' is kept, unless  is set. Only valid if  is not set.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::PreferLocalFile</db:td>
                  <db:td>0x200</db:td>
                  <db:td>
                     <db:para>If the URL is a local file according to <db:code><db:link xlink:href="qurl.html#isLocalFile" xrefstyle="function" annotations="isLocalFile()">isLocalFile()</db:link></db:code> and contains no query or fragment, a local file path is returned.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::StripTrailingSlash</db:td>
                  <db:td>0x400</db:td>
                  <db:td>
                     <db:para>The trailing slash is removed from the path, if one is present.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::NormalizePathSegments</db:td>
                  <db:td>0x1000</db:td>
                  <db:td>
                     <db:para>Modifies the path to remove redundant directory separators, and to resolve "."s and ".."s (as far as possible).</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>Note that the case folding rules in <db:link xlink:href="http://www.rfc-editor.org/rfc/rfc3491.txt" xrefstyle="page" annotations="RFC 3491">Nameprep</db:link>, which <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> conforms to, require host names to always be converted to lower case, regardless of the Qt::FormattingOptions used.</db:para>
         <db:para>The options from <db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="typedef" annotations="QUrl::ComponentFormattingOptions">QUrl::ComponentFormattingOptions</db:link> are also possible.</db:para>
         <db:para>The <db:code>ComponentFormattingOptions</db:code> type is a typedef for <db:code>QFlags&lt;UrlFormattingOption&gt;</db:code>. It stores an OR combination of  values.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="typedef" annotations="QUrl::ComponentFormattingOptions">QUrl::ComponentFormattingOptions</db:link>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>enum QUrl::UserInputResolutionOption, flags QUrl::UserInputResolutionOptions</db:title>
         <db:enumsynopsis>
            <db:enumname>QUrl::UserInputResolutionOption</db:enumname>
            <db:enumsynopsisinfo role="since">5.4</db:enumsynopsisinfo>
            <db:enumitem>
               <db:enumidentifier>DefaultResolution</db:enumidentifier>
               <db:enumvalue>0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>AssumeLocalFile</db:enumidentifier>
               <db:enumvalue>1</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:typedefsynopsis>
            <db:typedefname>QUrl::UserInputResolutionOptions</db:typedefname>
         </db:typedefsynopsis>
         <db:para>The user input resolution options define how <db:code><db:link xlink:href="qurl.html#fromUserInput" xrefstyle="function" annotations="fromUserInput()">fromUserInput()</db:link></db:code> should interpret strings that could either be a relative path or the short form of a HTTP URL. For instance <db:code>file.pl</db:code> can be either a local file or the URL <db:code>http://file.pl</db:code>.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QUrl::DefaultResolution</db:td>
                  <db:td>0</db:td>
                  <db:td>
                     <db:para>The default resolution mechanism is to check whether a local file exists, in the working directory given to <db:code><db:link xlink:href="qurl.html#fromUserInput" xrefstyle="function" annotations="fromUserInput">fromUserInput</db:link></db:code>, and only return a local path in that case. Otherwise a URL is assumed.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QUrl::AssumeLocalFile</db:td>
                  <db:td>1</db:td>
                  <db:td>
                     <db:para>This option makes <db:code><db:link xlink:href="qurl.html#fromUserInput" xrefstyle="function" annotations="fromUserInput()">fromUserInput()</db:link></db:code> always return a local path unless the input contains a scheme, such as <db:code>http://file.pl</db:code>. This is useful for applications such as text editors, which are able to create the file if it doesn't exist.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>This enum was introduced or modified in Qt 5.4.</db:para>
         <db:para>The <db:code>UserInputResolutionOptions</db:code> type is a typedef for <db:code>QFlags&lt;UserInputResolutionOption&gt;</db:code>. It stores an OR combination of  values.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#fromUserInput" xrefstyle="function" annotations="fromUserInput()">fromUserInput()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Member Function Documentation</db:title>
      <db:section>
         <db:title> QUrl::QUrl()</db:title>
         <db:constructorsynopsis>
            <db:modifier>public</db:modifier>
            <db:methodname>QUrl</db:methodname>
            <db:void/>
         </db:constructorsynopsis>
         <db:para>Constructs an empty <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> object.</db:para>
      </db:section>
      <db:section>
         <db:title> QUrl::QUrl(const QString &amp;url, QUrl::ParsingMode parsingMode)</db:title>
         <db:constructorsynopsis>
            <db:modifier>public</db:modifier>
            <db:methodname>QUrl</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>url</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QUrl::ParsingMode</db:type>
               <db:parameter>parsingMode</db:parameter>
               <db:initializer>TolerantMode</db:initializer>
            </db:methodparam>
         </db:constructorsynopsis>
         <db:para>Constructs a URL by parsing <db:code role="argument">url</db:code>. <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> will automatically percent encode all characters that are not allowed in a URL and decode the percent-encoded sequences that represent an unreserved character (letters, digits, hyphens, undercores, dots and tildes). All other characters are left in their original forms.</db:para>
         <db:para>Parses the <db:code role="argument">url</db:code> using the parser mode <db:code role="argument">parsingMode</db:code>. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="TolerantMode">TolerantMode</db:link></db:code> (the default), <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> will correct certain mistakes, notably the presence of a percent character ('%') not followed by two hexadecimal digits, and it will accept any character in any position. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="StrictMode">StrictMode</db:link></db:code>, encoding mistakes will not be tolerated and <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> will also check that certain forbidden characters are not present in unencoded form. If an error is detected in <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="StrictMode">StrictMode</db:link></db:code>, <db:code><db:link xlink:href="qurl.html#isValid" xrefstyle="function" annotations="isValid()">isValid()</db:link></db:code> will return false. The parsing mode <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="DecodedMode">DecodedMode</db:link></db:code> is not permitted in this context.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>
QUrl url("http://www.example.com/List of holidays.xml");
// url.toEncoded() == "http://www.example.com/List%20of%20holidays.xml"
</db:programlisting>
         <db:para>To construct a URL from an encoded string, you can also use <db:code><db:link xlink:href="qurl.html#fromEncoded" xrefstyle="function" annotations="fromEncoded()">fromEncoded()</db:link></db:code>:</db:para>
         <db:programlisting>
QUrl url = QUrl::fromEncoded("http://qt-project.org/List%20of%20holidays.xml");
</db:programlisting>
         <db:para>Both functions are equivalent and, in Qt 5, both functions accept encoded data. Usually, the choice of the <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> constructor or <db:code><db:link xlink:href="qurl.html#setUrl" xrefstyle="function" annotations="setUrl()">setUrl()</db:link></db:code> versus <db:code><db:link xlink:href="qurl.html#fromEncoded" xrefstyle="function" annotations="fromEncoded()">fromEncoded()</db:link></db:code> will depend on the source data: the constructor and <db:code><db:link xlink:href="qurl.html#setUrl" xrefstyle="function" annotations="setUrl()">setUrl()</db:link></db:code> take a <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>, whereas <db:code><db:link xlink:href="qurl.html#fromEncoded" xrefstyle="function" annotations="fromEncoded">fromEncoded</db:link></db:code> takes a <db:code><db:link xlink:href="qbytearray.html" xrefstyle="class" annotations="QByteArray">QByteArray</db:link></db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setUrl" xrefstyle="function" annotations="setUrl()">setUrl()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#fromEncoded" xrefstyle="function" annotations="fromEncoded()">fromEncoded()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="TolerantMode">TolerantMode</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title> QUrl::QUrl(const QUrl &amp;other)</db:title>
         <db:constructorsynopsis>
            <db:modifier>public</db:modifier>
            <db:methodname>QUrl</db:methodname>
            <db:methodparam>
               <db:type>const QUrl &amp;</db:type>
               <db:parameter>other</db:parameter>
            </db:methodparam>
         </db:constructorsynopsis>
         <db:para>Constructs a copy of <db:code role="argument">other</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title> QUrl::~QUrl()</db:title>
         <db:destructorsynopsis>
            <db:modifier>public</db:modifier>
            <db:methodname>~QUrl</db:methodname>
            <db:void/>
         </db:destructorsynopsis>
         <db:para>Destructor; called immediately before the object is deleted.</db:para>
      </db:section>
      <db:section>
         <db:title>CFURLRef QUrl::toCFURL() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>CFURLRef</db:type>
            <db:methodname>toCFURL</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Creates a CFURL from a <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code>. The caller owns the CFURL and is responsible for releasing it.</db:para>
         <db:para>This property was introduced in Qt 5.2.</db:para>
      </db:section>
      <db:section>
         <db:title>NSURL * QUrl::toNSURL() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>NSURL *</db:type>
            <db:methodname>toNSURL</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Creates a NSURL from a <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code>. The NSURL is autoreleased.</db:para>
         <db:para>This property was introduced in Qt 5.2.</db:para>
      </db:section>
      <db:section>
         <db:title>QByteArray QUrl::toAce(const QString &amp;domain)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:type>QByteArray</db:type>
            <db:methodname>toAce</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>domain</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the ASCII Compatible Encoding of the given domain name <db:code role="argument">domain</db:code>. The result of this function is considered equivalent to <db:code role="argument">domain</db:code>.</db:para>
         <db:para>The ASCII-Compatible Encoding (ACE) is defined by RFC 3490, RFC 3491 and RFC 3492. It is part of the Internationalizing Domain Names in Applications (IDNA) specification, which allows for domain names (like <db:code>"example.com"</db:code>) to be written using international characters.</db:para>
         <db:para>This function returns an empty <db:code><db:link xlink:href="qbytearray.html" xrefstyle="class" annotations="QByteArray">QByteArray</db:link></db:code> if <db:code role="argument">domain</db:code> is not a valid hostname. Note, in particular, that IPv6 literals are not valid domain names.</db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
      </db:section>
      <db:section>
         <db:title>QByteArray QUrl::toEncoded(QUrl::FormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QByteArray</db:type>
            <db:methodname>toEncoded</db:methodname>
            <db:methodparam>
               <db:type>QUrl::FormattingOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>FullyEncoded</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the encoded representation of the URL if it's valid; otherwise an empty <db:code><db:link xlink:href="qbytearray.html" xrefstyle="class" annotations="QByteArray">QByteArray</db:link></db:code> is returned. The output can be customized by passing flags with <db:code role="argument">options</db:code>.</db:para>
         <db:para>The user info, path and fragment are all converted to UTF-8, and all non-ASCII characters are then percent encoded. The host name is encoded using Punycode.</db:para>
      </db:section>
      <db:section>
         <db:title>QByteArray QUrl::toPercentEncoding(const QString &amp;input, const QByteArray &amp;exclude, const QByteArray &amp;include)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:type>QByteArray</db:type>
            <db:methodname>toPercentEncoding</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>input</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QByteArray &amp;</db:type>
               <db:parameter>exclude</db:parameter>
               <db:initializer>QByteArray()</db:initializer>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QByteArray &amp;</db:type>
               <db:parameter>include</db:parameter>
               <db:initializer>QByteArray()</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns an encoded copy of <db:code role="argument">input</db:code>. <db:code role="argument">input</db:code> is first converted to UTF-8, and all ASCII-characters that are not in the unreserved group are percent encoded. To prevent characters from being percent encoded pass them to <db:code role="argument">exclude</db:code>. To force characters to be percent encoded pass them to <db:code role="argument">include</db:code>.</db:para>
         <db:para>Unreserved is defined as: <db:code>ALPHA / DIGIT / "-" / "." / "_" / "~"</db:code>
         </db:para>
         <db:programlisting>
QByteArray ba = QUrl::toPercentEncoding("{a fishy string?}", "{}", "s");
qDebug(ba.constData());
// prints "{a fi%73hy %73tring%3F}"
</db:programlisting>
      </db:section>
      <db:section>
         <db:title>QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QUrl &amp;url)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QDataStream &amp;</db:type>
            <db:methodname>operator&lt;&lt;</db:methodname>
            <db:methodparam>
               <db:type>QDataStream &amp;</db:type>
               <db:parameter>out</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QUrl &amp;</db:type>
               <db:parameter>url</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Writes url <db:code role="argument">url</db:code> to the stream <db:code role="argument">out</db:code> and returns a reference to the stream.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="datastreamformat.html" xrefstyle="page" annotations="Serializing Qt Data Types">Format of the QDataStream operators</db:link>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QUrl &amp;url)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QDataStream &amp;</db:type>
            <db:methodname>operator&gt;&gt;</db:methodname>
            <db:methodparam>
               <db:type>QDataStream &amp;</db:type>
               <db:parameter>in</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QUrl &amp;</db:type>
               <db:parameter>url</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Reads a url into <db:code role="argument">url</db:code> from the stream <db:code role="argument">in</db:code> and returns a reference to the stream.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="datastreamformat.html" xrefstyle="page" annotations="Serializing Qt Data Types">Format of the QDataStream operators</db:link>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QList&lt;QUrl&gt; QUrl::fromStringList(const QStringList &amp;urls, QUrl::ParsingMode mode)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:type>QList&lt;QUrl&gt;</db:type>
            <db:methodname>fromStringList</db:methodname>
            <db:methodparam>
               <db:type>const QStringList &amp;</db:type>
               <db:parameter>urls</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QUrl::ParsingMode</db:type>
               <db:parameter>mode</db:parameter>
               <db:initializer>TolerantMode</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Converts a list of strings representing <db:code role="argument">urls</db:code> into a list of urls, using <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code>(str, <db:code role="argument">mode</db:code>). Note that this means all strings must be urls, not for instance local paths.</db:para>
         <db:para>This property was introduced in Qt 5.1.</db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::authority(QUrl::ComponentFormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>authority</db:methodname>
            <db:methodparam>
               <db:type>QUrl::ComponentFormattingOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>PrettyDecoded</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the authority of the URL if it is defined; otherwise an empty string is returned.</db:para>
         <db:para>This function returns an unambiguous value, which may contain that characters still percent-encoded, plus some control sequences not representable in decoded form in <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>.</db:para>
         <db:para>The <db:code role="argument">options</db:code> argument controls how to format the user info component. The value of <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code> is not permitted in this function. If you need to obtain fully decoded data, call <db:code><db:link xlink:href="qurl.html#userName" xrefstyle="function" annotations="userName()">userName()</db:link></db:code>, <db:code><db:link xlink:href="qurl.html#password" xrefstyle="function" annotations="password()">password()</db:link></db:code>, <db:code><db:link xlink:href="qurl.html#host" xrefstyle="function" annotations="host()">host()</db:link></db:code> and <db:code><db:link xlink:href="qurl.html#port" xrefstyle="function" annotations="port()">port()</db:link></db:code> individually.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setAuthority" xrefstyle="function" annotations="setAuthority()">setAuthority()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#userInfo" xrefstyle="function" annotations="userInfo()">userInfo()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#userName" xrefstyle="function" annotations="userName()">userName()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#password" xrefstyle="function" annotations="password()">password()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#host" xrefstyle="function" annotations="host()">host()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#port" xrefstyle="function" annotations="port()">port()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::errorString() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>errorString</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns an error message if the last operation that modified this <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> object ran into a parsing error. If no error was detected, this function returns an empty string and <db:code><db:link xlink:href="qurl.html#isValid" xrefstyle="function" annotations="isValid()">isValid()</db:link></db:code> returns <db:code>true</db:code>.</db:para>
         <db:para>The error message returned by this function is technical in nature and may not be understood by end users. It is mostly useful to developers trying to understand why <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> will not accept some input.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="QUrl::ParsingMode">QUrl::ParsingMode</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::fileName(QUrl::ComponentFormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>fileName</db:methodname>
            <db:methodparam>
               <db:type>QUrl::ComponentFormattingOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>FullyDecoded</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the name of the file, excluding the directory path.</db:para>
         <db:para>Note that, if this <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> object is given a path ending in a slash, the name of the file is considered empty.</db:para>
         <db:para>If the path doesn't contain any slash, it is fully returned as the .</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>
QUrl url("http://qt-project.org/support/file.html");
// url.adjusted(RemoveFilename) == "http://qt-project.org/support/"
// url.fileName() == "file.html"
</db:programlisting>
         <db:para>The <db:code role="argument">options</db:code> argument controls how to format the file name component. All values produce an unambiguous result. With <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code>, all percent-encoded sequences are decoded; otherwise, the returned value may contain some percent-encoded sequences for some control sequences not representable in decoded form in <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#path" xrefstyle="function" annotations="path()">path()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.2.</db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::fragment(QUrl::ComponentFormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>fragment</db:methodname>
            <db:methodparam>
               <db:type>QUrl::ComponentFormattingOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>PrettyDecoded</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the fragment of the URL. To determine if the parsed URL contained a fragment, use <db:code><db:link xlink:href="qurl.html#hasFragment" xrefstyle="function" annotations="hasFragment()">hasFragment()</db:link></db:code>.</db:para>
         <db:para>The <db:code role="argument">options</db:code> argument controls how to format the fragment component. All values produce an unambiguous result. With <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code>, all percent-encoded sequences are decoded; otherwise, the returned value may contain some percent-encoded sequences for some control sequences not representable in decoded form in <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>.</db:para>
         <db:para>Note that <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code> may cause data loss if those non-representable sequences are present. It is recommended to use that value when the result will be used in a non-URL context.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setFragment" xrefstyle="function" annotations="setFragment()">setFragment()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#hasFragment" xrefstyle="function" annotations="hasFragment()">hasFragment()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::fromAce(const QByteArray &amp;domain)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>fromAce</db:methodname>
            <db:methodparam>
               <db:type>const QByteArray &amp;</db:type>
               <db:parameter>domain</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the Unicode form of the given domain name <db:code role="argument">domain</db:code>, which is encoded in the ASCII Compatible Encoding (ACE). The result of this function is considered equivalent to <db:code role="argument">domain</db:code>.</db:para>
         <db:para>If the value in <db:code role="argument">domain</db:code> cannot be encoded, it will be converted to <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> and returned.</db:para>
         <db:para>The ASCII Compatible Encoding (ACE) is defined by RFC 3490, RFC 3491 and RFC 3492. It is part of the Internationalizing Domain Names in Applications (IDNA) specification, which allows for domain names (like <db:code>"example.com"</db:code>) to be written using international characters.</db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::fromPercentEncoding(const QByteArray &amp;input)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>fromPercentEncoding</db:methodname>
            <db:methodparam>
               <db:type>const QByteArray &amp;</db:type>
               <db:parameter>input</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns a decoded copy of <db:code role="argument">input</db:code>. <db:code role="argument">input</db:code> is first decoded from percent encoding, then converted from UTF-8 to unicode.</db:para>
         <db:note>
            <db:para> Given invalid input (such as a string containing the sequence "%G5", which is not a valid hexadecimal number) the output will be invalid as well. As an example: the sequence "%G5" could be decoded to 'W'.</db:para>
         </db:note>
      </db:section>
      <db:section>
         <db:title>QString QUrl::host(QUrl::ComponentFormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>host</db:methodname>
            <db:methodparam>
               <db:type>QUrl::ComponentFormattingOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>FullyDecoded</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the host of the URL if it is defined; otherwise an empty string is returned.</db:para>
         <db:para>The <db:code role="argument">options</db:code> argument controls how the hostname will be formatted. The <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::EncodeUnicode">QUrl::EncodeUnicode</db:link></db:code> option will cause this function to return the hostname in the ASCII-Compatible Encoding (ACE) form, which is suitable for use in channels that are not 8-bit clean or that require the legacy hostname (such as DNS requests or in HTTP request headers). If that flag is not present, this function returns the International Domain Name (IDN) in Unicode form, according to the list of permissible top-level domains (see <db:code><db:link xlink:href="qurl.html#idnWhitelist" xrefstyle="function" annotations="idnWhitelist()">idnWhitelist()</db:link></db:code>).</db:para>
         <db:para>All other flags are ignored. Host names cannot contain control or percent characters, so the returned value can be considered fully decoded.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setHost" xrefstyle="function" annotations="setHost()">setHost()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#idnWhitelist" xrefstyle="function" annotations="idnWhitelist()">idnWhitelist()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setIdnWhitelist" xrefstyle="function" annotations="setIdnWhitelist()">setIdnWhitelist()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#authority" xrefstyle="function" annotations="authority()">authority()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::password(QUrl::ComponentFormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>password</db:methodname>
            <db:methodparam>
               <db:type>QUrl::ComponentFormattingOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>FullyDecoded</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the password of the URL if it is defined; otherwise an empty string is returned.</db:para>
         <db:para>The <db:code role="argument">options</db:code> argument controls how to format the user name component. All values produce an unambiguous result. With <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code>, all percent-encoded sequences are decoded; otherwise, the returned value may contain some percent-encoded sequences for some control sequences not representable in decoded form in <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>.</db:para>
         <db:para>Note that <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code> may cause data loss if those non-representable sequences are present. It is recommended to use that value when the result will be used in a non-URL context, such as setting in <db:code><db:link xlink:href="qauthenticator.html" xrefstyle="class" annotations="QAuthenticator">QAuthenticator</db:link></db:code> or negotiating a login.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setPassword" xrefstyle="function" annotations="setPassword()">setPassword()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::path(QUrl::ComponentFormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>path</db:methodname>
            <db:methodparam>
               <db:type>QUrl::ComponentFormattingOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>FullyDecoded</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the path of the URL.</db:para>
         <db:programlisting language="other">qDebug() &lt;&lt; QUrl("file:file.txt").path();                   // "file.txt"
qDebug() &lt;&lt; QUrl("/home/user/file.txt").path();             // "/home/user/file.txt"
qDebug() &lt;&lt; QUrl("http://www.example.com/test/123").path(); // "/test/123"</db:programlisting>
         <db:para>The <db:code role="argument">options</db:code> argument controls how to format the path component. All values produce an unambiguous result. With <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code>, all percent-encoded sequences are decoded; otherwise, the returned value may contain some percent-encoded sequences for some control sequences not representable in decoded form in <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>.</db:para>
         <db:para>Note that <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code> may cause data loss if those non-representable sequences are present. It is recommended to use that value when the result will be used in a non-URL context, such as sending to an FTP server.</db:para>
         <db:para>An example of data loss is when you have non-Unicode percent-encoded sequences and use <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="FullyDecoded">FullyDecoded</db:link></db:code> (the default):</db:para>
         <db:programlisting language="other">qDebug() &lt;&lt; QUrl("/foo%FFbar").path();</db:programlisting>
         <db:para>In this example, there will be some level of data loss because the <db:code>%FF</db:code> cannot be converted.</db:para>
         <db:para>Data loss can also occur when the path contains sub-delimiters (such as <db:code>+</db:code>):</db:para>
         <db:programlisting language="other">qDebug() &lt;&lt; QUrl("/foo+bar%2B").path(); // "/foo+bar+"</db:programlisting>
         <db:para>Other decoding examples:</db:para>
         <db:programlisting language="other">const QUrl url("/tmp/Mambo %235%3F.mp3");
qDebug() &lt;&lt; url.path(QUrl::FullyDecoded);  // "/tmp/Mambo #5?.mp3"
qDebug() &lt;&lt; url.path(QUrl::PrettyDecoded); // "/tmp/Mambo #5?.mp3"
qDebug() &lt;&lt; url.path(QUrl::FullyEncoded);  // "/tmp/Mambo%20%235%3F.mp3"</db:programlisting>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setPath" xrefstyle="function" annotations="setPath()">setPath()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::query(QUrl::ComponentFormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>query</db:methodname>
            <db:methodparam>
               <db:type>QUrl::ComponentFormattingOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>PrettyDecoded</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the query string of the URL if there's a query string, or an empty result if not. To determine if the parsed URL contained a query string, use <db:code><db:link xlink:href="qurl.html#hasQuery" xrefstyle="function" annotations="hasQuery()">hasQuery()</db:link></db:code>.</db:para>
         <db:para>The <db:code role="argument">options</db:code> argument controls how to format the query component. All values produce an unambiguous result. With <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code>, all percent-encoded sequences are decoded; otherwise, the returned value may contain some percent-encoded sequences for some control sequences not representable in decoded form in <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>.</db:para>
         <db:para>Note that use of <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code> in queries is discouraged, as queries often contain data that is supposed to remain percent-encoded, including the use of the "%2B" sequence to represent a plus character ('+').</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setQuery" xrefstyle="function" annotations="setQuery()">setQuery()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#hasQuery" xrefstyle="function" annotations="hasQuery()">hasQuery()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::scheme() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>scheme</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the scheme of the URL. If an empty string is returned, this means the scheme is undefined and the URL is then relative.</db:para>
         <db:para>The scheme can only contain US-ASCII letters or digits, which means it cannot contain any character that would otherwise require encoding. Additionally, schemes are always returned in lowercase form.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setScheme" xrefstyle="function" annotations="setScheme()">setScheme()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#isRelative" xrefstyle="function" annotations="isRelative()">isRelative()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::toDisplayString(QUrl::FormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>toDisplayString</db:methodname>
            <db:methodparam>
               <db:type>QUrl::FormattingOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>FormattingOptions(PrettyDecoded)</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns a human-displayable string representation of the URL. The output can be customized by passing flags with <db:code role="argument">options</db:code>. The option <db:code><db:link xlink:href="qurl.html#UrlFormattingOption-enum" xrefstyle="enum" annotations="RemovePassword">RemovePassword</db:link></db:code> is always enabled, since passwords should never be shown back to users.</db:para>
         <db:para>With the default options, the resulting <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> can be passed back to a <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> later on, but any password that was present initially will be lost.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qurl.html#UrlFormattingOption-enum" xrefstyle="typedef" annotations="FormattingOptions">FormattingOptions</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#toEncoded" xrefstyle="function" annotations="toEncoded()">toEncoded()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#toString" xrefstyle="function" annotations="toString()">toString()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.0.</db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::toLocalFile() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>toLocalFile</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the path of this URL formatted as a local file path. The path returned will use forward slashes, even if it was originally created from one with backslashes.</db:para>
         <db:para>If this URL contains a non-empty hostname, it will be encoded in the returned value in the form found on SMB networks (for example, "//servername/path/to/file.txt").</db:para>
         <db:programlisting language="other">qDebug() &lt;&lt; QUrl("file:file.txt").toLocalFile();            // "file:file.txt"
qDebug() &lt;&lt; QUrl("file:/home/user/file.txt").toLocalFile(); // "file:///home/user/file.txt"
qDebug() &lt;&lt; QUrl("file.txt").toLocalFile();                 // ""; wasn't a local file as it had no scheme</db:programlisting>
         <db:para>Note: if the path component of this URL contains a non-UTF-8 binary sequence (such as %80), the behaviour of this function is undefined.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#fromLocalFile" xrefstyle="function" annotations="fromLocalFile()">fromLocalFile()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#isLocalFile" xrefstyle="function" annotations="isLocalFile()">isLocalFile()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::toString(QUrl::FormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>toString</db:methodname>
            <db:methodparam>
               <db:type>QUrl::FormattingOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>FormattingOptions(PrettyDecoded)</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns a string representation of the URL. The output can be customized by passing flags with <db:code role="argument">options</db:code>. The option <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code> is not permitted in this function since it would generate ambiguous data.</db:para>
         <db:para>The default formatting option is <db:link xlink:href="qurl.html#UrlFormattingOption-enum" xrefstyle="typedef" annotations="QUrl::FormattingOptions">PrettyDecoded</db:link>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qurl.html#UrlFormattingOption-enum" xrefstyle="typedef" annotations="FormattingOptions">FormattingOptions</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#url" xrefstyle="function" annotations="url()">url()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setUrl" xrefstyle="function" annotations="setUrl()">setUrl()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::topLevelDomain(QUrl::ComponentFormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>topLevelDomain</db:methodname>
            <db:methodparam>
               <db:type>QUrl::ComponentFormattingOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>FullyDecoded</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the TLD (Top-Level Domain) of the URL, (e.g. .co.uk, .net). Note that the return value is prefixed with a '.' unless the URL does not contain a valid TLD, in which case the function returns an empty string.</db:para>
         <db:para>Note that this function considers a TLD to be any domain that allows users to register subdomains under, including many home, dynamic DNS websites and blogging providers. This is useful for determining whether two websites belong to the same infrastructure and communication should be allowed, such as browser cookies: two domains should be considered part of the same website if they share at least one label in addition to the value returned by this function.</db:para>
         <db:itemizedlist>
            <db:listitem>
               <db:para>
                  <db:code>foo.co.uk</db:code> and <db:code>foo.com</db:code> do not share a top-level domain</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code>foo.co.uk</db:code> and <db:code>bar.co.uk</db:code> share the <db:code>.co.uk</db:code> domain, but the next label is different</db:para>
            </db:listitem>
            <db:listitem>
               <db:para>
                  <db:code>www.foo.co.uk</db:code> and <db:code>ftp.foo.co.uk</db:code> share the same top-level domain and one more label, so they are considered part of the same site</db:para>
            </db:listitem>
         </db:itemizedlist>
         <db:para>If <db:code role="argument">options</db:code> includes <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="EncodeUnicode">EncodeUnicode</db:link></db:code>, the returned string will be in ASCII Compatible Encoding.</db:para>
         <db:para>This property was introduced in Qt 4.8.</db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::url(QUrl::FormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>url</db:methodname>
            <db:methodparam>
               <db:type>QUrl::FormattingOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>FormattingOptions(PrettyDecoded)</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns a string representation of the URL. The output can be customized by passing flags with <db:code role="argument">options</db:code>. The option <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code> is not permitted in this function since it would generate ambiguous data.</db:para>
         <db:para>The resulting <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> can be passed back to a <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> later on.</db:para>
         <db:para>Synonym for <db:code><db:link xlink:href="qurl.html#toString" xrefstyle="function" annotations="toString">toString</db:link></db:code>(options).</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setUrl" xrefstyle="function" annotations="setUrl()">setUrl()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:link xlink:href="qurl.html#UrlFormattingOption-enum" xrefstyle="typedef" annotations="FormattingOptions">FormattingOptions</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#toEncoded" xrefstyle="function" annotations="toEncoded()">toEncoded()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#toString" xrefstyle="function" annotations="toString()">toString()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::userInfo(QUrl::ComponentFormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>userInfo</db:methodname>
            <db:methodparam>
               <db:type>QUrl::ComponentFormattingOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>PrettyDecoded</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the user info of the URL, or an empty string if the user info is undefined.</db:para>
         <db:para>This function returns an unambiguous value, which may contain that characters still percent-encoded, plus some control sequences not representable in decoded form in <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>.</db:para>
         <db:para>The <db:code role="argument">options</db:code> argument controls how to format the user info component. The value of <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code> is not permitted in this function. If you need to obtain fully decoded data, call <db:code><db:link xlink:href="qurl.html#userName" xrefstyle="function" annotations="userName()">userName()</db:link></db:code> and <db:code><db:link xlink:href="qurl.html#password" xrefstyle="function" annotations="password()">password()</db:link></db:code> individually.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setUserInfo" xrefstyle="function" annotations="setUserInfo()">setUserInfo()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#userName" xrefstyle="function" annotations="userName()">userName()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#password" xrefstyle="function" annotations="password()">password()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#authority" xrefstyle="function" annotations="authority()">authority()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QString QUrl::userName(QUrl::ComponentFormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>userName</db:methodname>
            <db:methodparam>
               <db:type>QUrl::ComponentFormattingOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>FullyDecoded</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the user name of the URL if it is defined; otherwise an empty string is returned.</db:para>
         <db:para>The <db:code role="argument">options</db:code> argument controls how to format the user name component. All values produce an unambiguous result. With <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code>, all percent-encoded sequences are decoded; otherwise, the returned value may contain some percent-encoded sequences for some control sequences not representable in decoded form in <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>.</db:para>
         <db:para>Note that <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code> may cause data loss if those non-representable sequences are present. It is recommended to use that value when the result will be used in a non-URL context, such as setting in <db:code><db:link xlink:href="qauthenticator.html" xrefstyle="class" annotations="QAuthenticator">QAuthenticator</db:link></db:code> or negotiating a login.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setUserName" xrefstyle="function" annotations="setUserName()">setUserName()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#userInfo" xrefstyle="function" annotations="userInfo()">userInfo()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QStringList QUrl::idnWhitelist()</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:type>QStringList</db:type>
            <db:methodname>idnWhitelist</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the current whitelist of top-level domains that are allowed to have non-ASCII characters in their compositions.</db:para>
         <db:para>See <db:code><db:link xlink:href="qurl.html#setIdnWhitelist" xrefstyle="function" annotations="setIdnWhitelist()">setIdnWhitelist()</db:link></db:code> for the rationale of this list.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setIdnWhitelist" xrefstyle="function" annotations="setIdnWhitelist()">setIdnWhitelist()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
      </db:section>
      <db:section>
         <db:title>QStringList QUrl::toStringList(const QList&lt;QUrl&gt; &amp;urls, QUrl::FormattingOptions options)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:type>QStringList</db:type>
            <db:methodname>toStringList</db:methodname>
            <db:methodparam>
               <db:type>const QList&lt;QUrl&gt; &amp;</db:type>
               <db:parameter>urls</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QUrl::FormattingOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>FormattingOptions(PrettyDecoded)</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Converts a list of <db:code role="argument">urls</db:code> into a list of <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> objects, using <db:code><db:link xlink:href="qurl.html#toString" xrefstyle="function" annotations="toString">toString</db:link></db:code>(<db:code role="argument">options</db:code>).</db:para>
         <db:para>This property was introduced in Qt 5.1.</db:para>
      </db:section>
      <db:section>
         <db:title>QUrl &amp; QUrl::operator=(const QString &amp;url)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QUrl &amp;</db:type>
            <db:methodname>operator=</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>url</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Assigns the specified <db:code role="argument">url</db:code> to this object.</db:para>
      </db:section>
      <db:section>
         <db:title>QUrl &amp; QUrl::operator=(const QUrl &amp;url)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QUrl &amp;</db:type>
            <db:methodname>operator=</db:methodname>
            <db:methodparam>
               <db:type>const QUrl &amp;</db:type>
               <db:parameter>url</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Assigns the specified <db:code role="argument">url</db:code> to this object.</db:para>
      </db:section>
      <db:section>
         <db:title>QUrl QUrl::adjusted(QUrl::FormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QUrl</db:type>
            <db:methodname>adjusted</db:methodname>
            <db:methodparam>
               <db:type>QUrl::FormattingOptions</db:type>
               <db:parameter>options</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns an adjusted version of the URL. The output can be customized by passing flags with <db:code role="argument">options</db:code>.</db:para>
         <db:para>The encoding options from <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::ComponentFormattingOption">QUrl::ComponentFormattingOption</db:link></db:code> don't make much sense for this method, nor does <db:code><db:link xlink:href="qurl.html#UrlFormattingOption-enum" xrefstyle="enum" annotations="QUrl::PreferLocalFile">QUrl::PreferLocalFile</db:link></db:code>.</db:para>
         <db:para>This is always equivalent to <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code>(url.<db:code><db:link xlink:href="qurl.html#toString" xrefstyle="function" annotations="toString">toString</db:link></db:code>(options)).</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qurl.html#UrlFormattingOption-enum" xrefstyle="typedef" annotations="FormattingOptions">FormattingOptions</db:link>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#toEncoded" xrefstyle="function" annotations="toEncoded()">toEncoded()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#toString" xrefstyle="function" annotations="toString()">toString()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.2.</db:para>
      </db:section>
      <db:section>
         <db:title>QUrl QUrl::fromCFURL(CFURLRef url)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:type>QUrl</db:type>
            <db:methodname>fromCFURL</db:methodname>
            <db:methodparam>
               <db:type>CFURLRef</db:type>
               <db:parameter>url</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Constructs a <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> containing a copy of the CFURL <db:code role="argument">url</db:code>.</db:para>
         <db:para>This property was introduced in Qt 5.2.</db:para>
      </db:section>
      <db:section>
         <db:title>QUrl QUrl::fromLocalFile(const QString &amp;localFile)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:type>QUrl</db:type>
            <db:methodname>fromLocalFile</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>localFile</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns a <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> representation of <db:code role="argument">localFile</db:code>, interpreted as a local file. This function accepts paths separated by slashes as well as the native separator for this platform.</db:para>
         <db:para>This function also accepts paths with a doubled leading slash (or backslash) to indicate a remote file, as in "//servername/path/to/file.txt". Note that only certain platforms can actually open this file using <db:code><db:link xlink:href="qfile.html#open" xrefstyle="function" annotations="QFile::open()">QFile::open()</db:link></db:code>.</db:para>
         <db:para>An empty <db:code role="argument">localFile</db:code> leads to an empty URL (since Qt 5.4).</db:para>
         <db:programlisting language="other">qDebug() &lt;&lt; QUrl::fromLocalFile("file.txt");            // QUrl("file:file.txt")
qDebug() &lt;&lt; QUrl::fromLocalFile("/home/user/file.txt"); // QUrl("file:///home/user/file.txt")
qDebug() &lt;&lt; QUrl::fromLocalFile("file:file.txt");       // doesn't make sense; expects path, not url with scheme</db:programlisting>
         <db:para>In the first line in snippet above, a file URL is constructed from a local, relative path. A file URL with a relative path only makes sense if there is a base URL to resolve it against. For example:</db:para>
         <db:programlisting language="other">QUrl url = QUrl::fromLocalFile("file.txt");
QUrl baseUrl = QUrl("file:/home/user/");
// wrong: prints QUrl("file:file.txt"), as url already has a scheme
qDebug() &lt;&lt; baseUrl.resolved(url);</db:programlisting>
         <db:para>To resolve such a URL, it's necessary to remove the scheme beforehand:</db:para>
         <db:programlisting language="other">// correct: prints QUrl("file:///home/user/file.txt")
url.setScheme(QString());
qDebug() &lt;&lt; baseUrl.resolved(url);</db:programlisting>
         <db:para>For this reason, it is better to use a relative URL (that is, no scheme) for relative file paths:</db:para>
         <db:programlisting language="other">QUrl url = QUrl("file.txt");
QUrl baseUrl = QUrl("file:/home/user/");
// prints QUrl("file:///home/user/file.txt")
qDebug() &lt;&lt; baseUrl.resolved(url);</db:programlisting>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#toLocalFile" xrefstyle="function" annotations="toLocalFile()">toLocalFile()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#isLocalFile" xrefstyle="function" annotations="isLocalFile()">isLocalFile()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qdir.html#toNativeSeparators" xrefstyle="function" annotations="QDir::toNativeSeparators()">QDir::toNativeSeparators()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QUrl QUrl::fromNSURL(const NSURL *url)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:type>QUrl</db:type>
            <db:methodname>fromNSURL</db:methodname>
            <db:methodparam>
               <db:type>const NSURL *</db:type>
               <db:parameter>url</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Constructs a <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> containing a copy of the NSURL <db:code role="argument">url</db:code>.</db:para>
         <db:para>This property was introduced in Qt 5.2.</db:para>
      </db:section>
      <db:section>
         <db:title>QUrl QUrl::fromUserInput(const QString &amp;userInput)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:type>QUrl</db:type>
            <db:methodname>fromUserInput</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>userInput</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns a valid URL from a user supplied <db:code role="argument">userInput</db:code> string if one can be deducted. In the case that is not possible, an invalid <db:code><db:link xlink:href="qurl.html#QUrl" xrefstyle="function" annotations="QUrl()">QUrl()</db:link></db:code> is returned.</db:para>
         <db:para>Most applications that can browse the web, allow the user to input a URL in the form of a plain string. This string can be manually typed into a location bar, obtained from the clipboard, or passed in via command line arguments.</db:para>
         <db:para>When the string is not already a valid URL, a best guess is performed, making various web related assumptions.</db:para>
         <db:para>In the case the string corresponds to a valid file path on the system, a file:// URL is constructed, using <db:code><db:link xlink:href="qurl.html#fromLocalFile" xrefstyle="function" annotations="QUrl::fromLocalFile()">QUrl::fromLocalFile()</db:link></db:code>.</db:para>
         <db:para>If that is not the case, an attempt is made to turn the string into a http:// or ftp:// URL. The latter in the case the string starts with 'ftp'. The result is then passed through <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code>'s tolerant parser, and in the case or success, a valid <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> is returned, or else a <db:code><db:link xlink:href="qurl.html#QUrl" xrefstyle="function" annotations="QUrl()">QUrl()</db:link></db:code>.</db:para>
         <db:section xml:id="examples">
            <db:title>Examples:</db:title>
            <db:itemizedlist>
               <db:listitem>
                  <db:para>qt-project.org becomes http://qt-project.org</db:para>
               </db:listitem>
               <db:listitem>
                  <db:para>ftp.qt-project.org becomes ftp://ftp.qt-project.org</db:para>
               </db:listitem>
               <db:listitem>
                  <db:para>hostname becomes http://hostname</db:para>
               </db:listitem>
               <db:listitem>
                  <db:para>/home/user/test.html becomes file:///home/user/test.html</db:para>
               </db:listitem>
            </db:itemizedlist>
         </db:section>
         <db:para>This property was introduced in Qt 4.6.</db:para>
      </db:section>
      <db:section>
         <db:title>QUrl QUrl::fromUserInput(const QString &amp;userInput, const QString &amp;workingDirectory, QUrl::UserInputResolutionOptions options)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:type>QUrl</db:type>
            <db:methodname>fromUserInput</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>userInput</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>workingDirectory</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QUrl::UserInputResolutionOptions</db:type>
               <db:parameter>options</db:parameter>
               <db:initializer>DefaultResolution</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns a valid URL from a user supplied <db:code role="argument">userInput</db:code> string if one can be deducted. In the case that is not possible, an invalid <db:code><db:link xlink:href="qurl.html#QUrl" xrefstyle="function" annotations="QUrl()">QUrl()</db:link></db:code> is returned.</db:para>
         <db:para>This overload takes a <db:code role="argument">workingDirectory</db:code> path, in order to be able to handle relative paths. This is especially useful when handling command line arguments. If <db:code role="argument">workingDirectory</db:code> is empty, no handling of relative paths will be done, so this method will behave like its one argument overload.</db:para>
         <db:para>By default, an input string that looks like a relative path will only be treated as such if the file actually exists in the given working directory.</db:para>
         <db:para>If the application can handle files that don't exist yet, it should pass the flag <db:code><db:link xlink:href="qurl.html#UserInputResolutionOption-enum" xrefstyle="enum" annotations="AssumeLocalFile">AssumeLocalFile</db:link></db:code> in <db:code role="argument">options</db:code>.</db:para>
         <db:para>This property was introduced in Qt 5.4.</db:para>
      </db:section>
      <db:section>
         <db:title>QUrl QUrl::resolved(const QUrl &amp;relative) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QUrl</db:type>
            <db:methodname>resolved</db:methodname>
            <db:methodparam>
               <db:type>const QUrl &amp;</db:type>
               <db:parameter>relative</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the result of the merge of this URL with <db:code role="argument">relative</db:code>. This URL is used as a base to convert <db:code role="argument">relative</db:code> to an absolute URL.</db:para>
         <db:para>If <db:code role="argument">relative</db:code> is not a relative URL, this function will return <db:code role="argument">relative</db:code> directly. Otherwise, the paths of the two URLs are merged, and the new URL returned has the scheme and authority of the base URL, but with the merged path, as in the following example:</db:para>
         <db:programlisting>
QUrl baseUrl("http://qt.digia.com/Support/");
QUrl relativeUrl("../Product/Library/");
qDebug(baseUrl.resolved(relativeUrl).toString());
// prints "http://qt.digia.com/Product/Library/"
</db:programlisting>
         <db:para>Calling  with ".." returns a <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> whose directory is one level higher than the original. Similarly, calling  with "../.." removes two levels from the path. If <db:code role="argument">relative</db:code> is "/", the path becomes "/".</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#isRelative" xrefstyle="function" annotations="isRelative()">isRelative()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QUrl::hasFragment() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>hasFragment</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if this URL contains a fragment (i.e., if # was seen on it).</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#fragment" xrefstyle="function" annotations="fragment()">fragment()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setFragment" xrefstyle="function" annotations="setFragment()">setFragment()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
      </db:section>
      <db:section>
         <db:title>bool QUrl::hasQuery() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>hasQuery</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if this URL contains a Query (i.e., if ? was seen on it).</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setQuery" xrefstyle="function" annotations="setQuery()">setQuery()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#query" xrefstyle="function" annotations="query()">query()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#hasFragment" xrefstyle="function" annotations="hasFragment()">hasFragment()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
      </db:section>
      <db:section>
         <db:title>bool QUrl::isEmpty() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isEmpty</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if the URL has no data; otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#clear" xrefstyle="function" annotations="clear()">clear()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QUrl::isLocalFile() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isLocalFile</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if this URL is pointing to a local file path. A URL is a local file path if the scheme is "file".</db:para>
         <db:para>Note that this function considers URLs with hostnames to be local file paths, even if the eventual file path cannot be opened with <db:code><db:link xlink:href="qfile.html#open" xrefstyle="function" annotations="QFile::open()">QFile::open()</db:link></db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#fromLocalFile" xrefstyle="function" annotations="fromLocalFile()">fromLocalFile()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#toLocalFile" xrefstyle="function" annotations="toLocalFile()">toLocalFile()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.8.</db:para>
      </db:section>
      <db:section>
         <db:title>bool QUrl::isParentOf(const QUrl &amp;childUrl) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isParentOf</db:methodname>
            <db:methodparam>
               <db:type>const QUrl &amp;</db:type>
               <db:parameter>childUrl</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if this URL is a parent of <db:code role="argument">childUrl</db:code>. <db:code role="argument">childUrl</db:code> is a child of this URL if the two URLs share the same scheme and authority, and this URL's path is a parent of the path of <db:code role="argument">childUrl</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>bool QUrl::isRelative() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isRelative</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if the URL is relative; otherwise returns <db:code>false</db:code>. A URL is relative reference if its scheme is undefined; this function is therefore equivalent to calling <db:code><db:link xlink:href="qurl.html#scheme" xrefstyle="function" annotations="scheme()">scheme()</db:link></db:code>.<db:code><db:link xlink:href="qurl.html#isEmpty" xrefstyle="function" annotations="isEmpty()">isEmpty()</db:link></db:code>.</db:para>
         <db:para>Relative references are defined in RFC 3986 section 4.2.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#relative-urls-vs-relative-paths" xrefstyle="class" annotations="Relative URLs vs Relative Paths">Relative URLs vs Relative Paths</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QUrl::isValid() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isValid</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if the URL is non-empty and valid; otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>The URL is run through a conformance test. Every part of the URL must conform to the standard encoding rules of the URI standard for the URL to be reported as valid.</db:para>
         <db:programlisting>
bool checkUrl(const QUrl &amp;url) {
    if (!url.isValid()) {
        qDebug("Invalid URL: %s", qUtf8Printable(url.toString()));
        return false;
    }

    return true;
}
</db:programlisting>
      </db:section>
      <db:section>
         <db:title>bool QUrl::matches(const QUrl &amp;url, QUrl::FormattingOptions options) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>matches</db:methodname>
            <db:methodparam>
               <db:type>const QUrl &amp;</db:type>
               <db:parameter>url</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QUrl::FormattingOptions</db:type>
               <db:parameter>options</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if this URL and the given <db:code role="argument">url</db:code> are equal after applying <db:code role="argument">options</db:code> to both; otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>This is equivalent to calling adjusted(options) on both URLs and comparing the resulting urls, but faster.</db:para>
         <db:para>This property was introduced in Qt 5.2.</db:para>
      </db:section>
      <db:section>
         <db:title>bool QUrl::operator!=(const QUrl &amp;url) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>operator!=</db:methodname>
            <db:methodparam>
               <db:type>const QUrl &amp;</db:type>
               <db:parameter>url</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if this URL and the given <db:code role="argument">url</db:code> are not equal; otherwise returns <db:code>false</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>bool QUrl::operator==(const QUrl &amp;url) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>operator==</db:methodname>
            <db:methodparam>
               <db:type>const QUrl &amp;</db:type>
               <db:parameter>url</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if this URL and the given <db:code role="argument">url</db:code> are equal; otherwise returns <db:code>false</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>int QUrl::port(int defaultPort) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>port</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>defaultPort</db:parameter>
               <db:initializer>-1</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the port of the URL, or <db:code role="argument">defaultPort</db:code> if the port is unspecified.</db:para>
         <db:para>Example:</db:para>
         <db:programlisting>
QTcpSocket sock;
sock.connectToHost(url.host(), url.port(80));
</db:programlisting>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setPort" xrefstyle="function" annotations="setPort()">setPort()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.1.</db:para>
      </db:section>
      <db:section>
         <db:title>void QUrl::clear()</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>clear</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Resets the content of the <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code>. After calling this function, the <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> is equal to one that has been constructed with the default empty constructor.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#isEmpty" xrefstyle="function" annotations="isEmpty()">isEmpty()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QUrl::setAuthority(const QString &amp;authority, QUrl::ParsingMode mode)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setAuthority</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>authority</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QUrl::ParsingMode</db:type>
               <db:parameter>mode</db:parameter>
               <db:initializer>TolerantMode</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the authority of the URL to <db:code role="argument">authority</db:code>.</db:para>
         <db:para>The authority of a URL is the combination of user info, a host name and a port. All of these elements are optional; an empty authority is therefore valid.</db:para>
         <db:para>The user info and host are separated by a '@', and the host and port are separated by a ':'. If the user info is empty, the '@' must be omitted; although a stray ':' is permitted if the port is empty.</db:para>
         <db:para>The following example shows a valid authority string:</db:para>
         <db:mediaobject>
            <db:imageobject>
               <db:imagedata fileref="images/qurl-authority.png"/>
            </db:imageobject>
         </db:mediaobject>
         <db:para>The <db:code role="argument">authority</db:code> data is interpreted according to <db:code role="argument">mode</db:code>: in <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="StrictMode">StrictMode</db:link></db:code>, any '%' characters must be followed by exactly two hexadecimal characters and some characters (including space) are not allowed in undecoded form. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="TolerantMode">TolerantMode</db:link></db:code> (the default), all characters are accepted in undecoded form and the tolerant parser will correct stray '%' not followed by two hex characters.</db:para>
         <db:para>This function does not allow <db:code role="argument">mode</db:code> to be <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="QUrl::DecodedMode">QUrl::DecodedMode</db:link></db:code>. To set fully decoded data, call <db:code><db:link xlink:href="qurl.html#setUserName" xrefstyle="function" annotations="setUserName()">setUserName()</db:link></db:code>, <db:code><db:link xlink:href="qurl.html#setPassword" xrefstyle="function" annotations="setPassword()">setPassword()</db:link></db:code>, <db:code><db:link xlink:href="qurl.html#setHost" xrefstyle="function" annotations="setHost()">setHost()</db:link></db:code> and <db:code><db:link xlink:href="qurl.html#setPort" xrefstyle="function" annotations="setPort()">setPort()</db:link></db:code> individually.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#authority" xrefstyle="function" annotations="authority()">authority()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setUserInfo" xrefstyle="function" annotations="setUserInfo()">setUserInfo()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setHost" xrefstyle="function" annotations="setHost()">setHost()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setPort" xrefstyle="function" annotations="setPort()">setPort()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QUrl::setFragment(const QString &amp;fragment, QUrl::ParsingMode mode)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setFragment</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>fragment</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QUrl::ParsingMode</db:type>
               <db:parameter>mode</db:parameter>
               <db:initializer>TolerantMode</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the fragment of the URL to <db:code role="argument">fragment</db:code>. The fragment is the last part of the URL, represented by a '#' followed by a string of characters. It is typically used in HTTP for referring to a certain link or point on a page:</db:para>
         <db:mediaobject>
            <db:imageobject>
               <db:imagedata fileref="images/qurl-fragment.png"/>
            </db:imageobject>
         </db:mediaobject>
         <db:para>The fragment is sometimes also referred to as the URL "reference".</db:para>
         <db:para>Passing an argument of QString() (a null <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>) will unset the fragment. Passing an argument of <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>("") (an empty but not null <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>) will set the fragment to an empty string (as if the original URL had a lone "#").</db:para>
         <db:para>The <db:code role="argument">fragment</db:code> data is interpreted according to <db:code role="argument">mode</db:code>: in <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="StrictMode">StrictMode</db:link></db:code>, any '%' characters must be followed by exactly two hexadecimal characters and some characters (including space) are not allowed in undecoded form. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="TolerantMode">TolerantMode</db:link></db:code>, all characters are accepted in undecoded form and the tolerant parser will correct stray '%' not followed by two hex characters. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="DecodedMode">DecodedMode</db:link></db:code>, '%' stand for themselves and encoded characters are not possible.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="QUrl::DecodedMode">QUrl::DecodedMode</db:link></db:code> should be used when setting the fragment from a data source which is not a URL or with a fragment obtained by calling <db:code><db:link xlink:href="qurl.html#fragment" xrefstyle="function" annotations="fragment()">fragment()</db:link></db:code> with the <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code> formatting option.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#fragment" xrefstyle="function" annotations="fragment()">fragment()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#hasFragment" xrefstyle="function" annotations="hasFragment()">hasFragment()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QUrl::setHost(const QString &amp;host, QUrl::ParsingMode mode)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setHost</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>host</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QUrl::ParsingMode</db:type>
               <db:parameter>mode</db:parameter>
               <db:initializer>DecodedMode</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the host of the URL to <db:code role="argument">host</db:code>. The host is part of the authority.</db:para>
         <db:para>The <db:code role="argument">host</db:code> data is interpreted according to <db:code role="argument">mode</db:code>: in <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="StrictMode">StrictMode</db:link></db:code>, any '%' characters must be followed by exactly two hexadecimal characters and some characters (including space) are not allowed in undecoded form. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="TolerantMode">TolerantMode</db:link></db:code>, all characters are accepted in undecoded form and the tolerant parser will correct stray '%' not followed by two hex characters. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="DecodedMode">DecodedMode</db:link></db:code>, '%' stand for themselves and encoded characters are not possible.</db:para>
         <db:para>Note that, in all cases, the result of the parsing must be a valid hostname according to STD 3 rules, as modified by the Internationalized Resource Identifiers specification (RFC 3987). Invalid hostnames are not permitted and will cause <db:code><db:link xlink:href="qurl.html#isValid" xrefstyle="function" annotations="isValid()">isValid()</db:link></db:code> to become false.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#host" xrefstyle="function" annotations="host()">host()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setAuthority" xrefstyle="function" annotations="setAuthority()">setAuthority()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QUrl::setIdnWhitelist(const QStringList &amp;list)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>static</db:modifier>
            <db:void/>
            <db:methodname>setIdnWhitelist</db:methodname>
            <db:methodparam>
               <db:type>const QStringList &amp;</db:type>
               <db:parameter>list</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the whitelist of Top-Level Domains (TLDs) that are allowed to have non-ASCII characters in domains to the value of <db:code role="argument">list</db:code>.</db:para>
         <db:para>Note that if you call this function, you need to do so <db:emphasis>before</db:emphasis> you start any threads that might access <db:code><db:link xlink:href="qurl.html#idnWhitelist" xrefstyle="function" annotations="idnWhitelist()">idnWhitelist()</db:link></db:code>.</db:para>
         <db:para>Qt comes with a default list that contains the Internet top-level domains that have published support for Internationalized Domain Names (IDNs) and rules to guarantee that no deception can happen between similarly-looking characters (such as the Latin lowercase letter <db:code>'a'</db:code> and the Cyrillic equivalent, which in most fonts are visually identical).</db:para>
         <db:para>This list is periodically maintained, as registrars publish new rules.</db:para>
         <db:para>This function is provided for those who need to manipulate the list, in order to add or remove a TLD. It is not recommended to change its value for purposes other than testing, as it may expose users to security risks.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#idnWhitelist" xrefstyle="function" annotations="idnWhitelist()">idnWhitelist()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
      </db:section>
      <db:section>
         <db:title>void QUrl::setPassword(const QString &amp;password, QUrl::ParsingMode mode)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setPassword</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>password</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QUrl::ParsingMode</db:type>
               <db:parameter>mode</db:parameter>
               <db:initializer>DecodedMode</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the URL's password to <db:code role="argument">password</db:code>. The <db:code role="argument">password</db:code> is part of the user info element in the authority of the URL, as described in <db:code><db:link xlink:href="qurl.html#setUserInfo" xrefstyle="function" annotations="setUserInfo()">setUserInfo()</db:link></db:code>.</db:para>
         <db:para>The <db:code role="argument">password</db:code> data is interpreted according to <db:code role="argument">mode</db:code>: in <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="StrictMode">StrictMode</db:link></db:code>, any '%' characters must be followed by exactly two hexadecimal characters and some characters (including space) are not allowed in undecoded form. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="TolerantMode">TolerantMode</db:link></db:code>, all characters are accepted in undecoded form and the tolerant parser will correct stray '%' not followed by two hex characters. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="DecodedMode">DecodedMode</db:link></db:code>, '%' stand for themselves and encoded characters are not possible.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="QUrl::DecodedMode">QUrl::DecodedMode</db:link></db:code> should be used when setting the password from a data source which is not a URL, such as a password dialog shown to the user or with a password obtained by calling <db:code><db:link xlink:href="qurl.html#password" xrefstyle="function" annotations="password()">password()</db:link></db:code> with the <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code> formatting option.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#password" xrefstyle="function" annotations="password()">password()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setUserInfo" xrefstyle="function" annotations="setUserInfo()">setUserInfo()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QUrl::setPath(const QString &amp;path, QUrl::ParsingMode mode)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setPath</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>path</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QUrl::ParsingMode</db:type>
               <db:parameter>mode</db:parameter>
               <db:initializer>DecodedMode</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the path of the URL to <db:code role="argument">path</db:code>. The path is the part of the URL that comes after the authority but before the query string.</db:para>
         <db:mediaobject>
            <db:imageobject>
               <db:imagedata fileref="images/qurl-ftppath.png"/>
            </db:imageobject>
         </db:mediaobject>
         <db:para>For non-hierarchical schemes, the path will be everything following the scheme declaration, as in the following example:</db:para>
         <db:mediaobject>
            <db:imageobject>
               <db:imagedata fileref="images/qurl-mailtopath.png"/>
            </db:imageobject>
         </db:mediaobject>
         <db:para>The <db:code role="argument">path</db:code> data is interpreted according to <db:code role="argument">mode</db:code>: in <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="StrictMode">StrictMode</db:link></db:code>, any '%' characters must be followed by exactly two hexadecimal characters and some characters (including space) are not allowed in undecoded form. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="TolerantMode">TolerantMode</db:link></db:code> (the default), all characters are accepted in undecoded form and the tolerant parser will correct stray '%' not followed by two hex characters. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="DecodedMode">DecodedMode</db:link></db:code>, '%' stand for themselves and encoded characters are not possible.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="QUrl::DecodedMode">QUrl::DecodedMode</db:link></db:code> should be used when setting the path from a data source which is not a URL, such as a dialog shown to the user or with a path obtained by calling <db:code><db:link xlink:href="qurl.html#path" xrefstyle="function" annotations="path()">path()</db:link></db:code> with the <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code> formatting option.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#path" xrefstyle="function" annotations="path()">path()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QUrl::setPort(int port)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setPort</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>port</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the port of the URL to <db:code role="argument">port</db:code>. The port is part of the authority of the URL, as described in <db:code><db:link xlink:href="qurl.html#setAuthority" xrefstyle="function" annotations="setAuthority()">setAuthority()</db:link></db:code>.</db:para>
         <db:para>
            <db:code role="argument">port</db:code> must be between 0 and 65535 inclusive. Setting the port to -1 indicates that the port is unspecified.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#port" xrefstyle="function" annotations="port()">port()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QUrl::setQuery(const QString &amp;query, QUrl::ParsingMode mode)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setQuery</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>query</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QUrl::ParsingMode</db:type>
               <db:parameter>mode</db:parameter>
               <db:initializer>TolerantMode</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the query string of the URL to <db:code role="argument">query</db:code>.</db:para>
         <db:para>This function is useful if you need to pass a query string that does not fit into the key-value pattern, or that uses a different scheme for encoding special characters than what is suggested by <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code>.</db:para>
         <db:para>Passing a value of QString() to <db:code role="argument">query</db:code> (a null <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>) unsets the query completely. However, passing a value of <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>("") will set the query to an empty value, as if the original URL had a lone "?".</db:para>
         <db:para>The <db:code role="argument">query</db:code> data is interpreted according to <db:code role="argument">mode</db:code>: in <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="StrictMode">StrictMode</db:link></db:code>, any '%' characters must be followed by exactly two hexadecimal characters and some characters (including space) are not allowed in undecoded form. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="TolerantMode">TolerantMode</db:link></db:code>, all characters are accepted in undecoded form and the tolerant parser will correct stray '%' not followed by two hex characters. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="DecodedMode">DecodedMode</db:link></db:code>, '%' stand for themselves and encoded characters are not possible.</db:para>
         <db:para>Query strings often contain percent-encoded sequences, so use of <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="DecodedMode">DecodedMode</db:link></db:code> is discouraged. One special sequence to be aware of is that of the plus character ('+'). <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> does not convert spaces to plus characters, even though HTML forms posted by web browsers do. In order to represent an actual plus character in a query, the sequence "%2B" is usually used. This function will leave "%2B" sequences untouched in <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="TolerantMode">TolerantMode</db:link></db:code> or <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="StrictMode">StrictMode</db:link></db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#query" xrefstyle="function" annotations="query()">query()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#hasQuery" xrefstyle="function" annotations="hasQuery()">hasQuery()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QUrl::setQuery(const QUrlQuery &amp;query)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setQuery</db:methodname>
            <db:methodparam>
               <db:type>const QUrlQuery &amp;</db:type>
               <db:parameter>query</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Sets the query string of the URL to <db:code role="argument">query</db:code>.</db:para>
         <db:para>This function reconstructs the query string from the <db:code><db:link xlink:href="qurlquery.html" xrefstyle="class" annotations="QUrlQuery">QUrlQuery</db:link></db:code> object and sets on this <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> object. This function does not have parsing parameters because the <db:code><db:link xlink:href="qurlquery.html" xrefstyle="class" annotations="QUrlQuery">QUrlQuery</db:link></db:code> contains data that is already parsed.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#query" xrefstyle="function" annotations="query()">query()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#hasQuery" xrefstyle="function" annotations="hasQuery()">hasQuery()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.0.</db:para>
      </db:section>
      <db:section>
         <db:title>void QUrl::setScheme(const QString &amp;scheme)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setScheme</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>scheme</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the scheme of the URL to <db:code role="argument">scheme</db:code>. As a scheme can only contain ASCII characters, no conversion or decoding is done on the input. It must also start with an ASCII letter.</db:para>
         <db:para>The scheme describes the type (or protocol) of the URL. It's represented by one or more ASCII characters at the start the URL.</db:para>
         <db:para>A scheme is strictly RFC 3986-compliant: <db:code>scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )</db:code>
         </db:para>
         <db:para>The following example shows a URL where the scheme is "ftp":</db:para>
         <db:mediaobject>
            <db:imageobject>
               <db:imagedata fileref="images/qurl-authority2.png"/>
            </db:imageobject>
         </db:mediaobject>
         <db:para>To set the scheme, the following call is used:</db:para>
         <db:programlisting language="other">QUrl url;
url.setScheme("ftp");</db:programlisting>
         <db:para>The scheme can also be empty, in which case the URL is interpreted as relative.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#scheme" xrefstyle="function" annotations="scheme()">scheme()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#isRelative" xrefstyle="function" annotations="isRelative()">isRelative()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QUrl::setUrl(const QString &amp;url, QUrl::ParsingMode parsingMode)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setUrl</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>url</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QUrl::ParsingMode</db:type>
               <db:parameter>parsingMode</db:parameter>
               <db:initializer>TolerantMode</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Parses <db:code role="argument">url</db:code> and sets this object to that value. <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> will automatically percent encode all characters that are not allowed in a URL and decode the percent-encoded sequences that represent an unreserved character (letters, digits, hyphens, undercores, dots and tildes). All other characters are left in their original forms.</db:para>
         <db:para>Parses the <db:code role="argument">url</db:code> using the parser mode <db:code role="argument">parsingMode</db:code>. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="TolerantMode">TolerantMode</db:link></db:code> (the default), <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> will correct certain mistakes, notably the presence of a percent character ('%') not followed by two hexadecimal digits, and it will accept any character in any position. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="StrictMode">StrictMode</db:link></db:code>, encoding mistakes will not be tolerated and <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> will also check that certain forbidden characters are not present in unencoded form. If an error is detected in <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="StrictMode">StrictMode</db:link></db:code>, <db:code><db:link xlink:href="qurl.html#isValid" xrefstyle="function" annotations="isValid()">isValid()</db:link></db:code> will return false. The parsing mode <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="DecodedMode">DecodedMode</db:link></db:code> is not permitted in this context and will produce a run-time warning.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#url" xrefstyle="function" annotations="url()">url()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#toString" xrefstyle="function" annotations="toString()">toString()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QUrl::setUserInfo(const QString &amp;userInfo, QUrl::ParsingMode mode)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setUserInfo</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>userInfo</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QUrl::ParsingMode</db:type>
               <db:parameter>mode</db:parameter>
               <db:initializer>TolerantMode</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the user info of the URL to <db:code role="argument">userInfo</db:code>. The user info is an optional part of the authority of the URL, as described in <db:code><db:link xlink:href="qurl.html#setAuthority" xrefstyle="function" annotations="setAuthority()">setAuthority()</db:link></db:code>.</db:para>
         <db:para>The user info consists of a user name and optionally a password, separated by a ':'. If the password is empty, the colon must be omitted. The following example shows a valid user info string:</db:para>
         <db:mediaobject>
            <db:imageobject>
               <db:imagedata fileref="images/qurl-authority3.png"/>
            </db:imageobject>
         </db:mediaobject>
         <db:para>The <db:code role="argument">userInfo</db:code> data is interpreted according to <db:code role="argument">mode</db:code>: in <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="StrictMode">StrictMode</db:link></db:code>, any '%' characters must be followed by exactly two hexadecimal characters and some characters (including space) are not allowed in undecoded form. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="TolerantMode">TolerantMode</db:link></db:code> (the default), all characters are accepted in undecoded form and the tolerant parser will correct stray '%' not followed by two hex characters.</db:para>
         <db:para>This function does not allow <db:code role="argument">mode</db:code> to be <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="QUrl::DecodedMode">QUrl::DecodedMode</db:link></db:code>. To set fully decoded data, call <db:code><db:link xlink:href="qurl.html#setUserName" xrefstyle="function" annotations="setUserName()">setUserName()</db:link></db:code> and <db:code><db:link xlink:href="qurl.html#setPassword" xrefstyle="function" annotations="setPassword()">setPassword()</db:link></db:code> individually.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#userInfo" xrefstyle="function" annotations="userInfo()">userInfo()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setUserName" xrefstyle="function" annotations="setUserName()">setUserName()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setPassword" xrefstyle="function" annotations="setPassword()">setPassword()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setAuthority" xrefstyle="function" annotations="setAuthority()">setAuthority()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QUrl::setUserName(const QString &amp;userName, QUrl::ParsingMode mode)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setUserName</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>userName</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QUrl::ParsingMode</db:type>
               <db:parameter>mode</db:parameter>
               <db:initializer>DecodedMode</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the URL's user name to <db:code role="argument">userName</db:code>. The <db:code role="argument">userName</db:code> is part of the user info element in the authority of the URL, as described in <db:code><db:link xlink:href="qurl.html#setUserInfo" xrefstyle="function" annotations="setUserInfo()">setUserInfo()</db:link></db:code>.</db:para>
         <db:para>The <db:code role="argument">userName</db:code> data is interpreted according to <db:code role="argument">mode</db:code>: in <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="StrictMode">StrictMode</db:link></db:code>, any '%' characters must be followed by exactly two hexadecimal characters and some characters (including space) are not allowed in undecoded form. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="TolerantMode">TolerantMode</db:link></db:code> (the default), all characters are accepted in undecoded form and the tolerant parser will correct stray '%' not followed by two hex characters. In <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="DecodedMode">DecodedMode</db:link></db:code>, '%' stand for themselves and encoded characters are not possible.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qurl.html#ParsingMode-enum" xrefstyle="enum" annotations="QUrl::DecodedMode">QUrl::DecodedMode</db:link></db:code> should be used when setting the user name from a data source which is not a URL, such as a password dialog shown to the user or with a user name obtained by calling <db:code><db:link xlink:href="qurl.html#userName" xrefstyle="function" annotations="userName()">userName()</db:link></db:code> with the <db:code><db:link xlink:href="qurl.html#ComponentFormattingOption-enum" xrefstyle="enum" annotations="QUrl::FullyDecoded">QUrl::FullyDecoded</db:link></db:code> formatting option.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#userName" xrefstyle="function" annotations="userName()">userName()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qurl.html#setUserInfo" xrefstyle="function" annotations="setUserInfo()">setUserInfo()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Macro Documentation</db:title>
      <db:section>
         <db:title>QT_NO_URL_CAST_FROM_STRING</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:methodname>QT_NO_URL_CAST_FROM_STRING</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Disables automatic conversions from <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> (or char *) to <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code>.</db:para>
         <db:para>Compiling your code with this define is useful when you have a lot of code that uses <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> for file names and you wish to convert it to use <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> for network transparency. In any code that uses <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code>, it can help avoid missing <db:code><db:link xlink:href="qurl.html#resolved" xrefstyle="function" annotations="QUrl::resolved()">QUrl::resolved()</db:link></db:code> calls, and other misuses of <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code> to <db:code><db:link xlink:href="qurl.html" xrefstyle="class" annotations="QUrl">QUrl</db:link></db:code> conversions.</db:para>
         <db:para>For example, if you have code like</db:para>
         <db:para>For example, if you have code like</db:para>
         <db:programlisting>url = filename; // probably not what you want</db:programlisting>
         <db:para>you can rewrite it as</db:para>
         <db:para>you can rewrite it as</db:para>
         <db:programlisting language="other" role="newcode">url = QUrl::fromLocalFile(filename);
url = baseurl.resolved(QUrl(filename));</db:programlisting>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qstring.html#QT_NO_CAST_FROM_ASCII" xrefstyle="function" annotations="QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
   </db:section>
</db:article>
