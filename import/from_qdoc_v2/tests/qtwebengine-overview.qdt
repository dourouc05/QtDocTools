<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.2">
  <db:title>Qt WebEngine Overview</db:title>
  <db:para>The Qt  module provides a web browser engine that makes it easy to embed content from the World Wide Web into your Qt application on platforms that do not have a native web engine.</db:para>
  <db:para>Qt  provides C++ classes and QML types for rendering HTML, XHTML, and SVG documents, styled using Cascading Style Sheets (CSS) and scripted with JavaScript. HTML documents can be made fully editable by the user through the use of the <db:code>contenteditable</db:code> attribute on HTML elements.</db:para>
  <db:section xml:id="qt-webengine-architecture">
    <db:title>Qt WebEngine Architecture</db:title>
    <db:mediaobject>
      <db:imageobject>
        <db:imagedata fileref="images/qtwebengine-architecture.png"/>
      </db:imageobject>
    </db:mediaobject>
    <db:para>The functionality in Qt  is divided into the following modules:</db:para>
    <db:itemizedlist>
      <db:listitem>
        <db:para>
          <db:link xlink:href="qtwebengine-overview.html#qt-webengine-widgets-module" xrefstyle="page" annotations="Qt WebEngine Widgets Module">Qt WebEngine Widgets Module</db:link> for creating widget-based web applications</db:para>
      </db:listitem>
      <db:listitem>
        <db:para>
          <db:link xlink:href="qtwebengine-overview.html#qt-webengine-module" xrefstyle="page" annotations="Qt WebEngine Module">Qt WebEngine Module</db:link> for creating Qt Quick based web applications</db:para>
      </db:listitem>
      <db:listitem>
        <db:para>
          <db:link xlink:href="qtwebengine-overview.html#qt-webengine-core-module" xrefstyle="page" annotations="Qt WebEngine Core Module">Qt WebEngine Core Module</db:link> for interacting with Chromium</db:para>
      </db:listitem>
    </db:itemizedlist>
    <db:para>Page rendering and JavaScript execution are separated from the GUI process into the Qt  Process. It is a library that must be shipped with the application if the Qt libraries are bundled into the application.</db:para>
  </db:section>
  <db:section xml:id="qt-webengine-widgets-module">
    <db:title>Qt WebEngine Widgets Module</db:title>
    <db:mediaobject>
      <db:imageobject>
        <db:imagedata fileref="images/qtwebenginewidgets-model.png"/>
      </db:imageobject>
    </db:mediaobject>
    <db:para>A <db:emphasis>web engine view</db:emphasis> is the main widget component of the Qt  module. It can be used in various applications to load web content. Within a view, a <db:emphasis>web engine page</db:emphasis> holds a main frame that is responsible for web content, the <db:emphasis>history</db:emphasis> of navigated links, and <db:emphasis>actions</db:emphasis>. The view and page are quite similar, as they provide a set of common functions.</db:para>
    <db:para>All pages belong to a <db:emphasis>web engine profile</db:emphasis> that contains shared <db:emphasis>settings</db:emphasis>, <db:emphasis>scripts</db:emphasis>, and <db:emphasis>cookies</db:emphasis>. Profiles can be used to isolate pages from each other. A typical use case is a dedicated profile for a <db:emphasis>private browsing</db:emphasis> mode, where no information is permanently saved.</db:para>
    <db:note>
      <db:para> The Qt  Widgets module uses the <db:link xlink:href="qtquick-visualcanvas-scenegraph.html" xrefstyle="page" annotations="Qt Quick Scene Graph">Qt Quick scene graph</db:link> to compose the elements of a web page into one view. This means that the UI process requires OpenGL ES 2.0 or OpenGL 2.0 for its rendering.</db:para>
    </db:note>
  </db:section>
  <db:section xml:id="qt-webengine-module">
    <db:title>Qt WebEngine Module</db:title>
    <db:mediaobject>
      <db:imageobject>
        <db:imagedata fileref="images/qtwebengine-model.png"/>
      </db:imageobject>
    </db:mediaobject>
    <db:para>The Qt  QML implementation contains the same elements as the Qt  Widgets implementation, except that there is no separately accessible web engine page. The supported page functionality is integrated into the web engine view.</db:para>
  </db:section>
  <db:section xml:id="qt-webengine-core-module">
    <db:title>Qt WebEngine Core Module</db:title>
    <db:para>The Qt  core is based on the <db:link xlink:href="http://www.chromium.org" xrefstyle="page" annotations="Chromium Project">Chromium Project</db:link>. Chromium provides its own network and painting engines and is developed tightly together with its dependent modules.</db:para>
    <db:note>
      <db:para> Qt  is based on Chromium, but does not contain or use any services or add-ons that might be part of the Chrome browser that is built and delivered by Google. You can find more detailed information about the differences between Chromium and Chrome in this overview that is part of the documentation in the <db:link xlink:href="http://www.chromium.org" xrefstyle="page" annotations="Chromium Project">Chromium Project</db:link> upstream source tree.</db:para>
    </db:note>
    <db:para>This version of Qt  is based on Chromium version 65.0.3325.151, with additional security fixes from newer versions.</db:para>
  </db:section>
  <db:section xml:id="qt-webengine-process">
    <db:title>Qt WebEngine Process</db:title>
    <db:para>The Qt  Process is a separate executable that is used to render web pages and execute JavaScript. This mitigates security issues and isolates crashes caused by specific content.</db:para>
  </db:section>
  <db:section xml:id="embedding-web-content-into-widget-based-applications">
    <db:title>Embedding Web Content into Widget Based Applications</db:title>
    <db:para>Use the QWebEngineView class to display web pages in the simplest way. Because it is a widget, you can embed QWebEngineView into your forms and use its convenience functions to download and display web sites.</db:para>
    <db:programlisting language="other">QWebEngineView *view = new QWebEngineView(parent);
      view-&gt;load(QUrl("http://www.qt.io/"));
      view-&gt;show();</db:programlisting>
    <db:para>An instance of QWebEngineView has one QWebEnginePage. QWebEnginePage can have a QWebEngineHistory that provides access to the page's navigation history and several <db:code><db:link xlink:href="qaction.html" xrefstyle="class" annotations="QAction">QAction</db:link></db:code> objects that apply actions on the web page. In addition, a QWebEnginePage has the ability to run JavaScript code in the context of the page's main frame and to enable customization of handlers for specific events like showing custom authentication dialogs.</db:para>
    <db:para>Each QWebEnginePage belongs to a QWebEngineProfile that can have a QWebEngineSettings for specifying page settings, a QWebEngineScriptCollection for running scripts on the page, and a QWebEngineCookieStore for accessing the HTTP cookies of Chromium. A QWebEnginePage can also directly point to a script collection.</db:para>
    <db:para>For a widget based application, the web engine is automatically initialized, unless it is placed in a plugin. In that case, it must be initialized in the application main source file by using QtWebEngine::initialize, as illustrated by the following code snippet:</db:para>
    <db:programlisting language="other">int main(int argc, char **argv)
      {
      QApplication app(argc, argv);
      
      QtWebEngine::initialize();
      
      QMainWindow window;
      window.show();
      
      return app.exec();
      }</db:programlisting>
  </db:section>
  <db:section xml:id="embedding-web-content-into-qt-quick-applications">
    <db:title>Embedding Web Content into Qt Quick Applications</db:title>
    <db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.html" xrefstyle="" annotations="WebEngineView">WebEngineView</db:link> QML type allows Qt Quick applications to render regions of dynamic web content. A <db:emphasis><db:link xlink:href="qml-qtwebengine-webengineview.html" xrefstyle="" annotations="WebEngineView">WebEngineView</db:link></db:emphasis> type may share the screen with other QML types or encompass the full screen as specified within the Qt Quick application.</db:para>
    <db:para>To make sure that OpenGL context can be shared between the GUI and render processes, the web engine must be initialized by using QtWebEngine::initialize in the application main source file, as illustrated by the following code snippet:</db:para>
    <db:programlisting language="other">int main(int argc, char *argv[])
      {
      QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);
      QGuiApplication app(argc, argv);
      
      QtWebEngine::initialize();
      
      QQmlApplicationEngine engine;
      engine.load(QUrl(QStringLiteral("qrc:/main.qml")));
      
      return app.exec();
      }</db:programlisting>
    <db:para>An application can load pages into the <db:link xlink:href="qml-qtwebengine-webengineview.html" xrefstyle="" annotations="WebEngineView">WebEngineView</db:link>, using either an URL or HTML string, and navigate within session history. By default, links to different pages load within the same <db:link xlink:href="qml-qtwebengine-webengineview.html" xrefstyle="" annotations="WebEngineView">WebEngineView</db:link> object, but web sites may request them to be opened as a new tab, window, or dialog.</db:para>
    <db:para>The following sample QML application loads a web page using the <db:link xlink:href="qml-qtwebengine-webengineview.html#url-prop" xrefstyle="" annotations="WebEngineView::url">url</db:link> property:</db:para>
    <db:programlisting language="other">import QtQuick 2.0
      import QtQuick.Window 2.0
      import QtWebEngine 1.0
      
      Window {
      width: 1024
      height: 750
      visible: true
      WebEngineView {
      anchors.fill: parent
      url: "http://www.qt.io"
      }
      }</db:programlisting>
  </db:section>
  <db:section xml:id="script-injection">
    <db:title>Script Injection</db:title>
    <db:para>Qt  does not allow direct access to the document object model (DOM) of a page. However, the DOM can be inspected and adapted by injecting scripts.</db:para>
    <db:para>The DOM of a page is constructed when the document is ready, typically when the page is completely loaded. Therefore, executing scripts as soon as a document is created is not suitable for DOM operations, where one has to wait until the DOM is ready.</db:para>
    <db:para>In addition, an injected script shares the same <db:emphasis>world</db:emphasis> as the other scripts executed on the page, which might lead to conflicts. To avoid this, the QWebEngineScript class and the <db:link xlink:href="qml-qtwebengine-webenginescript.html" xrefstyle="" annotations="WebEngineScript">WebEngineScript</db:link> QML type provide implementations of the Chromium API for <db:emphasis>Content Script Extensions</db:emphasis>. They specify the script to run, the injection point, and the world where the script is run. This enables accessing the DOM to manipulate it within a world.</db:para>
    <db:para>Since Qt 5.8, Qt  supports augmenting a script by using the following <db:link xlink:href="https://wiki.greasespot.net/Metadata_Block#.40name" xrefstyle="page" annotations="Metadata Block">Greasemonkey-like attributes</db:link>:</db:para>
    <db:itemizedlist>
      <db:listitem>
        <db:para>
          <db:code>@exclude &lt;regexp&gt;</db:code>
        </db:para>
      </db:listitem>
      <db:listitem>
        <db:para>
          <db:code>@include &lt;regexp&gt;</db:code>
        </db:para>
      </db:listitem>
      <db:listitem>
        <db:para>
          <db:code>@match &lt;regexp&gt;</db:code>
        </db:para>
      </db:listitem>
      <db:listitem>
        <db:para>
          <db:code>@name &lt;free text&gt;</db:code>
        </db:para>
      </db:listitem>
      <db:listitem>
        <db:para>
          <db:code>@run-at [document-start|document-end|document-idle]</db:code>
        </db:para>
      </db:listitem>
    </db:itemizedlist>
    <db:para>The attributes determine if and when a <db:link xlink:href="https://www.chromium.org/developers/design-documents/user-scripts" xrefstyle="page" annotations="User Scripts">user script</db:link> is run. They must be placed immediately in the beginning of the script, inside a <db:code>==UserScript==</db:code> comment:</db:para>
    <db:programlisting language="other">// ==UserScript==
      // @include http://*.qt.io/*
      // @exclude http://wiki.qt.io/*
      // ==/UserScript==
      
      window.alert("Page is from qt.io, but not wiki.qt.io");</db:programlisting>
    <db:para>If your  application is built using the Qt Quick Compiler, and the application ships JavaScript files inside .qrc resources, consider reading the section <db:link xlink:href="qtwebengine-deploying.html#javascript-files-in-qt-resource-files" xrefstyle="page" annotations="JavaScript Files in Qt Resource Files">JavaScript Files in Qt Resource Files</db:link>.</db:para>
  </db:section>
  <db:section xml:id="managing-certificates">
    <db:title>Managing Certificates</db:title>
    <db:para>Qt  uses its own network stack, and therefore <db:code><db:link xlink:href="qsslconfiguration.html" xrefstyle="class" annotations="QSslConfiguration">QSslConfiguration</db:link></db:code> is not used to open SSL connections. Instead, Qt  uses the root CA certificates from the operating system to validate the peer's certificate.</db:para>
    <db:para>The <db:link xlink:href="qml-qtwebengine-webenginecertificateerror.html#error-prop" xrefstyle="" annotations="WebEngineCertificateError::error">WebEngineCertificateError::error</db:link> and QWebEngineCertificateError::Error enumerations provide information about the types of certificate errors that might occur. The errors can be handled by using the <db:link xlink:href="qml-qtwebengine-webengineview.html#certificateError-signal" xrefstyle="" annotations="WebEngineView::certificateError">WebEngineView::certificateError</db:link> QML method or by reimplementing the QWebEnginePage::certificateError function.</db:para>
  </db:section>
  <db:section xml:id="proxy-support">
    <db:title>Proxy Support</db:title>
    <db:para>Qt  uses the proxy settings from <db:link xlink:href="qtnetwork-index.html" xrefstyle="page" annotations="Qt Network">Qt Network</db:link>, and forwards them to Chromium's networking stack. If <db:code><db:link xlink:href="qnetworkproxy.html#applicationProxy" xrefstyle="function" annotations="QNetworkProxy::applicationProxy">QNetworkProxy::applicationProxy</db:link></db:code> is set, it will also be used for Qt . If <db:code><db:link xlink:href="qnetworkproxyfactory.html#usesSystemConfiguration" xrefstyle="function" annotations="QNetworkProxyFactory::usesSystemConfiguration()">QNetworkProxyFactory::usesSystemConfiguration()</db:link></db:code> is enabled, the proxy settings are automatically retrieved from the system. Settings from an installed <db:code><db:link xlink:href="qnetworkproxyfactory.html" xrefstyle="class" annotations="QNetworkProxyFactory">QNetworkProxyFactory</db:link></db:code> will be ignored, though.</db:para>
    <db:para>Not all properties of <db:code><db:link xlink:href="qnetworkproxy.html" xrefstyle="class" annotations="QNetworkProxy">QNetworkProxy</db:link></db:code> are supported by Qt . That is, <db:code><db:link xlink:href="qnetworkproxy.html#type" xrefstyle="function" annotations="QNetworkProxy::type()">QNetworkProxy::type()</db:link></db:code>, <db:code><db:link xlink:href="qnetworkproxy.html#hostName" xrefstyle="function" annotations="QNetworkProxy::hostName()">QNetworkProxy::hostName()</db:link></db:code> and <db:code><db:link xlink:href="qnetworkproxy.html#port" xrefstyle="function" annotations="QNetworkProxy::port()">QNetworkProxy::port()</db:link></db:code> are taken into account. All other proxy settings such as <db:code><db:link xlink:href="qnetworkproxy.html#rawHeader" xrefstyle="function" annotations="QNetworkProxy::rawHeader()">QNetworkProxy::rawHeader()</db:link></db:code>, <db:code><db:link xlink:href="qnetworkproxy.html#user" xrefstyle="function" annotations="QNetworkProxy::user()">QNetworkProxy::user()</db:link></db:code>, or <db:code><db:link xlink:href="qnetworkproxy.html#password" xrefstyle="function" annotations="QNetworkProxy::password()">QNetworkProxy::password()</db:link></db:code> are ignored.</db:para>
    <db:para>If a proxy requires authentication, QWebEnginePage::proxyAuthenticationRequired is emitted. For Qt Quick, a dialog is shown.</db:para>
  </db:section>
  <db:section xml:id="high-dpi-support">
    <db:title>High DPI Support</db:title>
    <db:para>To support High DPI devices, it is recommended that the application attribute <db:code><db:link xlink:href="qt.html#ApplicationAttribute-enum" xrefstyle="enum" annotations="Qt::AA_EnableHighDpiScaling">Qt::AA_EnableHighDpiScaling</db:link></db:code> is set to enable automatic scaling based on the pixel density of the monitor. In Qt  applications, the scaling affects the default zooming factor and scrollbar size.</db:para>
    <db:para>For example:</db:para>
    <db:programlisting language="other">int main(int argc, char *argv[])
      {
      QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);
      QApplication app(argc, argv);
      // ...
      }</db:programlisting>
    <db:para>Qt  bundles images for normal and high-dpi resolutions into <db:emphasis>qtwebengine_resources_100p.pak</db:emphasis> and <db:emphasis>qtwebengine_resources_200p.pak</db:emphasis> files. Depending on the target resolutions, one or both of these files need to be deployed.</db:para>
    <db:para>For more information, see <db:link xlink:href="highdpi.html" xrefstyle="page" annotations="High DPI Displays">High DPI Displays</db:link>.</db:para>
  </db:section>
  <db:section xml:id="using-webengine-core">
    <db:title>Using WebEngine Core</db:title>
    <db:para>Qt  Core provides an API shared by Qt  and Qt  Widgets for handling URL requests issued for the networking stack of Chromium and for accessing its HTTP cookies.</db:para>
    <db:para>Implementing the QWebEngineUrlRequestInterceptor interface and installing the interceptor on a profile enables intercepting, blocking, and modifying URL requests (QWebEngineUrlRequestInfo) before they reach the networking stack of Chromium.</db:para>
    <db:para>A QWebEngineUrlSchemeHandler can be registered for a profile to add support for custom URL schemes. Requests for the scheme are then issued to QWebEngineUrlSchemeHandler::requestStarted() as QWebEngineUrlRequestJob objects.</db:para>
    <db:para>The QWebEngineCookieStore class provides functions for accessing HTTP cookies of Chromium. The functions can be used to synchronize cookies with <db:code><db:link xlink:href="qnetworkaccessmanager.html" xrefstyle="class" annotations="QNetworkAccessManager">QNetworkAccessManager</db:link></db:code>, as well as to set, delete, and intercept cookies during navigation.</db:para>
  </db:section>
  <db:section xml:id="platform-notes">
    <db:title>Platform Notes</db:title>
    <db:para>Qt  currently supports only Windows, Linux, and <db:link xlink:href="qtwebengine-platform-notes.html#macos" xrefstyle="page" annotations="macOS">macOS</db:link>. Due to Chromium build requirements it also often requires a newer compiler than the rest of Qt. See <db:link xlink:href="qtwebengine-platform-notes.html" xrefstyle="page" annotations="Qt WebEngine Platform Notes">Qt WebEngine Platform Notes</db:link> for further details.</db:para>
  </db:section>
  <db:section xml:id="related-modules">
    <db:title>Related Modules</db:title>
    <db:para>Qt  supersedes the Qt WebKit module, which is based on the WebKit project, but has not been actively synchronized with the upstream WebKit code since Qt 5.2 and has been deprecated in Qt 5.5. For tips on how to change a Qt WebKit widgets application to use Qt  widgets, see <db:link xlink:href="qtwebenginewidgets-qtwebkitportingguide.html" xrefstyle="page" annotations="Porting from Qt WebKit to Qt WebEngine">Porting from Qt WebKit to Qt WebEngine</db:link>.</db:para>
    <db:para>The <db:link xlink:href="qtwebview-index.html" xrefstyle="page" annotations="Qt WebView">Qt WebView</db:link> module allows to use a native web browser on platforms where one is available.</db:para>
    <db:para>The <db:link xlink:href="qtwebchannel-index.html" xrefstyle="page" annotations="Qt WebChannel">Qt WebChannel</db:link> module can be used to create a bi-directional communication channel between <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> objects on the C++ side and JavaScript on the QML side.</db:para>
  </db:section>
</db:article>
