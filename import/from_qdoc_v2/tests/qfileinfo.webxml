<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <class threadsafety="reentrant" name="QFileInfo" href="qfileinfo.html" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="56" module="QtCore" groups="io,shared" brief="System-independent file information">
            <target name="ntfs-permissions" title="NTFS permissions"/>
            <contents name="performance-issues" title="Performance Issues" level="1"/>
            <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="217" column="4">
                <brief>The <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> class provides system-independent file information.</brief>
                <para>
                    <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> provides information about a file's name and position (path) in the file system, its access rights and whether it is a directory or symbolic link, etc. The file's size and last modified/read times are also available. <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> can also be used to obtain information about a Qt <link raw="resource system" href="resources.html" type="page" page="The Qt Resource System">resource</link>.</para>
                <para>A <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> can point to a file with either a relative or an absolute file path. Absolute file paths begin with the directory separator &quot;/&quot; (or with a drive specification on Windows). Relative file names begin with a directory name or a file name and specify a path relative to the current working directory. An example of an absolute path is the string &quot;/tmp/quartz&quot;. A relative path might look like &quot;src/fatlib&quot;. You can use the function <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link> to check whether a <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> is using a relative or an absolute file path. You can call the function <link raw="makeAbsolute()" href="qfileinfo.html#makeAbsolute" type="function">makeAbsolute()</link> to convert a relative <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link>'s path to an absolute path.</para>
                <para>The file that the <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> works on is set in the constructor or later with <link raw="setFile()" href="qfileinfo.html#setFile" type="function">setFile()</link>. Use <link raw="exists()" href="qfileinfo.html#exists" type="function">exists()</link> to see if the file exists and <link raw="size()" href="qfileinfo.html#size" type="function">size()</link> to get its size.</para>
                <para>The file's type is obtained with <link raw="isFile()" href="qfileinfo.html#isFile" type="function">isFile()</link>, <link raw="isDir()" href="qfileinfo.html#isDir" type="function">isDir()</link> and <link raw="isSymLink()" href="qfileinfo.html#isSymLink" type="function">isSymLink()</link>. The <link raw="symLinkTarget()" href="qfileinfo.html#symLinkTarget" type="function">symLinkTarget()</link> function provides the name of the file the symlink points to.</para>
                <para>On Unix (including  and iOS), the symlink has the same <link raw="size()" href="qfileinfo.html#size" type="function">size()</link> has the file it points to, because Unix handles symlinks transparently; similarly, opening a symlink using <link raw="QFile" href="qfile.html" type="class">QFile</link> effectively opens the link's target. For example:</para>
                <snippet location="code/src_corelib_io_qfileinfo.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/code/src_corelib_io_qfileinfo.cpp" identifier="0"/>
                <para>On Windows, symlinks (shortcuts) are <teletype type="highlighted">.lnk</teletype> files. The reported <link raw="size()" href="qfileinfo.html#size" type="function">size()</link> is that of the symlink (not the link's target), and opening a symlink using <link raw="QFile" href="qfile.html" type="class">QFile</link> opens the <teletype type="highlighted">.lnk</teletype> file. For example:</para>
                <snippet location="code/src_corelib_io_qfileinfo.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/code/src_corelib_io_qfileinfo.cpp" identifier="1"/>
                <para>Elements of the file's name can be extracted with <link raw="path()" href="qfileinfo.html#path" type="function">path()</link> and <link raw="fileName()" href="qfileinfo.html#fileName" type="function">fileName()</link>. The <link raw="fileName()" href="qfileinfo.html#fileName" type="function">fileName()</link>'s parts can be extracted with <link raw="baseName()" href="qfileinfo.html#baseName" type="function">baseName()</link>, <link raw="suffix()" href="qfileinfo.html#suffix" type="function">suffix()</link> or <link raw="completeSuffix()" href="qfileinfo.html#completeSuffix" type="function">completeSuffix()</link>. <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> objects to directories created by Qt classes will not have a trailing file separator. If you wish to use trailing separators in your own file info objects, just append one to the file name given to the constructors or <link raw="setFile()" href="qfileinfo.html#setFile" type="function">setFile()</link>.</para>
                <para>The file's dates are returned by <link raw="created()" href="qfileinfo-obsolete.html#created" type="function">created()</link>, <link raw="lastModified()" href="qfileinfo.html#lastModified" type="function">lastModified()</link>, <link raw="lastRead()" href="qfileinfo.html#lastRead" type="function">lastRead()</link> and <link raw="fileTime()" href="qfileinfo.html#fileTime" type="function">fileTime()</link>. Information about the file's access permissions is obtained with <link raw="isReadable()" href="qfileinfo.html#isReadable" type="function">isReadable()</link>, <link raw="isWritable()" href="qfileinfo.html#isWritable" type="function">isWritable()</link> and <link raw="isExecutable()" href="qfileinfo.html#isExecutable" type="function">isExecutable()</link>. The file's ownership is available from <link raw="owner()" href="qfileinfo.html#owner" type="function">owner()</link>, <link raw="ownerId()" href="qfileinfo.html#ownerId" type="function">ownerId()</link>, <link raw="group()" href="qfileinfo.html#group" type="function">group()</link> and <link raw="groupId()" href="qfileinfo.html#groupId" type="function">groupId()</link>. You can examine a file's permissions and ownership in a single statement using the <link raw="permission()" href="qfileinfo.html#permission" type="function">permission()</link> function.</para>
                <target name="ntfs-permissions"/>
                <para>
                    <bold>Note:</bold> On NTFS file systems, ownership and permissions checking is disabled by default for performance reasons. To enable it, include the following line:</para>
                <snippet location="ntfsp.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/ntfsp.cpp" identifier="0"/>
                <para>Permission checking is then turned on and off by incrementing and decrementing <teletype type="highlighted">qt_ntfs_permission_lookup</teletype> by 1.</para>
                <snippet location="ntfsp.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/ntfsp.cpp" identifier="1"/>
                <section id="performance-issues">
                    <heading level="1">Performance Issues</heading>
                    <para>Some of <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link>'s functions query the file system, but for performance reasons, some functions only operate on the file name itself. For example: To return the absolute path of a relative file name, <link raw="absolutePath()" href="qfileinfo.html#absolutePath" type="function">absolutePath()</link> has to query the file system. The <link raw="path()" href="qfileinfo.html#path" type="function">path()</link> function, however, can work on the file name directly, and so it is faster.</para>
                    <para>
                        <bold>Note:</bold> To speed up performance, <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> caches information about the file.</para>
                    <para>Because files can be changed by other users or programs, or even by other parts of the same program, there is a function that refreshes the file information: <link raw="refresh()" href="qfileinfo.html#refresh" type="function">refresh()</link>. If you want to switch off a <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link>'s caching and force it to access the file system every time you request information from it call <link raw="setCaching" href="qfileinfo.html#setCaching" type="function">setCaching</link>(false).</para>
                </section>
                <see-also>
                    <link raw="QDir" href="qdir.html" type="class">QDir</link>
                    <link raw="QFile" href="qfile.html" type="class">QFile</link>
                </see-also>
            </description>
            <function threadsafety="unspecified" name="QFileInfo" fullname="QFileInfo::QFileInfo" href="qfileinfo.html#QFileInfo-1" status="internal" access="private" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="60" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="QFileInfo(QFileInfoPrivate *p)">
                <parameter type="QFileInfoPrivate *" name="p" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="322" column="4"/>
            </function>
            <function threadsafety="unspecified" name="QFileInfo" fullname="QFileInfo::QFileInfo" href="qfileinfo.html#QFileInfo" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="62" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="QFileInfo()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="329" column="4">
                    <para>Constructs an empty <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> object.</para>
                    <para>Note that an empty <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> object contain no file reference.</para>
                    <see-also>
                        <link raw="setFile()" href="qfileinfo.html#setFile" type="function">setFile()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="QFileInfo" fullname="QFileInfo::QFileInfo" href="qfileinfo.html#QFileInfo-2" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="63" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="QFileInfo(const QString &amp;file)">
                <parameter type="const QString &amp;" name="file" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="340" column="4">
                    <para>Constructs a new <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> that gives information about the given file. The <argument>file</argument> can also include an absolute or relative path.</para>
                    <see-also>
                        <link raw="setFile()" href="qfileinfo.html#setFile" type="function">setFile()</link>
                        <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link>
                        <link raw="QDir::setCurrent()" href="qdir.html#setCurrent" type="function">QDir::setCurrent()</link>
                        <link raw="QDir::isRelativePath()" href="qdir.html#isRelativePath" type="function">QDir::isRelativePath()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="QFileInfo" fullname="QFileInfo::QFileInfo" href="qfileinfo.html#QFileInfo-3" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="64" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="QFileInfo(const QFile &amp;file)">
                <parameter type="const QFile &amp;" name="file" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="350" column="4">
                    <para>Constructs a new <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> that gives information about file <argument>file</argument>.</para>
                    <para>If the <argument>file</argument> has a relative path, the <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> will also have a relative path.</para>
                    <see-also>
                        <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="QFileInfo" fullname="QFileInfo::QFileInfo" href="qfileinfo.html#QFileInfo-4" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="65" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="QFileInfo(const QDir &amp;dir, const QString &amp;file)">
                <parameter type="const QDir &amp;" name="dir" default=""/>
                <parameter type="const QString &amp;" name="file" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="363" column="4">
                    <para>Constructs a new <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> that gives information about the given <argument>file</argument> in the directory <argument>dir</argument>.</para>
                    <para>If <argument>dir</argument> has a relative path, the <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> will also have a relative path.</para>
                    <para>If <argument>file</argument> is an absolute path, then the directory specified by <argument>dir</argument> will be disregarded.</para>
                    <see-also>
                        <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="QFileInfo" fullname="QFileInfo::QFileInfo" href="qfileinfo.html#QFileInfo-5" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="66" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="QFileInfo(const QFileInfo &amp;fileinfo)">
                <parameter type="const QFileInfo &amp;" name="fileinfo" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="380" column="4">
                    <para>Constructs a new <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> that is a copy of the given <argument>fileinfo</argument>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="~QFileInfo" fullname="QFileInfo::~QFileInfo" href="qfileinfo.html#dtor.QFileInfo" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="67" virtual="non" meta="destructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="~QFileInfo()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="389" column="4">
                    <para>Destroys the <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> and frees its resources.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="operator=" fullname="QFileInfo::operator=" href="qfileinfo.html#operator-eq" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="69" virtual="non" meta="copy-assign" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QFileInfo &amp;" signature="QFileInfo &amp; operator=(const QFileInfo &amp;fileinfo)">
                <parameter type="const QFileInfo &amp;" name="fileinfo" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="452" column="4">
                    <para>Makes a copy of the given <argument>fileinfo</argument> and assigns it to this <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="operator=" fullname="QFileInfo::operator=" href="qfileinfo.html#operator-eq-1" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="71" virtual="non" meta="move-assign" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QFileInfo &amp;" signature="QFileInfo &amp; operator=(QFileInfo &amp;&amp;other)">
                <parameter type="QFileInfo &amp;&amp;" name="other" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="swap" fullname="QFileInfo::swap" href="qfileinfo.html#swap" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="74" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void swap(QFileInfo &amp;other)">
                <parameter type="QFileInfo &amp;" name="other" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="operator==" fullname="QFileInfo::operator==" href="qfileinfo.html#operator-eq-eq" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="77" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool operator==(const QFileInfo &amp;fileinfo) const">
                <parameter type="const QFileInfo &amp;" name="fileinfo" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="406" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> object refers to a file in the same location as <argument>fileinfo</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>Note that the result of comparing two empty <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> objects, containing no file references (file paths that do not exist or are empty), is undefined.</para>
                    <para>
                        <bold>Warning:</bold> This will not compare two different symbolic links pointing to the same file.</para>
                    <para>
                        <bold>Warning:</bold> Long and short file names that refer to the same file on Windows are treated as if they referred to different files.</para>
                    <see-also>
                        <link raw="operator!=()" href="qfileinfo.html#operator-not-eq" type="function">operator!=()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="operator!=" fullname="QFileInfo::operator!=" href="qfileinfo.html#operator-not-eq" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="78" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool operator!=(const QFileInfo &amp;fileinfo) const">
                <parameter type="const QFileInfo &amp;" name="fileinfo" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="setFile" fullname="QFileInfo::setFile" href="qfileinfo.html#setFile" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="80" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setFile(const QString &amp;file)">
                <parameter type="const QString &amp;" name="file" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="469" column="4">
                    <para>Sets the file that the <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> provides information about to <argument>file</argument>.</para>
                    <para>The <argument>file</argument> can also include an absolute or relative file path. Absolute paths begin with the directory separator (e.g. &quot;/&quot; under Unix) or a drive specification (under Windows). Relative file names begin with a directory name or a file name and specify a path relative to the current directory.</para>
                    <para>Example:</para>
                    <snippet location="code/src_corelib_io_qfileinfo.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/code/src_corelib_io_qfileinfo.cpp" identifier="2"/>
                    <see-also>
                        <link raw="isFile()" href="qfileinfo.html#isFile" type="function">isFile()</link>
                        <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link>
                        <link raw="QDir::setCurrent()" href="qdir.html#setCurrent" type="function">QDir::setCurrent()</link>
                        <link raw="QDir::isRelativePath()" href="qdir.html#isRelativePath" type="function">QDir::isRelativePath()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setFile" fullname="QFileInfo::setFile" href="qfileinfo.html#setFile-1" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="81" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="1" type="void" signature="void setFile(const QFile &amp;file)">
                <parameter type="const QFile &amp;" name="file" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="491" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Sets the file that the <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> provides information about to <argument>file</argument>.</para>
                    <para>If <argument>file</argument> includes a relative path, the <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> will also have a relative path.</para>
                    <see-also>
                        <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setFile" fullname="QFileInfo::setFile" href="qfileinfo.html#setFile-2" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="82" virtual="non" meta="plain" const="false" static="false" overload="true" delete="false" default="false" final="false" override="false" overload-number="2" type="void" signature="void setFile(const QDir &amp;dir, const QString &amp;file)">
                <parameter type="const QDir &amp;" name="dir" default=""/>
                <parameter type="const QString &amp;" name="file" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="507" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Sets the file that the <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> provides information about to <argument>file</argument> in directory <argument>dir</argument>.</para>
                    <para>If <argument>file</argument> includes a relative path, the <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> will also have a relative path.</para>
                    <see-also>
                        <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="exists" fullname="QFileInfo::exists" href="qfileinfo.html#exists" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="83" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool exists() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="674" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if the file exists; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>
                        <bold>Note:</bold> If the file is a symlink that points to a non-existing file, false is returned.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="exists" fullname="QFileInfo::exists" href="qfileinfo.html#exists-1" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="84" since="5.2" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool exists(const QString &amp;file)">
                <parameter type="const QString &amp;" name="file" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="693" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if the <argument>file</argument> exists; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>
                        <bold>Note:</bold> If <argument>file</argument> is a symlink that points to a non-existing file, false is returned.</para>
                    <para>
                        <bold>Note:</bold> Using this function is faster than using <teletype type="highlighted">QFileInfo(file).exists()</teletype> for file system access.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="refresh" fullname="QFileInfo::refresh" href="qfileinfo.html#refresh" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="85" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void refresh()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="718" column="4">
                    <para>Refreshes the information about the file, i.e. reads in information from the file system the next time a cached property is fetched.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="filePath" fullname="QFileInfo::filePath" href="qfileinfo.html#filePath" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="87" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString filePath() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="728" column="4">
                    <para>Returns the file name, including the path (which may be absolute or relative).</para>
                    <see-also>
                        <link raw="absoluteFilePath()" href="qfileinfo.html#absoluteFilePath" type="function">absoluteFilePath()</link>
                        <link raw="canonicalFilePath()" href="qfileinfo.html#canonicalFilePath" type="function">canonicalFilePath()</link>
                        <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="absoluteFilePath" fullname="QFileInfo::absoluteFilePath" href="qfileinfo.html#absoluteFilePath" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="88" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString absoluteFilePath() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="523" column="4">
                    <para>Returns an absolute path including the file name.</para>
                    <para>The absolute path name consists of the full path and the file name. On Unix this will always begin with the root, '/', directory. On Windows this will always begin 'D:/' where D is a drive letter, except for network shares that are not mapped to a drive letter, in which case the path will begin '//sharename/'. <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> will uppercase drive letters. Note that <link raw="QDir" href="qdir.html" type="class">QDir</link> does not do this. The code snippet below shows this.</para>
                    <snippet location="code/src_corelib_io_qfileinfo.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/code/src_corelib_io_qfileinfo.cpp" identifier="newstuff"/>
                    <para>This function returns the same as <link raw="filePath()" href="qfileinfo.html#filePath" type="function">filePath()</link>, unless <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link> is true. In contrast to <link raw="canonicalFilePath()" href="qfileinfo.html#canonicalFilePath" type="function">canonicalFilePath()</link>, symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements are not necessarily removed.</para>
                    <para>
                        <bold>Warning:</bold> If <link raw="filePath()" href="qfileinfo.html#filePath" type="function">filePath()</link> is empty the behavior of this function is undefined.</para>
                    <see-also>
                        <link raw="filePath()" href="qfileinfo.html#filePath" type="function">filePath()</link>
                        <link raw="canonicalFilePath()" href="qfileinfo.html#canonicalFilePath" type="function">canonicalFilePath()</link>
                        <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="canonicalFilePath" fullname="QFileInfo::canonicalFilePath" href="qfileinfo.html#canonicalFilePath" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="89" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString canonicalFilePath() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="553" column="4">
                    <para>Returns the canonical path including the file name, i.e. an absolute path without symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements.</para>
                    <para>If the file does not exist,  returns an empty string.</para>
                    <see-also>
                        <link raw="filePath()" href="qfileinfo.html#filePath" type="function">filePath()</link>
                        <link raw="absoluteFilePath()" href="qfileinfo.html#absoluteFilePath" type="function">absoluteFilePath()</link>
                        <link raw="dir()" href="qfileinfo.html#dir" type="function">dir()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="fileName" fullname="QFileInfo::fileName" href="qfileinfo.html#fileName" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="90" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString fileName() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="742" column="4">
                    <para>Returns the name of the file, excluding the path.</para>
                    <para>Example:</para>
                    <snippet location="code/src_corelib_io_qfileinfo.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/code/src_corelib_io_qfileinfo.cpp" identifier="3"/>
                    <para>Note that, if this <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> object is given a path ending in a slash, the name of the file is considered empty.</para>
                    <see-also>
                        <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link>
                        <link raw="filePath()" href="qfileinfo.html#filePath" type="function">filePath()</link>
                        <link raw="baseName()" href="qfileinfo.html#baseName" type="function">baseName()</link>
                        <link raw="suffix()" href="qfileinfo.html#suffix" type="function">suffix()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="baseName" fullname="QFileInfo::baseName" href="qfileinfo.html#baseName" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="91" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString baseName() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="781" column="4">
                    <para>Returns the base name of the file without the path.</para>
                    <para>The base name consists of all characters in the file up to (but not including) the <italic>first</italic> '.' character.</para>
                    <para>Example:</para>
                    <snippet location="code/src_corelib_io_qfileinfo.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/code/src_corelib_io_qfileinfo.cpp" identifier="5"/>
                    <para>The base name of a file is computed equally on all platforms, independent of file naming conventions (e.g., &quot;.bashrc&quot; on Unix has an empty base name, and the suffix is &quot;bashrc&quot;).</para>
                    <see-also>
                        <link raw="fileName()" href="qfileinfo.html#fileName" type="function">fileName()</link>
                        <link raw="suffix()" href="qfileinfo.html#suffix" type="function">suffix()</link>
                        <link raw="completeSuffix()" href="qfileinfo.html#completeSuffix" type="function">completeSuffix()</link>
                        <link raw="completeBaseName()" href="qfileinfo.html#completeBaseName" type="function">completeBaseName()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="completeBaseName" fullname="QFileInfo::completeBaseName" href="qfileinfo.html#completeBaseName" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="92" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString completeBaseName() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="805" column="4">
                    <para>Returns the complete base name of the file without the path.</para>
                    <para>The complete base name consists of all characters in the file up to (but not including) the <italic>last</italic> '.' character.</para>
                    <para>Example:</para>
                    <snippet location="code/src_corelib_io_qfileinfo.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/code/src_corelib_io_qfileinfo.cpp" identifier="6"/>
                    <see-also>
                        <link raw="fileName()" href="qfileinfo.html#fileName" type="function">fileName()</link>
                        <link raw="suffix()" href="qfileinfo.html#suffix" type="function">suffix()</link>
                        <link raw="completeSuffix()" href="qfileinfo.html#completeSuffix" type="function">completeSuffix()</link>
                        <link raw="baseName()" href="qfileinfo.html#baseName" type="function">baseName()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="suffix" fullname="QFileInfo::suffix" href="qfileinfo.html#suffix" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="93" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString suffix() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="843" column="4">
                    <para>Returns the suffix (extension) of the file.</para>
                    <para>The suffix consists of all characters in the file after (but not including) the last '.'.</para>
                    <para>Example:</para>
                    <snippet location="code/src_corelib_io_qfileinfo.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/code/src_corelib_io_qfileinfo.cpp" identifier="8"/>
                    <para>The suffix of a file is computed equally on all platforms, independent of file naming conventions (e.g., &quot;.bashrc&quot; on Unix has an empty base name, and the suffix is &quot;bashrc&quot;).</para>
                    <see-also>
                        <link raw="fileName()" href="qfileinfo.html#fileName" type="function">fileName()</link>
                        <link raw="completeSuffix()" href="qfileinfo.html#completeSuffix" type="function">completeSuffix()</link>
                        <link raw="baseName()" href="qfileinfo.html#baseName" type="function">baseName()</link>
                        <link raw="completeBaseName()" href="qfileinfo.html#completeBaseName" type="function">completeBaseName()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="bundleName" fullname="QFileInfo::bundleName" href="qfileinfo.html#bundleName" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="94" since="4.3" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString bundleName() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="761" column="4">
                    <para>Returns the name of the bundle.</para>
                    <para>On  and iOS this returns the proper localized name for a bundle if the path <link raw="isBundle()" href="qfileinfo.html#isBundle" type="function">isBundle()</link>. On all other platforms an empty <link raw="QString" href="qstring.html" type="class">QString</link> is returned.</para>
                    <para>Example:</para>
                    <snippet location="code/src_corelib_io_qfileinfo.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/code/src_corelib_io_qfileinfo.cpp" identifier="4"/>
                    <see-also>
                        <link raw="isBundle()" href="qfileinfo.html#isBundle" type="function">isBundle()</link>
                        <link raw="filePath()" href="qfileinfo.html#filePath" type="function">filePath()</link>
                        <link raw="baseName()" href="qfileinfo.html#baseName" type="function">baseName()</link>
                        <link raw="suffix()" href="qfileinfo.html#suffix" type="function">suffix()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="completeSuffix" fullname="QFileInfo::completeSuffix" href="qfileinfo.html#completeSuffix" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="95" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString completeSuffix() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="824" column="4">
                    <para>Returns the complete suffix (extension) of the file.</para>
                    <para>The complete suffix consists of all characters in the file after (but not including) the first '.'.</para>
                    <para>Example:</para>
                    <snippet location="code/src_corelib_io_qfileinfo.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/code/src_corelib_io_qfileinfo.cpp" identifier="7"/>
                    <see-also>
                        <link raw="fileName()" href="qfileinfo.html#fileName" type="function">fileName()</link>
                        <link raw="suffix()" href="qfileinfo.html#suffix" type="function">suffix()</link>
                        <link raw="baseName()" href="qfileinfo.html#baseName" type="function">baseName()</link>
                        <link raw="completeBaseName()" href="qfileinfo.html#completeBaseName" type="function">completeBaseName()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="path" fullname="QFileInfo::path" href="qfileinfo.html#path" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="97" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString path() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="614" column="4">
                    <para>Returns the file's path. This doesn't include the file name.</para>
                    <para>Note that, if this <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> object is given a path ending in a slash, the name of the file is considered empty and this function will return the entire path.</para>
                    <see-also>
                        <link raw="filePath()" href="qfileinfo.html#filePath" type="function">filePath()</link>
                        <link raw="absolutePath()" href="qfileinfo.html#absolutePath" type="function">absolutePath()</link>
                        <link raw="canonicalPath()" href="qfileinfo.html#canonicalPath" type="function">canonicalPath()</link>
                        <link raw="dir()" href="qfileinfo.html#dir" type="function">dir()</link>
                        <link raw="fileName()" href="qfileinfo.html#fileName" type="function">fileName()</link>
                        <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="absolutePath" fullname="QFileInfo::absolutePath" href="qfileinfo.html#absolutePath" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="98" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString absolutePath() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="571" column="4">
                    <para>Returns a file's path absolute path. This doesn't include the file name.</para>
                    <para>On Unix the absolute path will always begin with the root, '/', directory. On Windows this will always begin 'D:/' where D is a drive letter, except for network shares that are not mapped to a drive letter, in which case the path will begin '//sharename/'.</para>
                    <para>In contrast to <link raw="canonicalPath()" href="qfileinfo.html#canonicalPath" type="function">canonicalPath()</link> symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements are not necessarily removed.</para>
                    <para>
                        <bold>Warning:</bold> If <link raw="filePath()" href="qfileinfo.html#filePath" type="function">filePath()</link> is empty the behavior of this function is undefined.</para>
                    <see-also>
                        <link raw="absoluteFilePath()" href="qfileinfo.html#absoluteFilePath" type="function">absoluteFilePath()</link>
                        <link raw="path()" href="qfileinfo.html#path" type="function">path()</link>
                        <link raw="canonicalPath()" href="qfileinfo.html#canonicalPath" type="function">canonicalPath()</link>
                        <link raw="fileName()" href="qfileinfo.html#fileName" type="function">fileName()</link>
                        <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="canonicalPath" fullname="QFileInfo::canonicalPath" href="qfileinfo.html#canonicalPath" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="99" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString canonicalPath() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="598" column="4">
                    <para>Returns the file's path canonical path (excluding the file name), i.e. an absolute path without symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements.</para>
                    <para>If the file does not exist,  returns an empty string.</para>
                    <see-also>
                        <link raw="path()" href="qfileinfo.html#path" type="function">path()</link>
                        <link raw="absolutePath()" href="qfileinfo.html#absolutePath" type="function">absolutePath()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="dir" fullname="QFileInfo::dir" href="qfileinfo.html#dir" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="100" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QDir" signature="QDir dir() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="867" column="4">
                    <para>Returns the path of the object's parent directory as a <link raw="QDir" href="qdir.html" type="class">QDir</link> object.</para>
                    <para>
                        <bold>Note:</bold> The <link raw="QDir" href="qdir.html" type="class">QDir</link> returned always corresponds to the object's parent directory, even if the <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> represents a directory.</para>
                    <para>For each of the following,  returns the <link raw="QDir" href="qdir.html" type="class">QDir</link> <teletype type="highlighted">&quot;~/examples/191697&quot;</teletype>.</para>
                    <snippet location="fileinfo/main.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/fileinfo/main.cpp" identifier="0"/>
                    <para>For each of the following,  returns the <link raw="QDir" href="qdir.html" type="class">QDir</link> <teletype type="highlighted">&quot;.&quot;</teletype>.</para>
                    <snippet location="fileinfo/main.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/fileinfo/main.cpp" identifier="1"/>
                    <see-also>
                        <link raw="absolutePath()" href="qfileinfo.html#absolutePath" type="function">absolutePath()</link>
                        <link raw="filePath()" href="qfileinfo.html#filePath" type="function">filePath()</link>
                        <link raw="fileName()" href="qfileinfo.html#fileName" type="function">fileName()</link>
                        <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link>
                        <link raw="absoluteDir()" href="qfileinfo.html#absoluteDir" type="function">absoluteDir()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="absoluteDir" fullname="QFileInfo::absoluteDir" href="qfileinfo.html#absoluteDir" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="101" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QDir" signature="QDir absoluteDir() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="892" column="4">
                    <para>Returns the file's absolute path as a <link raw="QDir" href="qdir.html" type="class">QDir</link> object.</para>
                    <see-also>
                        <link raw="dir()" href="qfileinfo.html#dir" type="function">dir()</link>
                        <link raw="filePath()" href="qfileinfo.html#filePath" type="function">filePath()</link>
                        <link raw="fileName()" href="qfileinfo.html#fileName" type="function">fileName()</link>
                        <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isReadable" fullname="QFileInfo::isReadable" href="qfileinfo.html#isReadable" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="103" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isReadable() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="902" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if the user can read the file; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>
                        <bold>Note:</bold> If the <link raw="NTFS permissions" href="qfileinfo.html#ntfs-permissions" type="class">NTFS permissions</link> check has not been enabled, the result on Windows will merely reflect whether the file exists.</para>
                    <see-also>
                        <link raw="isWritable()" href="qfileinfo.html#isWritable" type="function">isWritable()</link>
                        <link raw="isExecutable()" href="qfileinfo.html#isExecutable" type="function">isExecutable()</link>
                        <link raw="permission()" href="qfileinfo.html#permission" type="function">permission()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isWritable" fullname="QFileInfo::isWritable" href="qfileinfo.html#isWritable" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="104" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isWritable() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="919" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if the user can write to the file; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>
                        <bold>Note:</bold> If the <link raw="NTFS permissions" href="qfileinfo.html#ntfs-permissions" type="class">NTFS permissions</link> check has not been enabled, the result on Windows will merely reflect whether the file is marked as Read Only.</para>
                    <see-also>
                        <link raw="isReadable()" href="qfileinfo.html#isReadable" type="function">isReadable()</link>
                        <link raw="isExecutable()" href="qfileinfo.html#isExecutable" type="function">isExecutable()</link>
                        <link raw="permission()" href="qfileinfo.html#permission" type="function">permission()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isExecutable" fullname="QFileInfo::isExecutable" href="qfileinfo.html#isExecutable" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="105" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isExecutable() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="936" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if the file is executable; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <see-also>
                        <link raw="isReadable()" href="qfileinfo.html#isReadable" type="function">isReadable()</link>
                        <link raw="isWritable()" href="qfileinfo.html#isWritable" type="function">isWritable()</link>
                        <link raw="permission()" href="qfileinfo.html#permission" type="function">permission()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isHidden" fullname="QFileInfo::isHidden" href="qfileinfo.html#isHidden" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="106" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isHidden() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="950" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this is a `hidden' file; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>
                        <bold>Note:</bold> This function returns <teletype type="highlighted">true</teletype> for the special entries &quot;.&quot; and &quot;..&quot; on Unix, even though <link raw="QDir::entryList" href="qdir.html#entryList" type="function">QDir::entryList</link> threats them as shown.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="isNativePath" fullname="QFileInfo::isNativePath" href="qfileinfo.html#isNativePath" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="107" since="5.0" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isNativePath() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="965" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if the file path can be used directly with native APIs. Returns <teletype type="highlighted">false</teletype> if the file is otherwise supported by a virtual file system inside Qt, such as <link raw="the Qt Resource System" href="resources.html" type="page" page="The Qt Resource System">the Qt Resource System</link>.</para>
                    <para>
                        <bold>Note:</bold> Native paths may still require conversion of path separators and character encoding, depending on platform and input requirements of the native API.</para>
                    <see-also>
                        <link raw="QDir::toNativeSeparators()" href="qdir.html#toNativeSeparators" type="function">QDir::toNativeSeparators()</link>
                        <link raw="QFile::encodeName()" href="qfile.html#encodeName" type="function">QFile::encodeName()</link>
                        <link raw="filePath()" href="qfileinfo.html#filePath" type="function">filePath()</link>
                        <link raw="absoluteFilePath()" href="qfileinfo.html#absoluteFilePath" type="function">absoluteFilePath()</link>
                        <link raw="canonicalFilePath()" href="qfileinfo.html#canonicalFilePath" type="function">canonicalFilePath()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isRelative" fullname="QFileInfo::isRelative" href="qfileinfo.html#isRelative" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="109" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isRelative() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="640" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if the file path name is relative, otherwise returns false if the path is absolute (e.g. under Unix a path is absolute if it begins with a &quot;/&quot;).</para>
                    <see-also>
                        <link raw="isAbsolute()" href="qfileinfo.html#isAbsolute" type="function">isAbsolute()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isAbsolute" fullname="QFileInfo::isAbsolute" href="qfileinfo.html#isAbsolute" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="110" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isAbsolute() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="makeAbsolute" fullname="QFileInfo::makeAbsolute" href="qfileinfo.html#makeAbsolute" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="111" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool makeAbsolute()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="657" column="4">
                    <para>Converts the file's path to an absolute path if it is not already in that form. Returns <teletype type="highlighted">true</teletype> to indicate that the path was converted; otherwise returns <teletype type="highlighted">false</teletype> to indicate that the path was already absolute.</para>
                    <see-also>
                        <link raw="filePath()" href="qfileinfo.html#filePath" type="function">filePath()</link>
                        <link raw="isRelative()" href="qfileinfo.html#isRelative" type="function">isRelative()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isFile" fullname="QFileInfo::isFile" href="qfileinfo.html#isFile" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="113" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isFile() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="988" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this object points to a file or to a symbolic link to a file. Returns <teletype type="highlighted">false</teletype> if the object points to something which isn't a file, such as a directory.</para>
                    <see-also>
                        <link raw="isDir()" href="qfileinfo.html#isDir" type="function">isDir()</link>
                        <link raw="isSymLink()" href="qfileinfo.html#isSymLink" type="function">isSymLink()</link>
                        <link raw="isBundle()" href="qfileinfo.html#isBundle" type="function">isBundle()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isDir" fullname="QFileInfo::isDir" href="qfileinfo.html#isDir" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="114" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isDir() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1004" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this object points to a directory or to a symbolic link to a directory; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <see-also>
                        <link raw="isFile()" href="qfileinfo.html#isFile" type="function">isFile()</link>
                        <link raw="isSymLink()" href="qfileinfo.html#isSymLink" type="function">isSymLink()</link>
                        <link raw="isBundle()" href="qfileinfo.html#isBundle" type="function">isBundle()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isSymLink" fullname="QFileInfo::isSymLink" href="qfileinfo.html#isSymLink" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="115" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isSymLink() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1036" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this object points to a symbolic link; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>Symbolic links exist on Unix (including  and iOS) and Windows and are typically created by the <teletype type="highlighted">ln -s</teletype> or <teletype type="highlighted">mklink</teletype> commands, respectively. Opening a symbolic link effectively opens the <link raw="symLinkTarget()" href="qfileinfo.html#symLinkTarget" type="function">link's target</link>.</para>
                    <para>In addition, true will be returned for shortcuts (<teletype type="highlighted">*.lnk</teletype> files) on Windows. Opening those will open the <teletype type="highlighted">.lnk</teletype> file itself.</para>
                    <para>Example:</para>
                    <snippet location="code/src_corelib_io_qfileinfo.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/code/src_corelib_io_qfileinfo.cpp" identifier="9"/>
                    <para>
                        <bold>Note:</bold> If the symlink points to a non existing file, <link raw="exists()" href="qfileinfo.html#exists" type="function">exists()</link> returns false.</para>
                    <see-also>
                        <link raw="isFile()" href="qfileinfo.html#isFile" type="function">isFile()</link>
                        <link raw="isDir()" href="qfileinfo.html#isDir" type="function">isDir()</link>
                        <link raw="symLinkTarget()" href="qfileinfo.html#symLinkTarget" type="function">symLinkTarget()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="isRoot" fullname="QFileInfo::isRoot" href="qfileinfo.html#isRoot" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="116" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isRoot() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1066" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if the object points to a directory or to a symbolic link to a directory, and that directory is the root directory; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="isBundle" fullname="QFileInfo::isBundle" href="qfileinfo.html#isBundle" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="117" since="4.3" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool isBundle() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1020" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this object points to a bundle or to a symbolic link to a bundle on  and iOS; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <see-also>
                        <link raw="isDir()" href="qfileinfo.html#isDir" type="function">isDir()</link>
                        <link raw="isSymLink()" href="qfileinfo.html#isSymLink" type="function">isSymLink()</link>
                        <link raw="isFile()" href="qfileinfo.html#isFile" type="function">isFile()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="readLink" fullname="QFileInfo::readLink" href="qfileinfo-obsolete.html#readLink" status="obsolete" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="119" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString readLink() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1108" column="4">
                    <para>Use <link raw="symLinkTarget()" href="qfileinfo.html#symLinkTarget" type="function">symLinkTarget()</link> instead.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="symLinkTarget" fullname="QFileInfo::symLinkTarget" href="qfileinfo.html#symLinkTarget" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="120" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString symLinkTarget() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="owner" fullname="QFileInfo::owner" href="qfileinfo.html#owner" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="122" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString owner() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1121" column="4">
                    <para>Returns the owner of the file. On systems where files do not have owners, or if an error occurs, an empty string is returned.</para>
                    <para>This function can be time consuming under Unix (in the order of milliseconds). On Windows, it will return an empty string unless the <link raw="NTFS permissions" href="qfileinfo.html#ntfs-permissions" type="class">NTFS permissions</link> check has been enabled.</para>
                    <see-also>
                        <link raw="ownerId()" href="qfileinfo.html#ownerId" type="function">ownerId()</link>
                        <link raw="group()" href="qfileinfo.html#group" type="function">group()</link>
                        <link raw="groupId()" href="qfileinfo.html#groupId" type="function">groupId()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="ownerId" fullname="QFileInfo::ownerId" href="qfileinfo.html#ownerId" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="123" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="uint" signature="uint ownerId() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1140" column="4">
                    <para>Returns the id of the owner of the file.</para>
                    <para>On Windows and on systems where files do not have owners this function returns ((uint) -2).</para>
                    <see-also>
                        <link raw="owner()" href="qfileinfo.html#owner" type="function">owner()</link>
                        <link raw="group()" href="qfileinfo.html#group" type="function">group()</link>
                        <link raw="groupId()" href="qfileinfo.html#groupId" type="function">groupId()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="group" fullname="QFileInfo::group" href="qfileinfo.html#group" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="124" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString group() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1157" column="4">
                    <para>Returns the group of the file. On Windows, on systems where files do not have groups, or if an error occurs, an empty string is returned.</para>
                    <para>This function can be time consuming under Unix (in the order of milliseconds).</para>
                    <see-also>
                        <link raw="groupId()" href="qfileinfo.html#groupId" type="function">groupId()</link>
                        <link raw="owner()" href="qfileinfo.html#owner" type="function">owner()</link>
                        <link raw="ownerId()" href="qfileinfo.html#ownerId" type="function">ownerId()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="groupId" fullname="QFileInfo::groupId" href="qfileinfo.html#groupId" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="125" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="uint" signature="uint groupId() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1175" column="4">
                    <para>Returns the id of the group the file belongs to.</para>
                    <para>On Windows and on systems where files do not have groups this function always returns (uint) -2.</para>
                    <see-also>
                        <link raw="group()" href="qfileinfo.html#group" type="function">group()</link>
                        <link raw="owner()" href="qfileinfo.html#owner" type="function">owner()</link>
                        <link raw="ownerId()" href="qfileinfo.html#ownerId" type="function">ownerId()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="permission" fullname="QFileInfo::permission" href="qfileinfo.html#permission" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="127" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool permission(QFile::Permissions permissions) const">
                <parameter type="QFile::Permissions" name="permissions" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1192" column="4">
                    <para>Tests for file permissions. The <argument>permissions</argument> argument can be several flags of type <link raw="QFile::Permissions" href="qfiledevice.html#Permission-enum" type="typedef">QFile::Permissions</link> OR-ed together to check for permission combinations.</para>
                    <para>On systems where files do not have permissions this function always returns <teletype type="highlighted">true</teletype>.</para>
                    <para>
                        <bold>Note:</bold> The result might be inaccurate on Windows if the <link raw="NTFS permissions" href="qfileinfo.html#ntfs-permissions" type="class">NTFS permissions</link> check has not been enabled.</para>
                    <para>Example:</para>
                    <snippet location="code/src_corelib_io_qfileinfo.cpp" path="C:/Qt/5.11.1/Src/qtbase/src/corelib/doc/snippets/code/src_corelib_io_qfileinfo.cpp" identifier="10"/>
                    <see-also>
                        <link raw="isReadable()" href="qfileinfo.html#isReadable" type="function">isReadable()</link>
                        <link raw="isWritable()" href="qfileinfo.html#isWritable" type="function">isWritable()</link>
                        <link raw="isExecutable()" href="qfileinfo.html#isExecutable" type="function">isExecutable()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="permissions" fullname="QFileInfo::permissions" href="qfileinfo.html#permissions" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="128" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QFile::Permissions" signature="QFile::Permissions permissions() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1222" column="4">
                    <para>Returns the complete OR-ed together combination of <link raw="QFile::Permissions" href="qfiledevice.html#Permission-enum" type="typedef">QFile::Permissions</link> for the file.</para>
                    <para>
                        <bold>Note:</bold> The result might be inaccurate on Windows if the <link raw="NTFS permissions" href="qfileinfo.html#ntfs-permissions" type="class">NTFS permissions</link> check has not been enabled.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="size" fullname="QFileInfo::size" href="qfileinfo.html#size" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="130" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="qint64" signature="qint64 size() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1241" column="4">
                    <para>Returns the file size in bytes. If the file does not exist or cannot be fetched, 0 is returned.</para>
                    <see-also>
                        <link raw="exists()" href="qfileinfo.html#exists" type="function">exists()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="created" fullname="QFileInfo::created" href="qfileinfo-obsolete.html#created" status="obsolete" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="135" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QDateTime" signature="QDateTime created() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1263" column="4">
                    <para>Returns the date and time when the file was created, the time its metadata was last changed or the time of last modification, whichever one of the three is available (in that order).</para>
                    <para>This function is deprecated. Instead, use the <link raw="birthTime()" href="qfileinfo.html#birthTime" type="function">birthTime()</link> function to get the time the file was created, <link raw="metadataChangeTime()" href="qfileinfo.html#metadataChangeTime" type="function">metadataChangeTime()</link> to get the time its metadata was last changed, or <link raw="lastModified()" href="qfileinfo.html#lastModified" type="function">lastModified()</link> to get the time it was last modified.</para>
                    <see-also>
                        <link raw="birthTime()" href="qfileinfo.html#birthTime" type="function">birthTime()</link>
                        <link raw="metadataChangeTime()" href="qfileinfo.html#metadataChangeTime" type="function">metadataChangeTime()</link>
                        <link raw="lastModified()" href="qfileinfo.html#lastModified" type="function">lastModified()</link>
                        <link raw="lastRead()" href="qfileinfo.html#lastRead" type="function">lastRead()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="birthTime" fullname="QFileInfo::birthTime" href="qfileinfo.html#birthTime" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="137" since="5.10" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QDateTime" signature="QDateTime birthTime() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1285" column="4">
                    <para>Returns the date and time when the file was created / born.</para>
                    <para>If the file birth time is not available, this function returns an invalid <link raw="QDateTime" href="qdatetime.html" type="class">QDateTime</link>.</para>
                    <see-also>
                        <link raw="lastModified()" href="qfileinfo.html#lastModified" type="function">lastModified()</link>
                        <link raw="lastRead()" href="qfileinfo.html#lastRead" type="function">lastRead()</link>
                        <link raw="metadataChangeTime()" href="qfileinfo.html#metadataChangeTime" type="function">metadataChangeTime()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="metadataChangeTime" fullname="QFileInfo::metadataChangeTime" href="qfileinfo.html#metadataChangeTime" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="138" since="5.10" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QDateTime" signature="QDateTime metadataChangeTime() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1299" column="4">
                    <para>Returns the date and time when the file metadata was changed. A metadata change occurs when the file is created, but it also occurs whenever the user writes or sets inode information (for example, changing the file permissions).</para>
                    <see-also>
                        <link raw="lastModified()" href="qfileinfo.html#lastModified" type="function">lastModified()</link>
                        <link raw="lastRead()" href="qfileinfo.html#lastRead" type="function">lastRead()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="lastModified" fullname="QFileInfo::lastModified" href="qfileinfo.html#lastModified" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="139" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QDateTime" signature="QDateTime lastModified() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1313" column="4">
                    <para>Returns the date and local time when the file was last modified.</para>
                    <see-also>
                        <link raw="birthTime()" href="qfileinfo.html#birthTime" type="function">birthTime()</link>
                        <link raw="lastRead()" href="qfileinfo.html#lastRead" type="function">lastRead()</link>
                        <link raw="metadataChangeTime()" href="qfileinfo.html#metadataChangeTime" type="function">metadataChangeTime()</link>
                        <link raw="fileTime()" href="qfileinfo.html#fileTime" type="function">fileTime()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="lastRead" fullname="QFileInfo::lastRead" href="qfileinfo.html#lastRead" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="140" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QDateTime" signature="QDateTime lastRead() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1323" column="4">
                    <para>Returns the date and local time when the file was last read (accessed).</para>
                    <para>On platforms where this information is not available, returns the same as <link raw="lastModified()" href="qfileinfo.html#lastModified" type="function">lastModified()</link>.</para>
                    <see-also>
                        <link raw="birthTime()" href="qfileinfo.html#birthTime" type="function">birthTime()</link>
                        <link raw="lastModified()" href="qfileinfo.html#lastModified" type="function">lastModified()</link>
                        <link raw="metadataChangeTime()" href="qfileinfo.html#metadataChangeTime" type="function">metadataChangeTime()</link>
                        <link raw="fileTime()" href="qfileinfo.html#fileTime" type="function">fileTime()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="fileTime" fullname="QFileInfo::fileTime" href="qfileinfo.html#fileTime" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="141" since="5.10" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QDateTime" signature="QDateTime fileTime(QFile::FileTime time) const">
                <parameter type="QFile::FileTime" name="time" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1336" column="4">
                    <para>Returns the file time specified by <argument>time</argument>. If the time cannot be determined, an invalid date time is returned.</para>
                    <see-also>
                        <link raw="QFile::FileTime" href="qfiledevice.html#FileTime-enum" type="enum" enum="QFileDevice::FileTime">QFile::FileTime</link>
                        <link raw="QDateTime::isValid()" href="qdatetime.html#isValid" type="function">QDateTime::isValid()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="caching" fullname="QFileInfo::caching" href="qfileinfo.html#caching" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="143" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="bool" signature="bool caching() const">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1383" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if caching is enabled; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <see-also>
                        <link raw="setCaching()" href="qfileinfo.html#setCaching" type="function">setCaching()</link>
                        <link raw="refresh()" href="qfileinfo.html#refresh" type="function">refresh()</link>
                    </see-also>
                </description>
            </function>
            <function threadsafety="unspecified" name="setCaching" fullname="QFileInfo::setCaching" href="qfileinfo.html#setCaching" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="144" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void setCaching(bool enable)">
                <parameter type="bool" name="enable" default=""/>
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1394" column="4">
                    <para>If <argument>enable</argument> is true, enables caching of file information. If <argument>enable</argument> is false caching is disabled.</para>
                    <para>When caching is enabled, <link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link> reads the file information from the file system the first time it's needed, but generally not later.</para>
                    <para>Caching is enabled by default.</para>
                    <see-also>
                        <link raw="refresh()" href="qfileinfo.html#refresh" type="function">refresh()</link>
                        <link raw="caching()" href="qfileinfo.html#caching" type="function">caching()</link>
                    </see-also>
                </description>
            </function>
            <variable threadsafety="unspecified" name="d_ptr" fullname="QFileInfo::d_ptr" href="qfileinfo.html#d_ptr-var" status="active" access="protected" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="147" type="QSharedDataPointer&lt;QFileInfoPrivate&gt;" static="false">
                <description path="" line="0" column="0"/>
            </variable>
            <function threadsafety="unspecified" name="d_func" fullname="QFileInfo::d_func" href="qfileinfo.html#d_func" status="internal" access="private" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="150" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QFileInfoPrivate *" signature="QFileInfoPrivate * d_func()">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1375" column="4"/>
            </function>
            <function threadsafety="unspecified" name="d_func" fullname="QFileInfo::d_func" href="qfileinfo.html#d_func-1" status="active" access="private" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="151" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="const QFileInfoPrivate *" signature="const QFileInfoPrivate * d_func() const">
                <description path="" line="0" column="0"/>
            </function>
            <typedef threadsafety="unspecified" name="QFileInfoList" href="qfileinfo.html#QFileInfoList-typedef" status="active" access="public" location="qfileinfo.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtCore/qfileinfo.h" lineno="159">
                <description path="C:/Qt/5.11.1/Src/qtbase/src/corelib/io/qfileinfo.cpp" line="1412" column="4">
                    <para>Synonym for <link raw="QList" href="qlist.html" type="class">QList</link>&lt;<link raw="QFileInfo" href="qfileinfo.html" type="class">QFileInfo</link>&gt;.</para>
                </description>
            </typedef>
        </class>
    </document>
</WebXML>
