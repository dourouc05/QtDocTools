<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.2">
  <db:info>
    <db:title>Data Storage</db:title>
    <db:abstract>
      <db:para>Qt's data storage features</db:para>
    </db:abstract>
  </db:info>
  <db:para>Qt's data storage features</db:para>
  <db:section xml:id="saving-and-loading-data">
    <db:title>Saving and Loading Data</db:title>
    <db:para>The <db:code><db:link xlink:href="qiodevice.html" xrefstyle="class" annotations="QIODevice">QIODevice</db:link></db:code> class is the base class for all file and data storage devices in <db:link xlink:href="qtcore-index.html" xrefstyle="page" annotations="Qt Core">Qt Core</db:link>. All classes that are used for reading and writing data inherit from it.</db:para>
    <db:para>Examples of devices are <db:code><db:link xlink:href="qfile.html" xrefstyle="class" annotations="QFile">QFile</db:link></db:code>, <db:code><db:link xlink:href="qbuffer.html" xrefstyle="class" annotations="QBuffer">QBuffer</db:link></db:code>, <db:code><db:link xlink:href="qtcpsocket.html" xrefstyle="class" annotations="QTcpSocket">QTcpSocket</db:link></db:code>, and <db:code><db:link xlink:href="qprocess.html" xrefstyle="class" annotations="QProcess">QProcess</db:link></db:code>. <db:code><db:link xlink:href="qfile.html" xrefstyle="class" annotations="QFile">QFile</db:link></db:code> is used for reading and writing text, binary files, and resources. The <db:code><db:link xlink:href="qbuffer.html" xrefstyle="class" annotations="QBuffer">QBuffer</db:link></db:code> class provides a <db:code><db:link xlink:href="qiodevice.html" xrefstyle="class" annotations="QIODevice">QIODevice</db:link></db:code> interface for a <db:code><db:link xlink:href="qbytearray.html" xrefstyle="class" annotations="QByteArray">QByteArray</db:link></db:code>. <db:code><db:link xlink:href="qtcpsocket.html" xrefstyle="class" annotations="QTcpSocket">QTcpSocket</db:link></db:code> enables the developer to establish a TCP connection and transfer streams of data. <db:code><db:link xlink:href="qprocess.html" xrefstyle="class" annotations="QProcess">QProcess</db:link></db:code> is used to start external programs, and to read from and write to that process.</db:para>
    <db:itemizedlist>
      <db:listitem>
        <db:para>
          <db:link xlink:href="io.html" xrefstyle="" annotations="Input/Output and Networking">Input/Output and Networking</db:link> (list of I/O related classes)</db:para>
      </db:listitem>
      <db:listitem>
        <db:para>
          <db:link xlink:href="io-functions.html" xrefstyle="page" annotations="File and Datastream Functions">File and Datastream Functions</db:link>
        </db:para>
      </db:listitem>
      <db:listitem>
        <db:para>
          <db:link xlink:href="datastreamformat.html" xrefstyle="page" annotations="Serializing Qt Data Types">Serializing Qt Data Types</db:link>
        </db:para>
      </db:listitem>
    </db:itemizedlist>
  </db:section>
  <db:section xml:id="sql-support-in-qt">
    <db:title>SQL Support in Qt</db:title>
    <db:para>The <db:link xlink:href="qtsql-index.html" xrefstyle="page" annotations="Qt SQL">Qt SQL</db:link> module uses driver plugins to communicate with several database APIs. Qt has drivers for SQLite, MySQL, DB2, Borland InterBase, Oracle, ODBC, and PostgreSQL. It is also possible to develop your own driver if Qt does not provide the driver needed.</db:para>
    <db:para>Qt's SQL classes can be divided in 3 layers:</db:para>
    <db:informaltable>
      <db:thead>
        <db:tr>
          <db:th>
            <db:para>Layer</db:para>
          </db:th>
          <db:th>
            <db:para>Purpose</db:para>
          </db:th>
          <db:th>
            <db:para>Example class</db:para>
          </db:th>
        </db:tr>
      </db:thead>
      <db:tr>
        <db:td>
          <db:itemizedlist>
            <db:listitem>
              <db:para>Driver layer</db:para>
            </db:listitem>
            <db:listitem>
              <db:para>SQL API layer</db:para>
            </db:listitem>
            <db:listitem>
              <db:para>User Interface layer</db:para>
            </db:listitem>
          </db:itemizedlist>
        </db:td>
        <db:td>
          <db:itemizedlist>
            <db:listitem>
              <db:para>Low-level communication between database and the SQL API layer</db:para>
            </db:listitem>
            <db:listitem>
              <db:para>Provide access to databases</db:para>
            </db:listitem>
            <db:listitem>
              <db:para>Link data from a database to data-aware widgets</db:para>
            </db:listitem>
          </db:itemizedlist>
        </db:td>
        <db:td>
          <db:itemizedlist>
            <db:listitem>
              <db:para>
                <db:code><db:link xlink:href="qsqldriver.html" xrefstyle="class" annotations="QSqlDriver">QSqlDriver</db:link></db:code>, <db:code><db:link xlink:href="qsqldrivercreator.html" xrefstyle="class" annotations="QSqlDriverCreator">QSqlDriverCreator</db:link></db:code>
              </db:para>
            </db:listitem>
            <db:listitem>
              <db:para>
                <db:code><db:link xlink:href="qsqldatabase.html" xrefstyle="class" annotations="QSqlDatabase">QSqlDatabase</db:link></db:code>, <db:code><db:link xlink:href="qsqlquery.html" xrefstyle="class" annotations="QSqlQuery">QSqlQuery</db:link></db:code>
              </db:para>
            </db:listitem>
            <db:listitem>
              <db:para>
                <db:code><db:link xlink:href="qsqlquerymodel.html" xrefstyle="class" annotations="QSqlQueryModel">QSqlQueryModel</db:link></db:code> (readonly), <db:code><db:link xlink:href="qsqltablemodel.html" xrefstyle="class" annotations="QSqlTableModel">QSqlTableModel</db:link></db:code> (read/write), <db:code><db:link xlink:href="qsqlrelationaltablemodel.html" xrefstyle="class" annotations="QSqlRelationalTableModel">QSqlRelationalTableModel</db:link></db:code> (read/write with foreign-key support)</db:para>
            </db:listitem>
          </db:itemizedlist>
        </db:td>
      </db:tr>
    </db:informaltable>
    <db:para>With the MySQL driver, it is possible to connect to a MySQL server. In order to build the QMYSQL Plugin for Unix or , you need the MySQL header files as well as the shared library, libmysqlclient.so. To compile the plugin for Windows, install MySQL.</db:para>
    <db:para>If you use the embedded MySQL Server, you do not need a MySQL server in order to use that database system. In order to do so, you need to link the Qt plugin to libmysqld instead of libmysqlclient.</db:para>
    <db:para>The Qt SQLite plugin is very suitable for local storage. SQLite is a relational database management system contained in a small (~350 KiB) C library. In contrast to other database management systems, SQLite is not a separate process that is accessed from the client application, but an integral part of it. SQLite operates on a single file, which must be set as the database name when opening a connection. If the file does not exist, SQLite will try to create it.</db:para>
    <db:para>SQLite has some restrictions regarding multiple users and multiple transactions. If you are reading or writing on a file from different transactions, your application might freeze until one transaction commits or rolls back.</db:para>
    <db:para>Once the driver part is set up, the data is accessible using the classes, <db:code><db:link xlink:href="qsqlquerymodel.html" xrefstyle="class" annotations="QSqlQueryModel">QSqlQueryModel</db:link></db:code>, <db:code><db:link xlink:href="qsqltablemodel.html" xrefstyle="class" annotations="QSqlTableModel">QSqlTableModel</db:link></db:code>, and <db:code><db:link xlink:href="qsqlrelationaltablemodel.html" xrefstyle="class" annotations="QSqlRelationalTableModel">QSqlRelationalTableModel</db:link></db:code>. <db:code><db:link xlink:href="qsqltablemodel.html" xrefstyle="class" annotations="QSqlTableModel">QSqlTableModel</db:link></db:code> and <db:code><db:link xlink:href="qsqlrelationaltablemodel.html" xrefstyle="class" annotations="QSqlRelationalTableModel">QSqlRelationalTableModel</db:link></db:code> provide editable models that can used with Qt's item views. <db:code><db:link xlink:href="qsqltablemodel.html" xrefstyle="class" annotations="QSqlTableModel">QSqlTableModel</db:link></db:code> has read/write access to a single table, whereas <db:code><db:link xlink:href="qsqlrelationaltablemodel.html" xrefstyle="class" annotations="QSqlRelationalTableModel">QSqlRelationalTableModel</db:link></db:code> has read/write access to the main table (not to the table with the foreign key).</db:para>
    <db:para>The following pages contain information about incorporating SQL into applications:</db:para>
    <db:itemizedlist>
      <db:listitem>
        <db:para>
          <db:link xlink:href="sql-programming.html" xrefstyle="page" annotations="SQL Programming">SQL Programming</db:link>
        </db:para>
        <db:itemizedlist>
          <db:listitem>
            <db:para>
              <db:link xlink:href="sql-programming.html#database-classes" xrefstyle="page" annotations="Database Classes">Database Classes</db:link>
            </db:para>
          </db:listitem>
          <db:listitem>
            <db:para>
              <db:link xlink:href="sql-sqlstatements.html" xrefstyle="page" annotations="Executing SQL Statements">Executing SQL Statements</db:link>
            </db:para>
          </db:listitem>
          <db:listitem>
            <db:para>
              <db:link xlink:href="sql-model.html" xrefstyle="page" annotations="Using the SQL Model Classes">Using the SQL Model Classes</db:link>
            </db:para>
          </db:listitem>
          <db:listitem>
            <db:para>
              <db:link xlink:href="sql-presenting.html" xrefstyle="page" annotations="Presenting Data in a Table View">Presenting Data in a Table View</db:link>
            </db:para>
          </db:listitem>
          <db:listitem>
            <db:para>
              <db:link xlink:href="sql-forms.html" xrefstyle="page" annotations="Creating Data-Aware Forms">Creating Data-Aware Forms</db:link>
            </db:para>
          </db:listitem>
        </db:itemizedlist>
      </db:listitem>
    </db:itemizedlist>
  </db:section>
  <db:section xml:id="xml-support-in-qt">
    <db:title>XML Support in Qt</db:title>
    <db:para>Qt provides APIs to read and parse XML streams, and also to write to these streams. The following key classes facilitate these actions by providing the necessary infrastructure:</db:para>
    <db:itemizedlist>
      <db:listitem>
        <db:para>
          <db:code><db:link xlink:href="qxmlstreamreader.html" xrefstyle="class" annotations="QXmlStreamReader">QXmlStreamReader</db:link></db:code> class provides a parser to read XML. It is a well-formed XML 1.0 parser that does not include external parsed entities.</db:para>
        <db:itemizedlist>
          <db:listitem>
            <db:para>It understands and resolves XML namespaces. For example, in case of a StartElement, namespaceUri() returns the namespace the element is in, and <db:link xlink:href="13-qdoc-commands-topics.html#name" xrefstyle="page" annotations="name()">name()</db:link> returns the element's local name. The combination of namespaceUri() and <db:link xlink:href="13-qdoc-commands-topics.html#name" xrefstyle="page" annotations="name()">name()</db:link> uniquely identifies an element.</db:para>
          </db:listitem>
          <db:listitem>
            <db:para>It is not CPU-intensive, as it doesn't store the entire XML document tree in memory. It only stores the current token at the time it is reported.</db:para>
          </db:listitem>
        </db:itemizedlist>
      </db:listitem>
      <db:listitem>
        <db:para>The <db:code><db:link xlink:href="qxmlstreamwriter.html" xrefstyle="class" annotations="QXmlStreamWriter">QXmlStreamWriter</db:link></db:code> class provides an XML writer with a simple streaming API. It is the counterpart to <db:code><db:link xlink:href="qxmlstreamreader.html" xrefstyle="class" annotations="QXmlStreamReader">QXmlStreamReader</db:link></db:code> for writing XML, and it operates on a <db:code><db:link xlink:href="qiodevice.html" xrefstyle="class" annotations="QIODevice">QIODevice</db:link></db:code> specified with setDevice().</db:para>
        <db:itemizedlist>
          <db:listitem>
            <db:para>It is a simple API that provides a dedicated function for every XML token or event you want to write.</db:para>
          </db:listitem>
          <db:listitem>
            <db:para>It takes care of prefixing namespaces based on the namespaceUri specified while writing elements or attributes. If you have to use certain standardized prefixes, you can force the writer to use them by declaring the namespaces manually with either writeNamespace() or writeDefaultNamespace().</db:para>
          </db:listitem>
          <db:listitem>
            <db:para>It can automatically format the generated XML data by adding line-breaks and indentation, making it readable. This feature can be turned on with the auto-formatting property.</db:para>
          </db:listitem>
          <db:listitem>
            <db:para>It encodes XML in UTF-8 by default. Different encodings can be enforced using setCodec().</db:para>
          </db:listitem>
        </db:itemizedlist>
      </db:listitem>
    </db:itemizedlist>
    <db:para>Besides reading and writing to XML streams, Qt also provides APIs for the following additional use cases:</db:para>
    <db:itemizedlist>
      <db:listitem>
        <db:para>Querying an XML data source using <db:link xlink:href="xmlprocessing.html" xrefstyle="page" annotations="XQuery">XQuery</db:link> and XPath</db:para>
      </db:listitem>
      <db:listitem>
        <db:para>XML transformation using XSLT</db:para>
      </db:listitem>
      <db:listitem>
        <db:para>XML schema validation</db:para>
      </db:listitem>
    </db:itemizedlist>
    <db:para>The following topics provide more insight into Qt XML support:</db:para>
    <db:itemizedlist>
      <db:listitem>
        <db:para>
          <db:link xlink:href="xml-namespaces.html" xrefstyle="page" annotations="An Introduction to Namespaces">An Introduction to Namespaces</db:link>
        </db:para>
      </db:listitem>
      <db:listitem>
        <db:para>
          <db:link xlink:href="xml-streaming.html" xrefstyle="page" annotations="XML Streaming">XML Streaming</db:link>
        </db:para>
      </db:listitem>
      <db:listitem>
        <db:para>
          <db:link xlink:href="xquery-introduction.html" xrefstyle="page" annotations="A Short Path to XQuery">A Short Path to XQuery</db:link>
        </db:para>
      </db:listitem>
      <db:listitem>
        <db:para>
          <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.html" xrefstyle="" annotations="XmlListModel">XmlListModel</db:link>
        </db:para>
      </db:listitem>
      <db:listitem>
        <db:para>
          <db:link xlink:href="qtxmlpatterns-index.html" xrefstyle="page" annotations="Qt XML Patterns">Qt XML Patterns</db:link>
        </db:para>
      </db:listitem>
    </db:itemizedlist>
  </db:section>
  <db:section xml:id="json-in-qt">
    <db:title>JSON in Qt</db:title>
    <db:para>JSON is a text-based open standard for data interchange that is easy to read and parse. It is used for representing simple data structures and associative arrays, called objects. It is related to JavaScript, but is a language-independent notation form.</db:para>
    <db:para>An object can take 2 forms:</db:para>
    <db:informaltable>
      <db:thead>
        <db:tr>
          <db:th>
            <db:para>Collection of name/value pairs</db:para>
          </db:th>
          <db:th>
            <db:para>Ordered list of values</db:para>
          </db:th>
        </db:tr>
      </db:thead>
      <db:tbody>
        <db:tr>
          <db:td>
            <db:para>{ "last_name": "Routledge", "first_name": "Ronald", "birth_date": 1960 }</db:para>
          </db:td>
          <db:td>
            <db:para>"colours": ["green", "blue", "yellow"]</db:para>
          </db:td>
        </db:tr>
      </db:tbody>
    </db:informaltable>
    <db:itemizedlist>
      <db:listitem>
        <db:para>
          <db:link xlink:href="json.html" xrefstyle="" annotations="JSON Support in Qt">JSON Support in Qt</db:link>
        </db:para>
      </db:listitem>
      <db:listitem>
        <db:para>
          <db:link xlink:href="qtcore-serialization-savegame-example.html" xrefstyle="page" annotations="JSON Save Game Example">JSON Save Game Example</db:link>
        </db:para>
      </db:listitem>
    </db:itemizedlist>
  </db:section>
  <db:section xml:id="local-storage">
    <db:title>Local Storage</db:title>
    <db:para>The Local Storage API provides the ability to access local offline storage in an SQL database from QML and JavaScript.</db:para>
    <db:para>These databases are user-specific and QML-specific, but accessible to all QML applications. They are stored in the Databases subdirectory of QDeclarativeEngine::offlineStoragePath() as SQLite databases (<db:link xlink:href="sql-driver.html" xrefstyle="page" annotations="SQL Database Drivers">SQL Database Drivers</db:link>).</db:para>
    <db:para>The API conforms to the Synchronous API of the HTML5 Web Database API, W3C Working Draft 29 October 2009 (<db:link xlink:href="http://www.w3.org/TR/2009/WD-webdatabase-20091029/" xrefstyle="page" annotations="HTML5 Web Database API">HTML5 Web Database API</db:link>).</db:para>
    <db:para>See <db:link xlink:href="qtquick-localstorage-example.html" xrefstyle="page" annotations="Qt Quick Examples - Local Storage">Qt Quick Examples - Local Storage</db:link> for a basic demonstration of using the Local Storage API.</db:para>
    <db:itemizedlist>
      <db:listitem>
        <db:para>
          <db:link xlink:href="qtquick-localstorage-qmlmodule.html" xrefstyle="" annotations="Qt Quick Local Storage QML Types">Qt Quick Local Storage QML Types</db:link>
        </db:para>
      </db:listitem>
    </db:itemizedlist>
  </db:section>
  <db:section xml:id="qsettings-class">
    <db:title>QSettings Class</db:title>
    <db:para>The <db:code><db:link xlink:href="qsettings.html" xrefstyle="class" annotations="QSettings">QSettings</db:link></db:code> class provides persistent storage of application settings. An application usually remembers its settings from the previous session.</db:para>
    <db:para>Settings are stored differently on different platforms. For example, on Windows they are stored in the registry, whereas on  they are stored in XML files.</db:para>
    <db:para>
      <db:code><db:link xlink:href="qsettings.html" xrefstyle="class" annotations="QSettings">QSettings</db:link></db:code> enable you to save and restore application settings in a portable manner. Constructing and destroying a <db:code><db:link xlink:href="qsettings.html" xrefstyle="class" annotations="QSettings">QSettings</db:link></db:code> object is lightweight and fast. While creating an object of <db:code><db:link xlink:href="qsettings.html" xrefstyle="class" annotations="QSettings">QSettings</db:link></db:code>, it is a good practice to specify not only the name of the application, but also the name of your organization. For example:</db:para>
    <db:programlisting language="other">QSettings settings("MyCompany", "Accountancy");</db:programlisting>
  </db:section>
  <db:section xml:id="resources">
    <db:title>Resources</db:title>
    <db:para>The Qt Resource System is a platform-independent mechanism for storing binary files in the application's executable. This is handy if your application frequently needs a certain file, or set of files. It also protects against loss of that particular file .</db:para>
    <db:para>Resource data can either be compiled into the binary and accessed immediately in the application code, or a binary resource can be created dynamically and registered with the resource system by the application.</db:para>
    <db:para>By default, resources are accessible from the application code by the same file name as they are stored in the source tree, with a <db:code>:/</db:code> prefix, or by a URL with a qrc scheme.</db:para>
    <db:itemizedlist>
      <db:listitem>
        <db:para>
          <db:link xlink:href="resources.html" xrefstyle="page" annotations="The Qt Resource System">The Qt Resource System</db:link>
        </db:para>
      </db:listitem>
    </db:itemizedlist>
  </db:section>
  <db:section xml:id="file-archiving">
    <db:title>File Archiving</db:title>
    <db:para>An archive file is a collection of files or directories which are generally compressed in order to reduce the space they would otherwise consume on a drive. Examples of archive files are ZIP, TAR, RAR and 7z.</db:para>
    <db:para>Qt has support for archives produced by zlib (see <db:link xlink:href="http://qt-project.org/faq/answer/how_to_compress_data_with_qt" xrefstyle="page" annotations="How to compress data with Qt?">qCompress() and qUncompress()</db:link>).</db:para>
  </db:section>
</db:article>
