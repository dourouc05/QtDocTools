<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <class threadsafety="unspecified" name="QQmlExtensionPlugin" href="qqmlextensionplugin.html" status="active" access="public" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="52" since="5.0" bases="QObject" module="QtQml" groups="plugins" brief="Abstract base for custom QML extension plugins">
            <contents name="plugin-example" title="Plugin Example" level="1"/>
            <description path="C:/Qt/5.11.1/Src/qtdeclarative/src/qml/qml/qqmlextensionplugin.cpp" line="45" column="4">
                <brief>The <link raw="QQmlExtensionPlugin" href="qqmlextensionplugin.html" type="class">QQmlExtensionPlugin</link> class provides an abstract base for custom QML extension plugins.</brief>
                <para>
                    <link raw="QQmlExtensionPlugin" href="qqmlextensionplugin.html" type="class">QQmlExtensionPlugin</link> is a plugin interface that makes it possible to create QML extensions that can be loaded dynamically into QML applications. These extensions allow custom QML types to be made available to the QML engine.</para>
                <para>To write a QML extension plugin:</para>
                <list type="ordered" start="1">
                    <item>
                        <para>Subclass <link raw="QQmlExtensionPlugin" href="qqmlextensionplugin.html" type="class">QQmlExtensionPlugin</link></para>
                        <list type="bullet">
                            <item>
                                <para>Use the <link raw="Q_PLUGIN_METADATA()" href="qtplugin.html#Q_PLUGIN_METADATA" type="function">Q_PLUGIN_METADATA()</link> macro to register the plugin with the Qt meta object system</para>
                            </item>
                            <item>
                                <para>Override the <link raw="QQmlExtensionPlugin::registerTypes()" href="qqmlextensionplugin.html#registerTypes" type="function">registerTypes()</link> method and call <link raw="qmlRegisterType()" href="qqmlengine.html#qmlRegisterType-1" type="function">qmlRegisterType()</link> to register the types to be exported by the plugin</para>
                            </item>
                        </list>
                    </item>
                    <item>
                        <para>Write a project file for the plugin</para>
                    </item>
                    <item>
                        <para>Create a <link raw="Module Definition qmldir Files" href="qtqml-modules-qmldir.html" type="page" page="Module Definition qmldir Files">qmldir file</link> to describe the plugin</para>
                    </item>
                </list>
                <para>QML extension plugins are for either application-specific or library-like plugins. Library plugins should limit themselves to registering types, as any manipulation of the engine's root context may cause conflicts or other issues in the library user's code.</para>
                <section id="plugin-example">
                    <heading level="1">Plugin Example</heading>
                    <para>Suppose there is a new <teletype type="highlighted">TimeModel</teletype> C++ class that should be made available as a new QML type. It provides the current time through <teletype type="highlighted">hour</teletype> and <teletype type="highlighted">minute</teletype> properties.</para>
                    <snippet location="qmlextensionplugins/plugin.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/qmlextensionplugins/plugin.cpp" identifier="0"/>
                    <dots indent="4">...</dots>
                    <para>To make this type available, we create a plugin class named <teletype type="highlighted">QExampleQmlPlugin</teletype> which is a subclass of <link raw="QQmlExtensionPlugin" href="qqmlextensionplugin.html" type="class">QQmlExtensionPlugin</link>. It overrides the <link raw="QQmlExtensionPlugin::registerTypes()" href="qqmlextensionplugin.html#registerTypes" type="function">registerTypes()</link> method in order to register the <teletype type="highlighted">TimeModel</teletype> type using <link raw="qmlRegisterType()" href="qqmlengine.html#qmlRegisterType-1" type="function">qmlRegisterType()</link>. It also uses the <link raw="Q_PLUGIN_METADATA()" href="qtplugin.html#Q_PLUGIN_METADATA" type="function">Q_PLUGIN_METADATA()</link> macro in the class definition to register the plugin with the Qt meta object system using a unique identifier for the plugin.</para>
                    <snippet location="qmlextensionplugins/plugin.cpp" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/qmlextensionplugins/plugin.cpp" identifier="plugin"/>
                    <para>This registers the <teletype type="highlighted">TimeModel</teletype> class with version <teletype type="highlighted">1.0</teletype> of this plugin library, as a QML type called <teletype type="highlighted">Time</teletype>. The <link raw="Q_ASSERT()" href="qtglobal.html#Q_ASSERT" type="function">Q_ASSERT()</link> macro can ensure the type namespace is imported correctly by any QML components that use this plugin. The <link raw="Defining QML Types from C++" href="qtqml-cppintegration-definetypes.html" type="page" page="Defining QML Types from C++">Defining QML Types from C++</link> article has more information about registering C++ types into the runtime.</para>
                    <para>Additionally, the project file (<teletype type="highlighted">.pro</teletype>) defines the project as a plugin library, specifies it should be built into the <teletype type="highlighted">imports/TimeExample</teletype> directory, and registers the plugin target name and various other details:</para>
                    <code>TEMPLATE = lib
CONFIG += qt plugin
QT += qml

DESTDIR = imports/TimeExample
TARGET = qmlqtimeexampleplugin
SOURCES += qexampleqmlplugin.cpp</code>
                    <para>Finally, a <link raw="Module Definition qmldir Files" href="qtqml-modules-qmldir.html" type="page" page="Module Definition qmldir Files">qmldir file</link> is required in the <teletype type="highlighted">imports/TimeExample</teletype> directory to describe the plugin and the types that it exports. The plugin includes a <teletype type="highlighted">Clock.qml</teletype> file along with the <teletype type="highlighted">qmlqtimeexampleplugin</teletype> that is built by the project (as shown above in the <teletype type="highlighted">.pro</teletype> file) so both of these need to be specified in the <teletype type="highlighted">qmldir</teletype> file:</para>
                    <quotefile>qmlextensionplugins/imports/TimeExample/qmldir</quotefile>
                    <para>To make things easier for this example, the TimeExample source directory is in <teletype type="highlighted">imports/TimeExample</teletype>, and we build <link raw="Source, Build, and Install Directories" href="configure-options.html#source-build-and-install-directories" type="page" page="Qt Configure Options">in-source</link>. However, the structure of the source directory is not so important, as the <teletype type="highlighted">qmldir</teletype> file can specify paths to installed QML files.</para>
                    <para>What is important is the name of the directory that the qmldir is installed into. When the user imports our module, the QML engine uses the <link raw="Contents of a Module Definition qmldir File" href="qtqml-modules-qmldir.html#contents-of-a-module-definition-qmldir-file" type="page" page="Module Definition qmldir Files">module identifier</link> (<teletype type="highlighted">TimeExample</teletype>) to find the plugin, and so the directory in which it is installed must match the module identifier.</para>
                    <para>Once the project is built and installed, the new <teletype type="highlighted">Time</teletype> component is accessible by any QML component that imports the <teletype type="highlighted">TimeExample</teletype> module</para>
                    <snippet location="qmlextensionplugins/plugins.qml" path="C:/Qt/5.11.1/Src/qtdeclarative/examples/qml/qmlextensionplugins/plugins.qml" identifier="0"/>
                    <para>The full source code is available in the <link raw="qmlextensionplugins" href="qtqml-qmlextensionplugins-example.html" type="page" page="QML Plugin Example">plugins example</link>.</para>
                    <para>The <link raw="Writing QML Extensions with C++" href="qtqml-tutorials-extending-qml-example.html" type="page" page="Writing QML Extensions with C++">Writing QML Extensions with C++</link> tutorial also contains a chapter on creating QML plugins.</para>
                    <para>Note that the <link raw="Qt Quick 1" href="qtquick-porting-qt5.html" type="page" page="Porting QML Applications to Qt 5">Qt Quick 1</link> version is called QDeclarativeExtensionPlugin.</para>
                </section>
                <see-also>
                    <link raw="QQmlEngine::importPlugin()" href="qqmlengine.html#importPlugin" type="function">QQmlEngine::importPlugin()</link>
                    <link raw="How to Create Qt Plugins" href="plugins-howto.html" type="page" page="How to Create Qt Plugins">How to Create Qt Plugins</link>
                </see-also>
            </description>
            <variable threadsafety="unspecified" name="staticMetaObject" fullname="QQmlExtensionPlugin::staticMetaObject" href="qqmlextensionplugin.html#staticMetaObject-var" status="active" access="public" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="56" type="const QMetaObject" static="true">
                <description path="" line="0" column="0"/>
            </variable>
            <function threadsafety="unspecified" name="metaObject" fullname="QQmlExtensionPlugin::metaObject" href="qqmlextensionplugin.html#metaObject" status="active" access="public" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="56" virtual="virtual" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="const QMetaObject *" signature="const QMetaObject * metaObject() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="qt_metacast" fullname="QQmlExtensionPlugin::qt_metacast" href="qqmlextensionplugin.html#qt_metacast" status="active" access="public" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="56" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="void *" signature="void * qt_metacast(const char *)">
                <parameter type="const char *" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="qt_metacall" fullname="QQmlExtensionPlugin::qt_metacall" href="qqmlextensionplugin.html#qt_metacall" status="active" access="public" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="56" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="int" signature="int qt_metacall(QMetaObject::Call , int , void **)">
                <parameter type="QMetaObject::Call" name="" default=""/>
                <parameter type="int" name="" default=""/>
                <parameter type="void **" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="tr" fullname="QQmlExtensionPlugin::tr" href="qqmlextensionplugin.html#tr" status="active" access="public" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="56" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString tr(const char *s, const char *c, int n)">
                <parameter type="const char *" name="s" default=""/>
                <parameter type="const char *" name="c" default="Q_OBJECT"/>
                <parameter type="int" name="n" default="Q_OBJECT"/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="trUtf8" fullname="QQmlExtensionPlugin::trUtf8" href="qqmlextensionplugin.html#trUtf8" status="active" access="public" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="56" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="QString" signature="QString trUtf8(const char *s, const char *c, int n)">
                <parameter type="const char *" name="s" default=""/>
                <parameter type="const char *" name="c" default="Q_OBJECT"/>
                <parameter type="int" name="n" default="Q_OBJECT"/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="qt_static_metacall" fullname="QQmlExtensionPlugin::qt_static_metacall" href="qqmlextensionplugin.html#qt_static_metacall" status="active" access="private" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="56" virtual="non" meta="plain" const="false" static="true" overload="false" delete="false" default="false" final="false" override="false" type="void" signature="void qt_static_metacall(QObject *, QMetaObject::Call , int , void **)">
                <parameter type="QObject *" name="" default=""/>
                <parameter type="QMetaObject::Call" name="" default=""/>
                <parameter type="int" name="" default=""/>
                <parameter type="void **" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <class threadsafety="unspecified" name="QPrivateSignal" fullname="QQmlExtensionPlugin::QPrivateSignal" href="qqmlextensionplugin-qprivatesignal.html" status="active" access="private" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="56">
                <description path="" line="0" column="0"/>
            </class>
            <function threadsafety="unspecified" name="d_func" fullname="QQmlExtensionPlugin::d_func" href="qqmlextensionplugin.html#d_func" status="active" access="private" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="57" virtual="non" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QQmlExtensionPluginPrivate *" signature="QQmlExtensionPluginPrivate * d_func()">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="d_func" fullname="QQmlExtensionPlugin::d_func" href="qqmlextensionplugin.html#d_func-1" status="active" access="private" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="57" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="const QQmlExtensionPluginPrivate *" signature="const QQmlExtensionPluginPrivate * d_func() const">
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="QQmlExtensionPlugin" fullname="QQmlExtensionPlugin::QQmlExtensionPlugin" href="qqmlextensionplugin.html#QQmlExtensionPlugin" status="active" access="public" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="61" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="QQmlExtensionPlugin(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
                <description path="C:/Qt/5.11.1/Src/qtdeclarative/src/qml/qml/qqmlextensionplugin.cpp" line="74" column="4">
                    <para>Constructs a QML extension plugin with the given <argument>parent</argument>.</para>
                    <para>Note that this constructor is invoked automatically by the <link raw="Q_PLUGIN_METADATA()" href="qtplugin.html#Q_PLUGIN_METADATA" type="function">Q_PLUGIN_METADATA()</link> macro, so there is no need for calling it explicitly.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="~QQmlExtensionPlugin" fullname="QQmlExtensionPlugin::~QQmlExtensionPlugin" href="qqmlextensionplugin.html#dtor.QQmlExtensionPlugin" status="internal" access="private" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="62" virtual="virtual" meta="destructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="true" type="" signature="~QQmlExtensionPlugin() override">
                <description path="C:/Qt/5.11.1/Src/qtdeclarative/src/qml/qml/qqmlextensionplugin.cpp" line="86" column="4"/>
            </function>
            <function threadsafety="unspecified" name="baseUrl" fullname="QQmlExtensionPlugin::baseUrl" href="qqmlextensionplugin.html#baseUrl" status="active" access="public" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="64" since="5.1" virtual="non" meta="plain" const="true" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QUrl" brief="Returns the URL of the directory from which the extension is loaded" signature="QUrl baseUrl() const">
                <description path="C:/Qt/5.11.1/Src/qtdeclarative/src/qml/qml/qqmlextensionplugin.cpp" line="93" column="4">
                    <brief>Returns the URL of the directory from which the extension is loaded.</brief>
                    <para>This is useful when the plugin also needs to load QML files or other assets from the same directory.</para>
                </description>
            </function>
            <function threadsafety="unspecified" name="registerTypes" fullname="QQmlExtensionPlugin::registerTypes" href="qqmlextensionplugin.html#registerTypes" status="active" access="public" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="66" virtual="pure" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="true" type="void" signature="void registerTypes(const char *uri) override = 0">
                <parameter type="const char *" name="uri" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="initializeEngine" fullname="QQmlExtensionPlugin::initializeEngine" href="qqmlextensionplugin.html#initializeEngine" status="active" access="public" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="67" virtual="virtual" meta="plain" const="false" static="false" overload="false" delete="false" default="false" final="false" override="true" type="void" signature="void initializeEngine(QQmlEngine *engine, const char *uri) override">
                <parameter type="QQmlEngine *" name="engine" default=""/>
                <parameter type="const char *" name="uri" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="QQmlExtensionPlugin" fullname="QQmlExtensionPlugin::QQmlExtensionPlugin" href="qqmlextensionplugin.html#QQmlExtensionPlugin-1" status="active" access="private" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="70" virtual="non" meta="constructor" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="" signature="QQmlExtensionPlugin(const QQmlExtensionPlugin &amp;)">
                <parameter type="const QQmlExtensionPlugin &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function threadsafety="unspecified" name="operator=" fullname="QQmlExtensionPlugin::operator=" href="qqmlextensionplugin.html#operator-eq" status="active" access="private" location="qqmlextensionplugin.h" filepath="C:/Qt/5.11.1/msvc2017_64/include\QtQml/qqmlextensionplugin.h" lineno="70" virtual="non" meta="copy-assign" const="false" static="false" overload="false" delete="false" default="false" final="false" override="false" type="QQmlExtensionPlugin &amp;" signature="QQmlExtensionPlugin &amp; operator=(const QQmlExtensionPlugin &amp;)">
                <parameter type="const QQmlExtensionPlugin &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
        </class>
    </document>
</WebXML>
