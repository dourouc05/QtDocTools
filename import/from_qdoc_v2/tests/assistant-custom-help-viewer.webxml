<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <page name="assistant-custom-help-viewer.html" href="assistant-custom-help-viewer.html" status="active" location="assistant-manual.qdoc" filepath="C:/Qt/5.11.1/Src/qttools/src/assistant/assistant/doc/src/assistant-manual.qdoc" lineno="61" subtype="page" title="Customizing Qt Assistant" fulltitle="Customizing Qt Assistant" subtitle="" module="QtAssistant">
            <contents name="qt-help-collection-files" title="Qt Help Collection Files" level="1"/>
            <contents name="displaying-custom-documentation" title="Displaying Custom Documentation" level="1"/>
            <contents name="changing-the-appearance-of-qt-assistant" title="Changing the Appearance of Qt Assistant" level="1"/>
            <contents name="creating-a-custom-help-collection-file" title="Creating a Custom Help Collection File" level="2"/>
            <contents name="using-qt-assistant-remotely" title="Using Qt Assistant Remotely" level="1"/>
            <contents name="compatibility-with-old-formats" title="Compatibility with Old Formats" level="1"/>
            <description path="C:/Qt/5.11.1/Src/qttools/src/assistant/assistant/doc/src/assistant-manual.qdoc" line="61" column="4">
                <relation href="assistant-details.html" type="page" meta="previous" description="Using Qt Assistant"/>
                <relation href="qtassistant-index.html" type="page" meta="contents" description="Qt Assistant Manual"/>
                <para>Using <italic>Qt Assistant</italic> as custom help viewer requires more than just being able to display custom documentation. It is equally important that the appearance of <italic>Qt Assistant</italic> can be customized so that it is seen as a application-specific help viewer rather than <italic>Qt Assistant</italic>. This is achieved by changing the window title or icon, as well as some application-specific menu texts and actions. For a complete list of possible customizations, see <link raw="Creating a Custom Help Collection File" href="assistant-custom-help-viewer.html#creating-a-custom-help-collection-file" type="page" page="Customizing Qt Assistant">Creating a Custom Help Collection File</link>.</para>
                <para>Another requirement of a custom help viewer is the ability to receive actions or commands from the application it provides help for. This is especially important when the application offers context sensitive help. When used in this way, the help viewer may need to change its contents depending on the state the application is currently in. This means that the application has to communicate the current state to the help viewer. For more information, see <link raw="Using Qt Assistant Remotely" href="assistant-custom-help-viewer.html#using-qt-assistant-remotely" type="page" page="Customizing Qt Assistant">Using Qt Assistant Remotely</link>.</para>
                <para>The <link raw="Simple Text Viewer Example" href="qtassistant-simpletextviewer-example.html" type="page" page="Simple Text Viewer Example">Simple Text Viewer</link> example uses the techniques described in this document to show how to use <italic>Qt Assistant</italic> as a custom help viewer for an application.</para>
                <para>
                    <bold>Warning:</bold> In order to ship Qt Assistant in your application, it is crucial that you include the sqlite plugin. For more information on how to include plugins in your application, refer to the <link raw="Deploying Qt Applications" href="deployment.html" type="page" page="Deploying Qt Applications">deployment documentation</link>.</para>
                <section id="qt-help-collection-files">
                    <heading level="1">Qt Help Collection Files</heading>
                    <para>The first important point to know about <italic>Qt Assistant</italic> is that it stores all settings related to its appearance <italic>and</italic> a list of installed documentation in a help collection file. This means, when starting <italic>Qt Assistant</italic> with different collection files, <italic>Qt Assistant</italic> may look totally different. This complete separation of settings makes it possible to deploy <italic>Qt Assistant</italic> as a custom help viewer for more than one application on one machine without risk of interference between different instances of <italic>Qt Assistant</italic>.</para>
                    <para>To apply a certain help collection to <italic>Qt Assistant</italic>, specify the respective collection file on the command line when starting it. For example:</para>
                    <snippet location="doc_src_assistant-manual.qdoc" path="C:/Qt/5.11.1/Src/qttools/src/assistant/assistant/doc/snippets/doc_src_assistant-manual.qdoc" identifier="8"/>
                    <para>However, storing all settings in one collection file raises some problems. The collection file is usually installed in the same directory as the application itself, or one of its subdirectories. Depending on the directory and the operating system, the user may not have any permissions to modify this file which would happen when the user settings are stored. Also, it may not even be possible to give the user write permissions, for example when the file is located on a read-only medium like a CD-ROM.</para>
                    <para>Even if it is possible to give everybody the right to store their settings in a globally available collection file, the settings from one user would be overwritten by another user when exiting <italic>Qt Assistant</italic>.</para>
                    <para>To solve this dilemma, <italic>Qt Assistant</italic> creates user specific collection files which are more or less copied from the original collection file. The user-specific collection file will be saved in a subdirectory of the path returned by <link raw="QDesktopServices::DataLocation" href="qdesktopservices-obsolete.html#StandardLocation-enum" type="enum" enum="QDesktopServices::StandardLocation">QDesktopServices::DataLocation</link>. The subdirectory, or <italic>cache directory</italic> within this user-specific location, can be defined in the help collection project file. For example:</para>
                    <snippet location="doc_src_assistant-manual.qdoc" path="C:/Qt/5.11.1/Src/qttools/src/assistant/assistant/doc/snippets/doc_src_assistant-manual.qdoc" identifier="7"/>
                    <para>So, when calling</para>
                    <snippet location="doc_src_assistant-manual.qdoc" path="C:/Qt/5.11.1/Src/qttools/src/assistant/assistant/doc/snippets/doc_src_assistant-manual.qdoc" identifier="8"/>
                    <para>
                        <italic>Qt Assistant</italic> actually uses the collection file:</para>
                    <snippet location="doc_src_assistant-manual.qdoc" path="C:/Qt/5.11.1/Src/qttools/src/assistant/assistant/doc/snippets/doc_src_assistant-manual.qdoc" identifier="9"/>
                    <para>There is no need ever to start <italic>Qt Assistant</italic> with the user specific collection file. Instead, the collection file shipped with the application should always be used. Also, when adding or removing documentation from the collection file (see next section) always use the normal collection file. <italic>Qt Assistant</italic> will take care of synchronizing the user collection files when the list of installed documentation has changed.</para>
                </section>
                <section id="displaying-custom-documentation">
                    <heading level="1">Displaying Custom Documentation</heading>
                    <para>Before <italic>Qt Assistant</italic> is able to show documentation, it has to know where it can find the actual documentation files, meaning that it has to know the location of the Qt compressed help file (*.qch). As already mentioned, <italic>Qt Assistant</italic> stores references to the compressed help files in the currently used collection file. So, when creating a new collection file you can list all compressed help files <italic>Qt Assistant</italic> should display.</para>
                    <snippet location="doc_src_assistant-manual.qdoc" path="C:/Qt/5.11.1/Src/qttools/src/assistant/assistant/doc/snippets/doc_src_assistant-manual.qdoc" identifier="5"/>
                    <para>Sometimes, depending on the application for which <italic>Qt Assistant</italic> acts as a help viewer, more documentation needs to be added over time; for example, when installing more application components or plugins. This can be done manually in <italic>Qt Assistant</italic> by selecting <bold>Edit</bold> &gt; <bold>Preferences</bold> &gt; <bold>Documentation</bold>. However, this approach has the disadvantage that every user has to do it manually to get access to the new documentation.</para>
                    <para>The preferred way of adding documentation to an already existing collection file is to use the <teletype type="highlighted">-register</teletype> command line flag of <italic>Qt Assistant</italic>. When starting <italic>Qt Assistant</italic> with this flag, the documentation will be added and <italic>Qt Assistant</italic> will exit right away displaying a message if the registration was successful or not.</para>
                    <para>The search indexing will only index your custom *.html, *.htm, and *.txt files.</para>
                    <snippet location="doc_src_assistant-manual.qdoc" path="C:/Qt/5.11.1/Src/qttools/src/assistant/assistant/doc/snippets/doc_src_assistant-manual.qdoc" identifier="6"/>
                    <para>The <teletype type="highlighted">-quiet</teletype> flag can be passed on to <italic>Qt Assistant</italic> to prevent it from writing out the status message.</para>
                    <para>
                        <bold>Note:</bold> <italic>Qt Assistant</italic> shows the documentation in the <bold>Contents</bold> view in the same order as it was registered.</para>
                </section>
                <section id="changing-the-appearance-of-qt-assistant">
                    <heading level="1">Changing the Appearance of Qt Assistant</heading>
                    <para>The appearance of <italic>Qt Assistant</italic> can be changed by passing different command line options on startup. However, these command line options only allow to show or hide specific widgets, like the contents or index view. Other customizations, such as changing the application title or icon, or disabling the filter functionality, can be done by creating a custom help collection file.</para>
                </section>
                <section id="creating-a-custom-help-collection-file">
                    <heading level="2">Creating a Custom Help Collection File</heading>
                    <para>The help collection file (*.qhc) used by <italic>Qt Assistant</italic> is created when running the <teletype type="highlighted">qcollectiongenerator</teletype> tool on a help collection project file (*.qhcp). The project file format is XML and it supports the following tags:</para>
                    <table>
                        <header>
                            <item>
                                <para>Tag</para>
                            </item>
                            <item>
                                <para>Brief Description</para>
                            </item>
                        </header>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">&lt;title&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Specifies a window title for <italic>Qt Assistant</italic>.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">&lt;homePage&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Specifies the page to display when selecting <bold>Home</bold> in the <italic>Qt Assistant</italic> main window.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">&lt;startPage&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Specifies the page to display initially when the help collection is used.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">&lt;currentFilter&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Specifies the filter that is initially used. If this filter is not specified, the documentation will not be filtered. This has no impact if only one documentation set is installed.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">&lt;applicationIcon&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Describes an icon that will be used instead of the normal <italic>Qt Assistant</italic> application icon. This is specified as a relative path from the directory containing the collection file.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">&lt;enableFilterFunctionality&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Enables or disables user accessible filter functionality, making it possible to prevent the user from changing any filter when running <italic>Qt Assistant</italic>. It does not mean that the internal filter functionality is completely disabled. Set the value to <teletype type="highlighted">false</teletype> if you want to disable the filtering. If the filter toolbar should be shown by default, set the attribute <teletype type="highlighted">visible</teletype> to <teletype type="highlighted">true</teletype>.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">&lt;enableDocumentationManager&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Shows or hides the <bold>Documentation</bold> tab in the <bold>Preferences</bold> dialog. Disabling the <bold>Documentation</bold> tab allows you to limit <italic>Qt Assistant</italic> to display a specific documentation set or make it impossible for the end user to accidentally remove or install documentation. To hide the <bold>Documentation</bold> tab, set the tag value to <teletype type="highlighted">false</teletype>.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">&lt;enableAddressBar&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Enables or disables the address bar functionality. By default it is enabled. To disable it, set the tag value to <teletype type="highlighted">false</teletype>. If the address bar functionality is enabled, the address bar can be shown by setting the tag attribute <teletype type="highlighted">visible</teletype> to <teletype type="highlighted">true</teletype>.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">&lt;aboutMenuText&gt;, &lt;text&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Lists localized versions for the <bold>About</bold> menu item in the <bold>Help</bold> menu. For example, <bold>About Application</bold>. The text is specified within the <teletype type="highlighted">text</teletype> tags. The <teletype type="highlighted">language</teletype> attribute takes the two letter language name. The text is used as the default text if no language attribute is specified.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">&lt;aboutDialog&gt;, &lt;file&gt;, &lt;icon&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Specifies the text for the <bold>About</bold> dialog that can be opened from the <bold>Help</bold> menu. The text is taken from the file in the <teletype type="highlighted">file</teletype> tags. It is possible to specify a different file or any language. The icon defined by the <teletype type="highlighted">icon</teletype> tags is applied to any language.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">&lt;cacheDirectory base=&quot;collection &gt; default&quot;&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Specifies the cache directory that is used to store index files needed for the full text search and a copy of the collection file. The copy is needed because <italic>Qt Assistant</italic> stores all its settings in the collection file, and therefore, it must be writable for the user. The directory is specified as a relative path. If the <teletype type="highlighted">base</teletype> attribute is set to &quot;collection&quot;, the path is relative to the directory the collection file resides in. If the attribute is set to &quot;default&quot; or if it is missing, the path is relative to the directory given by <link raw="QDesktopServices::DataLocation" href="qdesktopservices-obsolete.html#StandardLocation-enum" type="enum" enum="QDesktopServices::StandardLocation">QDesktopServices::DataLocation</link>. The first form is useful for collections that are used in a <italic>mobile</italic> way, such as carried around on a USB stick.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">&lt;enableFullTextSearchFallback&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Enables or disables the ability to fallback and use the full text search if a keyword cannot be found in the index. This functionality can be used while remote controlling <italic>Qt Assistant</italic>. To make it available for remote control, set the tag value to <teletype type="highlighted">true</teletype>.</para>
                            </item>
                        </row>
                    </table>
                    <para>In addition to those <italic>Qt Assistant</italic> specific tags, the tags for generating and registering documentation can be used. See <link raw="Qt Help Collection Files" href="assistant-custom-help-viewer.html#qt-help-collection-files" type="page" page="Customizing Qt Assistant">Qt Help Collection Files</link> documentation for more information.</para>
                    <para>An example of a help collection file that uses all the available tags is shown below:</para>
                    <snippet location="doc_src_assistant-manual.qdoc" path="C:/Qt/5.11.1/Src/qttools/src/assistant/assistant/doc/snippets/doc_src_assistant-manual.qdoc" identifier="1"/>
                    <para>To create the binary collection file, run the <teletype type="highlighted">qcollectiongenerator</teletype> tool:</para>
                    <snippet location="doc_src_assistant-manual.qdoc" path="C:/Qt/5.11.1/Src/qttools/src/assistant/assistant/doc/snippets/doc_src_assistant-manual.qdoc" identifier="10"/>
                    <para>To test the generated collection file, start <italic>Qt Assistant</italic> in the following way:</para>
                    <snippet location="doc_src_assistant-manual.qdoc" path="C:/Qt/5.11.1/Src/qttools/src/assistant/assistant/doc/snippets/doc_src_assistant-manual.qdoc" identifier="8"/>
                </section>
                <section id="using-qt-assistant-remotely">
                    <heading level="1">Using Qt Assistant Remotely</heading>
                    <para>Even though the help viewer is a standalone application, it will mostly be launched by the application it provides help for. This approach gives the application the possibility to ask for specific help contents to be displayed as soon as the help viewer is started. Another advantage with this approach is that the application can communicate with the help viewer process and can therefore request other help contents to be shown depending on the current state of the application.</para>
                    <para>So, to use <italic>Qt Assistant</italic> as the custom help viewer of your application, simply create a <link raw="QProcess" href="qprocess.html" type="class">QProcess</link> and specify the path to the <italic>Qt Assistant</italic> executable. In order to make <italic>Qt Assistant</italic> listen to your application, turn on its remote control functionality by passing the <teletype type="highlighted">-enableRemoteControl</teletype> command line option.</para>
                    <para>The following example shows how this can be done:</para>
                    <snippet location="doc_src_assistant-manual.qdoc" path="C:/Qt/5.11.1/Src/qttools/src/assistant/assistant/doc/snippets/doc_src_assistant-manual.qdoc" identifier="2"/>
                    <para>Once <italic>Qt Assistant</italic> is running, you can send commands by using the stdin channel of the process. The code snippet below shows how to tell <italic>Qt Assistant</italic> to show a certain page in the documentation.</para>
                    <snippet location="doc_src_assistant-manual.qdoc" path="C:/Qt/5.11.1/Src/qttools/src/assistant/assistant/doc/snippets/doc_src_assistant-manual.qdoc" identifier="3"/>
                    <para>
                        <bold>Note:</bold> The trailing newline character is required to mark the end of the input.</para>
                    <para>The following commands can be used to control <italic>Qt Assistant</italic>:</para>
                    <table>
                        <header>
                            <item>
                                <para>Command</para>
                            </item>
                            <item>
                                <para>Brief Description</para>
                            </item>
                        </header>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">show &lt;Widget&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Shows the sidebar window (dock widget) specified by &lt;Widget&gt;. If the widget is already shown and this command is sent again, the widget will be activated, meaning that it will be raised and given the input focus. Possible values for &lt;Widget&gt; are &quot;contents&quot;, &quot;index&quot;, &quot;bookmarks&quot; or &quot;search&quot;.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">hide &lt;Widget&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Hides the dock widget specified by &lt;Widget&gt;. Possible values for &lt;Widget&gt; are &quot;contents&quot;, &quot;index&quot;, &quot;bookmarks&quot; and &quot;search&quot;.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">setSource &lt;Url&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Displays the given &lt;Url&gt;. The URL can be absolute or relative to the currently displayed page. If the URL is absolute, it has to be a valid Qt help system URL. That is, starting with &quot;qthelp://&quot;.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">activateKeyword &lt;Keyword&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Inserts the specified &lt;Keyword&gt; into the line edit of the index dock widget and activates the corresponding item in the index list. If such an item has more than one link associated with it, a topic chooser will be shown.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">activateIdentifier &lt;Id&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Displays the help contents for the given &lt;Id&gt;. An ID is unique in each namespace and has only one link associated to it, so the topic chooser will never pop up.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">syncContents</teletype></para>
                            </item>
                            <item>
                                <para>Selects the item in the contents widget which corresponds to the currently displayed page.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">setCurrentFilter &lt;filter&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Selects the specified filter and updates the visual representation accordingly.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">expandToc &lt;Depth&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Expands the table of contents tree to the given depth. If depth is 0, the tree will be collapsed completely. If depth is -1, the tree will be expanded completely.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">register &lt;help file&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Adds the given Qt compressed help file to the collection.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">unregister &lt;help file&gt;</teletype></para>
                            </item>
                            <item>
                                <para>Removes the given Qt compressed help file from the collection.</para>
                            </item>
                        </row>
                    </table>
                    <para>If you want to send several commands within a short period of time, it is recommended that you write only a single line to the stdin of the process instead of one line for every command. The commands have to be separated by a semicolon, as shown in the following example:</para>
                    <snippet location="doc_src_assistant-manual.qdoc" path="C:/Qt/5.11.1/Src/qttools/src/assistant/assistant/doc/snippets/doc_src_assistant-manual.qdoc" identifier="4"/>
                </section>
                <section id="compatibility-with-old-formats">
                    <heading level="1">Compatibility with Old Formats</heading>
                    <para>In Qt versions up to 4.3, the help system was based on Document Content File (DCF) and Qt Assistant Documentation Profile (ADP) formats. Unfortunately, the old file formats are not compatible with the new ones that are described in this manual and that are used from Qt 4.4 on, also in Qt 5. In general, the differences are not that big <raw format="HTML">&amp;mdash;</raw> in most cases is the old format is just a subset of the new one. One example is the <teletype type="highlighted">namespace</teletype> tag in the Qt Help Project format, which was not part of the old format, but plays a vital role in the new one. To help you to move to the new file format, we have created a conversion wizard.</para>
                    <para>The wizard is started by executing <teletype type="highlighted">qhelpconverter</teletype>. It guides you through the conversion of different parts of the file and generates a new <teletype type="highlighted">qch</teletype> or <teletype type="highlighted">qhcp</teletype> file.</para>
                    <para>Once the wizard is finished and the files created, run the <teletype type="highlighted">qhelpgenerator</teletype> or the <teletype type="highlighted">qcollectiongenerator</teletype> tool to generate the binary help files used by <italic>Qt Assistant</italic>.</para>
                </section>
            </description>
        </page>
    </document>
</WebXML>
