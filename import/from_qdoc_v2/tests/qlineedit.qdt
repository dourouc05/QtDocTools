<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.2">
   <db:info>
      <db:title>QLineEdit</db:title>
      <db:abstract>
         <db:para>One-line text editor</db:para>
      </db:abstract>
      <db:pubdate>2018-09-12+02:00</db:pubdate>
      <db:date>2018-09-12+02:00</db:date>
      <db:productname>Qt</db:productname>
      <db:productnumber>1.2</db:productnumber>
   </db:info>
   <db:classsynopsis>
      <db:ooclass>
         <db:classname>QLineEdit</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="module">QtWidgets</db:classsynopsisinfo>
      <db:namespacesynopsisinfo role="headers">#include &lt;widgets\qlineedit.h&gt;</db:namespacesynopsisinfo>
      <db:classsynopsisinfo role="inherits">QWidget</db:classsynopsisinfo>
      <db:classsynopsisinfo role="group">basicwidgets</db:classsynopsisinfo>
   </db:classsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The <db:code><db:link xlink:href="qlineedit.html" xrefstyle="class" annotations="QLineEdit">QLineEdit</db:link></db:code> widget is a one-line text editor.</db:para>
      <db:mediaobject>
         <db:imageobject>
            <db:imagedata fileref="images/windows-lineedit.png"/>
         </db:imageobject>
      </db:mediaobject>
      <db:para>A line edit allows the user to enter and edit a single line of plain text with a useful collection of editing functions, including undo and redo, cut and paste, and drag and drop (see <db:code><db:link xlink:href="qlineedit.html#dragEnabled-prop" xrefstyle="function" annotations="setDragEnabled()">setDragEnabled()</db:link></db:code>).</db:para>
      <db:para>By changing the <db:code><db:link xlink:href="qlineedit.html#echoMode-prop" xrefstyle="function" annotations="echoMode()">echoMode()</db:link></db:code> of a line edit, it can also be used as a "write-only" field, for inputs such as passwords.</db:para>
      <db:para>The length of the text can be constrained to <db:code><db:link xlink:href="qlineedit.html#maxLength-prop" xrefstyle="function" annotations="maxLength()">maxLength()</db:link></db:code>. The text can be arbitrarily constrained using a <db:code><db:link xlink:href="qlineedit.html#validator" xrefstyle="function" annotations="validator()">validator()</db:link></db:code> or an <db:code><db:link xlink:href="qlineedit.html#inputMask-prop" xrefstyle="function" annotations="inputMask()">inputMask()</db:link></db:code>, or both. When switching between a validator and an input mask on the same line edit, it is best to clear the validator or input mask to prevent undefined behavior.</db:para>
      <db:para>A related class is <db:code><db:link xlink:href="qtextedit.html" xrefstyle="class" annotations="QTextEdit">QTextEdit</db:link></db:code> which allows multi-line, rich text editing.</db:para>
      <db:para>You can change the text with <db:code><db:link xlink:href="qlineedit.html#text-prop" xrefstyle="function" annotations="setText()">setText()</db:link></db:code> or <db:code><db:link xlink:href="qlineedit.html#insert" xrefstyle="function" annotations="insert()">insert()</db:link></db:code>. The text is retrieved with <db:code><db:link xlink:href="qlineedit.html#text-prop" xrefstyle="function" annotations="text()">text()</db:link></db:code>; the displayed text (which may be different, see <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="EchoMode">EchoMode</db:link></db:code>) is retrieved with <db:code><db:link xlink:href="qlineedit.html#displayText-prop" xrefstyle="function" annotations="displayText()">displayText()</db:link></db:code>. Text can be selected with <db:code><db:link xlink:href="qlineedit.html#setSelection" xrefstyle="function" annotations="setSelection()">setSelection()</db:link></db:code> or <db:code><db:link xlink:href="qlineedit.html#selectAll" xrefstyle="function" annotations="selectAll()">selectAll()</db:link></db:code>, and the selection can be <db:code><db:link xlink:href="qlineedit.html#cut" xrefstyle="function" annotations="cut()">cut()</db:link></db:code>, <db:code><db:link xlink:href="qlineedit.html#copy" xrefstyle="function" annotations="copy()">copy()</db:link></db:code>ied and <db:code><db:link xlink:href="qlineedit.html#paste" xrefstyle="function" annotations="paste()">paste()</db:link></db:code>d. The text can be aligned with <db:code><db:link xlink:href="qlineedit.html#alignment-prop" xrefstyle="function" annotations="setAlignment()">setAlignment()</db:link></db:code>.</db:para>
      <db:para>When the text changes the <db:code><db:link xlink:href="qlineedit.html#text-prop" xrefstyle="function" annotations="textChanged()">textChanged()</db:link></db:code> signal is emitted; when the text changes other than by calling <db:code><db:link xlink:href="qlineedit.html#text-prop" xrefstyle="function" annotations="setText()">setText()</db:link></db:code> the <db:code><db:link xlink:href="qlineedit.html#textEdited" xrefstyle="function" annotations="textEdited()">textEdited()</db:link></db:code> signal is emitted; when the cursor is moved the <db:code><db:link xlink:href="qlineedit.html#cursorPositionChanged" xrefstyle="function" annotations="cursorPositionChanged()">cursorPositionChanged()</db:link></db:code> signal is emitted; and when the Return or Enter key is pressed the <db:code><db:link xlink:href="qlineedit.html#returnPressed" xrefstyle="function" annotations="returnPressed()">returnPressed()</db:link></db:code> signal is emitted.</db:para>
      <db:para>When editing is finished, either because the line edit lost focus or Return/Enter is pressed the <db:code><db:link xlink:href="qlineedit.html#editingFinished" xrefstyle="function" annotations="editingFinished()">editingFinished()</db:link></db:code> signal is emitted.</db:para>
      <db:para>Note that if there is a validator set on the line edit, the <db:code><db:link xlink:href="qlineedit.html#returnPressed" xrefstyle="function" annotations="returnPressed()">returnPressed()</db:link></db:code>/<db:code><db:link xlink:href="qlineedit.html#editingFinished" xrefstyle="function" annotations="editingFinished()">editingFinished()</db:link></db:code> signals will only be emitted if the validator returns <db:code><db:link xlink:href="qvalidator.html#State-enum" xrefstyle="enum" annotations="QValidator::Acceptable">QValidator::Acceptable</db:link></db:code>.</db:para>
      <db:para>By default, QLineEdits have a frame as specified by platform style guides; you can turn it off by calling <db:code><db:link xlink:href="qlineedit.html#frame-prop" xrefstyle="function" annotations="setFrame">setFrame</db:link></db:code>(false).</db:para>
      <db:para>The default key bindings are described below. The line edit also provides a context menu (usually invoked by a right mouse click) that presents some of these editing options. </db:para>
      <db:informaltable>
         <db:thead>
            <db:tr>
               <db:th>
                  <db:para>Keypress</db:para>
               </db:th>
               <db:th>
                  <db:para>Action</db:para>
               </db:th>
            </db:tr>
         </db:thead>
         <db:tr>
            <db:td>
               <db:para>Left Arrow</db:para>
            </db:td>
            <db:td>
               <db:para>Moves the cursor one character to the left.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Shift+Left Arrow</db:para>
            </db:td>
            <db:td>
               <db:para>Moves and selects text one character to the left.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Right Arrow</db:para>
            </db:td>
            <db:td>
               <db:para>Moves the cursor one character to the right.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Shift+Right Arrow</db:para>
            </db:td>
            <db:td>
               <db:para>Moves and selects text one character to the right.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Home</db:para>
            </db:td>
            <db:td>
               <db:para>Moves the cursor to the beginning of the line.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>End</db:para>
            </db:td>
            <db:td>
               <db:para>Moves the cursor to the end of the line.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Backspace</db:para>
            </db:td>
            <db:td>
               <db:para>Deletes the character to the left of the cursor.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Ctrl+Backspace</db:para>
            </db:td>
            <db:td>
               <db:para>Deletes the word to the left of the cursor.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Delete</db:para>
            </db:td>
            <db:td>
               <db:para>Deletes the character to the right of the cursor.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Ctrl+Delete</db:para>
            </db:td>
            <db:td>
               <db:para>Deletes the word to the right of the cursor.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Ctrl+A</db:para>
            </db:td>
            <db:td>
               <db:para>Select all.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Ctrl+C</db:para>
            </db:td>
            <db:td>
               <db:para>Copies the selected text to the clipboard.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Ctrl+Insert</db:para>
            </db:td>
            <db:td>
               <db:para>Copies the selected text to the clipboard.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Ctrl+K</db:para>
            </db:td>
            <db:td>
               <db:para>Deletes to the end of the line.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Ctrl+V</db:para>
            </db:td>
            <db:td>
               <db:para>Pastes the clipboard text into line edit.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Shift+Insert</db:para>
            </db:td>
            <db:td>
               <db:para>Pastes the clipboard text into line edit.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Ctrl+X</db:para>
            </db:td>
            <db:td>
               <db:para>Deletes the selected text and copies it to the clipboard.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Shift+Delete</db:para>
            </db:td>
            <db:td>
               <db:para>Deletes the selected text and copies it to the clipboard.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Ctrl+Z</db:para>
            </db:td>
            <db:td>
               <db:para>Undoes the last operation.</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Ctrl+Y</db:para>
            </db:td>
            <db:td>
               <db:para>Redoes the last undone operation.</db:para>
            </db:td>
         </db:tr>
      </db:informaltable>
      <db:para>Any other key sequence that represents a valid character, will cause the character to be inserted into the line edit.</db:para>
      <db:para>
         <db:emphasis role="bold">See Also:</db:emphasis>
         <db:simplelist type="vert">
            <db:member>
               <db:code><db:link xlink:href="qtextedit.html" xrefstyle="class" annotations="QTextEdit">QTextEdit</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qlabel.html" xrefstyle="class" annotations="QLabel">QLabel</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qcombobox.html" xrefstyle="class" annotations="QComboBox">QComboBox</db:link></db:code>
            </db:member>
            <db:member>
               <db:link xlink:href="guibooks.html#fowler" xrefstyle="page" annotations="fowler">GUI Design Handbook: Field, Entry</db:link>
            </db:member>
            <db:member>
               <db:link xlink:href="qtwidgets-widgets-lineedits-example.html" xrefstyle="page" annotations="Line Edits Example">Line Edits Example</db:link>
            </db:member>
         </db:simplelist>
      </db:para>
   </db:section>
   <db:section>
      <db:title>Member Types Documentation</db:title>
      <db:section>
         <db:title>enum QLineEdit::ActionPosition</db:title>
         <db:enumsynopsis>
            <db:enumname>QLineEdit::ActionPosition</db:enumname>
            <db:enumsynopsisinfo role="since">5.2</db:enumsynopsisinfo>
            <db:enumitem>
               <db:enumidentifier>LeadingPosition</db:enumidentifier>
               <db:enumvalue>0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>TrailingPosition</db:enumidentifier>
               <db:enumvalue>1</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:para>This enum type describes how a line edit should display the action widgets to be added.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QLineEdit::LeadingPosition</db:td>
                  <db:td>0</db:td>
                  <db:td>
                     <db:para>The widget is displayed to the left of the text when using layout direction <db:code>Qt::LeftToRight</db:code> or to the right when using <db:code>Qt::RightToLeft</db:code>, respectively.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QLineEdit::TrailingPosition</db:td>
                  <db:td>1</db:td>
                  <db:td>
                     <db:para>The widget is displayed to the right of the text when using layout direction <db:code>Qt::LeftToRight</db:code> or to the left when using <db:code>Qt::RightToLeft</db:code>, respectively.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#addAction" xrefstyle="function" annotations="addAction()">addAction()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#removeAction" xrefstyle="function" annotations="removeAction()">removeAction()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#layoutDirection-prop" xrefstyle="property" annotations="QWidget::layoutDirection">QWidget::layoutDirection</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This enum was introduced or modified in Qt 5.2.</db:para>
      </db:section>
      <db:section>
         <db:title>enum QLineEdit::EchoMode</db:title>
         <db:enumsynopsis>
            <db:enumname>QLineEdit::EchoMode</db:enumname>
            <db:enumitem>
               <db:enumidentifier>Normal</db:enumidentifier>
               <db:enumvalue>0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>NoEcho</db:enumidentifier>
               <db:enumvalue>1</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>Password</db:enumidentifier>
               <db:enumvalue>2</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>PasswordEchoOnEdit</db:enumidentifier>
               <db:enumvalue>3</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:para>This enum type describes how a line edit should display its contents.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QLineEdit::Normal</db:td>
                  <db:td>0</db:td>
                  <db:td>
                     <db:para>Display characters as they are entered. This is the default.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QLineEdit::NoEcho</db:td>
                  <db:td>1</db:td>
                  <db:td>
                     <db:para>Do not display anything. This may be appropriate for passwords where even the length of the password should be kept secret.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QLineEdit::Password</db:td>
                  <db:td>2</db:td>
                  <db:td>
                     <db:para>Display platform-dependent password mask characters instead of the characters actually entered.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QLineEdit::PasswordEchoOnEdit</db:td>
                  <db:td>3</db:td>
                  <db:td>
                     <db:para>Display characters as they are entered while editing otherwise display characters as with <db:code>Password</db:code>.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#echoMode-prop" xrefstyle="function" annotations="setEchoMode()">setEchoMode()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#echoMode-prop" xrefstyle="function" annotations="echoMode()">echoMode()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Properties</db:title>
      <db:section>
         <db:title>inputMask : QString</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>QString</db:type>
            <db:varname>inputMask</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>QString</db:type>
            <db:methodname>inputMask</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setInputMask</db:methodname>
            <db:methodparam>
               <db:type>QString</db:type>
               <db:parameter>inputMask</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds The validation input mask.</db:para>
         <db:para>If no mask is set,  returns an empty string.</db:para>
         <db:para>Sets the <db:code><db:link xlink:href="qlineedit.html" xrefstyle="class" annotations="QLineEdit">QLineEdit</db:link></db:code>'s validation mask. Validators can be used instead of, or in conjunction with masks; see <db:code><db:link xlink:href="qlineedit.html#setValidator" xrefstyle="function" annotations="setValidator()">setValidator()</db:link></db:code>.</db:para>
         <db:para>Unset the mask and return to normal <db:code><db:link xlink:href="qlineedit.html" xrefstyle="class" annotations="QLineEdit">QLineEdit</db:link></db:code> operation by passing an empty string ("").</db:para>
         <db:para>The table below shows the characters that can be used in an input mask. A space character, the default character for a blank, is needed for cases where a character is <db:emphasis>permitted but not required</db:emphasis>.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Character</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Meaning</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>A</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>ASCII alphabetic character required. A-Z, a-z.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>a</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>ASCII alphabetic character permitted but not required.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>N</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>ASCII alphanumeric character required. A-Z, a-z, 0-9.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>n</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>ASCII alphanumeric character permitted but not required.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>X</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>Any character required.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>x</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>Any character permitted but not required.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>9</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>ASCII digit required. 0-9.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>0</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>ASCII digit permitted but not required.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>D</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>ASCII digit required. 1-9.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>d</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>ASCII digit permitted but not required (1-9).</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>#</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>ASCII digit or plus/minus sign permitted but not required.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>H</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>Hexadecimal character required. A-F, a-f, 0-9.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>h</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>Hexadecimal character permitted but not required.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>B</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>Binary character required. 0-1.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>b</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>Binary character permitted but not required.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>&gt;</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>All following alphabetic characters are uppercased.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>&lt;</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>All following alphabetic characters are lowercased.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>!</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>Switch off case conversion.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>[ ] { }</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>Reserved.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>\</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>Use <db:code>\</db:code> to escape the special characters listed above to use them as separators.</db:para>
               </db:td>
            </db:tr>
         </db:informaltable>
         <db:para>The mask consists of a string of mask characters and separators, optionally followed by a semicolon and the character used for blanks. The blank characters are always removed from the text after editing.</db:para>
         <db:para>Examples:</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Mask</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Notes</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>000.000.000.000;_</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>IP address; blanks are <db:code>_</db:code>.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>HH:HH:HH:HH:HH:HH;_</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>MAC address</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>0000-00-00</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>ISO Date; blanks are <db:code>space</db:code>
                  </db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:code>&gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#</db:code>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>License number; blanks are <db:code>-</db:code> and all (alphabetic) characters are converted to uppercase.</db:para>
               </db:td>
            </db:tr>
         </db:informaltable>
         <db:para>To get range control (e.g., for an IP address) use masks together with <db:code><db:link xlink:href="qlineedit.html#setValidator" xrefstyle="function" annotations="setValidator()">validators</db:link></db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#maxLength-prop" xrefstyle="property" annotations="maxLength">maxLength</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>QString</db:td>
                     <db:td>inputMask() const
                    </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                      void
                    </db:td>
                     <db:td>setInputMask(QStringinputMask)
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>text : QString</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>QString</db:type>
            <db:varname>text</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>QString</db:type>
            <db:methodname>text</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setText</db:methodname>
            <db:methodparam>
               <db:type>QString</db:type>
               <db:parameter>text</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds the line edit's text.</db:para>
         <db:para>Setting this property clears the selection, clears the undo/redo history, moves the cursor to the end of the line and resets the <db:code><db:link xlink:href="qlineedit.html#modified-prop" xrefstyle="property" annotations="modified">modified</db:link></db:code> property to false. The text is not validated when inserted with .</db:para>
         <db:para>The text is truncated to <db:code><db:link xlink:href="qlineedit.html#maxLength-prop" xrefstyle="function" annotations="maxLength()">maxLength()</db:link></db:code> length.</db:para>
         <db:para>By default, this property contains an empty string.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#insert" xrefstyle="function" annotations="insert()">insert()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#clear" xrefstyle="function" annotations="clear()">clear()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>QString</db:td>
                     <db:td>text() const
                    </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                      void
                    </db:td>
                     <db:td>setText(QStringtext)
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>maxLength : int</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>int</db:type>
            <db:varname>maxLength</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>int</db:type>
            <db:methodname>maxLength</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setMaxLength</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>maxLength</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds the maximum permitted length of the text.</db:para>
         <db:para>If the text is too long, it is truncated at the limit.</db:para>
         <db:para>If truncation occurs any selected text will be unselected, the cursor position is set to 0 and the first part of the string is shown.</db:para>
         <db:para>If the line edit has an input mask, the mask defines the maximum string length.</db:para>
         <db:para>By default, this property contains a value of 32767.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#inputMask-prop" xrefstyle="property" annotations="inputMask">inputMask</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>int</db:td>
                     <db:td>maxLength() const
                    </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                      void
                    </db:td>
                     <db:td>setMaxLength(intmaxLength)
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>frame : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>frame</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>hasFrame</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setFrame</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>frame</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds whether the line edit draws itself with a frame.</db:para>
         <db:para>If enabled (the default) the line edit draws itself inside a frame, otherwise the line edit draws itself without any frame.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>hasFrame() const
                    </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                      void
                    </db:td>
                     <db:td>setFrame(boolframe)
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>echoMode : EchoMode</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>EchoMode</db:type>
            <db:varname>echoMode</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>EchoMode</db:type>
            <db:methodname>echoMode</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setEchoMode</db:methodname>
            <db:methodparam>
               <db:type>EchoMode</db:type>
               <db:parameter>echoMode</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds the line edit's echo mode.</db:para>
         <db:para>The echo mode determines how the text entered in the line edit is displayed (or echoed) to the user.</db:para>
         <db:para>The most common setting is <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="Normal">Normal</db:link></db:code>, in which the text entered by the user is displayed verbatim, but <db:code><db:link xlink:href="qlineedit.html" xrefstyle="class" annotations="QLineEdit">QLineEdit</db:link></db:code> also supports modes that allow the entered text to be suppressed or obscured: these include <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="NoEcho">NoEcho</db:link></db:code>, <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="Password">Password</db:link></db:code> and <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="PasswordEchoOnEdit">PasswordEchoOnEdit</db:link></db:code>.</db:para>
         <db:para>The widget's display and the ability to copy or drag the text is affected by this setting.</db:para>
         <db:para>By default, this property is set to <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="Normal">Normal</db:link></db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="EchoMode">EchoMode</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#displayText-prop" xrefstyle="function" annotations="displayText()">displayText()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>EchoMode</db:td>
                     <db:td>echoMode() const
                    </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                      void
                    </db:td>
                     <db:td>setEchoMode(EchoModeechoMode)
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>displayText : QString</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>QString</db:type>
            <db:varname>displayText</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>QString</db:type>
            <db:methodname>displayText</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:para>This property holds the displayed text.</db:para>
         <db:para>If <db:code><db:link xlink:href="qlineedit.html#echoMode-prop" xrefstyle="property" annotations="echoMode">echoMode</db:link></db:code> is <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="Normal">Normal</db:link></db:code> this returns the same as <db:code><db:link xlink:href="qlineedit.html#text-prop" xrefstyle="function" annotations="text()">text()</db:link></db:code>; if <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="EchoMode">EchoMode</db:link></db:code> is <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="Password">Password</db:link></db:code> or <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="PasswordEchoOnEdit">PasswordEchoOnEdit</db:link></db:code> it returns a string of platform-dependent password mask characters <db:code><db:link xlink:href="qlineedit.html#text-prop" xrefstyle="function" annotations="text()">text()</db:link></db:code>.<db:link xlink:href="stylesheet-reference.html#length" xrefstyle="page" annotations="length()">length()</db:link> in size, e.g. "******"; if <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="EchoMode">EchoMode</db:link></db:code> is <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="NoEcho">NoEcho</db:link></db:code> returns an empty string, "".</db:para>
         <db:para>By default, this property contains an empty string.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#echoMode-prop" xrefstyle="function" annotations="setEchoMode()">setEchoMode()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#text-prop" xrefstyle="function" annotations="text()">text()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="EchoMode">EchoMode</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>QString</db:td>
                     <db:td>displayText() const
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>cursorPosition : int</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>int</db:type>
            <db:varname>cursorPosition</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>int</db:type>
            <db:methodname>cursorPosition</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setCursorPosition</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>cursorPosition</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds the current cursor position for this line edit.</db:para>
         <db:para>Setting the cursor position causes a repaint when appropriate.</db:para>
         <db:para>By default, this property contains a value of 0.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>int</db:td>
                     <db:td>cursorPosition() const
                    </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                      void
                    </db:td>
                     <db:td>setCursorPosition(intcursorPosition)
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>alignment : Qt::Alignment</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>Qt::Alignment</db:type>
            <db:varname>alignment</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>Qt::Alignment</db:type>
            <db:methodname>alignment</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setAlignment</db:methodname>
            <db:methodparam>
               <db:type>Qt::Alignment</db:type>
               <db:parameter>alignment</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds the alignment of the line edit.</db:para>
         <db:para>Both horizontal and vertical alignment is allowed here, <db:code><db:link xlink:href="qt.html#AlignmentFlag-enum" xrefstyle="enum" annotations="Qt::AlignJustify">Qt::AlignJustify</db:link></db:code> will map to <db:code><db:link xlink:href="qt.html#AlignmentFlag-enum" xrefstyle="enum" annotations="Qt::AlignLeft">Qt::AlignLeft</db:link></db:code>.</db:para>
         <db:para>By default, this property contains a combination of <db:code><db:link xlink:href="qt.html#AlignmentFlag-enum" xrefstyle="enum" annotations="Qt::AlignLeft">Qt::AlignLeft</db:link></db:code> and <db:code><db:link xlink:href="qt.html#AlignmentFlag-enum" xrefstyle="enum" annotations="Qt::AlignVCenter">Qt::AlignVCenter</db:link></db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:link xlink:href="qt.html#AlignmentFlag-enum" xrefstyle="typedef" annotations="Qt::Alignment">Qt::Alignment</db:link>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>Qt::Alignment</db:td>
                     <db:td>alignment() const
                    </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                      void
                    </db:td>
                     <db:td>setAlignment(Qt::Alignmentalignment)
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>modified : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>modified</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>isModified</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setModified</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>modified</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds whether the line edit's contents has been modified by the user.</db:para>
         <db:para>The modified flag is never read by <db:code><db:link xlink:href="qlineedit.html" xrefstyle="class" annotations="QLineEdit">QLineEdit</db:link></db:code>; it has a default value of false and is changed to true whenever the user changes the line edit's contents.</db:para>
         <db:para>This is useful for things that need to provide a default value but do not start out knowing what the default should be (perhaps it depends on other fields on the form). Start the line edit without the best default, and when the default is known, if modified() returns <db:code>false</db:code> (the user hasn't entered any text), insert the default value.</db:para>
         <db:para>Calling <db:code><db:link xlink:href="qlineedit.html#text-prop" xrefstyle="function" annotations="setText()">setText()</db:link></db:code> resets the modified flag to false.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>isModified() const
                    </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                      void
                    </db:td>
                     <db:td>setModified(boolmodified)
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>hasSelectedText : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>hasSelectedText</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>hasSelectedText</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:para>This property holds whether there is any text selected.</db:para>
         <db:para> returns <db:code>true</db:code> if some or all of the text has been selected by the user; otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>By default, this property is <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#selectedText-prop" xrefstyle="function" annotations="selectedText()">selectedText()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>hasSelectedText() const
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>selectedText : QString</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>QString</db:type>
            <db:varname>selectedText</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>QString</db:type>
            <db:methodname>selectedText</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:para>This property holds the selected text.</db:para>
         <db:para>If there is no selected text this property's value is an empty string.</db:para>
         <db:para>By default, this property contains an empty string.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#hasSelectedText-prop" xrefstyle="function" annotations="hasSelectedText()">hasSelectedText()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>QString</db:td>
                     <db:td>selectedText() const
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>dragEnabled : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>dragEnabled</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>dragEnabled</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setDragEnabled</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>dragEnabled</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds whether the lineedit starts a drag if the user presses and moves the mouse on some selected text.</db:para>
         <db:para>Dragging is disabled by default.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>dragEnabled() const
                    </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                      void
                    </db:td>
                     <db:td>setDragEnabled(booldragEnabled)
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>readOnly : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>readOnly</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>isReadOnly</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setReadOnly</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>readOnly</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds whether the line edit is read only..</db:para>
         <db:para>In read-only mode, the user can still copy the text to the clipboard, or drag and drop the text (if <db:code><db:link xlink:href="qlineedit.html#echoMode-prop" xrefstyle="function" annotations="echoMode()">echoMode()</db:link></db:code> is <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="Normal">Normal</db:link></db:code>), but cannot edit it.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qlineedit.html" xrefstyle="class" annotations="QLineEdit">QLineEdit</db:link></db:code> does not show a cursor in read-only mode.</db:para>
         <db:para>By default, this property is <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#enabled-prop" xrefstyle="function" annotations="setEnabled()">setEnabled()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>isReadOnly() const
                    </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                      void
                    </db:td>
                     <db:td>setReadOnly(boolreadOnly)
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>undoAvailable : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>undoAvailable</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>isUndoAvailable</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:para>This property holds whether undo is available.</db:para>
         <db:para>Undo becomes available once the user has modified the text in the line edit.</db:para>
         <db:para>By default, this property is <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>isUndoAvailable() const
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>redoAvailable : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>redoAvailable</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>isRedoAvailable</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:para>This property holds whether redo is available.</db:para>
         <db:para>Redo becomes available once the user has performed one or more undo operations on text in the line edit.</db:para>
         <db:para>By default, this property is <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>isRedoAvailable() const
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>acceptableInput : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>acceptableInput</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>hasAcceptableInput</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:para>This property holds whether the input satisfies the <db:code><db:link xlink:href="qlineedit.html#inputMask-prop" xrefstyle="property" annotations="inputMask">inputMask</db:link></db:code> and the validator..</db:para>
         <db:para>By default, this property is <db:code>true</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#inputMask-prop" xrefstyle="function" annotations="setInputMask()">setInputMask()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#setValidator" xrefstyle="function" annotations="setValidator()">setValidator()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>hasAcceptableInput() const
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>placeholderText : QString</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>QString</db:type>
            <db:varname>placeholderText</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>QString</db:type>
            <db:methodname>placeholderText</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setPlaceholderText</db:methodname>
            <db:methodparam>
               <db:type>QString</db:type>
               <db:parameter>placeholderText</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds the line edit's placeholder text.</db:para>
         <db:para>Setting this property makes the line edit display a grayed-out placeholder text as long as the line edit is empty.</db:para>
         <db:para>Normally, an empty line edit shows the placeholder text even when it has focus. However, if the content is horizontally centered, the placeholder text is not displayed under the cursor when the line edit has focus.</db:para>
         <db:para>By default, this property contains an empty string.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#text-prop" xrefstyle="function" annotations="text()">text()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.7.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>QString</db:td>
                     <db:td>placeholderText() const
                    </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                      void
                    </db:td>
                     <db:td>setPlaceholderText(QStringplaceholderText)
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>cursorMoveStyle : Qt::CursorMoveStyle</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>Qt::CursorMoveStyle</db:type>
            <db:varname>cursorMoveStyle</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>Qt::CursorMoveStyle</db:type>
            <db:methodname>cursorMoveStyle</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setCursorMoveStyle</db:methodname>
            <db:methodparam>
               <db:type>Qt::CursorMoveStyle</db:type>
               <db:parameter>cursorMoveStyle</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds the movement style of cursor in this line edit.</db:para>
         <db:para>When this property is set to <db:code><db:link xlink:href="qt.html#CursorMoveStyle-enum" xrefstyle="enum" annotations="Qt::VisualMoveStyle">Qt::VisualMoveStyle</db:link></db:code>, the line edit will use visual movement style. Pressing the left arrow key will always cause the cursor to move left, regardless of the text's writing direction. The same behavior applies to right arrow key.</db:para>
         <db:para>When the property is <db:code><db:link xlink:href="qt.html#CursorMoveStyle-enum" xrefstyle="enum" annotations="Qt::LogicalMoveStyle">Qt::LogicalMoveStyle</db:link></db:code> (the default), within a LTR text block, increase cursor position when pressing left arrow key, decrease cursor position when pressing the right arrow key. If the text block is right to left, the opposite behavior applies.</db:para>
         <db:para>This property was introduced in Qt 4.8.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>Qt::CursorMoveStyle</db:td>
                     <db:td>cursorMoveStyle() const
                    </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                      void
                    </db:td>
                     <db:td>setCursorMoveStyle(Qt::CursorMoveStylecursorMoveStyle)
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>clearButtonEnabled : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>clearButtonEnabled</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>isClearButtonEnabled</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setClearButtonEnabled</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>clearButtonEnabled</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds Whether the line edit displays a clear button when it is not empty..</db:para>
         <db:para>If enabled, the line edit displays a trailing <db:emphasis>clear</db:emphasis> button when it contains some text, otherwise the line edit does not show a clear button (the default).</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#addAction" xrefstyle="function" annotations="addAction()">addAction()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#removeAction" xrefstyle="function" annotations="removeAction()">removeAction()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.2.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>isClearButtonEnabled() const
                    </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                      void
                    </db:td>
                     <db:td>setClearButtonEnabled(boolclearButtonEnabled)
                    </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Member Function Documentation</db:title>
      <db:section>
         <db:title> QLineEdit::QLineEdit(QWidget *parent)</db:title>
         <db:constructorsynopsis>
            <db:modifier>public</db:modifier>
            <db:methodname>QLineEdit</db:methodname>
            <db:methodparam>
               <db:type>QWidget *</db:type>
               <db:parameter>parent</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
         </db:constructorsynopsis>
         <db:para>Constructs a line edit with no text.</db:para>
         <db:para>The maximum text length is set to 32767 characters.</db:para>
         <db:para>The <db:code role="argument">parent</db:code> argument is sent to the <db:code><db:link xlink:href="qwidget.html" xrefstyle="class" annotations="QWidget">QWidget</db:link></db:code> constructor.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#text-prop" xrefstyle="function" annotations="setText()">setText()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#maxLength-prop" xrefstyle="function" annotations="setMaxLength()">setMaxLength()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title> QLineEdit::QLineEdit(const QString &amp;contents, QWidget *parent)</db:title>
         <db:constructorsynopsis>
            <db:modifier>public</db:modifier>
            <db:methodname>QLineEdit</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>contents</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QWidget *</db:type>
               <db:parameter>parent</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
         </db:constructorsynopsis>
         <db:para>Constructs a line edit containing the text <db:code role="argument">contents</db:code>.</db:para>
         <db:para>The cursor position is set to the end of the line and the maximum text length to 32767 characters.</db:para>
         <db:para>The <db:code role="argument">parent</db:code> and argument is sent to the <db:code><db:link xlink:href="qwidget.html" xrefstyle="class" annotations="QWidget">QWidget</db:link></db:code> constructor.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#text-prop" xrefstyle="function" annotations="text()">text()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#maxLength-prop" xrefstyle="function" annotations="setMaxLength()">setMaxLength()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title> QLineEdit::~QLineEdit()</db:title>
         <db:destructorsynopsis>
            <db:modifier>public</db:modifier>
            <db:methodname>~QLineEdit</db:methodname>
            <db:void/>
         </db:destructorsynopsis>
         <db:para>Destroys the line edit.</db:para>
      </db:section>
      <db:section>
         <db:title>QAction * QLineEdit::addAction(const QIcon &amp;icon, QLineEdit::ActionPosition position)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QAction *</db:type>
            <db:methodname>addAction</db:methodname>
            <db:methodparam>
               <db:type>const QIcon &amp;</db:type>
               <db:parameter>icon</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QLineEdit::ActionPosition</db:type>
               <db:parameter>position</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Creates a new action with the given <db:code role="argument">icon</db:code> at the <db:code role="argument">position</db:code>.</db:para>
         <db:para>This property was introduced in Qt 5.2.</db:para>
      </db:section>
      <db:section>
         <db:title>QCompleter * QLineEdit::completer() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QCompleter *</db:type>
            <db:methodname>completer</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the current <db:code><db:link xlink:href="qcompleter.html" xrefstyle="class" annotations="QCompleter">QCompleter</db:link></db:code> that provides completions.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#setCompleter" xrefstyle="function" annotations="setCompleter()">setCompleter()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
      </db:section>
      <db:section>
         <db:title>QMargins QLineEdit::textMargins() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QMargins</db:type>
            <db:methodname>textMargins</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the widget's text margins.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#setTextMargins" xrefstyle="function" annotations="setTextMargins()">setTextMargins()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.6.</db:para>
      </db:section>
      <db:section>
         <db:title>QMenu * QLineEdit::createStandardContextMenu()</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QMenu *</db:type>
            <db:methodname>createStandardContextMenu</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>This function creates the standard context menu which is shown when the user clicks on the line edit with the right mouse button. It is called from the default <db:code><db:link xlink:href="qlineedit.html#contextMenuEvent" xrefstyle="function" annotations="contextMenuEvent()">contextMenuEvent()</db:link></db:code> handler. The popup menu's ownership is transferred to the caller.</db:para>
      </db:section>
      <db:section>
         <db:title>QRect QLineEdit::cursorRect() const</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:type>QRect</db:type>
            <db:methodname>cursorRect</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns a rectangle that includes the lineedit cursor.</db:para>
         <db:para>This property was introduced in Qt 4.4.</db:para>
      </db:section>
      <db:section>
         <db:title>QSize QLineEdit::minimumSizeHint() const override</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>override</db:modifier>
            <db:type>QSize</db:type>
            <db:methodname>minimumSizeHint</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns a minimum size for the line edit.</db:para>
         <db:para>The width returned is enough for at least one character.</db:para>
      </db:section>
      <db:section>
         <db:title>QSize QLineEdit::sizeHint() const override</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>override</db:modifier>
            <db:type>QSize</db:type>
            <db:methodname>sizeHint</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns a recommended size for the widget.</db:para>
         <db:para>The width returned, in pixels, is usually enough for about 15 to 20 characters.</db:para>
      </db:section>
      <db:section>
         <db:title>const QValidator * QLineEdit::validator() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>const QValidator *</db:type>
            <db:methodname>validator</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns a pointer to the current input validator, or 0 if no validator has been set.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#setValidator" xrefstyle="function" annotations="setValidator()">setValidator()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QLineEdit::cursorPositionAt(const QPoint &amp;pos)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>cursorPositionAt</db:methodname>
            <db:methodparam>
               <db:type>const QPoint &amp;</db:type>
               <db:parameter>pos</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the cursor position under the point <db:code role="argument">pos</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>int QLineEdit::selectionEnd() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>selectionEnd</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the index of the character directly after the selection in the line edit or -1 if no text is selected.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#selectedText-prop" xrefstyle="function" annotations="selectedText()">selectedText()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#selectionStart" xrefstyle="function" annotations="selectionStart()">selectionStart()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#selectionLength" xrefstyle="function" annotations="selectionLength()">selectionLength()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.10.</db:para>
      </db:section>
      <db:section>
         <db:title>int QLineEdit::selectionLength() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>selectionLength</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the length of the selection.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#selectedText-prop" xrefstyle="function" annotations="selectedText()">selectedText()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#selectionStart" xrefstyle="function" annotations="selectionStart()">selectionStart()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#selectionEnd" xrefstyle="function" annotations="selectionEnd()">selectionEnd()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.10.</db:para>
      </db:section>
      <db:section>
         <db:title>int QLineEdit::selectionStart() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>selectionStart</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the index of the first selected character in the line edit or -1 if no text is selected.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#selectedText-prop" xrefstyle="function" annotations="selectedText()">selectedText()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#selectionEnd" xrefstyle="function" annotations="selectionEnd()">selectionEnd()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#selectionLength" xrefstyle="function" annotations="selectionLength()">selectionLength()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::addAction(QAction *action, QLineEdit::ActionPosition position)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>addAction</db:methodname>
            <db:methodparam>
               <db:type>QAction *</db:type>
               <db:parameter>action</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QLineEdit::ActionPosition</db:type>
               <db:parameter>position</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This is an overloaded function.</db:para>
         <db:para>Adds the <db:code role="argument">action</db:code> to the list of actions at the <db:code role="argument">position</db:code>.</db:para>
         <db:para>This property was introduced in Qt 5.2.</db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::backspace()</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>backspace</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>If no text is selected, deletes the character to the left of the text cursor and moves the cursor one position to the left. If any text is selected, the cursor is moved to the beginning of the selected text and the selected text is deleted.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#del" xrefstyle="function" annotations="del()">del()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::clear()</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>clear</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Clears the contents of the line edit.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#text-prop" xrefstyle="function" annotations="setText()">setText()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#insert" xrefstyle="function" annotations="insert()">insert()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::contextMenuEvent(QContextMenuEvent *event) override</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:modifier>override</db:modifier>
            <db:void/>
            <db:methodname>contextMenuEvent</db:methodname>
            <db:methodparam>
               <db:type>QContextMenuEvent *</db:type>
               <db:parameter>event</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Shows the standard context menu created with <db:code><db:link xlink:href="qlineedit.html#createStandardContextMenu" xrefstyle="function" annotations="createStandardContextMenu()">createStandardContextMenu()</db:link></db:code>.</db:para>
         <db:para>If you do not want the line edit to have a context menu, you can set its <db:code><db:link xlink:href="qwidget.html#contextMenuPolicy-prop" xrefstyle="property" annotations="contextMenuPolicy">contextMenuPolicy</db:link></db:code> to <db:code><db:link xlink:href="qt.html#ContextMenuPolicy-enum" xrefstyle="enum" annotations="Qt::NoContextMenu">Qt::NoContextMenu</db:link></db:code>. If you want to customize the context menu, reimplement this function. If you want to extend the standard context menu, reimplement this function, call <db:code><db:link xlink:href="qlineedit.html#createStandardContextMenu" xrefstyle="function" annotations="createStandardContextMenu()">createStandardContextMenu()</db:link></db:code> and extend the menu returned.</db:para>
         <db:programlisting>
void LineEdit::contextMenuEvent(QContextMenuEvent *event)
{
    QMenu *menu = createStandardContextMenu();
    menu-&gt;addAction(tr("My Menu Item"));
    //...
    menu-&gt;exec(event-&gt;globalPos());
    delete menu;
}
</db:programlisting>
         <db:para>The <db:code role="argument">event</db:code> parameter is used to obtain the position where the mouse cursor was when the event was generated.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#contextMenuPolicy-prop" xrefstyle="function" annotations="setContextMenuPolicy()">setContextMenuPolicy()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::copy() const</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>copy</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Copies the selected text to the clipboard, if there is any, and if <db:code><db:link xlink:href="qlineedit.html#echoMode-prop" xrefstyle="function" annotations="echoMode()">echoMode()</db:link></db:code> is <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="Normal">Normal</db:link></db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#cut" xrefstyle="function" annotations="cut()">cut()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#paste" xrefstyle="function" annotations="paste()">paste()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::cursorBackward(bool mark, int steps)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>cursorBackward</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>mark</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>steps</db:parameter>
               <db:initializer>1</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Moves the cursor back <db:code role="argument">steps</db:code> characters. If <db:code role="argument">mark</db:code> is true each character moved over is added to the selection; if <db:code role="argument">mark</db:code> is false the selection is cleared.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#cursorForward" xrefstyle="function" annotations="cursorForward()">cursorForward()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::cursorForward(bool mark, int steps)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>cursorForward</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>mark</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>steps</db:parameter>
               <db:initializer>1</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Moves the cursor forward <db:code role="argument">steps</db:code> characters. If <db:code role="argument">mark</db:code> is true each character moved over is added to the selection; if <db:code role="argument">mark</db:code> is false the selection is cleared.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#cursorBackward" xrefstyle="function" annotations="cursorBackward()">cursorBackward()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::cursorWordBackward(bool mark)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>cursorWordBackward</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>mark</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Moves the cursor one word backward. If <db:code role="argument">mark</db:code> is true, the word is also selected.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#cursorWordForward" xrefstyle="function" annotations="cursorWordForward()">cursorWordForward()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::cursorWordForward(bool mark)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>cursorWordForward</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>mark</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Moves the cursor one word forward. If <db:code role="argument">mark</db:code> is true, the word is also selected.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#cursorWordBackward" xrefstyle="function" annotations="cursorWordBackward()">cursorWordBackward()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::cut()</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>cut</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Copies the selected text to the clipboard and deletes it, if there is any, and if <db:code><db:link xlink:href="qlineedit.html#echoMode-prop" xrefstyle="function" annotations="echoMode()">echoMode()</db:link></db:code> is <db:code><db:link xlink:href="qlineedit.html#EchoMode-enum" xrefstyle="enum" annotations="Normal">Normal</db:link></db:code>.</db:para>
         <db:para>If the current validator disallows deleting the selected text,  will copy without deleting.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#copy" xrefstyle="function" annotations="copy()">copy()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#paste" xrefstyle="function" annotations="paste()">paste()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#setValidator" xrefstyle="function" annotations="setValidator()">setValidator()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::del()</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>del</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>If no text is selected, deletes the character to the right of the text cursor. If any text is selected, the cursor is moved to the beginning of the selected text and the selected text is deleted.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#backspace" xrefstyle="function" annotations="backspace()">backspace()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::deselect()</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>deselect</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Deselects any selected text.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#setSelection" xrefstyle="function" annotations="setSelection()">setSelection()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#selectAll" xrefstyle="function" annotations="selectAll()">selectAll()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::end(bool mark)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>end</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>mark</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Moves the text cursor to the end of the line unless it is already there. If <db:code role="argument">mark</db:code> is true, text is selected towards the last position; otherwise, any selected text is unselected if the cursor is moved.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#home" xrefstyle="function" annotations="home()">home()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::getTextMargins(int *left, int *top, int *right, int *bottom) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>getTextMargins</db:methodname>
            <db:methodparam>
               <db:type>int *</db:type>
               <db:parameter>left</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int *</db:type>
               <db:parameter>top</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int *</db:type>
               <db:parameter>right</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int *</db:type>
               <db:parameter>bottom</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the widget's text margins for <db:code role="argument">left</db:code>, <db:code role="argument">top</db:code>, <db:code role="argument">right</db:code>, and <db:code role="argument">bottom</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#setTextMargins" xrefstyle="function" annotations="setTextMargins()">setTextMargins()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.5.</db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::home(bool mark)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>home</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>mark</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Moves the text cursor to the beginning of the line unless it is already there. If <db:code role="argument">mark</db:code> is true, text is selected towards the first position; otherwise, any selected text is unselected if the cursor is moved.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#end" xrefstyle="function" annotations="end()">end()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::initStyleOption(QStyleOptionFrame *option) const</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:void/>
            <db:methodname>initStyleOption</db:methodname>
            <db:methodparam>
               <db:type>QStyleOptionFrame *</db:type>
               <db:parameter>option</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Initialize <db:code role="argument">option</db:code> with the values from this <db:code><db:link xlink:href="qlineedit.html" xrefstyle="class" annotations="QLineEdit">QLineEdit</db:link></db:code>. This method is useful for subclasses when they need a <db:code><db:link xlink:href="qstyleoptionframe.html" xrefstyle="class" annotations="QStyleOptionFrame">QStyleOptionFrame</db:link></db:code>, but don't want to fill in all the information themselves.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qstyleoption.html#initFrom" xrefstyle="function" annotations="QStyleOption::initFrom()">QStyleOption::initFrom()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::insert(const QString &amp;newText)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>insert</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>newText</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Deletes any selected text, inserts <db:code role="argument">newText</db:code>, and validates the result. If it is valid, it sets it as the new contents of the line edit.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#text-prop" xrefstyle="function" annotations="setText()">setText()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#clear" xrefstyle="function" annotations="clear()">clear()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::keyPressEvent(QKeyEvent *event) override</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:modifier>override</db:modifier>
            <db:void/>
            <db:methodname>keyPressEvent</db:methodname>
            <db:methodparam>
               <db:type>QKeyEvent *</db:type>
               <db:parameter>event</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Converts the given key press <db:code role="argument">event</db:code> into a line edit action.</db:para>
         <db:para>If Return or Enter is pressed and the current text is valid (or can be <db:code><db:link xlink:href="qvalidator.html#fixup" xrefstyle="function" annotations="QValidator::fixup()">made valid</db:link></db:code> by the validator), the signal <db:code><db:link xlink:href="qlineedit.html#returnPressed" xrefstyle="function" annotations="returnPressed()">returnPressed()</db:link></db:code> is emitted.</db:para>
         <db:para>The default key bindings are listed in the class's detailed description.</db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::paste()</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>paste</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Inserts the clipboard's text at the cursor position, deleting any selected text, providing the line edit is not <db:code><db:link xlink:href="qlineedit.html#readOnly-prop" xrefstyle="property" annotations="QLineEdit::readOnly">read-only</db:link></db:code>.</db:para>
         <db:para>If the end result would not be acceptable to the current <db:code><db:link xlink:href="qlineedit.html#setValidator" xrefstyle="function" annotations="setValidator()">validator</db:link></db:code>, nothing happens.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#copy" xrefstyle="function" annotations="copy()">copy()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#cut" xrefstyle="function" annotations="cut()">cut()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::redo()</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>redo</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Redoes the last operation if redo is <db:code><db:link xlink:href="qlineedit.html#redoAvailable-prop" xrefstyle="property" annotations="QLineEdit::redoAvailable">available</db:link></db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::selectAll()</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>selectAll</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Selects all the text (i.e. highlights it) and moves the cursor to the end. This is useful when a default value has been inserted because if the user types before clicking on the widget, the selected text will be deleted.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#setSelection" xrefstyle="function" annotations="setSelection()">setSelection()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#deselect" xrefstyle="function" annotations="deselect()">deselect()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::setCompleter(QCompleter *c)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setCompleter</db:methodname>
            <db:methodparam>
               <db:type>QCompleter *</db:type>
               <db:parameter>c</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets this line edit to provide auto completions from the completer, <db:code role="argument">c</db:code>. The completion mode is set using <db:code><db:link xlink:href="qcompleter.html#completionMode-prop" xrefstyle="function" annotations="QCompleter::setCompletionMode()">QCompleter::setCompletionMode()</db:link></db:code>.</db:para>
         <db:para>To use a <db:code><db:link xlink:href="qcompleter.html" xrefstyle="class" annotations="QCompleter">QCompleter</db:link></db:code> with a <db:code><db:link xlink:href="qvalidator.html" xrefstyle="class" annotations="QValidator">QValidator</db:link></db:code> or <db:code><db:link xlink:href="qlineedit.html#inputMask-prop" xrefstyle="property" annotations="QLineEdit::inputMask">QLineEdit::inputMask</db:link></db:code>, you need to ensure that the model provided to <db:code><db:link xlink:href="qcompleter.html" xrefstyle="class" annotations="QCompleter">QCompleter</db:link></db:code> contains valid entries. You can use the <db:code><db:link xlink:href="qsortfilterproxymodel.html" xrefstyle="class" annotations="QSortFilterProxyModel">QSortFilterProxyModel</db:link></db:code> to ensure that the <db:code><db:link xlink:href="qcompleter.html" xrefstyle="class" annotations="QCompleter">QCompleter</db:link></db:code>'s model contains only valid entries.</db:para>
         <db:para>If <db:code role="argument">c</db:code> == 0,  removes the current completer, effectively disabling auto completion.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#completer" xrefstyle="function" annotations="completer()">completer()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qcompleter.html" xrefstyle="class" annotations="QCompleter">QCompleter</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::setSelection(int start, int length)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setSelection</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>start</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>length</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Selects text from position <db:code role="argument">start</db:code> and for <db:code role="argument">length</db:code> characters. Negative lengths are allowed.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#deselect" xrefstyle="function" annotations="deselect()">deselect()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#selectAll" xrefstyle="function" annotations="selectAll()">selectAll()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#selectedText-prop" xrefstyle="function" annotations="selectedText()">selectedText()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::setTextMargins(const QMargins &amp;margins)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setTextMargins</db:methodname>
            <db:methodparam>
               <db:type>const QMargins &amp;</db:type>
               <db:parameter>margins</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the <db:code role="argument">margins</db:code> around the text inside the frame.</db:para>
         <db:para>See also <db:code><db:link xlink:href="qlineedit.html#textMargins" xrefstyle="function" annotations="textMargins()">textMargins()</db:link></db:code>.</db:para>
         <db:para>This property was introduced in Qt 4.6.</db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::setTextMargins(int left, int top, int right, int bottom)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setTextMargins</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>left</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>top</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>right</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>bottom</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the margins around the text inside the frame to have the sizes <db:code role="argument">left</db:code>, <db:code role="argument">top</db:code>, <db:code role="argument">right</db:code>, and <db:code role="argument">bottom</db:code>.</db:para>
         <db:para>See also <db:code><db:link xlink:href="qlineedit.html#getTextMargins" xrefstyle="function" annotations="getTextMargins()">getTextMargins()</db:link></db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#textMargins" xrefstyle="function" annotations="textMargins()">textMargins()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.5.</db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::setValidator(const QValidator *v)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setValidator</db:methodname>
            <db:methodparam>
               <db:type>const QValidator *</db:type>
               <db:parameter>v</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets this line edit to only accept input that the validator, <db:code role="argument">v</db:code>, will accept. This allows you to place any arbitrary constraints on the text which may be entered.</db:para>
         <db:para>If <db:code role="argument">v</db:code> == 0,  removes the current input validator. The initial setting is to have no input validator (i.e. any input is accepted up to <db:code><db:link xlink:href="qlineedit.html#maxLength-prop" xrefstyle="function" annotations="maxLength()">maxLength()</db:link></db:code>).</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#validator" xrefstyle="function" annotations="validator()">validator()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qlineedit.html#acceptableInput-prop" xrefstyle="function" annotations="hasAcceptableInput()">hasAcceptableInput()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qintvalidator.html" xrefstyle="class" annotations="QIntValidator">QIntValidator</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qdoublevalidator.html" xrefstyle="class" annotations="QDoubleValidator">QDoubleValidator</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qregexpvalidator.html" xrefstyle="class" annotations="QRegExpValidator">QRegExpValidator</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QLineEdit::undo()</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>undo</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Undoes the last operation if undo is <db:code><db:link xlink:href="qlineedit.html#undoAvailable-prop" xrefstyle="property" annotations="QLineEdit::undoAvailable">available</db:link></db:code>. Deselects any current selection, and updates the selection start to the current cursor position.</db:para>
      </db:section>
   </db:section>
</db:article>
