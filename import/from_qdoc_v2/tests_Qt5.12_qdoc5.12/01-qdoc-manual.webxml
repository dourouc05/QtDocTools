<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <page name="01-qdoc-manual.html" href="01-qdoc-manual.html" status="active" location="qdoc-manual-intro.qdoc" filepath="D:/Qt/5.12.1/Src/qttools/src/qdoc/doc/qdoc-manual-intro.qdoc" lineno="28" subtype="page" title="Introduction to QDoc" fulltitle="Introduction to QDoc" subtitle="" module="QDoc">
            <contents name="running-qdoc" title="Running QDoc" level="1"/>
            <contents name="running-qdoc-in-single-execution-mode" title="Running QDoc in Single Execution Mode" level="2"/>
            <contents name="why-standard-mode-is-slow" title="Why Standard Mode Is Slow" level="3"/>
            <contents name="why-single-execution-mode-is-much-faster" title="Why Single Execution Mode Is Much Faster" level="3"/>
            <contents name="how-qdoc-works" title="How QDoc Works" level="1"/>
            <contents name="command-types" title="Command Types" level="1"/>
            <description path="D:/Qt/5.12.1/Src/qttools/src/qdoc/doc/qdoc-manual-intro.qdoc" line="28" column="4">
                <relation href="27-qdoc-commands-alphabetical.html" type="page" meta="next" description="Command Index"/>
                <relation href="qdoc-index.html" type="page" meta="previous" description="QDoc Manual"/>
                <relation href="qdoc-index.html" type="page" meta="contents" description="QDoc Manual"/>
                <para>QDoc is a tool used by Qt Developers to generate documentation for software projects. It works by extracting <italic>QDoc comments</italic> from project source files and then formatting these comments as HTML pages or DITA XML documents. QDoc finds QDoc comments in <teletype type="highlighted">.cpp</teletype> files and in <teletype type="highlighted">.qdoc</teletype> files. QDoc does not look for QDoc comments in <teletype type="highlighted">.h</teletype> files. A QDoc comment always begins with an exclamation mark (<bold>!</bold>)). For example:</para>
                <code>    / *!
        \class QObject
        \brief The QObject class is the base class of all Qt objects.

        \ingroup objectmodel

        \reentrant

        QObject is the heart of the Qt \l{Object Model}. The
        central feature in this model is a very powerful mechanism
        for seamless object communication called \l{signals and
        slots}. You can connect a signal to a slot with connect()
        and destroy the connection with disconnect(). To avoid
        never ending notification loops you can temporarily block
        signals with blockSignals(). The protected functions
        connectNotify() and disconnectNotify() make it possible to
        track connections.

        QObjects organize themselves in \l {Object Trees &amp;
        Ownership} {object trees}. When you create a QObject with
        another object as parent, the object will automatically
        add itself to the parent's \c children() list. The parent
        takes ownership of the object. It will automatically
        delete its children in its destructor. You can look for an
        object by name and optionally type using findChild() or
        findChildren().

        Every object has an objectName() and its class name can be
        found via the corresponding metaObject() (see
        QMetaObject::className()). You can determine whether the
        object's class inherits another class in the QObject
        inheritance hierarchy by using the \c inherits() function.

    ....
* /</code>
                <para>From the QDoc comment above, QDoc generates the HTML QObject class reference page.</para>
                <para>This manual explains how to use the QDoc commands in QDoc comments to embed good documentation in your source files. It also explains how to make a <link raw="The QDoc Configuration File" href="21-0-qdoc-configuration.html" type="page" page="The QDoc Configuration File">QDoc configuration file</link>, which you will pass to QDoc on the command line.</para>
                <section id="running-qdoc">
                    <heading level="1">Running QDoc</heading>
                    <para>The name of the QDoc program is <teletype type="highlighted">qdoc</teletype>. To run qdoc from the command line, give it the name of a configuration file:</para>
                    <quote>
                        <para>
                            <teletype type="highlighted">$ ../../bin/qdoc ./config.qdocconf</teletype></para>
                    </quote>
                    <para>QDoc recognizes the <teletype type="highlighted">.qdocconf</teletype> suffix as a <link raw="The QDoc Configuration File" href="21-0-qdoc-configuration.html" type="page" page="The QDoc Configuration File">QDoc configuration file</link>. The configuration file is where you tell QDoc where to find the project source files, header files, and <teletype type="highlighted">.qdoc</teletype> files. It is also where you tell QDoc what kind of output to generate (HTML, DITA XML,...), and where to put the generated documentation. The configuration file also contains other information for QDoc.</para>
                    <para>See <link raw="The QDoc Configuration File" href="21-0-qdoc-configuration.html" type="page" page="The QDoc Configuration File">The QDoc Configuration File</link> for instructions on how to set up a QDoc configuration file.</para>
                </section>
                <section id="running-qdoc-in-single-execution-mode">
                    <heading level="2">Running QDoc in Single Execution Mode</heading>
                    <para>Beginning with Qt 5.5, a new way to run QDoc is available that reduces the time it takes to generate the Qt5 documentation by as much as 90%. The new way to run QDoc is <italic>single execution</italic> mode. Single execution mode is not currently available in the Qt5 build system, which still uses the <italic>standard</italic> mode. Single execution mode is only available when you run QDoc yourself, which you will want to do often as you document your module and integrate your documentation with the other Qt modules.</para>
                    <para>To run QDoc in single execution mode, add <teletype type="highlighted">-single-exec</teletype> to the command line and pass QDoc a master <teletype type="highlighted">qdocconf</teletype> file that is simply a list of file paths for qdocconf files of all the Qt5 modules. For example:</para>
                    <code>/Users/me/qt5/qtbase/bin/qdoc -outputdir /Users/me/qt5/qtbase/doc -installdir /Users/me/qt5/qtbase/doc /Users/me/qt5/master.qdocconf -single-exec</code>
                    <para>The qdocconf file, <teletype type="highlighted">master.qdocconf</teletype>, just lists the qdocconf files for all the Qt5 modules to be processed:</para>
                    <badcode>/Users/me/qt5/qtbase/src/corelib/doc/qtcore.qdocconf
/Users/me/qt5/qtbase/src/network/doc/qtnetwork.qdocconf
/Users/me/qt5/qtbase/src/sql/doc/qtsql.qdocconf
/Users/me/qt5/qtbase/src/xml/doc/qtxml.qdocconf
/Users/me/qt5/qtbase/src/testlib/doc/qttestlib.qdocconf
/Users/me/qt5/qtbase/src/concurrent/doc/qtconcurrent.qdocconf
/Users/me/qt5/qtbase/src/gui/doc/qtgui.qdocconf
/Users/me/qt5/qtbase/src/platformheaders/doc/qtplatformheaders.qdocconf
/Users/me/qt5/qtbase/src/widgets/doc/qtwidgets.qdocconf
/Users/me/qt5/qtbase/src/opengl/doc/qtopengl.qdocconf
/Users/me/qt5/qtbase/src/printsupport/doc/qtprintsupport.qdocconf
/Users/me/qt5/qtbase/src/tools/qdoc/doc/config/qdoc.qdocconf
/Users/me/qt5/qtbase/qmake/doc/qmake.qdocconf
/Users/me/qt5/qtsvg/src/svg/doc/qtsvg.qdocconf
/Users/me/qt5/qtxmlpatterns/src/xmlpatterns/doc/qtxmlpatterns.qdocconf
/Users/me/qt5/qtdeclarative/src/qml/doc/qtqml.qdocconf
/Users/me/qt5/qtdeclarative/src/quick/doc/qtquick.qdocconf
/Users/me/qt5/qtquickcontrols/src/controls/doc/qtquickcontrols.qdocconf
/Users/me/qt5/qtquickcontrols/src/layouts/doc/qtquicklayouts.qdocconf
/Users/me/qt5/qtquickcontrols/src/dialogs/doc/qtquickdialogs.qdocconf
/Users/me/qt5/qtmultimedia/src/multimedia/doc/qtmultimedia.qdocconf
/Users/me/qt5/qtmultimedia/src/multimediawidgets/doc/qtmultimediawidgets.qdocconf
/Users/me/qt5/qtactiveqt/src/activeqt/doc/activeqt.qdocconf
/Users/me/qt5/qtsensors/src/sensors/doc/qtsensors.qdocconf
/Users/me/qt5/qtwebkit/Source/qtwebkit.qdocconf
/Users/me/qt5/qttools/src/assistant/help/doc/qthelp.qdocconf
/Users/me/qt5/qttools/src/assistant/assistant/doc/qtassistant.qdocconf
/Users/me/qt5/qttools/src/designer/src/uitools/doc/qtuitools.qdocconf
/Users/me/qt5/qttools/src/designer/src/designer/doc/qtdesigner.qdocconf
/Users/me/qt5/qttools/src/linguist/linguist/doc/qtlinguist.qdocconf
/Users/me/qt5/qtwebkit-examples/doc/qtwebkitexamples.qdocconf
/Users/me/qt5/qtimageformats/src/imageformats/doc/qtimageformats.qdocconf
/Users/me/qt5/qtgraphicaleffects/src/effects/doc/qtgraphicaleffects.qdocconf
/Users/me/qt5/qtscript/src/script/doc/qtscript.qdocconf
/Users/me/qt5/qtscript/src/scripttools/doc/qtscripttools.qdocconf
/Users/me/qt5/qtserialport/src/serialport/doc/qtserialport.qdocconf
/Users/me/qt5/qtdoc/doc/config/qtdoc.qdocconf</badcode>
                </section>
                <section id="why-standard-mode-is-slow">
                    <heading level="3">Why Standard Mode Is Slow</heading>
                    <para>Currently, the Qt5 build system does not use QDoc's <italic>single execution</italic> mode for generating the Qt5 documentation. It runs QDoc in the <italic>standard</italic> mode. The standard mode was came about because it was the easiest way to get convert the Qt4 QDoc to handle the modularization of Qt in Qt5. In Qt4, QDoc ran once over all the Qt4 sources to generate the HTML documentation for Qt. While generating the Qt documentation, Qt4 QDoc also generated an <italic>index file</italic> for Qt. That index file was meant to be used as input to subsequent QDoc runs for generating HTML documentation for other software libraries/products that were based on Qt. The Qt index file allowed QDoc to link documentation written for those other libraries/products to the Qt4 documentation.</para>
                    <para>When Qt5 came along, Qt was divided into modules. Since then, many new modules have been added to Qt. As of version 5.5, there are over 40 separate modules in Qt5, each with its own documentation that links to (depends on) the documentation of other Qt modules.</para>
                    <para>In <italic>standard mode</italic>, QDoc runs twice for each module. The first QDoc run for a particular Qt module, parses all the module's source files and then uses the information to generate the module's index file. It is called the <italic>prepare phase</italic> because it <italic>prepares</italic> the module's index file. The second QDoc run for the module also parses all the module's source files and then generates the module's documentation pages. This is called the <italic>generate phase</italic> because it generates the module's documentation.</para>
                    <para>The module's documentation will likely contain HTML links to the documentation of one or more of the other Qt modules. For example, most Qt5 modules contain links to documentation in <link raw="QtCore" href="qtcore-module.html" type="module">QtCore</link>. When a Qt module contains links into the documentation of other Qt module's, that module is said to depend on those other Qt modules. Hence when QDoc runs the <italic>generate phase</italic> for that module, it must also load the index files for those modules so it can create those thinks.</para>
                    <para>Hence, when the Qt build system generates the Qt documentation, it first runs QDoc once for each module to perform the <italic>prepare phase</italic> to generate all the index files. Then it runs QDoc once for each module to perform the <italic>generate phase</italic>, where it uses the dependent index files to generate the module's documentation, including any cross-module links it finds. Each execution of QDoc, both <italic>prepare phase</italic> and <italic>generate phase</italic>, parses all the source files that are included in the module, and in the <italic>generate phase</italic> also parses the index files for the dependent modules. Nothing is retained or retainable between QDoc runs.</para>
                </section>
                <section id="why-single-execution-mode-is-much-faster">
                    <heading level="3">Why Single Execution Mode Is Much Faster</heading>
                    <para>As the name implies, single execution mode uses a single QDoc process to generate all the Qt5 documentation. The single QDoc process still performs a <italic>prepare phase</italic> for each module and then a <italic>generate phase</italic> for each module, but there are a few differences. It begins by reading the master qdocconf file. Then it reads each qdocconf file in the master list and performs the <italic>prepare phase</italic> for each module. During the <italic>prepare phase</italic>, all the source files for the module are parsed to build a syntax tree for the module. The module's index file is then generated, although QDoc will not re-read the index files in the <italic>generate phase</italic>. The important difference here is that the module's syntax tree is retained after the index file is generated, so that after the <italic>prepare phase</italic> has been run for all the modules, QDoc still has all the syntax trees it built.</para>
                    <para>QDoc then processes each module again for the <italic>generate phase</italic>. But now QDoc doesn't need to re-parse each module's source files, because the module's syntax tree is still in memory. Nor does QDoc need to re-read the index files for the dependent modules, again because it still has the syntax trees for those modules in memory. It remains only to traverse each module's syntax tree to generate the documentation pages.</para>
                    <para>Hence, QDoc parses each source file once and only once and doesn't need to read index files. This is what makes single execution mode much faster than the standard mode. It is anticipated that the Qt build system will eventually run QDoc in single execution mode. However, changes to the master qdocconf file might be required, so the method described above for running QDoc in single execution mode might have to change, watch this space for updates.</para>
                </section>
                <section id="how-qdoc-works">
                    <heading level="1">How QDoc Works</heading>
                    <para>QDoc begins by reading the configuration file you specified on the command line. It stores all the variables from the configuration file for later use. One of the first variables it uses is <teletype type="highlighted">outputformats</teletype>. This variable tells QDoc which output generators it will run. The default value is <italic>HTML</italic>, so if you don't set <teletype type="highlighted">outputformats</teletype> in your configuration file, QDoc will generate HTML output. That's usually what you will want anyway, but you can also specify <italic>DITAXML</italic> to get DITA XML output instead.</para>
                    <para>Next, QDoc uses the values of the <link raw="headerdirs-variable" href="22-qdoc-configuration-generalvariables.html#headerdirs-variable" type="page" page="Generic Configuration Variables">headerdirs</link> variable and/or the <link raw="22-qdoc-configuration-generalvariables.html#headers-variable" href="22-qdoc-configuration-generalvariables.html#headers-variable" type="page" page="Generic Configuration Variables">headers</link> variable to find and parse all the header files for your project. QDoc does <italic>not</italic> scan header files for QDoc comments. It parses the header files to build a master tree of all the items that should be documented, in other words, the items that QDoc should find QDoc comments for.</para>
                    <para>After parsing all the header files and building the master tree of items to be documented, QDoc uses the value of the <link raw="22-qdoc-configuration-generalvariables.html#sourcedirs-variable" href="22-qdoc-configuration-generalvariables.html#sourcedirs-variable" type="page" page="Generic Configuration Variables">sourcedirs</link> variable and/or the value of the <link raw="22-qdoc-configuration-generalvariables.html#sources-variable" href="22-qdoc-configuration-generalvariables.html#sources-variable" type="page" page="Generic Configuration Variables">sources</link> variable to find and parse all the <teletype type="highlighted">.cpp</teletype> and <teletype type="highlighted">.qdoc</teletype> files for your project. These are the files QDoc scans for <italic>QDoc comments</italic>. Remember that a QDoc comment begins with an exclamation mark: <bold>/*!</bold> .</para>
                    <para>For each QDoc comment it finds, it searches the master tree for the item where the documentation belongs. Then it interprets the qdoc commands in the comment and stores the interpreted commands and the comment text in the tree node for the item.</para>
                    <para>Finally, QDoc traverses the master tree. For each node, if the node has stored documentation, QDoc calls the output generator specified by the <teletype type="highlighted">outputformats</teletype> variable to format and write the documentation in the directory specified in the configuration file in the <link raw="22-qdoc-configuration-generalvariables.html#outputdir-variable" href="22-qdoc-configuration-generalvariables.html#outputdir-variable" type="page" page="Generic Configuration Variables">outputdir</link> variable.</para>
                </section>
                <section id="command-types">
                    <heading level="1">Command Types</heading>
                    <para>QDoc interprets three types of commands:</para>
                    <list type="bullet">
                        <item>
                            <para>
                                <link raw="Topic Commands" href="13-qdoc-commands-topics.html" type="page" page="Topic Commands">Topic Commands</link></para>
                        </item>
                        <item>
                            <para>
                                <link raw="Context Commands" href="14-qdoc-commands-contextcommands.html" type="page" page="Context Commands">Context Commands</link></para>
                        </item>
                        <item>
                            <para>
                                <link raw="Markup Commands" href="03-qdoc-commands-markup.html" type="page" page="Markup Commands">Markup Commands</link></para>
                        </item>
                    </list>
                    <para>Topic commands identify the element you are documenting, for example a C++ class, function, type, or an extra page of text that doesn't map to an underlying C++ element.</para>
                    <para>Context commands tell QDoc how the element being documented relates to other documented elements, for example, next and previous page links, inclusion in page groups, or library modules. Context commands can also provide information about the documented element that QDoc can't get from the source files, for example, whether the element is thread-safe, whether it is an overloaded or reimplemented function, or whether it has been deprecated.</para>
                    <para>Markup commands tell QDoc how text and image elements in the document should be rendered, or about the document's outline structure.</para>
                </section>
            </description>
        </page>
    </document>
</WebXML>
