<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <class threadsafety="reentrant" name="QByteArray" href="qbytearray.html" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="156" module="QtCore" groups="tools,shared,string-processing" brief="Array of bytes">
            <contents name="notes-on-locale" title="Notes on Locale" level="1"/>
            <contents name="number-string-conversions" title="Number-String Conversions" level="2"/>
            <contents name="8-bit-character-comparisons" title="8-bit Character Comparisons" level="2"/>
            <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="898" column="4">
                <brief>The <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> class provides an array of bytes.</brief>
                <para>
                    <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> can be used to store both raw bytes (including '\0's) and traditional 8-bit '\0'-terminated strings. Using <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> is much more convenient than using <teletype type="highlighted">const char *</teletype>. Behind the scenes, it always ensures that the data is followed by a '\0' terminator, and uses <link raw="implicit sharing" href="implicit-sharing.html#" type="page" page="Implicit Sharing">implicit sharing</link> (copy-on-write) to reduce memory usage and avoid needless copying of data.</para>
                <para>In addition to <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>, Qt also provides the <link raw="QString" href="qstring.html" type="class">QString</link> class to store string data. For most purposes, <link raw="QString" href="qstring.html" type="class">QString</link> is the class you want to use. It stores 16-bit Unicode characters, making it easy to store non-ASCII/non-Latin-1 characters in your application. Furthermore, <link raw="QString" href="qstring.html" type="class">QString</link> is used throughout in the Qt API. The two main cases where <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> is appropriate are when you need to store raw binary data, and when memory conservation is critical (e.g., with Qt for Embedded Linux).</para>
                <para>One way to initialize a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> is simply to pass a <teletype type="highlighted">const char *</teletype> to its constructor. For example, the following code creates a byte array of size 5 containing the data &quot;Hello&quot;:</para>
                <code>QByteArray ba(&quot;Hello&quot;);</code>
                <para>Although the <link raw="size()" href="qbytearray.html#size" type="function">size()</link> is 5, the byte array also maintains an extra '\0' character at the end so that if a function is used that asks for a pointer to the underlying data (e.g. a call to <link raw="data()" href="qbytearray.html#data" type="function">data()</link>), the data pointed to is guaranteed to be '\0'-terminated.</para>
                <para>
                    <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> makes a deep copy of the <teletype type="highlighted">const char *</teletype> data, so you can modify it later without experiencing side effects. (If for performance reasons you don't want to take a deep copy of the character data, use <link raw="QByteArray::fromRawData()" href="qbytearray.html#fromRawData" type="function">QByteArray::fromRawData()</link> instead.)</para>
                <para>Another approach is to set the size of the array using <link raw="resize()" href="qbytearray.html#resize" type="function">resize()</link> and to initialize the data byte per byte. <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> uses 0-based indexes, just like C++ arrays. To access the byte at a particular index position, you can use operator[](). On non-const byte arrays, operator[]() returns a reference to a byte that can be used on the left side of an assignment. For example:</para>
                <code>QByteArray ba;
ba.resize(5);
ba[0] = 0x3c;
ba[1] = 0xb8;
ba[2] = 0x64;
ba[3] = 0x18;
ba[4] = 0xca;</code>
                <para>For read-only access, an alternative syntax is to use <link raw="at()" href="qbytearray.html#at" type="function">at()</link>:</para>
                <code>for (int i = 0; i &lt; ba.size(); ++i) {
    if (ba.at(i) &gt;= 'a' &amp;&amp; ba.at(i) &lt;= 'f')
        cout &lt;&lt; &quot;Found character in range [a-f]&quot; &lt;&lt; endl;
}</code>
                <para>
                    <link raw="at()" href="qbytearray.html#at" type="function">at()</link> can be faster than operator[](), because it never causes a <link raw="deep copy" href="implicit-sharing.html#deep-copy" type="page" page="Implicit Sharing">deep copy</link> to occur.</para>
                <para>To extract many bytes at a time, use <link raw="left()" href="qbytearray.html#left" type="function">left()</link>, <link raw="right()" href="qbytearray.html#right" type="function">right()</link>, or <link raw="mid()" href="qbytearray.html#mid" type="function">mid()</link>.</para>
                <para>A <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> can embed '\0' bytes. The <link raw="size()" href="qbytearray.html#size" type="function">size()</link> function always returns the size of the whole array, including embedded '\0' bytes, but excluding the terminating '\0' added by <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>. For example:</para>
                <code>QByteArray ba1(&quot;ca\0r\0t&quot;);
ba1.size();                     // Returns 2.
ba1.constData();                // Returns &quot;ca&quot; with terminating \0.

QByteArray ba2(&quot;ca\0r\0t&quot;, 3);
ba2.size();                     // Returns 3.
ba2.constData();                // Returns &quot;ca\0&quot; with terminating \0.

QByteArray ba3(&quot;ca\0r\0t&quot;, 4);
ba3.size();                     // Returns 4.
ba3.constData();                // Returns &quot;ca\0r&quot; with terminating \0.

const char cart[] = {'c', 'a', '\0', 'r', '\0', 't'};
QByteArray ba4(QByteArray::fromRawData(cart, 6));
ba4.size();                     // Returns 6.
ba4.constData();                // Returns &quot;ca\0r\0t&quot; without terminating \0.</code>
                <para>If you want to obtain the length of the data up to and excluding the first '\0' character, call <link raw="qstrlen()" href="qbytearray.html#qstrlen" type="function">qstrlen()</link> on the byte array.</para>
                <para>After a call to <link raw="resize()" href="qbytearray.html#resize" type="function">resize()</link>, newly allocated bytes have undefined values. To set all the bytes to a particular value, call <link raw="fill()" href="qbytearray.html#fill" type="function">fill()</link>.</para>
                <para>To obtain a pointer to the actual character data, call <link raw="data()" href="qbytearray.html#data" type="function">data()</link> or <link raw="constData()" href="qbytearray.html#constData" type="function">constData()</link>. These functions return a pointer to the beginning of the data. The pointer is guaranteed to remain valid until a non-const function is called on the <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>. It is also guaranteed that the data ends with a '\0' byte unless the <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> was created from a <link raw="fromRawData()" href="qbytearray.html#fromRawData" type="function">raw data</link>. This '\0' byte is automatically provided by <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> and is not counted in <link raw="size()" href="qbytearray.html#size" type="function">size()</link>.</para>
                <para>
                    <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> provides the following basic functions for modifying the byte data: <link raw="append()" href="qbytearray.html#append" type="function">append()</link>, <link raw="prepend()" href="qbytearray.html#prepend" type="function">prepend()</link>, <link raw="insert()" href="qbytearray.html#insert" type="function">insert()</link>, <link raw="replace()" href="qbytearray.html#replace" type="function">replace()</link>, and <link raw="remove()" href="qbytearray.html#remove" type="function">remove()</link>. For example:</para>
                <code>QByteArray x(&quot;and&quot;);
x.prepend(&quot;rock &quot;);         // x == &quot;rock and&quot;
x.append(&quot; roll&quot;);          // x == &quot;rock and roll&quot;
x.replace(5, 3, &quot;&amp;&quot;);       // x == &quot;rock &amp; roll&quot;</code>
                <para>The <link raw="replace()" href="qbytearray.html#replace" type="function">replace()</link> and <link raw="remove()" href="qbytearray.html#remove" type="function">remove()</link> functions' first two arguments are the position from which to start erasing and the number of bytes that should be erased.</para>
                <para>When you <link raw="append()" href="qbytearray.html#append" type="function">append()</link> data to a non-empty array, the array will be reallocated and the new data copied to it. You can avoid this behavior by calling <link raw="reserve()" href="qbytearray.html#reserve" type="function">reserve()</link>, which preallocates a certain amount of memory. You can also call <link raw="capacity()" href="qbytearray.html#capacity" type="function">capacity()</link> to find out how much memory <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> actually allocated. Data appended to an empty array is not copied.</para>
                <para>A frequent requirement is to remove whitespace characters from a byte array ('\n', '\t', ' ', etc.). If you want to remove whitespace from both ends of a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>, use <link raw="trimmed()" href="qbytearray.html#trimmed" type="function">trimmed()</link>. If you want to remove whitespace from both ends and replace multiple consecutive whitespaces with a single space character within the byte array, use <link raw="simplified()" href="qbytearray.html#simplified" type="function">simplified()</link>.</para>
                <para>If you want to find all occurrences of a particular character or substring in a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>, use <link raw="indexOf()" href="qbytearray.html#indexOf" type="function">indexOf()</link> or <link raw="lastIndexOf()" href="qbytearray.html#lastIndexOf" type="function">lastIndexOf()</link>. The former searches forward starting from a given index position, the latter searches backward. Both return the index position of the character or substring if they find it; otherwise, they return -1. For example, here's a typical loop that finds all occurrences of a particular substring:</para>
                <code>QByteArray ba(&quot;We must be &lt;b&gt;bold&lt;/b&gt;, very &lt;b&gt;bold&lt;/b&gt;&quot;);
int j = 0;
while ((j = ba.indexOf(&quot;&lt;b&gt;&quot;, j)) != -1) {
    cout &lt;&lt; &quot;Found &lt;b&gt; tag at index position &quot; &lt;&lt; j &lt;&lt; endl;
    ++j;
}</code>
                <para>If you simply want to check whether a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> contains a particular character or substring, use <link raw="contains()" href="qbytearray.html#contains" type="function">contains()</link>. If you want to find out how many times a particular character or substring occurs in the byte array, use <link raw="count()" href="qbytearray.html#count-3" type="function">count()</link>. If you want to replace all occurrences of a particular value with another, use one of the two-parameter <link raw="replace()" href="qbytearray.html#replace" type="function">replace()</link> overloads.</para>
                <para>
                    <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>s can be compared using overloaded operators such as operator&lt;(), operator&lt;=(), operator==(), operator&gt;=(), and so on. The comparison is based exclusively on the numeric values of the characters and is very fast, but is not what a human would expect. <link raw="QString::localeAwareCompare()" href="qstring.html#localeAwareCompare" type="function">QString::localeAwareCompare()</link> is a better choice for sorting user-interface strings.</para>
                <para>For historical reasons, <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> distinguishes between a null byte array and an empty byte array. A <italic>null</italic> byte array is a byte array that is initialized using <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>'s default constructor or by passing (const char *)0 to the constructor. An <italic>empty</italic> byte array is any byte array with size 0. A null byte array is always empty, but an empty byte array isn't necessarily null:</para>
                <code>QByteArray().isNull();          // returns true
QByteArray().isEmpty();         // returns true

QByteArray(&quot;&quot;).isNull();        // returns false
QByteArray(&quot;&quot;).isEmpty();       // returns true

QByteArray(&quot;abc&quot;).isNull();     // returns false
QByteArray(&quot;abc&quot;).isEmpty();    // returns false</code>
                <para>All functions except <link raw="isNull()" href="qbytearray.html#isNull" type="function">isNull()</link> treat null byte arrays the same as empty byte arrays. For example, <link raw="data()" href="qbytearray.html#data" type="function">data()</link> returns a pointer to a '\0' character for a null byte array (<italic>not</italic> a null pointer), and <link raw="QByteArray()" href="qbytearray.html#QByteArray" type="function">QByteArray()</link> compares equal to <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>(&quot;&quot;). We recommend that you always use <link raw="isEmpty()" href="qbytearray.html#isEmpty" type="function">isEmpty()</link> and avoid <link raw="isNull()" href="qbytearray.html#isNull" type="function">isNull()</link>.</para>
                <section id="notes-on-locale">
                    <heading level="1">Notes on Locale</heading>
                </section>
                <section id="number-string-conversions">
                    <heading level="2">Number-String Conversions</heading>
                    <para>Functions that perform conversions between numeric data types and strings are performed in the C locale, irrespective of the user's locale settings. Use <link raw="QString" href="qstring.html" type="class">QString</link> to perform locale-aware conversions between numbers and strings.</para>
                </section>
                <section id="8-bit-character-comparisons">
                    <heading level="2">8-bit Character Comparisons</heading>
                    <para>In <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>, the notion of uppercase and lowercase and of which character is greater than or less than another character is locale dependent. This affects functions that support a case insensitive option or that compare or lowercase or uppercase their arguments. Case insensitive operations and comparisons will be accurate if both strings contain only ASCII characters. (If <teletype type="highlighted">$LC_CTYPE</teletype> is set, most Unix systems do &quot;the right thing&quot;.) Functions that this affects include <link raw="contains()" href="qbytearray.html#contains" type="function">contains()</link>, <link raw="indexOf()" href="qbytearray.html#indexOf" type="function">indexOf()</link>, <link raw="lastIndexOf()" href="qbytearray.html#lastIndexOf" type="function">lastIndexOf()</link>, operator&lt;(), operator&lt;=(), operator&gt;(), operator&gt;=(), <link raw="isLower()" href="qbytearray.html#isLower" type="function">isLower()</link>, <link raw="isUpper()" href="qbytearray.html#isUpper" type="function">isUpper()</link>, <link raw="toLower()" href="qbytearray.html#toLower" type="function">toLower()</link> and <link raw="toUpper()" href="qbytearray.html#toUpper" type="function">toUpper()</link>.</para>
                    <para>This issue does not apply to <link raw="QString" href="qstring.html" type="class">QString</link>s since they represent characters using Unicode.</para>
                </section>
                <see-also>
                    <link raw="QString" href="qstring.html" type="class">QString</link>
                    <link raw="QBitArray" href="qbitarray.html" type="class">QBitArray</link>
                </see-also>
            </description>
            <function name="QByteArray" fullname="QByteArray::QByteArray" href="qbytearray.html#QByteArray" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="171" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="QByteArray()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1755" column="4">
                    <para>Constructs an empty byte array.</para>
                    <see-also>
                        <link raw="isEmpty()" href="qbytearray.html#isEmpty" type="function">isEmpty()</link>
                    </see-also>
                </description>
            </function>
            <function name="QByteArray" fullname="QByteArray::QByteArray" href="qbytearray.html#QByteArray-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="172" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="" signature="QByteArray(const char *data, int size)">
                <parameter type="const char *" name="data" default=""/>
                <parameter type="int" name="size" default="-1"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1762" column="4">
                    <para>Constructs a byte array containing the first <argument>size</argument> bytes of array <argument>data</argument>.</para>
                    <para>If <argument>data</argument> is 0, a null byte array is constructed.</para>
                    <para>If <argument>size</argument> is negative, <argument>data</argument> is assumed to point to a '\0'-terminated string and its length is determined dynamically. The terminating \0 character is not considered part of the byte array.</para>
                    <para>
                        <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> makes a deep copy of the string data.</para>
                    <see-also>
                        <link raw="fromRawData()" href="qbytearray.html#fromRawData" type="function">fromRawData()</link>
                    </see-also>
                </description>
            </function>
            <function name="QByteArray" fullname="QByteArray::QByteArray" href="qbytearray.html#QByteArray-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="173" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="" signature="QByteArray(int size, char ch)">
                <parameter type="int" name="size" default=""/>
                <parameter type="char" name="ch" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1797" column="4">
                    <para>Constructs a byte array of size <argument>size</argument> with every byte set to character <argument>ch</argument>.</para>
                    <see-also>
                        <link raw="fill()" href="qbytearray.html#fill" type="function">fill()</link>
                    </see-also>
                </description>
            </function>
            <function name="QByteArray" fullname="QByteArray::QByteArray" href="qbytearray.html#QByteArray" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="175" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="QByteArray(const QByteArray &amp;other)">
                <parameter type="const QByteArray &amp;" name="other" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1248" column="4">
                    <para>Constructs a copy of <argument>other</argument>.</para>
                    <para>This operation takes <link raw="constant time" href="containers.html#constant-time" type="page" page="Container Classes">constant time</link>, because <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> is <link raw="implicitly shared" href="implicit-sharing.html#" type="page" page="Implicit Sharing">implicitly shared</link>. This makes returning a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), taking <link raw="linear time" href="containers.html#linear-time" type="page" page="Container Classes">linear time</link>.</para>
                    <see-also>
                        <link raw="operator=()" href="qbytearray.html#operator-eq" type="function">operator=()</link>
                    </see-also>
                </description>
            </function>
            <function name="QByteArray" fullname="QByteArray::QByteArray" href="qbytearray.html#QByteArray-3" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="181" since="5.2" meta="move-constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="" signature="QByteArray(QByteArray &amp;&amp;other)">
                <parameter type="QByteArray &amp;&amp;" name="other" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1260" column="4">
                    <para>Move-constructs a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> instance, making it point at the same object that <argument>other</argument> was pointing to.</para>
                </description>
            </function>
            <function name="QByteArray" fullname="QByteArray::QByteArray" href="qbytearray.html#QByteArray-4" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="444" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="" signature="QByteArray(QByteArrayDataPtr dd)">
                <parameter type="QByteArrayDataPtr" name="dd" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="QByteArray" fullname="QByteArray::QByteArray" href="qbytearray.html#QByteArray-5" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="174" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="" signature="QByteArray(int size, Qt::Initialization )">
                <parameter type="int" name="size" default=""/>
                <parameter type="Qt::Initialization" name="" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1817" column="4">
                    <para>Constructs a byte array of size <argument>size</argument> with uninitialized contents.</para>
                </description>
            </function>
            <function name="QByteArrayLiteral" fullname="QByteArray::QByteArrayLiteral" href="qbytearray.html#QByteArrayLiteral" status="active" access="public" related="true" meta="macrowithparams" virtual="non" const="false" static="false" final="false" override="false" type="" signature="QByteArrayLiteral( ba)">
                <parameter type="" name="ba" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="5038" column="4">
                    <para>The macro generates the data for a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> out of the string literal <argument>ba</argument> at compile time. Creating a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> from it is free in this case, and the generated byte array data is stored in the read-only segment of the compiled object file.</para>
                    <para>For instance:</para>
                    <code>QByteArray ba = QByteArrayLiteral(&quot;byte array contents&quot;);</code>
                    <para>Using  instead of a double quoted plain C++ string literal can significantly speed up creation of <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> instances from data known at compile time.</para>
                    <see-also>
                        <link raw="QStringLiteral" href="qstring.html#QStringLiteral" type="function">QStringLiteral</link>
                    </see-also>
                </description>
            </function>
            <function name="QT_NO_CAST_FROM_BYTEARRAY" fullname="QByteArray::QT_NO_CAST_FROM_BYTEARRAY" href="qbytearray.html#QT_NO_CAST_FROM_BYTEARRAY" status="active" access="public" related="true" meta="macrowithoutparams" virtual="non" const="false" static="false" final="false" override="false" type="" signature="QT_NO_CAST_FROM_BYTEARRAY">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1430" column="4">
                    <para>Disables automatic conversions from <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> to const char * or const void *.</para>
                    <see-also>
                        <link raw="QT_NO_CAST_TO_ASCII" href="qstring.html#QT_NO_CAST_TO_ASCII" type="function">QT_NO_CAST_TO_ASCII</link>
                        <link raw="QT_NO_CAST_FROM_ASCII" href="qstring.html#QT_NO_CAST_FROM_ASCII" type="function">QT_NO_CAST_FROM_ASCII</link>
                    </see-also>
                </description>
            </function>
            <function name="append" fullname="QByteArray::append" href="qbytearray.html#append" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="304" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray &amp;" signature="QByteArray &amp; append(const QByteArray &amp;ba)">
                <parameter type="const QByteArray &amp;" name="ba" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2035" column="4">
                    <para>Appends the byte array <argument>ba</argument> onto the end of this byte array.</para>
                    <para>Example:</para>
                    <code>QByteArray x(&quot;free&quot;);
QByteArray y(&quot;dom&quot;);
x.append(y);
// x == &quot;freedom&quot;</code>
                    <para>This is the same as insert(<link raw="size()" href="qbytearray.html#size" type="function">size()</link>, <argument>ba</argument>).</para>
                    <para>Note: <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> is an <link raw="implicitly shared" href="implicit-sharing.html#" type="page" page="Implicit Sharing">implicitly shared</link> class. Consequently, if you append to an empty byte array, then the byte array will just share the data held in <argument>ba</argument>. In this case, no copying of data is done, taking <link raw="constant time" href="containers.html#constant-time" type="page" page="Container Classes">constant time</link>. If a shared instance is modified, it will be copied (copy-on-write), taking <link raw="linear time" href="containers.html#linear-time" type="page" page="Container Classes">linear time</link>.</para>
                    <para>If the byte array being appended to is not empty, a deep copy of the data is performed, taking <link raw="linear time" href="containers.html#linear-time" type="page" page="Container Classes">linear time</link>.</para>
                    <para>This operation typically does not suffer from allocation overhead, because <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> preallocates extra space at the end of the data so that it may grow without reallocating for each append operation.</para>
                    <see-also>
                        <link raw="operator+=()" href="qbytearray.html#operator-2b-eq" type="function">operator+=()</link>
                        <link raw="prepend()" href="qbytearray.html#prepend" type="function">prepend()</link>
                        <link raw="insert()" href="qbytearray.html#insert" type="function">insert()</link>
                    </see-also>
                </description>
            </function>
            <function name="append" fullname="QByteArray::append" href="qbytearray.html#append-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="300" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteArray &amp;" signature="QByteArray &amp; append(char ch)">
                <parameter type="char" name="ch" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2141" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Appends the character <argument>ch</argument> to this byte array.</para>
                </description>
            </function>
            <function name="append" fullname="QByteArray::append" href="qbytearray.html#append-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="301" since="5.7" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QByteArray &amp;" signature="QByteArray &amp; append(int count, char ch)">
                <parameter type="int" name="count" default=""/>
                <parameter type="char" name="ch" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2130" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Appends <argument>count</argument> copies of character <argument>ch</argument> to this byte array and returns a reference to this byte array.</para>
                    <para>If <argument>count</argument> is negative or zero nothing is appended to the byte array.</para>
                </description>
            </function>
            <function name="append" fullname="QByteArray::append" href="qbytearray.html#append-3" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="302" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QByteArray &amp;" signature="QByteArray &amp; append(const char *str)">
                <parameter type="const char *" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2086" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Appends the string <argument>str</argument> to this byte array.</para>
                </description>
            </function>
            <function name="append" fullname="QByteArray::append" href="qbytearray.html#append-4" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="303" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="QByteArray &amp;" signature="QByteArray &amp; append(const char *str, int len)">
                <parameter type="const char *" name="str" default=""/>
                <parameter type="int" name="len" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2104" column="4">
                    <para>This function overloads <link raw="append()" href="qbytearray.html#append" type="function">append()</link>.</para>
                    <para>Appends the first <argument>len</argument> characters of the string <argument>str</argument> to this byte array and returns a reference to this byte array.</para>
                    <para>If <argument>len</argument> is negative, the length of the string will be determined automatically using <link raw="qstrlen()" href="qbytearray.html#qstrlen" type="function">qstrlen()</link>. If <argument>len</argument> is zero or <argument>str</argument> is null, nothing is appended to the byte array. Ensure that <argument>len</argument> is <italic>not</italic> longer than <argument>str</argument>.</para>
                </description>
            </function>
            <function name="append" fullname="QByteArray::append" href="qbytearray.html#append-5" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="331" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="QByteArray &amp;" signature="QByteArray &amp; append(const QString &amp;str)">
                <parameter type="const QString &amp;" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2073" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Appends the string <argument>str</argument> to this byte array. The Unicode data is converted into 8-bit characters using <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link>.</para>
                    <para>You can disable this function by defining <teletype type="highlighted">QT_NO_CAST_TO_ASCII</teletype> when you compile your applications. You then need to call <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link> (or <link raw="QString::toLatin1()" href="qstring.html#toLatin1" type="function">QString::toLatin1()</link> or <link raw="QString::toLocal8Bit()" href="qstring.html#toLocal8Bit" type="function">QString::toLocal8Bit()</link>) explicitly if you want to convert the data to <teletype type="highlighted">const char *</teletype>.</para>
                </description>
            </function>
            <function name="at" fullname="QByteArray::at" href="qbytearray.html#at" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="211" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="char" signature="char at(int i) const">
                <parameter type="int" name="i" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1513" column="4">
                    <para>Returns the character at index position <argument>i</argument> in the byte array.</para>
                    <para>
                        <argument>i</argument> must be a valid index position in the byte array (i.e., 0 &lt;= <argument>i</argument> &lt; <link raw="size()" href="qbytearray.html#size" type="function">size()</link>).</para>
                    <see-also>
                        <link raw="operator[]()" href="qbytearray.html#operator-5b-5d" type="function">operator[]()</link>
                    </see-also>
                </description>
            </function>
            <function name="back" fullname="QByteArray::back" href="qbytearray.html#back" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="218" since="5.10" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="char" signature="char back() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1575" column="4">
                    <para>Returns the last character in the byte array. Same as <teletype type="highlighted">at(size() - 1)</teletype>.</para>
                    <para>This function is provided for STL compatibility.</para>
                    <para>
                        <bold>Warning:</bold> Calling this function on an empty byte array constitutes undefined behavior.</para>
                    <see-also>
                        <link raw="front()" href="qbytearray.html#front" type="function">front()</link>
                        <link raw="at()" href="qbytearray.html#at" type="function">at()</link>
                        <link raw="operator[]()" href="qbytearray.html#operator-5b-5d" type="function">operator[]()</link>
                    </see-also>
                </description>
            </function>
            <function name="back" fullname="QByteArray::back" href="qbytearray.html#back-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="219" since="5.10" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteRef" signature="QByteRef back()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1605" column="4">
                    <para>Returns a reference to the last character in the byte array. Same as <teletype type="highlighted">operator[](size() - 1)</teletype>.</para>
                    <para>This function is provided for STL compatibility.</para>
                    <para>
                        <bold>Warning:</bold> Calling this function on an empty byte array constitutes undefined behavior.</para>
                    <see-also>
                        <link raw="front()" href="qbytearray.html#front" type="function">front()</link>
                        <link raw="at()" href="qbytearray.html#at" type="function">at()</link>
                        <link raw="operator[]()" href="qbytearray.html#operator-5b-5d" type="function">operator[]()</link>
                    </see-also>
                </description>
            </function>
            <function name="begin" fullname="QByteArray::begin" href="qbytearray.html#begin" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="406" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray::iterator" signature="QByteArray::iterator begin()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1095" column="4">
                    <para>Returns an <link raw="STL-style iterators" href="containers.html#stl-style-iterators" type="page" page="Container Classes">STL-style iterator</link> pointing to the first character in the byte-array.</para>
                    <see-also>
                        <link raw="constBegin()" href="qbytearray.html#constBegin" type="function">constBegin()</link>
                        <link raw="end()" href="qbytearray.html#end" type="function">end()</link>
                    </see-also>
                </description>
            </function>
            <function name="begin" fullname="QByteArray::begin" href="qbytearray.html#begin-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="407" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteArray::const_iterator" signature="QByteArray::const_iterator begin() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1103" column="4">
                    <para>This function overloads <link raw="begin()" href="qbytearray.html#begin" type="function">begin()</link>.</para>
                </description>
            </function>
            <function name="capacity" fullname="QByteArray::capacity" href="qbytearray.html#capacity" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="195" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="int" signature="int capacity() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1367" column="4">
                    <para>Returns the maximum number of bytes that can be stored in the byte array without forcing a reallocation.</para>
                    <para>The sole purpose of this function is to provide a means of fine tuning <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>'s memory usage. In general, you will rarely ever need to call this function. If you want to know how many bytes are in the byte array, call <link raw="size()" href="qbytearray.html#size" type="function">size()</link>.</para>
                    <see-also>
                        <link raw="reserve()" href="qbytearray.html#reserve" type="function">reserve()</link>
                        <link raw="squeeze()" href="qbytearray.html#squeeze" type="function">squeeze()</link>
                    </see-also>
                </description>
            </function>
            <function name="cbegin" fullname="QByteArray::cbegin" href="qbytearray.html#cbegin" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="408" since="5.0" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray::const_iterator" signature="QByteArray::const_iterator cbegin() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1108" column="4">
                    <para>Returns a const <link raw="STL-style iterators" href="containers.html#stl-style-iterators" type="page" page="Container Classes">STL-style iterator</link> pointing to the first character in the byte-array.</para>
                    <see-also>
                        <link raw="begin()" href="qbytearray.html#begin" type="function">begin()</link>
                        <link raw="cend()" href="qbytearray.html#cend" type="function">cend()</link>
                    </see-also>
                </description>
            </function>
            <function name="cend" fullname="QByteArray::cend" href="qbytearray.html#cend" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="412" since="5.0" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray::const_iterator" signature="QByteArray::const_iterator cend() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1138" column="4">
                    <para>Returns a const <link raw="STL-style iterators" href="containers.html#stl-style-iterators" type="page" page="Container Classes">STL-style iterator</link> pointing to the imaginary character after the last character in the list.</para>
                    <see-also>
                        <link raw="cbegin()" href="qbytearray.html#cbegin" type="function">cbegin()</link>
                        <link raw="end()" href="qbytearray.html#end" type="function">end()</link>
                    </see-also>
                </description>
            </function>
            <function name="chop" fullname="QByteArray::chop" href="qbytearray.html#chop" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="256" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void chop(int n)">
                <parameter type="int" name="n" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1661" column="4">
                    <para>Removes <argument>n</argument> bytes from the end of the byte array.</para>
                    <para>If <argument>n</argument> is greater than <link raw="size()" href="qbytearray.html#size" type="function">size()</link>, the result is an empty byte array.</para>
                    <para>Example:</para>
                    <code>QByteArray ba(&quot;STARTTLS\r\n&quot;);
ba.chop(2);                 // ba == &quot;STARTTLS&quot;</code>
                    <see-also>
                        <link raw="truncate()" href="qbytearray.html#truncate" type="function">truncate()</link>
                        <link raw="resize()" href="qbytearray.html#resize" type="function">resize()</link>
                        <link raw="left()" href="qbytearray.html#left" type="function">left()</link>
                    </see-also>
                </description>
            </function>
            <function name="chopped" fullname="QByteArray::chopped" href="qbytearray.html#chopped" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="241" since="5.10" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray" signature="QByteArray chopped(int len) const">
                <parameter type="int" name="len" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3242" column="4">
                    <para>Returns a byte array that contains the leftmost <link raw="size()" href="qbytearray.html#size" type="function">size()</link> - <argument>len</argument> bytes of this byte array.</para>
                    <para>
                        <bold>Note:</bold> The behavior is undefined if <argument>len</argument> is negative or greater than <link raw="size()" href="qbytearray.html#size" type="function">size()</link>.</para>
                    <see-also>
                        <link raw="endsWith()" href="qbytearray.html#endsWith" type="function">endsWith()</link>
                        <link raw="left()" href="qbytearray.html#left" type="function">left()</link>
                        <link raw="right()" href="qbytearray.html#right" type="function">right()</link>
                        <link raw="mid()" href="qbytearray.html#mid" type="function">mid()</link>
                        <link raw="chop()" href="qbytearray.html#chop" type="function">chop()</link>
                        <link raw="truncate()" href="qbytearray.html#truncate" type="function">truncate()</link>
                    </see-also>
                </description>
            </function>
            <function name="clear" fullname="QByteArray::clear" href="qbytearray.html#clear" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="209" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void clear()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3330" column="4">
                    <para>Clears the contents of the byte array and makes it null.</para>
                    <see-also>
                        <link raw="resize()" href="qbytearray.html#resize" type="function">resize()</link>
                        <link raw="isNull()" href="qbytearray.html#isNull" type="function">isNull()</link>
                    </see-also>
                </description>
            </function>
            <function name="compare" fullname="QByteArray::compare" href="qbytearray.html#compare" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="235" since="5.12" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="int" signature="int compare(const char *c, Qt::CaseSensitivity cs) const">
                <parameter type="const char *" name="c" default=""/>
                <parameter type="Qt::CaseSensitivity" name="cs" default="..."/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2977" column="4">
                    <para>Returns an integer less than, equal to, or greater than zero depending on whether this <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> sorts before, at the same position, or after the string pointed to by <argument>c</argument>. The comparison is performed according to case sensitivity <argument>cs</argument>.</para>
                    <see-also>
                        <link raw="operator==" href="qbytearray.html#operator-eq-eq" type="function">operator==</link>
                    </see-also>
                </description>
            </function>
            <function name="compare" fullname="QByteArray::compare" href="qbytearray.html#compare-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="236" since="5.12" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="int" signature="int compare(const QByteArray &amp;a, Qt::CaseSensitivity cs) const">
                <parameter type="const QByteArray &amp;" name="a" default=""/>
                <parameter type="Qt::CaseSensitivity" name="cs" default="..."/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2989" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns an integer less than, equal to, or greater than zero depending on whether this <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> sorts before, at the same position, or after the <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> <argument>a</argument>. The comparison is performed according to case sensitivity <argument>cs</argument>.</para>
                    <see-also>
                        <link raw="operator==" href="qbytearray.html#operator-eq-eq" type="function">operator==</link>
                    </see-also>
                </description>
            </function>
            <function name="constBegin" fullname="QByteArray::constBegin" href="qbytearray.html#constBegin" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="409" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray::const_iterator" signature="QByteArray::const_iterator constBegin() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1117" column="4">
                    <para>Returns a const <link raw="STL-style iterators" href="containers.html#stl-style-iterators" type="page" page="Container Classes">STL-style iterator</link> pointing to the first character in the byte-array.</para>
                    <see-also>
                        <link raw="begin()" href="qbytearray.html#begin" type="function">begin()</link>
                        <link raw="constEnd()" href="qbytearray.html#constEnd" type="function">constEnd()</link>
                    </see-also>
                </description>
            </function>
            <function name="constData" fullname="QByteArray::constData" href="qbytearray.html#constData" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="205" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="const char *" signature="const char * constData() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1480" column="4">
                    <para>Returns a pointer to the data stored in the byte array. The pointer can be used to access the bytes that compose the array. The data is '\0'-terminated unless the <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> object was created from raw data. The pointer remains valid as long as the byte array isn't reallocated or destroyed.</para>
                    <para>This function is mostly useful to pass a byte array to a function that accepts a <teletype type="highlighted">const char *</teletype>.</para>
                    <para>Note: A <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> can store any byte values including '\0's, but most functions that take <teletype type="highlighted">char *</teletype> arguments assume that the data ends at the first '\0' they encounter.</para>
                    <see-also>
                        <link raw="data()" href="qbytearray.html#data" type="function">data()</link>
                        <link raw="operator[]()" href="qbytearray.html#operator-5b-5d" type="function">operator[]()</link>
                        <link raw="fromRawData()" href="qbytearray.html#fromRawData" type="function">fromRawData()</link>
                    </see-also>
                </description>
            </function>
            <function name="constEnd" fullname="QByteArray::constEnd" href="qbytearray.html#constEnd" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="413" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray::const_iterator" signature="QByteArray::const_iterator constEnd() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1147" column="4">
                    <para>Returns a const <link raw="STL-style iterators" href="containers.html#stl-style-iterators" type="page" page="Container Classes">STL-style iterator</link> pointing to the imaginary character after the last character in the list.</para>
                    <see-also>
                        <link raw="constBegin()" href="qbytearray.html#constBegin" type="function">constBegin()</link>
                        <link raw="end()" href="qbytearray.html#end" type="function">end()</link>
                    </see-also>
                </description>
            </function>
            <function name="contains" fullname="QByteArray::contains" href="qbytearray.html#contains" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="230" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool contains(const QByteArray &amp;ba) const">
                <parameter type="const QByteArray &amp;" name="ba" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1620" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if the byte array contains an occurrence of the byte array <argument>ba</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <see-also>
                        <link raw="indexOf()" href="qbytearray.html#indexOf" type="function">indexOf()</link>
                        <link raw="count()" href="qbytearray.html#count-3" type="function">count()</link>
                    </see-also>
                </description>
            </function>
            <function name="contains" fullname="QByteArray::contains" href="qbytearray.html#contains-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="228" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="bool" signature="bool contains(char ch) const">
                <parameter type="char" name="ch" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1636" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns <teletype type="highlighted">true</teletype> if the byte array contains the character <argument>ch</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                </description>
            </function>
            <function name="contains" fullname="QByteArray::contains" href="qbytearray.html#contains-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="229" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="2" type="bool" signature="bool contains(const char *str) const">
                <parameter type="const char *" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1628" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns <teletype type="highlighted">true</teletype> if the byte array contains the string <argument>str</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                </description>
            </function>
            <function name="count" fullname="QByteArray::count" href="qbytearray.html#count" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="233" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="int" signature="int count(const QByteArray &amp;ba) const">
                <parameter type="const QByteArray &amp;" name="ba" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2916" column="4">
                    <para>Returns the number of (potentially overlapping) occurrences of byte array <argument>ba</argument> in this byte array.</para>
                    <see-also>
                        <link raw="contains()" href="qbytearray.html#contains" type="function">contains()</link>
                        <link raw="indexOf()" href="qbytearray.html#indexOf" type="function">indexOf()</link>
                    </see-also>
                </description>
            </function>
            <function name="count" fullname="QByteArray::count" href="qbytearray.html#count-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="231" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="int" signature="int count(char ch) const">
                <parameter type="char" name="ch" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2950" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the number of occurrences of character <argument>ch</argument> in the byte array.</para>
                    <see-also>
                        <link raw="contains()" href="qbytearray.html#contains" type="function">contains()</link>
                        <link raw="indexOf()" href="qbytearray.html#indexOf" type="function">indexOf()</link>
                    </see-also>
                </description>
            </function>
            <function name="count" fullname="QByteArray::count" href="qbytearray.html#count-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="232" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="2" type="int" signature="int count(const char *str) const">
                <parameter type="const char *" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2938" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the number of (potentially overlapping) occurrences of string <argument>str</argument> in the byte array.</para>
                </description>
            </function>
            <function name="count" fullname="QByteArray::count" href="qbytearray.html#count-3" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="440" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="3" type="int" signature="int count() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2970" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Same as <link raw="size()" href="qbytearray.html#size" type="function">size()</link>.</para>
                </description>
            </function>
            <function name="crbegin" fullname="QByteArray::crbegin" href="qbytearray.html#crbegin" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="418" since="5.6" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray::const_reverse_iterator" signature="QByteArray::const_reverse_iterator crbegin() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1169" column="4">
                    <para>Returns a const <link raw="STL-style iterators" href="containers.html#stl-style-iterators" type="page" page="Container Classes">STL-style</link> reverse iterator pointing to the first character in the byte-array, in reverse order.</para>
                    <see-also>
                        <link raw="begin()" href="qbytearray.html#begin" type="function">begin()</link>
                        <link raw="rbegin()" href="qbytearray.html#rbegin" type="function">rbegin()</link>
                        <link raw="rend()" href="qbytearray.html#rend" type="function">rend()</link>
                    </see-also>
                </description>
            </function>
            <function name="crend" fullname="QByteArray::crend" href="qbytearray.html#crend" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="419" since="5.6" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray::const_reverse_iterator" signature="QByteArray::const_reverse_iterator crend() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1192" column="4">
                    <para>Returns a const <link raw="STL-style iterators" href="containers.html#stl-style-iterators" type="page" page="Container Classes">STL-style</link> reverse iterator pointing to one past the last character in the byte-array, in reverse order.</para>
                    <see-also>
                        <link raw="end()" href="qbytearray.html#end" type="function">end()</link>
                        <link raw="rend()" href="qbytearray.html#rend" type="function">rend()</link>
                        <link raw="rbegin()" href="qbytearray.html#rbegin" type="function">rbegin()</link>
                    </see-also>
                </description>
            </function>
            <function name="data" fullname="QByteArray::data" href="qbytearray.html#data" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="203" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="char *" signature="char * data()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1440" column="4">
                    <para>Returns a pointer to the data stored in the byte array. The pointer can be used to access and modify the bytes that compose the array. The data is '\0'-terminated, i.e. the number of bytes in the returned character string is <link raw="size()" href="qbytearray.html#size" type="function">size()</link> + 1 for the '\0' terminator.</para>
                    <para>Example:</para>
                    <code>QByteArray ba(&quot;Hello world&quot;);
char *data = ba.data();
while (*data) {
    cout &lt;&lt; &quot;[&quot; &lt;&lt; *data &lt;&lt; &quot;]&quot; &lt;&lt; endl;
    ++data;
}</code>
                    <para>The pointer remains valid as long as the byte array isn't reallocated or destroyed. For read-only access, <link raw="constData()" href="qbytearray.html#constData" type="function">constData()</link> is faster because it never causes a <link raw="deep copy" href="implicit-sharing.html#deep-copy" type="page" page="Implicit Sharing">deep copy</link> to occur.</para>
                    <para>This function is mostly useful to pass a byte array to a function that accepts a <teletype type="highlighted">const char *</teletype>.</para>
                    <para>The following example makes a copy of the char* returned by , but it will corrupt the heap and cause a crash because it does not allocate a byte for the '\0' at the end:</para>
                    <code>QString tmp = &quot;test&quot;;
QByteArray text = tmp.toLocal8Bit();
char *data = new char[text.size()];
strcpy(data, text.data());
delete [] data;</code>
                    <para>This one allocates the correct amount of space:</para>
                    <code>QString tmp = &quot;test&quot;;
QByteArray text = tmp.toLocal8Bit();
char *data = new char[text.size() + 1];
strcpy(data, text.data());
delete [] data;</code>
                    <para>Note: A <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> can store any byte values including '\0's, but most functions that take <teletype type="highlighted">char *</teletype> arguments assume that the data ends at the first '\0' they encounter.</para>
                    <see-also>
                        <link raw="constData()" href="qbytearray.html#constData" type="function">constData()</link>
                        <link raw="operator[]()" href="qbytearray.html#operator-5b-5d" type="function">operator[]()</link>
                    </see-also>
                </description>
            </function>
            <function name="data" fullname="QByteArray::data" href="qbytearray.html#data-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="204" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="const char *" signature="const char * data() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1475" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function name="data_ptr" fullname="QByteArray::data_ptr" href="qbytearray.html#data_ptr" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="470" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray::DataPtr &amp;" signature="QByteArray::DataPtr &amp; data_ptr()">
                <description path="" line="0" column="0"/>
            </function>
            <function name="detach" fullname="QByteArray::detach" href="qbytearray.html#detach" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="206" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void detach()">
                <description path="" line="0" column="0"/>
            </function>
            <function name="end" fullname="QByteArray::end" href="qbytearray.html#end" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="410" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray::iterator" signature="QByteArray::iterator end()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1125" column="4">
                    <para>Returns an <link raw="STL-style iterators" href="containers.html#stl-style-iterators" type="page" page="Container Classes">STL-style iterator</link> pointing to the imaginary character after the last character in the byte-array.</para>
                    <see-also>
                        <link raw="begin()" href="qbytearray.html#begin" type="function">begin()</link>
                        <link raw="constEnd()" href="qbytearray.html#constEnd" type="function">constEnd()</link>
                    </see-also>
                </description>
            </function>
            <function name="end" fullname="QByteArray::end" href="qbytearray.html#end-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="411" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteArray::const_iterator" signature="QByteArray::const_iterator end() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1133" column="4">
                    <para>This function overloads <link raw="end()" href="qbytearray.html#end" type="function">end()</link>.</para>
                </description>
            </function>
            <function name="endsWith" fullname="QByteArray::endsWith" href="qbytearray.html#endsWith" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="248" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool endsWith(const QByteArray &amp;ba) const">
                <parameter type="const QByteArray &amp;" name="ba" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3047" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this byte array ends with byte array <argument>ba</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>Example:</para>
                    <code>QByteArray url(&quot;http://qt-project.org/doc/qt-5.0/qtdoc/index.html&quot;);
if (url.endsWith(&quot;.html&quot;))
    ...</code>
                    <see-also>
                        <link raw="startsWith()" href="qbytearray.html#startsWith" type="function">startsWith()</link>
                        <link raw="right()" href="qbytearray.html#right" type="function">right()</link>
                    </see-also>
                </description>
            </function>
            <function name="endsWith" fullname="QByteArray::endsWith" href="qbytearray.html#endsWith-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="249" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="bool" signature="bool endsWith(char ch) const">
                <parameter type="char" name="ch" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3152" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns <teletype type="highlighted">true</teletype> if this byte array ends with character <argument>ch</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                </description>
            </function>
            <function name="endsWith" fullname="QByteArray::endsWith" href="qbytearray.html#endsWith-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="250" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="2" type="bool" signature="bool endsWith(const char *str) const">
                <parameter type="const char *" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3065" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns <teletype type="highlighted">true</teletype> if this byte array ends with string <argument>str</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                </description>
            </function>
            <function name="expand" fullname="QByteArray::expand" href="qbytearray.html#expand" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="453" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void expand(int i)">
                <parameter type="int" name="i" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="fill" fullname="QByteArray::fill" href="qbytearray.html#fill" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="193" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray &amp;" signature="QByteArray &amp; fill(char ch, int size)">
                <parameter type="char" name="ch" default=""/>
                <parameter type="int" name="size" default="-1"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1884" column="4">
                    <para>Sets every byte in the byte array to character <argument>ch</argument>. If <argument>size</argument> is different from -1 (the default), the byte array is resized to size <argument>size</argument> beforehand.</para>
                    <para>Example:</para>
                    <code>QByteArray ba(&quot;Istambul&quot;);
ba.fill('o');
// ba == &quot;oooooooo&quot;

ba.fill('X', 2);
// ba == &quot;XX&quot;</code>
                    <see-also>
                        <link raw="resize()" href="qbytearray.html#resize" type="function">resize()</link>
                    </see-also>
                </description>
            </function>
            <function name="fromBase64" fullname="QByteArray::fromBase64" href="qbytearray.html#fromBase64" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="385" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QByteArray" signature="QByteArray fromBase64(const QByteArray &amp;base64)">
                <parameter type="const QByteArray &amp;" name="base64" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4599" column="4">
                    <para>Returns a decoded copy of the Base64 array <argument>base64</argument>. Input is not checked for validity; invalid characters in the input are skipped, enabling the decoding process to continue with subsequent characters.</para>
                    <para>For example:</para>
                    <code>QByteArray text = QByteArray::fromBase64(&quot;UXQgaXMgZ3JlYXQh&quot;);
text.data();            // returns &quot;Qt is great!&quot;</code>
                    <para>The algorithm used to decode Base64-encoded data is defined in <link raw="RFC 4648" href="http://www.ietf.org/rfc/rfc4648.txt#" type="">RFC 4648</link>.</para>
                    <see-also>
                        <link raw="toBase64()" href="qbytearray.html#toBase64" type="function">toBase64()</link>
                    </see-also>
                </description>
            </function>
            <function name="fromBase64" fullname="QByteArray::fromBase64" href="qbytearray.html#fromBase64-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="384" since="5.2" meta="plain" virtual="non" const="false" static="true" final="false" override="false" overload="true" overload-number="1" type="QByteArray" signature="QByteArray fromBase64(const QByteArray &amp;base64, QByteArray::Base64Options options)">
                <parameter type="const QByteArray &amp;" name="base64" default=""/>
                <parameter type="QByteArray::Base64Options" name="options" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4617" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns a decoded copy of the Base64 array <argument>base64</argument>, using the alphabet defined by <argument>options</argument>. Input is not checked for validity; invalid characters in the input are skipped, enabling the decoding process to continue with subsequent characters.</para>
                    <para>For example:</para>
                    <code>QByteArray::fromBase64(&quot;PHA+SGVsbG8/PC9wPg==&quot;, QByteArray::Base64Encoding); // returns &quot;&lt;p&gt;Hello?&lt;/p&gt;&quot;
QByteArray::fromBase64(&quot;PHA-SGVsbG8_PC9wPg==&quot;, QByteArray::Base64UrlEncoding); // returns &quot;&lt;p&gt;Hello?&lt;/p&gt;&quot;</code>
                    <para>The algorithm used to decode Base64-encoded data is defined in <link raw="RFC 4648" href="http://www.ietf.org/rfc/rfc4648.txt#" type="">RFC 4648</link>.</para>
                    <see-also>
                        <link raw="toBase64()" href="qbytearray.html#toBase64" type="function">toBase64()</link>
                    </see-also>
                </description>
            </function>
            <function name="fromCFData" fullname="QByteArray::fromCFData" href="qbytearray.html#fromCFData" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="390" since="5.3" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QByteArray" signature="QByteArray fromCFData(CFDataRef data)">
                <parameter type="CFDataRef" name="data" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/kernel/qcore_foundation.mm" line="64" column="4">
                    <para>Constructs a new <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> containing a copy of the CFData <argument>data</argument>.</para>
                    <see-also>
                        <link raw="fromRawCFData()" href="qbytearray.html#fromRawCFData" type="function">fromRawCFData()</link>
                        <link raw="fromRawData()" href="qbytearray.html#fromRawData" type="function">fromRawData()</link>
                        <link raw="toRawCFData()" href="qbytearray.html#toRawCFData" type="function">toRawCFData()</link>
                        <link raw="toCFData()" href="qbytearray.html#toCFData" type="function">toCFData()</link>
                    </see-also>
                </description>
            </function>
            <function name="fromHex" fullname="QByteArray::fromHex" href="qbytearray.html#fromHex" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="386" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QByteArray" signature="QByteArray fromHex(const QByteArray &amp;hexEncoded)">
                <parameter type="const QByteArray &amp;" name="hexEncoded" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4677" column="4">
                    <para>Returns a decoded copy of the hex encoded array <argument>hexEncoded</argument>. Input is not checked for validity; invalid characters in the input are skipped, enabling the decoding process to continue with subsequent characters.</para>
                    <para>For example:</para>
                    <code>QByteArray text = QByteArray::fromHex(&quot;517420697320677265617421&quot;);
text.data();            // returns &quot;Qt is great!&quot;</code>
                    <see-also>
                        <link raw="toHex()" href="qbytearray.html#toHex" type="function">toHex()</link>
                    </see-also>
                </description>
            </function>
            <function name="fromNSData" fullname="QByteArray::fromNSData" href="qbytearray.html#fromNSData" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="394" since="5.3" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QByteArray" signature="QByteArray fromNSData(const NSData *data)">
                <parameter type="const NSData *" name="data" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/kernel/qcore_foundation.mm" line="130" column="4">
                    <para>Constructs a new <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> containing a copy of the NSData <argument>data</argument>.</para>
                    <see-also>
                        <link raw="fromRawNSData()" href="qbytearray.html#fromRawNSData" type="function">fromRawNSData()</link>
                        <link raw="fromRawData()" href="qbytearray.html#fromRawData" type="function">fromRawData()</link>
                        <link raw="toNSData()" href="qbytearray.html#toNSData" type="function">toNSData()</link>
                        <link raw="toRawNSData()" href="qbytearray.html#toRawNSData" type="function">toRawNSData()</link>
                    </see-also>
                </description>
            </function>
            <function name="fromPercentEncoding" fullname="QByteArray::fromPercentEncoding" href="qbytearray.html#fromPercentEncoding" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="387" since="4.4" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QByteArray" signature="QByteArray fromPercentEncoding(const QByteArray &amp;input, char percent)">
                <parameter type="const QByteArray &amp;" name="input" default=""/>
                <parameter type="char" name="percent" default="'%'"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4801" column="4">
                    <para>Returns a decoded copy of the URI/URL-style percent-encoded <argument>input</argument>. The <argument>percent</argument> parameter allows you to replace the '%' character for another (for instance, '_' or '=').</para>
                    <para>For example:</para>
                    <code>QByteArray text = QByteArray::fromPercentEncoding(&quot;Qt%20is%20great%33&quot;);
text.data();            // returns &quot;Qt is great!&quot;</code>
                    <para>
                        <bold>Note:</bold> Given invalid input (such as a string containing the sequence &quot;%G5&quot;, which is not a valid hexadecimal number) the output will be invalid as well. As an example: the sequence &quot;%G5&quot; could be decoded to 'W'.</para>
                    <see-also>
                        <link raw="toPercentEncoding()" href="qbytearray.html#toPercentEncoding" type="function">toPercentEncoding()</link>
                        <link raw="QUrl::fromPercentEncoding()" href="qurl.html#fromPercentEncoding" type="function">QUrl::fromPercentEncoding()</link>
                    </see-also>
                </description>
            </function>
            <function name="fromRawCFData" fullname="QByteArray::fromRawCFData" href="qbytearray.html#fromRawCFData" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="391" since="5.3" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QByteArray" signature="QByteArray fromRawCFData(CFDataRef data)">
                <parameter type="CFDataRef" name="data" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/kernel/qcore_foundation.mm" line="79" column="4">
                    <para>Constructs a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> that uses the bytes of the CFData <argument>data</argument>.</para>
                    <para>The <argument>data</argument>'s bytes are not copied.</para>
                    <para>The caller guarantees that the CFData will not be deleted or modified as long as this <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> object exists.</para>
                    <see-also>
                        <link raw="fromCFData()" href="qbytearray.html#fromCFData" type="function">fromCFData()</link>
                        <link raw="fromRawData()" href="qbytearray.html#fromRawData" type="function">fromRawData()</link>
                        <link raw="toRawCFData()" href="qbytearray.html#toRawCFData" type="function">toRawCFData()</link>
                        <link raw="toCFData()" href="qbytearray.html#toCFData" type="function">toCFData()</link>
                    </see-also>
                </description>
            </function>
            <function name="fromRawData" fullname="QByteArray::fromRawData" href="qbytearray.html#fromRawData" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="383" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QByteArray" signature="QByteArray fromRawData(const char *data, int size)">
                <parameter type="const char *" name="data" default=""/>
                <parameter type="int" name="size" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4519" column="4">
                    <para>Constructs a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> that uses the first <argument>size</argument> bytes of the <argument>data</argument> array. The bytes are <italic>not</italic> copied. The <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> will contain the <argument>data</argument> pointer. The caller guarantees that <argument>data</argument> will not be deleted or modified as long as this <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> and any copies of it exist that have not been modified. In other words, because <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> is an <link raw="implicitly shared" href="implicit-sharing.html#" type="page" page="Implicit Sharing">implicitly shared</link> class and the instance returned by this function contains the <argument>data</argument> pointer, the caller must not delete <argument>data</argument> or modify it directly as long as the returned <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> and any copies exist. However, <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> does not take ownership of <argument>data</argument>, so the <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> destructor will never delete the raw <argument>data</argument>, even when the last <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> referring to <argument>data</argument> is destroyed.</para>
                    <para>A subsequent attempt to modify the contents of the returned <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> or any copy made from it will cause it to create a deep copy of the <argument>data</argument> array before doing the modification. This ensures that the raw <argument>data</argument> array itself will never be modified by <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>.</para>
                    <para>Here is an example of how to read data using a <link raw="QDataStream" href="qdatastream.html" type="class">QDataStream</link> on raw data in memory without copying the raw data into a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>:</para>
                    <code> static const char mydata[] = {
    '\x00', '\x00', '\x03', '\x84', '\x78', '\x9c', '\x3b', '\x76',
    '\xec', '\x18', '\xc3', '\x31', '\x0a', '\xf1', '\xcc', '\x99',
    ...
    '\x6d', '\x5b'
};

QByteArray data = QByteArray::fromRawData(mydata, sizeof(mydata));
QDataStream in(&amp;data, QIODevice::ReadOnly);
...</code>
                    <para>
                        <bold>Warning:</bold> A byte array created with  is <italic>not</italic> '\0'-terminated, unless the raw data contains a 0 character at position <argument>size</argument>. While that does not matter for <link raw="QDataStream" href="qdatastream.html" type="class">QDataStream</link> or functions like <link raw="indexOf()" href="qbytearray.html#indexOf" type="function">indexOf()</link>, passing the byte array to a function accepting a <teletype type="highlighted">const char *</teletype> expected to be '\0'-terminated will fail.</para>
                    <see-also>
                        <link raw="setRawData()" href="qbytearray.html#setRawData" type="function">setRawData()</link>
                        <link raw="data()" href="qbytearray.html#data" type="function">data()</link>
                        <link raw="constData()" href="qbytearray.html#constData" type="function">constData()</link>
                    </see-also>
                </description>
            </function>
            <function name="fromRawNSData" fullname="QByteArray::fromRawNSData" href="qbytearray.html#fromRawNSData" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="395" since="5.3" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QByteArray" signature="QByteArray fromRawNSData(const NSData *data)">
                <parameter type="const NSData *" name="data" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/kernel/qcore_foundation.mm" line="144" column="4">
                    <para>Constructs a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> that uses the bytes of the NSData <argument>data</argument>.</para>
                    <para>The <argument>data</argument>'s bytes are not copied.</para>
                    <para>The caller guarantees that the NSData will not be deleted or modified as long as this <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> object exists.</para>
                    <see-also>
                        <link raw="fromNSData()" href="qbytearray.html#fromNSData" type="function">fromNSData()</link>
                        <link raw="fromRawData()" href="qbytearray.html#fromRawData" type="function">fromRawData()</link>
                        <link raw="toRawNSData()" href="qbytearray.html#toRawNSData" type="function">toRawNSData()</link>
                        <link raw="toNSData()" href="qbytearray.html#toNSData" type="function">toNSData()</link>
                    </see-also>
                </description>
            </function>
            <function name="fromStdString" fullname="QByteArray::fromStdString" href="qbytearray.html#fromStdString" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="437" since="5.4" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QByteArray" signature="QByteArray fromStdString(const std::string &amp;str)">
                <parameter type="const std::string &amp;" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4829" column="4">
                    <para>Returns a copy of the <argument>str</argument> string as a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>.</para>
                    <see-also>
                        <link raw="toStdString()" href="qbytearray.html#toStdString" type="function">toStdString()</link>
                        <link raw="QString::fromStdString()" href="qstring.html#fromStdString" type="function">QString::fromStdString()</link>
                    </see-also>
                </description>
            </function>
            <function name="front" fullname="QByteArray::front" href="qbytearray.html#front" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="216" since="5.10" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="char" signature="char front() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1560" column="4">
                    <para>Returns the first character in the byte array. Same as <teletype type="highlighted">at(0)</teletype>.</para>
                    <para>This function is provided for STL compatibility.</para>
                    <para>
                        <bold>Warning:</bold> Calling this function on an empty byte array constitutes undefined behavior.</para>
                    <see-also>
                        <link raw="back()" href="qbytearray.html#back" type="function">back()</link>
                        <link raw="at()" href="qbytearray.html#at" type="function">at()</link>
                        <link raw="operator[]()" href="qbytearray.html#operator-5b-5d" type="function">operator[]()</link>
                    </see-also>
                </description>
            </function>
            <function name="front" fullname="QByteArray::front" href="qbytearray.html#front-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="217" since="5.10" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteRef" signature="QByteRef front()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1590" column="4">
                    <para>Returns a reference to the first character in the byte array. Same as <teletype type="highlighted">operator[](0)</teletype>.</para>
                    <para>This function is provided for STL compatibility.</para>
                    <para>
                        <bold>Warning:</bold> Calling this function on an empty byte array constitutes undefined behavior.</para>
                    <see-also>
                        <link raw="back()" href="qbytearray.html#back" type="function">back()</link>
                        <link raw="at()" href="qbytearray.html#at" type="function">at()</link>
                        <link raw="operator[]()" href="qbytearray.html#operator-5b-5d" type="function">operator[]()</link>
                    </see-also>
                </description>
            </function>
            <function name="indexOf" fullname="QByteArray::indexOf" href="qbytearray.html#indexOf" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="223" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="int" signature="int indexOf(const QByteArray &amp;ba, int from) const">
                <parameter type="const QByteArray &amp;" name="ba" default=""/>
                <parameter type="int" name="from" default="0"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2701" column="4">
                    <para>Returns the index position of the first occurrence of the byte array <argument>ba</argument> in this byte array, searching forward from index position <argument>from</argument>. Returns -1 if <argument>ba</argument> could not be found.</para>
                    <para>Example:</para>
                    <code>QByteArray x(&quot;sticky question&quot;);
QByteArray y(&quot;sti&quot;);
x.indexOf(y);               // returns 0
x.indexOf(y, 1);            // returns 10
x.indexOf(y, 10);           // returns 10
x.indexOf(y, 11);           // returns -1</code>
                    <see-also>
                        <link raw="lastIndexOf()" href="qbytearray.html#lastIndexOf" type="function">lastIndexOf()</link>
                        <link raw="contains()" href="qbytearray.html#contains" type="function">contains()</link>
                        <link raw="count()" href="qbytearray.html#count-3" type="function">count()</link>
                    </see-also>
                </description>
            </function>
            <function name="indexOf" fullname="QByteArray::indexOf" href="qbytearray.html#indexOf-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="221" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="int" signature="int indexOf(char ch, int from) const">
                <parameter type="char" name="ch" default=""/>
                <parameter type="int" name="from" default="0"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2767" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the index position of the first occurrence of the character <argument>ch</argument> in the byte array, searching forward from index position <argument>from</argument>. Returns -1 if <argument>ch</argument> could not be found.</para>
                    <para>Example:</para>
                    <code>QByteArray ba(&quot;ABCBA&quot;);
ba.indexOf(&quot;B&quot;);            // returns 1
ba.indexOf(&quot;B&quot;, 1);         // returns 1
ba.indexOf(&quot;B&quot;, 2);         // returns 3
ba.indexOf(&quot;X&quot;);            // returns -1</code>
                    <see-also>
                        <link raw="lastIndexOf()" href="qbytearray.html#lastIndexOf" type="function">lastIndexOf()</link>
                        <link raw="contains()" href="qbytearray.html#contains" type="function">contains()</link>
                    </see-also>
                </description>
            </function>
            <function name="indexOf" fullname="QByteArray::indexOf" href="qbytearray.html#indexOf-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="222" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="2" type="int" signature="int indexOf(const char *str, int from) const">
                <parameter type="const char *" name="str" default=""/>
                <parameter type="int" name="from" default="0"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2744" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the index position of the first occurrence of the string <argument>str</argument> in the byte array, searching forward from index position <argument>from</argument>. Returns -1 if <argument>str</argument> could not be found.</para>
                </description>
            </function>
            <function name="indexOf" fullname="QByteArray::indexOf" href="qbytearray.html#indexOf-3" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="338" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="3" type="int" signature="int indexOf(const QString &amp;str, int from) const">
                <parameter type="const QString &amp;" name="str" default=""/>
                <parameter type="int" name="from" default="0"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2727" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the index position of the first occurrence of the string <argument>str</argument> in the byte array, searching forward from index position <argument>from</argument>. Returns -1 if <argument>str</argument> could not be found.</para>
                    <para>The Unicode data is converted into 8-bit characters using <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link>.</para>
                    <para>You can disable this function by defining <teletype type="highlighted">QT_NO_CAST_TO_ASCII</teletype> when you compile your applications. You then need to call <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link> (or <link raw="QString::toLatin1()" href="qstring.html#toLatin1" type="function">QString::toLatin1()</link> or <link raw="QString::toLocal8Bit()" href="qstring.html#toLocal8Bit" type="function">QString::toLocal8Bit()</link>) explicitly if you want to convert the data to <teletype type="highlighted">const char *</teletype>.</para>
                </description>
            </function>
            <function name="insert" fullname="QByteArray::insert" href="qbytearray.html#insert" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="309" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray &amp;" signature="QByteArray &amp; insert(int i, const QByteArray &amp;ba)">
                <parameter type="int" name="i" default=""/>
                <parameter type="const QByteArray &amp;" name="ba" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2180" column="4">
                    <para>Inserts the byte array <argument>ba</argument> at index position <argument>i</argument> and returns a reference to this byte array.</para>
                    <para>Example:</para>
                    <code>QByteArray ba(&quot;Meal&quot;);
ba.insert(1, QByteArray(&quot;ontr&quot;));
// ba == &quot;Montreal&quot;</code>
                    <see-also>
                        <link raw="append()" href="qbytearray.html#append" type="function">append()</link>
                        <link raw="prepend()" href="qbytearray.html#prepend" type="function">prepend()</link>
                        <link raw="replace()" href="qbytearray.html#replace" type="function">replace()</link>
                        <link raw="remove()" href="qbytearray.html#remove" type="function">remove()</link>
                    </see-also>
                </description>
            </function>
            <function name="insert" fullname="QByteArray::insert" href="qbytearray.html#insert-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="305" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteArray &amp;" signature="QByteArray &amp; insert(int i, char ch)">
                <parameter type="int" name="i" default=""/>
                <parameter type="char" name="ch" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2244" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Inserts character <argument>ch</argument> at index position <argument>i</argument> in the byte array. If <argument>i</argument> is greater than <link raw="size()" href="qbytearray.html#size" type="function">size()</link>, the array is first extended using <link raw="resize()" href="qbytearray.html#resize" type="function">resize()</link>.</para>
                </description>
            </function>
            <function name="insert" fullname="QByteArray::insert" href="qbytearray.html#insert-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="306" since="5.7" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QByteArray &amp;" signature="QByteArray &amp; insert(int i, int count, char ch)">
                <parameter type="int" name="i" default=""/>
                <parameter type="int" name="count" default=""/>
                <parameter type="char" name="ch" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2257" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Inserts <argument>count</argument> copies of character <argument>ch</argument> at index position <argument>i</argument> in the byte array.</para>
                    <para>If <argument>i</argument> is greater than <link raw="size()" href="qbytearray.html#size" type="function">size()</link>, the array is first extended using <link raw="resize()" href="qbytearray.html#resize" type="function">resize()</link>.</para>
                </description>
            </function>
            <function name="insert" fullname="QByteArray::insert" href="qbytearray.html#insert-3" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="307" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QByteArray &amp;" signature="QByteArray &amp; insert(int i, const char *str)">
                <parameter type="int" name="i" default=""/>
                <parameter type="const char *" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2214" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Inserts the string <argument>str</argument> at position <argument>i</argument> in the byte array.</para>
                    <para>If <argument>i</argument> is greater than <link raw="size()" href="qbytearray.html#size" type="function">size()</link>, the array is first extended using <link raw="resize()" href="qbytearray.html#resize" type="function">resize()</link>.</para>
                </description>
            </function>
            <function name="insert" fullname="QByteArray::insert" href="qbytearray.html#insert-4" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="308" since="4.6" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="QByteArray &amp;" signature="QByteArray &amp; insert(int i, const char *str, int len)">
                <parameter type="int" name="i" default=""/>
                <parameter type="const char *" name="str" default=""/>
                <parameter type="int" name="len" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2228" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Inserts <argument>len</argument> bytes of the string <argument>str</argument> at position <argument>i</argument> in the byte array.</para>
                    <para>If <argument>i</argument> is greater than <link raw="size()" href="qbytearray.html#size" type="function">size()</link>, the array is first extended using <link raw="resize()" href="qbytearray.html#resize" type="function">resize()</link>.</para>
                </description>
            </function>
            <function name="insert" fullname="QByteArray::insert" href="qbytearray.html#insert-5" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="332" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="QByteArray &amp;" signature="QByteArray &amp; insert(int i, const QString &amp;str)">
                <parameter type="int" name="i" default=""/>
                <parameter type="const QString &amp;" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2196" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Inserts the string <argument>str</argument> at index position <argument>i</argument> in the byte array. The Unicode data is converted into 8-bit characters using <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link>.</para>
                    <para>If <argument>i</argument> is greater than <link raw="size()" href="qbytearray.html#size" type="function">size()</link>, the array is first extended using <link raw="resize()" href="qbytearray.html#resize" type="function">resize()</link>.</para>
                    <para>You can disable this function by defining <teletype type="highlighted">QT_NO_CAST_TO_ASCII</teletype> when you compile your applications. You then need to call <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link> (or <link raw="QString::toLatin1()" href="qstring.html#toLatin1" type="function">QString::toLatin1()</link> or <link raw="QString::toLocal8Bit()" href="qstring.html#toLocal8Bit" type="function">QString::toLocal8Bit()</link>) explicitly if you want to convert the data to <teletype type="highlighted">const char *</teletype>.</para>
                </description>
            </function>
            <function name="isDetached" fullname="QByteArray::isDetached" href="qbytearray.html#isDetached" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="207" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool isDetached() const">
                <description path="" line="0" column="0"/>
            </function>
            <function name="isEmpty" fullname="QByteArray::isEmpty" href="qbytearray.html#isEmpty" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="190" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool isEmpty() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1357" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if the byte array has size 0; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>Example:</para>
                    <code>QByteArray().isEmpty();         // returns true
QByteArray(&quot;&quot;).isEmpty();       // returns true
QByteArray(&quot;abc&quot;).isEmpty();    // returns false</code>
                    <see-also>
                        <link raw="size()" href="qbytearray.html#size" type="function">size()</link>
                    </see-also>
                </description>
            </function>
            <function name="isLower" fullname="QByteArray::isLower" href="qbytearray.html#isLower" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="253" since="5.12" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool isLower() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3129" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this byte array contains only lowercase letters, otherwise returns <teletype type="highlighted">false</teletype>. The byte array is interpreted as a Latin-1 encoded string.</para>
                    <see-also>
                        <link raw="isUpper()" href="qbytearray.html#isUpper" type="function">isUpper()</link>
                        <link raw="toLower()" href="qbytearray.html#toLower" type="function">toLower()</link>
                    </see-also>
                </description>
            </function>
            <function name="isNull" fullname="QByteArray::isNull" href="qbytearray.html#isNull" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="442" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool isNull() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1740" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this byte array is null; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>Example:</para>
                    <code>QByteArray().isNull();          // returns true
QByteArray(&quot;&quot;).isNull();        // returns false
QByteArray(&quot;abc&quot;).isNull();     // returns false</code>
                    <para>Qt makes a distinction between null byte arrays and empty byte arrays for historical reasons. For most applications, what matters is whether or not a byte array contains any data, and this can be determined using <link raw="isEmpty()" href="qbytearray.html#isEmpty" type="function">isEmpty()</link>.</para>
                    <see-also>
                        <link raw="isEmpty()" href="qbytearray.html#isEmpty" type="function">isEmpty()</link>
                    </see-also>
                </description>
            </function>
            <function name="isSharedWith" fullname="QByteArray::isSharedWith" href="qbytearray.html#isSharedWith" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="208" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool isSharedWith(const QByteArray &amp;other) const">
                <parameter type="const QByteArray &amp;" name="other" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="isUpper" fullname="QByteArray::isUpper" href="qbytearray.html#isUpper" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="252" since="5.12" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool isUpper() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3093" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this byte array contains only uppercase letters, otherwise returns <teletype type="highlighted">false</teletype>. The byte array is interpreted as a Latin-1 encoded string.</para>
                    <see-also>
                        <link raw="isLower()" href="qbytearray.html#isLower" type="function">isLower()</link>
                        <link raw="toUpper()" href="qbytearray.html#toUpper" type="function">toUpper()</link>
                    </see-also>
                </description>
            </function>
            <function name="lastIndexOf" fullname="QByteArray::lastIndexOf" href="qbytearray.html#lastIndexOf" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="226" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="int" signature="int lastIndexOf(const QByteArray &amp;ba, int from) const">
                <parameter type="const QByteArray &amp;" name="ba" default=""/>
                <parameter type="int" name="from" default="-1"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2828" column="4">
                    <para>Returns the index position of the last occurrence of the byte array <argument>ba</argument> in this byte array, searching backward from index position <argument>from</argument>. If <argument>from</argument> is -1 (the default), the search starts at the last byte. Returns -1 if <argument>ba</argument> could not be found.</para>
                    <para>Example:</para>
                    <code>QByteArray x(&quot;crazy azimuths&quot;);
QByteArray y(&quot;az&quot;);
x.lastIndexOf(y);           // returns 6
x.lastIndexOf(y, 6);        // returns 6
x.lastIndexOf(y, 5);        // returns 2
x.lastIndexOf(y, 1);        // returns -1</code>
                    <see-also>
                        <link raw="indexOf()" href="qbytearray.html#indexOf" type="function">indexOf()</link>
                        <link raw="contains()" href="qbytearray.html#contains" type="function">contains()</link>
                        <link raw="count()" href="qbytearray.html#count-3" type="function">count()</link>
                    </see-also>
                </description>
            </function>
            <function name="lastIndexOf" fullname="QByteArray::lastIndexOf" href="qbytearray.html#lastIndexOf-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="224" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="int" signature="int lastIndexOf(char ch, int from) const">
                <parameter type="char" name="ch" default=""/>
                <parameter type="int" name="from" default="-1"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2886" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the index position of the last occurrence of character <argument>ch</argument> in the byte array, searching backward from index position <argument>from</argument>. If <argument>from</argument> is -1 (the default), the search starts at the last (<link raw="size()" href="qbytearray.html#size" type="function">size()</link> - 1) byte. Returns -1 if <argument>ch</argument> could not be found.</para>
                    <para>Example:</para>
                    <code>QByteArray ba(&quot;ABCBA&quot;);
ba.lastIndexOf(&quot;B&quot;);        // returns 3
ba.lastIndexOf(&quot;B&quot;, 3);     // returns 3
ba.lastIndexOf(&quot;B&quot;, 2);     // returns 1
ba.lastIndexOf(&quot;X&quot;);        // returns -1</code>
                    <see-also>
                        <link raw="indexOf()" href="qbytearray.html#indexOf" type="function">indexOf()</link>
                        <link raw="contains()" href="qbytearray.html#contains" type="function">contains()</link>
                    </see-also>
                </description>
            </function>
            <function name="lastIndexOf" fullname="QByteArray::lastIndexOf" href="qbytearray.html#lastIndexOf-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="225" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="2" type="int" signature="int lastIndexOf(const char *str, int from) const">
                <parameter type="const char *" name="str" default=""/>
                <parameter type="int" name="from" default="-1"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2869" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the index position of the last occurrence of the string <argument>str</argument> in the byte array, searching backward from index position <argument>from</argument>. If <argument>from</argument> is -1 (the default), the search starts at the last (<link raw="size()" href="qbytearray.html#size" type="function">size()</link> - 1) byte. Returns -1 if <argument>str</argument> could not be found.</para>
                </description>
            </function>
            <function name="lastIndexOf" fullname="QByteArray::lastIndexOf" href="qbytearray.html#lastIndexOf-3" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="339" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="3" type="int" signature="int lastIndexOf(const QString &amp;str, int from) const">
                <parameter type="const QString &amp;" name="str" default=""/>
                <parameter type="int" name="from" default="-1"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2851" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the index position of the last occurrence of the string <argument>str</argument> in the byte array, searching backward from index position <argument>from</argument>. If <argument>from</argument> is -1 (the default), the search starts at the last (<link raw="size()" href="qbytearray.html#size" type="function">size()</link> - 1) byte. Returns -1 if <argument>str</argument> could not be found.</para>
                    <para>The Unicode data is converted into 8-bit characters using <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link>.</para>
                    <para>You can disable this function by defining <teletype type="highlighted">QT_NO_CAST_TO_ASCII</teletype> when you compile your applications. You then need to call <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link> (or <link raw="QString::toLatin1()" href="qstring.html#toLatin1" type="function">QString::toLatin1()</link> or <link raw="QString::toLocal8Bit()" href="qstring.html#toLocal8Bit" type="function">QString::toLocal8Bit()</link>) explicitly if you want to convert the data to <teletype type="highlighted">const char *</teletype>.</para>
                </description>
            </function>
            <function name="left" fullname="QByteArray::left" href="qbytearray.html#left" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="238" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray" signature="QByteArray left(int len) const">
                <parameter type="int" name="len" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3164" column="4">
                    <para>Returns a byte array that contains the leftmost <argument>len</argument> bytes of this byte array.</para>
                    <para>The entire byte array is returned if <argument>len</argument> is greater than <link raw="size()" href="qbytearray.html#size" type="function">size()</link>.</para>
                    <para>Example:</para>
                    <code>QByteArray x(&quot;Pineapple&quot;);
QByteArray y = x.left(4);
// y == &quot;Pine&quot;</code>
                    <see-also>
                        <link raw="startsWith()" href="qbytearray.html#startsWith" type="function">startsWith()</link>
                        <link raw="right()" href="qbytearray.html#right" type="function">right()</link>
                        <link raw="mid()" href="qbytearray.html#mid" type="function">mid()</link>
                        <link raw="chopped()" href="qbytearray.html#chopped" type="function">chopped()</link>
                        <link raw="chop()" href="qbytearray.html#chop" type="function">chop()</link>
                        <link raw="truncate()" href="qbytearray.html#truncate" type="function">truncate()</link>
                    </see-also>
                </description>
            </function>
            <function name="leftJustified" fullname="QByteArray::leftJustified" href="qbytearray.html#leftJustified" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="292" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray" signature="QByteArray leftJustified(int width, char fill, bool truncate) const">
                <parameter type="int" name="width" default=""/>
                <parameter type="char" name="fill" default="' '"/>
                <parameter type="bool" name="truncate" default="false"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3797" column="4">
                    <para>Returns a byte array of size <argument>width</argument> that contains this byte array padded by the <argument>fill</argument> character.</para>
                    <para>If <argument>truncate</argument> is false and the <link raw="size()" href="qbytearray.html#size" type="function">size()</link> of the byte array is more than <argument>width</argument>, then the returned byte array is a copy of this byte array.</para>
                    <para>If <argument>truncate</argument> is true and the <link raw="size()" href="qbytearray.html#size" type="function">size()</link> of the byte array is more than <argument>width</argument>, then any bytes in a copy of the byte array after position <argument>width</argument> are removed, and the copy is returned.</para>
                    <para>Example:</para>
                    <code>QByteArray x(&quot;apple&quot;);
QByteArray y = x.leftJustified(8, '.');   // y == &quot;apple...&quot;</code>
                    <see-also>
                        <link raw="rightJustified()" href="qbytearray.html#rightJustified" type="function">rightJustified()</link>
                    </see-also>
                </description>
            </function>
            <function name="length" fullname="QByteArray::length" href="qbytearray.html#length" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="441" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="int" signature="int length() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1735" column="4">
                    <para>Same as <link raw="size()" href="qbytearray.html#size" type="function">size()</link>.</para>
                </description>
            </function>
            <function name="mid" fullname="QByteArray::mid" href="qbytearray.html#mid" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="240" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray" signature="QByteArray mid(int pos, int len) const">
                <parameter type="int" name="pos" default=""/>
                <parameter type="int" name="len" default="-1"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3208" column="4">
                    <para>Returns a byte array containing <argument>len</argument> bytes from this byte array, starting at position <argument>pos</argument>.</para>
                    <para>If <argument>len</argument> is -1 (the default), or <argument>pos</argument> + <argument>len</argument> &gt;= <link raw="size()" href="qbytearray.html#size" type="function">size()</link>, returns a byte array containing all bytes starting at position <argument>pos</argument> until the end of the byte array.</para>
                    <para>Example:</para>
                    <code>QByteArray x(&quot;Five pineapples&quot;);
QByteArray y = x.mid(5, 4);     // y == &quot;pine&quot;
QByteArray z = x.mid(5);        // z == &quot;pineapples&quot;</code>
                    <see-also>
                        <link raw="left()" href="qbytearray.html#left" type="function">left()</link>
                        <link raw="right()" href="qbytearray.html#right" type="function">right()</link>
                        <link raw="chopped()" href="qbytearray.html#chopped" type="function">chopped()</link>
                        <link raw="chop()" href="qbytearray.html#chop" type="function">chop()</link>
                        <link raw="truncate()" href="qbytearray.html#truncate" type="function">truncate()</link>
                    </see-also>
                </description>
            </function>
            <function name="nulTerminated" fullname="QByteArray::nulTerminated" href="qbytearray.html#nulTerminated" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="454" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray" signature="QByteArray nulTerminated() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1926" column="4">
                    <para>Return a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> that is sure to be '\0'-terminated.</para>
                    <para>By default, all <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> have an extra NUL at the end, guaranteeing that assumption. However, if <link raw="QByteArray::fromRawData" href="qbytearray.html#fromRawData" type="function">QByteArray::fromRawData</link> is used, then the NUL is there only if the user put it there. We can't be sure.</para>
                </description>
            </function>
            <function name="number" fullname="QByteArray::number" href="qbytearray.html#number" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="378" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QByteArray" signature="QByteArray number(int n, int base)">
                <parameter type="int" name="n" default=""/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4427" column="4">
                    <para>Returns a byte array containing the string equivalent of the number <argument>n</argument> to base <argument>base</argument> (10 by default). The <argument>base</argument> can be any value between 2 and 36.</para>
                    <para>Example:</para>
                    <code>int n = 63;
QByteArray::number(n);              // returns &quot;63&quot;
QByteArray::number(n, 16);          // returns &quot;3f&quot;
QByteArray::number(n, 16).toUpper();  // returns &quot;3F&quot;</code>
                    <para>
                        <bold>Note:</bold> The format of the number is not localized; the default C locale is used irrespective of the user's locale.</para>
                    <see-also>
                        <link raw="setNum()" href="qbytearray.html#setNum" type="function">setNum()</link>
                        <link raw="toInt()" href="qbytearray.html#toInt" type="function">toInt()</link>
                    </see-also>
                </description>
            </function>
            <function name="number" fullname="QByteArray::number" href="qbytearray.html#number-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="379" meta="plain" virtual="non" const="false" static="true" final="false" override="false" overload="true" overload-number="1" type="QByteArray" signature="QByteArray number(uint n, int base)">
                <parameter type="uint" name="n" default=""/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4447" column="4">
                    <para>This is an overloaded function.</para>
                    <see-also>
                        <link raw="toUInt()" href="qbytearray.html#toUInt" type="function">toUInt()</link>
                    </see-also>
                </description>
            </function>
            <function name="number" fullname="QByteArray::number" href="qbytearray.html#number-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="380" meta="plain" virtual="non" const="false" static="true" final="false" override="false" overload="true" overload-number="2" type="QByteArray" signature="QByteArray number(qlonglong n, int base)">
                <parameter type="qlonglong" name="n" default=""/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4459" column="4">
                    <para>This is an overloaded function.</para>
                    <see-also>
                        <link raw="toLongLong()" href="qbytearray.html#toLongLong" type="function">toLongLong()</link>
                    </see-also>
                </description>
            </function>
            <function name="number" fullname="QByteArray::number" href="qbytearray.html#number-3" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="381" meta="plain" virtual="non" const="false" static="true" final="false" override="false" overload="true" overload-number="3" type="QByteArray" signature="QByteArray number(qulonglong n, int base)">
                <parameter type="qulonglong" name="n" default=""/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4471" column="4">
                    <para>This is an overloaded function.</para>
                    <see-also>
                        <link raw="toULongLong()" href="qbytearray.html#toULongLong" type="function">toULongLong()</link>
                    </see-also>
                </description>
            </function>
            <function name="number" fullname="QByteArray::number" href="qbytearray.html#number-4" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="382" meta="plain" virtual="non" const="false" static="true" final="false" override="false" overload="true" overload-number="4" type="QByteArray" signature="QByteArray number(double n, char f, int prec)">
                <parameter type="double" name="n" default=""/>
                <parameter type="char" name="f" default="'g'"/>
                <parameter type="int" name="prec" default="6"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4483" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns a byte array that contains the printed value of <argument>n</argument>, formatted in format <argument>f</argument> with precision <argument>prec</argument>.</para>
                    <para>Argument <argument>n</argument> is formatted according to the <argument>f</argument> format specified, which is <teletype type="highlighted">g</teletype> by default, and can be any of the following:</para>
                    <table>
                        <header>
                            <item>
                                <para>Format</para>
                            </item>
                            <item>
                                <para>Meaning</para>
                            </item>
                        </header>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">e</teletype></para>
                            </item>
                            <item>
                                <para>format as [-]9.9e[+|-]999</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">E</teletype></para>
                            </item>
                            <item>
                                <para>format as [-]9.9E[+|-]999</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">f</teletype></para>
                            </item>
                            <item>
                                <para>format as [-]9.9</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">g</teletype></para>
                            </item>
                            <item>
                                <para>use <teletype type="highlighted">e</teletype> or <teletype type="highlighted">f</teletype> format, whichever is the most concise</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">G</teletype></para>
                            </item>
                            <item>
                                <para>use <teletype type="highlighted">E</teletype> or <teletype type="highlighted">f</teletype> format, whichever is the most concise</para>
                            </item>
                        </row>
                    </table>
                    <para>With 'e', 'E', and 'f', <argument>prec</argument> is the number of digits after the decimal point. With 'g' and 'G', <argument>prec</argument> is the maximum number of significant digits (trailing zeroes are omitted).</para>
                    <code>QByteArray ba = QByteArray::number(12.3456, 'E', 3);
// ba == 1.235E+01</code>
                    <para>
                        <bold>Note:</bold> The format of the number is not localized; the default C locale is used irrespective of the user's locale.</para>
                    <see-also>
                        <link raw="toDouble()" href="qbytearray.html#toDouble" type="function">toDouble()</link>
                    </see-also>
                </description>
            </function>
            <function name="operator QNoImplicitBoolCast" fullname="QByteArray::operator QNoImplicitBoolCast" href="qbytearray.html#operator-QNoImplicitBoolCast" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="450" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QNoImplicitBoolCast" signature="QNoImplicitBoolCast operator QNoImplicitBoolCast() const">
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator const char *" fullname="QByteArray::operator const char *" href="qbytearray.html#operator-const-char--2a" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="200" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="const char *" signature="const char * operator const char *() const">
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator const void *" fullname="QByteArray::operator const void *" href="qbytearray.html#operator-const-void--2a" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="201" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="const void *" signature="const void * operator const void *() const">
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator!=" fullname="QByteArray::operator!=" href="qbytearray.html#operator-not-eq" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="343" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool operator!=(const QString &amp;str) const">
                <parameter type="const QString &amp;" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3414" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this byte array is not equal to string <argument>str</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>The Unicode data is converted into 8-bit characters using <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link>.</para>
                    <para>The comparison is case sensitive.</para>
                    <para>You can disable this operator by defining <teletype type="highlighted">QT_NO_CAST_FROM_ASCII</teletype> when you compile your applications. You then need to call <link raw="QString::fromUtf8()" href="qstring.html#fromUtf8" type="function">QString::fromUtf8()</link>, <link raw="QString::fromLatin1()" href="qstring.html#fromLatin1" type="function">QString::fromLatin1()</link>, or <link raw="QString::fromLocal8Bit()" href="qstring.html#fromLocal8Bit" type="function">QString::fromLocal8Bit()</link> explicitly if you want to convert the byte array to a <link raw="QString" href="qstring.html" type="class">QString</link> before doing the comparison.</para>
                </description>
            </function>
            <function name="operator+" fullname="QByteArray::operator+" href="qbytearray.html#operator-2b" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="657" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="const QByteArray" signature="const QByteArray operator+(const QByteArray &amp;a1, const QByteArray &amp;a2)">
                <parameter type="const QByteArray &amp;" name="a1" default=""/>
                <parameter type="const QByteArray &amp;" name="a2" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3697" column="4">
                    <para>Returns a byte array that is the result of concatenating byte array <argument>a1</argument> and byte array <argument>a2</argument>.</para>
                    <see-also>
                        <link raw="QByteArray::operator+=()" href="qbytearray.html#operator-2b-eq" type="function">QByteArray::operator+=()</link>
                    </see-also>
                </description>
            </function>
            <function name="operator+" fullname="QByteArray::operator+" href="qbytearray.html#operator-2b-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="659" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="const QByteArray" signature="const QByteArray operator+(const QByteArray &amp;a1, const char *a2)">
                <parameter type="const QByteArray &amp;" name="a1" default=""/>
                <parameter type="const char *" name="a2" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3706" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns a byte array that is the result of concatenating byte array <argument>a1</argument> and string <argument>a2</argument>.</para>
                </description>
            </function>
            <function name="operator+" fullname="QByteArray::operator+" href="qbytearray.html#operator-2b-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="661" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="const QByteArray" signature="const QByteArray operator+(const QByteArray &amp;a1, char a2)">
                <parameter type="const QByteArray &amp;" name="a1" default=""/>
                <parameter type="char" name="a2" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3715" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns a byte array that is the result of concatenating byte array <argument>a1</argument> and character <argument>a2</argument>.</para>
                </description>
            </function>
            <function name="operator+" fullname="QByteArray::operator+" href="qbytearray.html#operator-2b-3" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="663" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="const QByteArray" signature="const QByteArray operator+(const char *a1, const QByteArray &amp;a2)">
                <parameter type="const char *" name="a1" default=""/>
                <parameter type="const QByteArray &amp;" name="a2" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3724" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns a byte array that is the result of concatenating string <argument>a1</argument> and byte array <argument>a2</argument>.</para>
                </description>
            </function>
            <function name="operator+" fullname="QByteArray::operator+" href="qbytearray.html#operator-2b-4" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="665" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="const QByteArray" signature="const QByteArray operator+(char a1, const QByteArray &amp;a2)">
                <parameter type="char" name="a1" default=""/>
                <parameter type="const QByteArray &amp;" name="a2" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3733" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns a byte array that is the result of concatenating character <argument>a1</argument> and byte array <argument>a2</argument>.</para>
                </description>
            </function>
            <function name="operator+" fullname="QString::operator+" href="qstring.html#operator-2b" status="active" access="public" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1347" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="const QString" signature="const QString operator+(const QString &amp;s1, const QString &amp;s2)">
                <parameter type="const QString &amp;" name="s1" default=""/>
                <parameter type="const QString &amp;" name="s2" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qstring.cpp" line="6244" column="4">
                    <para>Returns a string which is the result of concatenating <argument>s1</argument> and <argument>s2</argument>.</para>
                </description>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1349" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="const QString" signature="const QString operator+(const QString &amp;s1, QChar s2)">
                <parameter type="const QString &amp;" name="s1" default=""/>
                <parameter type="QChar" name="s2" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1351" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="const QString" signature="const QString operator+(QChar s1, const QString &amp;s2)">
                <parameter type="QChar" name="s1" default=""/>
                <parameter type="const QString &amp;" name="s2" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" fullname="QString::operator+" href="qstring.html#operator-2b-3" status="active" access="public" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1354" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="const QString" signature="const QString operator+(const QString &amp;s1, const char *s2)">
                <parameter type="const QString &amp;" name="s1" default=""/>
                <parameter type="const char *" name="s2" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qstring.cpp" line="6252" column="4">
                    <para>Returns a string which is the result of concatenating <argument>s1</argument> and <argument>s2</argument> (<argument>s2</argument> is converted to Unicode using the <link raw="QString::fromUtf8()" href="qstring.html#fromUtf8" type="function">QString::fromUtf8()</link> function).</para>
                    <see-also>
                        <link raw="QString::fromUtf8()" href="qstring.html#fromUtf8" type="function">QString::fromUtf8()</link>
                    </see-also>
                </description>
            </function>
            <function name="operator+" fullname="QString::operator+" href="qstring.html#operator-2b-4" status="active" access="public" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1356" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="const QString" signature="const QString operator+(const char *s1, const QString &amp;s2)">
                <parameter type="const char *" name="s1" default=""/>
                <parameter type="const QString &amp;" name="s2" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qstring.cpp" line="6263" column="4">
                    <para>Returns a string which is the result of concatenating <argument>s1</argument> and <argument>s2</argument> (<argument>s1</argument> is converted to Unicode using the <link raw="QString::fromUtf8()" href="qstring.html#fromUtf8" type="function">QString::fromUtf8()</link> function).</para>
                    <see-also>
                        <link raw="QString::fromUtf8()" href="qstring.html#fromUtf8" type="function">QString::fromUtf8()</link>
                    </see-also>
                </description>
            </function>
            <function name="operator+" fullname="QString::operator+" href="qstring.html#operator-2b-5" status="active" access="public" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1358" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="const QString" signature="const QString operator+(char ch, const QString &amp;s)">
                <parameter type="char" name="ch" default=""/>
                <parameter type="const QString &amp;" name="s" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qstring.cpp" line="6282" column="4">
                    <para>Returns a string which is the result of concatenating the character <argument>ch</argument> and the string <argument>s</argument>.</para>
                </description>
            </function>
            <function name="operator+" fullname="QString::operator+" href="qstring.html#operator-2b-6" status="active" access="public" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1360" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="6" type="const QString" signature="const QString operator+(const QString &amp;s, char ch)">
                <parameter type="const QString &amp;" name="s" default=""/>
                <parameter type="char" name="ch" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qstring.cpp" line="6274" column="4">
                    <para>Returns a string which is the result of concatenating the string <argument>s</argument> and the character <argument>ch</argument>.</para>
                </description>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1362" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="7" type="const QString" signature="const QString operator+(const QByteArray &amp;ba, const QString &amp;s)">
                <parameter type="const QByteArray &amp;" name="ba" default=""/>
                <parameter type="const QString &amp;" name="s" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1364" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="8" type="const QString" signature="const QString operator+(const QString &amp;s, const QByteArray &amp;ba)">
                <parameter type="const QString &amp;" name="s" default=""/>
                <parameter type="const QByteArray &amp;" name="ba" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1843" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="9" type="QString" signature="QString operator+(const QString &amp;s1, const QStringRef &amp;s2)">
                <parameter type="const QString &amp;" name="s1" default=""/>
                <parameter type="const QStringRef &amp;" name="s2" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1845" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="10" type="QString" signature="QString operator+(const QStringRef &amp;s1, const QString &amp;s2)">
                <parameter type="const QStringRef &amp;" name="s1" default=""/>
                <parameter type="const QString &amp;" name="s2" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1847" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="11" type="QString" signature="QString operator+(const QStringRef &amp;s1, QLatin1String s2)">
                <parameter type="const QStringRef &amp;" name="s1" default=""/>
                <parameter type="QLatin1String" name="s2" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1849" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="12" type="QString" signature="QString operator+(QLatin1String s1, const QStringRef &amp;s2)">
                <parameter type="QLatin1String" name="s1" default=""/>
                <parameter type="const QStringRef &amp;" name="s2" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1851" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="13" type="QString" signature="QString operator+(const QStringRef &amp;s1, const QStringRef &amp;s2)">
                <parameter type="const QStringRef &amp;" name="s1" default=""/>
                <parameter type="const QStringRef &amp;" name="s2" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1853" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="14" type="QString" signature="QString operator+(const QStringRef &amp;s1, QChar s2)">
                <parameter type="const QStringRef &amp;" name="s1" default=""/>
                <parameter type="QChar" name="s2" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1855" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="15" type="QString" signature="QString operator+(QChar s1, const QStringRef &amp;s2)">
                <parameter type="QChar" name="s1" default=""/>
                <parameter type="const QStringRef &amp;" name="s2" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qlist.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qlist.h" lineno="286" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="16" type="QList::iterator" signature="QList::iterator operator+(QList::iterator::difference_type j, QList::iterator k)">
                <parameter type="QList::iterator::difference_type" name="j" default=""/>
                <parameter type="QList::iterator" name="k" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qlist.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qlist.h" lineno="332" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="17" type="QList::const_iterator" signature="QList::const_iterator operator+(QList::const_iterator::difference_type j, QList::const_iterator k)">
                <parameter type="QList::const_iterator::difference_type" name="j" default=""/>
                <parameter type="QList::const_iterator" name="k" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qmap.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qmap.h" lineno="452" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="18" type="QMap::iterator" signature="QMap::iterator operator+(int j, QMap::iterator k)">
                <parameter type="int" name="j" default=""/>
                <parameter type="QMap::iterator" name="k" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qmap.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qmap.h" lineno="516" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="19" type="QMap::const_iterator" signature="QMap::const_iterator operator+(int j, QMap::const_iterator k)">
                <parameter type="int" name="j" default=""/>
                <parameter type="QMap::const_iterator" name="k" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qhash.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qhash.h" lineno="351" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="20" type="QHash::iterator" signature="QHash::iterator operator+(int j, QHash::iterator k)">
                <parameter type="int" name="j" default=""/>
                <parameter type="QHash::iterator" name="k" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qhash.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qhash.h" lineno="417" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="21" type="QHash::const_iterator" signature="QHash::const_iterator operator+(int j, QHash::const_iterator k)">
                <parameter type="int" name="j" default=""/>
                <parameter type="QHash::const_iterator" name="k" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qvariant.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qvariant.h" lineno="641" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="22" type="QSequentialIterable::const_iterator" signature="QSequentialIterable::const_iterator operator+(int j, QSequentialIterable::const_iterator k)">
                <parameter type="int" name="j" default=""/>
                <parameter type="QSequentialIterable::const_iterator" name="k" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qvariant.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qvariant.h" lineno="699" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="23" type="QAssociativeIterable::const_iterator" signature="QAssociativeIterable::const_iterator operator+(int j, QAssociativeIterable::const_iterator k)">
                <parameter type="int" name="j" default=""/>
                <parameter type="QAssociativeIterable::const_iterator" name="k" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qset.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qset.h" lineno="134" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="24" type="QSet::iterator" signature="QSet::iterator operator+(int j, QSet::iterator k)">
                <parameter type="int" name="j" default=""/>
                <parameter type="QSet::iterator" name="k" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qset.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qset.h" lineno="169" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="25" type="QSet::const_iterator" signature="QSet::const_iterator operator+(int j, QSet::const_iterator k)">
                <parameter type="int" name="j" default=""/>
                <parameter type="QSet::const_iterator" name="k" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="qfloat16.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qfloat16.h" lineno="173" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="26" type="qfloat16" signature="qfloat16 operator+(qfloat16 a, qfloat16 b)">
                <parameter type="qfloat16" name="a" default=""/>
                <parameter type="qfloat16" name="b" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="qfloat16.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qfloat16.h" lineno="193" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="27" type="long double" signature="long double operator+(qfloat16 lhs, long double rhs)">
                <parameter type="qfloat16" name="lhs" default=""/>
                <parameter type="long double" name="rhs" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="qfloat16.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qfloat16.h" lineno="193" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="28" type="long double" signature="long double operator+(long double lhs, qfloat16 rhs)">
                <parameter type="long double" name="lhs" default=""/>
                <parameter type="qfloat16" name="rhs" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="qfloat16.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qfloat16.h" lineno="194" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="29" type="double" signature="double operator+(qfloat16 lhs, double rhs)">
                <parameter type="qfloat16" name="lhs" default=""/>
                <parameter type="double" name="rhs" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="qfloat16.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qfloat16.h" lineno="194" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="30" type="double" signature="double operator+(double lhs, qfloat16 rhs)">
                <parameter type="double" name="lhs" default=""/>
                <parameter type="qfloat16" name="rhs" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="qfloat16.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qfloat16.h" lineno="195" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="31" type="float" signature="float operator+(qfloat16 lhs, float rhs)">
                <parameter type="qfloat16" name="lhs" default=""/>
                <parameter type="float" name="rhs" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="qfloat16.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qfloat16.h" lineno="195" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="32" type="float" signature="float operator+(float lhs, qfloat16 rhs)">
                <parameter type="float" name="lhs" default=""/>
                <parameter type="qfloat16" name="rhs" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="qfloat16.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qfloat16.h" lineno="202" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="33" type="double" signature="double operator+(qfloat16 lhs, int rhs)">
                <parameter type="qfloat16" name="lhs" default=""/>
                <parameter type="int" name="rhs" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="qfloat16.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qfloat16.h" lineno="202" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="34" type="double" signature="double operator+(int lhs, qfloat16 rhs)">
                <parameter type="int" name="lhs" default=""/>
                <parameter type="qfloat16" name="rhs" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" fullname="QDeadlineTimer::operator+" href="qdeadlinetimer.html#operator-2b" status="active" access="public" location="QtCore\qdeadlinetimer.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdeadlinetimer.h" lineno="111" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDeadlineTimer" signature="QDeadlineTimer operator+(QDeadlineTimer dt, qint64 msecs)">
                <parameter type="QDeadlineTimer" name="dt" default=""/>
                <parameter type="qint64" name="msecs" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/kernel/qdeadlinetimer.cpp" line="648" column="4">
                    <para>Returns a <link raw="QDeadlineTimer" href="qdeadlinetimer.html" type="class">QDeadlineTimer</link> object whose deadline is <argument>msecs</argument> later than the deadline stored in <argument>dt</argument>. If <argument>dt</argument> is set to never expire, this function returns a <link raw="QDeadlineTimer" href="qdeadlinetimer.html" type="class">QDeadlineTimer</link> that does not expire either.</para>
                    <para>To add times of precision greater than 1 millisecond, use <link raw="addNSecs()" href="qdeadlinetimer.html#addNSecs" type="function">addNSecs()</link>.</para>
                </description>
            </function>
            <function name="operator+" fullname="QDeadlineTimer::operator+" href="qdeadlinetimer.html#operator-2b-1" status="active" access="public" location="QtCore\qdeadlinetimer.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdeadlinetimer.h" lineno="113" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDeadlineTimer" signature="QDeadlineTimer operator+(qint64 msecs, QDeadlineTimer dt)">
                <parameter type="qint64" name="msecs" default=""/>
                <parameter type="QDeadlineTimer" name="dt" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/kernel/qdeadlinetimer.cpp" line="659" column="4">
                    <para>Returns a <link raw="QDeadlineTimer" href="qdeadlinetimer.html" type="class">QDeadlineTimer</link> object whose deadline is <argument>msecs</argument> later than the deadline stored in <argument>dt</argument>. If <argument>dt</argument> is set to never expire, this function returns a <link raw="QDeadlineTimer" href="qdeadlinetimer.html" type="class">QDeadlineTimer</link> that does not expire either.</para>
                    <para>To add times of precision greater than 1 millisecond, use <link raw="addNSecs()" href="qdeadlinetimer.html#addNSecs" type="function">addNSecs()</link>.</para>
                </description>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qdeadlinetimer.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdeadlinetimer.h" lineno="174" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QDeadlineTimer" signature="QDeadlineTimer operator+(QDeadlineTimer dt, std::chrono::duration&lt;Rep, Period&gt; value)">
                <parameter type="QDeadlineTimer" name="dt" default=""/>
                <parameter type="std::chrono::duration&lt;Rep, Period&gt;" name="value" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qdeadlinetimer.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdeadlinetimer.h" lineno="177" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QDeadlineTimer" signature="QDeadlineTimer operator+(std::chrono::duration&lt;Rep, Period&gt; value, QDeadlineTimer dt)">
                <parameter type="std::chrono::duration&lt;Rep, Period&gt;" name="value" default=""/>
                <parameter type="QDeadlineTimer" name="dt" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" fullname="QPoint::operator+" href="qpoint.html#operator-2b" status="active" access="public" location="QtCore\qpoint.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qpoint.h" lineno="84" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="const QPoint" signature="const QPoint operator+(const QPoint &amp;p1, const QPoint &amp;p2)">
                <parameter type="const QPoint &amp;" name="p1" default=""/>
                <parameter type="const QPoint &amp;" name="p2" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qpoint.cpp" line="249" column="4">
                    <para>Returns a <link raw="QPoint" href="qpoint.html" type="class">QPoint</link> object that is the sum of the given points, <argument>p1</argument> and <argument>p2</argument>; each component is added separately.</para>
                    <see-also>
                        <link raw="QPoint::operator+=()" href="qpoint.html#operator-2b-eq" type="function">QPoint::operator+=()</link>
                    </see-also>
                </description>
            </function>
            <function name="operator+" fullname="QPoint::operator+" href="qpoint.html#operator-2b-1" status="active" access="public" location="QtCore\qpoint.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qpoint.h" lineno="92" related="true" since="5.0" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="const QPoint" signature="const QPoint operator+(const QPoint &amp;point)">
                <parameter type="const QPoint &amp;" name="point" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qpoint.cpp" line="338" column="4">
                    <para>Returns <argument>point</argument> unmodified.</para>
                </description>
            </function>
            <function name="operator+" fullname="QPointF::operator+" href="qpointf.html#operator-2b" status="active" access="public" location="QtCore\qpoint.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qpoint.h" lineno="248" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="const QPointF" signature="const QPointF operator+(const QPointF &amp;p1, const QPointF &amp;p2)">
                <parameter type="const QPointF &amp;" name="p1" default=""/>
                <parameter type="const QPointF &amp;" name="p2" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qpoint.cpp" line="653" column="4">
                    <para>Returns a <link raw="QPointF" href="qpointf.html" type="class">QPointF</link> object that is the sum of the given points, <argument>p1</argument> and <argument>p2</argument>; each component is added separately.</para>
                    <see-also>
                        <link raw="QPointF::operator+=()" href="qpointf.html#operator-2b-eq" type="function">QPointF::operator+=()</link>
                    </see-also>
                </description>
            </function>
            <function name="operator+" fullname="QPointF::operator+" href="qpointf.html#operator-2b-1" status="active" access="public" location="QtCore\qpoint.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qpoint.h" lineno="252" related="true" since="5.0" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="const QPointF" signature="const QPointF operator+(const QPointF &amp;point)">
                <parameter type="const QPointF &amp;" name="point" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qpoint.cpp" line="691" column="4">
                    <para>Returns <argument>point</argument> unmodified.</para>
                </description>
            </function>
            <function name="operator+" status="internal" access="private" location="qfuture.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qfuture.h" lineno="139" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QFuture::const_iterator" signature="QFuture::const_iterator operator+(int j, QFuture::const_iterator k)">
                <parameter type="int" name="j" default=""/>
                <parameter type="QFuture::const_iterator" name="k" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qlinkedlist.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qlinkedlist.h" lineno="162" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QLinkedList::iterator" signature="QLinkedList::iterator operator+(int j, QLinkedList::iterator k)">
                <parameter type="int" name="j" default=""/>
                <parameter type="QLinkedList::iterator" name="k" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" status="internal" access="private" location="QtCore\qlinkedlist.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qlinkedlist.h" lineno="197" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="QLinkedList::const_iterator" signature="QLinkedList::const_iterator operator+(int j, QLinkedList::const_iterator k)">
                <parameter type="int" name="j" default=""/>
                <parameter type="QLinkedList::const_iterator" name="k" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+" fullname="QMargins::operator+" href="qmargins.html#operator-2b" status="active" access="public" location="qmargins.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qmargins.h" lineno="153" related="true" since="5.1" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QMargins" signature="QMargins operator+(const QMargins &amp;m1, const QMargins &amp;m2)">
                <parameter type="const QMargins &amp;" name="m1" default=""/>
                <parameter type="const QMargins &amp;" name="m2" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qmargins.cpp" line="159" column="4">
                    <para>Returns a <link raw="QMargins" href="qmargins.html" type="class">QMargins</link> object that is the sum of the given margins, <argument>m1</argument> and <argument>m2</argument>; each component is added separately.</para>
                    <see-also>
                        <link raw="QMargins::operator+=()" href="qmargins.html#operator-2b-eq" type="function">QMargins::operator+=()</link>
                        <link raw="QMargins::operator-=()" href="qmargins.html#operator--eq" type="function">QMargins::operator-=()</link>
                    </see-also>
                </description>
            </function>
            <function name="operator+" fullname="QMargins::operator+" href="qmargins.html#operator-2b-1" status="active" access="public" location="qmargins.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qmargins.h" lineno="165" related="true" since="5.3" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QMargins" signature="QMargins operator+(const QMargins &amp;lhs, int rhs)">
                <parameter type="const QMargins &amp;" name="lhs" default=""/>
                <parameter type="int" name="rhs" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qmargins.cpp" line="183" column="4">
                    <para>Returns a <link raw="QMargins" href="qmargins.html" type="class">QMargins</link> object that is formed by adding <argument>rhs</argument> to <argument>lhs</argument>.</para>
                    <see-also>
                        <link raw="QMargins::operator+=()" href="qmargins.html#operator-2b-eq" type="function">QMargins::operator+=()</link>
                        <link raw="QMargins::operator-=()" href="qmargins.html#operator--eq" type="function">QMargins::operator-=()</link>
                    </see-also>
                </description>
            </function>
            <function name="operator+" fullname="QMargins::operator+" href="qmargins.html#operator-2b-2" status="active" access="public" location="qmargins.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qmargins.h" lineno="171" related="true" since="5.3" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QMargins" signature="QMargins operator+(int lhs, const QMargins &amp;rhs)">
                <parameter type="int" name="lhs" default=""/>
                <parameter type="const QMargins &amp;" name="rhs" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qmargins.cpp" line="195" column="4">
                    <para>Returns a <link raw="QMargins" href="qmargins.html" type="class">QMargins</link> object that is formed by adding <argument>lhs</argument> to <argument>rhs</argument>.</para>
                    <see-also>
                        <link raw="QMargins::operator+=()" href="qmargins.html#operator-2b-eq" type="function">QMargins::operator+=()</link>
                        <link raw="QMargins::operator-=()" href="qmargins.html#operator--eq" type="function">QMargins::operator-=()</link>
                    </see-also>
                </description>
            </function>
            <function name="operator+" fullname="QMargins::operator+" href="qmargins.html#operator-2b-3" status="active" access="public" location="qmargins.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qmargins.h" lineno="267" related="true" since="5.3" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QMargins" signature="QMargins operator+(const QMargins &amp;margins)">
                <parameter type="const QMargins &amp;" name="margins" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qmargins.cpp" line="295" column="4">
                    <para>Returns a QMargin object that is formed from all components of <argument>margins</argument>.</para>
                </description>
            </function>
            <function name="operator+" fullname="QMarginsF::operator+" href="qmarginsf.html#operator-2b" status="active" access="public" location="qmargins.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qmargins.h" lineno="385" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QMarginsF" signature="QMarginsF operator+(const QMarginsF &amp;lhs, const QMarginsF &amp;rhs)">
                <parameter type="const QMarginsF &amp;" name="lhs" default=""/>
                <parameter type="const QMarginsF &amp;" name="rhs" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qmargins.cpp" line="570" column="4">
                    <para>Returns a <link raw="QMarginsF" href="qmarginsf.html" type="class">QMarginsF</link> object that is the sum of the given margins, <argument>lhs</argument> and <argument>rhs</argument>; each component is added separately.</para>
                    <see-also>
                        <link raw="QMarginsF::operator+=()" href="qmarginsf.html#operator-2b-eq" type="function">QMarginsF::operator+=()</link>
                        <link raw="QMarginsF::operator-=()" href="qmarginsf.html#operator--eq" type="function">QMarginsF::operator-=()</link>
                    </see-also>
                </description>
            </function>
            <function name="operator+" fullname="QMarginsF::operator+" href="qmarginsf.html#operator-2b-1" status="active" access="public" location="qmargins.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qmargins.h" lineno="397" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QMarginsF" signature="QMarginsF operator+(const QMarginsF &amp;lhs, qreal rhs)">
                <parameter type="const QMarginsF &amp;" name="lhs" default=""/>
                <parameter type="qreal" name="rhs" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qmargins.cpp" line="590" column="4">
                    <para>Returns a <link raw="QMarginsF" href="qmarginsf.html" type="class">QMarginsF</link> object that is formed by adding <argument>rhs</argument> to <argument>lhs</argument>.</para>
                    <see-also>
                        <link raw="QMarginsF::operator+=()" href="qmarginsf.html#operator-2b-eq" type="function">QMarginsF::operator+=()</link>
                        <link raw="QMarginsF::operator-=()" href="qmarginsf.html#operator--eq" type="function">QMarginsF::operator-=()</link>
                    </see-also>
                </description>
            </function>
            <function name="operator+" fullname="QMarginsF::operator+" href="qmarginsf.html#operator-2b-2" status="active" access="public" location="qmargins.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qmargins.h" lineno="403" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QMarginsF" signature="QMarginsF operator+(qreal lhs, const QMarginsF &amp;rhs)">
                <parameter type="qreal" name="lhs" default=""/>
                <parameter type="const QMarginsF &amp;" name="rhs" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qmargins.cpp" line="600" column="4">
                    <para>Returns a <link raw="QMarginsF" href="qmarginsf.html" type="class">QMarginsF</link> object that is formed by adding <argument>lhs</argument> to <argument>rhs</argument>.</para>
                    <see-also>
                        <link raw="QMarginsF::operator+=()" href="qmarginsf.html#operator-2b-eq" type="function">QMarginsF::operator+=()</link>
                        <link raw="QMarginsF::operator-=()" href="qmarginsf.html#operator--eq" type="function">QMarginsF::operator-=()</link>
                    </see-also>
                </description>
            </function>
            <function name="operator+" fullname="QMarginsF::operator+" href="qmarginsf.html#operator-2b-3" status="active" access="public" location="qmargins.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qmargins.h" lineno="471" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QMarginsF" signature="QMarginsF operator+(const QMarginsF &amp;margins)">
                <parameter type="const QMarginsF &amp;" name="margins" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qmargins.cpp" line="653" column="4">
                    <para>Returns a QMargin object that is formed from all components of <argument>margins</argument>.</para>
                </description>
            </function>
            <function name="operator+" fullname="QSize::operator+" href="qsize.html#operator-2b" status="active" access="public" location="QtCore\qsize.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qsize.h" lineno="87" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="const QSize" signature="const QSize operator+(const QSize &amp;s1, const QSize &amp;s2)">
                <parameter type="const QSize &amp;" name="s1" default=""/>
                <parameter type="const QSize &amp;" name="s2" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qsize.cpp" line="318" column="4">
                    <para>Returns the sum of <argument>s1</argument> and <argument>s2</argument>; each component is added separately.</para>
                </description>
            </function>
            <function name="operator+" fullname="QSizeF::operator+" href="qsizef.html#operator-2b" status="active" access="public" location="QtCore\qsize.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qsize.h" lineno="251" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="const QSizeF" signature="const QSizeF operator+(const QSizeF &amp;s1, const QSizeF &amp;s2)">
                <parameter type="const QSizeF &amp;" name="s1" default=""/>
                <parameter type="const QSizeF &amp;" name="s2" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qsize.cpp" line="747" column="4">
                    <para>Returns the sum of <argument>s1</argument> and <argument>s2</argument>; each component is added separately.</para>
                </description>
            </function>
            <function name="operator+" fullname="QRect::operator+" href="qrect.html#operator-2b" status="active" access="public" location="QtCore\qrect.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qrect.h" lineno="464" related="true" since="5.1" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QRect" signature="QRect operator+(const QRect &amp;rectangle, const QMargins &amp;margins)">
                <parameter type="const QRect &amp;" name="rectangle" default=""/>
                <parameter type="const QMargins &amp;" name="margins" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qrect.cpp" line="1174" column="4">
                    <para>Returns the <argument>rectangle</argument> grown by the <argument>margins</argument>.</para>
                </description>
            </function>
            <function name="operator+" fullname="QRect::operator+" href="qrect.html#operator-2b-1" status="active" access="public" location="QtCore\qrect.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qrect.h" lineno="470" related="true" since="5.1" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QRect" signature="QRect operator+(const QMargins &amp;margins, const QRect &amp;rectangle)">
                <parameter type="const QMargins &amp;" name="margins" default=""/>
                <parameter type="const QRect &amp;" name="rectangle" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qrect.cpp" line="1183" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the <argument>rectangle</argument> grown by the <argument>margins</argument>.</para>
                </description>
            </function>
            <function name="operator+" fullname="QRectF::operator+" href="qrectf.html#operator-2b" status="active" access="public" location="QtCore\qrect.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qrect.h" lineno="876" related="true" since="5.3" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QRectF" signature="QRectF operator+(const QRectF &amp;lhs, const QMarginsF &amp;rhs)">
                <parameter type="const QRectF &amp;" name="lhs" default=""/>
                <parameter type="const QMarginsF &amp;" name="rhs" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qrect.cpp" line="2407" column="4">
                    <para>Returns the <argument>lhs</argument> rectangle grown by the <argument>rhs</argument> margins.</para>
                </description>
            </function>
            <function name="operator+" fullname="QRectF::operator+" href="qrectf.html#operator-2b-1" status="active" access="public" location="QtCore\qrect.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qrect.h" lineno="882" related="true" since="5.3" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QRectF" signature="QRectF operator+(const QMarginsF &amp;lhs, const QRectF &amp;rhs)">
                <parameter type="const QMarginsF &amp;" name="lhs" default=""/>
                <parameter type="const QRectF &amp;" name="rhs" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qrect.cpp" line="2423" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the <argument>lhs</argument> rectangle grown by the <argument>rhs</argument> margins.</para>
                </description>
            </function>
            <function name="operator+" status="internal" access="private" location="qcore_unix_p.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore/5.13.0/QtCore\private/qcore_unix_p.h" lineno="133" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="timespec" signature="timespec operator+(const timespec &amp;t1, const timespec &amp;t2)">
                <parameter type="const timespec &amp;" name="t1" default=""/>
                <parameter type="const timespec &amp;" name="t2" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator+=" fullname="QByteArray::operator+=" href="qbytearray.html#operator-2b-eq" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="324" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray &amp;" signature="QByteArray &amp; operator+=(const QByteArray &amp;ba)">
                <parameter type="const QByteArray &amp;" name="ba" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1681" column="4">
                    <para>Appends the byte array <argument>ba</argument> onto the end of this byte array and returns a reference to this byte array.</para>
                    <para>Example:</para>
                    <code>QByteArray x(&quot;free&quot;);
QByteArray y(&quot;dom&quot;);
x += y;
// x == &quot;freedom&quot;</code>
                    <para>Note: <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> is an <link raw="implicitly shared" href="implicit-sharing.html#" type="page" page="Implicit Sharing">implicitly shared</link> class. Consequently, if you append to an empty byte array, then the byte array will just share the data held in <argument>ba</argument>. In this case, no copying of data is done, taking <link raw="constant time" href="containers.html#constant-time" type="page" page="Container Classes">constant time</link>. If a shared instance is modified, it will be copied (copy-on-write), taking <link raw="linear time" href="containers.html#linear-time" type="page" page="Container Classes">linear time</link>.</para>
                    <para>If the byte array being appended to is not empty, a deep copy of the data is performed, taking <link raw="linear time" href="containers.html#linear-time" type="page" page="Container Classes">linear time</link>.</para>
                    <para>This operation typically does not suffer from allocation overhead, because <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> preallocates extra space at the end of the data so that it may grow without reallocating for each append operation.</para>
                    <see-also>
                        <link raw="append()" href="qbytearray.html#append" type="function">append()</link>
                        <link raw="prepend()" href="qbytearray.html#prepend" type="function">prepend()</link>
                    </see-also>
                </description>
            </function>
            <function name="operator+=" fullname="QByteArray::operator+=" href="qbytearray.html#operator-2b-eq-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="322" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteArray &amp;" signature="QByteArray &amp; operator+=(char ch)">
                <parameter type="char" name="ch" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1727" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Appends the character <argument>ch</argument> onto the end of this byte array and returns a reference to this byte array.</para>
                </description>
            </function>
            <function name="operator+=" fullname="QByteArray::operator+=" href="qbytearray.html#operator-2b-eq-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="323" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QByteArray &amp;" signature="QByteArray &amp; operator+=(const char *str)">
                <parameter type="const char *" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1719" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Appends the string <argument>str</argument> onto the end of this byte array and returns a reference to this byte array.</para>
                </description>
            </function>
            <function name="operator+=" fullname="QByteArray::operator+=" href="qbytearray.html#operator-2b-eq-3" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="337" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QByteArray &amp;" signature="QByteArray &amp; operator+=(const QString &amp;str)">
                <parameter type="const QString &amp;" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1705" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Appends the string <argument>str</argument> onto the end of this byte array and returns a reference to this byte array. The Unicode data is converted into 8-bit characters using <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link>.</para>
                    <para>You can disable this function by defining <teletype type="highlighted">QT_NO_CAST_TO_ASCII</teletype> when you compile your applications. You then need to call <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link> (or <link raw="QString::toLatin1()" href="qstring.html#toLatin1" type="function">QString::toLatin1()</link> or <link raw="QString::toLocal8Bit()" href="qstring.html#toLocal8Bit" type="function">QString::toLocal8Bit()</link>) explicitly if you want to convert the data to <teletype type="highlighted">const char *</teletype>.</para>
                </description>
            </function>
            <function name="operator&lt;" fullname="QByteArray::operator&lt;" href="qbytearray.html#operator-lt" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="344" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool operator&lt;(const QString &amp;str) const">
                <parameter type="const QString &amp;" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3431" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this byte array is lexically less than string <argument>str</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>The Unicode data is converted into 8-bit characters using <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link>.</para>
                    <para>The comparison is case sensitive.</para>
                    <para>You can disable this operator by defining <teletype type="highlighted">QT_NO_CAST_FROM_ASCII</teletype> when you compile your applications. You then need to call <link raw="QString::fromUtf8()" href="qstring.html#fromUtf8" type="function">QString::fromUtf8()</link>, <link raw="QString::fromLatin1()" href="qstring.html#fromLatin1" type="function">QString::fromLatin1()</link>, or <link raw="QString::fromLocal8Bit()" href="qstring.html#fromLocal8Bit" type="function">QString::fromLocal8Bit()</link> explicitly if you want to convert the byte array to a <link raw="QString" href="qstring.html" type="class">QString</link> before doing the comparison.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QByteArray::operator&lt;&lt;" href="qbytearray.html#operator-lt-lt" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="695" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QByteArray &amp;ba)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QByteArray &amp;" name="ba" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3346" column="4">
                    <para>Writes byte array <argument>ba</argument> to the stream <argument>out</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QString::operator&lt;&lt;" href="qstring.html#operator-lt-lt" status="active" access="public" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1413" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QString &amp;string)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="const QString &amp;" name="string" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qstring.cpp" line="10082" column="4">
                    <para>Writes the given <argument>string</argument> to the specified <argument>stream</argument>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QRegExp::operator&lt;&lt;" href="qregexp.html#operator-lt-lt-1" status="active" access="public" location="QtCore\qregexp.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qregexp.h" lineno="124" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QRegExp &amp;regExp)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QRegExp &amp;" name="regExp" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qregexp.cpp" line="4562" column="4">
                    <para>Writes the regular expression <argument>regExp</argument> to stream <argument>out</argument>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qregexp.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qregexp.h" lineno="129" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QRegExp &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QRegExp &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qobject.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qobject.h" lineno="537" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QObject *)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QObject *" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qvariant.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qvariant.h" lineno="475" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QVariant &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QVariant &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="active" access="public" location="QtCore\qvariant.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qvariant.h" lineno="568" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;s, const QVariant &amp;p)">
                <parameter type="QDataStream &amp;" name="s" default=""/>
                <parameter type="const QVariant &amp;" name="p" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/kernel/qvariant.cpp" line="2611" column="4">
                    <para>Writes a variant <argument>p</argument> to the stream <argument>s</argument>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Format of the QDataStream operators</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="active" access="public" location="QtCore\qvariant.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qvariant.h" lineno="570" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="6" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;s, const QVariant::Type p)">
                <parameter type="QDataStream &amp;" name="s" default=""/>
                <parameter type="const QVariant::Type" name="p" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/kernel/qvariant.cpp" line="2634" column="4">
                    <para>Writes a variant type <argument>p</argument> to the stream <argument>s</argument>.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qvariant.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qvariant.h" lineno="889" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="7" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QVariant::Type )">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QVariant::Type" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="qabstractitemmodel.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qabstractitemmodel.h" lineno="100" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="8" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QModelIndex &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QModelIndex &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="qabstractitemmodel.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qabstractitemmodel.h" lineno="148" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="9" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QPersistentModelIndex &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QPersistentModelIndex &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QBitArray::operator&lt;&lt;" href="qbitarray.html#operator-lt-lt" status="active" access="public" location="QtCore\qbitarray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbitarray.h" lineno="51" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QBitArray &amp;ba)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QBitArray &amp;" name="ba" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbitarray.cpp" line="739" column="4">
                    <para>Writes bit array <argument>ba</argument> to stream <argument>out</argument>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Format of the QDataStream operators</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qbitarray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbitarray.h" lineno="172" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QBitArray &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QBitArray &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qiodevice.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qiodevice.h" lineno="189" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, QIODevice::OpenMode modes)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="QIODevice::OpenMode" name="modes" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qlocale.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qlocale.h" lineno="1143" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;, const QLocale &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="const QLocale &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qlocale.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qlocale.h" lineno="1148" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QLocale &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QLocale &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qtextstream.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qtextstream.h" lineno="230" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="QTextStream &amp;" signature="QTextStream &amp; operator&lt;&lt;(QTextStream &amp;s, QTextStreamFunction f)">
                <parameter type="QTextStream &amp;" name="s" default=""/>
                <parameter type="QTextStreamFunction" name="f" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qtextstream.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qtextstream.h" lineno="233" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="6" type="QTextStream &amp;" signature="QTextStream &amp; operator&lt;&lt;(QTextStream &amp;s, QTextStreamManipulator m)">
                <parameter type="QTextStream &amp;" name="s" default=""/>
                <parameter type="QTextStreamManipulator" name="m" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QDebug::operator&lt;&lt;" href="qdebug.html#operator-lt-lt-7" status="active" access="public" location="QtCore\qdebug.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdebug.h" lineno="239" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="7" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QList&lt;T&gt; &amp;list)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QList&lt;T&gt; &amp;" name="list" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/io/qdebug.cpp" line="716" column="4">
                    <para>Writes the contents of <argument>list</argument> to <argument>debug</argument>. <teletype type="highlighted">T</teletype> needs to support streaming into <link raw="QDebug" href="qdebug.html" type="class">QDebug</link>.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QDebug::operator&lt;&lt;" href="qdebug.html#operator-lt-lt-8" status="active" access="public" location="QtCore\qdebug.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdebug.h" lineno="245" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="8" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QVector&lt;T&gt; &amp;vec)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QVector&lt;T&gt; &amp;" name="vec" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/io/qdebug.cpp" line="733" column="4">
                    <para>Writes the contents of vector <argument>vec</argument> to <argument>debug</argument>. <teletype type="highlighted">T</teletype> needs to support streaming into <link raw="QDebug" href="qdebug.html" type="class">QDebug</link>.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QDebug::operator&lt;&lt;" href="qdebug.html#operator-lt-lt-9" status="active" access="public" location="QtCore\qdebug.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdebug.h" lineno="251" related="true" since="5.7" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="9" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const std::vector&lt;T, Alloc&gt; &amp;vec)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const std::vector&lt;T, Alloc&gt; &amp;" name="vec" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/io/qdebug.cpp" line="741" column="4">
                    <para>Writes the contents of vector <argument>vec</argument> to <argument>debug</argument>. <teletype type="highlighted">T</teletype> needs to support streaming into <link raw="QDebug" href="qdebug.html" type="class">QDebug</link>.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QDebug::operator&lt;&lt;" href="qdebug.html#operator-lt-lt-10" status="active" access="public" location="QtCore\qdebug.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdebug.h" lineno="257" related="true" since="5.7" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="10" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const std::list&lt;T, Alloc&gt; &amp;vec)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const std::list&lt;T, Alloc&gt; &amp;" name="vec" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/io/qdebug.cpp" line="724" column="4">
                    <para>Writes the contents of list <argument>vec</argument> to <argument>debug</argument>. <teletype type="highlighted">T</teletype> needs to support streaming into <link raw="QDebug" href="qdebug.html" type="class">QDebug</link>.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QDebug::operator&lt;&lt;" href="qdebug.html#operator-lt-lt-11" status="active" access="public" location="QtCore\qdebug.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdebug.h" lineno="263" related="true" since="5.7" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="11" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const std::map&lt;Key, T, Compare, Alloc&gt; &amp;map)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const std::map&lt;Key, T, Compare, Alloc&gt; &amp;" name="map" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/io/qdebug.cpp" line="766" column="4">
                    <para>Writes the contents of <argument>map</argument> to <argument>debug</argument>. Both <teletype type="highlighted">Key</teletype> and <teletype type="highlighted">T</teletype> need to support streaming into <link raw="QDebug" href="qdebug.html" type="class">QDebug</link>.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QDebug::operator&lt;&lt;" href="qdebug.html#operator-lt-lt-12" status="active" access="public" location="QtCore\qdebug.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdebug.h" lineno="269" related="true" since="5.7" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="12" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const std::multimap&lt;Key, T, Compare, Alloc&gt; &amp;map)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const std::multimap&lt;Key, T, Compare, Alloc&gt; &amp;" name="map" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/io/qdebug.cpp" line="775" column="4">
                    <para>Writes the contents of <argument>map</argument> to <argument>debug</argument>. Both <teletype type="highlighted">Key</teletype> and <teletype type="highlighted">T</teletype> need to support streaming into <link raw="QDebug" href="qdebug.html" type="class">QDebug</link>.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QDebug::operator&lt;&lt;" href="qdebug.html#operator-lt-lt-13" status="active" access="public" location="QtCore\qdebug.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdebug.h" lineno="275" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="13" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QMap&lt;Key, T&gt; &amp;map)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QMap&lt;Key, T&gt; &amp;" name="map" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/io/qdebug.cpp" line="758" column="4">
                    <para>Writes the contents of <argument>map</argument> to <argument>debug</argument>. Both <teletype type="highlighted">Key</teletype> and <teletype type="highlighted">T</teletype> need to support streaming into <link raw="QDebug" href="qdebug.html" type="class">QDebug</link>.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QDebug::operator&lt;&lt;" href="qdebug.html#operator-lt-lt-14" status="active" access="public" location="QtCore\qdebug.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdebug.h" lineno="289" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="14" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QHash&lt;Key, T&gt; &amp;hash)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QHash&lt;Key, T&gt; &amp;" name="hash" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/io/qdebug.cpp" line="784" column="4">
                    <para>Writes the contents of <argument>hash</argument> to <argument>debug</argument>. Both <teletype type="highlighted">Key</teletype> and <teletype type="highlighted">T</teletype> need to support streaming into <link raw="QDebug" href="qdebug.html" type="class">QDebug</link>.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QDebug::operator&lt;&lt;" href="qdebug.html#operator-lt-lt-15" status="active" access="public" location="QtCore\qdebug.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdebug.h" lineno="302" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="15" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QPair&lt;T1, T2&gt; &amp;pair)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QPair&lt;T1, T2&gt; &amp;" name="pair" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/io/qdebug.cpp" line="792" column="4">
                    <para>Writes the contents of <argument>pair</argument> to <argument>debug</argument>. Both <teletype type="highlighted">T1</teletype> and <teletype type="highlighted">T2</teletype> need to support streaming into <link raw="QDebug" href="qdebug.html" type="class">QDebug</link>.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qdebug.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdebug.h" lineno="311" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="16" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const std::pair&lt;T1, T2&gt; &amp;pair)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const std::pair&lt;T1, T2&gt; &amp;" name="pair" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QDebug::operator&lt;&lt;" href="qdebug.html#operator-lt-lt-17" status="active" access="public" location="QtCore\qdebug.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdebug.h" lineno="320" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="17" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QSet&lt;T&gt; &amp;set)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QSet&lt;T&gt; &amp;" name="set" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/io/qdebug.cpp" line="750" column="4">
                    <para>Writes the contents of <argument>set</argument> to <argument>debug</argument>. <teletype type="highlighted">T</teletype> needs to support streaming into <link raw="QDebug" href="qdebug.html" type="class">QDebug</link>.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qdebug.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdebug.h" lineno="326" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="18" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QContiguousCache&lt;T&gt; &amp;cache)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QContiguousCache&lt;T&gt; &amp;" name="cache" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QSharedPointer::operator&lt;&lt;" href="qsharedpointer.html#operator-lt-lt" status="active" access="public" location="QtCore\qdebug.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdebug.h" lineno="341" related="true" since="5.7" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QSharedPointer&lt;T&gt; &amp;ptr)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QSharedPointer&lt;T&gt; &amp;" name="ptr" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/io/qdebug.cpp" line="808" column="4">
                    <para>Writes the pointer tracked by <argument>ptr</argument> into the debug object <argument>debug</argument> for debugging purposes.</para>
                    <see-also>
                        <link raw="Debugging Techniques" href="../qtdoc/debug.html#" type="page" page="Debugging Techniques">Debugging Techniques</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QDebug::operator&lt;&lt;" href="qdebug.html#operator-lt-lt-1" status="active" access="public" location="QtCore\qdebug.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdebug.h" lineno="421" related="true" since="4.7" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QFlags&lt;T&gt; &amp;flags)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QFlags&lt;T&gt; &amp;" name="flags" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/io/qdebug.cpp" line="800" column="4">
                    <para>Writes <argument>flags</argument> to <argument>debug</argument>.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QDate::operator&lt;&lt;" href="qdate.html#operator-lt-lt" status="active" access="public" location="QtCore\qdatetime.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatetime.h" lineno="148" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QDate &amp;date)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QDate &amp;" name="date" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qdatetime.cpp" line="5119" column="4">
                    <para>Writes the <argument>date</argument> to stream <argument>out</argument>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QTime::operator&lt;&lt;" href="qtime.html#operator-lt-lt" status="active" access="public" location="QtCore\qdatetime.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatetime.h" lineno="212" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QTime &amp;time)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QTime &amp;" name="time" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qdatetime.cpp" line="5159" column="4">
                    <para>Writes <argument>time</argument> to stream <argument>out</argument>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QDateTime::operator&lt;&lt;" href="qdatetime.html#operator-lt-lt" status="active" access="public" location="QtCore\qdatetime.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatetime.h" lineno="385" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QDateTime &amp;dateTime)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QDateTime &amp;" name="dateTime" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qdatetime.cpp" line="5198" column="4">
                    <para>Writes <argument>dateTime</argument> to the <argument>out</argument> stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qdatetime.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatetime.h" lineno="390" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QDateTime &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QDateTime &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qdatetime.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatetime.h" lineno="405" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QDate &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QDate &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qdatetime.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatetime.h" lineno="406" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QTime &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QTime &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qcborcommon.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qcborcommon.h" lineno="131" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , QCborSimpleType st)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="QCborSimpleType" name="st" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qcborcommon.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qcborcommon.h" lineno="132" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , QCborKnownTags tg)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="QCborKnownTags" name="tg" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qcborcommon.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qcborcommon.h" lineno="133" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="6" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , QCborTag tg)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="QCborTag" name="tg" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qcborcommon.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qcborcommon.h" lineno="137" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="7" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;ds, QCborSimpleType st)">
                <parameter type="QDataStream &amp;" name="ds" default=""/>
                <parameter type="QCborSimpleType" name="st" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QRegularExpression::operator&lt;&lt;" href="qregularexpression.html#operator-lt-lt" status="active" access="public" location="QtCore\qregularexpression.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qregularexpression.h" lineno="171" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QRegularExpression &amp;re)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QRegularExpression &amp;" name="re" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qregularexpression.cpp" line="2674" column="4">
                    <para>Writes the regular expression <argument>re</argument> to stream <argument>out</argument>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QRegularExpression::operator&lt;&lt;" href="qregularexpression.html#operator-lt-lt-1" status="active" access="public" location="QtCore\qregularexpression.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qregularexpression.h" lineno="176" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QRegularExpression &amp;re)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QRegularExpression &amp;" name="re" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qregularexpression.cpp" line="2706" column="4">
                    <para>Writes the regular expression <argument>re</argument> into the debug object <argument>debug</argument> for debugging purposes.</para>
                    <see-also>
                        <link raw="Debugging Techniques" href="../qtdoc/debug.html#" type="page" page="Debugging Techniques">Debugging Techniques</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QRegularExpression::operator&lt;&lt;" href="qregularexpression.html#operator-lt-lt-2" status="active" access="public" location="QtCore\qregularexpression.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qregularexpression.h" lineno="177" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, QRegularExpression::PatternOptions patternOptions)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="QRegularExpression::PatternOptions" name="patternOptions" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qregularexpression.cpp" line="2721" column="4">
                    <para>Writes the pattern options <argument>patternOptions</argument> into the debug object <argument>debug</argument> for debugging purposes.</para>
                    <see-also>
                        <link raw="Debugging Techniques" href="../qtdoc/debug.html#" type="page" page="Debugging Techniques">Debugging Techniques</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QRegularExpressionMatch::operator&lt;&lt;" href="qregularexpressionmatch.html#operator-lt-lt" status="active" access="public" location="QtCore\qregularexpression.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qregularexpression.h" lineno="248" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QRegularExpressionMatch &amp;match)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QRegularExpressionMatch &amp;" name="match" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qregularexpression.cpp" line="2766" column="4">
                    <para>Writes the match object <argument>match</argument> into the debug object <argument>debug</argument> for debugging purposes.</para>
                    <see-also>
                        <link raw="Debugging Techniques" href="../qtdoc/debug.html#" type="page" page="Debugging Techniques">Debugging Techniques</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QUrl::operator&lt;&lt;" href="qurl.html#operator-lt-lt" status="active" access="public" location="QtCore\qurl.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qurl.h" lineno="410" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QUrl &amp;url)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QUrl &amp;" name="url" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/io/qurl.cpp" line="3943" column="4">
                    <para>Writes url <argument>url</argument> to the stream <argument>out</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Format of the QDataStream operators</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qurl.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qurl.h" lineno="415" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QUrl &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QUrl &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QUuid::operator&lt;&lt;" href="quuid.html#operator-lt-lt" status="active" access="public" location="QtCore\quuid.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\quuid.h" lineno="238" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;s, const QUuid &amp;id)">
                <parameter type="QDataStream &amp;" name="s" default=""/>
                <parameter type="const QUuid &amp;" name="id" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/plugin/quuid.cpp" line="796" column="4">
                    <para>Writes the UUID <argument>id</argument> to the data stream <argument>s</argument>.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QUuid::operator&lt;&lt;" href="quuid.html#operator-lt-lt-1" status="active" access="public" location="QtCore\quuid.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\quuid.h" lineno="243" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug dbg, const QUuid &amp;id)">
                <parameter type="QDebug" name="dbg" default=""/>
                <parameter type="const QUuid &amp;" name="id" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/plugin/quuid.cpp" line="1075" column="4">
                    <para>Writes the UUID <argument>id</argument> to the output stream for debugging information <argument>dbg</argument>.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qcborvalue.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qcborvalue.h" lineno="468" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QCborValue &amp;v)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QCborValue &amp;" name="v" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qcborvalue.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qcborvalue.h" lineno="472" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;, const QCborValue &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="const QCborValue &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qcborarray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qcborarray.h" lineno="300" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QCborArray &amp;a)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QCborArray &amp;" name="a" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qcborarray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qcborarray.h" lineno="304" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;, const QCborArray &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="const QCborArray &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qcbormap.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qcbormap.h" lineno="356" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="6" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QCborMap &amp;m)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QCborMap &amp;" name="m" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qcbormap.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qcbormap.h" lineno="360" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="7" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;, const QCborMap &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="const QCborMap &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qcoreapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qcoreapplication.h" lineno="264" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="8" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const MSG &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const MSG &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qdatastream.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatastream.h" lineno="372" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="9" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;s, QFlags&lt;Enum&gt; e)">
                <parameter type="QDataStream &amp;" name="s" default=""/>
                <parameter type="QFlags&lt;Enum&gt;" name="e" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QList::operator&lt;&lt;" href="qlist.html#operator-lt-lt-10" status="active" access="public" location="QtCore\qdatastream.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatastream.h" lineno="386" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="10" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QList&lt;T&gt; &amp;list)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QList&lt;T&gt; &amp;" name="list" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qlist.cpp" line="1979" column="4">
                    <para>Writes the list <argument>list</argument> to stream <argument>out</argument>.</para>
                    <para>This function requires the value type to implement <teletype type="highlighted">operator&lt;&lt;()</teletype>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Format of the QDataStream operators</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QLinkedList::operator&lt;&lt;" href="qlinkedlist.html#operator-lt-lt-11" status="active" access="public" location="QtCore\qdatastream.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatastream.h" lineno="398" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="11" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QLinkedList&lt;T&gt; &amp;list)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QLinkedList&lt;T&gt; &amp;" name="list" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qlinkedlist.cpp" line="1166" column="4">
                    <para>Writes the linked list <argument>list</argument> to stream <argument>out</argument>.</para>
                    <para>This function requires the value type to implement <teletype type="highlighted">operator&lt;&lt;()</teletype>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Format of the QDataStream operators</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QVector::operator&lt;&lt;" href="qvector.html#operator-lt-lt-12" status="active" access="public" location="QtCore\qdatastream.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatastream.h" lineno="410" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="12" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QVector&lt;T&gt; &amp;vector)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QVector&lt;T&gt; &amp;" name="vector" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qvector.qdoc" line="1347" column="4">
                    <para>Writes the vector <argument>vector</argument> to stream <argument>out</argument>.</para>
                    <para>This function requires the value type to implement <teletype type="highlighted">operator&lt;&lt;()</teletype>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Format of the QDataStream operators</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QSet::operator&lt;&lt;" href="qset.html#operator-lt-lt-13" status="active" access="public" location="QtCore\qdatastream.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatastream.h" lineno="422" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="13" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QSet&lt;T&gt; &amp;set)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QSet&lt;T&gt; &amp;" name="set" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qset.qdoc" line="1024" column="4">
                    <para>Writes the <argument>set</argument> to stream <argument>out</argument>.</para>
                    <para>This function requires the value type to implement <teletype type="highlighted">operator&lt;&lt;()</teletype>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Format of the QDataStream operators</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QHash::operator&lt;&lt;" href="qhash.html#operator-lt-lt-14" status="active" access="public" location="QtCore\qdatastream.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatastream.h" lineno="434" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="14" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QHash&lt;Key, T&gt; &amp;hash)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QHash&lt;Key, T&gt; &amp;" name="hash" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qhash.cpp" line="2488" column="4">
                    <para>Writes the hash <argument>hash</argument> to stream <argument>out</argument>.</para>
                    <para>This function requires the key and value types to implement <teletype type="highlighted">operator&lt;&lt;()</teletype>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qfileinfo.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qfileinfo.h" lineno="165" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="15" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QFileInfo &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QFileInfo &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="qdir.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qdir.h" lineno="245" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="16" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, QDir::Filters filters)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="QDir::Filters" name="filters" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="qdir.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qdir.h" lineno="246" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="17" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QDir &amp;dir)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QDir &amp;" name="dir" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QPoint::operator&lt;&lt;" href="qpoint.html#operator-lt-lt" status="active" access="public" location="QtCore\qpoint.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qpoint.h" lineno="112" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QPoint &amp;point)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="const QPoint &amp;" name="point" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qpoint.cpp" line="389" column="4">
                    <para>Writes the given <argument>point</argument> to the given <argument>stream</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qpoint.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qpoint.h" lineno="212" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QPoint &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QPoint &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QPointF::operator&lt;&lt;" href="qpointf.html#operator-lt-lt" status="active" access="public" location="QtCore\qpoint.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qpoint.h" lineno="277" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QPointF &amp;point)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="const QPointF &amp;" name="point" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qpoint.cpp" line="753" column="4">
                    <para>Writes the given <argument>point</argument> to the given <argument>stream</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qpoint.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qpoint.h" lineno="413" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug d, const QPointF &amp;p)">
                <parameter type="QDebug" name="d" default=""/>
                <parameter type="const QPointF &amp;" name="p" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="qeasingcurve.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qeasingcurve.h" lineno="121" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QEasingCurve &amp;item)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QEasingCurve &amp;" name="item" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QEasingCurve::operator&lt;&lt;" href="qeasingcurve.html#operator-lt-lt" status="active" access="public" location="qeasingcurve.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qeasingcurve.h" lineno="124" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QEasingCurve &amp;easing)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="const QEasingCurve &amp;" name="easing" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qeasingcurve.cpp" line="1465" column="4">
                    <para>Writes the given <argument>easing</argument> curve to the given <argument>stream</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qitemselectionmodel.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qitemselectionmodel.h" lineno="268" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QItemSelectionRange &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QItemSelectionRange &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qjsonvalue.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qjsonvalue.h" lineno="154" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QJsonValue &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QJsonValue &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qjsonvalue.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qjsonvalue.h" lineno="155" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;, const QJsonValue &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="const QJsonValue &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qjsonarray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qjsonarray.h" lineno="255" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QJsonArray &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QJsonArray &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qjsonarray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qjsonarray.h" lineno="277" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;, const QJsonArray &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="const QJsonArray &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qjsondocument.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qjsondocument.h" lineno="162" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="6" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QJsonDocument &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QJsonDocument &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qjsondocument.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qjsondocument.h" lineno="176" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="7" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;, const QJsonDocument &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="const QJsonDocument &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="qjsonobject.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qjsonobject.h" lineno="246" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="8" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QJsonObject &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QJsonObject &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="qjsonobject.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qjsonobject.h" lineno="272" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="9" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;, const QJsonObject &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="const QJsonObject &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QVersionNumber::operator&lt;&lt;" href="qversionnumber.html#operator-lt-lt" status="active" access="public" location="QtCore\qversionnumber.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qversionnumber.h" lineno="57" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QVersionNumber &amp;version)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QVersionNumber &amp;" name="version" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qversionnumber.cpp" line="502" column="4">
                    <para>Writes the version number <argument>version</argument> to stream <argument>out</argument>.</para>
                    <para>Note that this has nothing to do with <link raw="QDataStream::version()" href="qdatastream.html#version" type="function">QDataStream::version()</link>.</para>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qversionnumber.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qversionnumber.h" lineno="299" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QVersionNumber &amp;version)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QVersionNumber &amp;" name="version" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qline.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qline.h" lineno="203" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug d, const QLine &amp;p)">
                <parameter type="QDebug" name="d" default=""/>
                <parameter type="const QLine &amp;" name="p" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QLine::operator&lt;&lt;" href="qline.html#operator-lt-lt" status="active" access="public" location="QtCore\qline.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qline.h" lineno="207" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QLine &amp;line)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="const QLine &amp;" name="line" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qline.cpp" line="277" column="4">
                    <para>Writes the given <argument>line</argument> to the given <argument>stream</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qline.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qline.h" lineno="424" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug d, const QLineF &amp;p)">
                <parameter type="QDebug" name="d" default=""/>
                <parameter type="const QLineF &amp;" name="p" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QLineF::operator&lt;&lt;" href="qlinef.html#operator-lt-lt" status="active" access="public" location="QtCore\qline.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qline.h" lineno="428" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QLineF &amp;line)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="const QLineF &amp;" name="line" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qline.cpp" line="852" column="4">
                    <para>Writes the given <argument>line</argument> to the given <argument>stream</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" fullname="QMargins::operator&lt;&lt;" href="qmargins.html#operator-lt-lt" status="active" access="public" location="qmargins.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qmargins.h" lineno="94" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QMargins &amp;m)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="const QMargins &amp;" name="m" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qmargins.cpp" line="403" column="4">
                    <para>Writes margin <argument>m</argument> to the given <argument>stream</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="qmargins.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qmargins.h" lineno="278" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QMargins &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QMargins &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QMarginsF::operator&lt;&lt;" href="qmarginsf.html#operator-lt-lt" status="active" access="public" location="qmargins.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qmargins.h" lineno="327" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QMarginsF &amp;m)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="const QMarginsF &amp;" name="m" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qmargins.cpp" line="738" column="4">
                    <para>Writes margin <argument>m</argument> to the given <argument>stream</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="qmargins.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qmargins.h" lineno="487" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QMarginsF &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QMarginsF &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qmimetype.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qmimetype.h" lineno="133" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QMimeType &amp;mime)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QMimeType &amp;" name="mime" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qoperatingsystemversion.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qoperatingsystemversion.h" lineno="153" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QOperatingSystemVersion &amp;ov)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QOperatingSystemVersion &amp;" name="ov" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QSize::operator&lt;&lt;" href="qsize.html#operator-lt-lt" status="active" access="public" location="QtCore\qsize.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qsize.h" lineno="108" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QSize &amp;size)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="const QSize &amp;" name="size" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qsize.cpp" line="399" column="4">
                    <para>Writes the given <argument>size</argument> to the given <argument>stream</argument>, and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qsize.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qsize.h" lineno="211" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QSize &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QSize &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QSizeF::operator&lt;&lt;" href="qsizef.html#operator-lt-lt" status="active" access="public" location="QtCore\qsize.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qsize.h" lineno="276" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QSizeF &amp;size)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="const QSizeF &amp;" name="size" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qsize.cpp" line="831" column="4">
                    <para>Writes the given <argument>size</argument> to the given <argument>stream</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qsize.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qsize.h" lineno="386" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QSizeF &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QSizeF &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QRect::operator&lt;&lt;" href="qrect.html#operator-lt-lt" status="active" access="public" location="QtCore\qrect.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qrect.h" lineno="176" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QRect &amp;rectangle)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="const QRect &amp;" name="rectangle" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qrect.cpp" line="1247" column="4">
                    <para>Writes the given <argument>rectangle</argument> to the given <argument>stream</argument>, and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qrect.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qrect.h" lineno="507" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QRect &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QRect &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" fullname="QRectF::operator&lt;&lt;" href="qrectf.html#operator-lt-lt" status="active" access="public" location="QtCore\qrect.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qrect.h" lineno="636" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QRectF &amp;rectangle)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="const QRectF &amp;" name="rectangle" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qrect.cpp" line="2472" column="4">
                    <para>Writes the <argument>rectangle</argument> to the <argument>stream</argument>, and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qrect.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qrect.h" lineno="919" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QRectF &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QRectF &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qstorageinfo.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstorageinfo.h" lineno="99" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug , const QStorageInfo &amp;)">
                <parameter type="QDebug" name="" default=""/>
                <parameter type="const QStorageInfo &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qtimezone.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qtimezone.h" lineno="168" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;ds, const QTimeZone &amp;tz)">
                <parameter type="QDataStream &amp;" name="ds" default=""/>
                <parameter type="const QTimeZone &amp;" name="tz" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="QtCore\qtimezone.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qtimezone.h" lineno="185" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug dbg, const QTimeZone &amp;tz)">
                <parameter type="QDebug" name="dbg" default=""/>
                <parameter type="const QTimeZone &amp;" name="tz" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="qcore_mac_p.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore/5.13.0/QtCore\private/qcore_mac_p.h" lineno="162" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const int *pool)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const int *" name="pool" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;&lt;" status="internal" access="private" location="qppsattribute_p.h" filepath="C:/Qt/5.13.0/Src/qtbase/src/corelib/kernel/qppsattribute_p.h" lineno="133" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="6" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug dbg, const QPpsAttribute &amp;attribute)">
                <parameter type="QDebug" name="dbg" default=""/>
                <parameter type="const QPpsAttribute &amp;" name="attribute" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&lt;=" fullname="QByteArray::operator&lt;=" href="qbytearray.html#operator-lt-eq" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="346" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool operator&lt;=(const QString &amp;str) const">
                <parameter type="const QString &amp;" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3465" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this byte array is lexically less than or equal to string <argument>str</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>The Unicode data is converted into 8-bit characters using <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link>.</para>
                    <para>The comparison is case sensitive.</para>
                    <para>You can disable this operator by defining <teletype type="highlighted">QT_NO_CAST_FROM_ASCII</teletype> when you compile your applications. You then need to call <link raw="QString::fromUtf8()" href="qstring.html#fromUtf8" type="function">QString::fromUtf8()</link>, <link raw="QString::fromLatin1()" href="qstring.html#fromLatin1" type="function">QString::fromLatin1()</link>, or <link raw="QString::fromLocal8Bit()" href="qstring.html#fromLocal8Bit" type="function">QString::fromLocal8Bit()</link> explicitly if you want to convert the byte array to a <link raw="QString" href="qstring.html" type="class">QString</link> before doing the comparison.</para>
                </description>
            </function>
            <function name="operator=" fullname="QByteArray::operator=" href="qbytearray.html#operator-eq" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="178" meta="copy-assign" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray &amp;" signature="QByteArray &amp; operator=(const QByteArray &amp;other)">
                <parameter type="const QByteArray &amp;" name="other" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1280" column="4">
                    <para>Assigns <argument>other</argument> to this byte array and returns a reference to this byte array.</para>
                </description>
            </function>
            <function name="operator=" fullname="QByteArray::operator=" href="qbytearray.html#operator-eq-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="179" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteArray &amp;" signature="QByteArray &amp; operator=(const char *str)">
                <parameter type="const char *" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1294" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Assigns <argument>str</argument> to this byte array.</para>
                </description>
            </function>
            <function name="operator=" fullname="QByteArray::operator=" href="qbytearray.html#operator-eq-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="182" since="5.2" meta="move-assign" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QByteArray &amp;" signature="QByteArray &amp; operator=(QByteArray &amp;&amp;other)">
                <parameter type="QByteArray &amp;&amp;" name="other" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1324" column="4">
                    <para>Move-assigns <argument>other</argument> to this <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> instance.</para>
                </description>
            </function>
            <function name="operator==" fullname="QByteArray::operator==" href="qbytearray.html#operator-eq-eq" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="342" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool operator==(const QString &amp;str) const">
                <parameter type="const QString &amp;" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3397" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this byte array is equal to string <argument>str</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>The Unicode data is converted into 8-bit characters using <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link>.</para>
                    <para>The comparison is case sensitive.</para>
                    <para>You can disable this operator by defining <teletype type="highlighted">QT_NO_CAST_FROM_ASCII</teletype> when you compile your applications. You then need to call <link raw="QString::fromUtf8()" href="qstring.html#fromUtf8" type="function">QString::fromUtf8()</link>, <link raw="QString::fromLatin1()" href="qstring.html#fromLatin1" type="function">QString::fromLatin1()</link>, or <link raw="QString::fromLocal8Bit()" href="qstring.html#fromLocal8Bit" type="function">QString::fromLocal8Bit()</link> explicitly if you want to convert the byte array to a <link raw="QString" href="qstring.html" type="class">QString</link> before doing the comparison.</para>
                </description>
            </function>
            <function name="operator&gt;" fullname="QByteArray::operator&gt;" href="qbytearray.html#operator-gt" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="345" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool operator&gt;(const QString &amp;str) const">
                <parameter type="const QString &amp;" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3448" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this byte array is lexically greater than string <argument>str</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>The Unicode data is converted into 8-bit characters using <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link>.</para>
                    <para>The comparison is case sensitive.</para>
                    <para>You can disable this operator by defining <teletype type="highlighted">QT_NO_CAST_FROM_ASCII</teletype> when you compile your applications. You then need to call <link raw="QString::fromUtf8()" href="qstring.html#fromUtf8" type="function">QString::fromUtf8()</link>, <link raw="QString::fromLatin1()" href="qstring.html#fromLatin1" type="function">QString::fromLatin1()</link>, or <link raw="QString::fromLocal8Bit()" href="qstring.html#fromLocal8Bit" type="function">QString::fromLocal8Bit()</link> explicitly if you want to convert the byte array to a <link raw="QString" href="qstring.html" type="class">QString</link> before doing the comparison.</para>
                </description>
            </function>
            <function name="operator&gt;=" fullname="QByteArray::operator&gt;=" href="qbytearray.html#operator-gt-eq" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="347" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool operator&gt;=(const QString &amp;str) const">
                <parameter type="const QString &amp;" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3482" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this byte array is greater than or equal to string <argument>str</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>The Unicode data is converted into 8-bit characters using <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link>.</para>
                    <para>The comparison is case sensitive.</para>
                    <para>You can disable this operator by defining <teletype type="highlighted">QT_NO_CAST_FROM_ASCII</teletype> when you compile your applications. You then need to call <link raw="QString::fromUtf8()" href="qstring.html#fromUtf8" type="function">QString::fromUtf8()</link>, <link raw="QString::fromLatin1()" href="qstring.html#fromLatin1" type="function">QString::fromLatin1()</link>, or <link raw="QString::fromLocal8Bit()" href="qstring.html#fromLocal8Bit" type="function">QString::fromLocal8Bit()</link> explicitly if you want to convert the byte array to a <link raw="QString" href="qstring.html" type="class">QString</link> before doing the comparison.</para>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QByteArray::operator&gt;&gt;" href="qbytearray.html#operator-gt-gt" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="696" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QByteArray &amp;ba)">
                <parameter type="QDataStream &amp;" name="in" default=""/>
                <parameter type="QByteArray &amp;" name="ba" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3363" column="4">
                    <para>Reads a byte array into <argument>ba</argument> from the stream <argument>in</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QString::operator&gt;&gt;" href="qstring.html#operator-gt-gt" status="active" access="public" location="QtCore\qstring.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qstring.h" lineno="1414" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QString &amp;string)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="QString &amp;" name="string" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qstring.cpp" line="10112" column="4">
                    <para>Reads a string from the specified <argument>stream</argument> into the given <argument>string</argument>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QRegExp::operator&gt;&gt;" href="qregexp.html#operator-gt-gt-1" status="active" access="public" location="QtCore\qregexp.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qregexp.h" lineno="125" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QRegExp &amp;regExp)">
                <parameter type="QDataStream &amp;" name="in" default=""/>
                <parameter type="QRegExp &amp;" name="regExp" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qregexp.cpp" line="4576" column="4">
                    <para>Reads a regular expression from stream <argument>in</argument> into <argument>regExp</argument>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" status="active" access="public" location="QtCore\qvariant.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qvariant.h" lineno="567" since="4.4" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;s, QVariant &amp;p)">
                <parameter type="QDataStream &amp;" name="s" default=""/>
                <parameter type="QVariant &amp;" name="p" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/kernel/qvariant.cpp" line="2598" column="4">
                    <para>Reads a variant <argument>p</argument> from the stream <argument>s</argument>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Format of the QDataStream operators</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" status="active" access="public" location="QtCore\qvariant.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qvariant.h" lineno="569" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;s, QVariant::Type &amp;p)">
                <parameter type="QDataStream &amp;" name="s" default=""/>
                <parameter type="QVariant::Type &amp;" name="p" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/kernel/qvariant.cpp" line="2622" column="4">
                    <para>Reads a variant type <argument>p</argument> in enum representation from the stream <argument>s</argument>.</para>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QBitArray::operator&gt;&gt;" href="qbitarray.html#operator-gt-gt" status="active" access="public" location="QtCore\qbitarray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbitarray.h" lineno="52" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QBitArray &amp;ba)">
                <parameter type="QDataStream &amp;" name="in" default=""/>
                <parameter type="QBitArray &amp;" name="ba" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbitarray.cpp" line="756" column="4">
                    <para>Reads a bit array into <argument>ba</argument> from stream <argument>in</argument>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Format of the QDataStream operators</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" status="internal" access="private" location="QtCore\qlocale.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qlocale.h" lineno="1144" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;, QLocale &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="QLocale &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&gt;&gt;" status="internal" access="private" location="QtCore\qtextstream.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qtextstream.h" lineno="227" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QTextStream &amp;" signature="QTextStream &amp; operator&gt;&gt;(QTextStream &amp;s, QTextStreamFunction f)">
                <parameter type="QTextStream &amp;" name="s" default=""/>
                <parameter type="QTextStreamFunction" name="f" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&gt;&gt;" fullname="QDate::operator&gt;&gt;" href="qdate.html#operator-gt-gt-1" status="active" access="public" location="QtCore\qdatetime.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatetime.h" lineno="149" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QDate &amp;date)">
                <parameter type="QDataStream &amp;" name="in" default=""/>
                <parameter type="QDate &amp;" name="date" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qdatetime.cpp" line="5135" column="4">
                    <para>Reads a date from stream <argument>in</argument> into the <argument>date</argument>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QTime::operator&gt;&gt;" href="qtime.html#operator-gt-gt" status="active" access="public" location="QtCore\qdatetime.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatetime.h" lineno="213" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QTime &amp;time)">
                <parameter type="QDataStream &amp;" name="in" default=""/>
                <parameter type="QTime &amp;" name="time" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qdatetime.cpp" line="5177" column="4">
                    <para>Reads a time from stream <argument>in</argument> into the given <argument>time</argument>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QDateTime::operator&gt;&gt;" href="qdatetime.html#operator-gt-gt" status="active" access="public" location="QtCore\qdatetime.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatetime.h" lineno="386" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QDateTime &amp;dateTime)">
                <parameter type="QDataStream &amp;" name="in" default=""/>
                <parameter type="QDateTime &amp;" name="dateTime" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qdatetime.cpp" line="5261" column="4">
                    <para>Reads a datetime from the stream <argument>in</argument> into <argument>dateTime</argument>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" status="internal" access="private" location="QtCore\qcborcommon.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qcborcommon.h" lineno="138" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;ds, QCborSimpleType &amp;st)">
                <parameter type="QDataStream &amp;" name="ds" default=""/>
                <parameter type="QCborSimpleType &amp;" name="st" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&gt;&gt;" fullname="QRegularExpression::operator&gt;&gt;" href="qregularexpression.html#operator-gt-gt" status="active" access="public" location="QtCore\qregularexpression.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qregularexpression.h" lineno="172" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QRegularExpression &amp;re)">
                <parameter type="QDataStream &amp;" name="in" default=""/>
                <parameter type="QRegularExpression &amp;" name="re" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qregularexpression.cpp" line="2687" column="4">
                    <para>Reads a regular expression from stream <argument>in</argument> into <argument>re</argument>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QUrl::operator&gt;&gt;" href="qurl.html#operator-gt-gt" status="active" access="public" location="QtCore\qurl.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qurl.h" lineno="411" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QUrl &amp;url)">
                <parameter type="QDataStream &amp;" name="in" default=""/>
                <parameter type="QUrl &amp;" name="url" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/io/qurl.cpp" line="3959" column="4">
                    <para>Reads a url into <argument>url</argument> from the stream <argument>in</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Format of the QDataStream operators</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QUuid::operator&gt;&gt;" href="quuid.html#operator-gt-gt" status="active" access="public" location="QtCore\quuid.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\quuid.h" lineno="239" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;s, QUuid &amp;id)">
                <parameter type="QDataStream &amp;" name="s" default=""/>
                <parameter type="QUuid &amp;" name="id" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/plugin/quuid.cpp" line="829" column="4">
                    <para>Reads a UUID from the stream <argument>s</argument> into <argument>id</argument>.</para>
                </description>
            </function>
            <function name="operator&gt;&gt;" status="internal" access="private" location="QtCore\qcborvalue.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qcborvalue.h" lineno="473" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;, QCborValue &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="QCborValue &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&gt;&gt;" status="internal" access="private" location="QtCore\qcborarray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qcborarray.h" lineno="305" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;, QCborArray &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="QCborArray &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&gt;&gt;" status="internal" access="private" location="QtCore\qcbormap.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qcbormap.h" lineno="361" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;, QCborMap &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="QCborMap &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&gt;&gt;" status="internal" access="private" location="QtCore\qdatastream.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatastream.h" lineno="376" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;s, QFlags&lt;Enum&gt; &amp;e)">
                <parameter type="QDataStream &amp;" name="s" default=""/>
                <parameter type="QFlags&lt;Enum&gt; &amp;" name="e" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&gt;&gt;" fullname="QLinkedList::operator&gt;&gt;" href="qlinkedlist.html#operator-gt-gt-1" status="active" access="public" location="QtCore\qdatastream.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatastream.h" lineno="392" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QLinkedList&lt;T&gt; &amp;list)">
                <parameter type="QDataStream &amp;" name="in" default=""/>
                <parameter type="QLinkedList&lt;T&gt; &amp;" name="list" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qlinkedlist.cpp" line="1177" column="4">
                    <para>Reads a linked list from stream <argument>in</argument> into <argument>list</argument>.</para>
                    <para>This function requires the value type to implement <teletype type="highlighted">operator&gt;&gt;()</teletype>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Format of the QDataStream operators</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QVector::operator&gt;&gt;" href="qvector.html#operator-gt-gt-2" status="active" access="public" location="QtCore\qdatastream.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatastream.h" lineno="404" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QVector&lt;T&gt; &amp;vector)">
                <parameter type="QDataStream &amp;" name="in" default=""/>
                <parameter type="QVector&lt;T&gt; &amp;" name="vector" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qvector.qdoc" line="1357" column="4">
                    <para>Reads a vector from stream <argument>in</argument> into <argument>vector</argument>.</para>
                    <para>This function requires the value type to implement <teletype type="highlighted">operator&gt;&gt;()</teletype>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Format of the QDataStream operators</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QHash::operator&gt;&gt;" href="qhash.html#operator-gt-gt-3" status="active" access="public" location="QtCore\qdatastream.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qdatastream.h" lineno="428" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QHash&lt;Key, T&gt; &amp;hash)">
                <parameter type="QDataStream &amp;" name="in" default=""/>
                <parameter type="QHash&lt;Key, T&gt; &amp;" name="hash" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qhash.cpp" line="2499" column="4">
                    <para>Reads a hash from stream <argument>in</argument> into <argument>hash</argument>.</para>
                    <para>This function requires the key and value types to implement <teletype type="highlighted">operator&gt;&gt;()</teletype>.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QPointF::operator&gt;&gt;" href="qpointf.html#operator-gt-gt-4" status="active" access="public" location="QtCore\qpoint.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qpoint.h" lineno="278" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QPointF &amp;point)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="QPointF &amp;" name="point" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qpoint.cpp" line="769" column="4">
                    <para>Reads a point from the given <argument>stream</argument> into the given <argument>point</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QEasingCurve::operator&gt;&gt;" href="qeasingcurve.html#operator-gt-gt-5" status="active" access="public" location="qeasingcurve.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qeasingcurve.h" lineno="125" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QEasingCurve &amp;easing)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="QEasingCurve &amp;" name="easing" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qeasingcurve.cpp" line="1490" column="4">
                    <para>Reads an easing curve from the given <argument>stream</argument> into the given <argument>easing</argument> curve and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" status="internal" access="private" location="QtCore\qjsonvalue.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qjsonvalue.h" lineno="257" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="6" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;, QJsonValue &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="QJsonValue &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&gt;&gt;" status="internal" access="private" location="QtCore\qjsonarray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qjsonarray.h" lineno="278" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="7" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;, QJsonArray &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="QJsonArray &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&gt;&gt;" status="internal" access="private" location="QtCore\qjsondocument.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qjsondocument.h" lineno="177" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="8" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;, QJsonDocument &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="QJsonDocument &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&gt;&gt;" status="internal" access="private" location="qjsonobject.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qjsonobject.h" lineno="273" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="9" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;, QJsonObject &amp;)">
                <parameter type="QDataStream &amp;" name="" default=""/>
                <parameter type="QJsonObject &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator&gt;&gt;" fullname="QVersionNumber::operator&gt;&gt;" href="qversionnumber.html#operator-gt-gt-10" status="active" access="public" location="QtCore\qversionnumber.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qversionnumber.h" lineno="58" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="10" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QVersionNumber &amp;version)">
                <parameter type="QDataStream &amp;" name="in" default=""/>
                <parameter type="QVersionNumber &amp;" name="version" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qversionnumber.cpp" line="517" column="4">
                    <para>Reads a version number from stream <argument>in</argument> and stores it in <argument>version</argument>.</para>
                    <para>Note that this has nothing to do with <link raw="QDataStream::version()" href="qdatastream.html#version" type="function">QDataStream::version()</link>.</para>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QLine::operator&gt;&gt;" href="qline.html#operator-gt-gt-11" status="active" access="public" location="QtCore\qline.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qline.h" lineno="208" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="11" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QLine &amp;line)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="QLine &amp;" name="line" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qline.cpp" line="292" column="4">
                    <para>Reads a line from the given <argument>stream</argument> into the given <argument>line</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QLineF::operator&gt;&gt;" href="qlinef.html#operator-gt-gt-12" status="active" access="public" location="QtCore\qline.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qline.h" lineno="429" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="12" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QLineF &amp;line)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="QLineF &amp;" name="line" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qline.cpp" line="867" column="4">
                    <para>Reads a line from the given <argument>stream</argument> into the given <argument>line</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QMargins::operator&gt;&gt;" href="qmargins.html#operator-gt-gt" status="active" access="public" location="qmargins.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qmargins.h" lineno="95" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QMargins &amp;m)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="QMargins &amp;" name="m" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qmargins.cpp" line="419" column="4">
                    <para>Reads a margin from the given <argument>stream</argument> into margin <argument>m</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QMarginsF::operator&gt;&gt;" href="qmarginsf.html#operator-gt-gt" status="active" access="public" location="qmargins.h" filepath="C:/Qt/5.13.0/mingw73_64/include\QtCore/qmargins.h" lineno="328" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QMarginsF &amp;m)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="QMarginsF &amp;" name="m" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qmargins.cpp" line="754" column="4">
                    <para>Reads a margin from the given <argument>stream</argument> into margin <argument>m</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QSize::operator&gt;&gt;" href="qsize.html#operator-gt-gt" status="active" access="public" location="QtCore\qsize.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qsize.h" lineno="109" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QSize &amp;size)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="QSize &amp;" name="size" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qsize.cpp" line="418" column="4">
                    <para>Reads a size from the given <argument>stream</argument> into the given <argument>size</argument>, and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QSizeF::operator&gt;&gt;" href="qsizef.html#operator-gt-gt" status="active" access="public" location="QtCore\qsize.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qsize.h" lineno="277" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QSizeF &amp;size)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="QSizeF &amp;" name="size" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qsize.cpp" line="847" column="4">
                    <para>Reads a size from the given <argument>stream</argument> into the given <argument>size</argument> and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QRect::operator&gt;&gt;" href="qrect.html#operator-gt-gt" status="active" access="public" location="QtCore\qrect.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qrect.h" lineno="177" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QRect &amp;rectangle)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="QRect &amp;" name="rectangle" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qrect.cpp" line="1268" column="4">
                    <para>Reads a rectangle from the given <argument>stream</argument> into the given <argument>rectangle</argument>, and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" fullname="QRectF::operator&gt;&gt;" href="qrectf.html#operator-gt-gt" status="active" access="public" location="QtCore\qrect.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qrect.h" lineno="637" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QRectF &amp;rectangle)">
                <parameter type="QDataStream &amp;" name="stream" default=""/>
                <parameter type="QRectF &amp;" name="rectangle" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qrect.cpp" line="2489" column="4">
                    <para>Reads a <argument>rectangle</argument> from the <argument>stream</argument>, and returns a reference to the stream.</para>
                    <see-also>
                        <link raw="Serializing Qt Data Types" href="datastreamformat.html#" type="page" page="Serializing Qt Data Types">Serializing Qt Data Types</link>
                    </see-also>
                </description>
            </function>
            <function name="operator&gt;&gt;" status="internal" access="private" location="QtCore\qtimezone.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qtimezone.h" lineno="181" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;ds, QTimeZone &amp;tz)">
                <parameter type="QDataStream &amp;" name="ds" default=""/>
                <parameter type="QTimeZone &amp;" name="tz" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="operator[]" fullname="QByteArray::operator[]" href="qbytearray.html#operator-5b-5d" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="214" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteRef" signature="QByteRef operator[](int i)">
                <parameter type="int" name="i" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1523" column="4">
                    <para>Returns the byte at index position <argument>i</argument> as a modifiable reference.</para>
                    <para>If an assignment is made beyond the end of the byte array, the array is extended with <link raw="resize()" href="qbytearray.html#resize" type="function">resize()</link> before the assignment takes place.</para>
                    <para>Example:</para>
                    <code>QByteArray ba;
for (int i = 0; i &lt; 10; ++i)
    ba[i] = 'A' + i;
// ba == &quot;ABCDEFGHIJ&quot;</code>
                    <para>The return value is of type <link raw="QByteRef" href="qbyteref.html" type="class">QByteRef</link>, a helper class for <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>. When you get an object of type <link raw="QByteRef" href="qbyteref.html" type="class">QByteRef</link>, you can use it as if it were a char &amp;. If you assign to it, the assignment will apply to the character in the <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> from which you got the reference.</para>
                    <see-also>
                        <link raw="at()" href="qbytearray.html#at" type="function">at()</link>
                    </see-also>
                </description>
            </function>
            <function name="operator[]" fullname="QByteArray::operator[]" href="qbytearray.html#operator-5b-5d-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="212" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="char" signature="char operator[](int i) const">
                <parameter type="int" name="i" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1543" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Same as at(<argument>i</argument>).</para>
                </description>
            </function>
            <function name="operator[]" fullname="QByteArray::operator[]" href="qbytearray.html#operator-5b-5d-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="213" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="2" type="char" signature="char operator[](uint i) const">
                <parameter type="uint" name="i" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1555" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function name="operator[]" fullname="QByteArray::operator[]" href="qbytearray.html#operator-5b-5d-3" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="215" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QByteRef" signature="QByteRef operator[](uint i)">
                <parameter type="uint" name="i" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1550" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function name="prepend" fullname="QByteArray::prepend" href="qbytearray.html#prepend" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="299" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray &amp;" signature="QByteArray &amp; prepend(const QByteArray &amp;ba)">
                <parameter type="const QByteArray &amp;" name="ba" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1946" column="4">
                    <para>Prepends the byte array <argument>ba</argument> to this byte array and returns a reference to this byte array.</para>
                    <para>Example:</para>
                    <code>QByteArray x(&quot;ship&quot;);
QByteArray y(&quot;air&quot;);
x.prepend(y);
// x == &quot;airship&quot;</code>
                    <para>This is the same as insert(0, <argument>ba</argument>).</para>
                    <para>Note: <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> is an <link raw="implicitly shared" href="implicit-sharing.html#" type="page" page="Implicit Sharing">implicitly shared</link> class. Consequently, if you prepend to an empty byte array, then the byte array will just share the data held in <argument>ba</argument>. In this case, no copying of data is done, taking <link raw="constant time" href="containers.html#constant-time" type="page" page="Container Classes">constant time</link>. If a shared instance is modified, it will be copied (copy-on-write), taking <link raw="linear time" href="containers.html#linear-time" type="page" page="Container Classes">linear time</link>.</para>
                    <para>If the byte array being prepended to is not empty, a deep copy of the data is performed, taking <link raw="linear time" href="containers.html#linear-time" type="page" page="Container Classes">linear time</link>.</para>
                    <see-also>
                        <link raw="append()" href="qbytearray.html#append" type="function">append()</link>
                        <link raw="insert()" href="qbytearray.html#insert" type="function">insert()</link>
                    </see-also>
                </description>
            </function>
            <function name="prepend" fullname="QByteArray::prepend" href="qbytearray.html#prepend-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="295" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteArray &amp;" signature="QByteArray &amp; prepend(char ch)">
                <parameter type="char" name="ch" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2018" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Prepends the character <argument>ch</argument> to this byte array.</para>
                </description>
            </function>
            <function name="prepend" fullname="QByteArray::prepend" href="qbytearray.html#prepend-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="296" since="5.7" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QByteArray &amp;" signature="QByteArray &amp; prepend(int count, char ch)">
                <parameter type="int" name="count" default=""/>
                <parameter type="char" name="ch" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2010" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Prepends <argument>count</argument> copies of character <argument>ch</argument> to this byte array.</para>
                </description>
            </function>
            <function name="prepend" fullname="QByteArray::prepend" href="qbytearray.html#prepend-3" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="297" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QByteArray &amp;" signature="QByteArray &amp; prepend(const char *str)">
                <parameter type="const char *" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1979" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Prepends the string <argument>str</argument> to this byte array.</para>
                </description>
            </function>
            <function name="prepend" fullname="QByteArray::prepend" href="qbytearray.html#prepend-4" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="298" since="4.6" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="QByteArray &amp;" signature="QByteArray &amp; prepend(const char *str, int len)">
                <parameter type="const char *" name="str" default=""/>
                <parameter type="int" name="len" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1990" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Prepends <argument>len</argument> bytes of the string <argument>str</argument> to this byte array.</para>
                </description>
            </function>
            <function name="push_back" fullname="QByteArray::push_back" href="qbytearray.html#push_back" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="431" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void push_back(const QByteArray &amp;other)">
                <parameter type="const QByteArray &amp;" name="other" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1201" column="4">
                    <para>This function is provided for STL compatibility. It is equivalent to append(<argument>other</argument>).</para>
                </description>
            </function>
            <function name="push_back" fullname="QByteArray::push_back" href="qbytearray.html#push_back-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="429" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="void" signature="void push_back(char ch)">
                <parameter type="char" name="ch" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1214" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Same as append(<argument>ch</argument>).</para>
                </description>
            </function>
            <function name="push_back" fullname="QByteArray::push_back" href="qbytearray.html#push_back-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="430" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="void" signature="void push_back(const char *str)">
                <parameter type="const char *" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1207" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Same as append(<argument>str</argument>).</para>
                </description>
            </function>
            <function name="push_front" fullname="QByteArray::push_front" href="qbytearray.html#push_front" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="434" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void push_front(const QByteArray &amp;other)">
                <parameter type="const QByteArray &amp;" name="other" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1221" column="4">
                    <para>This function is provided for STL compatibility. It is equivalent to prepend(<argument>other</argument>).</para>
                </description>
            </function>
            <function name="push_front" fullname="QByteArray::push_front" href="qbytearray.html#push_front-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="432" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="void" signature="void push_front(char ch)">
                <parameter type="char" name="ch" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1234" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Same as prepend(<argument>ch</argument>).</para>
                </description>
            </function>
            <function name="push_front" fullname="QByteArray::push_front" href="qbytearray.html#push_front-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="433" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="void" signature="void push_front(const char *str)">
                <parameter type="const char *" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1227" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Same as prepend(<argument>str</argument>).</para>
                </description>
            </function>
            <function name="qChecksum" fullname="QByteArray::qChecksum" href="qbytearray.html#qChecksum" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="109" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="quint16" signature="quint16 qChecksum(const char *data, uint len)">
                <parameter type="const char *" name="data" default=""/>
                <parameter type="uint" name="len" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="657" column="4">
                    <para>Returns the CRC-16 checksum of the first <argument>len</argument> bytes of <argument>data</argument>.</para>
                    <para>The checksum is independent of the byte order (endianness) and will be calculated accorded to the algorithm published in ISO 3309 (<link raw="Qt::ChecksumIso3309" href="qt.html#ChecksumType-enum" type="enum" enum="Qt::ChecksumType">Qt::ChecksumIso3309</link>).</para>
                    <para>
                        <bold>Note:</bold> This function is a 16-bit cache conserving (16 entry table) implementation of the CRC-16-CCITT algorithm.</para>
                </description>
            </function>
            <function name="qChecksum" fullname="QByteArray::qChecksum" href="qbytearray.html#qChecksum-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="110" related="true" since="5.9" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="quint16" signature="quint16 qChecksum(const char *data, uint len, Qt::ChecksumType standard)">
                <parameter type="const char *" name="data" default=""/>
                <parameter type="uint" name="len" default=""/>
                <parameter type="Qt::ChecksumType" name="standard" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="673" column="4">
                    <para>Returns the CRC-16 checksum of the first <argument>len</argument> bytes of <argument>data</argument>.</para>
                    <para>The checksum is independent of the byte order (endianness) and will be calculated accorded to the algorithm published in <argument>standard</argument>.</para>
                    <para>
                        <bold>Note:</bold> This function is a 16-bit cache conserving (16 entry table) implementation of the CRC-16-CCITT algorithm.</para>
                </description>
            </function>
            <function name="qCompress" fullname="QByteArray::qCompress" href="qbytearray.html#qCompress" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="702" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray" signature="QByteArray qCompress(const QByteArray &amp;data, int compressionLevel)">
                <parameter type="const QByteArray &amp;" name="data" default=""/>
                <parameter type="int" name="compressionLevel" default="-1"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="714" column="4">
                    <para>Compresses the <argument>data</argument> byte array and returns the compressed data in a new byte array.</para>
                    <para>The <argument>compressionLevel</argument> parameter specifies how much compression should be used. Valid values are between 0 and 9, with 9 corresponding to the greatest compression (i.e. smaller compressed data) at the cost of using a slower algorithm. Smaller values (8, 7, ..., 1) provide successively less compression at slightly faster speeds. The value 0 corresponds to no compression at all. The default value is -1, which specifies zlib's default compression.</para>
                    <see-also>
                        <link raw="qUncompress()" href="qbytearray.html#qUncompress" type="function">qUncompress()</link>
                    </see-also>
                </description>
            </function>
            <function name="qCompress" fullname="QByteArray::qCompress" href="qbytearray.html#qCompress-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="700" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteArray" signature="QByteArray qCompress(const uchar *data, int nbytes, int compressionLevel)">
                <parameter type="const uchar *" name="data" default=""/>
                <parameter type="int" name="nbytes" default=""/>
                <parameter type="int" name="compressionLevel" default="-1"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="734" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Compresses the first <argument>nbytes</argument> of <argument>data</argument> at compression level <argument>compressionLevel</argument> and returns the compressed data in a new byte array.</para>
                </description>
            </function>
            <function name="qUncompress" fullname="QByteArray::qUncompress" href="qbytearray.html#qUncompress" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="704" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray" signature="QByteArray qUncompress(const QByteArray &amp;data)">
                <parameter type="const QByteArray &amp;" name="data" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="784" column="4">
                    <para>Uncompresses the <argument>data</argument> byte array and returns a new byte array with the uncompressed data.</para>
                    <para>Returns an empty <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> if the input data was corrupt.</para>
                    <para>This function will uncompress data compressed with <link raw="qCompress()" href="qbytearray.html#qCompress" type="function">qCompress()</link> from this and any earlier Qt version, back to Qt 3.1 when this feature was added.</para>
                    <para>
                        <bold>Note:</bold> If you want to use this function to uncompress external data that was compressed using zlib, you first need to prepend a four byte header to the byte array containing the data. The header must contain the expected length (in bytes) of the uncompressed data, expressed as an unsigned, big-endian, 32-bit integer.</para>
                    <see-also>
                        <link raw="qCompress()" href="qbytearray.html#qCompress" type="function">qCompress()</link>
                    </see-also>
                </description>
            </function>
            <function name="qUncompress" fullname="QByteArray::qUncompress" href="qbytearray.html#qUncompress-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="467" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteArray" signature="QByteArray qUncompress(const uchar *data, int nbytes)">
                <parameter type="const uchar *" name="data" default=""/>
                <parameter type="int" name="nbytes" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="822" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Uncompresses the first <argument>nbytes</argument> of <argument>data</argument> and returns a new byte array with the uncompressed data.</para>
                </description>
            </function>
            <function name="qsnprintf" fullname="QByteArray::qsnprintf" href="qbytearray.html#qsnprintf" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="106" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int qsnprintf(char *str, size_t n, const char *fmt, ... )">
                <parameter type="char *" name="str" default=""/>
                <parameter type="size_t" name="n" default=""/>
                <parameter type="const char *" name="fmt" default=""/>
                <parameter type="..." name="" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qvsnprintf.cpp" line="102" column="4">
                    <target name="bytearray-qsnprintf"/>
                    <para>A portable snprintf() function, calls qvsnprintf.</para>
                    <para>
                        <argument>fmt</argument> is the <teletype type="highlighted">printf()</teletype> format string. The result is put into <argument>str</argument>, which is a buffer of at least <argument>n</argument> bytes.</para>
                    <para>
                        <bold>Warning:</bold> Call this function only when you know what you are doing since it shows different behavior on certain platforms. Use <link raw="QString::asprintf()" href="qstring.html#asprintf" type="function">QString::asprintf()</link> to format a string instead.</para>
                    <see-also>
                        <link raw="qvsnprintf()" href="qbytearray.html#qvsnprintf" type="function">qvsnprintf()</link>
                        <link raw="QString::asprintf()" href="qstring.html#asprintf" type="function">QString::asprintf()</link>
                    </see-also>
                </description>
            </function>
            <function name="qstrcmp" fullname="QByteArray::qstrcmp" href="qbytearray.html#qstrcmp" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="89" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int qstrcmp(const char *str1, const char *str2)">
                <parameter type="const char *" name="str1" default=""/>
                <parameter type="const char *" name="str2" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="346" column="4">
                    <para>A safe <teletype type="highlighted">strcmp()</teletype> function.</para>
                    <para>Compares <argument>str1</argument> and <argument>str2</argument>. Returns a negative value if <argument>str1</argument> is less than <argument>str2</argument>, 0 if <argument>str1</argument> is equal to <argument>str2</argument> or a positive value if <argument>str1</argument> is greater than <argument>str2</argument>.</para>
                    <para>Special case 1: Returns 0 if <argument>str1</argument> and <argument>str2</argument> are both <teletype type="highlighted">nullptr</teletype>.</para>
                    <para>Special case 2: Returns an arbitrary non-zero value if <argument>str1</argument> is <teletype type="highlighted">nullptr</teletype> or <argument>str2</argument> is <teletype type="highlighted">nullptr</teletype> (but not both).</para>
                    <see-also>
                        <link raw="qstrncmp()" href="qbytearray.html#qstrncmp" type="function">qstrncmp()</link>
                        <link raw="qstricmp()" href="qbytearray.html#qstricmp" type="function">qstricmp()</link>
                        <link raw="qstrnicmp()" href="qbytearray.html#qstrnicmp" type="function">qstrnicmp()</link>
                        <link raw="8-bit Character Comparisons" href="qbytearray.html#8-bit-character-comparisons" type="class">8-bit Character Comparisons</link>
                        <link raw="QByteArray::compare()" href="qbytearray.html#compare" type="function">QByteArray::compare()</link>
                    </see-also>
                </description>
            </function>
            <function name="qstrcmp" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="92" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="int" signature="int qstrcmp(const char *str1, const QByteArray &amp;str2)">
                <parameter type="const char *" name="str1" default=""/>
                <parameter type="const QByteArray &amp;" name="str2" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="qstrcpy" fullname="QByteArray::qstrcpy" href="qbytearray.html#qstrcpy" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="86" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="char *" signature="char * qstrcpy(char *dst, const char *src)">
                <parameter type="char *" name="dst" default=""/>
                <parameter type="const char *" name="src" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="257" column="4">
                    <para>Copies all the characters up to and including the '\0' from <argument>src</argument> into <argument>dst</argument> and returns a pointer to <argument>dst</argument>. If <argument>src</argument> is <teletype type="highlighted">nullptr</teletype>, it immediately returns <teletype type="highlighted">nullptr</teletype>.</para>
                    <para>This function assumes that <argument>dst</argument> is large enough to hold the contents of <argument>src</argument>.</para>
                    <para>
                        <bold>Note:</bold> If <argument>dst</argument> and <argument>src</argument> overlap, the behavior is undefined.</para>
                    <see-also>
                        <link raw="qstrncpy()" href="qbytearray.html#qstrncpy" type="function">qstrncpy()</link>
                    </see-also>
                </description>
            </function>
            <function name="qstrdup" fullname="QByteArray::qstrdup" href="qbytearray.html#qstrdup" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="71" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="char *" signature="char * qstrdup(const char *src)">
                <parameter type="const char *" name="src" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="237" column="4">
                    <para>Returns a duplicate string.</para>
                    <para>Allocates space for a copy of <argument>src</argument>, copies it, and returns a pointer to the copy. If <argument>src</argument> is <teletype type="highlighted">nullptr</teletype>, it immediately returns <teletype type="highlighted">nullptr</teletype>.</para>
                    <para>Ownership is passed to the caller, so the returned string must be deleted using <teletype type="highlighted">delete[]</teletype>.</para>
                </description>
            </function>
            <function name="qstricmp" fullname="QByteArray::qstricmp" href="qbytearray.html#qstricmp" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="100" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int qstricmp(const char *str1, const char *str2)">
                <parameter type="const char *" name="str1" default=""/>
                <parameter type="const char *" name="str2" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="390" column="4">
                    <para>A safe <teletype type="highlighted">stricmp()</teletype> function.</para>
                    <para>Compares <argument>str1</argument> and <argument>str2</argument> ignoring the case of the characters. The encoding of the strings is assumed to be Latin-1.</para>
                    <para>Returns a negative value if <argument>str1</argument> is less than <argument>str2</argument>, 0 if <argument>str1</argument> is equal to <argument>str2</argument> or a positive value if <argument>str1</argument> is greater than <argument>str2</argument>.</para>
                    <para>Special case 1: Returns 0 if <argument>str1</argument> and <argument>str2</argument> are both <teletype type="highlighted">nullptr</teletype>.</para>
                    <para>Special case 2: Returns a random non-zero value if <argument>str1</argument> is <teletype type="highlighted">nullptr</teletype> or <argument>str2</argument> is <teletype type="highlighted">nullptr</teletype> (but not both).</para>
                    <see-also>
                        <link raw="qstrcmp()" href="qbytearray.html#qstrcmp" type="function">qstrcmp()</link>
                        <link raw="qstrncmp()" href="qbytearray.html#qstrncmp" type="function">qstrncmp()</link>
                        <link raw="qstrnicmp()" href="qbytearray.html#qstrnicmp" type="function">qstrnicmp()</link>
                        <link raw="8-bit Character Comparisons" href="qbytearray.html#8-bit-character-comparisons" type="class">8-bit Character Comparisons</link>
                        <link raw="QByteArray::compare()" href="qbytearray.html#compare" type="function">QByteArray::compare()</link>
                    </see-also>
                </description>
            </function>
            <function name="qstrlen" fullname="QByteArray::qstrlen" href="qbytearray.html#qstrlen" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="73" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="uint" signature="uint qstrlen(const char *str)">
                <parameter type="const char *" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="323" column="4">
                    <para>A safe <teletype type="highlighted">strlen()</teletype> function.</para>
                    <para>Returns the number of characters that precede the terminating '\0', or 0 if <argument>str</argument> is <teletype type="highlighted">nullptr</teletype>.</para>
                    <see-also>
                        <link raw="qstrnlen()" href="qbytearray.html#qstrnlen" type="function">qstrnlen()</link>
                    </see-also>
                </description>
            </function>
            <function name="qstrncmp" fullname="QByteArray::qstrncmp" href="qbytearray.html#qstrncmp" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="95" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int qstrncmp(const char *str1, const char *str2, uint len)">
                <parameter type="const char *" name="str1" default=""/>
                <parameter type="const char *" name="str2" default=""/>
                <parameter type="uint" name="len" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="369" column="4">
                    <para>A safe <teletype type="highlighted">strncmp()</teletype> function.</para>
                    <para>Compares at most <argument>len</argument> bytes of <argument>str1</argument> and <argument>str2</argument>.</para>
                    <para>Returns a negative value if <argument>str1</argument> is less than <argument>str2</argument>, 0 if <argument>str1</argument> is equal to <argument>str2</argument> or a positive value if <argument>str1</argument> is greater than <argument>str2</argument>.</para>
                    <para>Special case 1: Returns 0 if <argument>str1</argument> and <argument>str2</argument> are both <teletype type="highlighted">nullptr</teletype>.</para>
                    <para>Special case 2: Returns a random non-zero value if <argument>str1</argument> is <teletype type="highlighted">nullptr</teletype> or <argument>str2</argument> is <teletype type="highlighted">nullptr</teletype> (but not both).</para>
                    <see-also>
                        <link raw="qstrcmp()" href="qbytearray.html#qstrcmp" type="function">qstrcmp()</link>
                        <link raw="qstricmp()" href="qbytearray.html#qstricmp" type="function">qstricmp()</link>
                        <link raw="qstrnicmp()" href="qbytearray.html#qstrnicmp" type="function">qstrnicmp()</link>
                        <link raw="8-bit Character Comparisons" href="qbytearray.html#8-bit-character-comparisons" type="class">8-bit Character Comparisons</link>
                        <link raw="QByteArray::compare()" href="qbytearray.html#compare" type="function">QByteArray::compare()</link>
                    </see-also>
                </description>
            </function>
            <function name="qstrncpy" fullname="QByteArray::qstrncpy" href="qbytearray.html#qstrncpy" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="87" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="char *" signature="char * qstrncpy(char *dst, const char *src, uint len)">
                <parameter type="char *" name="dst" default=""/>
                <parameter type="const char *" name="src" default=""/>
                <parameter type="uint" name="len" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="287" column="4">
                    <para>A safe <teletype type="highlighted">strncpy()</teletype> function.</para>
                    <para>Copies at most <argument>len</argument> bytes from <argument>src</argument> (stopping at <argument>len</argument> or the terminating '\0' whichever comes first) into <argument>dst</argument> and returns a pointer to <argument>dst</argument>. Guarantees that <argument>dst</argument> is '\0'-terminated. If <argument>src</argument> or <argument>dst</argument> is <teletype type="highlighted">nullptr</teletype>, returns <teletype type="highlighted">nullptr</teletype> immediately.</para>
                    <para>This function assumes that <argument>dst</argument> is at least <argument>len</argument> characters long.</para>
                    <para>
                        <bold>Note:</bold> If <argument>dst</argument> and <argument>src</argument> overlap, the behavior is undefined.</para>
                    <para>
                        <bold>Note:</bold> When compiling with Visual C++ compiler version 14.00 (Visual C++ 2005) or later, internally the function strncpy_s will be used.</para>
                    <see-also>
                        <link raw="qstrcpy()" href="qbytearray.html#qstrcpy" type="function">qstrcpy()</link>
                    </see-also>
                </description>
            </function>
            <function name="qstrnicmp" fullname="QByteArray::qstrnicmp" href="qbytearray.html#qstrnicmp" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="101" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int qstrnicmp(const char *str1, const char *str2, uint len)">
                <parameter type="const char *" name="str1" default=""/>
                <parameter type="const char *" name="str2" default=""/>
                <parameter type="uint" name="len" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="482" column="4">
                    <para>A safe <teletype type="highlighted">strnicmp()</teletype> function.</para>
                    <para>Compares at most <argument>len</argument> bytes of <argument>str1</argument> and <argument>str2</argument> ignoring the case of the characters. The encoding of the strings is assumed to be Latin-1.</para>
                    <para>Returns a negative value if <argument>str1</argument> is less than <argument>str2</argument>, 0 if <argument>str1</argument> is equal to <argument>str2</argument> or a positive value if <argument>str1</argument> is greater than <argument>str2</argument>.</para>
                    <para>Special case 1: Returns 0 if <argument>str1</argument> and <argument>str2</argument> are both <teletype type="highlighted">nullptr</teletype>.</para>
                    <para>Special case 2: Returns a random non-zero value if <argument>str1</argument> is <teletype type="highlighted">nullptr</teletype> or <argument>str2</argument> is <teletype type="highlighted">nullptr</teletype> (but not both).</para>
                    <see-also>
                        <link raw="qstrcmp()" href="qbytearray.html#qstrcmp" type="function">qstrcmp()</link>
                        <link raw="qstrncmp()" href="qbytearray.html#qstrncmp" type="function">qstrncmp()</link>
                        <link raw="qstricmp()" href="qbytearray.html#qstricmp" type="function">qstricmp()</link>
                        <link raw="8-bit Character Comparisons" href="qbytearray.html#8-bit-character-comparisons" type="class">8-bit Character Comparisons</link>
                        <link raw="QByteArray::compare()" href="qbytearray.html#compare" type="function">QByteArray::compare()</link>
                    </see-also>
                </description>
            </function>
            <function name="qstrnlen" fullname="QByteArray::qstrnlen" href="qbytearray.html#qstrnlen" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="76" related="true" since="4.2" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="uint" signature="uint qstrnlen(const char *str, uint maxlen)">
                <parameter type="const char *" name="str" default=""/>
                <parameter type="uint" name="maxlen" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="334" column="4">
                    <para>A safe <teletype type="highlighted">strnlen()</teletype> function.</para>
                    <para>Returns the number of characters that precede the terminating '\0', but at most <argument>maxlen</argument>. If <argument>str</argument> is <teletype type="highlighted">nullptr</teletype>, returns 0.</para>
                    <see-also>
                        <link raw="qstrlen()" href="qbytearray.html#qstrlen" type="function">qstrlen()</link>
                    </see-also>
                </description>
            </function>
            <function name="qvsnprintf" fullname="QByteArray::qvsnprintf" href="qbytearray.html#qvsnprintf" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="105" related="true" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int qvsnprintf(char *str, size_t n, const char *fmt, va_list ap)">
                <parameter type="char *" name="str" default=""/>
                <parameter type="size_t" name="n" default=""/>
                <parameter type="const char *" name="fmt" default=""/>
                <parameter type="va_list" name="ap" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qvsnprintf.cpp" line="51" column="4">
                    <para>A portable <teletype type="highlighted">vsnprintf()</teletype> function. Will call <teletype type="highlighted">::vsnprintf()</teletype>, <teletype type="highlighted">::_vsnprintf()</teletype>, or <teletype type="highlighted">::vsnprintf_s</teletype> depending on the system, or fall back to an internal version.</para>
                    <para>
                        <argument>fmt</argument> is the <teletype type="highlighted">printf()</teletype> format string. The result is put into <argument>str</argument>, which is a buffer of at least <argument>n</argument> bytes.</para>
                    <para>The caller is responsible to call <teletype type="highlighted">va_end()</teletype> on <argument>ap</argument>.</para>
                    <para>
                        <bold>Warning:</bold> Since vsnprintf() shows different behavior on certain platforms, you should not rely on the return value or on the fact that you will always get a 0 terminated string back.</para>
                    <para>Ideally, you should never call this function but use <link raw="QString::asprintf()" href="qstring.html#asprintf" type="function">QString::asprintf()</link> instead.</para>
                    <see-also>
                        <link raw="qsnprintf()" href="qbytearray.html#qsnprintf" type="function">qsnprintf()</link>
                        <link raw="QString::asprintf()" href="qstring.html#asprintf" type="function">QString::asprintf()</link>
                    </see-also>
                </description>
            </function>
            <function name="rbegin" fullname="QByteArray::rbegin" href="qbytearray.html#rbegin" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="414" since="5.6" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray::reverse_iterator" signature="QByteArray::reverse_iterator rbegin()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1155" column="4">
                    <para>Returns a <link raw="STL-style iterators" href="containers.html#stl-style-iterators" type="page" page="Container Classes">STL-style</link> reverse iterator pointing to the first character in the byte-array, in reverse order.</para>
                    <see-also>
                        <link raw="begin()" href="qbytearray.html#begin" type="function">begin()</link>
                        <link raw="crbegin()" href="qbytearray.html#crbegin" type="function">crbegin()</link>
                        <link raw="rend()" href="qbytearray.html#rend" type="function">rend()</link>
                    </see-also>
                </description>
            </function>
            <function name="rbegin" fullname="QByteArray::rbegin" href="qbytearray.html#rbegin-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="416" since="5.6" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteArray::const_reverse_iterator" signature="QByteArray::const_reverse_iterator rbegin() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1164" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function name="reallocData" fullname="QByteArray::reallocData" href="qbytearray.html#reallocData" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="452" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void reallocData(uint alloc, Data::AllocationOptions options)">
                <parameter type="uint" name="alloc" default=""/>
                <parameter type="Data::AllocationOptions" name="options" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="remove" fullname="QByteArray::remove" href="qbytearray.html#remove" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="310" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray &amp;" signature="QByteArray &amp; remove(int pos, int len)">
                <parameter type="int" name="pos" default=""/>
                <parameter type="int" name="len" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2284" column="4">
                    <para>Removes <argument>len</argument> bytes from the array, starting at index position <argument>pos</argument>, and returns a reference to the array.</para>
                    <para>If <argument>pos</argument> is out of range, nothing happens. If <argument>pos</argument> is valid, but <argument>pos</argument> + <argument>len</argument> is larger than the size of the array, the array is truncated at position <argument>pos</argument>.</para>
                    <para>Example:</para>
                    <code>QByteArray ba(&quot;Montreal&quot;);
ba.remove(1, 4);
// ba == &quot;Meal&quot;</code>
                    <see-also>
                        <link raw="insert()" href="qbytearray.html#insert" type="function">insert()</link>
                        <link raw="replace()" href="qbytearray.html#replace" type="function">replace()</link>
                    </see-also>
                </description>
            </function>
            <function name="rend" fullname="QByteArray::rend" href="qbytearray.html#rend" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="415" since="5.6" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray::reverse_iterator" signature="QByteArray::reverse_iterator rend()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1178" column="4">
                    <para>Returns a <link raw="STL-style iterators" href="containers.html#stl-style-iterators" type="page" page="Container Classes">STL-style</link> reverse iterator pointing to one past the last character in the byte-array, in reverse order.</para>
                    <see-also>
                        <link raw="end()" href="qbytearray.html#end" type="function">end()</link>
                        <link raw="crend()" href="qbytearray.html#crend" type="function">crend()</link>
                        <link raw="rbegin()" href="qbytearray.html#rbegin" type="function">rbegin()</link>
                    </see-also>
                </description>
            </function>
            <function name="rend" fullname="QByteArray::rend" href="qbytearray.html#rend-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="417" since="5.6" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteArray::const_reverse_iterator" signature="QByteArray::const_reverse_iterator rend() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1187" column="4">
                    <para>This is an overloaded function.</para>
                </description>
            </function>
            <function name="repeated" fullname="QByteArray::repeated" href="qbytearray.html#repeated" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="328" since="4.5" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray" signature="QByteArray repeated(int times) const">
                <parameter type="int" name="times" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2650" column="4">
                    <para>Returns a copy of this byte array repeated the specified number of <argument>times</argument>.</para>
                    <para>If <argument>times</argument> is less than 1, an empty byte array is returned.</para>
                    <para>Example:</para>
                    <code>QByteArray ba(&quot;ab&quot;);
ba.repeated(4);             // returns &quot;abababab&quot;</code>
                </description>
            </function>
            <function name="replace" fullname="QByteArray::replace" href="qbytearray.html#replace" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="313" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray &amp;" signature="QByteArray &amp; replace(int pos, int len, const QByteArray &amp;after)">
                <parameter type="int" name="pos" default=""/>
                <parameter type="int" name="len" default=""/>
                <parameter type="const QByteArray &amp;" name="after" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2312" column="4">
                    <para>Replaces <argument>len</argument> bytes from index position <argument>pos</argument> with the byte array <argument>after</argument>, and returns a reference to this byte array.</para>
                    <para>Example:</para>
                    <code>QByteArray x(&quot;Say yes!&quot;);
QByteArray y(&quot;no&quot;);
x.replace(4, 3, y);
// x == &quot;Say no!&quot;</code>
                    <see-also>
                        <link raw="insert()" href="qbytearray.html#insert" type="function">insert()</link>
                        <link raw="remove()" href="qbytearray.html#remove" type="function">remove()</link>
                    </see-also>
                </description>
            </function>
            <function name="replace" fullname="QByteArray::replace" href="qbytearray.html#replace-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="311" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteArray &amp;" signature="QByteArray &amp; replace(int pos, int len, const char *after)">
                <parameter type="int" name="pos" default=""/>
                <parameter type="int" name="len" default=""/>
                <parameter type="const char *" name="after" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2336" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Replaces <argument>len</argument> bytes from index position <argument>pos</argument> with the '\0'-terminated string <argument>after</argument>.</para>
                    <para>Notice: this can change the length of the byte array.</para>
                </description>
            </function>
            <function name="replace" fullname="QByteArray::replace" href="qbytearray.html#replace-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="312" since="4.7" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QByteArray &amp;" signature="QByteArray &amp; replace(int pos, int len, const char *after, int alen)">
                <parameter type="int" name="pos" default=""/>
                <parameter type="int" name="len" default=""/>
                <parameter type="const char *" name="after" default=""/>
                <parameter type="int" name="alen" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2350" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Replaces <argument>len</argument> bytes from index position <argument>pos</argument> with <argument>alen</argument> bytes from the string <argument>after</argument>. <argument>after</argument> is allowed to have '\0' characters.</para>
                </description>
            </function>
            <function name="replace" fullname="QByteArray::replace" href="qbytearray.html#replace-3" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="314" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QByteArray &amp;" signature="QByteArray &amp; replace(char before, const char *after)">
                <parameter type="char" name="before" default=""/>
                <parameter type="const char *" name="after" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2603" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Replaces every occurrence of the character <argument>before</argument> with the string <argument>after</argument>.</para>
                </description>
            </function>
            <function name="replace" fullname="QByteArray::replace" href="qbytearray.html#replace-4" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="315" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="QByteArray &amp;" signature="QByteArray &amp; replace(char before, const QByteArray &amp;after)">
                <parameter type="char" name="before" default=""/>
                <parameter type="const QByteArray &amp;" name="after" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2575" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Replaces every occurrence of the character <argument>before</argument> with the byte array <argument>after</argument>.</para>
                </description>
            </function>
            <function name="replace" fullname="QByteArray::replace" href="qbytearray.html#replace-5" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="316" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="QByteArray &amp;" signature="QByteArray &amp; replace(const char *before, const char *after)">
                <parameter type="const char *" name="before" default=""/>
                <parameter type="const char *" name="after" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2567" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Replaces every occurrence of the string <argument>before</argument> with the string <argument>after</argument>.</para>
                </description>
            </function>
            <function name="replace" fullname="QByteArray::replace" href="qbytearray.html#replace-6" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="317" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="6" type="QByteArray &amp;" signature="QByteArray &amp; replace(const char *before, int bsize, const char *after, int asize)">
                <parameter type="const char *" name="before" default=""/>
                <parameter type="int" name="bsize" default=""/>
                <parameter type="const char *" name="after" default=""/>
                <parameter type="int" name="asize" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2413" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Replaces every occurrence of the string <argument>before</argument> with the string <argument>after</argument>. Since the sizes of the strings are given by <argument>bsize</argument> and <argument>asize</argument>, they may contain zero characters and do not need to be '\0'-terminated.</para>
                </description>
            </function>
            <function name="replace" fullname="QByteArray::replace" href="qbytearray.html#replace-7" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="318" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="7" type="QByteArray &amp;" signature="QByteArray &amp; replace(const QByteArray &amp;before, const QByteArray &amp;after)">
                <parameter type="const QByteArray &amp;" name="before" default=""/>
                <parameter type="const QByteArray &amp;" name="after" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2374" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Replaces every occurrence of the byte array <argument>before</argument> with the byte array <argument>after</argument>.</para>
                    <para>Example:</para>
                    <code>QByteArray ba(&quot;colour behaviour flavour neighbour&quot;);
ba.replace(QByteArray(&quot;ou&quot;), QByteArray(&quot;o&quot;));
// ba == &quot;color behavior flavor neighbor&quot;</code>
                </description>
            </function>
            <function name="replace" fullname="QByteArray::replace" href="qbytearray.html#replace-8" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="319" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="8" type="QByteArray &amp;" signature="QByteArray &amp; replace(const QByteArray &amp;before, const char *after)">
                <parameter type="const QByteArray &amp;" name="before" default=""/>
                <parameter type="const char *" name="after" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2538" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Replaces every occurrence of the byte array <argument>before</argument> with the string <argument>after</argument>.</para>
                </description>
            </function>
            <function name="replace" fullname="QByteArray::replace" href="qbytearray.html#replace-9" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="320" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="9" type="QByteArray &amp;" signature="QByteArray &amp; replace(const char *before, const QByteArray &amp;after)">
                <parameter type="const char *" name="before" default=""/>
                <parameter type="const QByteArray &amp;" name="after" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2396" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Replaces every occurrence of the string <argument>before</argument> with the byte array <argument>after</argument>.</para>
                </description>
            </function>
            <function name="replace" fullname="QByteArray::replace" href="qbytearray.html#replace-10" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="321" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="10" type="QByteArray &amp;" signature="QByteArray &amp; replace(char before, char after)">
                <parameter type="char" name="before" default=""/>
                <parameter type="char" name="after" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2611" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Replaces every occurrence of the character <argument>before</argument> with the character <argument>after</argument>.</para>
                </description>
            </function>
            <function name="replace" fullname="QByteArray::replace" href="qbytearray.html#replace-11" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="333" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="11" type="QByteArray &amp;" signature="QByteArray &amp; replace(const QString &amp;before, const char *after)">
                <parameter type="const QString &amp;" name="before" default=""/>
                <parameter type="const char *" name="after" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2560" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Replaces every occurrence of the string <argument>before</argument> with the string <argument>after</argument>.</para>
                </description>
            </function>
            <function name="replace" fullname="QByteArray::replace" href="qbytearray.html#replace-12" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="334" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="12" type="QByteArray &amp;" signature="QByteArray &amp; replace(char before, const QString &amp;after)">
                <parameter type="char" name="before" default=""/>
                <parameter type="const QString &amp;" name="after" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2589" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Replaces every occurrence of the character <argument>before</argument> with the string <argument>after</argument>. The Unicode data is converted into 8-bit characters using <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link>.</para>
                    <para>You can disable this function by defining <teletype type="highlighted">QT_NO_CAST_TO_ASCII</teletype> when you compile your applications. You then need to call <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link> (or <link raw="QString::toLatin1()" href="qstring.html#toLatin1" type="function">QString::toLatin1()</link> or <link raw="QString::toLocal8Bit()" href="qstring.html#toLocal8Bit" type="function">QString::toLocal8Bit()</link>) explicitly if you want to convert the data to <teletype type="highlighted">const char *</teletype>.</para>
                </description>
            </function>
            <function name="replace" fullname="QByteArray::replace" href="qbytearray.html#replace-13" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="335" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="13" type="QByteArray &amp;" signature="QByteArray &amp; replace(const QString &amp;before, const QByteArray &amp;after)">
                <parameter type="const QString &amp;" name="before" default=""/>
                <parameter type="const QByteArray &amp;" name="after" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2546" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Replaces every occurrence of the string <argument>before</argument> with the byte array <argument>after</argument>. The Unicode data is converted into 8-bit characters using <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link>.</para>
                    <para>You can disable this function by defining <teletype type="highlighted">QT_NO_CAST_TO_ASCII</teletype> when you compile your applications. You then need to call <link raw="QString::toUtf8()" href="qstring.html#toUtf8" type="function">QString::toUtf8()</link> (or <link raw="QString::toLatin1()" href="qstring.html#toLatin1" type="function">QString::toLatin1()</link> or <link raw="QString::toLocal8Bit()" href="qstring.html#toLocal8Bit" type="function">QString::toLocal8Bit()</link>) explicitly if you want to convert the data to <teletype type="highlighted">const char *</teletype>.</para>
                </description>
            </function>
            <function name="reserve" fullname="QByteArray::reserve" href="qbytearray.html#reserve" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="196" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void reserve(int size)">
                <parameter type="int" name="size" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1380" column="4">
                    <para>Attempts to allocate memory for at least <argument>size</argument> bytes. If you know in advance how large the byte array will be, you can call this function, and if you call <link raw="resize()" href="qbytearray.html#resize" type="function">resize()</link> often you are likely to get better performance. If <argument>size</argument> is an underestimate, the worst that will happen is that the <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> will be a bit slower.</para>
                    <para>The sole purpose of this function is to provide a means of fine tuning <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>'s memory usage. In general, you will rarely ever need to call this function. If you want to change the size of the byte array, call <link raw="resize()" href="qbytearray.html#resize" type="function">resize()</link>.</para>
                    <see-also>
                        <link raw="squeeze()" href="qbytearray.html#squeeze" type="function">squeeze()</link>
                        <link raw="capacity()" href="qbytearray.html#capacity" type="function">capacity()</link>
                    </see-also>
                </description>
            </function>
            <function name="resize" fullname="QByteArray::resize" href="qbytearray.html#resize" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="191" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void resize(int size)">
                <parameter type="int" name="size" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1831" column="4">
                    <para>Sets the size of the byte array to <argument>size</argument> bytes.</para>
                    <para>If <argument>size</argument> is greater than the current size, the byte array is extended to make it <argument>size</argument> bytes with the extra bytes added to the end. The new bytes are uninitialized.</para>
                    <para>If <argument>size</argument> is less than the current size, bytes are removed from the end.</para>
                    <see-also>
                        <link raw="size()" href="qbytearray.html#size" type="function">size()</link>
                        <link raw="truncate()" href="qbytearray.html#truncate" type="function">truncate()</link>
                    </see-also>
                </description>
            </function>
            <function name="right" fullname="QByteArray::right" href="qbytearray.html#right" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="239" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray" signature="QByteArray right(int len) const">
                <parameter type="int" name="len" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3186" column="4">
                    <para>Returns a byte array that contains the rightmost <argument>len</argument> bytes of this byte array.</para>
                    <para>The entire byte array is returned if <argument>len</argument> is greater than <link raw="size()" href="qbytearray.html#size" type="function">size()</link>.</para>
                    <para>Example:</para>
                    <code>QByteArray x(&quot;Pineapple&quot;);
QByteArray y = x.right(5);
// y == &quot;apple&quot;</code>
                    <see-also>
                        <link raw="endsWith()" href="qbytearray.html#endsWith" type="function">endsWith()</link>
                        <link raw="left()" href="qbytearray.html#left" type="function">left()</link>
                        <link raw="mid()" href="qbytearray.html#mid" type="function">mid()</link>
                        <link raw="chopped()" href="qbytearray.html#chopped" type="function">chopped()</link>
                        <link raw="chop()" href="qbytearray.html#chop" type="function">chop()</link>
                        <link raw="truncate()" href="qbytearray.html#truncate" type="function">truncate()</link>
                    </see-also>
                </description>
            </function>
            <function name="rightJustified" fullname="QByteArray::rightJustified" href="qbytearray.html#rightJustified" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="293" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray" signature="QByteArray rightJustified(int width, char fill, bool truncate) const">
                <parameter type="int" name="width" default=""/>
                <parameter type="char" name="fill" default="' '"/>
                <parameter type="bool" name="truncate" default="false"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3834" column="4">
                    <para>Returns a byte array of size <argument>width</argument> that contains the <argument>fill</argument> character followed by this byte array.</para>
                    <para>If <argument>truncate</argument> is false and the size of the byte array is more than <argument>width</argument>, then the returned byte array is a copy of this byte array.</para>
                    <para>If <argument>truncate</argument> is true and the size of the byte array is more than <argument>width</argument>, then the resulting byte array is truncated at position <argument>width</argument>.</para>
                    <para>Example:</para>
                    <code>QByteArray x(&quot;apple&quot;);
QByteArray y = x.rightJustified(8, '.');    // y == &quot;...apple&quot;</code>
                    <see-also>
                        <link raw="leftJustified()" href="qbytearray.html#leftJustified" type="function">leftJustified()</link>
                    </see-also>
                </description>
            </function>
            <function name="setNum" fullname="QByteArray::setNum" href="qbytearray.html#setNum" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="370" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray &amp;" signature="QByteArray &amp; setNum(int n, int base)">
                <parameter type="int" name="n" default=""/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4258" column="4">
                    <para>Sets the byte array to the printed value of <argument>n</argument> in base <argument>base</argument> (10 by default) and returns a reference to the byte array. The <argument>base</argument> can be any value between 2 and 36. For bases other than 10, n is treated as an unsigned integer.</para>
                    <para>Example:</para>
                    <code>QByteArray ba;
int n = 63;
ba.setNum(n);           // ba == &quot;63&quot;
ba.setNum(n, 16);       // ba == &quot;3f&quot;</code>
                    <para>
                        <bold>Note:</bold> The format of the number is not localized; the default C locale is used irrespective of the user's locale.</para>
                    <see-also>
                        <link raw="number()" href="qbytearray.html#number" type="function">number()</link>
                        <link raw="toInt()" href="qbytearray.html#toInt" type="function">toInt()</link>
                    </see-also>
                </description>
            </function>
            <function name="setNum" fullname="QByteArray::setNum" href="qbytearray.html#setNum-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="368" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteArray &amp;" signature="QByteArray &amp; setNum(short n, int base)">
                <parameter type="short" name="n" default=""/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4282" column="4">
                    <para>This is an overloaded function.</para>
                    <see-also>
                        <link raw="toShort()" href="qbytearray.html#toShort" type="function">toShort()</link>
                    </see-also>
                </description>
            </function>
            <function name="setNum" fullname="QByteArray::setNum" href="qbytearray.html#setNum-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="369" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="QByteArray &amp;" signature="QByteArray &amp; setNum(ushort n, int base)">
                <parameter type="ushort" name="n" default=""/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4289" column="4">
                    <para>This is an overloaded function.</para>
                    <see-also>
                        <link raw="toUShort()" href="qbytearray.html#toUShort" type="function">toUShort()</link>
                    </see-also>
                </description>
            </function>
            <function name="setNum" fullname="QByteArray::setNum" href="qbytearray.html#setNum-3" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="371" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="QByteArray &amp;" signature="QByteArray &amp; setNum(uint n, int base)">
                <parameter type="uint" name="n" default=""/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4275" column="4">
                    <para>This is an overloaded function.</para>
                    <see-also>
                        <link raw="toUInt()" href="qbytearray.html#toUInt" type="function">toUInt()</link>
                    </see-also>
                </description>
            </function>
            <function name="setNum" fullname="QByteArray::setNum" href="qbytearray.html#setNum-4" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="372" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="QByteArray &amp;" signature="QByteArray &amp; setNum(qlonglong n, int base)">
                <parameter type="qlonglong" name="n" default=""/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4314" column="4">
                    <para>This is an overloaded function.</para>
                    <see-also>
                        <link raw="toLongLong()" href="qbytearray.html#toLongLong" type="function">toLongLong()</link>
                    </see-also>
                </description>
            </function>
            <function name="setNum" fullname="QByteArray::setNum" href="qbytearray.html#setNum-5" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="373" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="QByteArray &amp;" signature="QByteArray &amp; setNum(qulonglong n, int base)">
                <parameter type="qulonglong" name="n" default=""/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4337" column="4">
                    <para>This is an overloaded function.</para>
                    <see-also>
                        <link raw="toULongLong()" href="qbytearray.html#toULongLong" type="function">toULongLong()</link>
                    </see-also>
                </description>
            </function>
            <function name="setNum" fullname="QByteArray::setNum" href="qbytearray.html#setNum-6" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="374" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="6" type="QByteArray &amp;" signature="QByteArray &amp; setNum(float n, char f, int prec)">
                <parameter type="float" name="n" default=""/>
                <parameter type="char" name="f" default="'g'"/>
                <parameter type="int" name="prec" default="6"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4413" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Sets the byte array to the printed value of <argument>n</argument>, formatted in format <argument>f</argument> with precision <argument>prec</argument>, and returns a reference to the byte array.</para>
                    <para>
                        <bold>Note:</bold> The format of the number is not localized; the default C locale is used irrespective of the user's locale.</para>
                    <see-also>
                        <link raw="toFloat()" href="qbytearray.html#toFloat" type="function">toFloat()</link>
                    </see-also>
                </description>
            </function>
            <function name="setNum" fullname="QByteArray::setNum" href="qbytearray.html#setNum-7" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="375" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="7" type="QByteArray &amp;" signature="QByteArray &amp; setNum(double n, char f, int prec)">
                <parameter type="double" name="n" default=""/>
                <parameter type="char" name="f" default="'g'"/>
                <parameter type="int" name="prec" default="6"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4354" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Sets the byte array to the printed value of <argument>n</argument>, formatted in format <argument>f</argument> with precision <argument>prec</argument>, and returns a reference to the byte array.</para>
                    <para>The format <argument>f</argument> can be any of the following:</para>
                    <table>
                        <header>
                            <item>
                                <para>Format</para>
                            </item>
                            <item>
                                <para>Meaning</para>
                            </item>
                        </header>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">e</teletype></para>
                            </item>
                            <item>
                                <para>format as [-]9.9e[+|-]999</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">E</teletype></para>
                            </item>
                            <item>
                                <para>format as [-]9.9E[+|-]999</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">f</teletype></para>
                            </item>
                            <item>
                                <para>format as [-]9.9</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">g</teletype></para>
                            </item>
                            <item>
                                <para>use <teletype type="highlighted">e</teletype> or <teletype type="highlighted">f</teletype> format, whichever is the most concise</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>
                                    <teletype type="highlighted">G</teletype></para>
                            </item>
                            <item>
                                <para>use <teletype type="highlighted">E</teletype> or <teletype type="highlighted">f</teletype> format, whichever is the most concise</para>
                            </item>
                        </row>
                    </table>
                    <para>With 'e', 'E', and 'f', <argument>prec</argument> is the number of digits after the decimal point. With 'g' and 'G', <argument>prec</argument> is the maximum number of significant digits (trailing zeroes are omitted).</para>
                    <para>
                        <bold>Note:</bold> The format of the number is not localized; the default C locale is used irrespective of the user's locale.</para>
                    <see-also>
                        <link raw="toDouble()" href="qbytearray.html#toDouble" type="function">toDouble()</link>
                    </see-also>
                </description>
            </function>
            <function name="setRawData" fullname="QByteArray::setRawData" href="qbytearray.html#setRawData" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="376" since="4.7" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QByteArray &amp;" signature="QByteArray &amp; setRawData(const char *data, uint size)">
                <parameter type="const char *" name="data" default=""/>
                <parameter type="uint" name="size" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4569" column="4">
                    <para>Resets the <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> to use the first <argument>size</argument> bytes of the <argument>data</argument> array. The bytes are <italic>not</italic> copied. The <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> will contain the <argument>data</argument> pointer. The caller guarantees that <argument>data</argument> will not be deleted or modified as long as this <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> and any copies of it exist that have not been modified.</para>
                    <para>This function can be used instead of <link raw="fromRawData()" href="qbytearray.html#fromRawData" type="function">fromRawData()</link> to re-use existing <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> objects to save memory re-allocations.</para>
                    <see-also>
                        <link raw="fromRawData()" href="qbytearray.html#fromRawData" type="function">fromRawData()</link>
                        <link raw="data()" href="qbytearray.html#data" type="function">data()</link>
                        <link raw="constData()" href="qbytearray.html#constData" type="function">constData()</link>
                    </see-also>
                </description>
            </function>
            <function name="shrink_to_fit" fullname="QByteArray::shrink_to_fit" href="qbytearray.html#shrink_to_fit" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="435" since="5.10" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void shrink_to_fit()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1241" column="4">
                    <para>This function is provided for STL compatibility. It is equivalent to <link raw="squeeze()" href="qbytearray.html#squeeze" type="function">squeeze()</link>.</para>
                </description>
            </function>
            <function name="simplified" fullname="QByteArray::simplified" href="qbytearray.html#simplified" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="289" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray" signature="QByteArray simplified() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3742" column="4">
                    <para>Returns a byte array that has whitespace removed from the start and the end, and which has each sequence of internal whitespace replaced with a single space.</para>
                    <para>Whitespace means any character for which the standard C++ <teletype type="highlighted">isspace()</teletype> function returns <teletype type="highlighted">true</teletype> in the C locale. This includes the ASCII isspace() function returns <teletype type="highlighted">true</teletype> in the C locale. This includes the ASCII characters '\t', '\n', '\v', '\f', '\r', and ' '.</para>
                    <para>Example:</para>
                    <code>QByteArray ba(&quot;  lots\t of\nwhitespace\r\n &quot;);
ba = ba.simplified();
// ba == &quot;lots of whitespace&quot;;</code>
                    <see-also>
                        <link raw="trimmed()" href="qbytearray.html#trimmed" type="function">trimmed()</link>
                    </see-also>
                </description>
            </function>
            <function name="simplified_helper" fullname="QByteArray::simplified_helper" href="qbytearray.html#simplified_helper" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="462" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QByteArray" signature="QByteArray simplified_helper(const QByteArray &amp;a)">
                <parameter type="const QByteArray &amp;" name="a" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="simplified_helper" fullname="QByteArray::simplified_helper" href="qbytearray.html#simplified_helper-1" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="463" meta="plain" virtual="non" const="false" static="true" final="false" override="false" overload="true" overload-number="1" type="QByteArray" signature="QByteArray simplified_helper(QByteArray &amp;a)">
                <parameter type="QByteArray &amp;" name="a" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="size" fullname="QByteArray::size" href="qbytearray.html#size" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="189" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="int" signature="int size() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1339" column="4">
                    <para>Returns the number of bytes in this byte array.</para>
                    <para>The last byte in the byte array is at position  - 1. In addition, <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> ensures that the byte at position  is always '\0', so that you can use the return value of <link raw="data()" href="qbytearray.html#data" type="function">data()</link> and <link raw="constData()" href="qbytearray.html#constData" type="function">constData()</link> as arguments to functions that expect '\0'-terminated strings. If the <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> object was created from a <link raw="fromRawData()" href="qbytearray.html#fromRawData" type="function">raw data</link> that didn't include the trailing null-termination character then <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> doesn't add it automaticall unless the <link raw="deep copy" href="implicit-sharing.html#deep-copy" type="page" page="Implicit Sharing">deep copy</link> is created.</para>
                    <para>Example:</para>
                    <code>QByteArray ba(&quot;Hello&quot;);
int n = ba.size();          // n == 5
ba.data()[0];               // returns 'H'
ba.data()[4];               // returns 'o'
ba.data()[5];               // returns '\0'</code>
                    <see-also>
                        <link raw="isEmpty()" href="qbytearray.html#isEmpty" type="function">isEmpty()</link>
                        <link raw="resize()" href="qbytearray.html#resize" type="function">resize()</link>
                    </see-also>
                </description>
            </function>
            <function name="split" fullname="QByteArray::split" href="qbytearray.html#split" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="326" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QList&lt;QByteArray&gt;" signature="QList&lt;QByteArray&gt; split(char sep) const">
                <parameter type="char" name="sep" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="2630" column="4">
                    <para>Splits the byte array into subarrays wherever <argument>sep</argument> occurs, and returns the list of those arrays. If <argument>sep</argument> does not match anywhere in the byte array,  returns a single-element list containing this byte array.</para>
                </description>
            </function>
            <function name="squeeze" fullname="QByteArray::squeeze" href="qbytearray.html#squeeze" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="197" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void squeeze()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1396" column="4">
                    <para>Releases any memory not required to store the array's data.</para>
                    <para>The sole purpose of this function is to provide a means of fine tuning <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>'s memory usage. In general, you will rarely ever need to call this function.</para>
                    <see-also>
                        <link raw="reserve()" href="qbytearray.html#reserve" type="function">reserve()</link>
                        <link raw="capacity()" href="qbytearray.html#capacity" type="function">capacity()</link>
                    </see-also>
                </description>
            </function>
            <function name="startsWith" fullname="QByteArray::startsWith" href="qbytearray.html#startsWith" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="244" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool startsWith(const QByteArray &amp;ba) const">
                <parameter type="const QByteArray &amp;" name="ba" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3002" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if this byte array starts with byte array <argument>ba</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>Example:</para>
                    <code>QByteArray url(&quot;ftp://ftp.qt-project.org/&quot;);
if (url.startsWith(&quot;ftp:&quot;))
    ...</code>
                    <see-also>
                        <link raw="endsWith()" href="qbytearray.html#endsWith" type="function">endsWith()</link>
                        <link raw="left()" href="qbytearray.html#left" type="function">left()</link>
                    </see-also>
                </description>
            </function>
            <function name="startsWith" fullname="QByteArray::startsWith" href="qbytearray.html#startsWith-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="245" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="bool" signature="bool startsWith(char ch) const">
                <parameter type="char" name="ch" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3035" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns <teletype type="highlighted">true</teletype> if this byte array starts with character <argument>ch</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                </description>
            </function>
            <function name="startsWith" fullname="QByteArray::startsWith" href="qbytearray.html#startsWith-2" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="246" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="2" type="bool" signature="bool startsWith(const char *str) const">
                <parameter type="const char *" name="str" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3020" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns <teletype type="highlighted">true</teletype> if this byte array starts with string <argument>str</argument>; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                </description>
            </function>
            <function name="swap" fullname="QByteArray::swap" href="qbytearray.html#swap" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="186" since="4.8" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void swap(QByteArray &amp;other)">
                <parameter type="QByteArray &amp;" name="other" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1332" column="4">
                    <para>Swaps byte array <argument>other</argument> with this byte array. This operation is very fast and never fails.</para>
                </description>
            </function>
            <function name="toBase64" fullname="QByteArray::toBase64" href="qbytearray.html#toBase64" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="361" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray" signature="QByteArray toBase64() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4178" column="4">
                    <para>Returns a copy of the byte array, encoded as Base64.</para>
                    <code>QByteArray text(&quot;Qt is great!&quot;);
text.toBase64();        // returns &quot;UXQgaXMgZ3JlYXQh&quot;</code>
                    <para>The algorithm used to encode Base64-encoded data is defined in <link raw="RFC 4648" href="http://www.ietf.org/rfc/rfc4648.txt#" type="">RFC 4648</link>.</para>
                    <see-also>
                        <link raw="fromBase64()" href="qbytearray.html#fromBase64" type="function">fromBase64()</link>
                    </see-also>
                </description>
            </function>
            <function name="toBase64" fullname="QByteArray::toBase64" href="qbytearray.html#toBase64-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="360" since="5.2" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteArray" signature="QByteArray toBase64(QByteArray::Base64Options options) const">
                <parameter type="QByteArray::Base64Options" name="options" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4192" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns a copy of the byte array, encoded using the options <argument>options</argument>.</para>
                    <code>QByteArray text(&quot;&lt;p&gt;Hello?&lt;/p&gt;&quot;);
text.toBase64(QByteArray::Base64Encoding | QByteArray::OmitTrailingEquals);      // returns &quot;PHA+SGVsbG8/PC9wPg&quot;
text.toBase64(QByteArray::Base64Encoding);                                       // returns &quot;PHA+SGVsbG8/PC9wPg==&quot;
text.toBase64(QByteArray::Base64UrlEncoding);                                    // returns &quot;PHA-SGVsbG8_PC9wPg==&quot;
text.toBase64(QByteArray::Base64UrlEncoding | QByteArray::OmitTrailingEquals);   // returns &quot;PHA-SGVsbG8_PC9wPg&quot;</code>
                    <para>The algorithm used to encode Base64-encoded data is defined in <link raw="RFC 4648" href="http://www.ietf.org/rfc/rfc4648.txt#" type="">RFC 4648</link>.</para>
                    <see-also>
                        <link raw="fromBase64()" href="qbytearray.html#fromBase64" type="function">fromBase64()</link>
                    </see-also>
                </description>
            </function>
            <function name="toCFData" fullname="QByteArray::toCFData" href="qbytearray.html#toCFData" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="392" since="5.3" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="CFDataRef" signature="CFDataRef toCFData() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/kernel/qcore_foundation.mm" line="99" column="4">
                    <para>Creates a CFData from a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>. The caller owns the CFData object and is responsible for releasing it.</para>
                    <see-also>
                        <link raw="toRawCFData()" href="qbytearray.html#toRawCFData" type="function">toRawCFData()</link>
                        <link raw="fromCFData()" href="qbytearray.html#fromCFData" type="function">fromCFData()</link>
                        <link raw="fromRawCFData()" href="qbytearray.html#fromRawCFData" type="function">fromRawCFData()</link>
                        <link raw="fromRawData()" href="qbytearray.html#fromRawData" type="function">fromRawData()</link>
                    </see-also>
                </description>
            </function>
            <function name="toDouble" fullname="QByteArray::toDouble" href="qbytearray.html#toDouble" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="359" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="double" signature="double toDouble(bool *ok) const">
                <parameter type="bool *" name="ok" default="nullptr"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4113" column="4">
                    <para>Returns the byte array converted to a <teletype type="highlighted">double</teletype> value.</para>
                    <para>Returns an infinity if the conversion overflows or 0.0 if the conversion fails for other reasons (e.g. underflow).</para>
                    <para>If <argument>ok</argument> is not <teletype type="highlighted">nullptr</teletype>, failure is reported by setting *<argument>ok</argument> to <teletype type="highlighted">false</teletype>, and success by setting *<argument>ok</argument> to <teletype type="highlighted">true</teletype>.</para>
                    <code>QByteArray string(&quot;1234.56&quot;);
bool ok;
double a = string.toDouble(&amp;ok);   // a == 1234.56, ok == true

string = &quot;1234.56 Volt&quot;;
a = str.toDouble(&amp;ok);             // a == 0, ok == false</code>
                    <para>
                        <bold>Warning:</bold> The <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> content may only contain valid numerical characters which includes the plus/minus sign, the character e used in scientific notation, and the decimal point. Including the unit or additional characters leads to a conversion error.</para>
                    <para>
                        <bold>Note:</bold> The conversion of the number is performed in the default C locale, irrespective of the user's locale.</para>
                    <para>This function ignores leading and trailing whitespace.</para>
                    <see-also>
                        <link raw="number()" href="qbytearray.html#number" type="function">number()</link>
                    </see-also>
                </description>
            </function>
            <function name="toFloat" fullname="QByteArray::toFloat" href="qbytearray.html#toFloat" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="358" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="float" signature="float toFloat(bool *ok) const">
                <parameter type="bool *" name="ok" default="nullptr"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4149" column="4">
                    <para>Returns the byte array converted to a <teletype type="highlighted">float</teletype> value.</para>
                    <para>Returns an infinity if the conversion overflows or 0.0 if the conversion fails for other reasons (e.g. underflow).</para>
                    <para>If <argument>ok</argument> is not <teletype type="highlighted">nullptr</teletype>, failure is reported by setting *<argument>ok</argument> to <teletype type="highlighted">false</teletype>, and success by setting *<argument>ok</argument> to <teletype type="highlighted">true</teletype>.</para>
                    <code>QByteArray string(&quot;1234.56&quot;);
bool ok;
float a = string.toFloat(&amp;ok);    // a == 1234.56, ok == true

string = &quot;1234.56 Volt&quot;;
a = str.toFloat(&amp;ok);              // a == 0, ok == false</code>
                    <para>
                        <bold>Warning:</bold> The <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> content may only contain valid numerical characters which includes the plus/minus sign, the character e used in scientific notation, and the decimal point. Including the unit or additional characters leads to a conversion error.</para>
                    <para>
                        <bold>Note:</bold> The conversion of the number is performed in the default C locale, irrespective of the user's locale.</para>
                    <para>This function ignores leading and trailing whitespace.</para>
                    <see-also>
                        <link raw="number()" href="qbytearray.html#number" type="function">number()</link>
                    </see-also>
                </description>
            </function>
            <function name="toHex" fullname="QByteArray::toHex" href="qbytearray.html#toHex" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="362" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray" signature="QByteArray toHex() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4713" column="4">
                    <para>Returns a hex encoded copy of the byte array. The hex encoding uses the numbers 0-9 and the letters a-f.</para>
                    <see-also>
                        <link raw="fromHex()" href="qbytearray.html#fromHex" type="function">fromHex()</link>
                    </see-also>
                </description>
            </function>
            <function name="toHex" fullname="QByteArray::toHex" href="qbytearray.html#toHex-1" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="363" since="5.9" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="QByteArray" signature="QByteArray toHex(char separator) const">
                <parameter type="char" name="separator" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4724" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns a hex encoded copy of the byte array. The hex encoding uses the numbers 0-9 and the letters a-f.</para>
                    <para>If <argument>separator</argument> is not '\0', the separator character is inserted between the hex bytes.</para>
                    <para>Example:</para>
                    <code>QByteArray macAddress = QByteArray::fromHex(&quot;123456abcdef&quot;);
macAddress.toHex(':'); // returns &quot;12:34:56:ab:cd:ef&quot;
macAddress.toHex(0);   // returns &quot;123456abcdef&quot;</code>
                    <see-also>
                        <link raw="fromHex()" href="qbytearray.html#fromHex" type="function">fromHex()</link>
                    </see-also>
                </description>
            </function>
            <function name="toInt" fullname="QByteArray::toInt" href="qbytearray.html#toInt" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="352" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="int" signature="int toInt(bool *ok, int base) const">
                <parameter type="bool *" name="ok" default="nullptr"/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3956" column="4">
                    <para>Returns the byte array converted to an <teletype type="highlighted">int</teletype> using base <argument>base</argument>, which is 10 by default and must be between 2 and 36, or 0.</para>
                    <para>If <argument>base</argument> is 0, the base is determined automatically using the following rules: If the byte array begins with &quot;0x&quot;, it is assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed to be octal; otherwise it is assumed to be decimal.</para>
                    <para>Returns 0 if the conversion fails.</para>
                    <para>If <argument>ok</argument> is not <teletype type="highlighted">nullptr</teletype>, failure is reported by setting *<argument>ok</argument> to <teletype type="highlighted">false</teletype>, and success by setting *<argument>ok</argument> to <teletype type="highlighted">true</teletype>.</para>
                    <code>QByteArray str(&quot;FF&quot;);
bool ok;
int hex = str.toInt(&amp;ok, 16);     // hex == 255, ok == true
int dec = str.toInt(&amp;ok, 10);     // dec == 0, ok == false</code>
                    <para>
                        <bold>Note:</bold> The conversion of the number is performed in the default C locale, irrespective of the user's locale.</para>
                    <see-also>
                        <link raw="number()" href="qbytearray.html#number" type="function">number()</link>
                    </see-also>
                </description>
            </function>
            <function name="toLong" fullname="QByteArray::toLong" href="qbytearray.html#toLong" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="354" since="4.1" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="long" signature="long toLong(bool *ok, int base) const">
                <parameter type="bool *" name="ok" default="nullptr"/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4008" column="4">
                    <para>Returns the byte array converted to a <teletype type="highlighted">long</teletype> int using base <argument>base</argument>, which is 10 by default and must be between 2 and 36, or 0.</para>
                    <para>If <argument>base</argument> is 0, the base is determined automatically using the following rules: If the byte array begins with &quot;0x&quot;, it is assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed to be octal; otherwise it is assumed to be decimal.</para>
                    <para>Returns 0 if the conversion fails.</para>
                    <para>If <argument>ok</argument> is not <teletype type="highlighted">nullptr</teletype>, failure is reported by setting *<argument>ok</argument> to <teletype type="highlighted">false</teletype>, and success by setting *<argument>ok</argument> to <teletype type="highlighted">true</teletype>.</para>
                    <code>QByteArray str(&quot;FF&quot;);
bool ok;
long hex = str.toLong(&amp;ok, 16);   // hex == 255, ok == true
long dec = str.toLong(&amp;ok, 10);   // dec == 0, ok == false</code>
                    <para>
                        <bold>Note:</bold> The conversion of the number is performed in the default C locale, irrespective of the user's locale.</para>
                    <see-also>
                        <link raw="number()" href="qbytearray.html#number" type="function">number()</link>
                    </see-also>
                </description>
            </function>
            <function name="toLongLong" fullname="QByteArray::toLongLong" href="qbytearray.html#toLongLong" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="356" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="qlonglong" signature="qlonglong toLongLong(bool *ok, int base) const">
                <parameter type="bool *" name="ok" default="nullptr"/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3905" column="4">
                    <para>Returns the byte array converted to a <teletype type="highlighted">long long</teletype> using base <argument>base</argument>, which is 10 by default and must be between 2 and 36, or 0.</para>
                    <para>If <argument>base</argument> is 0, the base is determined automatically using the following rules: If the byte array begins with &quot;0x&quot;, it is assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed to be octal; otherwise it is assumed to be decimal.</para>
                    <para>Returns 0 if the conversion fails.</para>
                    <para>If <argument>ok</argument> is not <teletype type="highlighted">nullptr</teletype>, failure is reported by setting *<argument>ok</argument> to <teletype type="highlighted">false</teletype>, and success by setting *<argument>ok</argument> to <teletype type="highlighted">true</teletype>.</para>
                    <para>
                        <bold>Note:</bold> The conversion of the number is performed in the default C locale, irrespective of the user's locale.</para>
                    <see-also>
                        <link raw="number()" href="qbytearray.html#number" type="function">number()</link>
                    </see-also>
                </description>
            </function>
            <function name="toLower" fullname="QByteArray::toLower" href="qbytearray.html#toLower" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="286" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray" signature="QByteArray toLower() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3254" column="4">
                    <para>Returns a lowercase copy of the byte array. The bytearray is interpreted as a Latin-1 encoded string.</para>
                    <para>Example:</para>
                    <code>QByteArray x(&quot;Qt by THE QT COMPANY&quot;);
QByteArray y = x.toLower();
// y == &quot;qt by the qt company&quot;</code>
                    <see-also>
                        <link raw="isLower()" href="qbytearray.html#isLower" type="function">isLower()</link>
                        <link raw="toUpper()" href="qbytearray.html#toUpper" type="function">toUpper()</link>
                        <link raw="8-bit Character Comparisons" href="qbytearray.html#8-bit-character-comparisons" type="class">8-bit Character Comparisons</link>
                    </see-also>
                </description>
            </function>
            <function name="toLower_helper" fullname="QByteArray::toLower_helper" href="qbytearray.html#toLower_helper" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="456" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QByteArray" signature="QByteArray toLower_helper(const QByteArray &amp;a)">
                <parameter type="const QByteArray &amp;" name="a" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="toLower_helper" fullname="QByteArray::toLower_helper" href="qbytearray.html#toLower_helper-1" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="457" meta="plain" virtual="non" const="false" static="true" final="false" override="false" overload="true" overload-number="1" type="QByteArray" signature="QByteArray toLower_helper(QByteArray &amp;a)">
                <parameter type="QByteArray &amp;" name="a" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="toNSData" fullname="QByteArray::toNSData" href="qbytearray.html#toNSData" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="396" since="5.3" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="NSData *" signature="NSData * toNSData() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/kernel/qcore_foundation.mm" line="163" column="4">
                    <para>Creates a NSData from a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>. The NSData object is autoreleased.</para>
                    <see-also>
                        <link raw="fromNSData()" href="qbytearray.html#fromNSData" type="function">fromNSData()</link>
                        <link raw="fromRawNSData()" href="qbytearray.html#fromRawNSData" type="function">fromRawNSData()</link>
                        <link raw="fromRawData()" href="qbytearray.html#fromRawData" type="function">fromRawData()</link>
                        <link raw="toRawNSData()" href="qbytearray.html#toRawNSData" type="function">toRawNSData()</link>
                    </see-also>
                </description>
            </function>
            <function name="toPercentEncoding" fullname="QByteArray::toPercentEncoding" href="qbytearray.html#toPercentEncoding" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="364" since="4.4" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray" signature="QByteArray toPercentEncoding(const QByteArray &amp;exclude, const QByteArray &amp;include, char percent) const">
                <parameter type="const QByteArray &amp;" name="exclude" default="QByteArray()"/>
                <parameter type="const QByteArray &amp;" name="include" default="QByteArray()"/>
                <parameter type="char" name="percent" default="'%'"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4913" column="4">
                    <para>Returns a URI/URL-style percent-encoded copy of this byte array. The <argument>percent</argument> parameter allows you to override the default '%' character for another.</para>
                    <para>By default, this function will encode all characters that are not one of the following:</para>
                    <para>ALPHA (&quot;a&quot; to &quot;z&quot; and &quot;A&quot; to &quot;Z&quot;) / DIGIT (0 to 9) / &quot;-&quot; / &quot;.&quot; / &quot;_&quot; / &quot;~&quot;</para>
                    <para>To prevent characters from being encoded pass them to <argument>exclude</argument>. To force characters to be encoded pass them to <argument>include</argument>. The <argument>percent</argument> character is always encoded.</para>
                    <para>Example:</para>
                    <code>QByteArray text = &quot;{a fishy string?}&quot;;
QByteArray ba = text.toPercentEncoding(&quot;{}&quot;, &quot;s&quot;);
qDebug(ba.constData());
// prints &quot;{a fi%73hy %73tring%3F}&quot;</code>
                    <para>The hex encoding uses the numbers 0-9 and the uppercase letters A-F.</para>
                    <see-also>
                        <link raw="fromPercentEncoding()" href="qbytearray.html#fromPercentEncoding" type="function">fromPercentEncoding()</link>
                        <link raw="QUrl::toPercentEncoding()" href="qurl.html#toPercentEncoding" type="function">QUrl::toPercentEncoding()</link>
                    </see-also>
                </description>
            </function>
            <function name="toRawCFData" fullname="QByteArray::toRawCFData" href="qbytearray.html#toRawCFData" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="393" since="5.3" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="CFDataRef" signature="CFDataRef toRawCFData() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/kernel/qcore_foundation.mm" line="112" column="4">
                    <para>Constructs a CFData that uses the bytes of the <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>.</para>
                    <para>The <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>'s bytes are not copied.</para>
                    <para>The caller guarantees that the <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> will not be deleted or modified as long as this CFData object exists.</para>
                    <see-also>
                        <link raw="toCFData()" href="qbytearray.html#toCFData" type="function">toCFData()</link>
                        <link raw="fromRawCFData()" href="qbytearray.html#fromRawCFData" type="function">fromRawCFData()</link>
                        <link raw="fromCFData()" href="qbytearray.html#fromCFData" type="function">fromCFData()</link>
                        <link raw="fromRawData()" href="qbytearray.html#fromRawData" type="function">fromRawData()</link>
                    </see-also>
                </description>
            </function>
            <function name="toRawNSData" fullname="QByteArray::toRawNSData" href="qbytearray.html#toRawNSData" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="397" since="5.3" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="NSData *" signature="NSData * toRawNSData() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/kernel/qcore_foundation.mm" line="175" column="4">
                    <para>Constructs a NSData that uses the bytes of the <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>.</para>
                    <para>The <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>'s bytes are not copied.</para>
                    <para>The caller guarantees that the <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> will not be deleted or modified as long as this NSData object exists.</para>
                    <see-also>
                        <link raw="fromRawNSData()" href="qbytearray.html#fromRawNSData" type="function">fromRawNSData()</link>
                        <link raw="fromNSData()" href="qbytearray.html#fromNSData" type="function">fromNSData()</link>
                        <link raw="fromRawData()" href="qbytearray.html#fromRawData" type="function">fromRawData()</link>
                        <link raw="toNSData()" href="qbytearray.html#toNSData" type="function">toNSData()</link>
                    </see-also>
                </description>
            </function>
            <function name="toShort" fullname="QByteArray::toShort" href="qbytearray.html#toShort" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="350" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="short" signature="short toShort(bool *ok, int base) const">
                <parameter type="bool *" name="ok" default="nullptr"/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4062" column="4">
                    <para>Returns the byte array converted to a <teletype type="highlighted">short</teletype> using base <argument>base</argument>, which is 10 by default and must be between 2 and 36, or 0.</para>
                    <para>If <argument>base</argument> is 0, the base is determined automatically using the following rules: If the byte array begins with &quot;0x&quot;, it is assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed to be octal; otherwise it is assumed to be decimal.</para>
                    <para>Returns 0 if the conversion fails.</para>
                    <para>If <argument>ok</argument> is not <teletype type="highlighted">nullptr</teletype>, failure is reported by setting *<argument>ok</argument> to <teletype type="highlighted">false</teletype>, and success by setting *<argument>ok</argument> to <teletype type="highlighted">true</teletype>.</para>
                    <para>
                        <bold>Note:</bold> The conversion of the number is performed in the default C locale, irrespective of the user's locale.</para>
                    <see-also>
                        <link raw="number()" href="qbytearray.html#number" type="function">number()</link>
                    </see-also>
                </description>
            </function>
            <function name="toStdString" fullname="QByteArray::toStdString" href="qbytearray.html#toStdString" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="438" since="5.4" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="std::string" signature="std::string toStdString() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4837" column="4">
                    <para>Returns a std::string object with the data contained in this <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>.</para>
                    <para>This operator is mostly useful to pass a <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link> to a function that accepts a std::string object.</para>
                    <see-also>
                        <link raw="fromStdString()" href="qbytearray.html#fromStdString" type="function">fromStdString()</link>
                        <link raw="QString::toStdString()" href="qstring.html#toStdString" type="function">QString::toStdString()</link>
                    </see-also>
                </description>
            </function>
            <function name="toUInt" fullname="QByteArray::toUInt" href="qbytearray.html#toUInt" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="353" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="uint" signature="uint toUInt(bool *ok, int base) const">
                <parameter type="bool *" name="ok" default="nullptr"/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3983" column="4">
                    <para>Returns the byte array converted to an <teletype type="highlighted">unsigned int</teletype> using base <argument>base</argument>, which is 10 by default and must be between 2 and 36, or 0.</para>
                    <para>If <argument>base</argument> is 0, the base is determined automatically using the following rules: If the byte array begins with &quot;0x&quot;, it is assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed to be octal; otherwise it is assumed to be decimal.</para>
                    <para>Returns 0 if the conversion fails.</para>
                    <para>If <argument>ok</argument> is not <teletype type="highlighted">nullptr</teletype>, failure is reported by setting *<argument>ok</argument> to <teletype type="highlighted">false</teletype>, and success by setting *<argument>ok</argument> to <teletype type="highlighted">true</teletype>.</para>
                    <para>
                        <bold>Note:</bold> The conversion of the number is performed in the default C locale, irrespective of the user's locale.</para>
                    <see-also>
                        <link raw="number()" href="qbytearray.html#number" type="function">number()</link>
                    </see-also>
                </description>
            </function>
            <function name="toULong" fullname="QByteArray::toULong" href="qbytearray.html#toULong" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="355" since="4.1" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="ulong" signature="ulong toULong(bool *ok, int base) const">
                <parameter type="bool *" name="ok" default="nullptr"/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4036" column="4">
                    <para>Returns the byte array converted to an <teletype type="highlighted">unsigned long int</teletype> using base <argument>base</argument>, which is 10 by default and must be between 2 and 36, or 0.</para>
                    <para>If <argument>base</argument> is 0, the base is determined automatically using the following rules: If the byte array begins with &quot;0x&quot;, it is assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed to be octal; otherwise it is assumed to be decimal.</para>
                    <para>Returns 0 if the conversion fails.</para>
                    <para>If <argument>ok</argument> is not <teletype type="highlighted">nullptr</teletype>, failure is reported by setting *<argument>ok</argument> to <teletype type="highlighted">false</teletype>, and success by setting *<argument>ok</argument> to <teletype type="highlighted">true</teletype>.</para>
                    <para>
                        <bold>Note:</bold> The conversion of the number is performed in the default C locale, irrespective of the user's locale.</para>
                    <see-also>
                        <link raw="number()" href="qbytearray.html#number" type="function">number()</link>
                    </see-also>
                </description>
            </function>
            <function name="toULongLong" fullname="QByteArray::toULongLong" href="qbytearray.html#toULongLong" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="357" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="qulonglong" signature="qulonglong toULongLong(bool *ok, int base) const">
                <parameter type="bool *" name="ok" default="nullptr"/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3930" column="4">
                    <para>Returns the byte array converted to an <teletype type="highlighted">unsigned long long</teletype> using base <argument>base</argument>, which is 10 by default and must be between 2 and 36, or 0.</para>
                    <para>If <argument>base</argument> is 0, the base is determined automatically using the following rules: If the byte array begins with &quot;0x&quot;, it is assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed to be octal; otherwise it is assumed to be decimal.</para>
                    <para>Returns 0 if the conversion fails.</para>
                    <para>If <argument>ok</argument> is not <teletype type="highlighted">nullptr</teletype>, failure is reported by setting *<argument>ok</argument> to <teletype type="highlighted">false</teletype>, and success by setting *<argument>ok</argument> to <teletype type="highlighted">true</teletype>.</para>
                    <para>
                        <bold>Note:</bold> The conversion of the number is performed in the default C locale, irrespective of the user's locale.</para>
                    <see-also>
                        <link raw="number()" href="qbytearray.html#number" type="function">number()</link>
                    </see-also>
                </description>
            </function>
            <function name="toUShort" fullname="QByteArray::toUShort" href="qbytearray.html#toUShort" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="351" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="ushort" signature="ushort toUShort(bool *ok, int base) const">
                <parameter type="bool *" name="ok" default="nullptr"/>
                <parameter type="int" name="base" default="10"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4087" column="4">
                    <para>Returns the byte array converted to an <teletype type="highlighted">unsigned short</teletype> using base <argument>base</argument>, which is 10 by default and must be between 2 and 36, or 0.</para>
                    <para>If <argument>base</argument> is 0, the base is determined automatically using the following rules: If the byte array begins with &quot;0x&quot;, it is assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed to be octal; otherwise it is assumed to be decimal.</para>
                    <para>Returns 0 if the conversion fails.</para>
                    <para>If <argument>ok</argument> is not <teletype type="highlighted">nullptr</teletype>, failure is reported by setting *<argument>ok</argument> to <teletype type="highlighted">false</teletype>, and success by setting *<argument>ok</argument> to <teletype type="highlighted">true</teletype>.</para>
                    <para>
                        <bold>Note:</bold> The conversion of the number is performed in the default C locale, irrespective of the user's locale.</para>
                    <see-also>
                        <link raw="number()" href="qbytearray.html#number" type="function">number()</link>
                    </see-also>
                </description>
            </function>
            <function name="toUpper" fullname="QByteArray::toUpper" href="qbytearray.html#toUpper" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="287" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray" signature="QByteArray toUpper() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3308" column="4">
                    <para>Returns an uppercase copy of the byte array. The bytearray is interpreted as a Latin-1 encoded string.</para>
                    <para>Example:</para>
                    <code>QByteArray x(&quot;Qt by THE QT COMPANY&quot;);
QByteArray y = x.toUpper();
// y == &quot;QT BY THE QT COMPANY&quot;</code>
                    <see-also>
                        <link raw="isUpper()" href="qbytearray.html#isUpper" type="function">isUpper()</link>
                        <link raw="toLower()" href="qbytearray.html#toLower" type="function">toLower()</link>
                        <link raw="8-bit Character Comparisons" href="qbytearray.html#8-bit-character-comparisons" type="class">8-bit Character Comparisons</link>
                    </see-also>
                </description>
            </function>
            <function name="toUpper_helper" fullname="QByteArray::toUpper_helper" href="qbytearray.html#toUpper_helper" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="458" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QByteArray" signature="QByteArray toUpper_helper(const QByteArray &amp;a)">
                <parameter type="const QByteArray &amp;" name="a" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="toUpper_helper" fullname="QByteArray::toUpper_helper" href="qbytearray.html#toUpper_helper-1" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="459" meta="plain" virtual="non" const="false" static="true" final="false" override="false" overload="true" overload-number="1" type="QByteArray" signature="QByteArray toUpper_helper(QByteArray &amp;a)">
                <parameter type="QByteArray &amp;" name="a" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="trimmed" fullname="QByteArray::trimmed" href="qbytearray.html#trimmed" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="288" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="QByteArray" signature="QByteArray trimmed() const">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="3769" column="4">
                    <para>Returns a byte array that has whitespace removed from the start and the end.</para>
                    <para>Whitespace means any character for which the standard C++ <teletype type="highlighted">isspace()</teletype> function returns <teletype type="highlighted">true</teletype> in the C locale. This includes the ASCII characters '\t', '\n', '\v', '\f', '\r', and ' '.</para>
                    <para>Example:</para>
                    <code>QByteArray ba(&quot;  lots\t of\nwhitespace\r\n &quot;);
ba = ba.trimmed();
// ba == &quot;lots\t of\nwhitespace&quot;;</code>
                    <para>Unlike <link raw="simplified()" href="qbytearray.html#simplified" type="function">simplified()</link>,  leaves internal whitespace alone.</para>
                    <see-also>
                        <link raw="simplified()" href="qbytearray.html#simplified" type="function">simplified()</link>
                    </see-also>
                </description>
            </function>
            <function name="trimmed_helper" fullname="QByteArray::trimmed_helper" href="qbytearray.html#trimmed_helper" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="460" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QByteArray" signature="QByteArray trimmed_helper(const QByteArray &amp;a)">
                <parameter type="const QByteArray &amp;" name="a" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="trimmed_helper" fullname="QByteArray::trimmed_helper" href="qbytearray.html#trimmed_helper-1" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="461" meta="plain" virtual="non" const="false" static="true" final="false" override="false" overload="true" overload-number="1" type="QByteArray" signature="QByteArray trimmed_helper(QByteArray &amp;a)">
                <parameter type="QByteArray &amp;" name="a" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="truncate" fullname="QByteArray::truncate" href="qbytearray.html#truncate" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="255" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void truncate(int pos)">
                <parameter type="int" name="pos" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1644" column="4">
                    <para>Truncates the byte array at index position <argument>pos</argument>.</para>
                    <para>If <argument>pos</argument> is beyond the end of the array, nothing happens.</para>
                    <para>Example:</para>
                    <code>QByteArray ba(&quot;Stockholm&quot;);
ba.truncate(5);             // ba == &quot;Stock&quot;</code>
                    <see-also>
                        <link raw="chop()" href="qbytearray.html#chop" type="function">chop()</link>
                        <link raw="resize()" href="qbytearray.html#resize" type="function">resize()</link>
                        <link raw="left()" href="qbytearray.html#left" type="function">left()</link>
                    </see-also>
                </description>
            </function>
            <function name="~QByteArray" fullname="QByteArray::~QByteArray" href="qbytearray.html#dtor.QByteArray" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="176" meta="destructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="~QByteArray()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1276" column="4">
                    <para>Destroys the byte array.</para>
                </description>
            </function>
            <variable name="d" fullname="QByteArray::d" href="qbytearray.html#d-var" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="451" type="QByteArray::Data *" static="false">
                <description path="" line="0" column="0"/>
            </variable>
            <enum name="Base64Option" fullname="QByteArray::Base64Option" href="qbytearray.html#Base64Option-enum" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="162" since="5.2" typedef="QByteArray::Base64Options">
                <value name="Base64Encoding" value="0"/>
                <value name="Base64UrlEncoding" value="1"/>
                <value name="KeepTrailingEquals" value="0"/>
                <value name="OmitTrailingEquals" value="2"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="1074" column="4">
                    <para>This enum contains the options available for encoding and decoding Base64. Base64 is defined by <link raw="RFC 4648" href="http://www.ietf.org/rfc/rfc4648.txt#" type="">RFC 4648</link>, with the following options:</para>
                    <list type="enum">
                        <definition>
                            <term>QByteArray::Base64Encoding</term>Base64Encoding</definition>
                        <item>
                            <para>(default) The regular Base64 alphabet, called simply &quot;base64&quot;</para>
                        </item>
                        <definition>
                            <term>QByteArray::Base64UrlEncoding</term>Base64UrlEncoding</definition>
                        <item>
                            <para>An alternate alphabet, called &quot;base64url&quot;, which replaces two characters in the alphabet to be more friendly to URLs.</para>
                        </item>
                        <definition>
                            <term>QByteArray::KeepTrailingEquals</term>KeepTrailingEquals</definition>
                        <item>
                            <para>(default) Keeps the trailing padding equal signs at the end of the encoded data, so the data is always a size multiple of four.</para>
                        </item>
                        <definition>
                            <term>QByteArray::OmitTrailingEquals</term>OmitTrailingEquals</definition>
                        <item>
                            <para>Omits adding the padding equal signs at the end of the encoded data.</para>
                        </item>
                    </list>
                    <para>
                        <link raw="QByteArray::fromBase64()" href="qbytearray.html#fromBase64" type="function">QByteArray::fromBase64()</link> ignores the  and  options and will not flag errors in case they are missing or if there are too many of them.</para>
                </description>
            </enum>
            <typedef name="reference" fullname="QByteArray::reference" href="qbytearray.html#reference-typedef" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="425">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="5012" column="4"/>
            </typedef>
            <typedef name="const_pointer" fullname="QByteArray::const_pointer" href="qbytearray.html#const_pointer-typedef" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="427">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="5016" column="4"/>
            </typedef>
            <typedef name="const_iterator" fullname="QByteArray::const_iterator" href="qbytearray.html#const_iterator-typedef" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="401">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4970" column="4">
                    <para>This typedef provides an STL-style const iterator for <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>.</para>
                    <see-also>
                        <link raw="QByteArray::const_reverse_iterator" href="qbytearray.html#const_reverse_iterator-typedef" type="typedef">QByteArray::const_reverse_iterator</link>
                        <link raw="QByteArray::iterator" href="qbytearray.html#iterator-typedef" type="typedef">QByteArray::iterator</link>
                    </see-also>
                </description>
            </typedef>
            <typedef name="Base64Options" fullname="QByteArray::Base64Options" href="qbytearray.html#Base64Option-enum" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="169" enum="QByteArray::Base64Option">
                <description path="" line="0" column="0"/>
            </typedef>
            <typedef name="Iterator" fullname="QByteArray::Iterator" href="qbytearray.html#Iterator-typedef" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="402">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4966" column="4"/>
            </typedef>
            <typedef name="ConstIterator" fullname="QByteArray::ConstIterator" href="qbytearray.html#ConstIterator-typedef" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="403">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4962" column="4"/>
            </typedef>
            <typedef name="pointer" fullname="QByteArray::pointer" href="qbytearray.html#pointer-typedef" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="426">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="5020" column="4"/>
            </typedef>
            <typedef name="value_type" fullname="QByteArray::value_type" href="qbytearray.html#value_type-typedef" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="428">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="5024" column="4"/>
            </typedef>
            <typedef name="DataPtr" fullname="QByteArray::DataPtr" href="qbytearray.html#DataPtr-typedef" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="469">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="5033" column="4"/>
            </typedef>
            <typedef name="size_type" fullname="QByteArray::size_type" href="qbytearray.html#size_type-typedef" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="422">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="5000" column="4"/>
            </typedef>
            <typedef name="reverse_iterator" fullname="QByteArray::reverse_iterator" href="qbytearray.html#reverse_iterator-typedef" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="404" since="5.6">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4992" column="4">
                    <para>This typedef provides an STL-style non-const reverse iterator for <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>.</para>
                    <see-also>
                        <link raw="QByteArray::const_reverse_iterator" href="qbytearray.html#const_reverse_iterator-typedef" type="typedef">QByteArray::const_reverse_iterator</link>
                        <link raw="QByteArray::iterator" href="qbytearray.html#iterator-typedef" type="typedef">QByteArray::iterator</link>
                    </see-also>
                </description>
            </typedef>
            <typedef name="const_reference" fullname="QByteArray::const_reference" href="qbytearray.html#const_reference-typedef" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="424">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="5008" column="4"/>
            </typedef>
            <typedef name="difference_type" fullname="QByteArray::difference_type" href="qbytearray.html#difference_type-typedef" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="423">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="5004" column="4"/>
            </typedef>
            <typedef name="iterator" fullname="QByteArray::iterator" href="qbytearray.html#iterator-typedef" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="400">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4977" column="4">
                    <para>This typedef provides an STL-style non-const iterator for <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>.</para>
                    <see-also>
                        <link raw="QByteArray::reverse_iterator" href="qbytearray.html#reverse_iterator-typedef" type="typedef">QByteArray::reverse_iterator</link>
                        <link raw="QByteArray::const_iterator" href="qbytearray.html#const_iterator-typedef" type="typedef">QByteArray::const_iterator</link>
                    </see-also>
                </description>
            </typedef>
            <typedef name="Data" fullname="QByteArray::Data" href="qbytearray.html#Data-typedef" status="internal" access="private" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="159">
                <description path="" line="0" column="0"/>
            </typedef>
            <typedef name="const_reverse_iterator" fullname="QByteArray::const_reverse_iterator" href="qbytearray.html#const_reverse_iterator-typedef" status="active" access="public" location="QtCore\qbytearray.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtCore\qbytearray.h" lineno="405" since="5.6">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/corelib/tools/qbytearray.cpp" line="4984" column="4">
                    <para>This typedef provides an STL-style const reverse iterator for <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>.</para>
                    <see-also>
                        <link raw="QByteArray::reverse_iterator" href="qbytearray.html#reverse_iterator-typedef" type="typedef">QByteArray::reverse_iterator</link>
                        <link raw="QByteArray::const_iterator" href="qbytearray.html#const_iterator-typedef" type="typedef">QByteArray::const_iterator</link>
                    </see-also>
                </description>
            </typedef>
        </class>
    </document>
</WebXML>
