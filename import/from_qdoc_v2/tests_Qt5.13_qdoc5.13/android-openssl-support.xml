<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.2"
    xml:lang="en">
    <db:info>
        <db:title>Adding OpenSSL Support for Android</db:title>
        <db:abstract>
            <db:para>Provides instructions to package OpenSSL libraries with your Qt application for Android</db:para>
        </db:abstract>
        <db:pubdate>2019-07-14+02:00</db:pubdate>
        <db:date>2019-07-14+02:00</db:date>
        <db:productname>Qt</db:productname>
        <db:productnumber>1.2</db:productnumber>
    </db:info>
    <db:para>Provides instructions to package OpenSSL libraries with your Qt application for Android.</db:para>
    <db:para>The Qt installation package comes with OpenSSL support but the OpenSSL libraries are not part of the package due to legal restrictions in some countries. If your application depends on OpenSSL, consider packaging the SSL libraries with your Application Package (APK) as the target device may or may not have them. You can use the <db:code><db:link xlink:href="../qtnetwork/qsslsocket.html#supportsSsl" xrefstyle="function" annotations="QSslSocket::supportsSsl()">QSslSocket::supportsSsl()</db:link></db:code> static function to check for SSL support on the target.</db:para>
    <db:para>The following instructions guide you to build and add the OpenSSL libraries to the APK:</db:para>
    <db:orderedlist>
        <db:listitem>
            <db:para>Download the <db:link xlink:href="https://wiki.openssl.org/images/7/70/Setenv-android.sh" xrefstyle="" annotations="OpenSSL: Build Setup Script">setup script</db:link> to configure the build environment.</db:para>
            <db:note>
                <db:para> Ensure that you save the script with Unix line-endings if your build host is Unix or Linux.</db:para>
            </db:note>
        </db:listitem>
        <db:listitem>
            <db:para>Make the following changes in the setup script:</db:para>
            <db:itemizedlist>
                <db:listitem>
                    <db:para>Set appropriate values to the <db:code>_ANDROID_EABI</db:code> and <db:code>_ANDROID_ARCH</db:code> variables. For example, to build for 64-bit ARM architecture using toolchain version v4.9, set <db:code>aarch64-linux-android-4.9</db:code> and <db:code>arch-arm64</db:code> values to <db:code>_ANDROID_EABI</db:code> and <db:code>_ANDROID_ARCH</db:code> respectively.</db:para>
                </db:listitem>
                <db:listitem>
                    <db:para>Add the <db:code>windows-x86</db:code> or <db:code>windows-x86_64</db:code> to the <db:code>hosts</db:code> list on line <db:code>107</db:code>, if your build host is Windows.</db:para>
                </db:listitem>
                <db:listitem>
                    <db:para>Add the following after line <db:code>128</db:code> to build for 64-bit ARM architecture:</db:para>
                    <db:programlisting language="other" role="badcode">  arch-arm64)
                        ANDROID_TOOLS="aarch64-linux-android-gcc aarch64-linux-android-ranlib aarch64-linux-android-ld"
                        ;;</db:programlisting>
                </db:listitem>
                <db:listitem>
                    <db:para>Add the following after line <db:code>213</db:code> if <db:code>_ANDROID_ARCH</db:code> is set to <db:code>arch-arm64</db:code>:</db:para>
                    <db:programlisting language="other" role="badcode">if [ "$_ANDROID_ARCH" == "arch-arm64" ]; then
                        export MACHINE=armv8
                        export RELEASE=2.6.37
                        export SYSTEM=android64
                        export ARCH=arm
                        export CROSS_COMPILE="aarch64-linux-android-"
                        fi</db:programlisting>
                </db:listitem>
                <db:listitem>
                    <db:para>Comment out the <db:code>FIPS</db:code> section if it is not used or define the <db:code>FIPS_SIG</db:code> environment variable with the FIPS signature location.</db:para>
                </db:listitem>
            </db:itemizedlist>
        </db:listitem>
        <db:listitem>
            <db:para>Define <db:code>ANDROID_NDK_ROOT</db:code> environment variable with the NDK location.</db:para>
        </db:listitem>
        <db:listitem>
            <db:para>Provide executable rights for the setup script and run it:</db:para>
            <db:programlisting language="other" role="badcode">chmod a+x Setenv-android.sh
                . ./Setenv-android.sh</db:programlisting>
            <db:para>The script prints the following configuration details to the prompt when it completes:</db:para>
            <db:programlisting language="other" role="badcode">ANDROID_NDK_ROOT: /home/user1/android-ndk-r10d
                ANDROID_ARCH: arch-arm64
                ANDROID_EABI: aarch64-linux-android-4.9
                ANDROID_API: android-21
                ANDROID_SYSROOT: /home/user1/android-ndk-r10d/platforms/android-21/arch-arm64
                ANDROID_TOOLCHAIN: /home/user1/android-ndk-r10d/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin
                FIPS_SIG:
                CROSS_COMPILE: aarch64-linux-androideabi-
                ANDROID_DEV: /home/user1/android-ndk-r10d/platforms/android-21/arch-arm64/usr</db:programlisting>
        </db:listitem>
        <db:listitem>
            <db:para>Download the latest OpenSSL sources from http://www.openssl.org/source.</db:para>
        </db:listitem>
        <db:listitem>
            <db:para>Extract the sources to a folder and navigate to that folder using the CLI.</db:para>
            <db:note>
                <db:para> If your development platform is Windows, you need <db:code>msys</db:code> with <db:code>perl</db:code> v5.14 or later to build OpenSSL.</db:para>
            </db:note>
        </db:listitem>
        <db:listitem>
            <db:para>Configure the OpenSSL sources to build for Android using the following command:</db:para>
            <db:programlisting language="other" role="badcode">./Configure shared android</db:programlisting>
            <db:note>
                <db:para> You must consider enabling/disabling the SSL features based on the legal restrictions in the region where your application is available. See the <db:link xlink:href="http://wiki.openssl.org/index.php/Compilation_and_Installation#Configure_Options" xrefstyle="" annotations="OpenSSL Configure Options">SSL configure options</db:link> for details about the configurable features.</db:para>
            </db:note>
        </db:listitem>
        <db:listitem>
            <db:para>Run <db:code>make CALC_VERSIONS="SHLIB_COMPAT=; SHLIB_SOVER=" build_libs</db:code> to build the <db:code>libcrypto</db:code> and <db:code>libssl</db:code> shared libraries that are not versioned.</db:para>
            <db:note>
                <db:para> Android does not load versioned libraries.</db:para>
            </db:note>
        </db:listitem>
        <db:listitem>
            <db:para>Open your Qt project using Qt Creator and update the "Build Android APK" settings to add <db:emphasis>libcrypto</db:emphasis> and <db:emphasis>libssl</db:emphasis> as additional libraries for your project.</db:para>
        </db:listitem>
        <db:listitem>
            <db:para>Run your application to see it running on the device.</db:para>
        </db:listitem>
    </db:orderedlist>
    <db:para>Qt Creator builds your application and creates an application package (APK) with the OpenSSL libraries bundled in it. Once the APK is ready, it uses <db:code>adb</db:code> to deploy the APK on the target you chose and launch the application.</db:para>
</db:article>
