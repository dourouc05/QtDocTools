<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <page name="android-openssl-support.html" href="android-openssl-support.html" status="active" location="android.qdoc" filepath="C:/Qt/5.13.0/Src/qtdoc/doc/src/platforms/android.qdoc" lineno="305" subtype="page" title="Adding OpenSSL Support for Android" fulltitle="Adding OpenSSL Support for Android" subtitle="" module="QtDoc" brief="Provides instructions to package OpenSSL libraries with your Qt application for Android">
            <description path="C:/Qt/5.13.0/Src/qtdoc/doc/src/platforms/android.qdoc" line="305" column="4">
                <brief>Provides instructions to package OpenSSL libraries with your Qt application for Android.</brief>
                <para>The Qt installation package comes with OpenSSL support but the OpenSSL libraries are not part of the package due to legal restrictions in some countries. If your application depends on OpenSSL, consider packaging the SSL libraries with your Application Package (APK) as the target device may or may not have them. You can use the <link raw="QSslSocket::supportsSsl()" href="../qtnetwork/qsslsocket.html#supportsSsl" type="function">QSslSocket::supportsSsl()</link> static function to check for SSL support on the target.</para>
                <para>The following instructions guide you to build and add the OpenSSL libraries to the APK:</para>
                <list type="ordered" start="1">
                    <item>
                        <para>Download the <link raw="OpenSSL: Build Setup Script" href="https://wiki.openssl.org/images/7/70/Setenv-android.sh#" type="">setup script</link> to configure the build environment.</para>
                        <para>
                            <bold>Note:</bold> Ensure that you save the script with Unix line-endings if your build host is Unix or Linux.</para>
                    </item>
                    <item>
                        <para>Make the following changes in the setup script:</para>
                        <list type="bullet">
                            <item>
                                <para>Set appropriate values to the <teletype type="highlighted">_ANDROID_EABI</teletype> and <teletype type="highlighted">_ANDROID_ARCH</teletype> variables. For example, to build for 64-bit ARM architecture using toolchain version v4.9, set <teletype type="highlighted">aarch64-linux-android-4.9</teletype> and <teletype type="highlighted">arch-arm64</teletype> values to <teletype type="highlighted">_ANDROID_EABI</teletype> and <teletype type="highlighted">_ANDROID_ARCH</teletype> respectively.</para>
                            </item>
                            <item>
                                <para>Add the <teletype type="highlighted">windows-x86</teletype> or <teletype type="highlighted">windows-x86_64</teletype> to the <teletype type="highlighted">hosts</teletype> list on line <teletype type="highlighted">107</teletype>, if your build host is Windows.</para>
                            </item>
                            <item>
                                <para>Add the following after line <teletype type="highlighted">128</teletype> to build for 64-bit ARM architecture:</para>
                                <badcode>  arch-arm64)
ANDROID_TOOLS=&quot;aarch64-linux-android-gcc aarch64-linux-android-ranlib aarch64-linux-android-ld&quot;
    ;;</badcode>
                            </item>
                            <item>
                                <para>Add the following after line <teletype type="highlighted">213</teletype> if <teletype type="highlighted">_ANDROID_ARCH</teletype> is set to <teletype type="highlighted">arch-arm64</teletype>:</para>
                                <badcode>if [ &quot;$_ANDROID_ARCH&quot; == &quot;arch-arm64&quot; ]; then
        export MACHINE=armv8
        export RELEASE=2.6.37
        export SYSTEM=android64
        export ARCH=arm
        export CROSS_COMPILE=&quot;aarch64-linux-android-&quot;
fi</badcode>
                            </item>
                            <item>
                                <para>Comment out the <teletype type="highlighted">FIPS</teletype> section if it is not used or define the <teletype type="highlighted">FIPS_SIG</teletype> environment variable with the FIPS signature location.</para>
                            </item>
                        </list>
                    </item>
                    <item>
                        <para>Define <teletype type="highlighted">ANDROID_NDK_ROOT</teletype> environment variable with the NDK location.</para>
                    </item>
                    <item>
                        <para>Provide executable rights for the setup script and run it:</para>
                        <badcode>chmod a+x Setenv-android.sh
. ./Setenv-android.sh</badcode>
                        <para>The script prints the following configuration details to the prompt when it completes:</para>
                        <badcode>ANDROID_NDK_ROOT: /home/user1/android-ndk-r10d
ANDROID_ARCH: arch-arm64
ANDROID_EABI: aarch64-linux-android-4.9
ANDROID_API: android-21
ANDROID_SYSROOT: /home/user1/android-ndk-r10d/platforms/android-21/arch-arm64
ANDROID_TOOLCHAIN: /home/user1/android-ndk-r10d/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin
FIPS_SIG:
CROSS_COMPILE: aarch64-linux-androideabi-
ANDROID_DEV: /home/user1/android-ndk-r10d/platforms/android-21/arch-arm64/usr</badcode>
                    </item>
                    <item>
                        <para>Download the latest OpenSSL sources from http://www.openssl.org/source.</para>
                    </item>
                    <item>
                        <para>Extract the sources to a folder and navigate to that folder using the CLI.</para>
                        <para>
                            <bold>Note:</bold> If your development platform is Windows, you need <teletype type="highlighted">msys</teletype> with <teletype type="highlighted">perl</teletype> v5.14 or later to build OpenSSL.</para>
                    </item>
                    <item>
                        <para>Configure the OpenSSL sources to build for Android using the following command:</para>
                        <badcode>./Configure shared android</badcode>
                        <para>
                            <bold>Note:</bold> You must consider enabling/disabling the SSL features based on the legal restrictions in the region where your application is available. See the <link raw="OpenSSL Configure Options" href="http://wiki.openssl.org/index.php/Compilation_and_Installation#Configure_Options#" type="">SSL configure options</link> for details about the configurable features.</para>
                    </item>
                    <item>
                        <para>Run <teletype type="highlighted">make CALC_VERSIONS=&quot;SHLIB_COMPAT=; SHLIB_SOVER=&quot; build_libs</teletype> to build the <teletype type="highlighted">libcrypto</teletype> and <teletype type="highlighted">libssl</teletype> shared libraries that are not versioned.</para>
                        <para>
                            <bold>Note:</bold> Android does not load versioned libraries.</para>
                    </item>
                    <item>
                        <para>Open your Qt project using Qt Creator and update the &quot;Build Android APK&quot; settings to add <italic>libcrypto</italic> and <italic>libssl</italic> as additional libraries for your project.</para>
                    </item>
                    <item>
                        <para>Run your application to see it running on the device.</para>
                    </item>
                </list>
                <para>Qt Creator builds your application and creates an application package (APK) with the OpenSSL libraries bundled in it. Once the APK is ready, it uses <teletype type="highlighted">adb</teletype> to deploy the APK on the target you chose and launch the application.</para>
            </description>
        </page>
    </document>
</WebXML>
