<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <class name="QApplication" href="qapplication.html" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="72" bases="QGuiApplication" module="QtWidgets" brief="Manages the GUI application's control flow and main settings">
            <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="188" column="4">
                <brief>The <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> class manages the GUI application's control flow and main settings.</brief>
                <para>
                    <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> specializes <link raw="QGuiApplication" href="../qtgui/qguiapplication.html" type="class">QGuiApplication</link> with some functionality needed for <link raw="QWidget" href="qwidget.html" type="class">QWidget</link>-based applications. It handles widget specific initialization, finalization.</para>
                <para>For any GUI application using Qt, there is precisely <bold>one</bold> <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> object, no matter whether the application has 0, 1, 2 or more windows at any given time. For non-<link raw="QWidget" href="qwidget.html" type="class">QWidget</link> based Qt applications, use <link raw="QGuiApplication" href="../qtgui/qguiapplication.html" type="class">QGuiApplication</link> instead, as it does not depend on the <link raw="QtWidgets" href="qtwidgets-module.html" type="module">QtWidgets</link> library.</para>
                <para>Some GUI applications provide a special batch mode ie. provide command line arguments for executing tasks without manual intervention. In such non-GUI mode, it is often sufficient to instantiate a plain <link raw="QCoreApplication" href="../qtcore/qcoreapplication.html" type="class">QCoreApplication</link> to avoid unnecessarily initializing resources needed for a graphical user interface. The following example shows how to dynamically create an appropriate type of application instance:</para>
                <code>QCoreApplication* createApplication(int &amp;argc, char *argv[])
{
    for (int i = 1; i &lt; argc; ++i)
        if (!qstrcmp(argv[i], &quot;-no-gui&quot;))
            return new QCoreApplication(argc, argv);
    return new QApplication(argc, argv);
}

int main(int argc, char* argv[])
{
    QScopedPointer&lt;QCoreApplication&gt; app(createApplication(argc, argv));

    if (qobject_cast&lt;QApplication *&gt;(app.data())) {
       // start GUI version...
    } else {
       // start non-GUI version...
    }

    return app-&gt;exec();
}</code>
                <para>The <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> object is accessible through the <link raw="instance()" href="../qtcore/qcoreapplication.html#instance" type="function">instance()</link> function that returns a pointer equivalent to the global <link raw="qApp" href="qapplication.html#qApp" type="function">qApp</link> pointer.</para>
                <para>
                    <link raw="QApplication" href="qapplication.html" type="class">QApplication</link>'s main areas of responsibility are:</para>
                <list type="bullet">
                    <item>
                        <para>It initializes the application with the user's desktop settings such as <link raw="palette()" href="qapplication.html#palette" type="function">palette()</link>, <link raw="font()" href="qapplication.html#font" type="function">font()</link> and <link raw="doubleClickInterval()" href="qapplication.html#doubleClickInterval-prop" type="function">doubleClickInterval()</link>. It keeps track of these properties in case the user changes the desktop globally, for example through some kind of control panel.</para>
                    </item>
                    <item>
                        <para>It performs event handling, meaning that it receives events from the underlying window system and dispatches them to the relevant widgets. By using <link raw="sendEvent()" href="../qtcore/qcoreapplication.html#sendEvent" type="function">sendEvent()</link> and <link raw="postEvent()" href="../qtcore/qcoreapplication.html#postEvent" type="function">postEvent()</link> you can send your own events to widgets.</para>
                    </item>
                    <item>
                        <para>It parses common command line arguments and sets its internal state accordingly. See the <link raw="QApplication::QApplication()" href="qapplication.html#QApplication" type="function">constructor documentation</link> below for more details.</para>
                    </item>
                    <item>
                        <para>It defines the application's look and feel, which is encapsulated in a <link raw="QStyle" href="qstyle.html" type="class">QStyle</link> object. This can be changed at runtime with <link raw="setStyle()" href="qapplication.html#setStyle" type="function">setStyle()</link>.</para>
                    </item>
                    <item>
                        <para>It specifies how the application is to allocate colors. See <link raw="setColorSpec()" href="qapplication-obsolete.html#setColorSpec" type="function">setColorSpec()</link> for details.</para>
                    </item>
                    <item>
                        <para>It provides localization of strings that are visible to the user via <link raw="translate()" href="../qtcore/qcoreapplication.html#translate" type="function">translate()</link>.</para>
                    </item>
                    <item>
                        <para>It provides some magical objects like the <link raw="desktop()" href="qapplication.html#desktop" type="function">desktop()</link> and the <link raw="clipboard()" href="../qtgui/qguiapplication.html#clipboard" type="function">clipboard()</link>.</para>
                    </item>
                    <item>
                        <para>It knows about the application's windows. You can ask which widget is at a certain position using <link raw="widgetAt()" href="qapplication.html#widgetAt" type="function">widgetAt()</link>, get a list of <link raw="topLevelWidgets()" href="qapplication.html#topLevelWidgets" type="function">topLevelWidgets()</link> and <link raw="closeAllWindows()" href="qapplication.html#closeAllWindows" type="function">closeAllWindows()</link>, etc.</para>
                    </item>
                    <item>
                        <para>It manages the application's mouse cursor handling, see <link raw="setOverrideCursor()" href="../qtgui/qguiapplication.html#setOverrideCursor" type="function">setOverrideCursor()</link></para>
                    </item>
                </list>
                <para>Since the <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> object does so much initialization, it <italic>must</italic> be created before any other objects related to the user interface are created. <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> also deals with common command line arguments. Hence, it is usually a good idea to create it <italic>before</italic> any interpretation or modification of <teletype type="highlighted">argv</teletype> is done in the application itself.</para>
                <table>
                    <header>
                        <item colspan="2">
                            <para>Groups of functions</para>
                        </item>
                    </header>
                    <row>
                        <item>
                            <para>System settings</para>
                        </item>
                        <item>
                            <para>
                                <link raw="desktopSettingsAware()" href="../qtgui/qguiapplication.html#desktopSettingsAware" type="function">desktopSettingsAware()</link>, <link raw="setDesktopSettingsAware()" href="../qtgui/qguiapplication.html#setDesktopSettingsAware" type="function">setDesktopSettingsAware()</link>, <link raw="cursorFlashTime()" href="qapplication.html#cursorFlashTime-prop" type="function">cursorFlashTime()</link>, <link raw="setCursorFlashTime()" href="qapplication.html#cursorFlashTime-prop" type="function">setCursorFlashTime()</link>, <link raw="doubleClickInterval()" href="qapplication.html#doubleClickInterval-prop" type="function">doubleClickInterval()</link>, <link raw="setDoubleClickInterval()" href="qapplication.html#doubleClickInterval-prop" type="function">setDoubleClickInterval()</link>, <link raw="setKeyboardInputInterval()" href="qapplication.html#keyboardInputInterval-prop" type="function">setKeyboardInputInterval()</link>, <link raw="wheelScrollLines()" href="qapplication.html#wheelScrollLines-prop" type="function">wheelScrollLines()</link>, <link raw="setWheelScrollLines()" href="qapplication.html#wheelScrollLines-prop" type="function">setWheelScrollLines()</link>, <link raw="palette()" href="qapplication.html#palette" type="function">palette()</link>, <link raw="setPalette()" href="qapplication.html#setPalette" type="function">setPalette()</link>, <link raw="font()" href="qapplication.html#font" type="function">font()</link>, <link raw="setFont()" href="qapplication.html#setFont" type="function">setFont()</link>, <link raw="fontMetrics()" href="qapplication.html#fontMetrics" type="function">fontMetrics()</link>.</para>
                        </item>
                    </row>
                    <row>
                        <item>
                            <para>Event handling</para>
                        </item>
                        <item>
                            <para>
                                <link raw="exec()" href="qapplication.html#exec" type="function">exec()</link>, <link raw="processEvents()" href="../qtcore/qcoreapplication.html#processEvents" type="function">processEvents()</link>, <link raw="exit()" href="../qtcore/qcoreapplication.html#exit" type="function">exit()</link>, <link raw="quit()" href="../qtcore/qcoreapplication.html#quit" type="function">quit()</link>. <link raw="sendEvent()" href="../qtcore/qcoreapplication.html#sendEvent" type="function">sendEvent()</link>, <link raw="postEvent()" href="../qtcore/qcoreapplication.html#postEvent" type="function">postEvent()</link>, <link raw="sendPostedEvents()" href="../qtcore/qcoreapplication.html#sendPostedEvents" type="function">sendPostedEvents()</link>, <link raw="removePostedEvents()" href="../qtcore/qcoreapplication.html#removePostedEvents" type="function">removePostedEvents()</link>, <link raw="hasPendingEvents()" href="../qtcore/qcoreapplication-obsolete.html#hasPendingEvents" type="function">hasPendingEvents()</link>, <link raw="notify()" href="qapplication.html#notify" type="function">notify()</link>.</para>
                        </item>
                    </row>
                    <row>
                        <item>
                            <para>GUI Styles</para>
                        </item>
                        <item>
                            <para>
                                <link raw="style()" href="qapplication.html#style" type="function">style()</link>, <link raw="setStyle()" href="qapplication.html#setStyle" type="function">setStyle()</link>.</para>
                        </item>
                    </row>
                    <row>
                        <item>
                            <para>Color usage</para>
                        </item>
                        <item>
                            <para>
                                <link raw="colorSpec()" href="qapplication-obsolete.html#colorSpec" type="function">colorSpec()</link>, <link raw="setColorSpec()" href="qapplication-obsolete.html#setColorSpec" type="function">setColorSpec()</link>.</para>
                        </item>
                    </row>
                    <row>
                        <item>
                            <para>Text handling</para>
                        </item>
                        <item>
                            <para>
                                <link raw="installTranslator()" href="../qtcore/qcoreapplication.html#installTranslator" type="function">installTranslator()</link>, <link raw="removeTranslator()" href="../qtcore/qcoreapplication.html#removeTranslator" type="function">removeTranslator()</link> <link raw="translate()" href="../qtcore/qcoreapplication.html#translate" type="function">translate()</link>.</para>
                        </item>
                    </row>
                    <row>
                        <item>
                            <para>Widgets</para>
                        </item>
                        <item>
                            <para>
                                <link raw="allWidgets()" href="qapplication.html#allWidgets" type="function">allWidgets()</link>, <link raw="topLevelWidgets()" href="qapplication.html#topLevelWidgets" type="function">topLevelWidgets()</link>, <link raw="desktop()" href="qapplication.html#desktop" type="function">desktop()</link>, <link raw="activePopupWidget()" href="qapplication.html#activePopupWidget" type="function">activePopupWidget()</link>, <link raw="activeModalWidget()" href="qapplication.html#activeModalWidget" type="function">activeModalWidget()</link>, <link raw="clipboard()" href="../qtgui/qguiapplication.html#clipboard" type="function">clipboard()</link>, <link raw="focusWidget()" href="qapplication.html#focusWidget" type="function">focusWidget()</link>, <link raw="activeWindow()" href="qapplication.html#activeWindow" type="function">activeWindow()</link>, <link raw="widgetAt()" href="qapplication.html#widgetAt" type="function">widgetAt()</link>.</para>
                        </item>
                    </row>
                    <row>
                        <item>
                            <para>Advanced cursor handling</para>
                        </item>
                        <item>
                            <para>
                                <link raw="overrideCursor()" href="../qtgui/qguiapplication.html#overrideCursor" type="function">overrideCursor()</link>, <link raw="setOverrideCursor()" href="../qtgui/qguiapplication.html#setOverrideCursor" type="function">setOverrideCursor()</link>, <link raw="restoreOverrideCursor()" href="../qtgui/qguiapplication.html#restoreOverrideCursor" type="function">restoreOverrideCursor()</link>.</para>
                        </item>
                    </row>
                    <row>
                        <item>
                            <para>Miscellaneous</para>
                        </item>
                        <item>
                            <para>
                                <link raw="closeAllWindows()" href="qapplication.html#closeAllWindows" type="function">closeAllWindows()</link>, <link raw="startingUp()" href="../qtcore/qcoreapplication.html#startingUp" type="function">startingUp()</link>, <link raw="closingDown()" href="../qtcore/qcoreapplication.html#closingDown" type="function">closingDown()</link>.</para>
                        </item>
                    </row>
                </table>
                <see-also>
                    <link raw="QCoreApplication" href="../qtcore/qcoreapplication.html" type="class">QCoreApplication</link>
                    <link raw="QAbstractEventDispatcher" href="../qtcore/qabstracteventdispatcher.html" type="class">QAbstractEventDispatcher</link>
                    <link raw="QEventLoop" href="../qtcore/qeventloop.html" type="class">QEventLoop</link>
                    <link raw="QSettings" href="../qtcore/qsettings.html" type="class">QSettings</link>
                </see-also>
            </description>
            <function name="QApplication" fullname="QApplication::QApplication" href="qapplication.html#QApplication" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="92" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="QApplication(int &amp;argc, char **argv)">
                <parameter type="int &amp;" name="argc" default=""/>
                <parameter type="char **" name="argv" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="501" column="4">
                    <para>Initializes the window system and constructs an application object with <argument>argc</argument> command line arguments in <argument>argv</argument>.</para>
                    <para>
                        <bold>Warning:</bold> The data referred to by <argument>argc</argument> and <argument>argv</argument> must stay valid for the entire lifetime of the <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> object. In addition, <argument>argc</argument> must be greater than zero and <argument>argv</argument> must contain at least one valid character string.</para>
                    <para>The global <teletype type="highlighted">qApp</teletype> pointer refers to this application object. Only one application object should be created.</para>
                    <para>This application object must be constructed before any <link raw="QPaintDevice" href="../qtgui/qpaintdevice.html" type="class">paint devices</link> (including widgets, pixmaps, bitmaps etc.).</para>
                    <para>
                        <bold>Note:</bold> <argument>argc</argument> and <argument>argv</argument> might be changed as Qt removes command line arguments that it recognizes.</para>
                    <para>All Qt programs automatically support the following command line options:</para>
                    <list type="bullet">
                        <item>
                            <para>-style= <italic>style</italic>, sets the application GUI style. Possible values depend on your system configuration. If you compiled Qt with additional styles or have additional styles as plugins these will be available to the <teletype type="highlighted">-style</teletype> command line option. You can also set the style for all Qt applications by setting the <teletype type="highlighted">QT_STYLE_OVERRIDE</teletype> environment variable.</para>
                        </item>
                        <item>
                            <para>-style <italic>style</italic>, is the same as listed above.</para>
                        </item>
                        <item>
                            <para>-stylesheet= <italic>stylesheet</italic>, sets the application <link raw="styleSheet" href="stylesheet.html#" type="page" page="Qt Style Sheets">styleSheet</link>. The value must be a path to a file that contains the Style Sheet.</para>
                            <para>
                                <bold>Note:</bold> Relative URLs in the Style Sheet file are relative to the Style Sheet file's path.</para>
                        </item>
                        <item>
                            <para>-stylesheet <italic>stylesheet</italic>, is the same as listed above.</para>
                        </item>
                        <item>
                            <para>-widgetcount, prints debug message at the end about number of widgets left undestroyed and maximum number of widgets existed at the same time</para>
                        </item>
                        <item>
                            <para>-reverse, sets the application's layout direction to <link raw="Qt::RightToLeft" href="../qtcore/qt.html#LayoutDirection-enum" type="enum" enum="Qt::LayoutDirection">Qt::RightToLeft</link></para>
                        </item>
                        <item>
                            <para>-qmljsdebugger=, activates the QML/JS debugger with a specified port. The value must be of format port:1234[,block], where block is optional and will make the application wait until a debugger connects to it.</para>
                        </item>
                    </list>
                    <see-also>
                        <link raw="QCoreApplication::arguments()" href="../qtcore/qcoreapplication.html#arguments" type="function">QCoreApplication::arguments()</link>
                    </see-also>
                </description>
            </function>
            <function name="QApplication" fullname="QApplication::QApplication" href="qapplication.html#QApplication-1" status="internal" access="private" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="212" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="" signature="QApplication(const QApplication &amp;)">
                <parameter type="const QApplication &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="aboutQt" fullname="QApplication::aboutQt" href="qapplication.html#aboutQt" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="205" meta="slot" virtual="non" const="false" static="true" final="false" override="false" type="void" signature="void aboutQt()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1885" column="4">
                    <para>Displays a simple message box about Qt. The message includes the version number of Qt being used by the application.</para>
                    <para>This is useful for inclusion in the Help menu of an application, as shown in the <link raw="mainwindows/menus" href="qtwidgets-mainwindows-menus-example.html#" type="">Menus</link> example.</para>
                    <para>This function is a convenience slot for <link raw="QMessageBox::aboutQt()" href="qmessagebox.html#aboutQt" type="function">QMessageBox::aboutQt()</link>.</para>
                </description>
            </function>
            <function name="activeModalWidget" fullname="QApplication::activeModalWidget" href="qapplication.html#activeModalWidget" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="131" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QWidget *" signature="QWidget * activeModalWidget()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="765" column="4">
                    <para>Returns the active modal widget.</para>
                    <para>A modal widget is a special top-level widget which is a subclass of <link raw="QDialog" href="qdialog.html" type="class">QDialog</link> that specifies the modal parameter of the constructor as true. A modal widget must be closed before the user can continue with other parts of the program.</para>
                    <para>Modal widgets are organized in a stack. This function returns the active modal widget at the top of the stack.</para>
                    <see-also>
                        <link raw="activePopupWidget()" href="qapplication.html#activePopupWidget" type="function">activePopupWidget()</link>
                        <link raw="topLevelWidgets()" href="qapplication.html#topLevelWidgets" type="function">topLevelWidgets()</link>
                    </see-also>
                </description>
            </function>
            <function name="activePopupWidget" fullname="QApplication::activePopupWidget" href="qapplication.html#activePopupWidget" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="130" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QWidget *" signature="QWidget * activePopupWidget()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="743" column="4">
                    <para>Returns the active popup widget.</para>
                    <para>A popup widget is a special top-level widget that sets the <teletype type="highlighted">Qt::WType_Popup</teletype> widget flag, e.g. the <link raw="QMenu" href="qmenu.html" type="class">QMenu</link> widget. When the application opens a popup widget, all events are sent to the popup. Normal widgets and modal widgets cannot be accessed before the popup widget is closed.</para>
                    <para>Only other popup widgets may be opened when a popup widget is shown. The popup widgets are organized in a stack. This function returns the active popup widget at the top of the stack.</para>
                    <see-also>
                        <link raw="activeModalWidget()" href="qapplication.html#activeModalWidget" type="function">activeModalWidget()</link>
                        <link raw="topLevelWidgets()" href="qapplication.html#topLevelWidgets" type="function">topLevelWidgets()</link>
                    </see-also>
                </description>
            </function>
            <function name="activeWindow" fullname="QApplication::activeWindow" href="qapplication.html#activeWindow" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="134" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QWidget *" signature="QWidget * activeWindow()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1800" column="4">
                    <para>Returns the application top-level window that has the keyboard input focus, or <teletype type="highlighted">nullptr</teletype> if no application window has the focus. There might be an  even if there is no <link raw="focusWidget()" href="qapplication.html#focusWidget" type="function">focusWidget()</link>, for example if no widget in that window accepts key events.</para>
                    <see-also>
                        <link raw="setActiveWindow()" href="qapplication.html#setActiveWindow" type="function">setActiveWindow()</link>
                        <link raw="QWidget::setFocus()" href="qwidget.html#setFocus-1" type="function">QWidget::setFocus()</link>
                        <link raw="QWidget::hasFocus()" href="qwidget.html#focus-prop" type="function">QWidget::hasFocus()</link>
                        <link raw="focusWidget()" href="qapplication.html#focusWidget" type="function">focusWidget()</link>
                    </see-also>
                </description>
            </function>
            <function name="alert" fullname="QApplication::alert" href="qapplication.html#alert" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="146" since="4.3" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="void" signature="void alert(QWidget *widget, int msec)">
                <parameter type="QWidget *" name="widget" default=""/>
                <parameter type="int" name="msec" default="0"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="3942" column="4">
                    <para>Causes an alert to be shown for <argument>widget</argument> if the window is not the active window. The alert is shown for <argument>msec</argument> miliseconds. If <argument>msec</argument> is zero (the default), then the alert is shown indefinitely until the window becomes active again.</para>
                    <para>Currently this function does nothing on Qt for Embedded Linux.</para>
                    <para>On , this works more at the application level and will cause the application icon to bounce in the dock.</para>
                    <para>On Windows, this causes the window's taskbar entry to flash for a time. If <argument>msec</argument> is zero, the flashing will stop and the taskbar entry will turn a different color (currently orange).</para>
                    <para>On X11, this will cause the window to be marked as &quot;demands attention&quot;, the window must not be hidden (i.e. not have hide() called on it, but be visible in some sort of way) in order for this to work.</para>
                </description>
            </function>
            <function name="allWidgets" fullname="QApplication::allWidgets" href="qapplication.html#allWidgets" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="125" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QWidgetList" signature="QWidgetList allWidgets()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1712" column="4">
                    <para>Returns a list of all the widgets in the application.</para>
                    <para>The list is empty (<link raw="QList::isEmpty()" href="../qtcore/qlist.html#isEmpty" type="function">QList::isEmpty()</link>) if there are no widgets.</para>
                    <para>
                        <bold>Note:</bold> Some of the widgets may be hidden.</para>
                    <para>Example:</para>
                    <code>void updateAllWidgets()
{
    const QWidgetList allWidgets = QApplication::allWidgets();
    for (QWidget *widget : allWidgets)
        widget-&gt;update();
}</code>
                    <see-also>
                        <link raw="topLevelWidgets()" href="qapplication.html#topLevelWidgets" type="function">topLevelWidgets()</link>
                        <link raw="QWidget::isVisible()" href="qwidget.html#visible-prop" type="function">QWidget::isVisible()</link>
                    </see-also>
                </description>
            </function>
            <function name="autoSipEnabled" fullname="QApplication::autoSipEnabled" href="qapplication.html#autoSipEnabled-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="203" meta="slot" virtual="non" const="true" static="false" final="false" override="false" associated-property="autoSipEnabled" type="bool" signature="bool autoSipEnabled() const">
                <description path="" line="0" column="0">
                    <see-also>setAutoSipEnabled()</see-also>
                </description>
            </function>
            <function name="beep" fullname="QApplication::beep" href="qapplication.html#beep" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="145" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="void" signature="void beep()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="4148" column="4">
                    <para>Sounds the bell, using the default volume and sound. The function is <italic>not</italic> available in Qt for Embedded Linux.</para>
                </description>
            </function>
            <function name="closeAllWindows" fullname="QApplication::closeAllWindows" href="qapplication.html#closeAllWindows" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="204" meta="slot" virtual="non" const="false" static="true" final="false" override="false" type="void" signature="void closeAllWindows()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1861" column="4">
                    <para>Closes all top-level windows.</para>
                    <para>This function is particularly useful for applications with many top-level windows. It could, for example, be connected to a Exit entry in the File menu:</para>
                    <code>    const QIcon exitIcon = QIcon::fromTheme(&quot;application-exit&quot;);
    QAction *exitAct = fileMenu-&gt;addAction(exitIcon, tr(&quot;E&amp;xit&quot;), qApp, &amp;QApplication::closeAllWindows);
    exitAct-&gt;setShortcuts(QKeySequence::Quit);
    exitAct-&gt;setStatusTip(tr(&quot;Exit the application&quot;));
    fileMenu-&gt;addAction(exitAct);</code>
                    <para>The windows are closed in random order, until one window does not accept the close event. The application quits when the last window was successfully closed; this can be turned off by setting <link raw="quitOnLastWindowClosed" href="../qtgui/qguiapplication.html#quitOnLastWindowClosed-prop" type="function">quitOnLastWindowClosed</link> to false.</para>
                    <see-also>
                        <link raw="quitOnLastWindowClosed" href="../qtgui/qguiapplication.html#quitOnLastWindowClosed-prop" type="function">quitOnLastWindowClosed</link>
                        <link raw="lastWindowClosed()" href="../qtgui/qguiapplication.html#lastWindowClosed" type="function">lastWindowClosed()</link>
                        <link raw="QWidget::close()" href="qwidget.html#close" type="function">QWidget::close()</link>
                        <link raw="QWidget::closeEvent()" href="qwidget.html#closeEvent" type="function">QWidget::closeEvent()</link>
                        <link raw="lastWindowClosed()" href="../qtgui/qguiapplication.html#lastWindowClosed" type="function">lastWindowClosed()</link>
                        <link raw="QCoreApplication::quit()" href="../qtcore/qcoreapplication.html#quit" type="function">QCoreApplication::quit()</link>
                        <link raw="topLevelWidgets()" href="qapplication.html#topLevelWidgets" type="function">topLevelWidgets()</link>
                        <link raw="QWidget::isWindow()" href="qwidget.html#isWindow" type="function">QWidget::isWindow()</link>
                    </see-also>
                </description>
            </function>
            <function name="colorSpec" fullname="QApplication::colorSpec" href="qapplication-obsolete.html#colorSpec" status="obsolete" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="103" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="int" signature="int colorSpec()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1247" column="4">
                    <para>Returns the color specification.</para>
                    <see-also>
                        <link raw="QApplication::setColorSpec()" href="qapplication-obsolete.html#setColorSpec" type="function">QApplication::setColorSpec()</link>
                    </see-also>
                </description>
            </function>
            <function name="compressEvent" fullname="QApplication::compressEvent" href="qapplication.html#compressEvent" status="internal" access="private" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="209" meta="plain" virtual="virtual" const="false" static="false" final="false" override="true" type="bool" signature="bool compressEvent(QEvent *event, QObject *receiver, QPostEventList *postedEvents) override">
                <parameter type="QEvent *" name="event" default=""/>
                <parameter type="QObject *" name="receiver" default=""/>
                <parameter type="QPostEventList *" name="postedEvents" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="949" column="4"/>
            </function>
            <function name="cursorFlashTime" fullname="QApplication::cursorFlashTime" href="qapplication.html#cursorFlashTime-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="149" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="cursorFlashTime" type="int" signature="int cursorFlashTime()">
                <description path="" line="0" column="0">
                    <see-also>setCursorFlashTime()</see-also>
                </description>
            </function>
            <function name="d_func" fullname="QApplication::d_func" href="qapplication.html#d_func" status="internal" access="private" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="213" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="QApplicationPrivate *" signature="QApplicationPrivate * d_func()">
                <description path="" line="0" column="0"/>
            </function>
            <function name="d_func" fullname="QApplication::d_func" href="qapplication.html#d_func-1" status="internal" access="private" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="213" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="const QApplicationPrivate *" signature="const QApplicationPrivate * d_func() const">
                <description path="" line="0" column="0"/>
            </function>
            <function name="desktop" fullname="QApplication::desktop" href="qapplication.html#desktop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="128" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QDesktopWidget *" signature="QDesktopWidget * desktop()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="2773" column="4">
                    <para>Returns the desktop widget (also called the root window).</para>
                    <para>The desktop may be composed of multiple screens, so it would be incorrect, for example, to attempt to <italic>center</italic> some widget in the desktop's geometry. <link raw="QDesktopWidget" href="qdesktopwidget.html" type="class">QDesktopWidget</link> has various functions for obtaining useful geometries upon the desktop, such as <link raw="QDesktopWidget::screenGeometry()" href="qdesktopwidget-obsolete.html#screenGeometry" type="function">QDesktopWidget::screenGeometry()</link> and <link raw="QDesktopWidget::availableGeometry()" href="qdesktopwidget-obsolete.html#availableGeometry" type="function">QDesktopWidget::availableGeometry()</link>.</para>
                    <para>On X11, it is also possible to draw on the desktop.</para>
                </description>
            </function>
            <function name="doubleClickInterval" fullname="QApplication::doubleClickInterval" href="qapplication.html#doubleClickInterval-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="152" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="doubleClickInterval" type="int" signature="int doubleClickInterval()">
                <description path="" line="0" column="0">
                    <see-also>setDoubleClickInterval()</see-also>
                </description>
            </function>
            <function name="event" fullname="QApplication::event" href="qapplication.html#event" status="active" access="protected" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="208" meta="plain" virtual="virtual" const="false" static="false" final="false" override="true" type="bool" signature="bool event(QEvent *e) override">
                <parameter type="QEvent *" name="e" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1916" column="4"/>
            </function>
            <function name="exec" fullname="QApplication::exec" href="qapplication.html#exec" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="179" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="int" signature="int exec()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="2865" column="4">
                    <para>Enters the main event loop and waits until <link raw="exit()" href="../qtcore/qcoreapplication.html#exit" type="function">exit()</link> is called, then returns the value that was set to <link raw="exit()" href="../qtcore/qcoreapplication.html#exit" type="function">exit()</link> (which is 0 if <link raw="exit()" href="../qtcore/qcoreapplication.html#exit" type="function">exit()</link> is called via <link raw="quit()" href="../qtcore/qcoreapplication.html#quit" type="function">quit()</link>).</para>
                    <para>It is necessary to call this function to start event handling. The main event loop receives events from the window system and dispatches these to the application widgets.</para>
                    <para>Generally, no user interaction can take place before calling . As a special case, modal widgets like <link raw="QMessageBox" href="qmessagebox.html" type="class">QMessageBox</link> can be used before calling , because modal widgets call  to start a local event loop.</para>
                    <para>To make your application perform idle processing, i.e., executing a special function whenever there are no pending events, use a <link raw="QTimer" href="../qtcore/qtimer.html" type="class">QTimer</link> with 0 timeout. More advanced idle processing schemes can be achieved using <link raw="processEvents()" href="../qtcore/qcoreapplication.html#processEvents" type="function">processEvents()</link>.</para>
                    <para>We recommend that you connect clean-up code to the <link raw="QCoreApplication::aboutToQuit()" href="../qtcore/qcoreapplication.html#aboutToQuit" type="function">aboutToQuit()</link> signal, instead of putting it in your application's <teletype type="highlighted">main()</teletype> function. This is because, on some platforms the  call may not return. For example, on the Windows platform, when the user logs off, the system terminates the process after Qt closes all top-level windows. Hence, there is <italic>no guarantee</italic> that the application will have time to exit its event loop and execute code at the end of the <teletype type="highlighted">main()</teletype> function, after the  call.</para>
                    <see-also>
                        <link raw="quitOnLastWindowClosed" href="../qtgui/qguiapplication.html#quitOnLastWindowClosed-prop" type="function">quitOnLastWindowClosed</link>
                        <link raw="QCoreApplication::quit()" href="../qtcore/qcoreapplication.html#quit" type="function">QCoreApplication::quit()</link>
                        <link raw="QCoreApplication::exit()" href="../qtcore/qcoreapplication.html#exit" type="function">QCoreApplication::exit()</link>
                        <link raw="QCoreApplication::processEvents()" href="../qtcore/qcoreapplication.html#processEvents" type="function">QCoreApplication::processEvents()</link>
                        <link raw="QCoreApplication::exec()" href="../qtcore/qcoreapplication.html#exec" type="function">QCoreApplication::exec()</link>
                    </see-also>
                </description>
            </function>
            <function name="focusChanged" fullname="QApplication::focusChanged" href="qapplication.html#focusChanged" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="194" since="4.1" meta="signal" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void focusChanged(QWidget *old, QWidget *now)">
                <parameter type="QWidget *" name="old" default=""/>
                <parameter type="QWidget *" name="now" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1901" column="4">
                    <para>This signal is emitted when the widget that has keyboard focus changed from <argument>old</argument> to <argument>now</argument>, i.e., because the user pressed the tab-key, clicked into a widget or changed the active window. Both <argument>old</argument> and <argument>now</argument> can be the null-pointer.</para>
                    <para>The signal is emitted after both widget have been notified about the change through <link raw="QFocusEvent" href="../qtgui/qfocusevent.html" type="class">QFocusEvent</link>.</para>
                    <see-also>
                        <link raw="QWidget::setFocus()" href="qwidget.html#setFocus-1" type="function">QWidget::setFocus()</link>
                        <link raw="QWidget::clearFocus()" href="qwidget.html#clearFocus" type="function">QWidget::clearFocus()</link>
                        <link raw="Qt::FocusReason" href="../qtcore/qt.html#FocusReason-enum" type="enum" enum="Qt::FocusReason">Qt::FocusReason</link>
                    </see-also>
                </description>
            </function>
            <function name="focusWidget" fullname="QApplication::focusWidget" href="qapplication.html#focusWidget" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="132" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QWidget *" signature="QWidget * focusWidget()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1732" column="4">
                    <para>Returns the application widget that has the keyboard input focus, or <teletype type="highlighted">nullptr</teletype> if no widget in this application has the focus.</para>
                    <see-also>
                        <link raw="QWidget::setFocus()" href="qwidget.html#setFocus-1" type="function">QWidget::setFocus()</link>
                        <link raw="QWidget::hasFocus()" href="qwidget.html#focus-prop" type="function">QWidget::hasFocus()</link>
                        <link raw="activeWindow()" href="qapplication.html#activeWindow" type="function">activeWindow()</link>
                        <link raw="focusChanged()" href="qapplication.html#focusChanged" type="function">focusChanged()</link>
                    </see-also>
                </description>
            </function>
            <function name="font" fullname="QApplication::font" href="qapplication.html#font" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="114" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QFont" signature="QFont font()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1496" column="4">
                    <para>Returns the default application font.</para>
                    <see-also>
                        <link raw="setFont()" href="qapplication.html#setFont" type="function">setFont()</link>
                        <link raw="fontMetrics()" href="qapplication.html#fontMetrics" type="function">fontMetrics()</link>
                        <link raw="QWidget::font()" href="qwidget.html#font-prop" type="function">QWidget::font()</link>
                    </see-also>
                </description>
            </function>
            <function name="font" fullname="QApplication::font" href="qapplication.html#font-1" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="115" meta="plain" virtual="non" const="false" static="true" final="false" override="false" overload="true" overload-number="1" type="QFont" signature="QFont font(const QWidget *widget)">
                <parameter type="const QWidget *" name="widget" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1506" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the default font for the <argument>widget</argument>.</para>
                    <see-also>
                        <link raw="fontMetrics()" href="qapplication.html#fontMetrics" type="function">fontMetrics()</link>
                        <link raw="QWidget::setFont()" href="qwidget.html#font-prop" type="function">QWidget::setFont()</link>
                    </see-also>
                </description>
            </function>
            <function name="font" fullname="QApplication::font" href="qapplication.html#font-2" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="116" meta="plain" virtual="non" const="false" static="true" final="false" override="false" overload="true" overload-number="2" type="QFont" signature="QFont font(const char *className)">
                <parameter type="const char *" name="className" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1541" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the font for widgets of the given <argument>className</argument>.</para>
                    <see-also>
                        <link raw="setFont()" href="qapplication.html#setFont" type="function">setFont()</link>
                        <link raw="QWidget::font()" href="qwidget.html#font-prop" type="function">QWidget::font()</link>
                    </see-also>
                </description>
            </function>
            <function name="fontMetrics" fullname="QApplication::fontMetrics" href="qapplication.html#fontMetrics" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="118" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QFontMetrics" signature="QFontMetrics fontMetrics()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1814" column="4">
                    <para>Returns display (screen) font metrics for the application font.</para>
                    <see-also>
                        <link raw="font()" href="qapplication.html#font" type="function">font()</link>
                        <link raw="setFont()" href="qapplication.html#setFont" type="function">setFont()</link>
                        <link raw="QWidget::fontMetrics()" href="qwidget.html#fontMetrics" type="function">QWidget::fontMetrics()</link>
                        <link raw="QPainter::fontMetrics()" href="../qtgui/qpainter.html#fontMetrics" type="function">QPainter::fontMetrics()</link>
                    </see-also>
                </description>
            </function>
            <function name="globalStrut" fullname="QApplication::globalStrut" href="qapplication.html#globalStrut-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="162" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="globalStrut" type="QSize" signature="QSize globalStrut()">
                <description path="" line="0" column="0">
                    <see-also>setGlobalStrut()</see-also>
                </description>
            </function>
            <function name="isEffectEnabled" fullname="QApplication::isEffectEnabled" href="qapplication.html#isEffectEnabled" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="169" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="bool" signature="bool isEffectEnabled(Qt::UIEffect effect)">
                <parameter type="Qt::UIEffect" name="effect" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="4127" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if <argument>effect</argument> is enabled; otherwise returns <teletype type="highlighted">false</teletype>.</para>
                    <para>By default, Qt will try to use the desktop settings. To prevent this, call <link raw="setDesktopSettingsAware" href="../qtgui/qguiapplication.html#setDesktopSettingsAware" type="function">setDesktopSettingsAware</link>(false).</para>
                    <para>
                        <bold>Note:</bold> All effects are disabled on screens running at less than 16-bit color depth.</para>
                    <see-also>
                        <link raw="setEffectEnabled()" href="qapplication.html#setEffectEnabled" type="function">setEffectEnabled()</link>
                        <link raw="Qt::UIEffect" href="../qtcore/qt.html#UIEffect-enum" type="enum" enum="Qt::UIEffect">Qt::UIEffect</link>
                    </see-also>
                </description>
            </function>
            <function name="keyboardInputDirection" fullname="QApplication::keyboardInputDirection" href="qapplication-obsolete.html#keyboardInputDirection" status="obsolete" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="175" since="4.2" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="Qt::LayoutDirection" signature="Qt::LayoutDirection keyboardInputDirection()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="4024" column="4">
                    <para>Returns the current keyboard input direction. Replaced with <link raw="QInputMethod::inputDirection()" href="../qtgui/qinputmethod.html#inputDirection-prop" type="function">QInputMethod::inputDirection()</link></para>
                    <see-also>
                        <link raw="QInputMethod::inputDirection()" href="../qtgui/qinputmethod.html#inputDirection-prop" type="function">QInputMethod::inputDirection()</link>
                    </see-also>
                </description>
            </function>
            <function name="keyboardInputInterval" fullname="QApplication::keyboardInputInterval" href="qapplication.html#keyboardInputInterval-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="155" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="keyboardInputInterval" type="int" signature="int keyboardInputInterval()">
                <description path="" line="0" column="0">
                    <see-also>setKeyboardInputInterval()</see-also>
                </description>
            </function>
            <function name="keyboardInputLocale" fullname="QApplication::keyboardInputLocale" href="qapplication-obsolete.html#keyboardInputLocale" status="obsolete" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="173" since="4.2" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QLocale" signature="QLocale keyboardInputLocale()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="4170" column="4">
                    <para>Returns the current keyboard input locale. Replaced with <link raw="QInputMethod::locale()" href="../qtgui/qinputmethod.html#locale-prop" type="function">QInputMethod::locale()</link></para>
                </description>
            </function>
            <function name="keypadNavigationEnabled" fullname="QApplication::keypadNavigationEnabled" href="qapplication-obsolete.html#keypadNavigationEnabled" status="obsolete" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="187" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="bool" signature="bool keypadNavigationEnabled()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="3920" column="4">
                    <para>Returns <teletype type="highlighted">true</teletype> if Qt is set to use keypad navigation; otherwise returns false. The default value is false.</para>
                    <para>This feature is available in Qt for Embedded Linux, and Windows CE only.</para>
                    <para>
                        <bold>Note:</bold> On Windows CE this feature is disabled by default for touch device mkspecs. To enable keypad navigation, build Qt with QT_KEYPAD_NAVIGATION defined.</para>
                    <see-also>
                        <link raw="setKeypadNavigationEnabled()" href="qapplication-obsolete.html#setKeypadNavigationEnabled" type="function">setKeypadNavigationEnabled()</link>
                        <link raw="navigationMode()" href="qapplication.html#navigationMode" type="function">navigationMode()</link>
                    </see-also>
                </description>
            </function>
            <function name="metaObject" fullname="QApplication::metaObject" href="qapplication.html#metaObject" status="internal" access="private" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="74" meta="plain" virtual="virtual" const="true" static="false" final="false" override="true" type="const QMetaObject *" signature="const QMetaObject * metaObject() const override">
                <description path="" line="0" column="0"/>
            </function>
            <function name="navigationMode" fullname="QApplication::navigationMode" href="qapplication.html#navigationMode" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="190" since="4.6" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="Qt::NavigationMode" signature="Qt::NavigationMode navigationMode()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="3882" column="4">
                    <para>Returns what kind of focus navigation Qt is using.</para>
                    <para>This feature is available in Qt for Embedded Linux only.</para>
                    <see-also>
                        <link raw="setNavigationMode()" href="qapplication.html#setNavigationMode" type="function">setNavigationMode()</link>
                        <link raw="keypadNavigationEnabled()" href="qapplication-obsolete.html#keypadNavigationEnabled" type="function">keypadNavigationEnabled()</link>
                    </see-also>
                </description>
            </function>
            <function name="notify" fullname="QApplication::notify" href="qapplication.html#notify" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="180" meta="plain" virtual="virtual" const="false" static="false" final="false" override="true" type="bool" signature="bool notify(QObject *receiver, QEvent *e) override">
                <parameter type="QObject *" name="receiver" default=""/>
                <parameter type="QEvent *" name="e" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="2927" column="4"/>
            </function>
            <function name="operator=" fullname="QApplication::operator=" href="qapplication.html#operator-eq" status="internal" access="private" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="212" meta="copy-assign" virtual="non" const="false" static="false" final="false" override="false" type="QApplication &amp;" signature="QApplication &amp; operator=(const QApplication &amp;)">
                <parameter type="const QApplication &amp;" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="palette" fullname="QApplication::palette" href="qapplication.html#palette" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="111" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QPalette" signature="QPalette palette(const QWidget *widget)">
                <parameter type="const QWidget *" name="widget" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1349" column="4">
                    <para>If a <argument>widget</argument> is passed, the default palette for the widget's class is returned. This may or may not be the application palette. In most cases there is no special palette for certain types of widgets, but one notable exception is the popup menu under Windows, if the user has defined a special background color for menus in the display settings.</para>
                    <see-also>
                        <link raw="setPalette()" href="qapplication.html#setPalette" type="function">setPalette()</link>
                        <link raw="QWidget::palette()" href="qwidget.html#palette-prop" type="function">QWidget::palette()</link>
                    </see-also>
                </description>
            </function>
            <function name="palette" fullname="QApplication::palette" href="qapplication.html#palette-1" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="112" meta="plain" virtual="non" const="false" static="true" final="false" override="false" overload="true" overload-number="1" type="QPalette" signature="QPalette palette(const char *className)">
                <parameter type="const char *" name="className" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1378" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the palette for widgets of the given <argument>className</argument>.</para>
                    <see-also>
                        <link raw="setPalette()" href="qapplication.html#setPalette" type="function">setPalette()</link>
                        <link raw="QWidget::palette()" href="qwidget.html#palette-prop" type="function">QWidget::palette()</link>
                    </see-also>
                </description>
            </function>
            <function name="qApp" fullname="QApplication::qApp" href="qapplication.html#qApp" status="active" access="public" related="true" meta="macrowithoutparams" virtual="non" const="false" static="false" final="false" override="false" type="" signature="qApp">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="4159" column="4">
                    <para>A global pointer referring to the unique application object. It is equivalent to <link raw="QCoreApplication::instance()" href="../qtcore/qcoreapplication.html#instance" type="function">QCoreApplication::instance()</link>, but cast as a <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> pointer, so only valid when the unique application object is a <link raw="QApplication" href="qapplication.html" type="class">QApplication</link>.</para>
                    <see-also>
                        <link raw="QCoreApplication::instance()" href="../qtcore/qcoreapplication.html#instance" type="function">QCoreApplication::instance()</link>
                        <link raw="qGuiApp" href="../qtgui/qguiapplication.html#qGuiApp" type="function">qGuiApp</link>
                    </see-also>
                </description>
            </function>
            <function name="qt_metacall" fullname="QApplication::qt_metacall" href="qapplication.html#qt_metacall" status="internal" access="private" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="74" meta="plain" virtual="virtual" const="false" static="false" final="false" override="true" type="int" signature="int qt_metacall(QMetaObject::Call , int , void **) override">
                <parameter type="QMetaObject::Call" name="" default=""/>
                <parameter type="int" name="" default=""/>
                <parameter type="void **" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="qt_metacast" fullname="QApplication::qt_metacast" href="qapplication.html#qt_metacast" status="internal" access="private" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="74" meta="plain" virtual="virtual" const="false" static="false" final="false" override="true" type="void *" signature="void * qt_metacast(const char *) override">
                <parameter type="const char *" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="qt_static_metacall" fullname="QApplication::qt_static_metacall" href="qapplication.html#qt_static_metacall" status="internal" access="private" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="74" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="void" signature="void qt_static_metacall(QObject *, QMetaObject::Call , int , void **)">
                <parameter type="QObject *" name="" default=""/>
                <parameter type="QMetaObject::Call" name="" default=""/>
                <parameter type="int" name="" default=""/>
                <parameter type="void **" name="" default=""/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="setActiveWindow" fullname="QApplication::setActiveWindow" href="qapplication.html#setActiveWindow" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="135" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="void" signature="void setActiveWindow(QWidget *active)">
                <parameter type="QWidget *" name="active" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="2028" column="4">
                    <para>Sets the active window to the <argument>active</argument> widget in response to a system event. The function is called from the platform specific event handlers.</para>
                    <para>
                        <bold>Warning:</bold> This function does <italic>not</italic> set the keyboard focus to the active widget. Call <link raw="QWidget::activateWindow()" href="qwidget.html#activateWindow" type="function">QWidget::activateWindow()</link> instead.</para>
                    <para>It sets the <link raw="activeWindow()" href="qapplication.html#activeWindow" type="function">activeWindow()</link> and <link raw="focusWidget()" href="qapplication.html#focusWidget" type="function">focusWidget()</link> attributes and sends proper <link raw="QEvent::WindowActivate" href="../qtcore/qevent.html#Type-enum" type="enum" enum="QEvent::Type">WindowActivate</link>/<link raw="QEvent::WindowDeactivate" href="../qtcore/qevent.html#Type-enum" type="enum" enum="QEvent::Type">WindowDeactivate</link> and <link raw="QEvent::FocusIn" href="../qtcore/qevent.html#Type-enum" type="enum" enum="QEvent::Type">FocusIn</link>/<link raw="QEvent::FocusOut" href="../qtcore/qevent.html#Type-enum" type="enum" enum="QEvent::Type">FocusOut</link> events to all appropriate widgets. The window will then be painted in active state (e.g. cursors in line edits will blink), and it will have tool tips enabled.</para>
                    <see-also>
                        <link raw="activeWindow()" href="qapplication.html#activeWindow" type="function">activeWindow()</link>
                        <link raw="QWidget::activateWindow()" href="qwidget.html#activateWindow" type="function">QWidget::activateWindow()</link>
                    </see-also>
                </description>
            </function>
            <function name="setAutoSipEnabled" fullname="QApplication::setAutoSipEnabled" href="qapplication.html#autoSipEnabled-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="202" meta="slot" virtual="non" const="false" static="false" final="false" override="false" associated-property="autoSipEnabled" type="void" signature="void setAutoSipEnabled(const bool enabled)">
                <parameter type="const bool" name="enabled" default=""/>
                <description path="" line="0" column="0">
                    <see-also>autoSipEnabled()</see-also>
                </description>
            </function>
            <function name="setColorSpec" fullname="QApplication::setColorSpec" href="qapplication-obsolete.html#setColorSpec" status="obsolete" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="104" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="void" signature="void setColorSpec(int spec)">
                <parameter type="int" name="spec" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1259" column="4">
                    <para>Sets the color specification for the application to <argument>spec</argument>.</para>
                    <para>This call has no effect.</para>
                    <para>The color specification controls how the application allocates colors when run on a display with a limited amount of colors, e.g. 8 bit / 256 color displays.</para>
                    <para>The color specification must be set before you create the <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> object.</para>
                    <para>The options are:</para>
                    <list type="bullet">
                        <item>
                            <para>
                                <link raw="QApplication::NormalColor" href="qapplication-obsolete.html#ColorSpec-enum" type="enum" enum="QApplication::ColorSpec">QApplication::NormalColor</link>. This is the default color allocation strategy. Use this option if your application uses buttons, menus, texts and pixmaps with few colors. With this option, the application uses system global colors. This works fine for most applications under X11, but on the Windows platform, it may cause dithering of non-standard colors.</para>
                        </item>
                        <item>
                            <para>
                                <link raw="QApplication::CustomColor" href="qapplication-obsolete.html#ColorSpec-enum" type="enum" enum="QApplication::ColorSpec">QApplication::CustomColor</link>. Use this option if your application needs a small number of custom colors. On X11, this option is the same as <link raw="NormalColor" href="qapplication-obsolete.html#ColorSpec-enum" type="enum" enum="QApplication::ColorSpec">NormalColor</link>. On Windows, Qt creates a Windows palette, and allocates colors to it on demand.</para>
                        </item>
                        <item>
                            <para>
                                <link raw="QApplication::ManyColor" href="qapplication-obsolete.html#ColorSpec-enum" type="enum" enum="QApplication::ColorSpec">QApplication::ManyColor</link>. Use this option if your application is very color hungry, e.g., it requires thousands of colors.  Under X11 the effect is:</para>
                            <list type="bullet">
                                <item>
                                    <para>For 256-color displays which have at best a 256 color true color visual, the default visual is used, and colors are allocated from a color cube. The color cube is the 6x6x6 (216 color) &quot;Web palette&quot; (the red, green, and blue components always have one of the following values: 0x00, 0x33, 0x66, 0x99, 0xCC, or 0xFF), but the number of colors can be changed by the <italic>-ncols</italic> option. The user can force the application to use the true color visual with the <link raw="QApplication::QApplication()" href="qapplication.html#QApplication" type="function">-visual</link> option.</para>
                                </item>
                                <item>
                                    <para>For 256-color displays which have a true color visual with more than 256 colors, use that visual. Silicon Graphics X servers this feature, for example. They provide an 8 bit visual by default but can deliver true color when asked.</para>
                                </item>
                            </list>
                            <para>On Windows, Qt creates a Windows palette, and fills it with a color cube.</para>
                        </item>
                    </list>
                    <para>Be aware that the <link raw="CustomColor" href="qapplication-obsolete.html#ColorSpec-enum" type="enum" enum="QApplication::ColorSpec">CustomColor</link> and <link raw="ManyColor" href="qapplication-obsolete.html#ColorSpec-enum" type="enum" enum="QApplication::ColorSpec">ManyColor</link> choices may lead to colormap flashing: The foreground application gets (most) of the available colors, while the background windows will look less attractive.</para>
                    <para>Example:</para>
                    <code>int main(int argc, char *argv[])
{
    QApplication::setColorSpec(QApplication::ManyColor);
    QApplication app(argc, argv);
    ...
    return app.exec();
}</code>
                    <see-also>
                        <link raw="colorSpec()" href="qapplication-obsolete.html#colorSpec" type="function">colorSpec()</link>
                    </see-also>
                </description>
            </function>
            <function name="setCursorFlashTime" fullname="QApplication::setCursorFlashTime" href="qapplication.html#cursorFlashTime-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="148" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="cursorFlashTime" type="void" signature="void setCursorFlashTime(int )">
                <parameter type="int" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>cursorFlashTime()</see-also>
                </description>
            </function>
            <function name="setDoubleClickInterval" fullname="QApplication::setDoubleClickInterval" href="qapplication.html#doubleClickInterval-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="151" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="doubleClickInterval" type="void" signature="void setDoubleClickInterval(int )">
                <parameter type="int" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>doubleClickInterval()</see-also>
                </description>
            </function>
            <function name="setEffectEnabled" fullname="QApplication::setEffectEnabled" href="qapplication.html#setEffectEnabled" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="170" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="void" signature="void setEffectEnabled(Qt::UIEffect effect, bool enable)">
                <parameter type="Qt::UIEffect" name="effect" default=""/>
                <parameter type="bool" name="enable" default="true"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="4102" column="4">
                    <para>Enables the UI effect <argument>effect</argument> if <argument>enable</argument> is true, otherwise the effect will not be used.</para>
                    <para>
                        <bold>Note:</bold> All effects are disabled on screens running at less than 16-bit color depth.</para>
                    <see-also>
                        <link raw="isEffectEnabled()" href="qapplication.html#isEffectEnabled" type="function">isEffectEnabled()</link>
                        <link raw="Qt::UIEffect" href="../qtcore/qt.html#UIEffect-enum" type="enum" enum="Qt::UIEffect">Qt::UIEffect</link>
                        <link raw="setDesktopSettingsAware()" href="../qtgui/qguiapplication.html#setDesktopSettingsAware" type="function">setDesktopSettingsAware()</link>
                    </see-also>
                </description>
            </function>
            <function name="setFont" fullname="QApplication::setFont" href="qapplication.html#setFont" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="117" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="void" signature="void setFont(const QFont &amp;font, const char *className)">
                <parameter type="const QFont &amp;" name="font" default=""/>
                <parameter type="const char *" name="className" default="nullptr"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1560" column="4">
                    <para>Changes the default application font to <argument>font</argument>. If <argument>className</argument> is passed, the change applies only to classes that inherit <argument>className</argument> (as reported by <link raw="QObject::inherits()" href="../qtcore/qobject.html#inherits" type="function">QObject::inherits()</link>).</para>
                    <para>On application start-up, the default font depends on the window system. It can vary depending on both the window system version and the locale. This function lets you override the default font; but overriding may be a bad idea because, for example, some locales need extra large fonts to support their special characters.</para>
                    <para>
                        <bold>Warning:</bold> Do not use this function in conjunction with <link raw="Qt Style Sheets" href="stylesheet.html#" type="page" page="Qt Style Sheets">Qt Style Sheets</link>. The font of an application can be customized using the &quot;font&quot; style sheet property. To set a bold font for all QPushButtons, set the application <link raw="styleSheet()" href="qapplication.html#styleSheet-prop" type="function">styleSheet()</link> as &quot;<link raw="QPushButton" href="qpushbutton.html" type="class">QPushButton</link> { font: bold }&quot;</para>
                    <see-also>
                        <link raw="font()" href="qapplication.html#font" type="function">font()</link>
                        <link raw="fontMetrics()" href="qapplication.html#fontMetrics" type="function">fontMetrics()</link>
                        <link raw="QWidget::setFont()" href="qwidget.html#font-prop" type="function">QWidget::setFont()</link>
                    </see-also>
                </description>
            </function>
            <function name="setGlobalStrut" fullname="QApplication::setGlobalStrut" href="qapplication.html#globalStrut-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="161" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="globalStrut" type="void" signature="void setGlobalStrut(const QSize &amp;)">
                <parameter type="const QSize &amp;" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>globalStrut()</see-also>
                </description>
            </function>
            <function name="setGraphicsSystem" fullname="QApplication::setGraphicsSystem" href="qapplication-obsolete.html#setGraphicsSystem" status="obsolete" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="107" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="void" signature="void setGraphicsSystem(const QString &amp;)">
                <parameter type="const QString &amp;" name="" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="351" column="4">
                    <para>This call has no effect.</para>
                    <para>Use the QPA framework instead.</para>
                </description>
            </function>
            <function name="setKeyboardInputInterval" fullname="QApplication::setKeyboardInputInterval" href="qapplication.html#keyboardInputInterval-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="154" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="keyboardInputInterval" type="void" signature="void setKeyboardInputInterval(int )">
                <parameter type="int" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>keyboardInputInterval()</see-also>
                </description>
            </function>
            <function name="setKeypadNavigationEnabled" fullname="QApplication::setKeypadNavigationEnabled" href="qapplication-obsolete.html#setKeypadNavigationEnabled" status="obsolete" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="185" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="void" signature="void setKeypadNavigationEnabled(bool enable)">
                <parameter type="bool" name="enable" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="3897" column="4">
                    <para>Sets whether Qt should use focus navigation suitable for use with a minimal keypad.</para>
                    <para>This feature is available in Qt for Embedded Linux, and Windows CE only.</para>
                    <para>
                        <bold>Note:</bold> On Windows CE this feature is disabled by default for touch device mkspecs. To enable keypad navigation, build Qt with QT_KEYPAD_NAVIGATION defined.</para>
                    <see-also>
                        <link raw="keypadNavigationEnabled()" href="qapplication-obsolete.html#keypadNavigationEnabled" type="function">keypadNavigationEnabled()</link>
                        <link raw="setNavigationMode()" href="qapplication.html#setNavigationMode" type="function">setNavigationMode()</link>
                    </see-also>
                </description>
            </function>
            <function name="setNavigationMode" fullname="QApplication::setNavigationMode" href="qapplication.html#setNavigationMode" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="189" since="4.6" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="void" signature="void setNavigationMode(Qt::NavigationMode mode)">
                <parameter type="Qt::NavigationMode" name="mode" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="3868" column="4">
                    <para>Sets the kind of focus navigation Qt should use to <argument>mode</argument>.</para>
                    <para>This feature is available in Qt for Embedded Linux only.</para>
                    <see-also>
                        <link raw="navigationMode()" href="qapplication.html#navigationMode" type="function">navigationMode()</link>
                        <link raw="keypadNavigationEnabled()" href="qapplication-obsolete.html#keypadNavigationEnabled" type="function">keypadNavigationEnabled()</link>
                    </see-also>
                </description>
            </function>
            <function name="setPalette" fullname="QApplication::setPalette" href="qapplication.html#setPalette" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="113" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="void" signature="void setPalette(const QPalette &amp;palette, const char *className)">
                <parameter type="const QPalette &amp;" name="palette" default=""/>
                <parameter type="const char *" name="className" default="nullptr"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1437" column="4">
                    <para>Changes the default application palette to <argument>palette</argument>.</para>
                    <para>If <argument>className</argument> is passed, the change applies only to widgets that inherit <argument>className</argument> (as reported by <link raw="QObject::inherits()" href="../qtcore/qobject.html#inherits" type="function">QObject::inherits()</link>). If <argument>className</argument> is left 0, the change affects all widgets, thus overriding any previously set class specific palettes.</para>
                    <para>The palette may be changed according to the current GUI style in <link raw="QStyle::polish()" href="qstyle.html#polish" type="function">QStyle::polish()</link>.</para>
                    <para>
                        <bold>Warning:</bold> Do not use this function in conjunction with <link raw="Qt Style Sheets" href="stylesheet.html#" type="page" page="Qt Style Sheets">Qt Style Sheets</link>. When using style sheets, the palette of a widget can be customized using the &quot;color&quot;, &quot;background-color&quot;, &quot;selection-color&quot;, &quot;selection-background-color&quot; and &quot;alternate-background-color&quot;.</para>
                    <para>
                        <bold>Note:</bold> Some styles do not use the palette for all drawing, for instance, if they make use of native theme engines. This is the case for the Windows Vista and  styles.</para>
                    <see-also>
                        <link raw="QWidget::setPalette()" href="qwidget.html#palette-prop" type="function">QWidget::setPalette()</link>
                        <link raw="palette()" href="qapplication.html#palette" type="function">palette()</link>
                        <link raw="QStyle::polish()" href="qstyle.html#polish" type="function">QStyle::polish()</link>
                    </see-also>
                </description>
            </function>
            <function name="setStartDragDistance" fullname="QApplication::setStartDragDistance" href="qapplication.html#startDragDistance-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="166" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="startDragDistance" type="void" signature="void setStartDragDistance(int l)">
                <parameter type="int" name="l" default=""/>
                <description path="" line="0" column="0">
                    <see-also>startDragDistance()</see-also>
                </description>
            </function>
            <function name="setStartDragTime" fullname="QApplication::setStartDragTime" href="qapplication.html#startDragTime-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="164" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="startDragTime" type="void" signature="void setStartDragTime(int ms)">
                <parameter type="int" name="ms" default=""/>
                <description path="" line="0" column="0">
                    <see-also>startDragTime()</see-also>
                </description>
            </function>
            <function name="setStyle" fullname="QApplication::setStyle" href="qapplication.html#setStyle" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="99" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="void" signature="void setStyle(QStyle *style)">
                <parameter type="QStyle *" name="style" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1105" column="4">
                    <para>Sets the application's GUI style to <argument>style</argument>. Ownership of the style object is transferred to <link raw="QApplication" href="qapplication.html" type="class">QApplication</link>, so <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> will delete the style object on application exit or when a new style is set and the old style is still the parent of the application object.</para>
                    <para>Example usage:</para>
                    <code>QApplication::setStyle(QStyleFactory::create(&quot;Fusion&quot;));</code>
                    <para>When switching application styles, the color palette is set back to the initial colors or the system defaults. This is necessary since certain styles have to adapt the color palette to be fully style-guide compliant.</para>
                    <para>Setting the style before a palette has been set, i.e., before creating <link raw="QApplication" href="qapplication.html" type="class">QApplication</link>, will cause the application to use <link raw="QStyle::standardPalette()" href="qstyle.html#standardPalette" type="function">QStyle::standardPalette()</link> for the palette.</para>
                    <para>
                        <bold>Warning:</bold> Qt style sheets are currently not supported for custom <link raw="QStyle" href="qstyle.html" type="class">QStyle</link> subclasses. We plan to address this in some future release.</para>
                    <see-also>
                        <link raw="style()" href="qapplication.html#style" type="function">style()</link>
                        <link raw="QStyle" href="qstyle.html" type="class">QStyle</link>
                        <link raw="setPalette()" href="qapplication.html#setPalette" type="function">setPalette()</link>
                        <link raw="desktopSettingsAware()" href="../qtgui/qguiapplication.html#desktopSettingsAware" type="function">desktopSettingsAware()</link>
                    </see-also>
                </description>
            </function>
            <function name="setStyle" fullname="QApplication::setStyle" href="qapplication.html#setStyle-1" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="100" meta="plain" virtual="non" const="false" static="true" final="false" override="false" overload="true" overload-number="1" type="QStyle *" signature="QStyle * setStyle(const QString &amp;style)">
                <parameter type="const QString &amp;" name="style" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1220" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Requests a <link raw="QStyle" href="qstyle.html" type="class">QStyle</link> object for <argument>style</argument> from the <link raw="QStyleFactory" href="qstylefactory.html" type="class">QStyleFactory</link>.</para>
                    <para>The string must be one of the <link raw="QStyleFactory::keys()" href="qstylefactory.html#keys" type="function">QStyleFactory::keys()</link>, typically one of &quot;windows&quot;, &quot;windowsvista&quot;, &quot;fusion&quot;, or &quot;macintosh&quot;. Style names are case insensitive.</para>
                    <para>Returns <teletype type="highlighted">nullptr</teletype> if an unknown <argument>style</argument> is passed, otherwise the <link raw="QStyle" href="qstyle.html" type="class">QStyle</link> object returned is set as the application's GUI style.</para>
                    <para>
                        <bold>Warning:</bold> To ensure that the application's style is set correctly, it is best to call this function before the <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> constructor, if possible.</para>
                </description>
            </function>
            <function name="setStyleSheet" fullname="QApplication::setStyleSheet" href="qapplication.html#styleSheet-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="200" meta="slot" virtual="non" const="false" static="false" final="false" override="false" associated-property="styleSheet" type="void" signature="void setStyleSheet(const QString &amp;sheet)">
                <parameter type="const QString &amp;" name="sheet" default=""/>
                <description path="" line="0" column="0">
                    <see-also>styleSheet()</see-also>
                </description>
            </function>
            <function name="setWheelScrollLines" fullname="QApplication::setWheelScrollLines" href="qapplication.html#wheelScrollLines-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="158" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="wheelScrollLines" type="void" signature="void setWheelScrollLines(int )">
                <parameter type="int" name="" default=""/>
                <description path="" line="0" column="0">
                    <see-also>wheelScrollLines()</see-also>
                </description>
            </function>
            <function name="setWindowIcon" fullname="QApplication::setWindowIcon" href="qapplication.html#windowIcon-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="121" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="windowIcon" type="void" signature="void setWindowIcon(const QIcon &amp;icon)">
                <parameter type="const QIcon &amp;" name="icon" default=""/>
                <description path="" line="0" column="0">
                    <see-also>windowIcon()</see-also>
                </description>
            </function>
            <function name="startDragDistance" fullname="QApplication::startDragDistance" href="qapplication.html#startDragDistance-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="167" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="startDragDistance" type="int" signature="int startDragDistance()">
                <description path="" line="0" column="0">
                    <see-also>setStartDragDistance()</see-also>
                </description>
            </function>
            <function name="startDragTime" fullname="QApplication::startDragTime" href="qapplication.html#startDragTime-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="165" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="startDragTime" type="int" signature="int startDragTime()">
                <description path="" line="0" column="0">
                    <see-also>setStartDragTime()</see-also>
                </description>
            </function>
            <function name="style" fullname="QApplication::style" href="qapplication.html#style" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="98" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QStyle *" signature="QStyle * style()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1045" column="4">
                    <para>Returns the application's style object.</para>
                    <see-also>
                        <link raw="setStyle()" href="qapplication.html#setStyle" type="function">setStyle()</link>
                        <link raw="QStyle" href="qstyle.html" type="class">QStyle</link>
                    </see-also>
                </description>
            </function>
            <function name="styleSheet" fullname="QApplication::styleSheet" href="qapplication.html#styleSheet-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="197" meta="plain" virtual="non" const="true" static="false" final="false" override="false" associated-property="styleSheet" type="QString" signature="QString styleSheet() const">
                <description path="" line="0" column="0">
                    <see-also>setStyleSheet()</see-also>
                </description>
            </function>
            <function name="syncX" fullname="QApplication::syncX" href="qapplication.html#syncX" status="internal" access="private" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="143" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="void" signature="void syncX()">
                <description path="" line="0" column="0"/>
            </function>
            <function name="topLevelAt" fullname="QApplication::topLevelAt" href="qapplication.html#topLevelAt" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="139" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QWidget *" signature="QWidget * topLevelAt(const QPoint &amp;point)">
                <parameter type="const QPoint &amp;" name="point" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="360" column="4">
                    <para>Returns the top-level widget at the given <argument>point</argument>; returns <teletype type="highlighted">nullptr</teletype> if there is no such widget.</para>
                </description>
            </function>
            <function name="topLevelAt" fullname="QApplication::topLevelAt" href="qapplication.html#topLevelAt-1" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="140" meta="plain" virtual="non" const="false" static="true" final="false" override="false" overload="true" overload-number="1" type="QWidget *" signature="QWidget * topLevelAt(int x, int y)">
                <parameter type="int" name="x" default=""/>
                <parameter type="int" name="y" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="375" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the top-level widget at the point (<argument>x</argument>, <argument>y</argument>); returns 0 if there is no such widget.</para>
                </description>
            </function>
            <function name="topLevelWidgets" fullname="QApplication::topLevelWidgets" href="qapplication.html#topLevelWidgets" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="126" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QWidgetList" signature="QWidgetList topLevelWidgets()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1687" column="4">
                    <para>Returns a list of the top-level widgets (windows) in the application.</para>
                    <para>
                        <bold>Note:</bold> Some of the top-level widgets may be hidden, for example a tooltip if no tooltip is currently shown.</para>
                    <para>Example:</para>
                    <code>void showAllHiddenTopLevelWidgets()
{
    const QWidgetList topLevelWidgets = QApplication::topLevelWidgets();
    for (QWidget *widget : topLevelWidgets) {
        if (widget-&gt;isHidden())
            widget-&gt;show();
    }
}</code>
                    <see-also>
                        <link raw="allWidgets()" href="qapplication.html#allWidgets" type="function">allWidgets()</link>
                        <link raw="QWidget::isWindow()" href="qwidget.html#isWindow" type="function">QWidget::isWindow()</link>
                        <link raw="QWidget::isHidden()" href="qwidget.html#isHidden" type="function">QWidget::isHidden()</link>
                    </see-also>
                </description>
            </function>
            <function name="tr" fullname="QApplication::tr" href="qapplication.html#tr" status="internal" access="private" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="74" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QString" signature="QString tr(const char *s, const char *c, int n)">
                <parameter type="const char *" name="s" default=""/>
                <parameter type="const char *" name="c" default="Q_OBJECT"/>
                <parameter type="int" name="n" default="Q_OBJECT"/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="trUtf8" fullname="QApplication::trUtf8" href="qapplication.html#trUtf8" status="internal" access="private" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="74" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QString" signature="QString trUtf8(const char *s, const char *c, int n)">
                <parameter type="const char *" name="s" default=""/>
                <parameter type="const char *" name="c" default="Q_OBJECT"/>
                <parameter type="int" name="n" default="Q_OBJECT"/>
                <description path="" line="0" column="0"/>
            </function>
            <function name="wheelScrollLines" fullname="QApplication::wheelScrollLines" href="qapplication.html#wheelScrollLines-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="159" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="wheelScrollLines" type="int" signature="int wheelScrollLines()">
                <description path="" line="0" column="0">
                    <see-also>setWheelScrollLines()</see-also>
                </description>
            </function>
            <function name="widgetAt" fullname="QApplication::widgetAt" href="qapplication.html#widgetAt" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="137" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="QWidget *" signature="QWidget * widgetAt(const QPoint &amp;point)">
                <parameter type="const QPoint &amp;" name="point" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="893" column="4">
                    <para>Returns the widget at global screen position <argument>point</argument>, or <teletype type="highlighted">nullptr</teletype> if there is no Qt widget there.</para>
                    <para>This function can be slow.</para>
                    <see-also>
                        <link raw="QCursor::pos()" href="../qtgui/qcursor.html#pos" type="function">QCursor::pos()</link>
                        <link raw="QWidget::grabMouse()" href="qwidget.html#grabMouse" type="function">QWidget::grabMouse()</link>
                        <link raw="QWidget::grabKeyboard()" href="qwidget.html#grabKeyboard" type="function">QWidget::grabKeyboard()</link>
                    </see-also>
                </description>
            </function>
            <function name="widgetAt" fullname="QApplication::widgetAt" href="qapplication.html#widgetAt-1" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="138" meta="plain" virtual="non" const="false" static="true" final="false" override="false" overload="true" overload-number="1" type="QWidget *" signature="QWidget * widgetAt(int x, int y)">
                <parameter type="int" name="x" default=""/>
                <parameter type="int" name="y" default=""/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="940" column="4">
                    <para>This is an overloaded function.</para>
                    <para>Returns the widget at global screen position (<argument>x</argument>, <argument>y</argument>), or <teletype type="highlighted">nullptr</teletype> if there is no Qt widget there.</para>
                </description>
            </function>
            <function name="windowIcon" fullname="QApplication::windowIcon" href="qapplication.html#windowIcon-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="122" meta="plain" virtual="non" const="false" static="true" final="false" override="false" associated-property="windowIcon" type="QIcon" signature="QIcon windowIcon()">
                <description path="" line="0" column="0">
                    <see-also>setWindowIcon()</see-also>
                </description>
            </function>
            <function name="~QApplication" fullname="QApplication::~QApplication" href="qapplication.html#dtor.QApplication" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="96" meta="destructor" virtual="virtual" const="false" static="false" final="false" override="false" type="" signature="~QApplication()">
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="785" column="4">
                    <para>Cleans up any window system resources that were allocated by this application. Sets the global variable <teletype type="highlighted">qApp</teletype> to <teletype type="highlighted">nullptr</teletype>.</para>
                </description>
            </function>
            <property name="cursorFlashTime" fullname="QApplication::cursorFlashTime" href="qapplication.html#cursorFlashTime-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="76" type="int" brief="The text cursor's flash (blink) time in milliseconds">
                <getter name="cursorFlashTime"/>
                <setter name="setCursorFlashTime"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="3978" column="4">
                    <brief>This property holds the text cursor's flash (blink) time in milliseconds.</brief>
                    <para>The flash time is the time required to display, invert and restore the caret display. Usually the text cursor is displayed for half the cursor flash time, then hidden for the same amount of time, but this may vary.</para>
                    <para>The default value on X11 is 1000 milliseconds. On Windows, the Control Panel value is used and setting this property sets the cursor flash time for all applications.</para>
                    <para>We recommend that widgets do not cache this value as it may change at any time if the user changes the global desktop settings.</para>
                    <para>
                        <bold>Note:</bold> This property may hold a negative value, for instance if cursor blinking is disabled.</para>
                </description>
            </property>
            <property name="autoSipEnabled" fullname="QApplication::autoSipEnabled" href="qapplication.html#autoSipEnabled-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="88" since="4.5" type="bool" brief="Toggles automatic SIP (software input panel) visibility">
                <getter name="autoSipEnabled"/>
                <setter name="setAutoSipEnabled"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="994" column="4">
                    <brief>This property holds toggles automatic SIP (software input panel) visibility.</brief>
                    <para>Set this property to <teletype type="highlighted">true</teletype> to automatically display the SIP when entering widgets that accept keyboard input. This property only affects widgets with the WA_InputMethodEnabled attribute set, and is typically used to launch a virtual keyboard on devices which have very few or no keys.</para>
                    <para>
                        <bold> The property only has an effect on platforms that use software input panels.</bold></para>
                    <para>The default is platform dependent.</para>
                </description>
            </property>
            <property name="keyboardInputInterval" fullname="QApplication::keyboardInputInterval" href="qapplication.html#keyboardInputInterval-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="78" since="4.2" type="int" brief="The time limit in milliseconds that distinguishes a key press from two consecutive key presses">
                <getter name="keyboardInputInterval"/>
                <setter name="setKeyboardInputInterval"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="4033" column="4">
                    <brief>This property holds the time limit in milliseconds that distinguishes a key press from two consecutive key presses.</brief>
                    <para>The default value on X11 is 400 milliseconds. On Windows and Mac OS, the operating system's value is used.</para>
                </description>
            </property>
            <property name="startDragTime" fullname="QApplication::startDragTime" href="qapplication.html#startDragTime-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="83" type="int" brief="The time in milliseconds that a mouse button must be held down before a drag and drop operation will begin">
                <getter name="startDragTime"/>
                <setter name="setStartDragTime"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="2805" column="4">
                    <brief>This property holds the time in milliseconds that a mouse button must be held down before a drag and drop operation will begin.</brief>
                    <para>If you support drag and drop in your application, and want to start a drag and drop operation after the user has held down a mouse button for a certain amount of time, you should use this property's value as the delay.</para>
                    <para>Qt also uses this delay internally, e.g. in <link raw="QTextEdit" href="qtextedit.html" type="class">QTextEdit</link> and <link raw="QLineEdit" href="qlineedit.html" type="class">QLineEdit</link>, for starting a drag.</para>
                    <para>The default value is 500 ms.</para>
                    <see-also>
                        <link raw="startDragDistance()" href="qapplication.html#startDragDistance-prop" type="function">startDragDistance()</link>
                        <link raw="Drag and Drop" href="graphicsview.html#drag-and-drop" type="page" page="Graphics View Framework">Drag and Drop</link>
                    </see-also>
                </description>
            </property>
            <property name="wheelScrollLines" fullname="QApplication::wheelScrollLines" href="qapplication.html#wheelScrollLines-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="80" type="int" brief="The number of lines to scroll a widget, when the mouse wheel is rotated">
                <getter name="wheelScrollLines"/>
                <setter name="setWheelScrollLines"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="4052" column="4">
                    <brief>This property holds the number of lines to scroll a widget, when the mouse wheel is rotated..</brief>
                    <para>If the value exceeds the widget's number of visible lines, the widget should interpret the scroll operation as a single <italic>page up</italic> or <italic>page down</italic>. If the widget is an <link raw="QAbstractItemView" href="qabstractitemview.html" type="class">item view class</link>, then the result of scrolling one <italic>line</italic> depends on the setting of the widget's <link raw="QAbstractItemView::verticalScrollMode()" href="qabstractitemview.html#verticalScrollMode-prop" type="function">scroll mode</link>. Scroll one <italic>line</italic> can mean <link raw="QAbstractItemView::ScrollPerItem" href="qabstractitemview.html#ScrollMode-enum" type="enum" enum="QAbstractItemView::ScrollMode">scroll one item</link> or <link raw="QAbstractItemView::ScrollPerPixel" href="qabstractitemview.html#ScrollMode-enum" type="enum" enum="QAbstractItemView::ScrollMode">scroll one pixel</link>.</para>
                    <para>By default, this property has a value of 3.</para>
                    <see-also>
                        <link raw="QStyleHints::wheelScrollLines()" href="../qtgui/qstylehints.html#wheelScrollLines-prop" type="function">QStyleHints::wheelScrollLines()</link>
                    </see-also>
                </description>
            </property>
            <property name="globalStrut" fullname="QApplication::globalStrut" href="qapplication.html#globalStrut-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="82" type="QSize" brief="The minimum size that any GUI element that the user can interact with should have">
                <getter name="globalStrut"/>
                <setter name="setGlobalStrut"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1323" column="4">
                    <brief>This property holds the minimum size that any GUI element that the user can interact with should have.</brief>
                    <para>For example, no button should be resized to be smaller than the global strut size. The strut size should be considered when reimplementing GUI controls that may be used on touch-screens or similar I/O devices.</para>
                    <para>Example:</para>
                    <code>QSize MyWidget::sizeHint() const
{
    return QSize(80, 25).expandedTo(QApplication::globalStrut());
}</code>
                    <para>By default, this property contains a <link raw="QSize" href="../qtcore/qsize.html" type="class">QSize</link> object with zero width and height.</para>
                </description>
            </property>
            <property name="doubleClickInterval" fullname="QApplication::doubleClickInterval" href="qapplication.html#doubleClickInterval-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="77" type="int" brief="The time limit in milliseconds that distinguishes a double click from two consecutive mouse clicks">
                <getter name="doubleClickInterval"/>
                <setter name="setDoubleClickInterval"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="4006" column="4">
                    <brief>This property holds the time limit in milliseconds that distinguishes a double click from two consecutive mouse clicks.</brief>
                    <para>The default value on X11 is 400 milliseconds. On Windows and Mac OS, the operating system's value is used.</para>
                </description>
            </property>
            <property name="startDragDistance" fullname="QApplication::startDragDistance" href="qapplication.html#startDragDistance-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="84" type="int">
                <getter name="startDragDistance"/>
                <setter name="setStartDragDistance"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="2838" column="4">
                    <para>If you support drag and drop in your application, and want to start a drag and drop operation after the user has moved the cursor a certain distance with a button held down, you should use this property's value as the minimum distance required.</para>
                    <para>For example, if the mouse position of the click is stored in <teletype type="highlighted">startPos</teletype> and the current position (e.g. in the mouse move event) is <teletype type="highlighted">currentPos</teletype>, you can find out if a drag should be started with code like this:</para>
                    <code>if ((startPos - currentPos).manhattanLength() &gt;=
        QApplication::startDragDistance())
    startTheDrag();</code>
                    <para>Qt uses this value internally, e.g. in <link raw="QFileDialog" href="qfiledialog.html" type="class">QFileDialog</link>.</para>
                    <para>The default value (if the platform doesn't provide a different default) is 10 pixels.</para>
                    <see-also>
                        <link raw="startDragTime()" href="qapplication.html#startDragTime-prop" type="function">startDragTime()</link>
                        <link raw="QPoint::manhattanLength()" href="../qtcore/qpoint.html#manhattanLength" type="function">QPoint::manhattanLength()</link>
                        <link raw="Drag and Drop" href="graphicsview.html#drag-and-drop" type="page" page="Graphics View Framework">Drag and Drop</link>
                    </see-also>
                </description>
            </property>
            <property name="styleSheet" fullname="QApplication::styleSheet" href="qapplication.html#styleSheet-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="86" since="4.2" type="QString" brief="The application style sheet">
                <getter name="styleSheet"/>
                <setter name="setStyleSheet"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="983" column="4">
                    <brief>This property holds the application style sheet.</brief>
                    <para>By default, this property returns an empty string unless the user specifies the <teletype type="highlighted">-stylesheet</teletype> option on the command line when running the application.</para>
                    <see-also>
                        <link raw="QWidget::setStyle()" href="qwidget.html#setStyle" type="function">QWidget::setStyle()</link>
                        <link raw="Qt Style Sheets" href="stylesheet.html#" type="page" page="Qt Style Sheets">Qt Style Sheets</link>
                    </see-also>
                </description>
            </property>
            <property name="windowIcon" fullname="QApplication::windowIcon" href="qapplication.html#windowIcon-prop" status="active" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="75" type="QIcon" brief="The default window icon">
                <getter name="windowIcon"/>
                <getter name="windowIcon"/>
                <setter name="setWindowIcon"/>
                <setter name="setWindowIcon"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="1652" column="4">
                    <brief>This property holds the default window icon.</brief>
                    <see-also>
                        <link raw="QWidget::setWindowIcon()" href="qwidget.html#windowIcon-prop" type="function">QWidget::setWindowIcon()</link>
                        <link raw="Setting the Application Icon" href="../qtdoc/appicon.html#" type="page" page="Setting the Application Icon">Setting the Application Icon</link>
                    </see-also>
                </description>
            </property>
            <enum name="ColorSpec" fullname="QApplication::ColorSpec" href="qapplication-obsolete.html#ColorSpec-enum" status="obsolete" access="public" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="101">
                <value name="NormalColor" value="0"/>
                <value name="CustomColor" value="1"/>
                <value name="ManyColor" value="2"/>
                <description path="C:/Qt/5.13.0/Src/qtbase/src/widgets/kernel/qapplication.cpp" line="338" column="4">
                    <list type="enum">
                        <definition>
                            <term>QApplication::NormalColor</term>NormalColor</definition>
                        <item>
                            <para>the default color allocation policy</para>
                        </item>
                        <definition>
                            <term>QApplication::CustomColor</term>CustomColor</definition>
                        <item>
                            <para>the same as  for X11; allocates colors to a palette on demand under Windows</para>
                        </item>
                        <definition>
                            <term>QApplication::ManyColor</term>ManyColor</definition>
                        <item>
                            <para>the right choice for applications that use thousands of colors</para>
                        </item>
                    </list>
                    <para>See <link raw="setColorSpec()" href="qapplication-obsolete.html#setColorSpec" type="function">setColorSpec()</link> for full details.</para>
                </description>
            </enum>
            <variable name="staticMetaObject" fullname="QApplication::staticMetaObject" href="qapplication.html#staticMetaObject-var" status="internal" access="private" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="74" type="const QMetaObject" static="true">
                <description path="" line="0" column="0"/>
            </variable>
            <struct name="QPrivateSignal" fullname="QApplication::QPrivateSignal" href="qapplication-qprivatesignal.html" status="internal" access="private" location="QtWidgets\qapplication.h" filepath="C:/Qt/5.13.0/mingw73_64/include/QtWidgets\qapplication.h" lineno="74">
                <description path="" line="0" column="0"/>
            </struct>
        </class>
    </document>
</WebXML>
