<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.2"
    xml:lang="en">
    <db:info>
        <db:title>Qt 3D: Simple QML Example</db:title>
        <db:abstract>
            <db:para>A QML application that demonstrates how to render a scene in Qt 3D</db:para>
        </db:abstract>
        <db:pubdate>2018-09-28+02:00</db:pubdate>
        <db:date>2018-09-28+02:00</db:date>
        <db:productname>Qt</db:productname>
        <db:productnumber>1.2</db:productnumber>
    </db:info>
    <db:para>A QML application that demonstrates how to render a scene in Qt 3D.</db:para>
    <db:mediaobject>
        <db:imageobject>
            <db:imagedata fileref="images/simple-qml.png"/>
        </db:imageobject>
    </db:mediaobject>
    <db:para>
        <db:emphasis>Simple</db:emphasis> demonstrates how to render a scene in Qt 3D.</db:para>
    <db:section xml:id="running-the-example">
        <db:title>Running the Example</db:title>
        <db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html" xrefstyle="page" annotations="Qt Creator Manual">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html" xrefstyle="page" annotations="Qt Creator: Building and Running an Example">Building and Running an Example</db:link>.</db:para>
    </db:section>
    <db:section xml:id="setting-up-the-scene">
        <db:title>Setting Up the Scene</db:title>
        <db:para>We set up the entire scene in the <db:emphasis>main.qml</db:emphasis> file.</db:para>
        <db:para>To be able to use the types in the Q3D and Q3D Render modules, we must import the modules:</db:para>
        <db:programlisting language="other">import Qt3D.Core 2.0
            import Qt3D.Render 2.0</db:programlisting>
        <db:para>The first entities we create are a <db:link xlink:href="qml-qt3d-render-camera.html" xrefstyle="" annotations="Camera">Camera</db:link>, which represents the camera used for the final rendering, and a camera controller, which allows us to control this camera using the keyboard or the mouse:</db:para>
        <db:programlisting language="other">    Camera {
            id: camera
            projectionType: CameraLens.PerspectiveProjection
            fieldOfView: 45
            aspectRatio: 16/9
            nearPlane : 0.1
            farPlane : 1000.0
            position: Qt.vector3d( 0.0, 0.0, -40.0 )
            upVector: Qt.vector3d( 0.0, 1.0, 0.0 )
            viewCenter: Qt.vector3d( 0.0, 0.0, 0.0 )
            }    }</db:programlisting>
        <db:programlisting language="other">    }</db:programlisting>
        <db:para>A <db:link xlink:href="qml-qt3d-render-rendersettings.html" xrefstyle="" annotations="RenderSettings">RenderSettings</db:link> entity specifies a <db:link xlink:href="qml-qt3d-extras-forwardrenderer.html" xrefstyle="" annotations="ForwardRenderer">ForwardRenderer</db:link> as the active framegraph:</db:para>
        <db:programlisting language="other">    }
            
            OrbitCameraController {
            camera: camera
            }
            
            components: [
            RenderSettings {
            activeFrameGraph: ForwardRenderer {
            clearColor: Qt.rgba(0, 0.5, 1, 1)
            camera: camera
            }
            },</db:programlisting>
        <db:para>The event source is set by the Qt3DQuickWindow:</db:para>
        <db:programlisting language="other">        InputSettings { }</db:programlisting>
    </db:section>
    <db:section xml:id="specifying-settings-and-axes">
        <db:title>Specifying Settings and Axes</db:title>
        <db:para>In the <db:emphasis>CameraController.qml</db:emphasis> file, we use the <db:link xlink:href="qml-qt3d-input-logicaldevice.html" xrefstyle="" annotations="LogicalDevice">LogicalDevice</db:link> type to define a set of actions and axes to use within the application:</db:para>
        <db:programlisting language="other">    LogicalDevice {
            id: cameraControlDevice
            
            actions: [
            Action {
            name: "LMB"
            inputs: [
            ActionInput {
            sourceDevice: mouseSourceDevice
            buttons: [MouseEvent.LeftButton]
            ...</db:programlisting>
        <db:programlisting language="other">        axes: [
            // Rotation
            Axis {
            name: "RX"
            inputs: [
            AnalogAxisInput {
            sourceDevice: mouseSourceDevice
            axis: MouseDevice.X
            }
            ]
            ...</db:programlisting>
    </db:section>
</db:article>
