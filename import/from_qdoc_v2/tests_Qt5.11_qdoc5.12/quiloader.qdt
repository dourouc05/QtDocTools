<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.2">
   <db:info>
      <db:title>QUiLoader</db:title>
      <db:abstract>
         <db:para>Enables standalone applications to dynamically create user interfaces at run-time using the information stored in UI files or specified in plugin paths</db:para>
      </db:abstract>
   </db:info>
   <db:classsynopsis>
      <db:ooclass>
         <db:classname>QUiLoader</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="module">QtUiTools</db:classsynopsisinfo>
      <db:namespacesynopsisinfo role="headers">#include &lt;quiloader.h&gt;</db:namespacesynopsisinfo>
      <db:classsynopsisinfo role="inherits">QObject</db:classsynopsisinfo>
   </db:classsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code> class enables standalone applications to dynamically create user interfaces at run-time using the information stored in UI files or specified in plugin paths.</db:para>
      <db:para>In addition, you can customize or create your own user interface by deriving your own loader class.</db:para>
      <db:para>If you have a custom component or an application that embeds <db:emphasis>Qt Designer</db:emphasis>, you can also use the <db:code><db:link xlink:href="qformbuilder.html" xrefstyle="class" annotations="QFormBuilder">QFormBuilder</db:link></db:code> class provided by the <db:link xlink:href="qtdesigner-module.html" xrefstyle="module" annotations="QtDesigner">QtDesigner</db:link> module to create user interfaces from UI files.</db:para>
      <db:para>The <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code> class provides a collection of functions allowing you to create widgets based on the information stored in UI files (created with <db:emphasis>Qt Designer</db:emphasis>) or available in the specified plugin paths. The specified plugin paths can be retrieved using the <db:code><db:link xlink:href="quiloader.html#pluginPaths" xrefstyle="function" annotations="pluginPaths()">pluginPaths()</db:link></db:code> function. Similarly, the contents of a UI file can be retrieved using the <db:code><db:link xlink:href="quiloader.html#load" xrefstyle="function" annotations="load()">load()</db:link></db:code> function. For example:</db:para>
      <db:programlisting>
MyWidget::MyWidget(QWidget *parent)
    : QWidget(parent)
{
    QUiLoader loader;
    QFile file(":/forms/myform.ui");
    file.open(QFile::ReadOnly);
    QWidget *myWidget = loader.load(&amp;file, this);
    file.close();

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&gt;addWidget(myWidget);
    setLayout(layout);
}
</db:programlisting>
      <db:para>By including the user interface in the form's resources (<db:code>myform.qrc</db:code>), we ensure that it will be present at run-time:</db:para>
      <db:programlisting>&lt;!DOCTYPE RCC&gt;&lt;RCC version="1.0"&gt;
&lt;qresource prefix="/forms"&gt;
&lt;file&gt;myform.ui&lt;/file&gt;
&lt;/qresource&gt;
&lt;/RCC&gt;
</db:programlisting>
      <db:para>The <db:code><db:link xlink:href="quiloader.html#availableWidgets" xrefstyle="function" annotations="availableWidgets()">availableWidgets()</db:link></db:code> function returns a <db:code><db:link xlink:href="qstringlist.html" xrefstyle="class" annotations="QStringList">QStringList</db:link></db:code> with the class names of the widgets available in the specified plugin paths. To create these widgets, simply use the <db:code><db:link xlink:href="quiloader.html#createWidget" xrefstyle="function" annotations="createWidget()">createWidget()</db:link></db:code> function. For example:</db:para>
      <db:programlisting>
QWidget *loadCustomWidget(QWidget *parent)
{
    QUiLoader loader;
    QWidget *myWidget;

    QStringList availableWidgets = loader.availableWidgets();

    if (availableWidgets.contains("AnalogClock"))
        myWidget = loader.createWidget("AnalogClock", parent);

    return myWidget;
}
</db:programlisting>
      <db:para>To make a custom widget available to the loader, you can use the <db:code><db:link xlink:href="quiloader.html#addPluginPath" xrefstyle="function" annotations="addPluginPath()">addPluginPath()</db:link></db:code> function; to remove all available widgets, you can call the <db:code><db:link xlink:href="quiloader.html#clearPluginPaths" xrefstyle="function" annotations="clearPluginPaths()">clearPluginPaths()</db:link></db:code> function.</db:para>
      <db:para>The <db:code><db:link xlink:href="quiloader.html#createAction" xrefstyle="function" annotations="createAction()">createAction()</db:link></db:code>, <db:code><db:link xlink:href="quiloader.html#createActionGroup" xrefstyle="function" annotations="createActionGroup()">createActionGroup()</db:link></db:code>, <db:code><db:link xlink:href="quiloader.html#createLayout" xrefstyle="function" annotations="createLayout()">createLayout()</db:link></db:code>, and <db:code><db:link xlink:href="quiloader.html#createWidget" xrefstyle="function" annotations="createWidget()">createWidget()</db:link></db:code> functions are used internally by the <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code> class whenever it has to create an action, action group, layout, or widget respectively. For that reason, you can subclass the <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code> class and reimplement these functions to intervene the process of constructing a user interface. For example, you might want to have a list of the actions created when loading a form or creating a custom widget.</db:para>
      <db:para>For a complete example using the <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code> class, see the <db:link xlink:href="qtdesigner-calculatorbuilder-example.html" xrefstyle="page" annotations="Calculator Builder Example">Calculator Builder Example</db:link>.</db:para>
      <db:para>
         <db:emphasis role="bold">See Also:</db:emphasis>
         <db:simplelist type="vert">
            <db:member>
               <db:link xlink:href="qtuitools-index.html" xrefstyle="page" annotations="Qt UI Tools">Qt UI Tools</db:link>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qformbuilder.html" xrefstyle="class" annotations="QFormBuilder">QFormBuilder</db:link></db:code>
            </db:member>
         </db:simplelist>
      </db:para>
   </db:section>
   <db:section>
      <db:title>Member Function Documentation</db:title>
      <db:section>
         <db:title> QUiLoader::QUiLoader(QObject *parent)</db:title>
         <db:constructorsynopsis>
            <db:modifier>public</db:modifier>
            <db:methodname>QUiLoader</db:methodname>
            <db:methodparam>
               <db:type>QObject *</db:type>
               <db:parameter>parent</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
         </db:constructorsynopsis>
         <db:para>Creates a form loader with the given <db:code role="argument">parent</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title> QUiLoader::~QUiLoader()</db:title>
         <db:destructorsynopsis>
            <db:modifier>public</db:modifier>
            <db:methodname>~QUiLoader</db:methodname>
            <db:void/>
         </db:destructorsynopsis>
         <db:para>Destroys the loader.</db:para>
      </db:section>
      <db:section>
         <db:title>QAction * QUiLoader::createAction(QObject *parent, const QString &amp;name)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QAction *</db:type>
            <db:methodname>createAction</db:methodname>
            <db:methodparam>
               <db:type>QObject *</db:type>
               <db:parameter>parent</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>name</db:parameter>
               <db:initializer>QString()</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Creates a new action with the given <db:code role="argument">parent</db:code> and <db:code role="argument">name</db:code>.</db:para>
         <db:para>The function is also used internally by the <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code> class whenever it creates a widget. Hence, you can subclass <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code> and reimplement this function to intervene process of constructing a user interface or widget. However, in your implementation, ensure that you call <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code>'s version first.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#createActionGroup" xrefstyle="function" annotations="createActionGroup()">createActionGroup()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#createWidget" xrefstyle="function" annotations="createWidget()">createWidget()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#load" xrefstyle="function" annotations="load()">load()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QActionGroup * QUiLoader::createActionGroup(QObject *parent, const QString &amp;name)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QActionGroup *</db:type>
            <db:methodname>createActionGroup</db:methodname>
            <db:methodparam>
               <db:type>QObject *</db:type>
               <db:parameter>parent</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>name</db:parameter>
               <db:initializer>QString()</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Creates a new action group with the given <db:code role="argument">parent</db:code> and <db:code role="argument">name</db:code>.</db:para>
         <db:para>The function is also used internally by the <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code> class whenever it creates a widget. Hence, you can subclass <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code> and reimplement this function to intervene process of constructing a user interface or widget. However, in your implementation, ensure that you call <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code>'s version first.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#createAction" xrefstyle="function" annotations="createAction()">createAction()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#createWidget" xrefstyle="function" annotations="createWidget()">createWidget()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#load" xrefstyle="function" annotations="load()">load()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QDir QUiLoader::workingDirectory() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QDir</db:type>
            <db:methodname>workingDirectory</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the working directory of the loader.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#setWorkingDirectory" xrefstyle="function" annotations="setWorkingDirectory()">setWorkingDirectory()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QLayout * QUiLoader::createLayout(const QString &amp;className, QObject *parent, const QString &amp;name)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QLayout *</db:type>
            <db:methodname>createLayout</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>className</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QObject *</db:type>
               <db:parameter>parent</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>name</db:parameter>
               <db:initializer>QString()</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Creates a new layout with the given <db:code role="argument">parent</db:code> and <db:code role="argument">name</db:code> using the class specified by <db:code role="argument">className</db:code>.</db:para>
         <db:para>The function is also used internally by the <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code> class whenever it creates a widget. Hence, you can subclass <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code> and reimplement this function to intervene process of constructing a user interface or widget. However, in your implementation, ensure that you call <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code>'s version first.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#createWidget" xrefstyle="function" annotations="createWidget()">createWidget()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#load" xrefstyle="function" annotations="load()">load()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QString QUiLoader::errorString() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QString</db:type>
            <db:methodname>errorString</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns a human-readable description of the last error occurred in <db:code><db:link xlink:href="quiloader.html#load" xrefstyle="function" annotations="load()">load()</db:link></db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#load" xrefstyle="function" annotations="load()">load()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.0.</db:para>
      </db:section>
      <db:section>
         <db:title>QStringList QUiLoader::availableLayouts() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QStringList</db:type>
            <db:methodname>availableLayouts</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns a list naming all available layouts that can be built using the <db:code><db:link xlink:href="quiloader.html#createLayout" xrefstyle="function" annotations="createLayout()">createLayout()</db:link></db:code> function</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#createLayout" xrefstyle="function" annotations="createLayout()">createLayout()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.5.</db:para>
      </db:section>
      <db:section>
         <db:title>QStringList QUiLoader::availableWidgets() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QStringList</db:type>
            <db:methodname>availableWidgets</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns a list naming all available widgets that can be built using the <db:code><db:link xlink:href="quiloader.html#createWidget" xrefstyle="function" annotations="createWidget()">createWidget()</db:link></db:code> function, i.e all the widgets specified within the given plugin paths.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#pluginPaths" xrefstyle="function" annotations="pluginPaths()">pluginPaths()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#createWidget" xrefstyle="function" annotations="createWidget()">createWidget()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QStringList QUiLoader::pluginPaths() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QStringList</db:type>
            <db:methodname>pluginPaths</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns a list naming the paths in which the loader will search when locating custom widget plugins.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#addPluginPath" xrefstyle="function" annotations="addPluginPath()">addPluginPath()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#clearPluginPaths" xrefstyle="function" annotations="clearPluginPaths()">clearPluginPaths()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QWidget * QUiLoader::createWidget(const QString &amp;className, QWidget *parent, const QString &amp;name)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QWidget *</db:type>
            <db:methodname>createWidget</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>className</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QWidget *</db:type>
               <db:parameter>parent</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>name</db:parameter>
               <db:initializer>QString()</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Creates a new widget with the given <db:code role="argument">parent</db:code> and <db:code role="argument">name</db:code> using the class specified by <db:code role="argument">className</db:code>. You can use this function to create any of the widgets returned by the <db:code><db:link xlink:href="quiloader.html#availableWidgets" xrefstyle="function" annotations="availableWidgets()">availableWidgets()</db:link></db:code> function.</db:para>
         <db:para>The function is also used internally by the <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code> class whenever it creates a widget. Hence, you can subclass <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code> and reimplement this function to intervene process of constructing a user interface or widget. However, in your implementation, ensure that you call <db:code><db:link xlink:href="quiloader.html" xrefstyle="class" annotations="QUiLoader">QUiLoader</db:link></db:code>'s version first.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#availableWidgets" xrefstyle="function" annotations="availableWidgets()">availableWidgets()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#load" xrefstyle="function" annotations="load()">load()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QWidget * QUiLoader::load(QIODevice *device, QWidget *parentWidget)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QWidget *</db:type>
            <db:methodname>load</db:methodname>
            <db:methodparam>
               <db:type>QIODevice *</db:type>
               <db:parameter>device</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QWidget *</db:type>
               <db:parameter>parentWidget</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Loads a form from the given <db:code role="argument">device</db:code> and creates a new widget with the given <db:code role="argument">parentWidget</db:code> to hold its contents.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#createWidget" xrefstyle="function" annotations="createWidget()">createWidget()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#errorString" xrefstyle="function" annotations="errorString()">errorString()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QUiLoader::isLanguageChangeEnabled() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isLanguageChangeEnabled</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns true if dynamic retranslation on language change is enabled; returns false otherwise.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#setLanguageChangeEnabled" xrefstyle="function" annotations="setLanguageChangeEnabled()">setLanguageChangeEnabled()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.5.</db:para>
      </db:section>
      <db:section>
         <db:title>void QUiLoader::addPluginPath(const QString &amp;path)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>addPluginPath</db:methodname>
            <db:methodparam>
               <db:type>const QString &amp;</db:type>
               <db:parameter>path</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Adds the given <db:code role="argument">path</db:code> to the list of paths in which the loader will search when locating plugins.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#pluginPaths" xrefstyle="function" annotations="pluginPaths()">pluginPaths()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#clearPluginPaths" xrefstyle="function" annotations="clearPluginPaths()">clearPluginPaths()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QUiLoader::clearPluginPaths()</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>clearPluginPaths</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Clears the list of paths in which the loader will search when locating plugins.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#addPluginPath" xrefstyle="function" annotations="addPluginPath()">addPluginPath()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#pluginPaths" xrefstyle="function" annotations="pluginPaths()">pluginPaths()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QUiLoader::setLanguageChangeEnabled(bool enabled)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setLanguageChangeEnabled</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>enabled</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>If <db:code role="argument">enabled</db:code> is true, user interfaces loaded by this loader will automatically retranslate themselves upon receiving a language change event. Otherwise, the user interfaces will not be retranslated.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#isLanguageChangeEnabled" xrefstyle="function" annotations="isLanguageChangeEnabled()">isLanguageChangeEnabled()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.5.</db:para>
      </db:section>
      <db:section>
         <db:title>void QUiLoader::setWorkingDirectory(const QDir &amp;dir)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setWorkingDirectory</db:methodname>
            <db:methodparam>
               <db:type>const QDir &amp;</db:type>
               <db:parameter>dir</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the working directory of the loader to <db:code role="argument">dir</db:code>. The loader will look for other resources, such as icons and resource files, in paths relative to this directory.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="quiloader.html#workingDirectory" xrefstyle="function" annotations="workingDirectory()">workingDirectory()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
   </db:section>
</db:article>
