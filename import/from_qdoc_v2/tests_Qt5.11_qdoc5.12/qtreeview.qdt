<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.2">
   <db:info>
      <db:title>QTreeView</db:title>
      <db:abstract>
         <db:para>Default model/view implementation of a tree view</db:para>
      </db:abstract>
      <db:pubdate>2018-09-09+02:00</db:pubdate>
      <db:date>2018-09-09+02:00</db:date>
      <db:productname>Qt</db:productname>
      <db:productnumber>1.2</db:productnumber>
   </db:info>
   <db:classsynopsis>
      <db:ooclass>
         <db:classname>QTreeView</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="module">QtWidgets</db:classsynopsisinfo>
      <db:namespacesynopsisinfo role="headers">#include &lt;itemviews\qtreeview.h&gt;</db:namespacesynopsisinfo>
      <db:classsynopsisinfo role="inherits">QAbstractItemView</db:classsynopsisinfo>
      <db:classsynopsisinfo role="group">model-view</db:classsynopsisinfo>
      <db:classsynopsisinfo role="group">advanced</db:classsynopsisinfo>
   </db:classsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The <db:code><db:link xlink:href="qtreeview.html" xrefstyle="class" annotations="QTreeView">QTreeView</db:link></db:code> class provides a default model/view implementation of a tree view.</db:para>
      <db:mediaobject>
         <db:imageobject>
            <db:imagedata fileref="images/windows-treeview.png"/>
         </db:imageobject>
      </db:mediaobject>
      <db:para>A <db:code><db:link xlink:href="qtreeview.html" xrefstyle="class" annotations="QTreeView">QTreeView</db:link></db:code> implements a tree representation of items from a model. This class is used to provide standard hierarchical lists that were previously provided by the <db:code>QListView</db:code> class, but using the more flexible approach provided by Qt's model/view architecture.</db:para>
      <db:para>The <db:code><db:link xlink:href="qtreeview.html" xrefstyle="class" annotations="QTreeView">QTreeView</db:link></db:code> class is one of the <db:link xlink:href="model-view-programming.html#model-view-classes" xrefstyle="page" annotations="Model/View Classes">Model/View Classes</db:link> and is part of Qt's <db:link xlink:href="model-view-programming.html" xrefstyle="page" annotations="Model/View Programming">model/view framework</db:link>.</db:para>
      <db:para>
         <db:code><db:link xlink:href="qtreeview.html" xrefstyle="class" annotations="QTreeView">QTreeView</db:link></db:code> implements the interfaces defined by the <db:code><db:link xlink:href="qabstractitemview.html" xrefstyle="class" annotations="QAbstractItemView">QAbstractItemView</db:link></db:code> class to allow it to display data provided by models derived from the <db:code><db:link xlink:href="qabstractitemmodel.html" xrefstyle="class" annotations="QAbstractItemModel">QAbstractItemModel</db:link></db:code> class.</db:para>
      <db:para>It is simple to construct a tree view displaying data from a model. In the following example, the contents of a directory are supplied by a <db:code><db:link xlink:href="qfilesystemmodel.html" xrefstyle="class" annotations="QFileSystemModel">QFileSystemModel</db:link></db:code> and displayed as a tree:</db:para>
      <db:programlisting>
    QFileSystemModel *model = new QFileSystemModel;
    model-&gt;setRootPath(QDir::currentPath());
    QTreeView *tree = new QTreeView(splitter);

    tree-&gt;setModel(model);</db:programlisting>
      <db:para>The model/view architecture ensures that the contents of the tree view are updated as the model changes.</db:para>
      <db:para>Items that have children can be in an expanded (children are visible) or collapsed (children are hidden) state. When this state changes a <db:code><db:link xlink:href="qtreeview.html#collapsed" xrefstyle="function" annotations="collapsed()">collapsed()</db:link></db:code> or <db:code><db:link xlink:href="qtreeview.html#expanded" xrefstyle="function" annotations="expanded()">expanded()</db:link></db:code> signal is emitted with the model index of the relevant item.</db:para>
      <db:para>The amount of indentation used to indicate levels of hierarchy is controlled by the <db:code><db:link xlink:href="qtreeview.html#indentation-prop" xrefstyle="property" annotations="indentation">indentation</db:link></db:code> property.</db:para>
      <db:para>Headers in tree views are constructed using the <db:code><db:link xlink:href="qheaderview.html" xrefstyle="class" annotations="QHeaderView">QHeaderView</db:link></db:code> class and can be hidden using <db:code>header()-&gt;hide()</db:code>. Note that each header is configured with its <db:code><db:link xlink:href="qheaderview.html#stretchLastSection-prop" xrefstyle="property" annotations="QHeaderView::stretchLastSection">stretchLastSection</db:link></db:code> property set to true, ensuring that the view does not waste any of the space assigned to it for its header. If this value is set to true, this property will override the resize mode set on the last section in the header.</db:para>
      <db:para>By default, all columns in a tree view are movable except the first. To disable movement of these columns, use <db:code><db:link xlink:href="qheaderview.html" xrefstyle="class" annotations="QHeaderView">QHeaderView</db:link></db:code>'s <db:code><db:link xlink:href="qheaderview.html#setSectionsMovable" xrefstyle="function" annotations="QHeaderView::setSectionsMovable()">setSectionsMovable()</db:link></db:code> function. For more information about rearranging sections, see <db:code><db:link xlink:href="qheaderview.html#moving-header-sections" xrefstyle="class" annotations="Moving Header Sections">Moving Header Sections</db:link></db:code>.</db:para>
      <db:section xml:id="key-bindings">
         <db:title>Key Bindings</db:title>
         <db:para>
            <db:code><db:link xlink:href="qtreeview.html" xrefstyle="class" annotations="QTreeView">QTreeView</db:link></db:code> supports a set of key bindings that enable the user to navigate in the view and interact with the contents of items:</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Key</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Action</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tr>
               <db:td>
                  <db:para>Up</db:para>
               </db:td>
               <db:td>
                  <db:para>Moves the cursor to the item in the same column on the previous row. If the parent of the current item has no more rows to navigate to, the cursor moves to the relevant item in the last row of the sibling that precedes the parent.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>Down</db:para>
               </db:td>
               <db:td>
                  <db:para>Moves the cursor to the item in the same column on the next row. If the parent of the current item has no more rows to navigate to, the cursor moves to the relevant item in the first row of the sibling that follows the parent.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>Left</db:para>
               </db:td>
               <db:td>
                  <db:para>Hides the children of the current item (if present) by collapsing a branch.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>Minus</db:para>
               </db:td>
               <db:td>
                  <db:para>Same as LeftArrow.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>Right</db:para>
               </db:td>
               <db:td>
                  <db:para>Reveals the children of the current item (if present) by expanding a branch.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>Plus</db:para>
               </db:td>
               <db:td>
                  <db:para>Same as RightArrow.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>Asterisk</db:para>
               </db:td>
               <db:td>
                  <db:para>Expands all children of the current item (if present).</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>PageUp</db:para>
               </db:td>
               <db:td>
                  <db:para>Moves the cursor up one page.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>PageDown</db:para>
               </db:td>
               <db:td>
                  <db:para>Moves the cursor down one page.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>Home</db:para>
               </db:td>
               <db:td>
                  <db:para>Moves the cursor to an item in the same column of the first row of the first top-level item in the model.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>End</db:para>
               </db:td>
               <db:td>
                  <db:para>Moves the cursor to an item in the same column of the last row of the last top-level item in the model.</db:para>
               </db:td>
            </db:tr>
            <db:tr>
               <db:td>
                  <db:para>F2</db:para>
               </db:td>
               <db:td>
                  <db:para>In editable models, this opens the current item for editing. The Escape key can be used to cancel the editing process and revert any changes to the data displayed.</db:para>
               </db:td>
            </db:tr>
         </db:informaltable>
      </db:section>
      <db:section xml:id="improving-performance">
         <db:title>Improving Performance</db:title>
         <db:para>It is possible to give the view hints about the data it is handling in order to improve its performance when displaying large numbers of items. One approach that can be taken for views that are intended to display items with equal heights is to set the <db:code><db:link xlink:href="qtreeview.html#uniformRowHeights-prop" xrefstyle="property" annotations="uniformRowHeights">uniformRowHeights</db:link></db:code> property to true.</db:para>
      </db:section>
      <db:para>
         <db:emphasis role="bold">See Also:</db:emphasis>
         <db:simplelist type="vert">
            <db:member>
               <db:code><db:link xlink:href="qlistview.html" xrefstyle="class" annotations="QListView">QListView</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qtreewidget.html" xrefstyle="class" annotations="QTreeWidget">QTreeWidget</db:link></db:code>
            </db:member>
            <db:member>
               <db:link xlink:href="model-view-programming.html#view-classes" xrefstyle="page" annotations="View Classes">View Classes</db:link>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qabstractitemmodel.html" xrefstyle="class" annotations="QAbstractItemModel">QAbstractItemModel</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qabstractitemview.html" xrefstyle="class" annotations="QAbstractItemView">QAbstractItemView</db:link></db:code>
            </db:member>
            <db:member>
               <db:link xlink:href="qtwidgets-itemviews-dirview-example.html" xrefstyle="page" annotations="Dir View Example">Dir View Example</db:link>
            </db:member>
         </db:simplelist>
      </db:para>
   </db:section>
   <db:section>
      <db:title>Properties</db:title>
      <db:section>
         <db:title>autoExpandDelay : int</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>int</db:type>
            <db:varname>autoExpandDelay</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>int</db:type>
            <db:methodname>autoExpandDelay</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setAutoExpandDelay</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>autoExpandDelay</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds The delay time before items in a tree are opened during a drag and drop operation..</db:para>
         <db:para>This property holds the amount of time in milliseconds that the user must wait over a node before that node will automatically open or close. If the time is set to less then 0 then it will not be activated.</db:para>
         <db:para>By default, this property has a value of -1, meaning that auto-expansion is disabled.</db:para>
         <db:para>This property was introduced in Qt 4.3.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>int</db:td>
                     <db:td>autoExpandDelay() const
                  </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                    void
                  </db:td>
                     <db:td>setAutoExpandDelay(intautoExpandDelay)
                  </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>indentation : int</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>int</db:type>
            <db:varname>indentation</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>int</db:type>
            <db:methodname>indentation</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setIndentation</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>indentation</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds indentation of the items in the tree view..</db:para>
         <db:para>This property holds the indentation measured in pixels of the items for each level in the tree view. For top-level items, the indentation specifies the horizontal distance from the viewport edge to the items in the first column; for child items, it specifies their indentation from their parent items.</db:para>
         <db:para>By default, the value of this property is style dependent. Thus, when the style changes, this property updates from it. Calling  stops the updates, calling  will restore default behavior.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>int</db:td>
                     <db:td>indentation() const
                  </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                    void
                  </db:td>
                     <db:td>setIndentation(intindentation)
                  </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>rootIsDecorated : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>rootIsDecorated</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>rootIsDecorated</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setRootIsDecorated</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>rootIsDecorated</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds whether to show controls for expanding and collapsing top-level items.</db:para>
         <db:para>Items with children are typically shown with controls to expand and collapse them, allowing their children to be shown or hidden. If this property is false, these controls are not shown for top-level items. This can be used to make a single level tree structure appear like a simple list of items.</db:para>
         <db:para>By default, this property is <db:code>true</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>rootIsDecorated() const
                  </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                    void
                  </db:td>
                     <db:td>setRootIsDecorated(boolrootIsDecorated)
                  </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>uniformRowHeights : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>uniformRowHeights</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>uniformRowHeights</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setUniformRowHeights</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>uniformRowHeights</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds whether all items in the treeview have the same height.</db:para>
         <db:para>This property should only be set to true if it is guaranteed that all items in the view has the same height. This enables the view to do some optimizations.</db:para>
         <db:para>The height is obtained from the first item in the view. It is updated when the data changes on that item.</db:para>
         <db:note>
            <db:para> If the editor size hint is bigger than the cell size hint, then the size hint of the editor will be used.</db:para>
         </db:note>
         <db:para>By default, this property is <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>uniformRowHeights() const
                  </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                    void
                  </db:td>
                     <db:td>setUniformRowHeights(booluniformRowHeights)
                  </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>itemsExpandable : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>itemsExpandable</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>itemsExpandable</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setItemsExpandable</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>itemsExpandable</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds whether the items are expandable by the user..</db:para>
         <db:para>This property holds whether the user can expand and collapse items interactively.</db:para>
         <db:para>By default, this property is <db:code>true</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>itemsExpandable() const
                  </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                    void
                  </db:td>
                     <db:td>setItemsExpandable(boolitemsExpandable)
                  </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>sortingEnabled : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>sortingEnabled</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>isSortingEnabled</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setSortingEnabled</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>sortingEnabled</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds whether sorting is enabled.</db:para>
         <db:para>If this property is <db:code>true</db:code>, sorting is enabled for the tree; if the property is false, sorting is not enabled. The default value is false.</db:para>
         <db:note>
            <db:para> In order to avoid performance issues, it is recommended that sorting is enabled <db:emphasis>after</db:emphasis> inserting the items into the tree. Alternatively, you could also insert the items into a list before inserting the items into the tree.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#sortByColumn" xrefstyle="function" annotations="sortByColumn()">sortByColumn()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>isSortingEnabled() const
                  </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                    void
                  </db:td>
                     <db:td>setSortingEnabled(boolsortingEnabled)
                  </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>animated : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>animated</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>isAnimated</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setAnimated</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>animated</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds whether animations are enabled.</db:para>
         <db:para>If this property is <db:code>true</db:code> the treeview will animate expansion and collapsing of branches. If this property is <db:code>false</db:code>, the treeview will expand or collapse branches immediately without showing the animation.</db:para>
         <db:para>By default, this property is <db:code>false</db:code>.</db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>isAnimated() const
                  </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                    void
                  </db:td>
                     <db:td>setAnimated(boolanimated)
                  </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>allColumnsShowFocus : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>allColumnsShowFocus</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>allColumnsShowFocus</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setAllColumnsShowFocus</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>allColumnsShowFocus</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds whether items should show keyboard focus using all columns.</db:para>
         <db:para>If this property is <db:code>true</db:code> all columns will show focus, otherwise only one column will show focus.</db:para>
         <db:para>The default is false.</db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>allColumnsShowFocus() const
                  </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                    void
                  </db:td>
                     <db:td>setAllColumnsShowFocus(boolallColumnsShowFocus)
                  </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>wordWrap : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>wordWrap</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>wordWrap</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setWordWrap</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>wordWrap</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds the item text word-wrapping policy.</db:para>
         <db:para>If this property is <db:code>true</db:code> then the item text is wrapped where necessary at word-breaks; otherwise it is not wrapped at all. This property is <db:code>false</db:code> by default.</db:para>
         <db:para>Note that even if wrapping is enabled, the cell will not be expanded to fit all text. Ellipsis will be inserted according to the current <db:code><db:link xlink:href="qabstractitemview.html#textElideMode-prop" xrefstyle="property" annotations="QAbstractItemView::textElideMode">textElideMode</db:link></db:code>.</db:para>
         <db:para>This property was introduced in Qt 4.3.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>wordWrap() const
                  </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                    void
                  </db:td>
                     <db:td>setWordWrap(boolwordWrap)
                  </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>headerHidden : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>headerHidden</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>isHeaderHidden</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setHeaderHidden</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>headerHidden</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds whether the header is shown or not..</db:para>
         <db:para>If this property is <db:code>true</db:code>, the header is not shown otherwise it is. The default value is false.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#header" xrefstyle="function" annotations="header()">header()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.4.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>isHeaderHidden() const
                  </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                    void
                  </db:td>
                     <db:td>setHeaderHidden(boolheaderHidden)
                  </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
      <db:section>
         <db:title>expandsOnDoubleClick : bool</db:title>
         <db:fieldsynopsis>
            <db:modifier>(Qt property)</db:modifier>
            <db:type>bool</db:type>
            <db:varname>expandsOnDoubleClick</db:varname>
         </db:fieldsynopsis>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>expandsOnDoubleClick</db:methodname>
            <db:void/>
            <db:modifier>const</db:modifier>
         </db:methodsynopsis>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>setExpandsOnDoubleClick</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>expandsOnDoubleClick</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This property holds whether the items can be expanded by double-clicking..</db:para>
         <db:para>This property holds whether the user can expand and collapse items by double-clicking. The default value is true.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#itemsExpandable-prop" xrefstyle="property" annotations="itemsExpandable">itemsExpandable</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.4.</db:para>
         <db:para>
            <db:emphasis role="bold">Access Functions:</db:emphasis>
            <db:informaltable>
               <db:tbody>
                  <db:tr>
                     <db:td>bool</db:td>
                     <db:td>expandsOnDoubleClick() const
                  </db:td>
                  </db:tr>
                  <db:tr>
                     <db:td>
                    void
                  </db:td>
                     <db:td>setExpandsOnDoubleClick(boolexpandsOnDoubleClick)
                  </db:td>
                  </db:tr>
               </db:tbody>
            </db:informaltable>
         </db:para>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Member Function Documentation</db:title>
      <db:section>
         <db:title> QTreeView::QTreeView(QWidget *parent)</db:title>
         <db:constructorsynopsis>
            <db:modifier>public</db:modifier>
            <db:methodname>QTreeView</db:methodname>
            <db:methodparam>
               <db:type>QWidget *</db:type>
               <db:parameter>parent</db:parameter>
               <db:initializer>nullptr</db:initializer>
            </db:methodparam>
         </db:constructorsynopsis>
         <db:para>Constructs a tree view with a <db:code role="argument">parent</db:code> to represent a model's data. Use <db:code><db:link xlink:href="qtreeview.html#setModel" xrefstyle="function" annotations="setModel()">setModel()</db:link></db:code> to set the model.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qabstractitemmodel.html" xrefstyle="class" annotations="QAbstractItemModel">QAbstractItemModel</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title> QTreeView::~QTreeView()</db:title>
         <db:destructorsynopsis>
            <db:modifier>public</db:modifier>
            <db:methodname>~QTreeView</db:methodname>
            <db:void/>
         </db:destructorsynopsis>
         <db:para>Destroys the tree view.</db:para>
      </db:section>
      <db:section>
         <db:title>QHeaderView * QTreeView::header() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QHeaderView *</db:type>
            <db:methodname>header</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the header for the tree view.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#setHeader" xrefstyle="function" annotations="setHeader()">setHeader()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qabstractitemmodel.html#headerData" xrefstyle="function" annotations="QAbstractItemModel::headerData()">QAbstractItemModel::headerData()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QModelIndex QTreeView::indexAbove(const QModelIndex &amp;index) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QModelIndex</db:type>
            <db:methodname>indexAbove</db:methodname>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>index</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the model index of the item above <db:code role="argument">index</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>QModelIndex QTreeView::indexBelow(const QModelIndex &amp;index) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>QModelIndex</db:type>
            <db:methodname>indexBelow</db:methodname>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>index</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the model index of the item below <db:code role="argument">index</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>QModelIndex QTreeView::moveCursor(QAbstractItemView::CursorAction cursorAction, Qt::KeyboardModifiers modifiers) override</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:modifier>override</db:modifier>
            <db:type>QModelIndex</db:type>
            <db:methodname>moveCursor</db:methodname>
            <db:methodparam>
               <db:type>QAbstractItemView::CursorAction</db:type>
               <db:parameter>cursorAction</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>Qt::KeyboardModifiers</db:type>
               <db:parameter>modifiers</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Move the cursor in the way described by <db:code role="argument">cursorAction</db:code>, using the information provided by the button <db:code role="argument">modifiers</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>QRect QTreeView::visualRect(const QModelIndex &amp;index) const override</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>override</db:modifier>
            <db:type>QRect</db:type>
            <db:methodname>visualRect</db:methodname>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>index</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the rectangle on the viewport occupied by the item at <db:code role="argument">index</db:code>. If the index is not visible or explicitly hidden, the returned rectangle is invalid.</db:para>
      </db:section>
      <db:section>
         <db:title>QRegion QTreeView::visualRegionForSelection(const QItemSelection &amp;selection) const override</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:modifier>override</db:modifier>
            <db:type>QRegion</db:type>
            <db:methodname>visualRegionForSelection</db:methodname>
            <db:methodparam>
               <db:type>const QItemSelection &amp;</db:type>
               <db:parameter>selection</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the rectangle from the viewport of the items in the given <db:code role="argument">selection</db:code>.</db:para>
         <db:para>Since 4.7, the returned region only contains rectangles intersecting (or included in) the viewport.</db:para>
      </db:section>
      <db:section>
         <db:title>bool QTreeView::allColumnsShowFocus() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>allColumnsShowFocus</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QTreeView::expandsOnDoubleClick() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>expandsOnDoubleClick</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QTreeView::isColumnHidden(int column) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isColumnHidden</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>column</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if the <db:code role="argument">column</db:code> is hidden; otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#hideColumn" xrefstyle="function" annotations="hideColumn()">hideColumn()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#isRowHidden" xrefstyle="function" annotations="isRowHidden()">isRowHidden()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QTreeView::isFirstColumnSpanned(int row, const QModelIndex &amp;parent) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isFirstColumnSpanned</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>row</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>parent</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if the item in first column in the given <db:code role="argument">row</db:code> of the <db:code role="argument">parent</db:code> is spanning all the columns; otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#setFirstColumnSpanned" xrefstyle="function" annotations="setFirstColumnSpanned()">setFirstColumnSpanned()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.3.</db:para>
      </db:section>
      <db:section>
         <db:title>bool QTreeView::isRowHidden(int row, const QModelIndex &amp;parent) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>isRowHidden</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>row</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>parent</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if the item in the given <db:code role="argument">row</db:code> of the <db:code role="argument">parent</db:code> is hidden; otherwise returns <db:code>false</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#setRowHidden" xrefstyle="function" annotations="setRowHidden()">setRowHidden()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#isColumnHidden" xrefstyle="function" annotations="isColumnHidden()">isColumnHidden()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QTreeView::itemsExpandable() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>itemsExpandable</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QTreeView::rootIsDecorated() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>rootIsDecorated</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QTreeView::uniformRowHeights() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>uniformRowHeights</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QTreeView::wordWrap() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>bool</db:type>
            <db:methodname>wordWrap</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QTreeView::autoExpandDelay() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>autoExpandDelay</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QTreeView::columnAt(int x) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>columnAt</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>x</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the column in the tree view whose header covers the <db:code role="argument">x</db:code> coordinate given.</db:para>
      </db:section>
      <db:section>
         <db:title>int QTreeView::columnViewportPosition(int column) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>columnViewportPosition</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>column</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the horizontal position of the <db:code role="argument">column</db:code> in the viewport.</db:para>
      </db:section>
      <db:section>
         <db:title>int QTreeView::columnWidth(int column) const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>columnWidth</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>column</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the width of the <db:code role="argument">column</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#resizeColumnToContents" xrefstyle="function" annotations="resizeColumnToContents()">resizeColumnToContents()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#setColumnWidth" xrefstyle="function" annotations="setColumnWidth()">setColumnWidth()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QTreeView::horizontalOffset() const override</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:modifier>override</db:modifier>
            <db:type>int</db:type>
            <db:methodname>horizontalOffset</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the horizontal offset of the items in the treeview.</db:para>
         <db:para>Note that the tree view uses the horizontal header section positions to determine the positions of columns in the view.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#verticalOffset" xrefstyle="function" annotations="verticalOffset()">verticalOffset()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QTreeView::indentation() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>indentation</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QTreeView::indexRowSizeHint(const QModelIndex &amp;index) const</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:type>int</db:type>
            <db:methodname>indexRowSizeHint</db:methodname>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>index</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the size hint for the row indicated by <db:code role="argument">index</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#sizeHintForColumn" xrefstyle="function" annotations="sizeHintForColumn()">sizeHintForColumn()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#uniformRowHeights-prop" xrefstyle="function" annotations="uniformRowHeights()">uniformRowHeights()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QTreeView::rowHeight(const QModelIndex &amp;index) const</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:type>int</db:type>
            <db:methodname>rowHeight</db:methodname>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>index</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the height of the row indicated by the given <db:code role="argument">index</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#indexRowSizeHint" xrefstyle="function" annotations="indexRowSizeHint()">indexRowSizeHint()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.3.</db:para>
      </db:section>
      <db:section>
         <db:title>int QTreeView::sizeHintForColumn(int column) const override</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:modifier>override</db:modifier>
            <db:type>int</db:type>
            <db:methodname>sizeHintForColumn</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>column</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Returns the size hint for the <db:code role="argument">column</db:code>'s width or -1 if there is no model.</db:para>
         <db:para>If you need to set the width of a given column to a fixed value, call <db:code><db:link xlink:href="qheaderview.html#resizeSection" xrefstyle="function" annotations="QHeaderView::resizeSection()">QHeaderView::resizeSection()</db:link></db:code> on the view's header.</db:para>
         <db:para>If you reimplement this function in a subclass, note that the value you return is only used when <db:code><db:link xlink:href="qtreeview.html#resizeColumnToContents" xrefstyle="function" annotations="resizeColumnToContents()">resizeColumnToContents()</db:link></db:code> is called. In that case, if a larger column width is required by either the view's header or the item delegate, that width will be used instead.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qwidget.html#sizeHint-prop" xrefstyle="property" annotations="QWidget::sizeHint">QWidget::sizeHint</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#header" xrefstyle="function" annotations="header()">header()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qheaderview.html#resizeContentsPrecision" xrefstyle="function" annotations="QHeaderView::resizeContentsPrecision()">QHeaderView::resizeContentsPrecision()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>int QTreeView::treePosition() const</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:type>int</db:type>
            <db:methodname>treePosition</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Return the logical index the tree is set on. If the return value is -1 then the tree is placed on the visual index 0.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#setTreePosition" xrefstyle="function" annotations="setTreePosition()">setTreePosition()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.2.</db:para>
      </db:section>
      <db:section>
         <db:title>int QTreeView::verticalOffset() const override</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:modifier>override</db:modifier>
            <db:type>int</db:type>
            <db:methodname>verticalOffset</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Returns the vertical offset of the items in the tree view.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#horizontalOffset" xrefstyle="function" annotations="horizontalOffset()">horizontalOffset()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::collapseAll()</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>collapseAll</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Collapses all expanded items.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#expandAll" xrefstyle="function" annotations="expandAll()">expandAll()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#expand" xrefstyle="function" annotations="expand()">expand()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#collapse" xrefstyle="function" annotations="collapse()">collapse()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#setExpanded" xrefstyle="function" annotations="setExpanded()">setExpanded()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::columnCountChanged(int oldCount, int newCount)</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>protected</db:modifier>
            <db:void/>
            <db:methodname>columnCountChanged</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>oldCount</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>newCount</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Informs the tree view that the number of columns in the tree view has changed from <db:code role="argument">oldCount</db:code> to <db:code role="argument">newCount</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::columnMoved()</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>protected</db:modifier>
            <db:void/>
            <db:methodname>columnMoved</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>This slot is called whenever a column has been moved.</db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::columnResized(int column, int oldSize, int newSize)</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>protected</db:modifier>
            <db:void/>
            <db:methodname>columnResized</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>column</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>oldSize</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>newSize</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This function is called whenever <db:code role="argument">column</db:code>'s size is changed in the header. <db:code role="argument">oldSize</db:code> and <db:code role="argument">newSize</db:code> give the previous size and the new size in pixels.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#setColumnWidth" xrefstyle="function" annotations="setColumnWidth()">setColumnWidth()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::drawBranches(QPainter *painter, const QRect &amp;rect, const QModelIndex &amp;index) const</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:void/>
            <db:methodname>drawBranches</db:methodname>
            <db:methodparam>
               <db:type>QPainter *</db:type>
               <db:parameter>painter</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QRect &amp;</db:type>
               <db:parameter>rect</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>index</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Draws the branches in the tree view on the same row as the model item <db:code role="argument">index</db:code>, using the <db:code role="argument">painter</db:code> given. The branches are drawn in the rectangle specified by <db:code role="argument">rect</db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::drawRow(QPainter *painter, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:void/>
            <db:methodname>drawRow</db:methodname>
            <db:methodparam>
               <db:type>QPainter *</db:type>
               <db:parameter>painter</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QStyleOptionViewItem &amp;</db:type>
               <db:parameter>option</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>index</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Draws the row in the tree view that contains the model item <db:code role="argument">index</db:code>, using the <db:code role="argument">painter</db:code> given. The <db:code role="argument">option</db:code> controls how the item is displayed.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qabstractitemview.html#alternatingRowColors-prop" xrefstyle="function" annotations="setAlternatingRowColors()">setAlternatingRowColors()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::drawTree(QPainter *painter, const QRegion &amp;region) const</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:void/>
            <db:methodname>drawTree</db:methodname>
            <db:methodparam>
               <db:type>QPainter *</db:type>
               <db:parameter>painter</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QRegion &amp;</db:type>
               <db:parameter>region</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Draws the part of the tree intersecting the given <db:code role="argument">region</db:code> using the specified <db:code role="argument">painter</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#paintEvent" xrefstyle="function" annotations="paintEvent()">paintEvent()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::expandAll()</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>expandAll</db:methodname>
            <db:void/>
         </db:methodsynopsis>
         <db:para>Expands all expandable items.</db:para>
         <db:para>Warning: if the model contains a large number of items, this function will take some time to execute.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#collapseAll" xrefstyle="function" annotations="collapseAll()">collapseAll()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#expand" xrefstyle="function" annotations="expand()">expand()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#collapse" xrefstyle="function" annotations="collapse()">collapse()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#setExpanded" xrefstyle="function" annotations="setExpanded()">setExpanded()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::expandToDepth(int depth)</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>expandToDepth</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>depth</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Expands all expandable items to the given <db:code role="argument">depth</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#expandAll" xrefstyle="function" annotations="expandAll()">expandAll()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#collapseAll" xrefstyle="function" annotations="collapseAll()">collapseAll()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#expand" xrefstyle="function" annotations="expand()">expand()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#collapse" xrefstyle="function" annotations="collapse()">collapse()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#setExpanded" xrefstyle="function" annotations="setExpanded()">setExpanded()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.3.</db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::expanded(const QModelIndex &amp;index)</db:title>
         <db:methodsynopsis>
            <db:modifier>signal</db:modifier>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>expanded</db:methodname>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>index</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#setExpanded" xrefstyle="function" annotations="setExpanded()">setExpanded()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::hideColumn(int column)</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>hideColumn</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>column</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Hides the <db:code role="argument">column</db:code> given.</db:para>
         <db:note>
            <db:para> This function should only be called after the model has been initialized, as the view needs to know the number of columns in order to hide <db:code role="argument">column</db:code>.</db:para>
         </db:note>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#showColumn" xrefstyle="function" annotations="showColumn()">showColumn()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#setColumnHidden" xrefstyle="function" annotations="setColumnHidden()">setColumnHidden()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::resizeColumnToContents(int column)</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>resizeColumnToContents</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>column</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Resizes the <db:code role="argument">column</db:code> given to the size of its contents.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#columnWidth" xrefstyle="function" annotations="columnWidth()">columnWidth()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#setColumnWidth" xrefstyle="function" annotations="setColumnWidth()">setColumnWidth()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#sizeHintForColumn" xrefstyle="function" annotations="sizeHintForColumn()">sizeHintForColumn()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qheaderview.html#resizeContentsPrecision" xrefstyle="function" annotations="QHeaderView::resizeContentsPrecision()">QHeaderView::resizeContentsPrecision()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::rowsAboutToBeRemoved(const QModelIndex &amp;parent, int start, int end) override</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:modifier>override</db:modifier>
            <db:void/>
            <db:methodname>rowsAboutToBeRemoved</db:methodname>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>parent</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>start</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>end</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Informs the view that the rows from the <db:code role="argument">start</db:code> row to the <db:code role="argument">end</db:code> row inclusive are about to removed from the given <db:code role="argument">parent</db:code> model item.</db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::rowsInserted(const QModelIndex &amp;parent, int start, int end) override</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:modifier>override</db:modifier>
            <db:void/>
            <db:methodname>rowsInserted</db:methodname>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>parent</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>start</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>end</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Informs the view that the rows from the <db:code role="argument">start</db:code> row to the <db:code role="argument">end</db:code> row inclusive have been inserted into the <db:code role="argument">parent</db:code> model item.</db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::rowsRemoved(const QModelIndex &amp;parent, int start, int end)</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>protected</db:modifier>
            <db:void/>
            <db:methodname>rowsRemoved</db:methodname>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>parent</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>start</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>end</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Informs the view that the rows from the <db:code role="argument">start</db:code> row to the <db:code role="argument">end</db:code> row inclusive have been removed from the given <db:code role="argument">parent</db:code> model item.</db:para>
         <db:para>This property was introduced in Qt 4.1.</db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::scrollContentsBy(int dx, int dy) override</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:modifier>override</db:modifier>
            <db:void/>
            <db:methodname>scrollContentsBy</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>dx</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>dy</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Scrolls the contents of the tree view by (<db:code role="argument">dx</db:code>, <db:code role="argument">dy</db:code>).</db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::scrollTo(const QModelIndex &amp;index, QAbstractItemView::ScrollHint hint) override</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:modifier>override</db:modifier>
            <db:void/>
            <db:methodname>scrollTo</db:methodname>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>index</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QAbstractItemView::ScrollHint</db:type>
               <db:parameter>hint</db:parameter>
               <db:initializer>EnsureVisible</db:initializer>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Scroll the contents of the tree view until the given model item <db:code role="argument">index</db:code> is visible. The <db:code role="argument">hint</db:code> parameter specifies more precisely where the item should be located after the operation. If any of the parents of the model item are collapsed, they will be expanded to ensure that the model item is visible.</db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setAllColumnsShowFocus(bool enable)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setAllColumnsShowFocus</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>enable</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setAnimated(bool enable)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setAnimated</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>enable</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setAutoExpandDelay(int delay)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setAutoExpandDelay</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>delay</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setColumnHidden(int column, bool hide)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setColumnHidden</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>column</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>hide</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>If <db:code role="argument">hide</db:code> is true the <db:code role="argument">column</db:code> is hidden, otherwise the <db:code role="argument">column</db:code> is shown.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#isColumnHidden" xrefstyle="function" annotations="isColumnHidden()">isColumnHidden()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#hideColumn" xrefstyle="function" annotations="hideColumn()">hideColumn()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#setRowHidden" xrefstyle="function" annotations="setRowHidden()">setRowHidden()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setColumnWidth(int column, int width)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setColumnWidth</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>column</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>width</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the width of the given <db:code role="argument">column</db:code> to the <db:code role="argument">width</db:code> specified.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#columnWidth" xrefstyle="function" annotations="columnWidth()">columnWidth()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#resizeColumnToContents" xrefstyle="function" annotations="resizeColumnToContents()">resizeColumnToContents()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setExpanded(const QModelIndex &amp;index, bool expanded)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setExpanded</db:methodname>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>index</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>expanded</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the item referred to by <db:code role="argument">index</db:code> to either collapse or expanded, depending on the value of <db:code role="argument">expanded</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#expanded" xrefstyle="function" annotations="expanded()">expanded()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#expand" xrefstyle="function" annotations="expand()">expand()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#isExpanded" xrefstyle="function" annotations="isExpanded()">isExpanded()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setExpandsOnDoubleClick(bool enable)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setExpandsOnDoubleClick</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>enable</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setFirstColumnSpanned(int row, const QModelIndex &amp;parent, bool span)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setFirstColumnSpanned</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>row</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>parent</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>span</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>If <db:code role="argument">span</db:code> is true the item in the first column in the <db:code role="argument">row</db:code> with the given <db:code role="argument">parent</db:code> is set to span all columns, otherwise all items on the <db:code role="argument">row</db:code> are shown.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#isFirstColumnSpanned" xrefstyle="function" annotations="isFirstColumnSpanned()">isFirstColumnSpanned()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.3.</db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setHeader(QHeaderView *header)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setHeader</db:methodname>
            <db:methodparam>
               <db:type>QHeaderView *</db:type>
               <db:parameter>header</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the header for the tree view, to the given <db:code role="argument">header</db:code>.</db:para>
         <db:para>The view takes ownership over the given <db:code role="argument">header</db:code> and deletes it when a new header is set.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qabstractitemmodel.html#headerData" xrefstyle="function" annotations="QAbstractItemModel::headerData()">QAbstractItemModel::headerData()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setHeaderHidden(bool hide)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setHeaderHidden</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>hide</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setIndentation(int i)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setIndentation</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>i</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setItemsExpandable(bool enable)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setItemsExpandable</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>enable</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setRootIsDecorated(bool show)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setRootIsDecorated</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>show</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setRowHidden(int row, const QModelIndex &amp;parent, bool hide)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setRowHidden</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>row</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>const QModelIndex &amp;</db:type>
               <db:parameter>parent</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>hide</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>If <db:code role="argument">hide</db:code> is true the <db:code role="argument">row</db:code> with the given <db:code role="argument">parent</db:code> is hidden, otherwise the <db:code role="argument">row</db:code> is shown.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#isRowHidden" xrefstyle="function" annotations="isRowHidden()">isRowHidden()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#setColumnHidden" xrefstyle="function" annotations="setColumnHidden()">setColumnHidden()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setSelection(const QRect &amp;rect, QItemSelectionModel::SelectionFlags command) override</db:title>
         <db:methodsynopsis>
            <db:modifier>protected</db:modifier>
            <db:modifier>override</db:modifier>
            <db:void/>
            <db:methodname>setSelection</db:methodname>
            <db:methodparam>
               <db:type>const QRect &amp;</db:type>
               <db:parameter>rect</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>QItemSelectionModel::SelectionFlags</db:type>
               <db:parameter>command</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Applies the selection <db:code role="argument">command</db:code> to the items in or touched by the rectangle, <db:code role="argument">rect</db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qabstractitemview.html#selectionCommand" xrefstyle="function" annotations="selectionCommand()">selectionCommand()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setSortingEnabled(bool enable)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setSortingEnabled</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>enable</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setTreePosition(int index)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setTreePosition</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>index</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>This specifies that the tree structure should be placed at logical index <db:code role="argument">index</db:code>. If <db:code role="index">is</db:code> set to -1 then the tree will always follow visual index 0.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#treePosition" xrefstyle="function" annotations="treePosition()">treePosition()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qheaderview.html#swapSections" xrefstyle="function" annotations="QHeaderView::swapSections()">QHeaderView::swapSections()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qheaderview.html#moveSection" xrefstyle="function" annotations="QHeaderView::moveSection()">QHeaderView::moveSection()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 5.2.</db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setUniformRowHeights(bool uniform)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setUniformRowHeights</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>uniform</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::setWordWrap(bool on)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>setWordWrap</db:methodname>
            <db:methodparam>
               <db:type>bool</db:type>
               <db:parameter>on</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert"/>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::showColumn(int column)</db:title>
         <db:methodsynopsis>
            <db:modifier>slot</db:modifier>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>showColumn</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>column</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Shows the given <db:code role="argument">column</db:code> in the tree view.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#hideColumn" xrefstyle="function" annotations="hideColumn()">hideColumn()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#setColumnHidden" xrefstyle="function" annotations="setColumnHidden()">setColumnHidden()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QTreeView::sortByColumn(int column, Qt::SortOrder order)</db:title>
         <db:methodsynopsis>
            <db:modifier>public</db:modifier>
            <db:void/>
            <db:methodname>sortByColumn</db:methodname>
            <db:methodparam>
               <db:type>int</db:type>
               <db:parameter>column</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>Qt::SortOrder</db:type>
               <db:parameter>order</db:parameter>
            </db:methodparam>
         </db:methodsynopsis>
         <db:para>Sets the model up for sorting by the values in the given <db:code role="argument">column</db:code> and <db:code role="argument">order</db:code>.</db:para>
         <db:para>
            <db:code role="argument">column</db:code> may be -1, in which case no sort indicator will be shown and the model will return to its natural, unsorted order. Note that not all models support this and may even crash in this case.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qtreeview.html#sortingEnabled-prop" xrefstyle="property" annotations="sortingEnabled">sortingEnabled</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.2.</db:para>
      </db:section>
   </db:section>
</db:article>
