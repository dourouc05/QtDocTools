<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <page name="07-0-qdoc-commands-includingexternalcode.html" href="07-0-qdoc-commands-includingexternalcode.html" status="active" location="qdoc-manual-markupcmds.qdoc" filepath="C:/Qt/5.11.1/Src/qttools/src/qdoc/doc/qdoc-manual-markupcmds.qdoc" lineno="1124" subtype="page" title="Including External Code" fulltitle="Including External Code" subtitle="" module="QDoc">
            <target name="quotefile-command"/>
            <target name="quotefromfile-command"/>
            <target name="printline-command"/>
            <target name="file"/>
            <target name="substring"/>
            <target name="printto-command"/>
            <target name="printuntil-command"/>
            <target name="skipline-command"/>
            <target name="skipto-command"/>
            <target name="skipuntil-command"/>
            <target name="dots-command"/>
            <target name="snippet-command"/>
            <target name="codeline-command"/>
            <contents name="quotefile" title="\quotefile" level="1"/>
            <contents name="quotefromfile" title="\quotefromfile" level="1"/>
            <contents name="printline" title="\printline" level="1"/>
            <contents name="printto" title="\printto" level="1"/>
            <contents name="printuntil" title="\printuntil" level="1"/>
            <contents name="skipline" title="\skipline" level="1"/>
            <contents name="skipto" title="\skipto" level="1"/>
            <contents name="skipuntil" title="\skipuntil" level="1"/>
            <contents name="dots" title="\dots" level="1"/>
            <contents name="snippet" title="\snippet" level="1"/>
            <contents name="codeline" title="\codeline" level="1"/>
            <description path="C:/Qt/5.11.1/Src/qttools/src/qdoc/doc/qdoc-manual-markupcmds.qdoc" line="1124" column="4">
                <relation href="08-qdoc-commands-creatinglinks.html" type="page" meta="next" description="Creating Links"/>
                <relation href="06-qdoc-commands-includecodeinline.html" type="page" meta="previous" description="Including Code Inline"/>
                <relation href="qdoc-index.html" type="page" meta="contents" description="QDoc Manual"/>
                <para>The following commands enable you to include code snippets from external files. You can make QDoc include the complete contents of a file, or you can quote specific parts of the file and skip others. The typical use of the latter is to quote a file chunk by chunk.</para>
                <para>
                    <bold>Note:</bold> Although all these commands can be used for rendering C++ code, the <link raw="07-0-qdoc-commands-includingexternalcode.html#snippet-command" href="07-0-qdoc-commands-includingexternalcode.html#snippet-command" type="page" page="Including External Code">\snippet</link> and <link raw="07-0-qdoc-commands-includingexternalcode.html#codeline-command" href="07-0-qdoc-commands-includingexternalcode.html#codeline-command" type="page" page="Including External Code">\codeline</link> commands are preferred over the others. These commands allow equivalent code snippets for other Qt language bindings to be substituted for the C++ snippets in the documentation.</para>
                <target name="quotefile-command"/>
                <section id="quotefile">
                    <heading level="1">\quotefile</heading>
                    <para>The \quotefile command expands to the complete contents of the file given as argument.</para>
                    <para>The command considers the rest of the line as part of its argument, make sure to follow the file name with a line break.</para>
                    <para>The file's contents is rendered in a separate paragraph, using a monospace font and the standard indentation. The code is shown verbatim.</para>
                    <code>/ *!
    This is a simple &quot;Hello world&quot; example:

    \quotefile examples/main.cpp

    It contains only the bare minimum you need
    to get a Qt application up and running.
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>This is a simple &quot;Hello world&quot; example:</para>
                        <quotefile>examples/main.cpp</quotefile>
                        <para>It contains only the bare minimum you need to get a Qt application up and running.</para>
                    </quote>
                    <para>See also <link raw="quotefromfile-command" href="07-0-qdoc-commands-includingexternalcode.html#quotefromfile-command" type="page" page="Including External Code">\quotefromfile</link> and <link raw="code-command" href="06-qdoc-commands-includecodeinline.html#code-command" type="page" page="Including Code Inline">\code</link>.</para>
                    <target name="quotefromfile-command"/>
                </section>
                <section id="quotefromfile">
                    <heading level="1">\quotefromfile</heading>
                    <para>The \quotefromfile command opens the file given as argument for quoting.</para>
                    <para>The command considers the rest of the line as part of its argument, make sure to follow the file name with a line break.</para>
                    <para>The command is intended for use when quoting parts from file with the walkthrough commands: <link raw="printline-command" href="07-0-qdoc-commands-includingexternalcode.html#printline-command" type="page" page="Including External Code">\printline</link>, <link raw="printto-command" href="07-0-qdoc-commands-includingexternalcode.html#printto-command" type="page" page="Including External Code">\printto</link>, <link raw="printuntil-command" href="07-0-qdoc-commands-includingexternalcode.html#printuntil-command" type="page" page="Including External Code">\printuntil</link>, <link raw="skipline-command" href="07-0-qdoc-commands-includingexternalcode.html#skipline-command" type="page" page="Including External Code">\skipline</link>, <link raw="skipto-command" href="07-0-qdoc-commands-includingexternalcode.html#skipto-command" type="page" page="Including External Code">\skipto</link>, <link raw="skipuntil-command" href="07-0-qdoc-commands-includingexternalcode.html#skipuntil-command" type="page" page="Including External Code">\skipuntil</link>. This enables you to quote specific portions of a file.</para>
                    <code>/ *!
    The whole application is contained within
    the \c main() function:

    \quotefromfile examples/main.cpp

    \skipto main
    \printuntil app(argc, argv)

    First we create a QApplication object using
    the \c argc and \c argv parameters.

    \skipto QPushButton
    \printuntil resize

    Then we create a QPushButton, and give it a reasonable
    size using the QWidget::resize() function.

    ...
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>The whole application is contained within the <teletype type="highlighted">main()</teletype> function:</para>
                        <quotefromfile>examples/main.cpp</quotefromfile>
                        <skipto>main</skipto>
                        <printuntil>app(argc, argv)</printuntil>
                        <para>First we create a <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> object using the <teletype type="highlighted">argc</teletype> and <teletype type="highlighted">argv</teletype> parameters.</para>
                        <skipto>QPushButton</skipto>
                        <printuntil>resize</printuntil>
                        <para>Then we create a <link raw="QPushButton" href="qpushbutton.html" type="class">QPushButton</link>, and give it a reasonable size using the <link raw="QWidget::resize()" href="qwidget.html#size-prop" type="function">QWidget::resize()</link> function.</para>
                        <para>...</para>
                    </quote>
                    <para>QDoc remembers which file it is quoting from, and the current position in that file (see <link raw="file" href="07-0-qdoc-commands-includingexternalcode.html#file" type="page" page="Including External Code">\printline</link> for more information). There is no need to &quot;close&quot; the file.</para>
                    <para>See also <link raw="quotefile-command" href="07-0-qdoc-commands-includingexternalcode.html#quotefile-command" type="page" page="Including External Code">\quotefile</link>, <link raw="code-command" href="06-qdoc-commands-includecodeinline.html#code-command" type="page" page="Including Code Inline">\code</link> and <link raw="dots" href="07-0-qdoc-commands-includingexternalcode.html#dots" type="page" page="Including External Code">\dots</link>.</para>
                    <target name="printline-command"/>
                </section>
                <section id="printline">
                    <heading level="1">\printline</heading>
                    <para>The \printline command expands to the line from the current position to the next non-blank line of the current source file.</para>
                    <para>To ensure that the documentation remains synchronized with the source file, a substring of the line must be specified as an argument to the command. Note that the command considers the rest of the line as part of its argument, make sure to follow the substring with a line break.</para>
                    <para>The line from the source file is rendered as a separate paragraph, using a monospace font and the standard indentation. The code is shown verbatim.</para>
                    <code>/ *!
    There has to be exactly one QApplication object
    in every GUI application that uses Qt.

    \quotefromfile examples/main.cpp

    \printline QApplication

    This line includes the QApplication class
    definition. QApplication manages various
    application-wide resources, such as the
    default font and cursor.

    \printline QPushButton

    This line includes the QPushButton class
    definition. The QPushButton widget provides a command
    button.

    \printline main

    The main function...
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>There has to be exactly one <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> object in every GUI application that uses Qt.</para>
                        <quotefromfile>examples/main.cpp</quotefromfile>
                        <skipto>QApplication</skipto>
                        <printline>QApplication</printline>
                        <para>This line includes the <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> class definition. <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> manages various application-wide resources, such as the default font and cursor.</para>
                        <printline>QPushButton</printline>
                        <para>This line includes the <link raw="QPushButton" href="qpushbutton.html" type="class">QPushButton</link> class definition. The <link raw="QPushButton" href="qpushbutton.html" type="class">QPushButton</link> widget provides a command button.</para>
                        <printline>main</printline>
                        <para>The main function...</para>
                    </quote>
                    <target name="file"/>
                    <para>QDoc reads the file sequentially. To move the current position forward you can use either of the <link raw="skipline-command" href="07-0-qdoc-commands-includingexternalcode.html#skipline-command" type="page" page="Including External Code">\skip...</link> commands. To move the current position backward, you can use the <link raw="quotefromfile-command" href="07-0-qdoc-commands-includingexternalcode.html#quotefromfile-command" type="page" page="Including External Code">\quotefromfile</link> command again.</para>
                    <target name="substring"/>
                    <para>If the substring argument is surrounded by slashes it is interpreted as a <link raw="QRegExp" href="qregexp.html" type="class">regular expression</link>.</para>
                    <code>/ *!
    \quotefromfile examples/mainwindow.cpp

    \skipto closeEvent
    \printuntil /^\}/

    Close events are sent to widgets that the users want to
    close, usually by clicking \c File|Exit or by clicking
    the \c X title bar button. By reimplementing the event
    handler, we can intercept attempts to close the
    application.
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <quotefromfile>examples/mainwindow.cpp</quotefromfile>
                        <skipto>closeEvent</skipto>
                        <printuntil>/^\}/</printuntil>
                        <para>Close events are sent to widgets that the users want to close, usually by clicking <teletype type="highlighted">File|Exit</teletype> or by clicking the <teletype type="highlighted">X</teletype> title bar button. By reimplementing the event handler, we can intercept attempts to close the application.</para>
                    </quote>
                    <para>(<link raw="widgets/scribble" href="qtwidgets-widgets-scribble-example.html" type="page" page="Scribble Example">The complete example file...</link>)</para>
                    <para>The regular expression <teletype type="highlighted">/^\</teletype>}/ makes QDoc print until the first '}' character occurring at the beginning of the line without indentation. /.../ encloses the regular expression, and '^' means the beginning of the line. The '}' character must be escaped since it is a special character in regular expressions.</para>
                    <para>QDoc will emit a warning if the specified substring or regular expression cannot be located, i.e. if the source code has changed.</para>
                    <para>See also <link raw="printto-command" href="07-0-qdoc-commands-includingexternalcode.html#printto-command" type="page" page="Including External Code">\printto</link> and <link raw="printuntil-command" href="07-0-qdoc-commands-includingexternalcode.html#printuntil-command" type="page" page="Including External Code">\printuntil</link>.</para>
                    <target name="printto-command"/>
                </section>
                <section id="printto">
                    <heading level="1">\printto</heading>
                    <para>The \printto command expands to all the lines from the current position up to and <italic>excluding</italic> the next line containing a given substring.</para>
                    <para>The command considers the rest of the line as part of its argument, make sure to follow the substring with a line break. The command also follows the same conventions for <link raw="file" href="07-0-qdoc-commands-includingexternalcode.html#file" type="page" page="Including External Code">positioning</link> and <link raw="substring" href="07-0-qdoc-commands-includingexternalcode.html#substring" type="page" page="Including External Code">argument</link> as the <link raw="printline-command" href="07-0-qdoc-commands-includingexternalcode.html#printline-command" type="page" page="Including External Code">\printline</link> command.</para>
                    <para>The lines from the source file are rendered in a separate paragraph, using a monospace font and the standard indentation. The code is shown verbatim.</para>
                    <code>/ *!
    The whole application is contained within the
    \c main() function:

    \quotefromfile examples/main.cpp
    \printto hello

    First we create a QApplication object using the \c argc and
    \c argv parameters...
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>The whole application is contained within the <teletype type="highlighted">main()</teletype> function:</para>
                        <quotefromfile>examples/main.cpp</quotefromfile>
                        <skipto>main</skipto>
                        <printto>hello</printto>
                        <para>First we create a <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> object using the <teletype type="highlighted">argc</teletype> and <teletype type="highlighted">argv</teletype> parameters...</para>
                    </quote>
                    <para>See also <link raw="printline-command" href="07-0-qdoc-commands-includingexternalcode.html#printline-command" type="page" page="Including External Code">\printline</link> and <link raw="printuntil-command" href="07-0-qdoc-commands-includingexternalcode.html#printuntil-command" type="page" page="Including External Code">\printuntil</link>.</para>
                    <target name="printuntil-command"/>
                </section>
                <section id="printuntil">
                    <heading level="1">\printuntil</heading>
                    <para>The \printuntil command expands to all the lines from the current position up to and <italic>including</italic> the next line containing a given substring.</para>
                    <para>The command considers the rest of the line as part of its argument, make sure to follow the substring with a line break. The command also follows the same conventions for <link raw="file" href="07-0-qdoc-commands-includingexternalcode.html#file" type="page" page="Including External Code">positioning</link> and <link raw="substring" href="07-0-qdoc-commands-includingexternalcode.html#substring" type="page" page="Including External Code">argument</link> as the <link raw="printline-command" href="07-0-qdoc-commands-includingexternalcode.html#printline-command" type="page" page="Including External Code">\printline</link> command.</para>
                    <para>The lines from the source file are rendered in a separate paragraph, using a monospace font and the standard indentation. The code is shown verbatim.</para>
                    <code>/ *!
    The whole application is contained within the
    \c main() function:

    \quotefromfile examples/main.cpp
    \skipto main
    \printuntil hello

    First we create a QApplication object using the
    \c argc and \c argv parameters, then we create
    a QPushButton.
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>The whole application is contained within the <teletype type="highlighted">main()</teletype> function:</para>
                        <quotefromfile>examples/main.cpp</quotefromfile>
                        <skipto>main</skipto>
                        <printuntil>hello</printuntil>
                        <para>First we create a <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> object using the <teletype type="highlighted">argc</teletype> and <teletype type="highlighted">argv</teletype> parameters, then we create a <link raw="QPushButton" href="qpushbutton.html" type="class">QPushButton</link>.</para>
                    </quote>
                    <para>See also <link raw="printline-command" href="07-0-qdoc-commands-includingexternalcode.html#printline-command" type="page" page="Including External Code">\printline</link> and <link raw="printto-command" href="07-0-qdoc-commands-includingexternalcode.html#printto-command" type="page" page="Including External Code">\printto</link>.</para>
                    <target name="skipline-command"/>
                </section>
                <section id="skipline">
                    <heading level="1">\skipline</heading>
                    <para>The \skipline command ignores the next non-blank line in the current source file.</para>
                    <para>Doc reads the file sequentially, and the \skipline command is used to move the current position (omitting a line of the source file). See the remark about <link raw="file" href="07-0-qdoc-commands-includingexternalcode.html#file" type="page" page="Including External Code">file positioning</link> above.</para>
                    <para>The command considers the rest of the line as part of its argument, make sure to follow the substring with a line break. The command also follows the same conventions for <link raw="substring" href="07-0-qdoc-commands-includingexternalcode.html#substring" type="page" page="Including External Code">argument</link> as the <link raw="printline-command" href="07-0-qdoc-commands-includingexternalcode.html#printline-command" type="page" page="Including External Code">\printline</link> command, and it is used in conjunction with the <link raw="quotefromfile-command" href="07-0-qdoc-commands-includingexternalcode.html#quotefromfile-command" type="page" page="Including External Code">\quotefromfile</link> command.</para>
                    <code>/ *!
    QPushButton is a GUI push button that the user
    can press and release.

    \quotefromfile examples/main.cpp
    \skipline QApplication
    \printline QPushButton

    This line includes the QPushButton class
    definition. For each class that is part of the
    public Qt API, there exists a header file of
    the same name that contains its definition.
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>
                            <link raw="QPushButton" href="qpushbutton.html" type="class">QPushButton</link> is a GUI push button that the user can press and release.</para>
                        <quotefromfile>examples/main.cpp</quotefromfile>
                        <skipto>QApplication</skipto>
                        <skipline>QApplication</skipline>
                        <printline>QPushButton</printline>
                        <para>This line includes the <link raw="QPushButton" href="qpushbutton.html" type="class">QPushButton</link> class definition. For each class that is part of the public Qt API, there exists a header file of the same name that contains its definition.</para>
                    </quote>
                    <para>See also <link raw="skipto-command" href="07-0-qdoc-commands-includingexternalcode.html#skipto-command" type="page" page="Including External Code">\skipto</link>, <link raw="skipuntil-command" href="07-0-qdoc-commands-includingexternalcode.html#skipuntil-command" type="page" page="Including External Code">\skipuntil</link> and <link raw="dots" href="07-0-qdoc-commands-includingexternalcode.html#dots" type="page" page="Including External Code">\dots</link>.</para>
                    <target name="skipto-command"/>
                </section>
                <section id="skipto">
                    <heading level="1">\skipto</heading>
                    <para>The \skipto command ignores all the lines from the current position up to and <italic>excluding</italic> the next line containing a given substring.</para>
                    <para>QDoc reads the file sequentially, and the \skipto command is used to move the current position (omitting one or several lines of the source file). See the remark about <link raw="file" href="07-0-qdoc-commands-includingexternalcode.html#file" type="page" page="Including External Code">file positioning</link> above.</para>
                    <para>The command considers the rest of the line as part of its argument, make sure to follow the substring with a line break.</para>
                    <para>The command also follows the same conventions for <link raw="substring" href="07-0-qdoc-commands-includingexternalcode.html#substring" type="page" page="Including External Code">argument</link> as the <link raw="printline-command" href="07-0-qdoc-commands-includingexternalcode.html#printline-command" type="page" page="Including External Code">\printline</link> command, and it is used in conjunction with the <link raw="quotefromfile-command" href="07-0-qdoc-commands-includingexternalcode.html#quotefromfile-command" type="page" page="Including External Code">\quotefromfile</link> command.</para>
                    <code>/ *!
    The whole application is contained within
    the \c main() function:

    \quotefromfile examples/main.cpp
    \skipto main
    \printuntil }

    First we create a QApplication object. There
    has to be exactly one such object in
    every GUI application that uses Qt. Then
    we create a QPushButton, resize it to a reasonable
    size...
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>The whole application is contained within the <teletype type="highlighted">main()</teletype> function:</para>
                        <quotefromfile>examples/main.cpp</quotefromfile>
                        <skipto>main</skipto>
                        <printuntil>}</printuntil>
                        <para>First we create a <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> object. There has to be exactly one such object in every GUI application that uses Qt. Then we create a <link raw="QPushButton" href="qpushbutton.html" type="class">QPushButton</link>, resize it to a reasonable size ...</para>
                    </quote>
                    <para>See also <link raw="skipline-command" href="07-0-qdoc-commands-includingexternalcode.html#skipline-command" type="page" page="Including External Code">\skipline</link>, <link raw="skipuntil-command" href="07-0-qdoc-commands-includingexternalcode.html#skipuntil-command" type="page" page="Including External Code">\skipuntil</link> and <link raw="dots" href="07-0-qdoc-commands-includingexternalcode.html#dots" type="page" page="Including External Code">\dots</link>.</para>
                    <target name="skipuntil-command"/>
                </section>
                <section id="skipuntil">
                    <heading level="1">\skipuntil</heading>
                    <para>The \skipuntil command ignores all the lines from the current position up to and <italic>including</italic> the next line containing a given substring.</para>
                    <para>QDoc reads the file sequentially, and the \skipuntil command is used to move the current position (omitting one or several lines of the source file). See the remark about <link raw="file" href="07-0-qdoc-commands-includingexternalcode.html#file" type="page" page="Including External Code">file positioning</link> above.</para>
                    <para>The command considers the rest of the line as part of its argument, make sure to follow the substring with a line break.</para>
                    <para>The command also follows the same conventions for <link raw="substring" href="07-0-qdoc-commands-includingexternalcode.html#substring" type="page" page="Including External Code">argument</link> as the <link raw="printline-command" href="07-0-qdoc-commands-includingexternalcode.html#printline-command" type="page" page="Including External Code">\printline</link> command, and it is used in conjunction with the <link raw="quotefromfile-command" href="07-0-qdoc-commands-includingexternalcode.html#quotefromfile-command" type="page" page="Including External Code">\quotefromfile</link> command.</para>
                    <code>/ *!
    The first thing we did in the \c main() function
    was to create a QApplication object \c app.

    \quotefromfile examples/main.cpp
    \skipuntil show
    \dots
    \printuntil }

    In the end we must remember to make \c main() pass the
    control to Qt. QCoreApplication::exec() will return when
    the application exits...
* /</code>
                    <para>QDoc renders this as:</para>
                    <quote>
                        <para>The first thing we did in the <teletype type="highlighted">main()</teletype> function was to create a <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> object <teletype type="highlighted">app</teletype>.</para>
                        <quotefromfile>examples/main.cpp</quotefromfile>
                        <skipuntil>show</skipuntil>
                        <dots indent="4">...</dots>
                        <printuntil>}</printuntil>
                        <para>In the end we must remember to make <teletype type="highlighted">main()</teletype> pass the control to Qt. <link raw="QCoreApplication::exec()" href="qcoreapplication.html#exec" type="function">QCoreApplication::exec()</link> will return when the application exits...</para>
                    </quote>
                    <para>See also <link raw="skipline-command" href="07-0-qdoc-commands-includingexternalcode.html#skipline-command" type="page" page="Including External Code">\skipline</link>, <link raw="skipto-command" href="07-0-qdoc-commands-includingexternalcode.html#skipto-command" type="page" page="Including External Code">\skipto</link> and <link raw="dots" href="07-0-qdoc-commands-includingexternalcode.html#dots" type="page" page="Including External Code">\dots</link>.</para>
                    <target name="dots-command"/>
                </section>
                <section id="dots">
                    <heading level="1">\dots</heading>
                    <para>The \dots command indicates that parts of the source file have been omitted when quoting a file.</para>
                    <para>The command is used in conjunction with the <link raw="quotefromfile-command" href="07-0-qdoc-commands-includingexternalcode.html#quotefromfile-command" type="page" page="Including External Code">\quotefromfile</link> command, and should be stated on its own line. The dots are rendered on a new line, using a monospace font.</para>
                    <code>/ *!
    \quotefromfile examples/main.cpp
    \skipto main
    \printuntil {
    \dots
    \skipuntil exec
    \printline }
* /</code>
                    <para>QDoc renders this as:</para>
                    <quotefromfile>examples/main.cpp</quotefromfile>
                    <skipto>main</skipto>
                    <printuntil>{</printuntil>
                    <dots indent="4">...</dots>
                    <skipuntil>exec</skipuntil>
                    <printline>}</printline>
                    <para>The default indentation is 4 spaces, but this can be adjusted using the command's optional argument.</para>
                    <code>/ *!
    \dots 0
    \dots
    \dots 8
    \dots 12
    \dots 16
* /</code>
                    <para>QDoc renders this as:</para>
                    <dots indent="0">...</dots>
                    <dots indent="4">...</dots>
                    <dots indent="8">...</dots>
                    <dots indent="12">...</dots>
                    <dots indent="16">...</dots>
                    <para>See also <link raw="skipline-command" href="07-0-qdoc-commands-includingexternalcode.html#skipline-command" type="page" page="Including External Code">\skipline</link>, <link raw="skipto-command" href="07-0-qdoc-commands-includingexternalcode.html#skipto-command" type="page" page="Including External Code">\skipto</link> and <link raw="skipuntil-command" href="07-0-qdoc-commands-includingexternalcode.html#skipuntil-command" type="page" page="Including External Code">\skipuntil</link>.</para>
                    <target name="snippet-command"/>
                </section>
                <section id="snippet">
                    <heading level="1">\snippet</heading>
                    <para>The \snippet command causes a code snippet to be included verbatim as preformatted text, which may be syntax highlighted.</para>
                    <para>Each code snippet is referenced by the file that holds it and by a unique identifier for that file. Snippet files are typically stored in a <teletype type="highlighted">snippets</teletype> directory inside the documentation directory (for example, <teletype type="highlighted">$QTDIR/doc/src/snippets</teletype>).</para>
                    <para>For example, the following documentation references a snippet in a file residing in a subdirectory of the documentation directory:</para>
                    <code>\snippet snippets/textdocument-resources/main.cpp Adding a resource</code>
                    <para>The text following the file name is the unique identifier for the snippet. This is used to delimit the quoted code in the relevant snippet file, as shown in the following example that corresponds to the above <teletype type="highlighted">\snippet</teletype> command:</para>
                    <code>    ...
    QImage image(64, 64, QImage::Format_RGB32);
    image.fill(qRgb(255, 160, 128));

//! [Adding a resource]
    document-&gt;addResource(QTextDocument::ImageResource,
        QUrl(&quot;mydata://image.png&quot;), QVariant(image));
//! [Adding a resource]
    ...</code>
                    <target name="codeline-command"/>
                </section>
                <section id="codeline">
                    <heading level="1">\codeline</heading>
                    <para>The \codeline command inserts a blank line of preformatted text. It is used to insert gaps between snippets without closing the current preformatted text area and opening a new one.</para>
                </section>
            </description>
        </page>
    </document>
</WebXML>
