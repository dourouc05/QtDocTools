<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <page name="qml-glossary.html" href="qml-glossary.html" status="active" location="glossary.qdoc" filepath="C:/Qt/5.11.1/Src/qtdoc/doc/src/qmlapp/glossary.qdoc" lineno="28" subtype="page" title="Glossary Of QML Terms" fulltitle="Glossary Of QML Terms" subtitle="" module="QtDoc" brief="Glossary of terms used in the documentation for QML and Qt Quick">
            <target name="lazy-instantiation"/>
            <contents name="common-terms" title="Common Terms" level="1"/>
            <description path="C:/Qt/5.11.1/Src/qtdoc/doc/src/qmlapp/glossary.qdoc" line="28" column="4">
                <brief>Glossary of terms used in the documentation for QML and Qt Quick</brief>
                <section id="common-terms">
                    <heading level="1">Common Terms</heading>
                    <table>
                        <header>
                            <item>
                                <para>Term</para>
                            </item>
                            <item>
                                <para>Definition</para>
                            </item>
                        </header>
                        <row>
                            <item>
                                <para>QML</para>
                            </item>
                            <item>
                                <para>The language in which QML applications are written. The language architecture and engine are implemented by the Qt QML module.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Qt Quick</para>
                            </item>
                            <item>
                                <para>The standard library of types and functionality for the QML language, which is provided by the Qt Quick module, and may be accessed with &quot;import <link raw="QtQuick" href="qtquick-module.html" type="module">QtQuick</link> 2.3&quot;.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Type</para>
                            </item>
                            <item>
                                <para>In QML, a <italic>type</italic> may refer to either a <link raw="qtqml-typesystem-topic.html" href="qtqml-typesystem-topic.html" type="page" page="The QML Type System">Basic Type</link> or a <link raw="qtqml-typesystem-topic.html#qml-object-types" href="qtqml-typesystem-topic.html#qml-object-types" type="page" page="The QML Type System">QML Object Type</link>.</para>
                                <para>The QML language provides a number of built-in <link raw="qtqml-typesystem-basictypes.html" href="qtqml-typesystem-basictypes.html" type="page" page="QML Basic Types">basic types</link>, and the Qt Quick module provides various <link raw="Qt Quick QML Types" href="qtquick-qmlmodule.html" type="">Qt Quick types</link> for building QML applications. Types can also be provided by third-party developers through (<link raw="qtqml-modules-topic.html" href="qtqml-modules-topic.html" type="page" page="QML Modules">modules</link>) or by the application developer in the application itself through <link raw="qtqml-documents-definetypes.html" href="qtqml-documents-definetypes.html" type="page" page="Defining Object Types through QML Documents">QML Documents</link>.</para>
                                <para>See <link raw="qtqml-typesystem-topic.html" href="qtqml-typesystem-topic.html" type="page" page="The QML Type System">The QML Type System</link> for more details.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Basic Type</para>
                            </item>
                            <item>
                                <para>A <link raw="qtqml-typesystem-topic.html" href="qtqml-typesystem-topic.html" type="page" page="The QML Type System">basic type</link> is a simple type such as <teletype type="highlighted">int</teletype>, <teletype type="highlighted">string</teletype> and <teletype type="highlighted">bool</teletype>. Unlike <link raw="qtqml-typesystem-topic.html#qml-object-types" href="qtqml-typesystem-topic.html#qml-object-types" type="page" page="The QML Type System">object types</link>, an object cannot be instantiated from a basic type; for example, it is not possible to create an <teletype type="highlighted">int</teletype> object with properties, methods, signals and so on.</para>
                                <para>Basic types are built into the QML language, whereas object types cannot be used unless the appropriate <link raw="qtqml-modules-topic.html" href="qtqml-modules-topic.html" type="page" page="QML Modules">module</link> is imported.</para>
                                <para>See <link raw="qtqml-typesystem-topic.html" href="qtqml-typesystem-topic.html" type="page" page="The QML Type System">The QML Type System</link> for more details.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Object Type</para>
                            </item>
                            <item>
                                <para>A <link raw="qtqml-typesystem-topic.html#qml-object-types" href="qtqml-typesystem-topic.html#qml-object-types" type="page" page="The QML Type System">QML Object Type</link> is a type that can be instantiated by the QML engine.</para>
                                <para>A QML type can be defined either by a document in a .qml file beginning with a capital letter, or by a <link raw="QObject" href="qobject.html" type="class">QObject</link>-based C++ class.</para>
                                <para>See <link raw="qtqml-typesystem-topic.html" href="qtqml-typesystem-topic.html" type="page" page="The QML Type System">The QML Type System</link> for more details.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Object</para>
                            </item>
                            <item>
                                <para>A QML object is an instance of a <link raw="qtqml-typesystem-topic.html#qml-object-types" href="qtqml-typesystem-topic.html#qml-object-types" type="page" page="The QML Type System">QML Object Type</link>.</para>
                                <para>Such objects are created by the engine when it processes <link raw="qtqml-syntax-basics.html#object-declarations" href="qtqml-syntax-basics.html#object-declarations" type="page" page="QML Syntax Basics">object declarations</link>, which specify the objects to be created and the attributes that are to be defined for each object.</para>
                                <para>Additionally, objects can be dynamically created at runtime through Component.createObject() and Qt.createQmlObject().</para>
                                <para>See also <link raw="#lazy-instantiation" href="qml-glossary.html#lazy-instantiation" type="page" page="Glossary Of QML Terms">Lazy Instantiation</link>.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Component</para>
                            </item>
                            <item>
                                <para>A component is a template from which a QML object or object tree is created. It is produced when a document is loaded by the QML engine. Once it has been loaded, it can be used to instantiate the object or object tree that it represents.</para>
                                <para>Additionally, the <link raw="Component" href="qml-qtqml-component.html" type="">Component</link> type is a special type that can can be used to declare a component inline within a document. Component objects can also be dynamically created through Qt.createComponent() to dynamically create QML objects.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Document</para>
                            </item>
                            <item>
                                <para>A <link raw="qtqml-documents-topic.html" href="qtqml-documents-topic.html" type="page" page="QML Documents">QML Document</link> is a self contained piece of QML source code that begins with one or more import statements and contains a single top-level object declaration. A document may reside in a .qml file or a text string.</para>
                                <para>If it is placed in a .qml file whose name begins with a capital letter, the file is recognized by the engine as a definition of a QML type. The top-level object declaration encapsulates the object tree that will be instantiated by the type.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Property</para>
                            </item>
                            <item>
                                <para>A property is an attribute of an object type that has a name and an associated value; this value can be read (and in most cases, also written to) externally.</para>
                                <para>An object can have one or more properties. Some properties are associated with the canvas (e.g., x, y, width, height, and opacity) while others may be data specific to that type (e.g., the &quot;text&quot; property of the <link raw="Text" href="whatsnew50.html#text" type="page" page="What's New in Qt 5.0">Text</link> type).</para>
                                <para>See <link raw="qtqml-syntax-objectattributes.html" href="qtqml-syntax-objectattributes.html" type="page" page="QML Object Attributes">QML Object Attributes</link> for more details.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Binding</para>
                            </item>
                            <item>
                                <para>A binding is a JavaScript expression which is &quot;bound&quot; to a property. The value of the property at any point in time will be the value returned by evaluating that expression.</para>
                                <para>See <link raw="qtqml-syntax-propertybinding.html" href="qtqml-syntax-propertybinding.html" type="page" page="Property Binding">Property Binding</link> for more details.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Signal</para>
                            </item>
                            <item>
                                <para>A signal is a notification from a QML object. When an object emits a signal, other objects can receive and process this signal through a <link raw="Signal Attributes" href="qtqml-syntax-objectattributes.html#signal-attributes" type="page" page="QML Object Attributes">signal handler</link>.</para>
                                <para>Most properties of QML objects have a change signal, and also an associated change signal handler which may be defined by clients to implement functionality. For example, the &quot;onClicked()&quot; handler of an instance of the <link raw="MouseArea" href="qml-qtquick-mousearea.html" type="">MouseArea</link> type might be defined in an application to cause a sound to be played.</para>
                                <para>See <link raw="qtqml-syntax-signals.html" href="qtqml-syntax-signals.html" type="page" page="Signal and Handler Event System">Signal and Handler Event System</link> for more details.</para>
                            </item>
                        </row>
                        <row>
                            <item>
                                <para>Signal Handler</para>
                            </item>
                            <item>
                                <para>A signal handler is the expression (or function) which is triggered by a signal. It is also known as a &quot;slot&quot; in C++.</para>
                                <para>See <link raw="qtqml-syntax-signals.html" href="qtqml-syntax-signals.html" type="page" page="Signal and Handler Event System">Signal and Handler Event System</link> for more details.</para>
                            </item>
                        </row>
                        <row>
                            <target name="lazy-instantiation"/>
                            <item>
                                <para>Lazy Instantiation</para>
                            </item>
                            <item>
                                <para>Object instances can be instantiated &quot;lazily&quot; at run-time, to avoid performing unnecessary work until needed. Qt Quick provides the <link raw="Loader" href="qml-qtquick-loader.html" type="">Loader</link> type to make lazy instantiation more convenient.</para>
                            </item>
                        </row>
                    </table>
                </section>
            </description>
        </page>
    </document>
</WebXML>
