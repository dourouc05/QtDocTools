<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <page name="activeqt-server.html" href="activeqt-server.html" status="active" location="qtaxserver.qdoc" filepath="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/src/qtaxserver.qdoc" lineno="42" subtype="page" title="Building ActiveX servers in Qt" fulltitle="Building ActiveX servers in Qt" subtitle="" module="ActiveQt" groups="qt-activex" brief="A Windows-only static library for turning a Qt binary into a COM server">
            <contents name="using-the-library" title="Using the Library" level="1"/>
            <contents name="out-of-process-vs-in-process" title="Out-of-Process vs. In-Process" level="2"/>
            <contents name="typical-errors-during-the-post-build-steps" title="Typical Errors During the Post-Build Steps" level="2"/>
            <contents name="the-server-executable-crashes" title="The Server Executable Crashes" level="3"/>
            <contents name="the-server-executable-is-not-a-valid-win32-application" title="The Server Executable Is Not a Valid Win32 Application" level="3"/>
            <contents name="unable-to-locate-dll" title="&quot;Unable to locate DLL&quot;" level="3"/>
            <contents name="cannot-open-file" title="&quot;Cannot open file ...&quot;" level="3"/>
            <contents name="the-control-cannot-be-instantiated" title="The Control Cannot be Instantiated" level="3"/>
            <contents name="implementing-controls" title="Implementing Controls" level="1"/>
            <contents name="data-types" title="Data Types" level="2"/>
            <contents name="sub-objects" title="Sub-Objects" level="2"/>
            <contents name="property-notification" title="Property Notification" level="2"/>
            <contents name="serving-controls" title="Serving Controls" level="1"/>
            <contents name="typical-compile-time-problems" title="Typical Compile-Time Problems" level="2"/>
            <contents name="no-overloaded-function-takes-2-parameters" title="&quot;No overloaded function takes 2 parameters&quot;" level="3"/>
            <contents name="syntax-error-bad-suffix-on-number" title="&quot;Syntax error: bad suffix on number&quot;" level="3"/>
            <contents name="unresolved-external-symbol-ucm-instantiate" title="&quot;Unresolved external symbol _ucm_instantiate&quot;" level="3"/>
            <contents name="ucm-initialize-already-defined-in" title="&quot;_ucm_initialize already defined in ...&quot;" level="3"/>
            <contents name="distributing-qaxserver-binaries" title="Distributing QAxServer Binaries" level="2"/>
            <contents name="installing-stand-alone-servers" title="Installing Stand-Alone Servers" level="3"/>
            <contents name="installing-in-process-servers" title="Installing In-Process Servers" level="3"/>
            <contents name="distributing-servers-over-the-internet" title="Distributing Servers over the Internet" level="3"/>
            <contents name="using-the-controls" title="Using the Controls" level="1"/>
            <contents name="supported-and-unsupported-activex-clients" title="Supported and Unsupported ActiveX Clients" level="2"/>
            <contents name="supported-clients" title="Supported Clients" level="3"/>
            <contents name="unsupported-clients" title="Unsupported Clients" level="3"/>
            <contents name="typical-runtime-errors" title="Typical Runtime Errors" level="2"/>
            <contents name="the-server-does-not-respond" title="The Server Does Not Respond" level="3"/>
            <contents name="the-object-cannot-be-created" title="The Object Cannot Be Created" level="3"/>
            <contents name="debugging-runtime-errors" title="Debugging Runtime Errors" level="2"/>
            <contents name="class-information-and-tuning" title="Class Information and Tuning" level="1"/>
            <contents name="developing-licensed-components" title="Developing Licensed Components" level="2"/>
            <contents name="more-interfaces" title="More Interfaces" level="2"/>
            <description path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/src/qtaxserver.qdoc" line="42" column="4">
                <brief>A Windows-only static library for turning a Qt binary into a COM server.</brief>
                <para>The <link raw="QAxServer" href="qaxserver-module.html" type="module">QAxServer</link> module is part of the <link raw="ActiveQt" href="activeqt-index.html" type="page" page="Active Qt">ActiveQt</link> framework. It consists of three classes:</para>
                <list type="bullet">
                    <item>
                        <para>
                            <link raw="QAxFactory" href="qaxfactory.html" type="class">QAxFactory</link> defines a factory for the creation of COM objects.</para>
                    </item>
                    <item>
                        <para>
                            <link raw="QAxBindable" href="qaxbindable.html" type="class">QAxBindable</link> provides an interface between the Qt widget and the COM object.</para>
                    </item>
                    <item>
                        <para>
                            <link raw="QAxAggregated" href="qaxaggregated.html" type="class">QAxAggregated</link> can be subclassed to implement additional COM interfaces.</para>
                    </item>
                </list>
                <para>Some <link raw="ActiveQt Examples" href="examples-activeqt.html" type="page" page="ActiveQt Examples">example implementations</link> of ActiveX controls and COM objects are provided.</para>
                <para>Topics:</para>
                <section id="using-the-library">
                    <heading level="1">Using the Library</heading>
                    <para>To turn a standard Qt application into a COM server using the <link raw="QAxServer" href="qaxserver-module.html" type="module">QAxServer</link> library you must add <teletype type="highlighted">axserver</teletype> to the QT variable in your <teletype type="highlighted">.pro</teletype> file.</para>
                    <para>An out-of-process executable server is generated from a <teletype type="highlighted">.pro</teletype> file like this:</para>
                    <snippet location="doc_src_qaxserver.pro" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.pro" identifier="0"/>
                    <para>To build an in-process server, use a <teletype type="highlighted">.pro</teletype> file like this:</para>
                    <snippet location="doc_src_qaxserver.pro" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.pro" identifier="1"/>
                    <para>The files <teletype type="highlighted">qaxserver.rc</teletype> and <teletype type="highlighted">qaxserver.def</teletype> are part of the framework and can be used from their usual location (specify a path in the <teletype type="highlighted">.pro</teletype> file), or copied into the project directory. You can modify these files as long as it includes any file as the type library entry, ie. you can add version information or specify a different toolbox icon.</para>
                    <para>Using the <teletype type="highlighted">axserver</teletype> module will cause the <teletype type="highlighted">qmake</teletype> tool to add the required build steps to the build system:</para>
                    <list type="bullet">
                        <item>
                            <para>Link the binary against <teletype type="highlighted">qaxserver.lib</teletype> instead of <teletype type="highlighted">qtmain.lib</teletype></para>
                        </item>
                        <item>
                            <para>Call the <link raw="idc" href="activeqt-idc.html" type="page" page="IDC - The Interface Description Compiler (ActiveQt)">idc</link> tool to generate an IDL file for the COM server</para>
                        </item>
                        <item>
                            <para>Compile the IDL into a type library using the MIDL tool (part of the compiler installation)</para>
                        </item>
                        <item>
                            <para>Attach the resulting type library as a binary resource to the server binary (again using the <link raw="idc" href="activeqt-idc.html" type="page" page="IDC - The Interface Description Compiler (ActiveQt)">idc</link> tool)</para>
                        </item>
                        <item>
                            <para>Register the server</para>
                        </item>
                    </list>
                    <para>To skip the post-processing step, also set the <teletype type="highlighted">qaxserver_no_postlink</teletype> configuration.</para>
                    <para>Additionally you can specify a version number using the <teletype type="highlighted">VERSION</teletype> variable, e.g.</para>
                    <snippet location="doc_src_qaxserver.pro" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.pro" identifier="2"/>
                    <para>The version number specified will be used as the version of the type library and of the server when registering.</para>
                </section>
                <section id="out-of-process-vs-in-process">
                    <heading level="2">Out-of-Process vs. In-Process</heading>
                    <para>Whether your COM server should run as a stand-alone executable or as a shared library in the client process depends mainly on the type of COM objects you want to provide in the server.</para>
                    <para>An executable server has the advantage of being able to run as a stand-alone application, but adds considerable overhead to the communication between the COM client and the COM object. If the control has a programming error only the server process running the control will crash, and the client application will probably continue to run. Not all COM clients support executable servers.</para>
                    <para>An in-process server is usually smaller and has faster startup time. The communication between client and server is done directly through virtual function calls and does not introduce the overhead required for remote procedure calls. However, if the server crashes the client application is likely to crash as well, and not every functionality is available for in-process servers (i.e. register in the COM's running-object-table).</para>
                    <para>Both server types can use Qt either as a shared library, or statically linked into the server binary.</para>
                </section>
                <section id="typical-errors-during-the-post-build-steps">
                    <heading level="2">Typical Errors During the Post-Build Steps</heading>
                    <para>For the <link raw="ActiveQt" href="activeqt-index.html" type="page" page="Active Qt">ActiveQt</link> specific post-processing steps to work the server has to meet some requirements:</para>
                    <list type="bullet">
                        <item>
                            <para>All controls exposed can be created with nothing but a <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> instance being present</para>
                        </item>
                        <item>
                            <para>The initial linking of the server includes a temporary type library resource</para>
                        </item>
                        <item>
                            <para>All dependencies required to run the server are in the system path (or in the path used by the calling environment; note that Visual Studio has its own set of environment variables listed in the Tools|Options|Directories dialog).</para>
                        </item>
                    </list>
                    <para>If those requirements are not met one ore more of the following errors are likely to occur:</para>
                </section>
                <section id="the-server-executable-crashes">
                    <heading level="3">The Server Executable Crashes</heading>
                    <para>To generate the IDL the widgets exposed as ActiveX controls need to be instantiated (the constructor is called). At this point, nothing else but a <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> object exists. Your widget constructor must not rely on any other objects to be created, e.g. it should check for null-pointers.</para>
                    <para>To debug your server run it with -dumpidl outputfile and check where it crashes.</para>
                    <para>Note that no functions of the control are called.</para>
                </section>
                <section id="the-server-executable-is-not-a-valid-win32-application">
                    <heading level="3">The Server Executable Is Not a Valid Win32 Application</heading>
                    <para>Attaching the type library corrupted the server binary. This is a bug in Windows and happens only with release builds.</para>
                    <para>The first linking step has to link a dummy type library into the executable that can later be replaced by idc. Add a resource file with a type library to your project as demonstrated in the examples.</para>
                </section>
                <section id="unable-to-locate-dll">
                    <heading level="3">&quot;Unable to locate DLL&quot;</heading>
                    <para>The build system needs to run the server executable to generate the interface definition, and to register the server. If a dynamic link library the server links against is not in the path this might fail (e.g. Visual Studio calls the server using the environment settings specified in the &quot;Directories&quot; option). Make sure that all DLLs and plugins required by your server are located in a directory that is listed in the path as printed in the error message box (see also <link raw="The Windows Deployment Tool" href="windows-deployment.html#the-windows-deployment-tool" type="page" page="Qt for Windows - Deployment">The Windows Deployment Tool</link>).</para>
                </section>
                <section id="cannot-open-file">
                    <heading level="3">&quot;Cannot open file ...&quot;</heading>
                    <para>The ActiveX server could not shut down properly when the last client stopped using it. It usually takes about two seconds for the application to terminate, but you might have to use the task manager to kill the process (e.g. when a client doesn't release the controls properly).</para>
                </section>
                <section id="the-control-cannot-be-instantiated">
                    <heading level="3">The Control Cannot be Instantiated</heading>
                    <para>In this case, it may help to register the server as Administrator.</para>
                </section>
                <section id="implementing-controls">
                    <heading level="1">Implementing Controls</heading>
                    <para>To implement a COM object with Qt, create a subclass of <link raw="QObject" href="qobject.html" type="class">QObject</link> or any existing <link raw="QObject" href="qobject.html" type="class">QObject</link> subclass. If the class is a subclass of <link raw="QWidget" href="qwidget.html" type="class">QWidget</link>, the COM object will be an ActiveX control.</para>
                    <snippet location="doc_src_qaxserver.cpp" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.cpp" identifier="3"/>
                    <para>The <link raw="Q_OBJECT" href="qobject.html#Q_OBJECT" type="function">Q_OBJECT</link> macro is required to provide the meta object information about the widget to the <link raw="ActiveQt" href="activeqt-index.html" type="page" page="Active Qt">ActiveQt</link> framework.</para>
                    <snippet location="doc_src_qaxserver.cpp" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.cpp" identifier="4"/>
                    <para>Use the <link raw="Q_CLASSINFO()" href="qobject.html#Q_CLASSINFO" type="function">Q_CLASSINFO()</link> macro to specify the COM identifiers for the COM object. <teletype type="highlighted">ClassID</teletype> and <teletype type="highlighted">InterfaceID</teletype> are required, while <teletype type="highlighted">EventsID</teletype> is only necessary when your object has signals. To generate these identifiers, use system tools like <teletype type="highlighted">uuidgen</teletype> or <teletype type="highlighted">guidgen</teletype>.</para>
                    <para>You can specify additional attributes for each of your classes; see <link raw="Class Information and Tuning" href="activeqt-server.html#class-information-and-tuning" type="page" page="Building ActiveX servers in Qt">Class Information and Tuning</link> for details.</para>
                    <snippet location="doc_src_qaxserver.cpp" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.cpp" identifier="5"/>
                    <para>Use the <link raw="Q_PROPERTY()" href="qobject.html#Q_PROPERTY" type="function">Q_PROPERTY()</link> macro to declare properties for the ActiveX control.</para>
                    <para>Declare a standard constructor taking a parent object, and functions, signals and slots like for any <link raw="QObject" href="qobject.html" type="class">QObject</link> subclass. <footnote>
                            <para>If a standard constructor is not present the compiler will issue an error &quot;no overloaded function takes 2 parameters&quot; when using the default factory through the <link raw="QAXFACTORY_DEFAULT()" href="qaxfactory.html#QAXFACTORY_DEFAULT" type="function">QAXFACTORY_DEFAULT()</link> macro. If you cannot provide a standard constructor you must implement a <link raw="QAxFactory" href="qaxfactory.html" type="class">QAxFactory</link> custom factory and call the constructor you have in your implementation of <link raw="QAxFactory::createObject" href="qaxfactory.html#createObject" type="function">QAxFactory::createObject</link>.</para>
                        </footnote><snippet location="doc_src_qaxserver.cpp" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.cpp" identifier="6"/>
                        <para>The <link raw="ActiveQt" href="activeqt-index.html" type="page" page="Active Qt">ActiveQt</link> framework will expose properties and public slots as ActiveX properties and methods, and signals as ActiveX events, and convert between the Qt data types and the equivalent COM data types.</para>
                    </para>
                    <section id="data-types">
                        <heading level="2">Data Types</heading>
                        <para>The Qt data types that are supported for properties are:</para>
                        <table>
                            <header>
                                <item>
                                    <para>Qt data type</para>
                                </item>
                                <item>
                                    <para>COM property</para>
                                </item>
                            </header>
                            <row>
                                <item>
                                    <para>bool</para>
                                </item>
                                <item>
                                    <para>VARIANT_BOOL</para>
                                </item>
                            </row>
                            <row>
                                <item>
                                    <para>
                                        <link raw="QString" href="qstring.html" type="class">QString</link></para>
                                </item>
                                <item>
                                    <para>BSTR</para>
                                </item>
                            </row>
                            <row>
                                <item>
                                    <para>int</para>
                                </item>
                                <item>
                                    <para>int</para>
                                </item>
                            </row>
                            <row>
                                <item>
                                    <para>uint</para>
                                </item>
                                <item>
                                    <para>unsigned int</para>
                                </item>
                            </row>
                            <row>
                                <item>
                                    <para>double</para>
                                </item>
                                <item>
                                    <para>double</para>
                                </item>
                            </row>
                            <row>
                                <item>
                                    <para>
                                        <link raw="qlonglong" href="qtglobal.html#qlonglong-typedef" type="typedef">qlonglong</link></para>
                                </item>
                                <item>
                                    <para>CY</para>
                                </item>
                            </row>
                            <row>
                                <item>
                                    <para>
                                        <link raw="qulonglong" href="qtglobal.html#qulonglong-typedef" type="typedef">qulonglong</link></para>
                                </item>
                                <item>
                                    <para>CY</para>
                                </item>
                            </row>
                            <row>
                                <item>
                                    <para>
                                        <link raw="QColor" href="qcolor.html" type="class">QColor</link></para>
                                </item>
                                <item>
                                    <para>OLE_COLOR</para>
                                </item>
                            </row>
                            <row>
                                <item>
                                    <para>
                                        <link raw="QDate" href="qdate.html" type="class">QDate</link></para>
                                </item>
                                <item>
                                    <para>DATE</para>
                                </item>
                            </row>
                            <row>
                                <item>
                                    <para>
                                        <link raw="QDateTime" href="qdatetime.html" type="class">QDateTime</link></para>
                                </item>
                                <item>
                                    <para>DATE</para>
                                </item>
                            </row>
                            <row>
                                <item>
                                    <para>
                                        <link raw="QTime" href="qtime.html" type="class">QTime</link></para>
                                </item>
                                <item>
                                    <para>DATE</para>
                                </item>
                            </row>
                            <row>
                                <item>
                                    <para>
                                        <link raw="QFont" href="qfont.html" type="class">QFont</link></para>
                                </item>
                                <item>
                                    <para>IFontDisp*</para>
                                </item>
                            </row>
                            <row>
                                <item>
                                    <para>
                                        <link raw="QPixmap" href="qpixmap.html" type="class">QPixmap</link></para>
                                </item>
                                <item>
                                    <para>IPictureDisp* <footnote>
                                            <para>COM cannot marshal IPictureDisp across process boundaries, so <link raw="QPixmap" href="qpixmap.html" type="class">QPixmap</link> properties cannot be called for out-of-process servers. You can however marshal the image data via e.g. temporary files. See the Microsoft KB article Q150034 for more information.</para>
                                        </footnote></para>
                                </item>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QVariant" href="qvariant.html" type="class">QVariant</link></para>
                                    </item>
                                    <item>
                                        <para>VARIANT</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QVariantList" href="qvariant.html#QVariantList-typedef" type="typedef">QVariantList</link> (same as <link raw="QList" href="qlist.html" type="class">QList</link>&lt;<link raw="QVariant" href="qvariant.html" type="class">QVariant</link>&gt;)</para>
                                    </item>
                                    <item>
                                        <para>SAFEARRAY(VARIANT)</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QStringList" href="qstringlist.html" type="class">QStringList</link></para>
                                    </item>
                                    <item>
                                        <para>SAFEARRAY(BSTR)</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link></para>
                                    </item>
                                    <item>
                                        <para>SAFEARRAY(BYTE)</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QRect" href="qrect.html" type="class">QRect</link></para>
                                    </item>
                                    <item>
                                        <para>User defined type</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QSize" href="qsize.html" type="class">QSize</link></para>
                                    </item>
                                    <item>
                                        <para>User defined type</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QPoint" href="qpoint.html" type="class">QPoint</link></para>
                                    </item>
                                    <item>
                                        <para>User defined type</para>
                                    </item>
                                </row>
                            </row>
                            <para>The Qt data types that are supported for parameters in signals and slots are:</para>
                            <table>
                                <header>
                                    <item>
                                        <para>Qt data type</para>
                                    </item>
                                    <item>
                                        <para>COM parameter</para>
                                    </item>
                                </header>
                                <row>
                                    <item>
                                        <para>bool</para>
                                    </item>
                                    <item>
                                        <para>[in] VARIANT_BOOL</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>bool&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in, out] VARIANT_BOOL*</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QString" href="qstring.html" type="class">QString</link>, const <link raw="QString" href="qstring.html" type="class">QString</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in] BSTR</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QString" href="qstring.html" type="class">QString</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in, out] BSTR*</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QString" href="qstring.html" type="class">QString</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in, out] BSTR*</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>int</para>
                                    </item>
                                    <item>
                                        <para>[in] int</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>int&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in,out] int</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>uint</para>
                                    </item>
                                    <item>
                                        <para>[in] unsigned int</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>uint&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in, out] unsigned int*</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>double</para>
                                    </item>
                                    <item>
                                        <para>[in] double</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>double&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in, out] double*</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QColor" href="qcolor.html" type="class">QColor</link>, const <link raw="QColor" href="qcolor.html" type="class">QColor</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in] OLE_COLOR</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QColor" href="qcolor.html" type="class">QColor</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in, out] OLE_COLOR*</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QDate" href="qdate.html" type="class">QDate</link>, const <link raw="QDate" href="qdate.html" type="class">QDate</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in] DATE</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QDate" href="qdate.html" type="class">QDate</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in, out] DATE*</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QDateTime" href="qdatetime.html" type="class">QDateTime</link>, const <link raw="QDateTime" href="qdatetime.html" type="class">QDateTime</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in] DATE</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QDateTime" href="qdatetime.html" type="class">QDateTime</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in, out] DATE*</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QFont" href="qfont.html" type="class">QFont</link>, const <link raw="QFont" href="qfont.html" type="class">QFont</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in] IFontDisp*</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QFont" href="qfont.html" type="class">QFont</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in, out] IFontDisp**</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QPixmap" href="qpixmap.html" type="class">QPixmap</link>, const <link raw="QPixmap" href="qpixmap.html" type="class">QPixmap</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in] IPictureDisp*</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QPixmap" href="qpixmap.html" type="class">QPixmap</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in, out] IPictureDisp**</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QList" href="qlist.html" type="class">QList</link>&lt;<link raw="QVariant" href="qvariant.html" type="class">QVariant</link>&gt;, const <link raw="QList" href="qlist.html" type="class">QList</link>&lt;<link raw="QVariant" href="qvariant.html" type="class">QVariant</link>&gt;&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in] SAFEARRAY(VARIANT)</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QList" href="qlist.html" type="class">QList</link>&lt;<link raw="QVariant" href="qvariant.html" type="class">QVariant</link>&gt;&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in, out] SAFEARRAY(VARIANT)*</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QStringList" href="qstringlist.html" type="class">QStringList</link>, const <link raw="QStringList" href="qstringlist.html" type="class">QStringList</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in] SAFEARRAY(BSTR)</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QStringList" href="qstringlist.html" type="class">QStringList</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in, out] SAFEARRAY(BSTR)*</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>, const <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in] SAFEARRAY(BYTE)</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QByteArray" href="qbytearray.html" type="class">QByteArray</link>&amp;</para>
                                    </item>
                                    <item>
                                        <para>[in, out] SAFEARRAY(BYTE)*</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QObject" href="qobject.html" type="class">QObject</link>*</para>
                                    </item>
                                    <item>
                                        <para>[in] IDispatch*</para>
                                    </item>
                                </row>
                                <row>
                                    <item>
                                        <para>
                                            <link raw="QRect" href="qrect.html" type="class">QRect</link>&amp; <footnote>
                                                <para>OLE needs to marshal user defined types by reference (ByRef), and cannot marshal them by value (ByVal). This is why const-references and object parameters are not supported for <link raw="QRect" href="qrect.html" type="class">QRect</link>, <link raw="QSize" href="qsize.html" type="class">QSize</link> and <link raw="QPoint" href="qpoint.html" type="class">QPoint</link>.</para>
                                            </footnote></para>
                                        <item>
                                            <para>[in, out] struct <link raw="QRect" href="qrect.html" type="class">QRect</link> (user defined)</para>
                                        </item>
                                    </item>
                                    <row>
                                        <item>
                                            <para>
                                                <link raw="QSize" href="qsize.html" type="class">QSize</link>&amp;</para>
                                        </item>
                                        <item>
                                            <para>[in, out] struct <link raw="QSize" href="qsize.html" type="class">QSize</link> (user defined)</para>
                                        </item>
                                    </row>
                                    <row>
                                        <item>
                                            <para>
                                                <link raw="QPoint" href="qpoint.html" type="class">QPoint</link>&amp;</para>
                                        </item>
                                        <item>
                                            <para>[in, out] struct <link raw="QPoint" href="qpoint.html" type="class">QPoint</link> (user defined)</para>
                                        </item>
                                    </row>
                                </row>
                                <para>Also supported are exported enums and flags (see <link raw="Q_ENUMS()" href="qobject-obsolete.html#Q_ENUMS" type="function">Q_ENUMS()</link> and <link raw="Q_FLAGS()" href="qobject-obsolete.html#Q_FLAGS" type="function">Q_FLAGS()</link>). The in-parameter types are also supported as return values.</para>
                                <para>Properties and signals/slots that have parameters using any other data types are ignored by the <link raw="ActiveQt" href="activeqt-index.html" type="page" page="Active Qt">ActiveQt</link> framework.</para>
                            </table>
                            <section id="sub-objects">
                                <heading level="2">Sub-Objects</heading>
                                <para>COM objects can have multiple sub-objects that can represent a sub element of the COM object. A COM object representing a multi-document spread sheet application can for example provide one sub-object for each spread sheet.</para>
                                <para>Any <link raw="QObject" href="qobject.html" type="class">QObject</link> subclass can be used as the type for a sub object in ActiveX, as long as it is known to the <link raw="QAxFactory" href="qaxfactory.html" type="class">QAxFactory</link>. Then the type can be used in properties, or as the return type or parameter of a slot.</para>
                            </section>
                            <section id="property-notification">
                                <heading level="2">Property Notification</heading>
                                <para>To make the properties bindable for the ActiveX client, use multiple inheritance from the <link raw="QAxBindable" href="qaxbindable.html" type="class">QAxBindable</link> class:</para>
                                <snippet location="doc_src_qaxserver.cpp" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.cpp" identifier="7"/>
                                <para>When implementing the property write functions, use the <link raw="QAxBindable" href="qaxbindable.html" type="class">QAxBindable</link> class's requestPropertyChange() and propertyChanged() functions to allow ActiveX clients to bind to the control properties. <footnote>
                                        <para>This is not required, but gives the client more control over the ActiveX control.</para>
                                    </footnote></para>
                                <section id="serving-controls">
                                    <heading level="1">Serving Controls</heading>
                                    <para>To make a COM server available to the COM system it must be registered in the system registry using five unique identifiers. These identifiers are provided by tools like <teletype type="highlighted">guidgen</teletype> or <teletype type="highlighted">uuidgen</teletype>. The registration information allows COM to localize the binary providing a requested ActiveX control, marshall remote procedure calls to the control and read type information about the methods and properties exposed by the control.</para>
                                    <para>To create the COM object when the client asks for it the server must export an implementation of a <link raw="QAxFactory" href="qaxfactory.html" type="class">QAxFactory</link>. The easist way to do this is to use a set of macros:</para>
                                    <snippet location="doc_src_qaxserver.cpp" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.cpp" identifier="8"/>
                                    <para>This will export <teletype type="highlighted">MyWidget</teletype> and <teletype type="highlighted">MyWidget2</teletype> as COM objects that can be created by COM clients, and will register <teletype type="highlighted">MySubType</teletype> as a type that can be used in properties and parameters of <teletype type="highlighted">MyWidget</teletype> and <teletype type="highlighted">MyWidget2</teletype>.</para>
                                    <para>The <link raw="QAxFactory" href="qaxfactory.html" type="class">QAxFactory class documentation</link> explains how to use this macro, and how to implement and use custom factories.</para>
                                    <para>For out-of-process executable servers you can implement a main() function to instantiate a <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> object and enter the event loop just like any normal Qt application. By default the application will start as a standard Qt application, but if you pass <teletype type="highlighted">-activex</teletype> on the command line it will start as an ActiveX server. Use <link raw="QAxFactory::isServer()" href="qaxfactory.html#isServer" type="function">QAxFactory::isServer()</link> to create and run a standard application interface, or to prevent a stand-alone execution:</para>
                                    <snippet location="doc_src_qaxserver.cpp" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.cpp" identifier="9"/>
                                    <para>This is however not necessary as <link raw="ActiveQt" href="activeqt-index.html" type="page" page="Active Qt">ActiveQt</link> provides a default implementation of a main function. The default implementation calls <link raw="QAxFactory::startServer()" href="qaxfactory.html#startServer" type="function">QAxFactory::startServer()</link>, creates a <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> instance and calls exec().</para>
                                    <para>To build the ActiveX server executable run <teletype type="highlighted">qmake</teletype> to generate the makefile, and use your compiler's make tool as for any other Qt application. The make process will also register the controls in the system registry by calling the resulting executable with the <teletype type="highlighted">-regserver</teletype> command line option.</para>
                                    <para>If the ActiveX server is an executable, the following command line options are supported:</para>
                                    <table>
                                        <header>
                                            <item>
                                                <para>Option</para>
                                            </item>
                                            <item>
                                                <para>Result</para>
                                            </item>
                                        </header>
                                        <row>
                                            <item>
                                                <para>
                                                    <teletype type="highlighted">-regserver</teletype></para>
                                            </item>
                                            <item>
                                                <para>Registers the server in the system registry</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>
                                                    <teletype type="highlighted">-unregserver</teletype></para>
                                            </item>
                                            <item>
                                                <para>Unregisters the server from the system registry</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>
                                                    <teletype type="highlighted">-activex</teletype></para>
                                            </item>
                                            <item>
                                                <para>Starts the application as an ActiveX server</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>
                                                    <teletype type="highlighted">-dumpidl &lt;file&gt; -version x.y</teletype></para>
                                            </item>
                                            <item>
                                                <para>Writes the server's IDL to the specified file. The type library will have version x.y</para>
                                            </item>
                                        </row>
                                    </table>
                                    <para>In-process servers can be registered using the <teletype type="highlighted">regsvr32</teletype> tool available on all Windows systems.</para>
                                </section>
                                <section id="typical-compile-time-problems">
                                    <heading level="2">Typical Compile-Time Problems</heading>
                                    <para>The compiler/linker errors listed are based on those issued by the Microsoft Visual C++ 6.0 compiler.</para>
                                </section>
                                <section id="no-overloaded-function-takes-2-parameters">
                                    <heading level="3">&quot;No overloaded function takes 2 parameters&quot;</heading>
                                    <para>When the error occurs in code that uses the <link raw="QAXFACTORY_DEFAULT()" href="qaxfactory.html#QAXFACTORY_DEFAULT" type="function">QAXFACTORY_DEFAULT()</link> macro, the widget class had no constructor that can be used by the default factory. Either add a standard widget constructor or implement a custom factory that doesn't require one.</para>
                                    <para>When the error occurs in code that uses the <link raw="QAXFACTORY_EXPORT()" href="qaxfactory.html#QAXFACTORY_EXPORT" type="function">QAXFACTORY_EXPORT()</link> macro, the <link raw="QAxFactory" href="qaxfactory.html" type="class">QAxFactory</link> subclass had no appropriate constructor. Provide a public class constructor like</para>
                                    <snippet location="doc_src_qaxserver.cpp" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.cpp" identifier="10"/>
                                    <para>for your factory class.</para>
                                </section>
                                <section id="syntax-error-bad-suffix-on-number">
                                    <heading level="3">&quot;Syntax error: bad suffix on number&quot;</heading>
                                    <para>The unique identifiers have not been passed as strings into the <link raw="QAXFACTORY_EXPORT()" href="qaxfactory.html#QAXFACTORY_EXPORT" type="function">QAXFACTORY_EXPORT()</link> or <link raw="QAXFACTORY_DEFAULT()" href="qaxfactory.html#QAXFACTORY_DEFAULT" type="function">QAXFACTORY_DEFAULT()</link> macro.</para>
                                </section>
                                <section id="unresolved-external-symbol-ucm-instantiate">
                                    <heading level="3">&quot;Unresolved external symbol _ucm_instantiate&quot;</heading>
                                    <para>The server does not export an implementation of a <link raw="QAxFactory" href="qaxfactory.html" type="class">QAxFactory</link>. Use the <link raw="QAXFACTORY_EXPORT()" href="qaxfactory.html#QAXFACTORY_EXPORT" type="function">QAXFACTORY_EXPORT()</link> macro in one of the project's implementation files to instantiate and export a factory, or use the <link raw="QAXFACTORY_DEFAULT()" href="qaxfactory.html#QAXFACTORY_DEFAULT" type="function">QAXFACTORY_DEFAULT()</link> macro to use the default factory.</para>
                                </section>
                                <section id="ucm-initialize-already-defined-in">
                                    <heading level="3">&quot;_ucm_initialize already defined in ...&quot;</heading>
                                    <para>The server exports more than one implementation of a <link raw="QAxFactory" href="qaxfactory.html" type="class">QAxFactory</link>, or exports the same implementation twice. If you use the default factory, the <link raw="QAXFACTORY_DEFAULT()" href="qaxfactory.html#QAXFACTORY_DEFAULT" type="function">QAXFACTORY_DEFAULT()</link> macro must only be used once in the project. Use a custom <link raw="QAxFactory" href="qaxfactory.html" type="class">QAxFactory</link> implementation and the <link raw="QAXFACTORY_EXPORT()" href="qaxfactory.html#QAXFACTORY_EXPORT" type="function">QAXFACTORY_EXPORT()</link> macro if the server provides multiple ActiveX controls.</para>
                                </section>
                                <section id="distributing-qaxserver-binaries">
                                    <heading level="2">Distributing QAxServer Binaries</heading>
                                    <para>ActiveX servers written with Qt can use Qt either as a shared library, or have Qt linked statically into the binary. Both ways will produce rather large packages (either the server binary itself becomes large, or you have to ship the Qt DLL).</para>
                                </section>
                                <section id="installing-stand-alone-servers">
                                    <heading level="3">Installing Stand-Alone Servers</heading>
                                    <para>When your ActiveX server can also run as a stand-alone application, run the server executable with the <teletype type="highlighted">-regserver</teletype> command line parameter after installing the executable on the target system. After that the controls provided by the server will be available to ActiveX clients.</para>
                                </section>
                                <section id="installing-in-process-servers">
                                    <heading level="3">Installing In-Process Servers</heading>
                                    <para>When your ActiveX server is part of an installation package, use the <teletype type="highlighted">regsvr32</teletype> tool provided by Microsoft to register the controls on the target system. If this tool is not present, load the DLL into your installer process, resolve the <teletype type="highlighted">DllRegisterServer</teletype> symbol and call the function:</para>
                                    <snippet location="doc_src_qaxserver.cpp" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.cpp" identifier="11"/>
                                </section>
                                <section id="distributing-servers-over-the-internet">
                                    <heading level="3">Distributing Servers over the Internet</heading>
                                    <para>If you want to use controls in your server in web-pages you need to make the server available to the browser used to view your page, and you need to specify the location of the server package in your page.</para>
                                    <para>To specify the location of a server, use the CODEBASE attribute in the OBJECT tag of your web-site. The value can point to the server file itself, to an INF file listing other files the server requires (e.g. the Qt DLL), or a compressed CAB archive.</para>
                                    <para>INF and CAB files are documented in almost every book available about ActiveX and COM programming as well as in the MSDN library and various other Online resources. The examples include INF files that can be used to build CAB archives:</para>
                                    <snippet location="activeqt/simple/simple.inf" path="C:/Qt/5.11.1/Src/qtactiveqt/examples/activeqt/simple/simple.inf" identifier="0"/>
                                    <para>The CABARC tool from Microsoft can easily generate CAB archives:</para>
                                    <snippet location="doc_src_qaxserver.qdoc" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.qdoc" identifier="12"/>
                                    <para>The INF files assume a static build of Qt, so no dependencies to other DLLs are listed in the INF files. To distribute an ActiveX server depending on DLLs you must add the dependencies, and provide the library files with the archive.</para>
                                </section>
                                <section id="using-the-controls">
                                    <heading level="1">Using the Controls</heading>
                                    <para>To use the ActiveX controls, e.g. to embed them in a web page, use the <teletype type="highlighted">&lt;object&gt;</teletype> HTML tag.</para>
                                    <snippet location="doc_src_qaxserver.qdoc" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.qdoc" identifier="13"/>
                                    <para>To initialize the control's properties, use</para>
                                    <snippet location="doc_src_qaxserver.qdoc" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.qdoc" identifier="14"/>
                                    <para>If the web browser supports scripting use JavaScript, VBScript and forms to script the control. The <link raw="ActiveQt Examples" href="examples-activeqt.html" type="page" page="ActiveQt Examples">ActiveQt Examples</link> include demonstration HTML pages for the example controls.</para>
                                </section>
                                <section id="supported-and-unsupported-activex-clients">
                                    <heading level="2">Supported and Unsupported ActiveX Clients</heading>
                                    <para>The following is largly based on our own experiements with ActiveX controls and client applications, and is by no means complete.</para>
                                </section>
                                <section id="supported-clients">
                                    <heading level="3">Supported Clients</heading>
                                    <para>These standard applications work with ActiveX controls developed with <link raw="ActiveQt" href="activeqt-index.html" type="page" page="Active Qt">ActiveQt</link>. Note that some clients support only in-process controls.</para>
                                    <list type="bullet">
                                        <item>
                                            <para>Internet Explorer</para>
                                        </item>
                                        <item>
                                            <para>Microsoft ActiveX Control Test Container</para>
                                        </item>
                                        <item>
                                            <para>Microsoft Visual Studio 6.0</para>
                                        </item>
                                        <item>
                                            <para>Microsoft Visual Studio.NET/2003</para>
                                        </item>
                                        <item>
                                            <para>Microsoft Visual Basic 6.0</para>
                                        </item>
                                        <item>
                                            <para>MFC- and ATL-based containers</para>
                                        </item>
                                        <item>
                                            <para>Sybase PowerBuilder</para>
                                        </item>
                                        <item>
                                            <para>
                                                <link raw="ActiveQt" href="activeqt-index.html" type="page" page="Active Qt">ActiveQt</link> based containers</para>
                                        </item>
                                    </list>
                                    <para>Microsoft Office applications are supported, but you need to register the controls as &quot;Insertable&quot; objects. Reimplement <link raw="QAxFactory::registerClass" href="qaxfactory.html#registerClass" type="function">QAxFactory::registerClass</link> to add this attribute to the COM class, or set the &quot;Insertable&quot; class info for your class to &quot;yes&quot; using the <link raw="Q_CLASSINFO" href="qobject.html#Q_CLASSINFO" type="function">Q_CLASSINFO</link> macro.</para>
                                </section>
                                <section id="unsupported-clients">
                                    <heading level="3">Unsupported Clients</heading>
                                    <para>We have not managed to make <link raw="ActiveQt" href="activeqt-index.html" type="page" page="Active Qt">ActiveQt</link> based COM objects work with the following client applications.</para>
                                    <list type="bullet">
                                        <item>
                                            <para>Borland C++ Builder (Versions 5 and 6)</para>
                                        </item>
                                        <item>
                                            <para>Borland Delphi</para>
                                        </item>
                                    </list>
                                </section>
                                <section id="typical-runtime-errors">
                                    <heading level="2">Typical Runtime Errors</heading>
                                </section>
                                <section id="the-server-does-not-respond">
                                    <heading level="3">The Server Does Not Respond</heading>
                                    <para>If the system is unable to start the server (check with the task manager whether the server runs a process), make sure that no DLL the server depends on is missing from the system path (e.g. the Qt DLL!). Use a dependency walker to view all dependencies of the server binary.</para>
                                    <para>If the server runs (e.g. the task manager lists a process), see the following section for information on debugging your server.</para>
                                </section>
                                <section id="the-object-cannot-be-created">
                                    <heading level="3">The Object Cannot Be Created</heading>
                                    <para>If the server could be built and registered correctly during the build process, but the object cannot be initiliazed e.g. by the OLE/COM Object Viewer application, make sure that no DLL the server depends on is missing from the system path (e.g. the Qt DLL). Use a dependency walker to view all dependencies of the server binary.</para>
                                    <para>If the server runs, see the following section for information on debugging your server.</para>
                                </section>
                                <section id="debugging-runtime-errors">
                                    <heading level="2">Debugging Runtime Errors</heading>
                                    <para>To debug an in-process server in Visual Studio, set the server project as the active project, and specify a client &quot;executable for debug session&quot; in the project settings (e.g. use the ActiveX Test Container). You can set breakpoints in your code, and also step into <link raw="ActiveQt" href="activeqt-index.html" type="page" page="Active Qt">ActiveQt</link> and Qt code if you installed the debug version.</para>
                                    <para>To debug an executable server, run the application in a debugger and start with the command line parameter <teletype type="highlighted">-activex</teletype>. Then start your client and create an instance of your ActiveX control. COM will use the existing process for the next client trying to create an ActiveX control.</para>
                                </section>
                                <section id="class-information-and-tuning">
                                    <heading level="1">Class Information and Tuning</heading>
                                    <para>To provide attributes for each COM class, use the <link raw="Q_CLASSINFO" href="qobject.html#Q_CLASSINFO" type="function">Q_CLASSINFO</link> macro, which is part of Qt's meta object system.</para>
                                    <table>
                                        <header>
                                            <item>
                                                <para>Key</para>
                                            </item>
                                            <item>
                                                <para>Meaning of value</para>
                                            </item>
                                        </header>
                                        <row>
                                            <item>
                                                <para>Version</para>
                                            </item>
                                            <item>
                                                <para>The version of the class (1.0 is default)</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>Description</para>
                                            </item>
                                            <item>
                                                <para>A string describing the class.</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>ClassID</para>
                                            </item>
                                            <item>
                                                <para>The class ID. You must reimplement <link raw="QAxFactory::classID" href="qaxfactory.html#classID" type="function">QAxFactory::classID</link> if not specified.</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>InterfaceID</para>
                                            </item>
                                            <item>
                                                <para>The interface ID. You must reimplement <link raw="QAxFactory::interfaceID" href="qaxfactory.html#interfaceID" type="function">QAxFactory::interfaceID</link> if not specified.</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>EventsID</para>
                                            </item>
                                            <item>
                                                <para>The event interface ID. No signals are exposed as COM events if not specified.</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>DefaultProperty</para>
                                            </item>
                                            <item>
                                                <para>The property specified represents the default property of this class. Ie. the default property of a push button would be &quot;text&quot;.</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>DefaultSignal</para>
                                            </item>
                                            <item>
                                                <para>The signal specified respresents the default signal of this class. Ie. the default signal of a push button would be &quot;clicked&quot;.</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>LicenseKey</para>
                                            </item>
                                            <item>
                                                <para>Object creation requires the specified license key. The key can be empty to require a licensed machine. By default classes are not licensed. Also see the following section.</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>StockEvents</para>
                                            </item>
                                            <item>
                                                <para>Objects expose stock events if value is &quot;yes&quot;. See <link raw="QAxFactory::hasStockEvents()" href="qaxfactory.html#hasStockEvents" type="function">QAxFactory::hasStockEvents()</link></para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>ToSuperClass</para>
                                            </item>
                                            <item>
                                                <para>Objects expose functionality of all super-classes up to and including the class name in value. See <link raw="QAxFactory::exposeToSuperClass()" href="qaxfactory.html#exposeToSuperClass" type="function">QAxFactory::exposeToSuperClass()</link></para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>Insertable</para>
                                            </item>
                                            <item>
                                                <para>If the value is &quot;yes&quot; the class is registered to be &quot;Insertable&quot; and will be listed in OLE 2 containers (ie. Microsoft Office). This attribute is not be set by default.</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>Aggregatable</para>
                                            </item>
                                            <item>
                                                <para>If the value is &quot;no&quot; the class does not support aggregation. By default aggregation is supported.</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>Creatable</para>
                                            </item>
                                            <item>
                                                <para>If the value is &quot;no&quot; the class cannot be created by the client, and is only available through the API of another class (ie. the class is a sub-type).</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>RegisterObject</para>
                                            </item>
                                            <item>
                                                <para>If the value is &quot;yes&quot; objects of this class are registered with OLE and accessible from the running object table (ie. clients can connect to an already running instance of this class). This attribute is only supported in out-of-process servers.</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>MIME</para>
                                            </item>
                                            <item>
                                                <para>The object can handle data and files of the format specified in the value. The value has the format mime:extension:description. Multiple formats are separated by a semicolon.</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>CoClassAlias</para>
                                            </item>
                                            <item>
                                                <para>The classname used in the generated IDL and in the registry. This is esp. useful for C++ classes that live in a namespace - by default, <link raw="ActiveQt" href="activeqt-index.html" type="page" page="Active Qt">ActiveQt</link> just removes the &quot;::&quot; to make the IDL compile.</para>
                                            </item>
                                        </row>
                                        <row>
                                            <item>
                                                <para>Implemented Categories</para>
                                            </item>
                                            <item>
                                                <para>List of comma-separated Category ID (CATID) UUIDs. Generic mechanism for specifying additional container capabilities, in addition to &quot;control&quot;, &quot;insertable&quot; etc. Typical CATIDs include <teletype type="highlighted">CATID_InternetAware</teletype> (&quot;{0DE86A58-2BAA-11CF-A229-00AA003D7352}&quot;), <teletype type="highlighted">CATID_SafeForScripting</teletype> (&quot;{7DD95801-9882-11CF-9FA9-00AA006C42C4}&quot;) as well as user-defined CATID values.</para>
                                            </item>
                                        </row>
                                    </table>
                                    <para>Note that both keys and values are case sensitive.</para>
                                    <para>The following declares version 2.0 of a class that exposes only its own API, and is available in the &quot;Insert Objects&quot; dialog of Microsoft Office applications.</para>
                                    <snippet location="doc_src_qaxserver.cpp" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.cpp" identifier="15"/>
                                </section>
                                <section id="developing-licensed-components">
                                    <heading level="2">Developing Licensed Components</heading>
                                    <para>If you develop components you might want to control who is able to instantiate those components. Since the server binary can be shipped to and registered on any client machine it is possible for anybody to use those components in his own software.</para>
                                    <para>Licensing components can be done using a variety of techniques, e.g. the code creating the control can provide a license key, or the machine on which the control is supposed to run needs to be licensed.</para>
                                    <para>To mark a Qt class as licensed specify a &quot;LicenseKey&quot; using the <link raw="Q_CLASSINFO()" href="qobject.html#Q_CLASSINFO" type="function">Q_CLASSINFO()</link> macro.</para>
                                    <snippet location="doc_src_qaxserver.cpp" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.cpp" identifier="16"/>
                                    <para>The key is required to be able to create an instance of <teletype type="highlighted">MyLicensedControl</teletype> on a machine that is not licensed itself. The licensed developer can now redistributes the server binary with his application, which creates the control using the value of &quot;LicenseKey&quot;, while users of the application cannot create the control without the license key.</para>
                                    <para>If a single license key for the control is not sufficient (ie. you want differnet developers to receive different license keys) you can specify an empty key to indicate that the control requires a license, and reimplement <link raw="QAxFactory::validateLicenseKey()" href="qaxfactory.html#validateLicenseKey" type="function">QAxFactory::validateLicenseKey()</link> to verify that a license exists on the system (ie. through a license file).</para>
                                </section>
                                <section id="more-interfaces">
                                    <heading level="2">More Interfaces</heading>
                                    <para>ActiveX controls provided by <link raw="ActiveQt" href="activeqt-index.html" type="page" page="Active Qt">ActiveQt</link> servers support a minimal set of COM interfaces to implement the OLE specifications. When the ActiveX class inherits from the <link raw="QAxBindable" href="qaxbindable.html" type="class">QAxBindable</link> class it can also implement additional COM interfaces.</para>
                                    <para>Create a new subclass of <link raw="QAxAggregated" href="qaxaggregated.html" type="class">QAxAggregated</link> and use multiple inheritance to subclass additional COM interface classes.</para>
                                    <snippet location="doc_src_qaxserver.cpp" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.cpp" identifier="17"/>
                                    <para>Reimplement the <link raw="QAxAggregated::queryInterface()" href="qaxaggregated.html#queryInterface" type="function">QAxAggregated::queryInterface()</link> function to support the additional COM interfaces.</para>
                                    <snippet location="doc_src_qaxserver.cpp" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.cpp" identifier="18"/>
                                    <para>Since <teletype type="highlighted">ISomeCOMInterface</teletype> is a subclass of <teletype type="highlighted">IUnknown</teletype> you will have to implement the <teletype type="highlighted">QueryInterface()</teletype>, <teletype type="highlighted">AddRef()</teletype>, and <teletype type="highlighted">Release()</teletype> functions. Use the QAXAGG_IUNKNOWN macro in your class definition to do that. If you implement the <teletype type="highlighted">IUnknown</teletype> functions manually, delegate the calls to the interface pointer returned by the <link raw="QAxAggregated::controllingUnknown()" href="qaxaggregated.html#controllingUnknown" type="function">QAxAggregated::controllingUnknown()</link> function, e.g.</para>
                                    <snippet location="doc_src_qaxserver.cpp" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.cpp" identifier="19"/>
                                    <para>Do not support the <teletype type="highlighted">IUnknown</teletype> interface itself in your <link raw="QAxAggregated::queryInterface()" href="qaxaggregated.html#queryInterface" type="function">queryInterface()</link> implementation.</para>
                                    <para>Implement the methods of the COM interfaces, and use <link raw="QAxAggregated::object()" href="qaxaggregated.html#object" type="function">QAxAggregated::object()</link> if you need to make calls to the <link raw="QObject" href="qobject.html" type="class">QObject</link> subclass implementing the control.</para>
                                    <para>In your <link raw="QAxBindable" href="qaxbindable.html" type="class">QAxBindable</link> subclass, implement <link raw="QAxBindable::createAggregate()" href="qaxbindable.html#createAggregate" type="function">QAxBindable::createAggregate()</link> to return a new object of the <link raw="QAxAggregated" href="qaxaggregated.html" type="class">QAxAggregated</link> subclass.</para>
                                    <snippet location="doc_src_qaxserver.cpp" path="C:/Qt/5.11.1/Src/qtactiveqt/src/activeqt/doc/snippets/doc_src_qaxserver.cpp" identifier="20"/>
                                </section>
                                <see-also>
                                    <link raw="ActiveQt Framework" href="activeqt-index.html" type="page" page="Active Qt">ActiveQt Framework</link>
                                </see-also>
                            </section>
                        </table>
                    </section>
                </section>
            </description>
        </page>
    </document>
</WebXML>
