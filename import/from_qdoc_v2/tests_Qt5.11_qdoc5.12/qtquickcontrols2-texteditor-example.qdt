<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.2">
  <db:info>
    <db:title>Qt Quick Controls 2 - Text Editor</db:title>
    <db:abstract>
      <db:para>A QML app using Qt Quick Controls 2 and a C++ class to provide a fully-functional rich-text editor application</db:para>
    </db:abstract>
  </db:info>
  <db:para>A QML app using Qt Quick Controls 2 and a C++ class to provide a fully-functional rich-text editor application.</db:para>
  <db:para>The <db:emphasis>Text Editor Example</db:emphasis> presents a sample HTML file using the <db:link xlink:href="qml-qtquick-controls2-textarea.html" xrefstyle="" annotations="TextArea">TextArea</db:link> control, preserving the HTML formatting. The application comes with two user interfaces; one for traditional desktop platforms with a mouse pointer, and another simpler, touch-oriented version.</db:para>
  <db:section xml:id="desktop-user-interface">
    <db:title>Desktop User Interface</db:title>
    <db:mediaobject>
      <db:imageobject>
        <db:imagedata fileref="images/qtquickcontrols2-texteditor-desktop.jpg"/>
      </db:imageobject>
    </db:mediaobject>
    <db:para>The desktop version is a complete text editor with capabilities for formatting text, and opening and saving HTML and plain text files. It demonstrates the native-looking dialogs and menus using the <db:link xlink:href="qtlabsplatform-index.html" xrefstyle="page" annotations="Qt Labs Platform">Qt Labs Platform</db:link> module. These types are mostly suitable for desktop platforms with support for multiple top-level windows, a mouse pointer, and moderate screen size.</db:para>
    <db:para>The desktop UI uses <db:link xlink:href="qml-qtquick-dialogs-filedialog.html" xrefstyle="" annotations="FileDialog">FileDialog</db:link> for opening and saving files:</db:para>
    <db:programlisting language="other">    FileDialog {
      id: openDialog
      fileMode: FileDialog.OpenFile
      selectedNameFilter.index: 1
      nameFilters: ["Text files (*.txt)", "HTML files (*.html *.htm)"]
      folder: StandardPaths.writableLocation(StandardPaths.DocumentsLocation)
      onAccepted: document.load(file)
      }
      
      FileDialog {
      id: saveDialog
      fileMode: FileDialog.SaveFile
      defaultSuffix: document.fileType
      nameFilters: openDialog.nameFilters
      selectedNameFilter.index: document.fileType === "txt" ? 0 : 1
      folder: StandardPaths.writableLocation(StandardPaths.DocumentsLocation)
      onAccepted: document.saveAs(file)    }</db:programlisting>
    <db:programlisting language="other">    }</db:programlisting>
    <db:para>It uses <db:link xlink:href="qml-qtquick-dialogs-fontdialog.html" xrefstyle="" annotations="FontDialog">FontDialog</db:link> and <db:link xlink:href="qml-qtquick-dialogs-colordialog.html" xrefstyle="" annotations="ColorDialog">ColorDialog</db:link> for choosing fonts and colors:</db:para>
    <db:programlisting language="other">    FontDialog {
      id: fontDialog
      onAccepted: {
      document.fontFamily = font.family;
      document.fontSize = font.pointSize;
      }
      }
      
      ColorDialog {
      id: colorDialog        id: colorDialog
      currentColor: "black"
      }</db:programlisting>
    <db:programlisting language="other">        id: colorDialog
      currentColor: "black"
      }</db:programlisting>
    <db:para>It also uses <db:link xlink:href="qml-qt-labs-platform-menu.html" xrefstyle="" annotations="Menu">Menu</db:link> and <db:link xlink:href="qml-qt-labs-platform-menuitem.html" xrefstyle="" annotations="MenuItem">MenuItem</db:link> that provide a context menu to format text within:</db:para>
    <db:programlisting language="other">    Menu {
      id: contextMenu
      
      MenuItem {
      text: qsTr("Copy")
      enabled: textArea.selectedText
      onTriggered: textArea.copy()
      }
      MenuItem {
      text: qsTr("Cut")
      enabled: textArea.selectedText
      onTriggered: textArea.cut()
      }
      MenuItem {
      text: qsTr("Paste")
      enabled: textArea.canPaste
      onTriggered: textArea.paste()
      }
      
      MenuSeparator {}
      
      MenuItem {
      text: qsTr("Font...")
      onTriggered: fontDialog.open()
      }
      
      MenuItem {
      text: qsTr("Color...")
      onTriggered: colorDialog.open()
      }
      }</db:programlisting>
    <db:note>
      <db:para> There is also a standard menubar with more options than the context menu.</db:para>
    </db:note>
  </db:section>
  <db:section xml:id="touch-user-interface">
    <db:title>Touch User Interface</db:title>
    <db:mediaobject>
      <db:imageobject>
        <db:imagedata fileref="images/qtquickcontrols2-texteditor-touch.jpg"/>
      </db:imageobject>
    </db:mediaobject>
    <db:para>The touch user interface is a simplified version of the text editor. It is suitable for touch devices with limited screen size. The example uses <db:link xlink:href="qtquickcontrols2-fileselectors.html" xrefstyle="page" annotations="Using File Selectors with Qt Quick Controls 2">file selectors</db:link> to load the appropriate user interface automatically.</db:para>
    <db:para>Unlike the desktop version, which uses top-level dialogs, the touch version uses the QML <db:link xlink:href="qml-qtquick-controls2-dialog.html" xrefstyle="" annotations="Dialog">Dialog</db:link> type, which is not a top-level window. This type of dialog is fully supported on mobile and embedded platforms that do not support multiple top-level windows.</db:para>
    <db:programlisting language="other">    Dialog {
      id: aboutDialog
      standardButtons: Dialog.Ok
      modal: true
      x: parent.width / 2 - width / 2
      y: parent.height / 2 - height / 2
      
      contentItem: Label {
      text: qsTr("Qt Quick Controls 2 - Text Editor Example")
      }
      }</db:programlisting>
  </db:section>
  <db:section xml:id="c-backend">
    <db:title>C++ Backend</db:title>
    <db:para>Both user interfaces use the same C++ backend, which supports opening, formatting, and editing a document. The C++ class, <db:code>DocumentHandler</db:code>, extends <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> and is registered as a QML type under the namespace <db:code>io.qt.examples.texteditor 1.0</db:code>.</db:para>
    <db:para>The following snippets show how the type is registered under a namespace and later imported and instantiated by <db:emphasis>main.qml</db:emphasis>. For more information about registering C++ classes as QML types, see <db:link xlink:href="qtqml-cppintegration-definetypes.html" xrefstyle="page" annotations="Defining QML Types from C++">Defining QML Types from C++</db:link>.</db:para>
    <db:para>QML type registration:</db:para>
    <db:programlisting language="other">#include &lt;QtQml/qqml.h&gt;
      ...
      qmlRegisterType&lt;DocumentHandler&gt;("io.qt.examples.texteditor", 1, 0, "DocumentHandler");
      ...</db:programlisting>
    <db:para>QML namespace import:</db:para>
    <db:programlisting language="other">import io.qt.examples.texteditor 1.0</db:programlisting>
    <db:para>QML instance:</db:para>
    <db:programlisting language="other">    DocumentHandler {
      id: document
      document: textArea.textDocument
      cursorPosition: textArea.cursorPosition
      selectionStart: textArea.selectionStart
      selectionEnd: textArea.selectionEnd
      textColor: colorDialog.color
      Component.onCompleted: document.load("qrc:/texteditor.html")
      onLoaded: {
      textArea.text = text
      }
      onError: {
      errorDialog.text = message
      errorDialog.visible = true
      }
      }</db:programlisting>
  </db:section>
  <db:section xml:id="running-the-example">
    <db:title>Running the Example</db:title>
    <db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html" xrefstyle="page" annotations="Qt Creator Manual">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html" xrefstyle="page" annotations="Qt Creator: Building and Running an Example">Building and Running an Example</db:link>.</db:para>
  </db:section>
</db:article>
