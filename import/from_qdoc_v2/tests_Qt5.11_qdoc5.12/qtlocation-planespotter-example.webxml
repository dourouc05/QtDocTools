<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <page name="planespotter" href="qtlocation-planespotter-example.html" status="active" location="planespotter.qdoc" filepath="C:/Qt/5.11.1/Src/qtlocation/examples/location/planespotter/doc/src/planespotter.qdoc" lineno="28" subtype="example" title="Plane Spotter (QML)" fulltitle="Plane Spotter (QML)" subtitle="" module="QtLocation" groups="qtlocation-examples" brief="Plane Spotter example demonstrates the tight integration of location and positioning data types into QML">
            <contents name="running-the-example" title="Running the Example" level="1"/>
            <contents name="overview" title="Overview" level="1"/>
            <contents name="steering-the-planes" title="Steering the Planes" level="1"/>
            <contents name="the-c-pilot" title="The C++ Pilot" level="2"/>
            <contents name="the-qml-pilot" title="The QML Pilot" level="2"/>
            <description path="C:/Qt/5.11.1/Src/qtlocation/examples/location/planespotter/doc/src/planespotter.qdoc" line="28" column="4">
                <brief>The <teletype type="highlighted">Plane Spotter</teletype> example demonstrates the tight integration of location and positioning data types into QML</brief>
                <image href="images/planespotter.png"/>
                <para>The <teletype type="highlighted">Plane Spotter</teletype> example demonstrates how to integrate location and positioning related C++ data types into QML and vice versa. This is useful when it is desirable to run CPU intensive position calculations in native environments but the results are supposed to be displayed using QML.</para>
                <para>The example shows a map of Europe and airplanes on two routes across Europe. The first airplane commutes between Oslo and Berlin and the second airplane commutes between London and Berlin. The position tracking of each airplane is implemented in C++. The Oslo-Berlin plane is piloted in QML and the London-Berlin plane is commanded by a C++ pilot.</para>
                <section id="running-the-example">
                    <heading level="1">Running the Example</heading>
                    <para>To run the example from <link raw="Qt Creator Manual" href="http://doc.qt.io/qtcreator/index.html" type="page" page="Qt Creator Manual">Qt Creator</link>, open the <bold>Welcome</bold> mode and select the example from <bold>Examples</bold>. For more information, visit <link raw="Qt Creator: Building and Running an Example" href="http://doc.qt.io/qtcreator/creator-build-example-application.html" type="page" page="Qt Creator: Building and Running an Example">Building and Running an Example</link>.</para>
                </section>
                <section id="overview">
                    <heading level="1">Overview</heading>
                    <para>This example makes use of the <link raw="Q_GADGET" href="qobject.html#Q_GADGET" type="function">Q_GADGET</link> feature as part of its position controller implementation. It permits <link raw="Cpp_value_integration_positioning" href="positioning-cpp-qml.html#cpp-value-integration-positioning" type="page" page="Interfaces between C++ and QML Code in Qt Positioning">direct integration</link> of non-<link raw="QObject" href="qobject.html" type="class">QObject</link> based C++ value types into QML.</para>
                    <para>The main purpose of the <teletype type="highlighted">PlaneController</teletype> class is to track the current coordinates of the plane at a given time. It exposes the position via its position property.</para>
                    <snippet location="planespotter/main.cpp" path="C:/Qt/5.11.1/Src/qtlocation/examples/location/planespotter/main.cpp" identifier="PlaneController1"/>
                    <snippet location="planespotter/main.cpp" path="C:/Qt/5.11.1/Src/qtlocation/examples/location/planespotter/main.cpp" identifier="PlaneController2"/>
                    <para>The example's <teletype type="highlighted">main()</teletype> function is responsible for the binding of the <teletype type="highlighted">PlaneController</teletype> class instances into the QML context:</para>
                    <snippet location="planespotter/main.cpp" path="C:/Qt/5.11.1/Src/qtlocation/examples/location/planespotter/main.cpp" identifier="PlaneControllerMain"/>
                    <para>Similar to <link raw="QObject" href="qobject.html" type="class">QObject</link> derived classes, QGeoCoordinate can be integrated without an additional QML wrapper.</para>
                </section>
                <section id="steering-the-planes">
                    <heading level="1">Steering the Planes</heading>
                    <para>As mentioned above, the primary purpose of <teletype type="highlighted">PlaneController</teletype> class is to track the current positions of the two planes (Oslo-Berlin and London-Berlin) and advertise them as a property to the QML layer. Its secondary purpose is to set and progress a plane along a given flight path. In a sense it can act as a pilot. This is very much like <link raw="CoordinateAnimation" href="qml-qtpositioning-coordinateanimation.html" type="">CoordinateAnimation</link> which can animate the transition from one geo coordinate to another. This example demonstrates how the <teletype type="highlighted">PlaneController</teletype>'s position property is modified by C++ code using the PlaneController's own piloting abilities and by QML code using <link raw="CoordinateAnimation" href="qml-qtpositioning-coordinateanimation.html" type="">CoordinateAnimation</link> as pilot. The Oslo-Berlin plane is animated using QML code and the London-Berlin plane is animated using C++ code.</para>
                    <para>No matter which pilot is used, the results to the pilot's actions are visible in C++ and QML and thus the example demonstrates unhindered and direct exchange of position data through the C++/QML boundary.</para>
                    <para>The visual representation of each <teletype type="highlighted">Plane</teletype> is done using the <link raw="MapQuickItem" href="qml-qtlocation-mapquickitem.html" type="">MapQuickItem</link> type which permits the embedding of arbitrary <link raw="QtQuick" href="qtquick-module.html" type="module">QtQuick</link> items into a map:</para>
                    <snippet location="planespotter/Plane.qml" path="C:/Qt/5.11.1/Src/qtlocation/examples/location/planespotter/Plane.qml" identifier="PlaneMapQuick1"/>
                    <snippet location="planespotter/Plane.qml" path="C:/Qt/5.11.1/Src/qtlocation/examples/location/planespotter/Plane.qml" identifier="PlaneMapQuick2"/>
                </section>
                <section id="the-c-pilot">
                    <heading level="2">The C++ Pilot</heading>
                    <para>The C++ plane is steered by C++. The <teletype type="highlighted">from</teletype> and <teletype type="highlighted">to</teletype> property of the controller class set the origin and destination which the pilot uses to calculate the bearing for the plane:</para>
                    <snippet location="planespotter/main.cpp" path="C:/Qt/5.11.1/Src/qtlocation/examples/location/planespotter/main.cpp" identifier="C++Pilot1"/>
                    <para>The pilot employs a <link raw="QBasicTimer" href="qbasictimer.html" type="class">QBasicTimer</link> and <link raw="QTimerEvent" href="qtimerevent.html" type="class">QTimerEvents</link> to constantly update the position. During each timer iteration <teletype type="highlighted">PlaneController::updatePosition()</teletype> is called and a new position calculated.</para>
                    <snippet location="planespotter/main.cpp" path="C:/Qt/5.11.1/Src/qtlocation/examples/location/planespotter/main.cpp" identifier="C++Pilot3"/>
                    <para>Once the new position is calculated, <teletype type="highlighted">setPosition()</teletype> is called and the subsequent change notification of the property pushes the new position to the QML layer.</para>
                    <para>The C++ plane is started by clicking on the plane:</para>
                    <snippet location="planespotter/planespotter.qml" path="C:/Qt/5.11.1/Src/qtlocation/examples/location/planespotter/planespotter.qml" identifier="CppPlane1"/>
                    <snippet location="planespotter/planespotter.qml" path="C:/Qt/5.11.1/Src/qtlocation/examples/location/planespotter/planespotter.qml" identifier="CppPlane2"/>
                    <para>
                        <link raw="azimuthTo" href="qml-coordinate.html#azimuthto" type="">azimuthTo</link>() calculates the bearing in degrees from one coordinate to another. Note that the above code utilizes a QML animation to tie the rotation and the position change into a single animation flow:</para>
                    <snippet location="planespotter/planespotter.qml" path="C:/Qt/5.11.1/Src/qtlocation/examples/location/planespotter/planespotter.qml" identifier="CppPlane3"/>
                    <para>First, <link raw="NumberAnimation" href="qml-qtquick-numberanimation.html" type="">NumberAnimation</link> rotates the plane into the correct direction and once that is done the <teletype type="highlighted">startFlight()</teletype> function takes care of starting the plane's position change.</para>
                    <snippet location="planespotter/main.cpp" path="C:/Qt/5.11.1/Src/qtlocation/examples/location/planespotter/main.cpp" identifier="C++Pilot2"/>
                </section>
                <section id="the-qml-pilot">
                    <heading level="2">The QML Pilot</heading>
                    <para>The <link raw="CoordinateAnimation" href="qml-qtpositioning-coordinateanimation.html" type="">CoordinateAnimation</link> type is used to control the flight from Oslo to Berlin and vice versa. It replaces the above <link raw="ScriptAction" href="qml-qtquick-scriptaction.html" type="">ScriptAction</link>.</para>
                    <snippet location="planespotter/planespotter.qml" path="C:/Qt/5.11.1/Src/qtlocation/examples/location/planespotter/planespotter.qml" identifier="QmlPlane1"/>
                    <para>The <link raw="MouseArea" href="qml-qtquick-mousearea.html" type="">MouseArea</link> of the QML plane implements the logic for the course setting and starts the animation when required.</para>
                    <snippet location="planespotter/planespotter.qml" path="C:/Qt/5.11.1/Src/qtlocation/examples/location/planespotter/planespotter.qml" identifier="QmlPlane2"/>
                </section>
            </description>
            <page name="planespotter/Plane.qml" href="qtlocation-planespotter-plane-qml.html" status="active" subtype="file" title="" fulltitle="Plane.qml Example File" subtitle="planespotter/Plane.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="planespotter/planespotter.qml" href="qtlocation-planespotter-planespotter-qml.html" status="active" subtype="file" title="" fulltitle="planespotter.qml Example File" subtitle="planespotter/planespotter.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="planespotter/main.cpp" href="qtlocation-planespotter-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="planespotter/main.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="planespotter/planespotter.pro" href="qtlocation-planespotter-planespotter-pro.html" status="active" subtype="file" title="" fulltitle="planespotter.pro Example File" subtitle="planespotter/planespotter.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="planespotter/qml.qrc" href="qtlocation-planespotter-qml-qrc.html" status="active" subtype="file" title="" fulltitle="qml.qrc Example File" subtitle="planespotter/qml.qrc">
                <description path="" line="0" column="0"/>
            </page>
            <page name="planespotter/airplane.png" href="qtlocation-planespotter-airplane-png.html" status="active" title="" fulltitle="airplane.png Image File" subtitle="planespotter/airplane.png">
                <description path="" line="0" column="0"/>
            </page>
        </page>
    </document>
</WebXML>
