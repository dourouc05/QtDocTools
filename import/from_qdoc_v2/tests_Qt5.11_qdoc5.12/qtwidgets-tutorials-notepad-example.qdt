<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            version="5.2">
   <db:info>
      <db:title>Getting Started Programming with Qt Widgets</db:title>
      <db:abstract>
         <db:para>A tutorial for Qt Widgets based on a notepad application</db:para>
      </db:abstract>
   </db:info>
   <db:para>A tutorial for Qt Widgets based on a notepad application</db:para>
   <db:para>In this topic, we teach basic Qt knowledge by implementing a simple Notepad application using C++ and the <db:link xlink:href="qtwidgets-index.html" xrefstyle="page" annotations="Qt Widgets">Qt Widgets</db:link> module. The application is a small text editor which allows you to create a text file, save it, print it, or reopen and edit it again. You can also set the font to be used.</db:para>
   <db:mediaobject>
      <db:imageobject>
         <db:imagedata fileref="images/notepad1.png"/>
      </db:imageobject>
   </db:mediaobject>
   <db:para>You can find the final Notepad source files in the qtdoc repository in the tutorials/notepad directory. You can either fetch the Qt 5 sources from Qt Project or install them as part of Qt 5. The application is also available in the example list of Qt Creator's Welcome mode.</db:para>
   <db:section xml:id="creating-the-notepad-project">
      <db:title>Creating the Notepad Project</db:title>
      <db:para>Setting up a new project in Qt Creator is aided by a wizard that guides you step-by-step through the project creation process. The wizard prompts you to enter the settings needed for that particular type of project and creates the project for you.</db:para>
      <db:mediaobject>
         <db:imageobject>
            <db:imagedata fileref="images/notepad2.png"/>
         </db:imageobject>
      </db:mediaobject>
      <db:para>To create the Notepad project, select <db:emphasis role="bold">File</db:emphasis> &gt; <db:emphasis role="bold">New File or Project</db:emphasis> &gt; <db:emphasis role="bold">Applications</db:emphasis> &gt; <db:emphasis role="bold">Qt Widgets Application</db:emphasis> &gt; <db:emphasis role="bold">Choose</db:emphasis>, and follow the instructions of the wizard. In the <db:emphasis role="bold">Class Information</db:emphasis> dialog, type <db:emphasis role="bold">Notepad</db:emphasis> as the class name and select <db:emphasis role="bold">QMainWindow</db:emphasis> as the base class.</db:para>
      <db:mediaobject>
         <db:imageobject>
            <db:imagedata fileref="images/notepad3.png"/>
         </db:imageobject>
      </db:mediaobject>
      <db:para>The <db:emphasis role="bold">Qt Widgets Application</db:emphasis> wizard creates a project that contains a main source file and a set of files that specify a user interface (Notepad widget):</db:para>
      <db:itemizedlist>
         <db:listitem>
            <db:para>notepad.pro - the project file.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>main.cpp - the main source file for the application.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>notepad.cpp - the source file of the notepad class of the Notepad widget.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>notepad.h - the header file of the notepad class for the Notepad widget.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>notepad.ui - the UI form for the Notepad widget.</db:para>
         </db:listitem>
      </db:itemizedlist>
      <db:para>The .cpp, .h, and .ui files come with the necessary boiler plate code for you to be able to build and run the project. The .pro file is complete. We will take a closer look at the file contents in the following sections.</db:para>
      <db:para>
         <db:emphasis role="bold">Learn More</db:emphasis>
      </db:para>
      <db:informaltable>
         <db:thead>
            <db:tr>
               <db:th>
                  <db:para>About</db:para>
               </db:th>
               <db:th>
                  <db:para>Here</db:para>
               </db:th>
            </db:tr>
         </db:thead>
         <db:tr>
            <db:td>
               <db:para>Using Qt Creator</db:para>
            </db:td>
            <db:td>
               <db:para>
                  <db:link xlink:href="http://doc.qt.io/qtcreator/index.html" xrefstyle="page" annotations="Qt Creator Manual">Qt Creator</db:link>
               </db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Creating other kind of applications with Qt Creator</db:para>
            </db:td>
            <db:td>
               <db:para>
                  <db:link xlink:href="http://doc.qt.io/qtcreator/creator-tutorials.html" xrefstyle="page" annotations="Qt Creator: Tutorials">Qt Creator Tutorials</db:link>
               </db:para>
            </db:td>
         </db:tr>
      </db:informaltable>
   </db:section>
   <db:section xml:id="main-source-file">
      <db:title>Main Source File</db:title>
      <db:para>The wizard generates the following code in the main.cpp file:</db:para>
      <db:programlisting language="other">#include "notepad.h"
#include &lt;QApplication&gt;

int main(int argc, char *argv[])
{
    QApplication EditorApp(argc, argv);
    Notepad Editor;
    Editor.show();

    return EditorApp.exec();    return EditorApp.exec();
}</db:programlisting>
      <db:programlisting language="other">    return EditorApp.exec();
}</db:programlisting>
      <db:para>We will go through the code line by line. The following lines include the header files for the Notepad widget and <db:code><db:link xlink:href="qapplication.html" xrefstyle="class" annotations="QApplication">QApplication</db:link></db:code>. All Qt classes have a header file named after them.</db:para>
      <db:programlisting language="other">#include "notepad.h"
#include &lt;QApplication&gt;</db:programlisting>
      <db:para>The following line defines the main function that is the entry point for all C and C++ based applications:</db:para>
      <db:programlisting language="other">int main(int argc, char *argv[])</db:programlisting>
      <db:para>The following line creates a <db:code><db:link xlink:href="qapplication.html" xrefstyle="class" annotations="QApplication">QApplication</db:link></db:code> object. This object manages application-wide resources and is necessary to run any Qt program that uses Qt Widgets. It constructs an application object with <db:code>argc</db:code> command line arguments run in <db:code>argv</db:code>. (For GUI applications that do not use Qt Widgets, you can use <db:code><db:link xlink:href="qguiapplication.html" xrefstyle="class" annotations="QGuiApplication">QGuiApplication</db:link></db:code> instead.)</db:para>
      <db:programlisting language="other">    QApplication EditorApp(argc, argv);</db:programlisting>
      <db:para>The following line creates the Notepad object. This is the object for which the wizard created the class and the UI file. The user interface contains visual elements that are called <db:code>widgets</db:code> in Qt. Examples of widgets are text edits, scroll bars, labels, and radio buttons. A widget can also be a container for other widgets; a dialog or a main application window, for example.</db:para>
      <db:programlisting language="other">    Notepad Editor;</db:programlisting>
      <db:para>The following line shows the Notepad widget on the screen in its own window. Widgets can also function as containers. An example of this is <db:code><db:link xlink:href="qmainwindow.html" xrefstyle="class" annotations="QMainWindow">QMainWindow</db:link></db:code> which often contains several types of widgets. Widgets are not visible by default; the function <db:code><db:link xlink:href="qwidget.html#show" xrefstyle="function" annotations="QWidget::show()">show()</db:link></db:code> makes the widget visible.</db:para>
      <db:programlisting language="other">    Editor.show();</db:programlisting>
      <db:para>The following line makes the <db:code><db:link xlink:href="qapplication.html" xrefstyle="class" annotations="QApplication">QApplication</db:link></db:code> enter its event loop. When a Qt application is running, events are generated and sent to the widgets of the application. Examples of events are mouse presses and key strokes.</db:para>
      <db:programlisting language="other">    return EditorApp.exec();</db:programlisting>
      <db:para>
         <db:emphasis role="bold">Learn More</db:emphasis>
      </db:para>
      <db:informaltable>
         <db:thead>
            <db:tr>
               <db:th>
                  <db:para>About</db:para>
               </db:th>
               <db:th>
                  <db:para>Here</db:para>
               </db:th>
            </db:tr>
         </db:thead>
         <db:tr>
            <db:td>
               <db:para>Widgets and Window Geometry</db:para>
            </db:td>
            <db:td>
               <db:para>
                  <db:link xlink:href="application-windows.html" xrefstyle="page" annotations="Window and Dialog Widgets">Window and Dialog Widgets</db:link>
               </db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Events and event handling</db:para>
            </db:td>
            <db:td>
               <db:para>
                  <db:link xlink:href="eventsandfilters.html" xrefstyle="page" annotations="The Event System">The Event System</db:link>
               </db:para>
            </db:td>
         </db:tr>
      </db:informaltable>
   </db:section>
   <db:section xml:id="designing-a-ui">
      <db:title>Designing a UI</db:title>
      <db:para>The wizard generates a user interface definition in XML format: notepad.ui. When you open the notepad.ui file in Qt Creator, it automatically opens in the integrated Qt Designer.</db:para>
      <db:para>When you build the application, Qt Creator launches the Qt <db:link xlink:href="uic.html" xrefstyle="page" annotations="User Interface Compiler (uic)">User Interface Compiler (uic)</db:link> that reads the .ui file and creates a corresponding C++ header file, ui_notepad.h.</db:para>
   </db:section>
   <db:section xml:id="using-qt-designer">
      <db:title>Using Qt Designer</db:title>
      <db:para>The wizard creates an application that uses a <db:code><db:link xlink:href="qmainwindow.html" xrefstyle="class" annotations="QMainWindow">QMainWindow</db:link></db:code>. It has its own layout to which you can add a menu bar, dock widgets, toolbars, and a status bar. The center area can be occupied by any kind of widget. The wizard places the Notepad widget there.</db:para>
      <db:para>To add widgets in Qt Designer:</db:para>
      <db:orderedlist>
         <db:listitem>
            <db:para>In the Qt Creator <db:emphasis role="bold">Editor</db:emphasis> mode, double-click the notepad.ui file in the <db:emphasis role="bold">Projects</db:emphasis> view to launch the file in the integrated Qt Designer.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Drag and drop widgets Text Edit (<db:code><db:link xlink:href="qtextedit.html" xrefstyle="class" annotations="QTextEdit">QTextEdit</db:link></db:code>) to the form.</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Press <db:emphasis role="bold">Ctrl+A</db:emphasis> (or <db:emphasis role="bold">Cmd+A</db:emphasis>) to select the widgets and click <db:emphasis role="bold">Lay out Vertically</db:emphasis> (or press <db:emphasis role="bold">Ctrl+L</db:emphasis>) to apply a vertical layout (<db:code><db:link xlink:href="qvboxlayout.html" xrefstyle="class" annotations="QVBoxLayout">QVBoxLayout</db:link></db:code>).</db:para>
         </db:listitem>
         <db:listitem>
            <db:para>Press <db:emphasis role="bold">Ctrl+S</db:emphasis> (or <db:emphasis role="bold">Cmd+S</db:emphasis>) to save your changes.</db:para>
         </db:listitem>
      </db:orderedlist>
      <db:para>The UI now looks as follows in Qt Designer:</db:para>
      <db:mediaobject>
         <db:imageobject>
            <db:imagedata fileref="images/notepad4.png"/>
         </db:imageobject>
      </db:mediaobject>
      <db:para>You can view the generated XML file in the code editor:</db:para>
      <db:programlisting language="other">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ui version="4.0"&gt;
 &lt;class&gt;Notepad&lt;/class&gt;
 &lt;widget class="QMainWindow" name="Notepad"&gt;
  &lt;property name="geometry"&gt;
   &lt;rect&gt;
    &lt;x&gt;0&lt;/x&gt;
    &lt;y&gt;0&lt;/y&gt;
    &lt;width&gt;800&lt;/width&gt;
    &lt;height&gt;400&lt;/height&gt;
   &lt;/rect&gt;
  &lt;/property&gt;
  &lt;property name="windowTitle"&gt;
   &lt;string&gt;Notepad&lt;/string&gt;
  &lt;/property&gt;
  &lt;widget class="QWidget" name="centralWidget"&gt;
   &lt;layout class="QVBoxLayout" name="verticalLayout"&gt;
    &lt;item&gt;
     &lt;widget class="QTextEdit" name="textEdit"/&gt;
    &lt;/item&gt;
   &lt;/layout&gt;
  &lt;/widget&gt;
  &lt;widget class="QMenuBar" name="menuBar"&gt;
    ...</db:programlisting>
      <db:para>The following line contains the XML declaration, which specifies the XML version and character encoding used in the document:</db:para>
      <db:programlisting language="other">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</db:programlisting>
      <db:para>The rest of the file specifies an <db:code>ui</db:code> element that defines a Notepad widget:</db:para>
      <db:programlisting language="other">&lt;ui version="4.0"&gt;</db:programlisting>
      <db:para>The UI file is used together with the header and source file of the Notepad class. We will look at the rest of the UI file in the later sections.</db:para>
   </db:section>
   <db:section xml:id="notepad-header-file">
      <db:title>Notepad Header File</db:title>
      <db:para>The wizard generated a header file for the Notepad class that has the necessary #includes, a constructor, a destructor, and the Ui object. The file looks as follows:</db:para>
      <db:programlisting>
#include &lt;QMainWindow&gt;

QT_BEGIN_NAMESPACE
namespace Ui {
class Notepad;
}
QT_END_NAMESPACE

class Notepad : public QMainWindow
{
    Q_OBJECT

public:
    explicit Notepad(QWidget *parent = 0);
    ~Notepad();

private slots:
    void on_actionNew_triggered();

    void on_actionOpen_triggered();

    void on_actionSave_triggered();

    void on_actionSave_as_triggered();

    void on_actionPrint_triggered();

    void on_actionExit_triggered();

    void on_actionCopy_triggered();

    void on_actionCut_triggered();

    void on_actionPaste_triggered();

    void on_actionUndo_triggered();

    void on_actionRedo_triggered();

    void on_actionFont_triggered();

    void on_actionBold_triggered();

    void on_actionUnderline_triggered();

    void on_actionItalic_triggered();

    void on_actionAbout_triggered();

private:
    Ui::Notepad *ui;
    QString currentFile;
};
</db:programlisting>
      <db:para>The following line includes <db:code><db:link xlink:href="qmainwindow.html" xrefstyle="class" annotations="QMainWindow">QMainWindow</db:link></db:code> that provides a main application window:</db:para>
      <db:programlisting>
#include &lt;QMainWindow&gt;
</db:programlisting>
      <db:para>The following lines declare the Notepad class in the Ui namespace, which is the standard namespace for the UI classes generated from .ui files by the <db:code>uic</db:code> tool:</db:para>
      <db:programlisting>
QT_BEGIN_NAMESPACE
namespace Ui {
class Notepad;
}
QT_END_NAMESPACE
</db:programlisting>
      <db:para>The class declaration contains the <db:code>Q_OBJECT</db:code> macro. It must come first in the class definition, and declares our class as a <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code>. Naturally, it must also inherit from <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code>. A <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code> adds several abilities to a normal C++ class. Notably, the class name and slot names can be queried at runtime. It is also possible to query a slot's parameter types and invoke it.</db:para>
      <db:programlisting>
class Notepad : public QMainWindow
{
    Q_OBJECT
</db:programlisting>
      <db:para>The following lines declare a constructor that has a default argument called <db:code>parent</db:code>. The value 0 indicates that the widget has no parent (it is a top-level widget).</db:para>
      <db:programlisting>
public:
    explicit Notepad(QWidget *parent = 0);
</db:programlisting>
      <db:para>The following line declares a virtual destructor to free the resources that were acquired by the object during its life-cycle. According to the C++ naming convention, destructors have the same name as the class they are associated with, prefixed with a tilde (~). In <db:code><db:link xlink:href="qobject.html" xrefstyle="class" annotations="QObject">QObject</db:link></db:code>, destructors are virtual to ensure that the destructors of derived classes are invoked properly when an object is deleted through a pointer-to-base-class.</db:para>
      <db:programlisting>
    ~Notepad();
</db:programlisting>
      <db:para>The following lines declare a member variable which is a pointer to the Notepad UI class. A member variable is associated with a specific class, and accessible for all its methods.</db:para>
      <db:programlisting>
private:
    Ui::Notepad *ui;
    QString currentFile;
</db:programlisting>
   </db:section>
   <db:section xml:id="notepad-source-file">
      <db:title>Notepad Source File</db:title>
      <db:para>The source file that the wizard generated for the Notepad class looks as follows:</db:para>
      <db:programlisting language="other">#include "notepad.h"
#include "ui_notepad.h"

Notepad::Notepad(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::Notepad)
{
    ui-&gt;setupUi(this);
    this-&gt;setCentralWidget(ui-&gt;textEdit);
}

Notepad::~Notepad()
{
    delete ui;
}

void Notepad::on_actionNew_triggered()
{
    currentFile.clear();
    ui-&gt;textEdit-&gt;setText(QString());
}

void Notepad::on_actionOpen_triggered()
{
    QString fileName = QFileDialog::getOpenFileName(this, "Open the file");
    QFile file(fileName);
    currentFile = fileName;
    if (!file.open(QIODevice::ReadOnly | QFile::Text)) {
        QMessageBox::warning(this, "Warning", "Cannot open file: " + file.errorString());
        return;
    }
    setWindowTitle(fileName);
    QTextStream in(&amp;file);
    QString text = in.readAll();
    ui-&gt;textEdit-&gt;setText(text);
    file.close();
}

void Notepad::on_actionSave_triggered()
{
    QString fileName;
    // If we don't have a filename from before, get one.
    if (currentFile.isEmpty()) {
        fileName = QFileDialog::getSaveFileName(this, "Save");
        currentFile = fileName;
    } else {
        fileName = currentFile;
    }
    QFile file(fileName);
    if (!file.open(QIODevice::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, "Warning", "Cannot save file: " + file.errorString());
        return;
    }
    setWindowTitle(fileName);
    QTextStream out(&amp;file);
    QString text = ui-&gt;textEdit-&gt;toPlainText();
    out &lt;&lt; text;
    file.close();
}

void Notepad::on_actionSave_as_triggered()
{
    QString fileName = QFileDialog::getSaveFileName(this, "Save as");
    QFile file(fileName);

    if (!file.open(QFile::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, "Warning", "Cannot save file: " + file.errorString());
        return;
    }
    currentFile = fileName;
    setWindowTitle(fileName);
    QTextStream out(&amp;file);
    QString text = ui-&gt;textEdit-&gt;toPlainText();
    out &lt;&lt; text;
    file.close();
}

void Notepad::on_actionPrint_triggered()
{
#if QT_CONFIG(printer)
    QPrinter printDev;
#if QT_CONFIG(printdialog)
    QPrintDialog dialog(&amp;printDev, this);
    if (dialog.exec() == QDialog::Rejected)
        return;
#endif // QT_CONFIG(printdialog)
    ui-&gt;textEdit-&gt;print(&amp;printDev);
#endif // QT_CONFIG(printer)
}

void Notepad::on_actionExit_triggered()
{
    QCoreApplication::quit();
}

void Notepad::on_actionCopy_triggered()
{
    ui-&gt;textEdit-&gt;copy();
}

void Notepad::on_actionCut_triggered()
{
    ui-&gt;textEdit-&gt;cut();
}

void Notepad::on_actionPaste_triggered()
{
    ui-&gt;textEdit-&gt;paste();
}

void Notepad::on_actionUndo_triggered()
{
     ui-&gt;textEdit-&gt;undo();
}

void Notepad::on_actionRedo_triggered()
{
    ui-&gt;textEdit-&gt;redo();
}

void Notepad::on_actionFont_triggered()
{
    bool fontSelected;
    QFont font = QFontDialog::getFont(&amp;fontSelected, this);
    if (fontSelected)
        ui-&gt;textEdit-&gt;setFont(font);        ui-&gt;textEdit-&gt;setFont(font);
}</db:programlisting>
      <db:programlisting language="other">        ui-&gt;textEdit-&gt;setFont(font);
}</db:programlisting>
      <db:para>The following lines include the Notepad class header file that was generated by the wizard and the UI header file that was generated by the <db:code>uic</db:code> tool:</db:para>
      <db:programlisting language="other">#include "notepad.h"
#include "ui_notepad.h"</db:programlisting>
      <db:para>The following line defines the <db:code>Notepad</db:code> constructor:</db:para>
      <db:programlisting language="other">Notepad::Notepad(QWidget *parent) :</db:programlisting>
      <db:para>The following line calls the <db:code><db:link xlink:href="qmainwindow.html" xrefstyle="class" annotations="QMainWindow">QMainWindow</db:link></db:code> constructor, which is the base class for the Notepad class:</db:para>
      <db:programlisting language="other">    QMainWindow(parent),</db:programlisting>
      <db:para>The following line creates the UI class instance and assigns it to the <db:code>ui</db:code> member:</db:para>
      <db:programlisting language="other">    ui(new Ui::Notepad)</db:programlisting>
      <db:para>The following line sets up the UI:</db:para>
      <db:programlisting language="other">    ui-&gt;setupUi(this);</db:programlisting>
      <db:para>In the destructor, we delete the <db:code>ui</db:code>:</db:para>
      <db:programlisting language="other">Notepad::~Notepad()
{
    delete ui;
}</db:programlisting>
      <db:para>In order to have the text edit field occupy the whole screen, we add <db:code>setCentralWidget</db:code> to the main window.</db:para>
      <db:programlisting language="other">Notepad::Notepad(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::Notepad)
{
    ui-&gt;setupUi(this);
    this-&gt;setCentralWidget(ui-&gt;textEdit);
}</db:programlisting>
   </db:section>
   <db:section xml:id="project-file">
      <db:title>Project File</db:title>
      <db:para>The wizard generates the following project file, <db:code>notepad.pro</db:code>, for us:</db:para>
      <db:programlisting>TEMPLATE = app
TARGET = notepad

qtHaveModule(printsupport): QT += printsupport
requires(qtConfig(fontdialog))

SOURCES += \
    main.cpp\
    notepad.cpp

HEADERS += notepad.h

FORMS += notepad.ui

RESOURCES += \
    notepad.qrc

# install
target.path = $$[QT_INSTALL_EXAMPLES]/widgets/tutorials/notepad
INSTALLS += target

</db:programlisting>
      <db:para>The project file specifies the application name and the <db:code>qmake</db:code> template to use for generating the project, as well as the source, header, and UI files included in the project.</db:para>
      <db:para>You could also use <db:code>qmake</db:code>'s <db:code>-project</db:code> option to generate the .pro file. Although, in that case, you have to remember to add the line <db:code>QT += widgets</db:code> to the generated file in order to link against the Qt Widgets Module.</db:para>
      <db:para>
         <db:emphasis role="bold">Learn More</db:emphasis>
      </db:para>
      <db:informaltable>
         <db:thead>
            <db:tr>
               <db:th>
                  <db:para>About</db:para>
               </db:th>
               <db:th>
                  <db:para>Here</db:para>
               </db:th>
            </db:tr>
         </db:thead>
         <db:tr>
            <db:td>
               <db:para>Using Qt Designer</db:para>
            </db:td>
            <db:td>
               <db:para>
                  <db:link xlink:href="qtdesigner-manual.html" xrefstyle="page" annotations="Qt Designer Manual">Qt Designer Manual</db:link>
               </db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Layouts</db:para>
            </db:td>
            <db:td>
               <db:para>
                  <db:link xlink:href="layout.html" xrefstyle="page" annotations="Layout Management">Layout Management</db:link>, <db:link xlink:href="graphicsview.html#widgets-and-layouts" xrefstyle="page" annotations="Widgets and Layouts">Widgets and Layouts</db:link>, <db:link xlink:href="layout.html#layout-examples" xrefstyle="page" annotations="Layout Examples">Layout Examples</db:link>
               </db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>The widgets that come with Qt</db:para>
            </db:td>
            <db:td>
               <db:para>
                  <db:link xlink:href="gallery.html" xrefstyle="page" annotations="Qt Widget Gallery">Qt Widget Gallery</db:link>
               </db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Main windows and main window classes</db:para>
            </db:td>
            <db:td>
               <db:para>
                  <db:link xlink:href="mainwindow.html" xrefstyle="page" annotations="Application Main Window">Application Main Window</db:link>, <db:link xlink:href="examples-mainwindow.html" xrefstyle="" annotations="Main Window Examples">Main Window Examples</db:link>
               </db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>QObjects and the Qt Object model (This is essential to understand Qt)</db:para>
            </db:td>
            <db:td>
               <db:para>
                  <db:link xlink:href="object.html" xrefstyle="page" annotations="Object Model">Object Model</db:link>
               </db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>qmake and the Qt build system</db:para>
            </db:td>
            <db:td>
               <db:para>
                  <db:link xlink:href="qmake-manual.html" xrefstyle="page" annotations="qmake Manual">qmake Manual</db:link>
               </db:para>
            </db:td>
         </db:tr>
      </db:informaltable>
   </db:section>
   <db:section xml:id="adding-user-interaction">
      <db:title>Adding User Interaction</db:title>
      <db:para>To add functionality to the editor, we start by adding menu items and buttons on a toolbar.</db:para>
      <db:para>Click on "Type Here", and add the options New, Open, Save, Save as, Print and Exit. This creates 5 lines in the Action Editor below. To connect the actions to slots, right-click an action and select Go to slot &gt; triggered(), and complete the code for that given slot.</db:para>
      <db:para>If we also want to add the actions to a toolbar, we can assign an icon to each <db:code><db:link xlink:href="qaction.html" xrefstyle="class" annotations="QAction">QAction</db:link></db:code>, and then drag the <db:code><db:link xlink:href="qaction.html" xrefstyle="class" annotations="QAction">QAction</db:link></db:code> to the toolbar. You assign an icon by entering an icon name in the Icon property of the action concerned. When the <db:code><db:link xlink:href="qaction.html" xrefstyle="class" annotations="QAction">QAction</db:link></db:code> has been dragged to the toolbar, clicking the icon will launch the associated slot.</db:para>
      <db:para>Complete the method <db:code>on_actionNew_triggered()</db:code>:</db:para>
      <db:programlisting language="other">void Notepad::on_actionNew_triggered()
{
    currentFile.clear();
    ui-&gt;textEdit-&gt;setText(QString());
}</db:programlisting>
      <db:para>
         <db:code>current_file</db:code> is a global variable containing the file presently being edited. It is defined in the private part of notepad.h:</db:para>
      <db:programlisting language="other">private:
    Ui::Notepad *ui;
    QString currentFile;</db:programlisting>
      <db:para>
         <db:code>clear()</db:code> clears the text buffer.</db:para>
   </db:section>
   <db:section xml:id="opening-a-file">
      <db:title>Opening a file</db:title>
      <db:para>In <db:code>notepad.ui</db:code>, right click on <db:code>actionOpen</db:code> and select <db:code>Go to slot</db:code>
      </db:para>
      <db:para>Complete method <db:code>on_actionOpen_triggered()</db:code>.</db:para>
      <db:programlisting language="other">void Notepad::on_actionOpen_triggered()
{
    QString fileName = QFileDialog::getOpenFileName(this, "Open the file");
    QFile file(fileName);
    currentFile = fileName;
    if (!file.open(QIODevice::ReadOnly | QFile::Text)) {
        QMessageBox::warning(this, "Warning", "Cannot open file: " + file.errorString());
        return;
    }
    setWindowTitle(fileName);
    QTextStream in(&amp;file);
    QString text = in.readAll();
    ui-&gt;textEdit-&gt;setText(text);
    file.close();    file.close();
}</db:programlisting>
      <db:programlisting language="other">    file.close();
}</db:programlisting>
      <db:para>
         <db:code>QFileDialog::getOpenFileName</db:code> opens a dialog enabling you to select a file. <db:code><db:link xlink:href="qfile.html" xrefstyle="class" annotations="QFile">QFile</db:link></db:code> object <db:code>myfile</db:code> has the selected <db:code>file_name</db:code> as parameter. We store the selected file also into the global variable <db:code>current_file</db:code> for later purposes. We open the file with <db:code>file.open</db:code> as a readonly text file. If it cannot be opened, a warning is issued, and the program stops.</db:para>
      <db:para>We define a <db:code><db:link xlink:href="qtextstream.html" xrefstyle="class" annotations="QTextStream">QTextStream</db:link></db:code>
         <db:code>instream</db:code> for parameter <db:code>myfile</db:code>. The contents of file <db:code>myfile</db:code> is copied into <db:code><db:link xlink:href="qstring.html" xrefstyle="class" annotations="QString">QString</db:link></db:code>
         <db:code role="argument">text</db:code>. <db:code>setText(text)</db:code> fille the buffer of our editor with <db:code>text</db:code>.</db:para>
      <db:para>
         <db:code>section2</db:code> Saving a file</db:para>
      <db:para>We create the method for saving a file in the same way as for <db:link xlink:href="qtwidgets-tutorials-notepad-example.html#opening-a-file" xrefstyle="page" annotations="Opening a file">Opening a file</db:link>, by right clicking on <db:code>actionSave</db:code>, and selecting <db:code>Go to Slot</db:code>.</db:para>
      <db:programlisting language="other">void Notepad::on_actionSave_triggered()
{
    QString fileName;
    // If we don't have a filename from before, get one.
    if (currentFile.isEmpty()) {
        fileName = QFileDialog::getSaveFileName(this, "Save");
        currentFile = fileName;
    } else {
        fileName = currentFile;
    }
    QFile file(fileName);
    if (!file.open(QIODevice::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, "Warning", "Cannot save file: " + file.errorString());
        return;
    }
    setWindowTitle(fileName);
    QTextStream out(&amp;file);
    QString text = ui-&gt;textEdit-&gt;toPlainText();
    out &lt;&lt; text;
    file.close();    file.close();
}</db:programlisting>
      <db:programlisting language="other">    file.close();
}</db:programlisting>
      <db:para>
         <db:code><db:link xlink:href="qfile.html" xrefstyle="class" annotations="QFile">QFile</db:link></db:code> object <db:code>myfile</db:code> is linked to global variable <db:code>current_file</db:code>, the variable that contains the file we were working with. If we cannot open <db:code>myfile</db:code>, an error message is issued and the method stops. We create a <db:code><db:link xlink:href="qtextstream.html" xrefstyle="class" annotations="QTextStream">QTextStream</db:link></db:code>
         <db:code>outstream</db:code>. The contents of the editor buffer is converted to plain text, and then written to <db:code>outstream</db:code>.</db:para>
   </db:section>
   <db:section xml:id="saving-a-file-with-save-as">
      <db:title>Saving a file with <db:code>Save as</db:code></db:title>
      <db:programlisting language="other">void Notepad::on_actionSave_as_triggered()
{
    QString fileName = QFileDialog::getSaveFileName(this, "Save as");
    QFile file(fileName);

    if (!file.open(QFile::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, "Warning", "Cannot save file: " + file.errorString());
        return;
    }
    currentFile = fileName;
    setWindowTitle(fileName);
    QTextStream out(&amp;file);
    QString text = ui-&gt;textEdit-&gt;toPlainText();
    out &lt;&lt; text;
    file.close();    file.close();
}</db:programlisting>
      <db:programlisting language="other">    file.close();
}</db:programlisting>
      <db:para>This is the same procedure as for <db:code>Saving a file</db:code>, the only difference being that here you need to enter a new file name for the file to be created.</db:para>
   </db:section>
   <db:section xml:id="print-a-file">
      <db:title>Print a File</db:title>
      <db:para>If you want to use print functionalities, you need to add <db:code>printsupport</db:code> to the project file:</db:para>
      <db:programlisting language="other" role="badcode">QT       += printsupport</db:programlisting>
      <db:para>We declare a <db:code><db:link xlink:href="qprinter.html" xrefstyle="class" annotations="QPrinter">QPrinter</db:link></db:code> object called <db:code>printer</db:code>. We launch a printer dialog box and store the selected printer in object <db:code>printer</db:code>. If we clicked on <db:code>Cancel</db:code> and did not select a printer, the methods returns. The actual printer command is given with <db:code role="argument">ui-&gt;textEdit-&gt;print</db:code> with our <db:code><db:link xlink:href="qprinter.html" xrefstyle="class" annotations="QPrinter">QPrinter</db:link></db:code> object as parameter.</db:para>
   </db:section>
   <db:section xml:id="select-a-font">
      <db:title>Select a Font</db:title>
      <db:programlisting language="other">void Notepad::on_actionFont_triggered()
{
    bool fontSelected;
    QFont font = QFontDialog::getFont(&amp;fontSelected, this);
    if (fontSelected)
        ui-&gt;textEdit-&gt;setFont(font);}</db:programlisting>
      <db:programlisting language="other">}</db:programlisting>
      <db:para>We declare a boolean indicating if we did select a font with <db:code><db:link xlink:href="qfontdialog.html" xrefstyle="class" annotations="QFontDialog">QFontDialog</db:link></db:code>. If so, we set the font with <db:code>ui-&gt;textEdit-&gt;setFont(myfont)</db:code>.</db:para>
   </db:section>
   <db:section xml:id="copy-cut-paste-undo-and-redo">
      <db:title>Copy, Cut, Paste, Undo, and Redo</db:title>
      <db:para>If you select some text, and want to copy it to the clipboard, you call the appropriate method of ui-&gt;textEdit. The same counts for cut, paste, undo, and redo.</db:para>
      <db:para>This table shows the method name to use.</db:para>
      <db:informaltable>
         <db:thead>
            <db:tr>
               <db:th>
                  <db:para>Task</db:para>
               </db:th>
               <db:th>
                  <db:para>Method called</db:para>
               </db:th>
            </db:tr>
         </db:thead>
         <db:tr>
            <db:td>
               <db:para>Copy</db:para>
            </db:td>
            <db:td>
               <db:para>ui-&gt;textEdit-&gt;copy()</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Cut</db:para>
            </db:td>
            <db:td>
               <db:para>ui-&gt;textEdit-&gt;cut()</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Paste</db:para>
            </db:td>
            <db:td>
               <db:para>ui-&gt;textEdit-&gt;paste()</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Undo</db:para>
            </db:td>
            <db:td>
               <db:para>ui-&gt;textEdit-&gt;undo()</db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Redo</db:para>
            </db:td>
            <db:td>
               <db:para>ui-&gt;textEdit-&gt;redo()</db:para>
            </db:td>
         </db:tr>
      </db:informaltable>
      <db:para>
         <db:emphasis role="bold">Learn More</db:emphasis>
      </db:para>
      <db:informaltable>
         <db:thead>
            <db:tr>
               <db:th>
                  <db:para>About</db:para>
               </db:th>
               <db:th>
                  <db:para>Here</db:para>
               </db:th>
            </db:tr>
         </db:thead>
         <db:tr>
            <db:td>
               <db:para>MDI applications</db:para>
            </db:td>
            <db:td>
               <db:para>
                  <db:code><db:link xlink:href="qmdiarea.html" xrefstyle="class" annotations="QMdiArea">QMdiArea</db:link></db:code>, <db:link xlink:href="qtwidgets-mainwindows-mdi-example.html" xrefstyle="page" annotations="MDI Example">MDI Example</db:link>
               </db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>Files and I/O devices</db:para>
            </db:td>
            <db:td>
               <db:para>
                  <db:code><db:link xlink:href="qfile.html" xrefstyle="class" annotations="QFile">QFile</db:link></db:code>, <db:code><db:link xlink:href="qiodevice.html" xrefstyle="class" annotations="QIODevice">QIODevice</db:link></db:code>
               </db:para>
            </db:td>
         </db:tr>
         <db:tr>
            <db:td>
               <db:para>tr() and internationalization</db:para>
            </db:td>
            <db:td>
               <db:para>
                  <db:link xlink:href="qtlinguist-index.html" xrefstyle="page" annotations="Qt Linguist Manual">Qt Linguist Manual</db:link>, <db:link xlink:href="i18n-source-translation.html" xrefstyle="page" annotations="Writing Source Code for Translation">Writing Source Code for Translation</db:link>, <db:link xlink:href="internationalization.html" xrefstyle="" annotations="Internationalization with Qt">Internationalization with Qt</db:link>
               </db:para>
            </db:td>
         </db:tr>
      </db:informaltable>
   </db:section>
   <db:section xml:id="building-and-running-notepad">
      <db:title>Building and Running Notepad</db:title>
      <db:para>Now that you have all the necessary files, select <db:emphasis role="bold">Build</db:emphasis> &gt; <db:emphasis role="bold">Build Project Notepad</db:emphasis> to build and run the application. Qt Creator uses <db:code>qmake</db:code> and <db:code>make</db:code> to create an executable in the directory specified in the build settings of the project and runs it.</db:para>
   </db:section>
   <db:section xml:id="building-and-running-from-the-command-line">
      <db:title>Building and Running from the Command Line</db:title>
      <db:para>To build the application from the command line, switch to the directory in which you have the <db:code>.cpp</db:code> file of the application and add the project file (suffixed .pro) described earlier. The following shell commands then build the application:</db:para>
      <db:programlisting language="other" role="badcode">qmake
make (or nmake on Windows)</db:programlisting>
      <db:para>The commands create an executable in the project directory. The <db:code>qmake</db:code> tool reads the project file and produces a <db:code>Makefile</db:code> with instructions on how to build the application. The <db:code>make</db:code> tool (or the <db:code>nmake</db:code> tool) then reads the <db:code>Makefile</db:code> and produces the executable binary.</db:para>
   </db:section>
</db:article>
