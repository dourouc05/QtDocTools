<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook"
            xmlns:xlink="http://www.w3.org/1999/xlink">
   <db:info>
      <db:title>QPainterPath</db:title>
      <db:abstract>
         <db:para>Container for painting operations, enabling graphical shapes to be constructed and reused</db:para>
      </db:abstract>
   </db:info>
   <db:classsynopsis>
      <db:ooclass>
         <db:classname>QPainterPath</db:classname>
      </db:ooclass>
      <db:classsynopsisinfo role="module">QtGui</db:classsynopsisinfo>
      <db:namespacesynopsisinfo role="headers">#include &lt;qpainterpath.h&gt;</db:namespacesynopsisinfo>
      <db:classsynopsisinfo role="group">painting</db:classsynopsisinfo>
      <db:classsynopsisinfo role="group">shared</db:classsynopsisinfo>
   </db:classsynopsis>
   <db:section xml:id="details">
      <db:title>Detailed Description</db:title>
      <db:para>The <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> class provides a container for painting operations, enabling graphical shapes to be constructed and reused.</db:para>
      <db:para>A painter path is an object composed of a number of graphical building blocks, such as rectangles, ellipses, lines, and curves. Building blocks can be joined in closed subpaths, for example as a rectangle or an ellipse. A closed path has coinciding start and end points. Or they can exist independently as unclosed subpaths, such as lines and curves.</db:para>
      <db:para>A <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> object can be used for filling, outlining, and clipping. To generate fillable outlines for a given painter path, use the <db:code><db:link xlink:href="qpainterpathstroker.html" xrefstyle="class" annotations="QPainterPathStroker">QPainterPathStroker</db:link></db:code> class. The main advantage of painter paths over normal drawing operations is that complex shapes only need to be created once; then they can be drawn many times using only calls to the <db:code><db:link xlink:href="qpainter.html#drawPath" xrefstyle="function" annotations="QPainter::drawPath()">QPainter::drawPath()</db:link></db:code> function.</db:para>
      <db:para>
         <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> provides a collection of functions that can be used to obtain information about the path and its elements. In addition it is possible to reverse the order of the elements using the <db:code><db:link xlink:href="qpainterpath.html#toReversed" xrefstyle="function" annotations="toReversed()">toReversed()</db:link></db:code> function. There are also several functions to convert this painter path object into a polygon representation.</db:para>
      <db:section xml:id="composing-a-qpainterpath">
         <db:title>Composing a QPainterPath</db:title>
         <db:para>A <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> object can be constructed as an empty path, with a given start point, or as a copy of another <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> object. Once created, lines and curves can be added to the path using the <db:code><db:link xlink:href="qpainterpath.html#lineTo" xrefstyle="function" annotations="lineTo()">lineTo()</db:link></db:code>, <db:code><db:link xlink:href="qpainterpath.html#arcTo" xrefstyle="function" annotations="arcTo()">arcTo()</db:link></db:code>, <db:code><db:link xlink:href="qpainterpath.html#cubicTo" xrefstyle="function" annotations="cubicTo()">cubicTo()</db:link></db:code> and <db:code><db:link xlink:href="qpainterpath.html#quadTo" xrefstyle="function" annotations="quadTo()">quadTo()</db:link></db:code> functions. The lines and curves stretch from the <db:code><db:link xlink:href="qpainterpath.html#currentPosition" xrefstyle="function" annotations="currentPosition()">currentPosition()</db:link></db:code> to the position passed as argument.</db:para>
         <db:para>The <db:code><db:link xlink:href="qpainterpath.html#currentPosition" xrefstyle="function" annotations="currentPosition()">currentPosition()</db:link></db:code> of the <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> object is always the end position of the last subpath that was added (or the initial start point). Use the <db:code><db:link xlink:href="qpainterpath.html#moveTo" xrefstyle="function" annotations="moveTo()">moveTo()</db:link></db:code> function to move the <db:code><db:link xlink:href="qpainterpath.html#currentPosition" xrefstyle="function" annotations="currentPosition()">currentPosition()</db:link></db:code> without adding a component. The <db:code><db:link xlink:href="qpainterpath.html#moveTo" xrefstyle="function" annotations="moveTo()">moveTo()</db:link></db:code> function implicitly starts a new subpath, and closes the previous one. Another way of starting a new subpath is to call the <db:code><db:link xlink:href="qpainterpath.html#closeSubpath" xrefstyle="function" annotations="closeSubpath()">closeSubpath()</db:link></db:code> function which closes the current path by adding a line from the <db:code><db:link xlink:href="qpainterpath.html#currentPosition" xrefstyle="function" annotations="currentPosition()">currentPosition()</db:link></db:code> back to the path's start position. Note that the new path will have (0, 0) as its initial <db:code><db:link xlink:href="qpainterpath.html#currentPosition" xrefstyle="function" annotations="currentPosition()">currentPosition()</db:link></db:code>.</db:para>
         <db:para>
            <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> class also provides several convenience functions to add closed subpaths to a painter path: <db:code><db:link xlink:href="qpainterpath.html#addEllipse" xrefstyle="function" annotations="addEllipse()">addEllipse()</db:link></db:code>, <db:code><db:link xlink:href="qpainterpath.html#addPath" xrefstyle="function" annotations="addPath()">addPath()</db:link></db:code>, <db:code><db:link xlink:href="qpainterpath.html#addRect" xrefstyle="function" annotations="addRect()">addRect()</db:link></db:code>, <db:code><db:link xlink:href="qpainterpath.html#addRegion" xrefstyle="function" annotations="addRegion()">addRegion()</db:link></db:code> and <db:code><db:link xlink:href="qpainterpath.html#addText" xrefstyle="function" annotations="addText()">addText()</db:link></db:code>. The <db:code><db:link xlink:href="qpainterpath.html#addPolygon" xrefstyle="function" annotations="addPolygon()">addPolygon()</db:link></db:code> function adds an <db:emphasis>unclosed</db:emphasis> subpath. In fact, these functions are all collections of <db:code><db:link xlink:href="qpainterpath.html#moveTo" xrefstyle="function" annotations="moveTo()">moveTo()</db:link></db:code>, <db:code><db:link xlink:href="qpainterpath.html#lineTo" xrefstyle="function" annotations="lineTo()">lineTo()</db:link></db:code> and <db:code><db:link xlink:href="qpainterpath.html#cubicTo" xrefstyle="function" annotations="cubicTo()">cubicTo()</db:link></db:code> operations.</db:para>
         <db:para>In addition, a path can be added to the current path using the <db:code><db:link xlink:href="qpainterpath.html#connectPath" xrefstyle="function" annotations="connectPath()">connectPath()</db:link></db:code> function. But note that this function will connect the last element of the current path to the first element of given one by adding a line.</db:para>
         <db:para>Below is a code snippet that shows how a <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> object can be used:</db:para>
         <db:informaltable>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:inlinemediaobject>
                        <db:imageobject>
                           <db:imagedata fileref="images/qpainterpath-construction.png"/>
                        </db:imageobject>
                     </db:inlinemediaobject>
                  </db:para>
               </db:td>
               <db:td>
                  <db:programlisting>/****************************************************************************&#xD;
**&#xD;
** Copyright (C) 2016 The Qt Company Ltd.&#xD;
** Contact: https://www.qt.io/licensing/&#xD;
**&#xD;
** This file is part of the documentation of the Qt Toolkit.&#xD;
**&#xD;
** $QT_BEGIN_LICENSE:BSD$&#xD;
** Commercial License Usage&#xD;
** Licensees holding valid commercial Qt licenses may use this file in&#xD;
** accordance with the commercial license agreement provided with the&#xD;
** Software or, alternatively, in accordance with the terms contained in&#xD;
** a written agreement between you and The Qt Company. For licensing terms&#xD;
** and conditions see https://www.qt.io/terms-conditions. For further&#xD;
** information use the contact form at https://www.qt.io/contact-us.&#xD;
**&#xD;
** BSD License Usage&#xD;
** Alternatively, you may use this file under the terms of the BSD license&#xD;
** as follows:&#xD;
**&#xD;
** "Redistribution and use in source and binary forms, with or without&#xD;
** modification, are permitted provided that the following conditions are&#xD;
** met:&#xD;
**   * Redistributions of source code must retain the above copyright&#xD;
**     notice, this list of conditions and the following disclaimer.&#xD;
**   * Redistributions in binary form must reproduce the above copyright&#xD;
**     notice, this list of conditions and the following disclaimer in&#xD;
**     the documentation and/or other materials provided with the&#xD;
**     distribution.&#xD;
**   * Neither the name of The Qt Company Ltd nor the names of its&#xD;
**     contributors may be used to endorse or promote products derived&#xD;
**     from this software without specific prior written permission.&#xD;
**&#xD;
**&#xD;
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#xD;
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#xD;
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR&#xD;
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT&#xD;
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xD;
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xD;
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,&#xD;
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY&#xD;
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&#xD;
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#xD;
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."&#xD;
**&#xD;
** $QT_END_LICENSE$&#xD;
**&#xD;
****************************************************************************/&#xD;
&#xD;
//! [0]&#xD;
QPainterPath path;&#xD;
path.addRect(20, 20, 60, 60);&#xD;
&#xD;
path.moveTo(0, 0);&#xD;
path.cubicTo(99, 0,  50, 50,  99, 99);&#xD;
path.cubicTo(0, 99,  50, 50,  0, 0);&#xD;
&#xD;
QPainter painter(this);&#xD;
painter.fillRect(0, 0, 100, 100, Qt::white);&#xD;
painter.setPen(QPen(QColor(79, 106, 25), 1, Qt::SolidLine,&#xD;
                    Qt::FlatCap, Qt::MiterJoin));&#xD;
painter.setBrush(QColor(122, 163, 39));&#xD;
&#xD;
painter.drawPath(path);&#xD;
//! [0]&#xD;
&#xD;
&#xD;
//! [1]&#xD;
QLinearGradient myGradient;&#xD;
QPen myPen;&#xD;
&#xD;
QPainterPath myPath;&#xD;
myPath.cubicTo(c1, c2, endPoint);&#xD;
&#xD;
QPainter painter(this);&#xD;
painter.setBrush(myGradient);&#xD;
painter.setPen(myPen);&#xD;
painter.drawPath(myPath);&#xD;
//! [1]&#xD;
&#xD;
&#xD;
//! [2]&#xD;
QLinearGradient myGradient;&#xD;
QPen myPen;&#xD;
&#xD;
QPointF center, startPoint;&#xD;
&#xD;
QPainterPath myPath;&#xD;
myPath.moveTo(center);&#xD;
myPath.arcTo(boundingRect, startAngle,&#xD;
             sweepLength);&#xD;
&#xD;
QPainter painter(this);&#xD;
painter.setBrush(myGradient);&#xD;
painter.setPen(myPen);&#xD;
painter.drawPath(myPath);&#xD;
//! [2]&#xD;
&#xD;
&#xD;
//! [3]&#xD;
QLinearGradient myGradient;&#xD;
QPen myPen;&#xD;
QRectF myRectangle;&#xD;
&#xD;
QPainterPath myPath;&#xD;
myPath.addRect(myRectangle);&#xD;
&#xD;
QPainter painter(this);&#xD;
painter.setBrush(myGradient);&#xD;
painter.setPen(myPen);&#xD;
painter.drawPath(myPath);&#xD;
//! [3]&#xD;
&#xD;
&#xD;
//! [4]&#xD;
QLinearGradient myGradient;&#xD;
QPen myPen;&#xD;
QPolygonF myPolygon;&#xD;
&#xD;
QPainterPath myPath;&#xD;
myPath.addPolygon(myPolygon);&#xD;
&#xD;
QPainter painter(this);&#xD;
painter.setBrush(myGradient);&#xD;
painter.setPen(myPen);&#xD;
painter.drawPath(myPath);&#xD;
//! [4]&#xD;
&#xD;
&#xD;
//! [5]&#xD;
QLinearGradient myGradient;&#xD;
QPen myPen;&#xD;
QRectF boundingRectangle;&#xD;
&#xD;
QPainterPath myPath;&#xD;
myPath.addEllipse(boundingRectangle);&#xD;
&#xD;
QPainter painter(this);&#xD;
painter.setBrush(myGradient);&#xD;
painter.setPen(myPen);&#xD;
painter.drawPath(myPath);&#xD;
//! [5]&#xD;
&#xD;
&#xD;
//! [6]&#xD;
QLinearGradient myGradient;&#xD;
QPen myPen;&#xD;
QFont myFont;&#xD;
QPointF baseline(x, y);&#xD;
&#xD;
QPainterPath myPath;&#xD;
myPath.addText(baseline, myFont, tr("Qt"));&#xD;
&#xD;
QPainter painter(this);&#xD;
painter.setBrush(myGradient);&#xD;
painter.setPen(myPen);&#xD;
painter.drawPath(myPath);&#xD;
//! [6]&#xD;
</db:programlisting>
               </db:td>
            </db:tr>
         </db:informaltable>
         <db:para>The painter path is initially empty when constructed. We first add a rectangle, which is a closed subpath. Then we add two bezier curves which together form a closed subpath even though they are not closed individually. Finally we draw the entire path. The path is filled using the default fill rule, <db:code><db:link xlink:href="qt.html#FillRule-enum" xrefstyle="enum" annotations="Qt::OddEvenFill">Qt::OddEvenFill</db:link></db:code>. Qt provides two methods for filling paths:</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>
                        <db:code><db:link xlink:href="qt.html#FillRule-enum" xrefstyle="enum" annotations="Qt::OddEvenFill">Qt::OddEvenFill</db:link></db:code>
                     </db:para>
                  </db:th>
                  <db:th>
                     <db:para>
                        <db:code><db:link xlink:href="qt.html#FillRule-enum" xrefstyle="enum" annotations="Qt::WindingFill">Qt::WindingFill</db:link></db:code>
                     </db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:inlinemediaobject>
                        <db:imageobject>
                           <db:imagedata fileref="images/qt-fillrule-oddeven.png"/>
                        </db:imageobject>
                     </db:inlinemediaobject>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>
                     <db:inlinemediaobject>
                        <db:imageobject>
                           <db:imagedata fileref="images/qt-fillrule-winding.png"/>
                        </db:imageobject>
                     </db:inlinemediaobject>
                  </db:para>
               </db:td>
            </db:tr>
         </db:informaltable>
         <db:para>See the <db:code><db:link xlink:href="qt.html#FillRule-enum" xrefstyle="enum" annotations="Qt::FillRule">Qt::FillRule</db:link></db:code> documentation for the definition of the rules. A painter path's currently set fill rule can be retrieved using the <db:code><db:link xlink:href="qpainterpath.html#fillRule" xrefstyle="function" annotations="fillRule()">fillRule()</db:link></db:code> function, and altered using the <db:code><db:link xlink:href="qpainterpath.html#setFillRule" xrefstyle="function" annotations="setFillRule()">setFillRule()</db:link></db:code> function.</db:para>
      </db:section>
      <db:section xml:id="qpainterpath-information">
         <db:title>QPainterPath Information</db:title>
         <db:para>The <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> class provides a collection of functions that returns information about the path and its elements.</db:para>
         <db:para>The <db:code><db:link xlink:href="qpainterpath.html#currentPosition" xrefstyle="function" annotations="currentPosition()">currentPosition()</db:link></db:code> function returns the end point of the last subpath that was added (or the initial start point). The <db:code><db:link xlink:href="qpainterpath.html#elementAt" xrefstyle="function" annotations="elementAt()">elementAt()</db:link></db:code> function can be used to retrieve the various subpath elements, the <db:emphasis>number</db:emphasis> of elements can be retrieved using the <db:code><db:link xlink:href="qpainterpath.html#elementCount" xrefstyle="function" annotations="elementCount()">elementCount()</db:link></db:code> function, and the <db:code><db:link xlink:href="qpainterpath.html#isEmpty" xrefstyle="function" annotations="isEmpty()">isEmpty()</db:link></db:code> function tells whether this <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> object contains any elements at all.</db:para>
         <db:para>The <db:code><db:link xlink:href="qpainterpath.html#controlPointRect" xrefstyle="function" annotations="controlPointRect()">controlPointRect()</db:link></db:code> function returns the rectangle containing all the points and control points in this path. This function is significantly faster to compute than the exact <db:code><db:link xlink:href="qpainterpath.html#boundingRect" xrefstyle="function" annotations="boundingRect()">boundingRect()</db:link></db:code> which returns the bounding rectangle of this painter path with floating point precision.</db:para>
         <db:para>Finally, <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> provides the <db:code><db:link xlink:href="qpainterpath.html#contains" xrefstyle="function" annotations="contains()">contains()</db:link></db:code> function which can be used to determine whether a given point or rectangle is inside the path, and the <db:code><db:link xlink:href="qpainterpath.html#intersects" xrefstyle="function" annotations="intersects()">intersects()</db:link></db:code> function which determines if any of the points inside a given rectangle also are inside this path.</db:para>
      </db:section>
      <db:section xml:id="qpainterpath-conversion">
         <db:title>QPainterPath Conversion</db:title>
         <db:para>For compatibility reasons, it might be required to simplify the representation of a painter path: <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> provides the <db:code><db:link xlink:href="qpainterpath.html#toFillPolygon" xrefstyle="function" annotations="toFillPolygon()">toFillPolygon()</db:link></db:code>, <db:code><db:link xlink:href="qpainterpath.html#toFillPolygons" xrefstyle="function" annotations="toFillPolygons()">toFillPolygons()</db:link></db:code> and <db:code><db:link xlink:href="qpainterpath.html#toSubpathPolygons" xrefstyle="function" annotations="toSubpathPolygons()">toSubpathPolygons()</db:link></db:code> functions which convert the painter path into a polygon. The <db:code><db:link xlink:href="qpainterpath.html#toFillPolygon" xrefstyle="function" annotations="toFillPolygon()">toFillPolygon()</db:link></db:code> returns the painter path as one single polygon, while the two latter functions return a list of polygons.</db:para>
         <db:para>The <db:code><db:link xlink:href="qpainterpath.html#toFillPolygons" xrefstyle="function" annotations="toFillPolygons()">toFillPolygons()</db:link></db:code> and <db:code><db:link xlink:href="qpainterpath.html#toSubpathPolygons" xrefstyle="function" annotations="toSubpathPolygons()">toSubpathPolygons()</db:link></db:code> functions are provided because it is usually faster to draw several small polygons than to draw one large polygon, even though the total number of points drawn is the same. The difference between the two is the <db:emphasis>number</db:emphasis> of polygons they return: The <db:code><db:link xlink:href="qpainterpath.html#toSubpathPolygons" xrefstyle="function" annotations="toSubpathPolygons()">toSubpathPolygons()</db:link></db:code> creates one polygon for each subpath regardless of intersecting subpaths (i.e. overlapping bounding rectangles), while the <db:code><db:link xlink:href="qpainterpath.html#toFillPolygons" xrefstyle="function" annotations="toFillPolygons()">toFillPolygons()</db:link></db:code> functions creates only one polygon for overlapping subpaths.</db:para>
         <db:para>The <db:code><db:link xlink:href="qpainterpath.html#toFillPolygon" xrefstyle="function" annotations="toFillPolygon()">toFillPolygon()</db:link></db:code> and <db:code><db:link xlink:href="qpainterpath.html#toFillPolygons" xrefstyle="function" annotations="toFillPolygons()">toFillPolygons()</db:link></db:code> functions first convert all the subpaths to polygons, then uses a rewinding technique to make sure that overlapping subpaths can be filled using the correct fill rule. Note that rewinding inserts additional lines in the polygon so the outline of the fill polygon does not match the outline of the path.</db:para>
      </db:section>
      <db:section xml:id="examples">
         <db:title>Examples</db:title>
         <db:para>Qt provides the <db:link xlink:href="qtwidgets-painting-painterpaths-example.html" xrefstyle="page" annotations="painting/painterpaths">Painter Paths Example</db:link> and the <db:link xlink:href="qtwidgets-painting-deform-example.html" xrefstyle="page" annotations="painting/deform">Vector Deformation example</db:link> which are located in Qt's example directory.</db:para>
         <db:para>The <db:link xlink:href="qtwidgets-painting-painterpaths-example.html" xrefstyle="page" annotations="painting/painterpaths">Painter Paths Example</db:link> shows how painter paths can be used to build complex shapes for rendering and lets the user experiment with the filling and stroking. The <db:link xlink:href="qtwidgets-painting-deform-example.html" xrefstyle="page" annotations="painting/deform">Vector Deformation Example</db:link> shows how to use <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> to draw text.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>
                        <db:link xlink:href="qtwidgets-painting-painterpaths-example.html" xrefstyle="page" annotations="painting/painterpaths">Painter Paths Example</db:link>
                     </db:para>
                  </db:th>
                  <db:th>
                     <db:para>
                        <db:link xlink:href="qtwidgets-painting-deform-example.html" xrefstyle="page" annotations="painting/deform">Vector Deformation Example</db:link>
                     </db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:inlinemediaobject>
                        <db:imageobject>
                           <db:imagedata fileref="images/qpainterpath-example.png"/>
                        </db:imageobject>
                     </db:inlinemediaobject>
                  </db:para>
               </db:td>
               <db:td>
                  <db:para>
                     <db:inlinemediaobject>
                        <db:imageobject>
                           <db:imagedata fileref="images/qpainterpath-demo.png"/>
                        </db:imageobject>
                     </db:inlinemediaobject>
                  </db:para>
               </db:td>
            </db:tr>
         </db:informaltable>
      </db:section>
      <db:para>
         <db:emphasis role="bold">See Also:</db:emphasis>
         <db:simplelist type="vert">
            <db:member>
               <db:code><db:link xlink:href="qpainterpathstroker.html" xrefstyle="class" annotations="QPainterPathStroker">QPainterPathStroker</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qpainter.html" xrefstyle="class" annotations="QPainter">QPainter</db:link></db:code>
            </db:member>
            <db:member>
               <db:code><db:link xlink:href="qregion.html" xrefstyle="class" annotations="QRegion">QRegion</db:link></db:code>
            </db:member>
            <db:member>
               <db:link xlink:href="qtwidgets-painting-painterpaths-example.html" xrefstyle="page" annotations="Painter Paths Example">Painter Paths Example</db:link>
            </db:member>
         </db:simplelist>
      </db:para>
   </db:section>
   <db:section>
      <db:title>Classes</db:title>
   </db:section>
   <db:section>
      <db:title>Member Type Documentation</db:title>
      <db:section>
         <db:title>enum QPainterPath::ElementType, flags </db:title>
         <db:enumsynopsis>
            <db:enumname>QPainterPath::ElementType</db:enumname>
            <db:enumitem>
               <db:enumidentifier>MoveToElement</db:enumidentifier>
               <db:enumvalue>0</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>LineToElement</db:enumidentifier>
               <db:enumvalue>1</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CurveToElement</db:enumidentifier>
               <db:enumvalue>2</db:enumvalue>
            </db:enumitem>
            <db:enumitem>
               <db:enumidentifier>CurveToDataElement</db:enumidentifier>
               <db:enumvalue>3</db:enumvalue>
            </db:enumitem>
         </db:enumsynopsis>
         <db:para>This enum describes the types of elements used to connect vertices in subpaths.</db:para>
         <db:para>Note that elements added as closed subpaths using the <db:code><db:link xlink:href="qpainterpath.html#addEllipse" xrefstyle="function" annotations="addEllipse()">addEllipse()</db:link></db:code>, <db:code><db:link xlink:href="qpainterpath.html#addPath" xrefstyle="function" annotations="addPath()">addPath()</db:link></db:code>, <db:code><db:link xlink:href="qpainterpath.html#addPolygon" xrefstyle="function" annotations="addPolygon()">addPolygon()</db:link></db:code>, <db:code><db:link xlink:href="qpainterpath.html#addRect" xrefstyle="function" annotations="addRect()">addRect()</db:link></db:code>, <db:code><db:link xlink:href="qpainterpath.html#addRegion" xrefstyle="function" annotations="addRegion()">addRegion()</db:link></db:code> and <db:code><db:link xlink:href="qpainterpath.html#addText" xrefstyle="function" annotations="addText()">addText()</db:link></db:code> convenience functions, is actually added to the path as a collection of separate elements using the <db:code><db:link xlink:href="qpainterpath.html#moveTo" xrefstyle="function" annotations="moveTo()">moveTo()</db:link></db:code>, <db:code><db:link xlink:href="qpainterpath.html#lineTo" xrefstyle="function" annotations="lineTo()">lineTo()</db:link></db:code> and <db:code><db:link xlink:href="qpainterpath.html#cubicTo" xrefstyle="function" annotations="cubicTo()">cubicTo()</db:link></db:code> functions.</db:para>
         <db:informaltable>
            <db:thead>
               <db:tr>
                  <db:th>
                     <db:para>Constant</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Value</db:para>
                  </db:th>
                  <db:th>
                     <db:para>Description</db:para>
                  </db:th>
               </db:tr>
            </db:thead>
            <db:tbody>
               <db:tr>
                  <db:td>QPainterPath::MoveToElement</db:td>
                  <db:td>0</db:td>
                  <db:td>
                     <db:para>A new subpath. See also <db:code><db:link xlink:href="qpainterpath.html#moveTo" xrefstyle="function" annotations="moveTo()">moveTo()</db:link></db:code>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QPainterPath::LineToElement</db:td>
                  <db:td>1</db:td>
                  <db:td>
                     <db:para>A line. See also <db:code><db:link xlink:href="qpainterpath.html#lineTo" xrefstyle="function" annotations="lineTo()">lineTo()</db:link></db:code>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QPainterPath::CurveToElement</db:td>
                  <db:td>2</db:td>
                  <db:td>
                     <db:para>A curve. See also <db:code><db:link xlink:href="qpainterpath.html#cubicTo" xrefstyle="function" annotations="cubicTo()">cubicTo()</db:link></db:code> and <db:code><db:link xlink:href="qpainterpath.html#quadTo" xrefstyle="function" annotations="quadTo()">quadTo()</db:link></db:code>.</db:para>
                  </db:td>
               </db:tr>
               <db:tr>
                  <db:td>QPainterPath::CurveToDataElement</db:td>
                  <db:td>3</db:td>
                  <db:td>
                     <db:para>The extra data required to describe a curve in a  element.</db:para>
                  </db:td>
               </db:tr>
            </db:tbody>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#elementAt" xrefstyle="function" annotations="elementAt()">elementAt()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#elementCount" xrefstyle="function" annotations="elementCount()">elementCount()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
   </db:section>
   <db:section>
      <db:title>Member Function Documentation</db:title>
      <db:section>
         <db:title> QPainterPath::QPainterPath()</db:title>
         <db:constructorsynopsis>
            <db:methodname>QPainterPath</db:methodname>
            <db:void/>
            <db:modifier>public</db:modifier>
         </db:constructorsynopsis>
         <db:para>Constructs an empty <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> object.</db:para>
      </db:section>
      <db:section>
         <db:title> QPainterPath::QPainterPath(const QPointF &amp;startPoint)</db:title>
         <db:constructorsynopsis>
            <db:methodname>QPainterPath</db:methodname>
            <db:methodparam>
               <db:type>const QPointF &amp;</db:type>
               <db:parameter>startPoint</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:constructorsynopsis>
         <db:para>Creates a <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> object with the given <db:code role="argument">startPoint</db:code> as its current position.</db:para>
      </db:section>
      <db:section>
         <db:title> QPainterPath::~QPainterPath()</db:title>
         <db:destructorsynopsis>
            <db:methodname>~QPainterPath</db:methodname>
            <db:void/>
            <db:modifier>public</db:modifier>
         </db:destructorsynopsis>
         <db:para>Destroys this <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> object.</db:para>
      </db:section>
      <db:section>
         <db:title>QList&lt;QPolygonF&gt; QPainterPath::toFillPolygons(const QMatrix &amp;matrix) const</db:title>
         <db:methodsynopsis>
            <db:type>QList&lt;QPolygonF&gt;</db:type>
            <db:methodname>toFillPolygons</db:methodname>
            <db:methodparam>
               <db:type>const QMatrix &amp;</db:type>
               <db:parameter>matrix</db:parameter>
               <db:initializer>QMatrix()</db:initializer>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>This is an overloaded function.</db:para>
      </db:section>
      <db:section>
         <db:title>QList&lt;QPolygonF&gt; QPainterPath::toFillPolygons(const QTransform &amp;matrix) const</db:title>
         <db:methodsynopsis>
            <db:type>QList&lt;QPolygonF&gt;</db:type>
            <db:methodname>toFillPolygons</db:methodname>
            <db:methodparam>
               <db:type>const QTransform &amp;</db:type>
               <db:parameter>matrix</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Converts the path into a list of polygons using the <db:code><db:link xlink:href="qtransform.html" xrefstyle="class" annotations="QTransform">QTransform</db:link></db:code>
            <db:code role="argument">matrix</db:code>, and returns the list.</db:para>
         <db:para>The function differs from the <db:code><db:link xlink:href="qpainterpath.html#toFillPolygon" xrefstyle="function" annotations="toFillPolygon()">toFillPolygon()</db:link></db:code> function in that it creates several polygons. It is provided because it is usually faster to draw several small polygons than to draw one large polygon, even though the total number of points drawn is the same.</db:para>
         <db:para>The  function differs from the <db:code><db:link xlink:href="qpainterpath.html#toSubpathPolygons" xrefstyle="function" annotations="toSubpathPolygons()">toSubpathPolygons()</db:link></db:code> function in that it create only polygon for subpaths that have overlapping bounding rectangles.</db:para>
         <db:para>Like the <db:code><db:link xlink:href="qpainterpath.html#toFillPolygon" xrefstyle="function" annotations="toFillPolygon()">toFillPolygon()</db:link></db:code> function, this function uses a rewinding technique to make sure that overlapping subpaths can be filled using the correct fill rule. Note that rewinding inserts addition lines in the polygons so the outline of the fill polygon does not match the outline of the path.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#toSubpathPolygons" xrefstyle="function" annotations="toSubpathPolygons()">toSubpathPolygons()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#toFillPolygon" xrefstyle="function" annotations="toFillPolygon()">toFillPolygon()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#qpainterpath-conversion" xrefstyle="class" annotations="QPainterPath#QPainterPath Conversion">QPainterPath Conversion</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QList&lt;QPolygonF&gt; QPainterPath::toSubpathPolygons(const QMatrix &amp;matrix) const</db:title>
         <db:methodsynopsis>
            <db:type>QList&lt;QPolygonF&gt;</db:type>
            <db:methodname>toSubpathPolygons</db:methodname>
            <db:methodparam>
               <db:type>const QMatrix &amp;</db:type>
               <db:parameter>matrix</db:parameter>
               <db:initializer>QMatrix()</db:initializer>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>This is an overloaded function.</db:para>
      </db:section>
      <db:section>
         <db:title>QList&lt;QPolygonF&gt; QPainterPath::toSubpathPolygons(const QTransform &amp;matrix) const</db:title>
         <db:methodsynopsis>
            <db:type>QList&lt;QPolygonF&gt;</db:type>
            <db:methodname>toSubpathPolygons</db:methodname>
            <db:methodparam>
               <db:type>const QTransform &amp;</db:type>
               <db:parameter>matrix</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Converts the path into a list of polygons using the <db:code><db:link xlink:href="qtransform.html" xrefstyle="class" annotations="QTransform">QTransform</db:link></db:code>
            <db:code role="argument">matrix</db:code>, and returns the list.</db:para>
         <db:para>This function creates one polygon for each subpath regardless of intersecting subpaths (i.e. overlapping bounding rectangles). To make sure that such overlapping subpaths are filled correctly, use the <db:code><db:link xlink:href="qpainterpath.html#toFillPolygons" xrefstyle="function" annotations="toFillPolygons()">toFillPolygons()</db:link></db:code> function instead.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#toFillPolygons" xrefstyle="function" annotations="toFillPolygons()">toFillPolygons()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#toFillPolygon" xrefstyle="function" annotations="toFillPolygon()">toFillPolygon()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#qpainterpath-conversion" xrefstyle="class" annotations="QPainterPath#QPainterPath Conversion">QPainterPath Conversion</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QPainterPath &amp; QPainterPath::operator&amp;=(const QPainterPath &amp;other)</db:title>
         <db:methodsynopsis>
            <db:type>QPainterPath &amp;</db:type>
            <db:methodname>operator&amp;=</db:methodname>
            <db:methodparam>
               <db:type>const QPainterPath &amp;</db:type>
               <db:parameter>other</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Intersects this path with <db:code role="argument">other</db:code> and returns a reference to this path.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#intersected" xrefstyle="function" annotations="intersected()">intersected()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-and" xrefstyle="function" annotations="operator&amp;()">operator&amp;()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-7c-eq" xrefstyle="function" annotations="operator|=()">operator|=()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.5.</db:para>
      </db:section>
      <db:section>
         <db:title>QPainterPath &amp; QPainterPath::operator+=(const QPainterPath &amp;other)</db:title>
         <db:methodsynopsis>
            <db:type>QPainterPath &amp;</db:type>
            <db:methodname>operator+=</db:methodname>
            <db:methodparam>
               <db:type>const QPainterPath &amp;</db:type>
               <db:parameter>other</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Unites this path with <db:code role="argument">other</db:code>, and returns a reference to this path. This is equivalent to operator|=().</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#united" xrefstyle="function" annotations="united()">united()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-2b" xrefstyle="function" annotations="operator+()">operator+()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator--eq" xrefstyle="function" annotations="operator-=()">operator-=()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.5.</db:para>
      </db:section>
      <db:section>
         <db:title>QPainterPath &amp; QPainterPath::operator-=(const QPainterPath &amp;other)</db:title>
         <db:methodsynopsis>
            <db:type>QPainterPath &amp;</db:type>
            <db:methodname>operator-=</db:methodname>
            <db:methodparam>
               <db:type>const QPainterPath &amp;</db:type>
               <db:parameter>other</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Subtracts <db:code role="argument">other</db:code> from this path, and returns a reference to this path.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#subtracted" xrefstyle="function" annotations="subtracted()">subtracted()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-" xrefstyle="function" annotations="operator-()">operator-()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-2b-eq" xrefstyle="function" annotations="operator+=()">operator+=()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.5.</db:para>
      </db:section>
      <db:section>
         <db:title>QPainterPath &amp; QPainterPath::operator|=(const QPainterPath &amp;other)</db:title>
         <db:methodsynopsis>
            <db:type>QPainterPath &amp;</db:type>
            <db:methodname>operator|=</db:methodname>
            <db:methodparam>
               <db:type>const QPainterPath &amp;</db:type>
               <db:parameter>other</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Unites this path with <db:code role="argument">other</db:code> and returns a reference to this path.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#united" xrefstyle="function" annotations="united()">united()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-7c" xrefstyle="function" annotations="operator|()">operator|()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-and-eq" xrefstyle="function" annotations="operator&amp;=()">operator&amp;=()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.5.</db:para>
      </db:section>
      <db:section>
         <db:title>QPainterPath QPainterPath::intersected(const QPainterPath &amp;p) const</db:title>
         <db:methodsynopsis>
            <db:type>QPainterPath</db:type>
            <db:methodname>intersected</db:methodname>
            <db:methodparam>
               <db:type>const QPainterPath &amp;</db:type>
               <db:parameter>p</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns a path which is the intersection of this path's fill area and <db:code role="argument">p</db:code>'s fill area. Bezier curves may be flattened to line segments due to numerical instability of doing bezier curve intersections.</db:para>
         <db:para>This property was introduced in Qt 4.3.</db:para>
      </db:section>
      <db:section>
         <db:title>QPainterPath QPainterPath::operator&amp;(const QPainterPath &amp;other) const</db:title>
         <db:methodsynopsis>
            <db:type>QPainterPath</db:type>
            <db:methodname>operator&amp;</db:methodname>
            <db:methodparam>
               <db:type>const QPainterPath &amp;</db:type>
               <db:parameter>other</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns the intersection of this path and the <db:code role="argument">other</db:code> path.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#intersected" xrefstyle="function" annotations="intersected()">intersected()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-and-eq" xrefstyle="function" annotations="operator&amp;=()">operator&amp;=()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#united" xrefstyle="function" annotations="united()">united()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-7c" xrefstyle="function" annotations="operator|()">operator|()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.5.</db:para>
      </db:section>
      <db:section>
         <db:title>QPainterPath QPainterPath::operator+(const QPainterPath &amp;other) const</db:title>
         <db:methodsynopsis>
            <db:type>QPainterPath</db:type>
            <db:methodname>operator+</db:methodname>
            <db:methodparam>
               <db:type>const QPainterPath &amp;</db:type>
               <db:parameter>other</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns the union of this path and the <db:code role="argument">other</db:code> path. This function is equivalent to operator|().</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#united" xrefstyle="function" annotations="united()">united()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-2b-eq" xrefstyle="function" annotations="operator+=()">operator+=()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-" xrefstyle="function" annotations="operator-()">operator-()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.5.</db:para>
      </db:section>
      <db:section>
         <db:title>QPainterPath QPainterPath::operator-(const QPainterPath &amp;other) const</db:title>
         <db:methodsynopsis>
            <db:type>QPainterPath</db:type>
            <db:methodname>operator-</db:methodname>
            <db:methodparam>
               <db:type>const QPainterPath &amp;</db:type>
               <db:parameter>other</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Subtracts the <db:code role="argument">other</db:code> path from a copy of this path, and returns the copy.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#subtracted" xrefstyle="function" annotations="subtracted()">subtracted()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator--eq" xrefstyle="function" annotations="operator-=()">operator-=()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-2b" xrefstyle="function" annotations="operator+()">operator+()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.5.</db:para>
      </db:section>
      <db:section>
         <db:title>QPainterPath QPainterPath::operator|(const QPainterPath &amp;other) const</db:title>
         <db:methodsynopsis>
            <db:type>QPainterPath</db:type>
            <db:methodname>operator|</db:methodname>
            <db:methodparam>
               <db:type>const QPainterPath &amp;</db:type>
               <db:parameter>other</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns the union of this path and the <db:code role="argument">other</db:code> path.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#united" xrefstyle="function" annotations="united()">united()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-7c-eq" xrefstyle="function" annotations="operator|=()">operator|=()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#intersected" xrefstyle="function" annotations="intersected()">intersected()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-and" xrefstyle="function" annotations="operator&amp;()">operator&amp;()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.5.</db:para>
      </db:section>
      <db:section>
         <db:title>QPainterPath QPainterPath::simplified() const</db:title>
         <db:methodsynopsis>
            <db:type>QPainterPath</db:type>
            <db:methodname>simplified</db:methodname>
            <db:void/>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns a simplified version of this path. This implies merging all subpaths that intersect, and returning a path containing no intersecting edges. Consecutive parallel lines will also be merged. The simplified path will always use the default fill rule, <db:code><db:link xlink:href="qt.html#FillRule-enum" xrefstyle="enum" annotations="Qt::OddEvenFill">Qt::OddEvenFill</db:link></db:code>. Bezier curves may be flattened to line segments due to numerical instability of doing bezier curve intersections.</db:para>
         <db:para>This property was introduced in Qt 4.4.</db:para>
      </db:section>
      <db:section>
         <db:title>QPainterPath QPainterPath::subtracted(const QPainterPath &amp;p) const</db:title>
         <db:methodsynopsis>
            <db:type>QPainterPath</db:type>
            <db:methodname>subtracted</db:methodname>
            <db:methodparam>
               <db:type>const QPainterPath &amp;</db:type>
               <db:parameter>p</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns a path which is <db:code role="argument">p</db:code>'s fill area subtracted from this path's fill area.</db:para>
         <db:para>Set operations on paths will treat the paths as areas. Non-closed paths will be treated as implicitly closed. Bezier curves may be flattened to line segments due to numerical instability of doing bezier curve intersections.</db:para>
         <db:para>This property was introduced in Qt 4.3.</db:para>
      </db:section>
      <db:section>
         <db:title>QPainterPath QPainterPath::toReversed() const</db:title>
         <db:methodsynopsis>
            <db:type>QPainterPath</db:type>
            <db:methodname>toReversed</db:methodname>
            <db:void/>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Creates and returns a reversed copy of the path.</db:para>
         <db:para>It is the order of the elements that is reversed: If a <db:code><db:link xlink:href="qpainterpath.html" xrefstyle="class" annotations="QPainterPath">QPainterPath</db:link></db:code> is composed by calling the <db:code><db:link xlink:href="qpainterpath.html#moveTo" xrefstyle="function" annotations="moveTo()">moveTo()</db:link></db:code>, <db:code><db:link xlink:href="qpainterpath.html#lineTo" xrefstyle="function" annotations="lineTo()">lineTo()</db:link></db:code> and <db:code><db:link xlink:href="qpainterpath.html#cubicTo" xrefstyle="function" annotations="cubicTo()">cubicTo()</db:link></db:code> functions in the specified order, the reversed copy is composed by calling <db:code><db:link xlink:href="qpainterpath.html#cubicTo" xrefstyle="function" annotations="cubicTo()">cubicTo()</db:link></db:code>, <db:code><db:link xlink:href="qpainterpath.html#lineTo" xrefstyle="function" annotations="lineTo()">lineTo()</db:link></db:code> and <db:code><db:link xlink:href="qpainterpath.html#moveTo" xrefstyle="function" annotations="moveTo()">moveTo()</db:link></db:code>.</db:para>
      </db:section>
      <db:section>
         <db:title>QPainterPath QPainterPath::translated(qreal dx, qreal dy) const</db:title>
         <db:methodsynopsis>
            <db:type>QPainterPath</db:type>
            <db:methodname>translated</db:methodname>
            <db:methodparam>
               <db:type>qreal</db:type>
               <db:parameter>dx</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>qreal</db:type>
               <db:parameter>dy</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns a copy of the path that is translated by (<db:code role="argument">dx</db:code>, <db:code role="argument">dy</db:code>).</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#translate" xrefstyle="function" annotations="translate()">translate()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.6.</db:para>
      </db:section>
      <db:section>
         <db:title>QPainterPath QPainterPath::united(const QPainterPath &amp;p) const</db:title>
         <db:methodsynopsis>
            <db:type>QPainterPath</db:type>
            <db:methodname>united</db:methodname>
            <db:methodparam>
               <db:type>const QPainterPath &amp;</db:type>
               <db:parameter>p</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns a path which is the union of this path's fill area and <db:code role="argument">p</db:code>'s fill area.</db:para>
         <db:para>Set operations on paths will treat the paths as areas. Non-closed paths will be treated as implicitly closed. Bezier curves may be flattened to line segments due to numerical instability of doing bezier curve intersections.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#intersected" xrefstyle="function" annotations="intersected()">intersected()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#subtracted" xrefstyle="function" annotations="subtracted()">subtracted()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.3.</db:para>
      </db:section>
      <db:section>
         <db:title>QPointF QPainterPath::pointAtPercent(qreal t) const</db:title>
         <db:methodsynopsis>
            <db:type>QPointF</db:type>
            <db:methodname>pointAtPercent</db:methodname>
            <db:methodparam>
               <db:type>qreal</db:type>
               <db:parameter>t</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns the point at at the percentage <db:code role="argument">t</db:code> of the current path. The argument <db:code role="argument">t</db:code> has to be between 0 and 1.</db:para>
         <db:para>Note that similarly to other percent methods, the percentage measurement is not linear with regards to the length, if curves are present in the path. When curves are present the percentage argument is mapped to the t parameter of the Bezier equations.</db:para>
      </db:section>
      <db:section>
         <db:title>QPolygonF QPainterPath::toFillPolygon(const QMatrix &amp;matrix) const</db:title>
         <db:methodsynopsis>
            <db:type>QPolygonF</db:type>
            <db:methodname>toFillPolygon</db:methodname>
            <db:methodparam>
               <db:type>const QMatrix &amp;</db:type>
               <db:parameter>matrix</db:parameter>
               <db:initializer>QMatrix()</db:initializer>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>This is an overloaded function.</db:para>
      </db:section>
      <db:section>
         <db:title>QPolygonF QPainterPath::toFillPolygon(const QTransform &amp;matrix) const</db:title>
         <db:methodsynopsis>
            <db:type>QPolygonF</db:type>
            <db:methodname>toFillPolygon</db:methodname>
            <db:methodparam>
               <db:type>const QTransform &amp;</db:type>
               <db:parameter>matrix</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Converts the path into a polygon using the <db:code><db:link xlink:href="qtransform.html" xrefstyle="class" annotations="QTransform">QTransform</db:link></db:code>
            <db:code role="argument">matrix</db:code>, and returns the polygon.</db:para>
         <db:para>The polygon is created by first converting all subpaths to polygons, then using a rewinding technique to make sure that overlapping subpaths can be filled using the correct fill rule.</db:para>
         <db:para>Note that rewinding inserts addition lines in the polygon so the outline of the fill polygon does not match the outline of the path.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#toSubpathPolygons" xrefstyle="function" annotations="toSubpathPolygons()">toSubpathPolygons()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#toFillPolygons" xrefstyle="function" annotations="toFillPolygons()">toFillPolygons()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#qpainterpath-conversion" xrefstyle="class" annotations="QPainterPath#QPainterPath Conversion">QPainterPath Conversion</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QRectF QPainterPath::boundingRect() const</db:title>
         <db:methodsynopsis>
            <db:type>QRectF</db:type>
            <db:methodname>boundingRect</db:methodname>
            <db:void/>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns the bounding rectangle of this painter path as a rectangle with floating point precision.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#controlPointRect" xrefstyle="function" annotations="controlPointRect()">controlPointRect()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>QRectF QPainterPath::controlPointRect() const</db:title>
         <db:methodsynopsis>
            <db:type>QRectF</db:type>
            <db:methodname>controlPointRect</db:methodname>
            <db:void/>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns the rectangle containing all the points and control points in this path.</db:para>
         <db:para>This function is significantly faster to compute than the exact <db:code><db:link xlink:href="qpainterpath.html#boundingRect" xrefstyle="function" annotations="boundingRect()">boundingRect()</db:link></db:code>, and the returned rectangle is always a superset of the rectangle returned by <db:code><db:link xlink:href="qpainterpath.html#boundingRect" xrefstyle="function" annotations="boundingRect()">boundingRect()</db:link></db:code>.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#boundingRect" xrefstyle="function" annotations="boundingRect()">boundingRect()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>Qt::FillRule QPainterPath::fillRule() const</db:title>
         <db:methodsynopsis>
            <db:type>Qt::FillRule</db:type>
            <db:methodname>fillRule</db:methodname>
            <db:void/>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns the painter path's currently set fill rule.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#setFillRule" xrefstyle="function" annotations="setFillRule()">setFillRule()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QPainterPath::contains(const QPainterPath &amp;p) const</db:title>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>contains</db:methodname>
            <db:methodparam>
               <db:type>const QPainterPath &amp;</db:type>
               <db:parameter>p</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if the given path <db:code role="argument">p</db:code> is contained within the current path. Returns <db:code>false</db:code> if any edges of the current path and <db:code role="argument">p</db:code> intersect.</db:para>
         <db:para>Set operations on paths will treat the paths as areas. Non-closed paths will be treated as implicitly closed.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#intersects" xrefstyle="function" annotations="intersects()">intersects()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.3.</db:para>
      </db:section>
      <db:section>
         <db:title>bool QPainterPath::intersects(const QPainterPath &amp;p) const</db:title>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>intersects</db:methodname>
            <db:methodparam>
               <db:type>const QPainterPath &amp;</db:type>
               <db:parameter>p</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if the current path intersects at any point the given path <db:code role="argument">p</db:code>. Also returns <db:code>true</db:code> if the current path contains or is contained by any part of <db:code role="argument">p</db:code>.</db:para>
         <db:para>Set operations on paths will treat the paths as areas. Non-closed paths will be treated as implicitly closed.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#contains" xrefstyle="function" annotations="contains()">contains()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.3.</db:para>
      </db:section>
      <db:section>
         <db:title>bool QPainterPath::operator!=(const QPainterPath &amp;path) const</db:title>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>operator!=</db:methodname>
            <db:methodparam>
               <db:type>const QPainterPath &amp;</db:type>
               <db:parameter>path</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if this painter path differs from the given <db:code role="argument">path</db:code>.</db:para>
         <db:para>Note that comparing paths may involve a per element comparison which can be slow for complex paths.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-eq-eq" xrefstyle="function" annotations="operator==()">operator==()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>bool QPainterPath::operator==(const QPainterPath &amp;path) const</db:title>
         <db:methodsynopsis>
            <db:type>bool</db:type>
            <db:methodname>operator==</db:methodname>
            <db:methodparam>
               <db:type>const QPainterPath &amp;</db:type>
               <db:parameter>path</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns <db:code>true</db:code> if this painterpath is equal to the given <db:code role="argument">path</db:code>.</db:para>
         <db:para>Note that comparing paths may involve a per element comparison which can be slow for complex paths.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#operator-not-eq" xrefstyle="function" annotations="operator!=()">operator!=()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>qreal QPainterPath::angleAtPercent(qreal t) const</db:title>
         <db:methodsynopsis>
            <db:type>qreal</db:type>
            <db:methodname>angleAtPercent</db:methodname>
            <db:methodparam>
               <db:type>qreal</db:type>
               <db:parameter>t</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns the angle of the path tangent at the percentage <db:code role="argument">t</db:code>. The argument <db:code role="argument">t</db:code> has to be between 0 and 1.</db:para>
         <db:para>Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.</db:para>
         <db:para>Note that similarly to the other percent methods, the percentage measurement is not linear with regards to the length if curves are present in the path. When curves are present the percentage argument is mapped to the t parameter of the Bezier equations.</db:para>
      </db:section>
      <db:section>
         <db:title>qreal QPainterPath::length() const</db:title>
         <db:methodsynopsis>
            <db:type>qreal</db:type>
            <db:methodname>length</db:methodname>
            <db:void/>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns the length of the current path.</db:para>
      </db:section>
      <db:section>
         <db:title>qreal QPainterPath::percentAtLength(qreal len) const</db:title>
         <db:methodsynopsis>
            <db:type>qreal</db:type>
            <db:methodname>percentAtLength</db:methodname>
            <db:methodparam>
               <db:type>qreal</db:type>
               <db:parameter>len</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns percentage of the whole path at the specified length <db:code role="argument">len</db:code>.</db:para>
         <db:para>Note that similarly to other percent methods, the percentage measurement is not linear with regards to the length, if curves are present in the path. When curves are present the percentage argument is mapped to the t parameter of the Bezier equations.</db:para>
      </db:section>
      <db:section>
         <db:title>qreal QPainterPath::slopeAtPercent(qreal t) const</db:title>
         <db:methodsynopsis>
            <db:type>qreal</db:type>
            <db:methodname>slopeAtPercent</db:methodname>
            <db:methodparam>
               <db:type>qreal</db:type>
               <db:parameter>t</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Returns the slope of the path at the percentage <db:code role="argument">t</db:code>. The argument <db:code role="argument">t</db:code> has to be between 0 and 1.</db:para>
         <db:para>Note that similarly to other percent methods, the percentage measurement is not linear with regards to the length, if curves are present in the path. When curves are present the percentage argument is mapped to the t parameter of the Bezier equations.</db:para>
      </db:section>
      <db:section>
         <db:title>void QPainterPath::addPolygon(const QPolygonF &amp;polygon)</db:title>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>addPolygon</db:methodname>
            <db:methodparam>
               <db:type>const QPolygonF &amp;</db:type>
               <db:parameter>polygon</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Adds the given <db:code role="argument">polygon</db:code> to the path as an (unclosed) subpath.</db:para>
         <db:para>Note that the current position after the polygon has been added, is the last point in <db:code role="argument">polygon</db:code>. To draw a line back to the first point, use the <db:code><db:link xlink:href="qpainterpath.html#closeSubpath" xrefstyle="function" annotations="closeSubpath()">closeSubpath()</db:link></db:code> function.</db:para>
         <db:informaltable>
            <db:tr>
               <db:td>
                  <db:para>
                     <db:inlinemediaobject>
                        <db:imageobject>
                           <db:imagedata fileref="images/qpainterpath-addpolygon.png"/>
                        </db:imageobject>
                     </db:inlinemediaobject>
                  </db:para>
               </db:td>
               <db:td>
                  <db:programlisting>/****************************************************************************&#xD;
**&#xD;
** Copyright (C) 2016 The Qt Company Ltd.&#xD;
** Contact: https://www.qt.io/licensing/&#xD;
**&#xD;
** This file is part of the documentation of the Qt Toolkit.&#xD;
**&#xD;
** $QT_BEGIN_LICENSE:BSD$&#xD;
** Commercial License Usage&#xD;
** Licensees holding valid commercial Qt licenses may use this file in&#xD;
** accordance with the commercial license agreement provided with the&#xD;
** Software or, alternatively, in accordance with the terms contained in&#xD;
** a written agreement between you and The Qt Company. For licensing terms&#xD;
** and conditions see https://www.qt.io/terms-conditions. For further&#xD;
** information use the contact form at https://www.qt.io/contact-us.&#xD;
**&#xD;
** BSD License Usage&#xD;
** Alternatively, you may use this file under the terms of the BSD license&#xD;
** as follows:&#xD;
**&#xD;
** "Redistribution and use in source and binary forms, with or without&#xD;
** modification, are permitted provided that the following conditions are&#xD;
** met:&#xD;
**   * Redistributions of source code must retain the above copyright&#xD;
**     notice, this list of conditions and the following disclaimer.&#xD;
**   * Redistributions in binary form must reproduce the above copyright&#xD;
**     notice, this list of conditions and the following disclaimer in&#xD;
**     the documentation and/or other materials provided with the&#xD;
**     distribution.&#xD;
**   * Neither the name of The Qt Company Ltd nor the names of its&#xD;
**     contributors may be used to endorse or promote products derived&#xD;
**     from this software without specific prior written permission.&#xD;
**&#xD;
**&#xD;
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#xD;
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#xD;
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR&#xD;
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT&#xD;
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xD;
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xD;
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,&#xD;
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY&#xD;
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&#xD;
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE&#xD;
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."&#xD;
**&#xD;
** $QT_END_LICENSE$&#xD;
**&#xD;
****************************************************************************/&#xD;
&#xD;
//! [0]&#xD;
QPainterPath path;&#xD;
path.addRect(20, 20, 60, 60);&#xD;
&#xD;
path.moveTo(0, 0);&#xD;
path.cubicTo(99, 0,  50, 50,  99, 99);&#xD;
path.cubicTo(0, 99,  50, 50,  0, 0);&#xD;
&#xD;
QPainter painter(this);&#xD;
painter.fillRect(0, 0, 100, 100, Qt::white);&#xD;
painter.setPen(QPen(QColor(79, 106, 25), 1, Qt::SolidLine,&#xD;
                    Qt::FlatCap, Qt::MiterJoin));&#xD;
painter.setBrush(QColor(122, 163, 39));&#xD;
&#xD;
painter.drawPath(path);&#xD;
//! [0]&#xD;
&#xD;
&#xD;
//! [1]&#xD;
QLinearGradient myGradient;&#xD;
QPen myPen;&#xD;
&#xD;
QPainterPath myPath;&#xD;
myPath.cubicTo(c1, c2, endPoint);&#xD;
&#xD;
QPainter painter(this);&#xD;
painter.setBrush(myGradient);&#xD;
painter.setPen(myPen);&#xD;
painter.drawPath(myPath);&#xD;
//! [1]&#xD;
&#xD;
&#xD;
//! [2]&#xD;
QLinearGradient myGradient;&#xD;
QPen myPen;&#xD;
&#xD;
QPointF center, startPoint;&#xD;
&#xD;
QPainterPath myPath;&#xD;
myPath.moveTo(center);&#xD;
myPath.arcTo(boundingRect, startAngle,&#xD;
             sweepLength);&#xD;
&#xD;
QPainter painter(this);&#xD;
painter.setBrush(myGradient);&#xD;
painter.setPen(myPen);&#xD;
painter.drawPath(myPath);&#xD;
//! [2]&#xD;
&#xD;
&#xD;
//! [3]&#xD;
QLinearGradient myGradient;&#xD;
QPen myPen;&#xD;
QRectF myRectangle;&#xD;
&#xD;
QPainterPath myPath;&#xD;
myPath.addRect(myRectangle);&#xD;
&#xD;
QPainter painter(this);&#xD;
painter.setBrush(myGradient);&#xD;
painter.setPen(myPen);&#xD;
painter.drawPath(myPath);&#xD;
//! [3]&#xD;
&#xD;
&#xD;
//! [4]&#xD;
QLinearGradient myGradient;&#xD;
QPen myPen;&#xD;
QPolygonF myPolygon;&#xD;
&#xD;
QPainterPath myPath;&#xD;
myPath.addPolygon(myPolygon);&#xD;
&#xD;
QPainter painter(this);&#xD;
painter.setBrush(myGradient);&#xD;
painter.setPen(myPen);&#xD;
painter.drawPath(myPath);&#xD;
//! [4]&#xD;
&#xD;
&#xD;
//! [5]&#xD;
QLinearGradient myGradient;&#xD;
QPen myPen;&#xD;
QRectF boundingRectangle;&#xD;
&#xD;
QPainterPath myPath;&#xD;
myPath.addEllipse(boundingRectangle);&#xD;
&#xD;
QPainter painter(this);&#xD;
painter.setBrush(myGradient);&#xD;
painter.setPen(myPen);&#xD;
painter.drawPath(myPath);&#xD;
//! [5]&#xD;
&#xD;
&#xD;
//! [6]&#xD;
QLinearGradient myGradient;&#xD;
QPen myPen;&#xD;
QFont myFont;&#xD;
QPointF baseline(x, y);&#xD;
&#xD;
QPainterPath myPath;&#xD;
myPath.addText(baseline, myFont, tr("Qt"));&#xD;
&#xD;
QPainter painter(this);&#xD;
painter.setBrush(myGradient);&#xD;
painter.setPen(myPen);&#xD;
painter.drawPath(myPath);&#xD;
//! [6]&#xD;
</db:programlisting>
               </db:td>
            </db:tr>
         </db:informaltable>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#lineTo" xrefstyle="function" annotations="lineTo()">lineTo()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#composing-a-qpainterpath" xrefstyle="class" annotations="QPainterPath#Composing a QPainterPath">Composing a QPainterPath</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QPainterPath::addRegion(const QRegion &amp;region)</db:title>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>addRegion</db:methodname>
            <db:methodparam>
               <db:type>const QRegion &amp;</db:type>
               <db:parameter>region</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Adds the given <db:code role="argument">region</db:code> to the path by adding each rectangle in the region as a separate closed subpath.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#addRect" xrefstyle="function" annotations="addRect()">addRect()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#composing-a-qpainterpath" xrefstyle="class" annotations="QPainterPath#Composing a QPainterPath">Composing a QPainterPath</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QPainterPath::addRoundedRect(const QRectF &amp;rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode)</db:title>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>addRoundedRect</db:methodname>
            <db:methodparam>
               <db:type>const QRectF &amp;</db:type>
               <db:parameter>rect</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>qreal</db:type>
               <db:parameter>xRadius</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>qreal</db:type>
               <db:parameter>yRadius</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>Qt::SizeMode</db:type>
               <db:parameter>mode</db:parameter>
               <db:initializer>Qt::AbsoluteSize</db:initializer>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Adds the given rectangle <db:code role="argument">rect</db:code> with rounded corners to the path.</db:para>
         <db:para>The <db:code role="argument">xRadius</db:code> and <db:code role="argument">yRadius</db:code> arguments specify the radii of the ellipses defining the corners of the rounded rectangle. When <db:code role="argument">mode</db:code> is <db:code><db:link xlink:href="qt.html#SizeMode-enum" xrefstyle="enum" annotations="Qt::RelativeSize">Qt::RelativeSize</db:link></db:code>, <db:code role="argument">xRadius</db:code> and <db:code role="argument">yRadius</db:code> are specified in percentage of half the rectangle's width and height respectively, and should be in the range 0.0 to 100.0.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#addRect" xrefstyle="function" annotations="addRect()">addRect()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.4.</db:para>
      </db:section>
      <db:section>
         <db:title>void QPainterPath::closeSubpath()</db:title>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>closeSubpath</db:methodname>
            <db:void/>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Closes the current subpath by drawing a line to the beginning of the subpath, automatically starting a new path. The current point of the new path is (0, 0).</db:para>
         <db:para>If the subpath does not contain any elements, this function does nothing.</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#moveTo" xrefstyle="function" annotations="moveTo()">moveTo()</db:link></db:code>
               </db:member>
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#composing-a-qpainterpath" xrefstyle="class" annotations="QPainterPath#Composing a QPainterPath">Composing a QPainterPath</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
      </db:section>
      <db:section>
         <db:title>void QPainterPath::translate(qreal dx, qreal dy)</db:title>
         <db:methodsynopsis>
            <db:void/>
            <db:methodname>translate</db:methodname>
            <db:methodparam>
               <db:type>qreal</db:type>
               <db:parameter>dx</db:parameter>
            </db:methodparam>
            <db:methodparam>
               <db:type>qreal</db:type>
               <db:parameter>dy</db:parameter>
            </db:methodparam>
            <db:modifier>public</db:modifier>
         </db:methodsynopsis>
         <db:para>Translates all elements in the path by (<db:code role="argument">dx</db:code>, <db:code role="argument">dy</db:code>).</db:para>
         <db:para>
            <db:emphasis role="bold">See Also:</db:emphasis>
            <db:simplelist type="vert">
               <db:member>
                  <db:code><db:link xlink:href="qpainterpath.html#translated" xrefstyle="function" annotations="translated()">translated()</db:link></db:code>
               </db:member>
            </db:simplelist>
         </db:para>
         <db:para>This property was introduced in Qt 4.6.</db:para>
      </db:section>
   </db:section>
</db:article>
