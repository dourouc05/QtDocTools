<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <page name="chattutorial" href="qtquickcontrols2-chattutorial-example.html" status="active" location="qtquickcontrols2-chattutorial.qdoc" filepath="C:/Qt/5.11.1/Src/qtquickcontrols2/examples/quickcontrols2/chattutorial/doc/src/qtquickcontrols2-chattutorial.qdoc" lineno="28" subtype="example" title="Qt Quick Controls 2 - Chat Tutorial" fulltitle="Qt Quick Controls 2 - Chat Tutorial" subtitle="" module="QtQuickControls2" groups="qtquickcontrols2-examples" brief="Tutorial about writing a basic chat client using Qt Quick Controls 2">
            <contents name="chapter-1-setting-up" title="Chapter 1: Setting Up" level="1"/>
            <contents name="main-cpp" title="main.cpp" level="2"/>
            <contents name="main-qml" title="main.qml" level="2"/>
            <contents name="the-project-file" title="The Project File" level="2"/>
            <contents name="chapter-2-lists" title="Chapter 2: Lists" level="1"/>
            <contents name="sizing-and-positioning" title="Sizing and Positioning" level="2"/>
            <contents name="model" title="Model" level="2"/>
            <contents name="delegate" title="Delegate" level="2"/>
            <contents name="chapter-3-navigation" title="Chapter 3: Navigation" level="1"/>
            <contents name="stackview" title="StackView" level="2"/>
            <contents name="chapter-4-models" title="Chapter 4: Models" level="1"/>
            <contents name="qsqlquerymodel" title="QSqlQueryModel" level="2"/>
            <contents name="qsqltablemodel" title="QSqlTableModel" level="2"/>
            <contents name="connecting-to-the-database-and-registering-types-with-qml" title="Connecting to the Database and Registering Types With QML" level="2"/>
            <contents name="using-the-models-in-qml" title="Using the Models in QML" level="2"/>
            <contents name="chapter-5-styling" title="Chapter 5: Styling" level="1"/>
            <contents name="summary" title="Summary" level="1"/>
            <description path="C:/Qt/5.11.1/Src/qtquickcontrols2/examples/quickcontrols2/chattutorial/doc/src/qtquickcontrols2-chattutorial.qdoc" line="28" column="4">
                <brief>Tutorial about writing a basic chat client using Qt Quick Controls 2.</brief>
                <para>This tutorial shows how to write a basic chat application using Qt Quick Controls 2. It will also explain how to integrate an SQL database into a Qt application.</para>
                <section id="chapter-1-setting-up">
                    <heading level="1">Chapter 1: Setting Up</heading>
                    <para>When setting up a new project, it's easiest to use <link raw="Qt Creator Manual" href="http://doc.qt.io/qtcreator/index.html" type="page" page="Qt Creator Manual">Qt Creator</link>. For this project, we chose the <link raw="Qt Creator: Creating Qt Quick Projects" href="http://doc.qt.io/qtcreator/quick-projects.html" type="page" page="Qt Creator: Creating Qt Quick Projects">Qt Quick application</link> template, which creates a basic &quot;Hello World&quot; application with the following files:</para>
                    <list type="bullet">
                        <item>
                            <para>
                                <teletype type="highlighted">MainForm.ui.qml</teletype> - Defines the default UI</para>
                        </item>
                        <item>
                            <para>
                                <teletype type="highlighted">main.qml</teletype> - Embeds the default UI in a Window</para>
                        </item>
                        <item>
                            <para>
                                <teletype type="highlighted">qml.qrc</teletype> - Lists the <teletype type="highlighted">.qml</teletype> files that are built into the binary</para>
                        </item>
                        <item>
                            <para>
                                <teletype type="highlighted">main.cpp</teletype> - Loads <teletype type="highlighted">main.qml</teletype></para>
                        </item>
                        <item>
                            <para>
                                <teletype type="highlighted">chattutorial.pro</teletype> - Provides the qmake configuration</para>
                        </item>
                    </list>
                    <para>
                        <bold>Note:</bold> Delete the <teletype type="highlighted">MainForm.ui.qml</teletype> from the project as we will not use it in this tutorial.</para>
                </section>
                <section id="main-cpp">
                    <heading level="2">main.cpp</heading>
                    <para>The default code in <teletype type="highlighted">main.cpp</teletype> has two includes:</para>
                    <quotefromfile>chattutorial/chapter1-settingup/main.cpp</quotefromfile>
                    <skipto>include</skipto>
                    <printline>include</printline>
                    <printline>include</printline>
                    <para>The first gives us access to <link raw="QGuiApplication" href="qguiapplication.html" type="class">QGuiApplication</link>. All Qt applications require an application object, but the precise type depends on what the application does. <link raw="QCoreApplication" href="qcoreapplication.html" type="class">QCoreApplication</link> is sufficient for non-graphical applications. <link raw="QGuiApplication" href="qguiapplication.html" type="class">QGuiApplication</link> is sufficient for graphical applications that do not use <link raw="Qt Widgets" href="qtwidgets-index.html" type="page" page="Qt Widgets">Qt Widgets</link>, while <link raw="QApplication" href="qapplication.html" type="class">QApplication</link> is required for those that do.</para>
                    <para>The second include makes <link raw="QQmlApplicationEngine" href="qqmlapplicationengine.html" type="class">QQmlApplicationEngine</link> available, along with some useful functions required for making C++ types accessible from QML.</para>
                    <para>Within <teletype type="highlighted">main()</teletype>, we set up the application object and QML engine:</para>
                    <skipto>main</skipto>
                    <printuntil>}</printuntil>
                    <para>It begins with enabling <link raw="High DPI Displays" href="highdpi.html" type="page" page="High DPI Displays">high DPI scaling</link>, which is not part of the default code. It is necessary to do so before the application object is constructed.</para>
                    <para>After that's done, we construct the application object, passing any application arguments provided by the user.</para>
                    <para>Next, the QML engine is created. <link raw="QQmlApplicationEngine" href="qqmlapplicationengine.html" type="class">QQmlApplicationEngine</link> is a convenient wrapper over <link raw="QQmlEngine" href="qqmlengine.html" type="class">QQmlEngine</link>, providing the <link raw="QQmlApplicationEngine::load" href="qqmlapplicationengine.html#load" type="function">load()</link> function to easily load QML for an application. It also adds some convenience for using <link raw="Using File Selectors with Qt Quick Controls 2" href="qtquickcontrols2-fileselectors.html" type="page" page="Using File Selectors with Qt Quick Controls 2">file selectors</link>.</para>
                    <para>Once we've set up things in C++, we can move on to the user interface in QML.</para>
                </section>
                <section id="main-qml">
                    <heading level="2">main.qml</heading>
                    <para>Let's modify the default QML code to suit our needs.</para>
                    <quotefromfile>chattutorial/chapter1-settingup/main.qml</quotefromfile>
                    <skipto>import</skipto>
                    <printuntil>import QtQuick.Controls 2.1</printuntil>
                    <para>First, import the <link raw="Qt Quick" href="qtquick-index.html" type="page" page="Qt Quick">Qt Quick</link> module. This gives us access to graphical primitives such as <link raw="Item" href="qml-qtquick-item.html" type="">Item</link>, <link raw="Rectangle" href="qml-qtquick-rectangle.html" type="">Rectangle</link>, <link raw="Text" href="whatsnew50.html#text" type="page" page="What's New in Qt 5.0">Text</link>, and so on. For the full list of types, see the <link raw="Qt Quick QML Types" href="qtquick-qmlmodule.html" type="">Qt Quick QML Types</link> documentation.</para>
                    <para>Next, import the Qt Quick Controls 2 module. Amongst other things, this provides access to <link raw="ApplicationWindow" href="qml-qtquick-controls2-applicationwindow.html" type="">ApplicationWindow</link>, which will replace the existing root type, <teletype type="highlighted">Window</teletype>:</para>
                    <skipto>ApplicationWindow</skipto>
                    <printuntil>visible: true</printuntil>
                    <dots indent="4">...</dots>
                    <skipto>}</skipto>
                    <skipuntil>}</skipuntil>
                    <printuntil>}</printuntil>
                    <para>
                        <link raw="ApplicationWindow" href="qml-qtquick-controls2-applicationwindow.html" type="">ApplicationWindow</link> is a <link raw="Window" href="qml-qtquick-window-window.html" type="">Window</link> with some added convenience for creating a <link raw="ApplicationWindow::header" href="qml-qtquick-controls2-applicationwindow.html#header-attached-prop" type="">header</link> and a <link raw="ApplicationWindow::footer" href="qml-qtquick-controls2-applicationwindow.html#footer-attached-prop" type="">footer</link>. It also provides the foundation for <link raw="Popup" href="qml-qtquick-controls2-popup.html" type="">popups</link> and supports some basic styling, such as the background <link raw="Window::color" href="qml-qtquick-window-window.html#color-prop" type="">color</link>.</para>
                    <para>There are three properties that are almost always set when using <link raw="ApplicationWindow" href="qml-qtquick-controls2-applicationwindow.html" type="">ApplicationWindow</link>: <link raw="Window::width" href="qml-qtquick-window-window.html#width-prop" type="">width</link>, <link raw="Window::height" href="qml-qtquick-window-window.html#height-prop" type="">height</link>, and <link raw="Window::visible" href="qml-qtquick-window-window.html#visible-prop" type="">visible</link>. Once we've set these, we have a properly sized, empty window ready to be filled with content.</para>
                    <para>
                        <bold>Note:</bold> The <teletype type="highlighted">title</teletype> property from the default code is removed.</para>
                    <para>The first <italic>&quot;screen&quot;</italic> in our application will be a list of contacts. It would be nice to have some text at the top of each screen that describes its purpose. The header and footer properties of <link raw="ApplicationWindow" href="qml-qtquick-controls2-applicationwindow.html" type="">ApplicationWindow</link> could work in this situation. They have some characteristics that make them ideal for items that should be displayed on every screen of an application:</para>
                    <list type="bullet">
                        <item>
                            <para>They are anchored to the top and bottom of the window, respectively.</para>
                        </item>
                        <item>
                            <para>They fill the width of the window.</para>
                        </item>
                    </list>
                    <para>However, when the contents of the header and footer varies depending on which screen the user is viewing, it is much easier to use <link raw="Page" href="qml-qtquick-controls2-page.html" type="">Page</link>. For now, we'll just add one page, but in the next chapter, we'll demonstrate how to navigate between several pages.</para>
                    <quotefromfile>chattutorial/chapter1-settingup/main.qml</quotefromfile>
                    <skipto>Page</skipto>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <para>We replace the default <teletype type="highlighted">MainForm {...}</teletype> code block with a Page, which is sized to occupy all the space on the window using the <link raw="Item::anchors.fill" href="qml-qtquick-item.html#anchors.fill-prop" type="">anchors.fill</link> property.</para>
                    <para>Then, we assign a <link raw="Label" href="qml-qtquick-controls2-label.html" type="">Label</link> to its <link raw="Page::header" href="qml-qtquick-controls2-page.html#header-prop" type="">header</link> property. Label extends the primitive <link raw="Text" href="whatsnew50.html#text" type="page" page="What's New in Qt 5.0">Text</link> item from the Qt Quick module by adding <link raw="Styling Qt Quick Controls 2" href="qtquickcontrols2-styles.html" type="page" page="Styling Qt Quick Controls 2">styling</link> and <link raw="Control::font" href="qml-qtquick-controls2-control.html#font-prop" type="">font</link> inheritance. This means that a Label can look different depending on which style is in use, and can also propagate its pixel size to its children.</para>
                    <para>We want some distance between the top of the application window and the text, so we set the <link raw="Text::padding" href="qml-qtquick-text.html#padding-prop" type="">padding</link> property. This allocates extra space on each side of the label (within its bounds). We can also explicitly set the <link raw="Text::topPadding" href="qml-qtquick-text.html#topPadding-prop" type="">topPadding</link> and <link raw="Text::bottomPadding" href="qml-qtquick-text.html#bottomPadding-prop" type="">bottomPadding</link> properties instead.</para>
                    <para>We set the text of the label using the <teletype type="highlighted">qsTr()</teletype> function, which ensures that the text can be translated by <link raw="Writing Source Code for Translation" href="i18n-source-translation.html" type="page" page="Writing Source Code for Translation">Qt's translation system</link>. It's a good practice to follow for text that is visible to the end users of your application.</para>
                    <para>By default, text is vertically aligned to the top of its bounds, while the horizontal alignment depends on the natural direction of the text; for example, text that is read from left to right will be aligned to the left. If we used these defaults, our text would be at the top-left corner of the window. This is not desirable for a header, so we align the text to the center of its bounds, both horizontally and vertically.</para>
                </section>
                <section id="the-project-file">
                    <heading level="2">The Project File</heading>
                    <para>The <teletype type="highlighted">.pro</teletype> or <link raw="Creating Project Files" href="qmake-project-files.html" type="page" page="Creating Project Files">project</link> file contains all of the information needed by <link raw="qmake Manual" href="qmake-manual.html" type="page" page="qmake Manual">qmake</link> to generate a Makefile, which is then used to compile and link the application.</para>
                    <quotefromfile>chattutorial/chapter1-settingup/chapter1-settingup.pro</quotefromfile>
                    <printline>TEMPLATE</printline>
                    <para>The first line tells <teletype type="highlighted">qmake</teletype> which kind of project this is. We're building an application, so we use the <teletype type="highlighted">app</teletype> template.</para>
                    <printline>QT</printline>
                    <para>The next line declares the Qt libraries that we want to use from C++.</para>
                    <printline>CONFIG</printline>
                    <para>This line states that a C++11 compatible compiler is required to build the project.</para>
                    <printline>SOURCES</printline>
                    <para>The <teletype type="highlighted">SOURCES</teletype> variable lists all of the source files that should be compiled. A similar variable, <teletype type="highlighted">HEADERS</teletype>, is available for header files.</para>
                    <printline>RESOURCES</printline>
                    <para>The next line tells <teletype type="highlighted">qmake</teletype> that we have a collection of <link raw="The Qt Resource System" href="resources.html" type="page" page="The Qt Resource System">resources</link> that should be built into the executable.</para>
                    <printline>target.path</printline>
                    <para>This line replaces deployment settings that come with the default project file. It determines where the example is copied, on running &quot;<teletype type="highlighted">make install</teletype>&quot;.</para>
                    <para>Now we can build and run the application:</para>
                    <image href="images/qtquickcontrols2-chattutorial-chapter1.png"/>
                    <generatedlist contents="examplefiles .*chapter1.*"/>
                </section>
                <section id="chapter-2-lists">
                    <heading level="1">Chapter 2: Lists</heading>
                    <para>In this chapter, we'll explain how to create a list of interactive items using <link raw="ListView" href="qml-qtquick-listview.html" type="">ListView</link> and <link raw="ItemDelegate" href="qml-qtquick-controls2-itemdelegate.html" type="">ItemDelegate</link>.</para>
                    <para>
                        <link raw="ListView" href="qml-qtquick-listview.html" type="">ListView</link> comes from the Qt Quick module, and displays a list of items populated from a <link raw="Models and Views in Qt Quick" href="qtquick-modelviewsdata-modelview.html" type="page" page="Models and Views in Qt Quick">model</link>. <link raw="ItemDelegate" href="qml-qtquick-controls2-itemdelegate.html" type="">ItemDelegate</link> comes from the Qt Quick Controls 2 module, and provides a standard view item for use in views and controls such as <link raw="ListView" href="qml-qtquick-listview.html" type="">ListView</link> and <link raw="ComboBox" href="qml-qtquick-controls2-combobox.html" type="">ComboBox</link>. For example, each <link raw="ItemDelegate" href="qml-qtquick-controls2-itemdelegate.html" type="">ItemDelegate</link> can display text, be checked on and off, and react to mouse clicks.</para>
                    <para>Here is our <link raw="ListView" href="qml-qtquick-listview.html" type="">ListView</link>:</para>
                    <quotefromfile>chattutorial/chapter2-lists/main.qml</quotefromfile>
                    <dots indent="8">...</dots>
                    <codeline> </codeline>
                    <skipto>ListView</skipto>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <codeline> </codeline>
                    <dots indent="8">...</dots>
                </section>
                <section id="sizing-and-positioning">
                    <heading level="2">Sizing and Positioning</heading>
                    <para>The first thing we do is set a size for the view. It should fill the available space on the page, so we use <link raw="Item::anchors.fill" href="qml-qtquick-item.html#anchors.fill-prop" type="">anchors.fill</link>. Note that Page ensures that its header and footer have enough of their own space reserved, so the view in this case will sit below the header, for example.</para>
                    <para>Next, we set <link raw="Flickable::leftMargin" href="qml-qtquick-flickable.html#leftMargin-prop" type="">margins</link> around the <link raw="ListView" href="qml-qtquick-listview.html" type="">ListView</link> to put some distance between it and the edges of the window. The margin properties reserve space within the bounds of the view, which means that the empty areas can still be <italic>&quot;flicked&quot;</italic> by the user.</para>
                    <para>The items should be nicely spaced out within the view, so the <link raw="ListView::spacing" href="qml-qtquick-listview.html#spacing-prop" type="">spacing</link> property is set to <teletype type="highlighted">20</teletype>.</para>
                </section>
                <section id="model">
                    <heading level="2">Model</heading>
                    <para>In order to quickly populate the view with some items, we've used a JavaScript array as the model. One of the greatest strengths of QML is its ability to make prototyping an application extremely quick, and this is an example of that. It's also possible to simply assign a <link raw="Integers as Models" href="qtquick-modelviewsdata-modelview.html#integers-as-models" type="page" page="Models and Views in Qt Quick">number</link> to the model property to indicate how many items you need. For example, if you assign <teletype type="highlighted">10</teletype> to the <teletype type="highlighted">model</teletype> property, each item's display text will be a number from <teletype type="highlighted">0</teletype> to <teletype type="highlighted">9</teletype>.</para>
                    <para>However, once the application gets past the prototype stage, it quickly becomes necessary to use some real data. For this, it's best to use a proper C++ model by <link raw="QAbstractItemModel" href="qabstractitemmodel.html" type="class">subclassing QAbstractItemModel</link>.</para>
                </section>
                <section id="delegate">
                    <heading level="2">Delegate</heading>
                    <para>On to the <link raw="ListView::delegate" href="qml-qtquick-listview.html#delegate-prop" type="">delegate</link>. We assign the corresponding text from the model to the <link raw="AbstractButton::text" href="qml-qtquick-controls2-abstractbutton.html#text-prop" type="">text</link> property of <link raw="ItemDelegate" href="qml-qtquick-controls2-itemdelegate.html" type="">ItemDelegate</link>. The exact manner in which the data from the model is made available to each delegate depends on the type of model used. See <link raw="Models and Views in Qt Quick" href="qtquick-modelviewsdata-modelview.html" type="page" page="Models and Views in Qt Quick">Models and Views in Qt Quick</link> for more information.</para>
                    <para>In our application, the width of each item in the view should be the same as the width of the view. This ensures that the user has a lot of room with which to select a contact from the list, which is an important factor on devices with small touch screens, like mobile phones. However, the width of the view includes our <teletype type="highlighted">48</teletype> pixel margins, so we must account for that in our assignment to the width property.</para>
                    <para>Next, we define an <link raw="Image" href="qtquick-imageelements-example.html#image" type="page" page="Qt Quick Examples - Image Elements">Image</link>. This will display a picture of the user's contact. The image will be <teletype type="highlighted">40</teletype> pixels wide and <teletype type="highlighted">40</teletype> pixels high. We'll base the height of the delegate on the image's height, so that we don't have any empty vertical space.</para>
                    <image href="images/qtquickcontrols2-chattutorial-chapter2.png"/>
                    <generatedlist contents="examplefiles .*(chapter2|shared).*"/>
                    <generatedlist contents="exampleimages .*shared.*(Einstein|Hemingway|Gude).png"/>
                </section>
                <section id="chapter-3-navigation">
                    <heading level="1">Chapter 3: Navigation</heading>
                    <para>In this chapter, you'll learn how to use <link raw="StackView" href="qtquickcontrols2-chattutorial-example.html#stackview" type="page" page="Qt Quick Controls 2 - Chat Tutorial">StackView</link> to navigate between pages in an application. Here's the revised <teletype type="highlighted">main.qml</teletype>:</para>
                    <quotefromfile>chattutorial/chapter3-navigation/main.qml</quotefromfile>
                    <skipto>import</skipto>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                </section>
                <section id="stackview">
                    <heading level="2">StackView</heading>
                    <para>As its name suggests, <link raw="StackView" href="qtquickcontrols2-chattutorial-example.html#stackview" type="page" page="Qt Quick Controls 2 - Chat Tutorial">StackView</link> provides stack-based navigation. The last item to be <italic>&quot;pushed&quot;</italic> onto the stack is the first one to be removed, and the top-most item is always the one that is visible.</para>
                    <para>In the same manner as we did with Page, we tell the <link raw="StackView" href="qtquickcontrols2-chattutorial-example.html#stackview" type="page" page="Qt Quick Controls 2 - Chat Tutorial">StackView</link> to fill the application window. The only thing left to do after that is to give it an item to display, via <link raw="StackView::initialItem" href="qml-qtquick-controls2-stackview.html#initialItem-prop" type="">initialItem</link>. <link raw="StackView" href="qtquickcontrols2-chattutorial-example.html#stackview" type="page" page="Qt Quick Controls 2 - Chat Tutorial">StackView</link> accepts <link raw="Item" href="qml-qtquick-item.html" type="">items</link>, <link raw="Component" href="qml-qtqml-component.html" type="">components</link> and <link raw="url" href="qml-url.html" type="">URLs</link>.</para>
                    <para>You'll notice that we moved the code for the contact list into <teletype type="highlighted">ContactPage.qml</teletype>. It's a good idea to do this as soon as you have a general idea of which screens your application will contain. Doing so not only makes your code easier to read, but ensures that items are only instantiated from a given component when completely necessary, reducing memory usage.</para>
                    <para>
                        <bold>Note:</bold> Qt Creator provides several convenient refactoring options for QML, one of which allows you to move a block of code into a separate file (<teletype type="highlighted">Alt + Enter &gt; Move Component into Separate File</teletype>).</para>
                    <para>Another thing to consider when using <link raw="ListView" href="qml-qtquick-listview.html" type="">ListView</link> is whether to refer to it by <teletype type="highlighted">id</teletype>, or use the attached <link raw="ListView::view" href="qml-qtquick-listview.html#view-attached-prop" type="">ListView.view</link> property. The best approach depends on a few different factors. Giving the view an id will result in shorter and more efficient binding expressions, as the attached property has a very small amount of overhead. However, if you plan on reusing the delegate in other views, it is better to use the attached properties to avoid tying the delegate to a particular view. For example, using the attached properties, the <teletype type="highlighted">width</teletype> assignment in our delegate becomes:</para>
                    <code>width: ListView.view.width - ListView.view.leftMargin - ListView.view.rightMargin</code>
                    <para>In chapter 2, we added a <link raw="ListView" href="qml-qtquick-listview.html" type="">ListView</link> below the header. If you run the application for that chapter, you'll see that the contents of the view can be scrolled over the top of the header:</para>
                    <image href="images/qtquickcontrols2-chattutorial-chapter2-listview-header.gif"/>
                    <para>This is not that nice, especially if the text in the delegates is long enough that it reaches the text in the header. What we ideally want to do is to have a solid block of color under the header text, but <italic>above</italic> the view. This ensures that the listview contents can't visually interfere with the header contents. Note that it's also possible to achieve this by setting the <link raw="Item::clip" href="qml-qtquick-item.html#clip-prop" type="">clip</link> property of the view to <teletype type="highlighted">true</teletype>, but doing so <link raw="Clipping" href="qpainter.html#clipping" type="class">can affect performance</link>.</para>
                    <para>
                        <link raw="ToolBar" href="qml-qtquick-controls2-toolbar.html" type="">ToolBar</link> is the right tool for this job. It is a container of both application-wide and context-sensitive actions and controls, such as navigation buttons and search fields. Best of all, it has a background color that, as usual, comes from the application style. Here it is in action:</para>
                    <quotefromfile>chattutorial/chapter3-navigation/ContactPage.qml</quotefromfile>
                    <skipto>header</skipto>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <image href="images/qtquickcontrols2-chattutorial-chapter3-listview-header.gif"/>
                    <para>It has no layout of its own, so we center the label within it ourselves.</para>
                    <para>The rest of the code is the same as it was in chapter 2, except that we've taken advantage of the <link raw="AbstractButton::clicked" href="qml-qtquick-controls2-abstractbutton.html#clicked-signal" type="">clicked</link> signal to push the next page onto the stackview:</para>
                    <skipto>onClicked</skipto>
                    <printline>onClicked</printline>
                    <para>When pushing a <link raw="Component" href="qml-qtqml-component.html" type="">Component</link> or <link raw="url" href="qml-url.html" type="">url</link> onto <link raw="StackView" href="qtquickcontrols2-chattutorial-example.html#stackview" type="page" page="Qt Quick Controls 2 - Chat Tutorial">StackView</link>, it's often necessary to initialize the (eventually) instantiated item with some variables. <link raw="StackView" href="qtquickcontrols2-chattutorial-example.html#stackview" type="page" page="Qt Quick Controls 2 - Chat Tutorial">StackView</link>'s <link raw="StackView::push" href="qml-qtquick-controls2-stackview.html#push-method" type="">push()</link> function accounts for this, by taking a JavaScript object as the second argument. We use this to provide the next page with a contact's name, which it then uses to display the relevant conversation. Note the <teletype type="highlighted">root.StackView.view.push</teletype> syntax; this is necessary because of how <link raw="A Note About Accessing Attached Properties and Signal Handlers" href="qtqml-syntax-objectattributes.html#a-note-about-accessing-attached-properties-and-signal-handlers" type="page" page="QML Object Attributes">attached properties</link> work.</para>
                    <para>Let's step through <teletype type="highlighted">ConversationPage.qml</teletype>, beginning with the imports:</para>
                    <quotefromfile>chattutorial/chapter3-navigation/ConversationPage.qml</quotefromfile>
                    <skipto>import</skipto>
                    <printline>import</printline>
                    <printline>import</printline>
                    <printline>import</printline>
                    <para>These are the same as before, except for the addition of the <teletype type="highlighted">QtQuick.Layouts</teletype> import, which we'll cover shortly.</para>
                    <skipto>Page</skipto>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <dots indent="4">...</dots>
                    <para>The root item of this component is another Page, which has a custom property called <teletype type="highlighted">inConversationWith</teletype>. For now, this property will simply determine what the label in the header displays. Later on, we'll use it in the SQL query that populates the list of messages in the conversation.</para>
                    <para>To allow the user to go back to the Contact page, we add a <link raw="ToolButton" href="qml-qtquick-controls2-toolbutton.html" type="">ToolButton</link> that calls <link raw="StackView::pop" href="qml-qtquick-controls2-stackview.html#pop-method" type="">pop()</link> when clicked. A <link raw="ToolButton" href="qml-qtquick-controls2-toolbutton.html" type="">ToolButton</link> is functionally similar to <link raw="Button" href="qml-qtquick-controls2-button.html" type="">Button</link>, but provides a look that is more suitable within a <link raw="ToolBar" href="qml-qtquick-controls2-toolbar.html" type="">ToolBar</link>.</para>
                    <para>There are two ways of laying out items in QML: <link raw="Item Positioners" href="qtquick-positioning-layouts.html" type="page" page="Item Positioners">Item Positioners</link> and <link raw="Qt Quick Layouts" href="qtquicklayouts-index.html" type="page" page="Qt Quick Layouts">Qt Quick Layouts</link>. Item positioners (<link raw="Row" href="qtquick-positioning-layouts.html#row" type="page" page="Item Positioners">Row</link>, <link raw="Column" href="qtquick-positioning-layouts.html#column" type="page" page="Item Positioners">Column</link>, and so on) are useful for situations where the size of items is known or fixed, and all that is required is to neatly position them in a certain formation. The layouts in Qt Quick Layouts can both position and resize items, making them well suited for resizable user interfaces. Below, we use <link raw="ColumnLayout" href="qml-qtquick-layouts-columnlayout.html" type="">ColumnLayout</link> to vertically lay out a <link raw="ListView" href="qml-qtquick-listview.html" type="">ListView</link> and a <link raw="Pane" href="qml-qtquick-controls2-pane.html" type="">Pane</link>:</para>
                    <skipto>ColumnLayout</skipto>
                    <printto>Layout.margins</printto>
                    <codeline> </codeline>
                    <dots indent="12">...</dots>
                    <codeline> </codeline>
                    <skipuntil>ScrollBar</skipuntil>
                    <printline>}</printline>
                    <codeline> </codeline>
                    <dots indent="8">...</dots>
                    <codeline> </codeline>
                    <printuntil>Layout.fillWidth: true</printuntil>
                    <dots indent="12">...</dots>
                    <skipuntil>}</skipuntil>
                    <skipuntil>}</skipuntil>
                    <skipuntil>}</skipuntil>
                    <skipuntil>}</skipuntil>
                    <printline>}</printline>
                    <para>Pane is basically a rectangle whose color comes from the application's style. It is similar to <link raw="Frame" href="qml-qtquick-controls2-frame.html" type="">Frame</link>, with the only difference being that it has no stroke around its border.</para>
                    <para>Items that are direct children of a layout have various <link raw="Layout" href="qml-qtquick-layouts-layout.html" type="">attached properties</link> available to them. We use <link raw="Layout::fillWidth" href="qml-qtquick-layouts-layout.html#fillWidth-attached-prop" type="">Layout.fillWidth</link> and <link raw="Layout::fillHeight" href="qml-qtquick-layouts-layout.html#fillHeight-attached-prop" type="">Layout.fillHeight</link> on the <link raw="ListView" href="qml-qtquick-listview.html" type="">ListView</link> to ensure that it takes as much space within the <link raw="ColumnLayout" href="qml-qtquick-layouts-columnlayout.html" type="">ColumnLayout</link> as it can. The same is done for the Pane. As <link raw="ColumnLayout" href="qml-qtquick-layouts-columnlayout.html" type="">ColumnLayout</link> is a vertical layout, there aren't any items to the left or right of each child, so this will result in each item consuming the entire width of the layout.</para>
                    <para>On the other hand, the <link raw="Layout::fillHeight" href="qml-qtquick-layouts-layout.html#fillHeight-attached-prop" type="">Layout.fillHeight</link> statement in the <link raw="ListView" href="qml-qtquick-listview.html" type="">ListView</link> will enable it to occupy the remaining space that is left after accommodating the Pane.</para>
                    <para>Let's look at the listview in detail:</para>
                    <quotefromfile>chattutorial/chapter3-navigation/ConversationPage.qml</quotefromfile>
                    <skipto>ListView</skipto>
                    <printuntil>ScrollBar</printuntil>
                    <printuntil>}</printuntil>
                    <para>After filling the width and height of its parent, we also set some margins on the view. This gives us a nice alignment with the placeholder text in the &quot;compose message&quot; field:</para>
                    <image href="images/qtquickcontrols2-chattutorial-chapter3-view-margins.png"/>
                    <para>Next, we set <link raw="ListView::displayMarginBeginning" href="qml-qtquick-listview.html#displayMarginBeginning-prop" type="">displayMarginBeginning</link> and <link raw="ListView::displayMarginEnd" href="qml-qtquick-listview.html#displayMarginEnd-prop" type="">displayMarginEnd</link>. These properties ensure that the delegates outside the bounds of the view do not disappear while scrolling at the edges of the view. It's easiest to understand this by commenting out the properties and seeing what happens when scrolling the view.</para>
                    <para>We then flip the vertical direction of the view, so that first items are at the bottom. The delegates are spaced out by 12 pixels, and a <italic>&quot;dummy&quot;</italic> model is assigned for testing purposes, until we implement the real model in chapter 4.</para>
                    <para>Within the delegate, we declare a <link raw="Row" href="qtquick-positioning-layouts.html#row" type="page" page="Item Positioners">Row</link> as the root item, as we want the avatar to be followed by the message contents, as shown in the image above.</para>
                    <para>Messages sent by the user should be distinguished from those sent by a contact. For now, we set a dummy property <teletype type="highlighted">sentByMe</teletype>, which simply uses the index of the delegate to alternate between different authors. Using this property, we distinguish between different authors in three ways:</para>
                    <list type="bullet">
                        <item>
                            <para>Messages sent by the user are aligned to the right side of the screen by setting <teletype type="highlighted">anchors.right</teletype> to <teletype type="highlighted">parent.right</teletype>.</para>
                        </item>
                        <item>
                            <para>By setting the <teletype type="highlighted">visible</teletype> property of the avatar (which is simply a Rectangle for now) based on <teletype type="highlighted">sentByMe</teletype>, we only show it if the message was sent by a contact.</para>
                        </item>
                        <item>
                            <para>We change the color of the rectangle depending on the author. Since we do not want to display dark text on a dark background, and vice versa, we also set the text color depending on who the author is. In chapter 5, we'll see how styling takes care of matters like this for us.</para>
                        </item>
                    </list>
                    <para>At the bottom of the screen, we place a <link raw="TextArea" href="qml-qtquick-controls2-textarea.html" type="">TextArea</link> item to allow multi-line text input, and a button to send the message. We use Pane to cover the area under these two items, in the same way that we use <link raw="ToolBar" href="qml-qtquick-controls2-toolbar.html" type="">ToolBar</link> to prevent the contents of the listview from interfering with the page header:</para>
                    <skipto>Pane</skipto>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <para>The <link raw="TextArea" href="qml-qtquick-controls2-textarea.html" type="">TextArea</link> should fill the available width of the screen. We assign some placeholder text to provide a visual cue to the user as to where they should begin typing. The text within the input area is wrapped to ensure that it does not go outside of the screen.</para>
                    <para>Finally, the button is only enabled when there is actually a message to send.</para>
                    <image href="images/qtquickcontrols2-chattutorial-chapter3.gif"/>
                    <generatedlist contents="examplefiles .*(chapter3|shared).*"/>
                    <generatedlist contents="exampleimages .*shared.*(Einstein|Hemingway|Gude).png"/>
                </section>
                <section id="chapter-4-models">
                    <heading level="1">Chapter 4: Models</heading>
                    <para>In chapter 4, we'll take you through the process of creating both read-only and read-write SQL models in C++ and exposing them to QML to populate views.</para>
                </section>
                <section id="qsqlquerymodel">
                    <heading level="2">QSqlQueryModel</heading>
                    <para>In order to keep the tutorial simple, we've chosen to make the list of user contacts non-editable. <link raw="QSqlQueryModel" href="qtquickcontrols2-chattutorial-example.html#qsqlquerymodel" type="page" page="Qt Quick Controls 2 - Chat Tutorial">QSqlQueryModel</link> is the logical choice for this purpose, as it provides a read-only data model for SQL result sets.</para>
                    <para>Let's take a look at our <teletype type="highlighted">SqlContactModel</teletype> class that derives from <link raw="QSqlQueryModel" href="qtquickcontrols2-chattutorial-example.html#qsqlquerymodel" type="page" page="Qt Quick Controls 2 - Chat Tutorial">QSqlQueryModel</link>:</para>
                    <quotefromfile>chattutorial/chapter4-models/sqlcontactmodel.h</quotefromfile>
                    <skipto>#include</skipto>
                    <printuntil>};</printuntil>
                    <para>There's not much going on here, so let's move on to the <teletype type="highlighted">.cpp</teletype> file:</para>
                    <quotefromfile>chattutorial/chapter4-models/sqlcontactmodel.cpp</quotefromfile>
                    <skipto>#include</skipto>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <para>We include the header file of our class and those that we require from Qt. We then define a static function named <teletype type="highlighted">createTable()</teletype> that we'll use to create the SQL table (if it doesn't already exist), and then populate it with some dummy contacts.</para>
                    <para>The call to <link raw="QSqlDatabase::database" href="qsqldatabase.html#database" type="function">database()</link> might look a little bit confusing because we have not set up a specific database yet. If no connection name is passed to this function, it will return a <italic>&quot;default connection&quot;</italic>, whose creation we will cover soon.</para>
                    <skipto>SqlContactModel</skipto>
                    <printuntil>}</printuntil>
                    <para>In the constructor, we call <teletype type="highlighted">createTable()</teletype>. We then construct a query that will be used to populate the model. In this case, we are simply interested in all rows of the <teletype type="highlighted">Contacts</teletype> table.</para>
                </section>
                <section id="qsqltablemodel">
                    <heading level="2">QSqlTableModel</heading>
                    <para>
                        <teletype type="highlighted">SqlConversationModel</teletype> is more complex:</para>
                    <quotefromfile>chattutorial/chapter4-models/sqlconversationmodel.h</quotefromfile>
                    <skipto>#include</skipto>
                    <printuntil>};</printuntil>
                    <para>We use both the <teletype type="highlighted">Q_PROPERTY</teletype> and <teletype type="highlighted">Q_INVOKABLE</teletype> macros, and therefore we must let <link raw="Using the Meta-Object Compiler (moc)" href="moc.html" type="page" page="Using the Meta-Object Compiler (moc)">moc</link> know by using the <teletype type="highlighted">Q_OBJECT</teletype> macro.</para>
                    <para>The <teletype type="highlighted">recipient</teletype> property will be set from QML to let the model know which conversation it should retrieve messages for.</para>
                    <para>We override the <link raw="QSqlTableModel::data" href="qsqltablemodel.html#data" type="function">data()</link> and <link raw="QAbstractItemModel::roleNames()" href="qabstractitemmodel.html#roleNames" type="function">roleNames()</link> functions so that we can use our custom roles in QML.</para>
                    <para>We also define the <teletype type="highlighted">sendMessage()</teletype> function that we want to call from QML, hence the <teletype type="highlighted">Q_INVOKABLE</teletype> macro.</para>
                    <para>Let's take a look at the <teletype type="highlighted">.cpp</teletype> file:</para>
                    <quotefromfile>chattutorial/chapter4-models/sqlconversationmodel.cpp</quotefromfile>
                    <skipto>#include</skipto>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <para>This is very similar to <teletype type="highlighted">sqlcontactmodel.cpp</teletype>, with the exception that we are now operating on the <teletype type="highlighted">Conversations</teletype> table. We also define <teletype type="highlighted">conversationsTableName</teletype> as a static const variable, as we use it in a couple of places throughout the file.</para>
                    <skipto>SqlConversationModel</skipto>
                    <printuntil>}</printuntil>
                    <para>As with <teletype type="highlighted">SqlContactModel</teletype>, the first thing that we do in the constructor is create the table. We tell <link raw="QSqlTableModel" href="qtquickcontrols2-chattutorial-example.html#qsqltablemodel" type="page" page="Qt Quick Controls 2 - Chat Tutorial">QSqlTableModel</link> the name of the table we'll be using via the <link raw="QSqlTableModel::setTable" href="qsqltablemodel.html#setTable" type="function">setTable()</link> function. To ensure that the latest messages in the conversation are shown first, we sort the query results by the <teletype type="highlighted">timestamp</teletype> field in descending order. This goes hand in hand with setting <link raw="ListView" href="qml-qtquick-listview.html" type="">ListView</link>'s <link raw="ListView::verticalLayoutDirection" href="qml-qtquick-listview.html#verticalLayoutDirection-prop" type="">verticalLayoutDirection</link> property to <teletype type="highlighted">ListView.BottomToTop</teletype> (which we covered in chapter 3).</para>
                    <skipto>::recipient(</skipto>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <para>In <teletype type="highlighted">setRecipient()</teletype>, we set a filter over the results returned from the database.</para>
                    <skipto>::data(</skipto>
                    <printuntil>}</printuntil>
                    <para>The <teletype type="highlighted">data()</teletype> function falls back to <link raw="QSqlTableModel" href="qtquickcontrols2-chattutorial-example.html#qsqltablemodel" type="page" page="Qt Quick Controls 2 - Chat Tutorial">QSqlTableModel</link>'s implementation if the role is not a custom user role. If the role is a user role, we can subtract <link raw="Qt::UserRole" href="qt.html#ItemDataRole-enum" type="enum" enum="Qt::ItemDataRole">Qt::UserRole</link> from it to get the index of that field and then use that to find the value that we need to return.</para>
                    <skipto>::roleNames(</skipto>
                    <printuntil>}</printuntil>
                    <para>In <teletype type="highlighted">roleNames()</teletype>, we return a mapping of our custom role values to role names. This enables us to use these roles in QML. It can be useful to declare an enum to hold all of the role values, but since we don't refer to any specific value in code outside of this function, we don't bother.</para>
                    <skipto>::sendMessage(</skipto>
                    <printuntil>}</printuntil>
                    <para>The <teletype type="highlighted">sendMessage()</teletype> function uses the given <teletype type="highlighted">recipient</teletype> and a <teletype type="highlighted">message</teletype> to insert a new record into the database. Due to our usage of <link raw="QSqlTableModel::OnManualSubmit" href="qsqltablemodel.html#EditStrategy-enum" type="enum" enum="QSqlTableModel::EditStrategy">QSqlTableModel::OnManualSubmit</link>, we must manually call <link raw="QSqlTableModel::submitAll" href="qsqltablemodel.html#submitAll" type="function">submitAll()</link>.</para>
                </section>
                <section id="connecting-to-the-database-and-registering-types-with-qml">
                    <heading level="2">Connecting to the Database and Registering Types With QML</heading>
                    <para>Now that we've established the model classes, let's take a look at <teletype type="highlighted">main.cpp</teletype>:</para>
                    <quotefromfile>chattutorial/chapter4-models/main.cpp</quotefromfile>
                    <skipto>#include</skipto>
                    <printuntil>return app.exec();</printuntil>
                    <printuntil>}</printuntil>
                    <para>
                        <teletype type="highlighted">connectToDatabase()</teletype> creates the connection to the SQLite database, creating the actual file if it doesn't already exist.</para>
                    <para>Within <teletype type="highlighted">main()</teletype>, we call <link raw="qmlRegisterType" href="qqmlengine.html#qmlRegisterType" type="function">qmlRegisterType()</link> to register our models as types within QML.</para>
                </section>
                <section id="using-the-models-in-qml">
                    <heading level="2">Using the Models in QML</heading>
                    <para>Now that we have the models available as QML types, there are some minor changes to be done to <teletype type="highlighted">ContactPage.qml</teletype>. To be able to use the types, we must first import them using the URI we set in <teletype type="highlighted">main.cpp</teletype>:</para>
                    <quotefromfile>chattutorial/chapter4-models/ContactPage.qml</quotefromfile>
                    <skipto>import io.qt.examples.chattutorial 1.0</skipto>
                    <printline>import io.qt.examples.chattutorial 1.0</printline>
                    <para>We then replace the dummy model with the proper one:</para>
                    <skipto>model: SqlContactModel {}</skipto>
                    <printline>model: SqlContactModel {}</printline>
                    <para>Within the delegate, we use a different syntax for accessing the model data:</para>
                    <skipto>text: model.display</skipto>
                    <printline>text: model.display</printline>
                    <para>In <teletype type="highlighted">ConversationPage.qml</teletype>, we add the same <teletype type="highlighted">chattutorial</teletype> import, and replace the dummy model:</para>
                    <quotefromfile>chattutorial/chapter4-models/ConversationPage.qml</quotefromfile>
                    <skipto>model: SqlConversationModel {</skipto>
                    <printuntil>}</printuntil>
                    <para>Within the model, we set the <teletype type="highlighted">recipient</teletype> property to the name of the contact for which the page is being displayed.</para>
                    <para>The root delegate item changes from a Row to a Column, to accommodate the timestamp that we want to display below every message:</para>
                    <skipto>delegate: Column {</skipto>
                    <printuntil>Label {</printuntil>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <image href="images/qtquickcontrols2-chattutorial-chapter4-message-timestamp.png"/>
                    <para>Now that we have a proper model, we can use its <teletype type="highlighted">recipient</teletype> role in the expression for the <teletype type="highlighted">sentByMe</teletype> property.</para>
                    <para>The Rectangle that was used for the avatar has been converted into an Image. The image has its own implicit size, so we don't need to specify it explicitly. As before, we only show the avatar when the author isn't the user, except this time we set the <teletype type="highlighted">source</teletype> of the image to an empty URL instead of using the <teletype type="highlighted">visible</teletype> property.</para>
                    <para>We want each message background to be slightly wider (12 pixels each side) than its text. However, if it's too long, we want to limit its width to the edge of the listview, hence the usage of <teletype type="highlighted">Math.min()</teletype>. When the message wasn't sent by us, an avatar will always come before it, so we account for that by subtracting the width of the avatar and the row spacing.</para>
                    <para>For example, in the image above, the implicit width of the message text is the smaller value. However, in the image below, the message text is quite long, so the smaller value (the width of the view) is chosen, ensuring that the text stops at the opposite edge of the screen:</para>
                    <image href="images/qtquickcontrols2-chattutorial-chapter4-long-message.png"/>
                    <para>In order to display the timestamp for each message that we discussed earlier, we use a Label. The date and time are formatted with <link raw="QtQml::Qt::formatDateTime" href="qml-qtqml-qt.html#formatDateTime-method" type="">Qt.formatDateTime()</link>, using a custom format.</para>
                    <para>The <italic>&quot;send&quot;</italic> button must now react to being clicked:</para>
                    <skipto>Button</skipto>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <para>First, we call the invokable <teletype type="highlighted">sendMessage()</teletype> function of the model, which inserts a new row into the Conversations database table. Then, we clear the text field to make way for future input.</para>
                    <image href="images/qtquickcontrols2-chattutorial-chapter4.gif"/>
                    <generatedlist contents="examplefiles .*(chapter4|shared).*"/>
                    <generatedlist contents="exampleimages"/>
                </section>
                <section id="chapter-5-styling">
                    <heading level="1">Chapter 5: Styling</heading>
                    <para>Styles in Qt Quick Controls 2 are designed to work on any platform. In this chapter, we'll do some minor visual tweaks to make sure our application looks good when run with the <link raw="Default Style" href="qtquickcontrols2-default.html" type="page" page="Default Style">Default</link>, <link raw="Material Style" href="qtquickcontrols2-material.html" type="page" page="Material Style">Material</link>, and <link raw="Universal Style" href="qtquickcontrols2-universal.html" type="page" page="Universal Style">Universal</link> styles.</para>
                    <para>So far, we've just been testing the application with the Default style. If we run it with the <link raw="Material Style" href="qtquickcontrols2-material.html" type="page" page="Material Style">Material Style</link>, for example, we'll immediately see some issues. Here is the Contacts page:</para>
                    <image href="images/qtquickcontrols2-chattutorial-chapter5-contacts-material-test.png"/>
                    <para>The header text is black on a dark blue background, which is very difficult to read. The same thing occurs with the Conversations page:</para>
                    <image href="images/qtquickcontrols2-chattutorial-chapter5-conversations-material-test.png"/>
                    <para>The solution is to tell the toolbar that it should use the <italic>&quot;Dark&quot;</italic> theme, so that this information is propagated to its children, allowing them to switch their text color to something lighter. The simplest way of doing so is to import the Material style directly and use the Material attached property:</para>
                    <code>import QtQuick.Controls.Material 2.1

// ...

header: ToolBar {
    Material.theme: Material.Dark

    // ...
}</code>
                    <para>However, this brings with it a hard dependency to the Material style; the Material style plugin <italic>must</italic> be deployed with the application, even if the target device doesn't use it, otherwise the QML engine will fail to find the import.</para>
                    <para>Instead, it is better to rely on Qt Quick Controls 2's built-in support for <link raw="Using File Selectors with Qt Quick Controls 2" href="qtquickcontrols2-fileselectors.html" type="page" page="Using File Selectors with Qt Quick Controls 2">style-based file selectors</link>. To do this, we must move the <link raw="ToolBar" href="qml-qtquick-controls2-toolbar.html" type="">ToolBar</link> out into its own file. We'll call it <teletype type="highlighted">ChatToolBar.qml</teletype>. This will be the <italic>&quot;default&quot;</italic> version of the file, which means that it will be used when the <link raw="Default Style" href="qtquickcontrols2-default.html" type="page" page="Default Style">Default style</link> is in use. Here's the new file:</para>
                    <quotefromfile>chattutorial/chapter5-styling/ChatToolBar.qml</quotefromfile>
                    <skipto>import</skipto>
                    <printuntil>}</printuntil>
                    <para>As we only use the <link raw="ToolBar" href="qml-qtquick-controls2-toolbar.html" type="">ToolBar</link> type within this file, we only need the Qt Quick Controls 2 import. The code itself has not changed from how it was in <teletype type="highlighted">ContactPage.qml</teletype>, which is how it should be; for the default version of the file, nothing needs to be different.</para>
                    <para>Back in <teletype type="highlighted">ContactPage.qml</teletype>, we update the code to use the new type:</para>
                    <quotefromfile>chattutorial/chapter5-styling/ContactPage.qml</quotefromfile>
                    <skipto>ToolBar</skipto>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <para>Now we need to add the Material version of the toolbar. File selectors expect variants of a file to be in appropriately named directories that exist alongside the default version of the file. This means that we need to add a folder named &quot;+material&quot; in the same directory that ChatToolBar.qml is in: the root folder. The &quot;+&quot; is required by <link raw="QFileSelector" href="qfileselector.html" type="class">QFileSelector</link> as a way of ensuring that the selection feature is not accidentally triggered.</para>
                    <para>Here's <teletype type="highlighted">+material/ChatToolBar.qml</teletype>:</para>
                    <quotefromfile>chattutorial/chapter5-styling/+material/ChatToolBar.qml</quotefromfile>
                    <skipto>import</skipto>
                    <printuntil>}</printuntil>
                    <para>We'll make the same changes to <teletype type="highlighted">ConversationPage.qml</teletype>:</para>
                    <quotefromfile>chattutorial/chapter5-styling/ConversationPage.qml</quotefromfile>
                    <skipto>header: ChatToolBar</skipto>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <printuntil>}</printuntil>
                    <para>Now both pages look correct:</para>
                    <image href="images/qtquickcontrols2-chattutorial-chapter5-contacts-material.png"/>
                    <image href="images/qtquickcontrols2-chattutorial-chapter5-conversations-material.png"/>
                    <para>Let's try out the Universal style:</para>
                    <image href="images/qtquickcontrols2-chattutorial-chapter5-contacts-universal.png"/>
                    <image href="images/qtquickcontrols2-chattutorial-chapter5-conversations-universal.png"/>
                    <para>No issues there. For a relatively simple application such as this one, there should be very few adjustments necessary when switching styles.</para>
                    <para>Now let's try each style's dark theme. The Default style has no dark theme, as it would add a slight overhead to a style that is designed to be as performant as possible. We'll test out the Material style first, so add an entry to <teletype type="highlighted">qtquickcontrols2.conf</teletype> that tells it to use its dark theme:</para>
                    <code>[material]
Primary=Indigo
Accent=Indigo
Theme=Dark</code>
                    <para>Once this is done, build and run the application. This is what you should see:</para>
                    <image href="images/qtquickcontrols2-chattutorial-chapter5-contacts-material-dark.png"/>
                    <image href="images/qtquickcontrols2-chattutorial-chapter5-conversations-material-dark.png"/>
                    <para>Both pages look fine. Now add an entry for the Universal style:</para>
                    <code>[universal]
Theme=Dark</code>
                    <para>After building and running the application, you should see these results:</para>
                    <image href="images/qtquickcontrols2-chattutorial-chapter5-contacts-universal-dark.png"/>
                    <image href="images/qtquickcontrols2-chattutorial-chapter5-conversations-universal-dark.png"/>
                    <generatedlist contents="examplefiles .*(chapter5|shared).*"/>
                    <generatedlist contents="exampleimages"/>
                </section>
                <section id="summary">
                    <heading level="1">Summary</heading>
                    <para>In this tutorial, we've taken you through the following steps of writing a basic application using Qt Quick Controls 2:</para>
                    <list type="bullet">
                        <item>
                            <para>Creating a new project using Qt Creator.</para>
                        </item>
                        <item>
                            <para>Setting up a basic <link raw="ApplicationWindow" href="qml-qtquick-controls2-applicationwindow.html" type="">ApplicationWindow</link>.</para>
                        </item>
                        <item>
                            <para>Defining headers and footers with Page.</para>
                        </item>
                        <item>
                            <para>Displaying content in a <link raw="ListView" href="qml-qtquick-listview.html" type="">ListView</link>.</para>
                        </item>
                        <item>
                            <para>Refactoring components into their own files.</para>
                        </item>
                        <item>
                            <para>Navigating between screens with <link raw="StackView" href="qtquickcontrols2-chattutorial-example.html#stackview" type="page" page="Qt Quick Controls 2 - Chat Tutorial">StackView</link>.</para>
                        </item>
                        <item>
                            <para>Using layouts to allow an application to resize gracefully.</para>
                        </item>
                        <item>
                            <para>Implementing both custom read-only and writable models that integrate an SQL database into the application.</para>
                        </item>
                        <item>
                            <para>Integrating C++ with QML via <link raw="Q_PROPERTY" href="qobject.html#Q_PROPERTY" type="function">Q_PROPERTY</link>, <link raw="Q_INVOKABLE" href="qobject.html#Q_INVOKABLE" type="function">Q_INVOKABLE</link>, and <link raw="qmlRegisterType()" href="qqmlengine.html#qmlRegisterType-1" type="function">qmlRegisterType()</link>.</para>
                        </item>
                        <item>
                            <para>Testing and configuring multiple styles.</para>
                        </item>
                    </list>
                </section>
            </description>
            <page name="chattutorial/chapter1-settingup/main.qml" href="qtquickcontrols2-chattutorial-chapter1-settingup-main-qml.html" status="active" subtype="file" title="" fulltitle="main.qml Example File" subtitle="chattutorial/chapter1-settingup/main.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter2-lists/main.qml" href="qtquickcontrols2-chattutorial-chapter2-lists-main-qml.html" status="active" subtype="file" title="" fulltitle="main.qml Example File" subtitle="chattutorial/chapter2-lists/main.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter3-navigation/ContactPage.qml" href="qtquickcontrols2-chattutorial-chapter3-navigation-contactpage-qml.html" status="active" subtype="file" title="" fulltitle="ContactPage.qml Example File" subtitle="chattutorial/chapter3-navigation/ContactPage.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter3-navigation/ConversationPage.qml" href="qtquickcontrols2-chattutorial-chapter3-navigation-conversationpage-qml.html" status="active" subtype="file" title="" fulltitle="ConversationPage.qml Example File" subtitle="chattutorial/chapter3-navigation/ConversationPage.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter3-navigation/main.qml" href="qtquickcontrols2-chattutorial-chapter3-navigation-main-qml.html" status="active" subtype="file" title="" fulltitle="main.qml Example File" subtitle="chattutorial/chapter3-navigation/main.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter4-models/ContactPage.qml" href="qtquickcontrols2-chattutorial-chapter4-models-contactpage-qml.html" status="active" subtype="file" title="" fulltitle="ContactPage.qml Example File" subtitle="chattutorial/chapter4-models/ContactPage.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter4-models/ConversationPage.qml" href="qtquickcontrols2-chattutorial-chapter4-models-conversationpage-qml.html" status="active" subtype="file" title="" fulltitle="ConversationPage.qml Example File" subtitle="chattutorial/chapter4-models/ConversationPage.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter4-models/main.qml" href="qtquickcontrols2-chattutorial-chapter4-models-main-qml.html" status="active" subtype="file" title="" fulltitle="main.qml Example File" subtitle="chattutorial/chapter4-models/main.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter4-models/sqlcontactmodel.cpp" href="qtquickcontrols2-chattutorial-chapter4-models-sqlcontactmodel-cpp.html" status="active" subtype="file" title="" fulltitle="sqlcontactmodel.cpp Example File" subtitle="chattutorial/chapter4-models/sqlcontactmodel.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter4-models/sqlcontactmodel.h" href="qtquickcontrols2-chattutorial-chapter4-models-sqlcontactmodel-h.html" status="active" subtype="file" title="" fulltitle="sqlcontactmodel.h Example File" subtitle="chattutorial/chapter4-models/sqlcontactmodel.h">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter4-models/sqlconversationmodel.cpp" href="qtquickcontrols2-chattutorial-chapter4-models-sqlconversationmodel-cpp.html" status="active" subtype="file" title="" fulltitle="sqlconversationmodel.cpp Example File" subtitle="chattutorial/chapter4-models/sqlconversationmodel.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter4-models/sqlconversationmodel.h" href="qtquickcontrols2-chattutorial-chapter4-models-sqlconversationmodel-h.html" status="active" subtype="file" title="" fulltitle="sqlconversationmodel.h Example File" subtitle="chattutorial/chapter4-models/sqlconversationmodel.h">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter5-styling/ChatToolBar.qml" href="qtquickcontrols2-chattutorial-chapter5-styling-chattoolbar-qml.html" status="active" subtype="file" title="" fulltitle="ChatToolBar.qml Example File" subtitle="chattutorial/chapter5-styling/ChatToolBar.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter5-styling/ContactPage.qml" href="qtquickcontrols2-chattutorial-chapter5-styling-contactpage-qml.html" status="active" subtype="file" title="" fulltitle="ContactPage.qml Example File" subtitle="chattutorial/chapter5-styling/ContactPage.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter5-styling/ConversationPage.qml" href="qtquickcontrols2-chattutorial-chapter5-styling-conversationpage-qml.html" status="active" subtype="file" title="" fulltitle="ConversationPage.qml Example File" subtitle="chattutorial/chapter5-styling/ConversationPage.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter5-styling/main.qml" href="qtquickcontrols2-chattutorial-chapter5-styling-main-qml.html" status="active" subtype="file" title="" fulltitle="main.qml Example File" subtitle="chattutorial/chapter5-styling/main.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter5-styling/qtquickcontrols2.conf" href="qtquickcontrols2-chattutorial-chapter5-styling-qtquickcontrols2-conf.html" status="active" subtype="file" title="" fulltitle="qtquickcontrols2.conf Example File" subtitle="chattutorial/chapter5-styling/qtquickcontrols2.conf">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter5-styling/sqlcontactmodel.cpp" href="qtquickcontrols2-chattutorial-chapter5-styling-sqlcontactmodel-cpp.html" status="active" subtype="file" title="" fulltitle="sqlcontactmodel.cpp Example File" subtitle="chattutorial/chapter5-styling/sqlcontactmodel.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter5-styling/sqlcontactmodel.h" href="qtquickcontrols2-chattutorial-chapter5-styling-sqlcontactmodel-h.html" status="active" subtype="file" title="" fulltitle="sqlcontactmodel.h Example File" subtitle="chattutorial/chapter5-styling/sqlcontactmodel.h">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter5-styling/sqlconversationmodel.cpp" href="qtquickcontrols2-chattutorial-chapter5-styling-sqlconversationmodel-cpp.html" status="active" subtype="file" title="" fulltitle="sqlconversationmodel.cpp Example File" subtitle="chattutorial/chapter5-styling/sqlconversationmodel.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter5-styling/sqlconversationmodel.h" href="qtquickcontrols2-chattutorial-chapter5-styling-sqlconversationmodel-h.html" status="active" subtype="file" title="" fulltitle="sqlconversationmodel.h Example File" subtitle="chattutorial/chapter5-styling/sqlconversationmodel.h">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter5-styling/+material/ChatToolBar.qml" href="qtquickcontrols2-chattutorial-chapter5-styling-material-chattoolbar-qml.html" status="active" subtype="file" title="" fulltitle="ChatToolBar.qml Example File" subtitle="chattutorial/chapter5-styling/+material/ChatToolBar.qml">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter1-settingup/main.cpp" href="qtquickcontrols2-chattutorial-chapter1-settingup-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="chattutorial/chapter1-settingup/main.cpp">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chattutorial.pro" href="qtquickcontrols2-chattutorial-chattutorial-pro.html" status="active" subtype="file" title="" fulltitle="chattutorial.pro Example File" subtitle="chattutorial/chattutorial.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter1-settingup/chapter1-settingup.pro" href="qtquickcontrols2-chattutorial-chapter1-settingup-chapter1-settingup-pro.html" status="active" subtype="file" title="" fulltitle="chapter1-settingup.pro Example File" subtitle="chattutorial/chapter1-settingup/chapter1-settingup.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter1-settingup/qml.qrc" href="qtquickcontrols2-chattutorial-chapter1-settingup-qml-qrc.html" status="active" subtype="file" title="" fulltitle="qml.qrc Example File" subtitle="chattutorial/chapter1-settingup/qml.qrc">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter2-lists/chapter2-lists.pro" href="qtquickcontrols2-chattutorial-chapter2-lists-chapter2-lists-pro.html" status="active" subtype="file" title="" fulltitle="chapter2-lists.pro Example File" subtitle="chattutorial/chapter2-lists/chapter2-lists.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter2-lists/qml.qrc" href="qtquickcontrols2-chattutorial-chapter2-lists-qml-qrc.html" status="active" subtype="file" title="" fulltitle="qml.qrc Example File" subtitle="chattutorial/chapter2-lists/qml.qrc">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter3-navigation/chapter3-navigation.pro" href="qtquickcontrols2-chattutorial-chapter3-navigation-chapter3-navigation-pro.html" status="active" subtype="file" title="" fulltitle="chapter3-navigation.pro Example File" subtitle="chattutorial/chapter3-navigation/chapter3-navigation.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter3-navigation/qml.qrc" href="qtquickcontrols2-chattutorial-chapter3-navigation-qml-qrc.html" status="active" subtype="file" title="" fulltitle="qml.qrc Example File" subtitle="chattutorial/chapter3-navigation/qml.qrc">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter4-models/chapter4-models.pro" href="qtquickcontrols2-chattutorial-chapter4-models-chapter4-models-pro.html" status="active" subtype="file" title="" fulltitle="chapter4-models.pro Example File" subtitle="chattutorial/chapter4-models/chapter4-models.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter4-models/qml.qrc" href="qtquickcontrols2-chattutorial-chapter4-models-qml-qrc.html" status="active" subtype="file" title="" fulltitle="qml.qrc Example File" subtitle="chattutorial/chapter4-models/qml.qrc">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter5-styling/chapter5-styling.pro" href="qtquickcontrols2-chattutorial-chapter5-styling-chapter5-styling-pro.html" status="active" subtype="file" title="" fulltitle="chapter5-styling.pro Example File" subtitle="chattutorial/chapter5-styling/chapter5-styling.pro">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/chapter5-styling/qml.qrc" href="qtquickcontrols2-chattutorial-chapter5-styling-qml-qrc.html" status="active" subtype="file" title="" fulltitle="qml.qrc Example File" subtitle="chattutorial/chapter5-styling/qml.qrc">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/shared/shared.qrc" href="qtquickcontrols2-chattutorial-shared-shared-qrc.html" status="active" subtype="file" title="" fulltitle="shared.qrc Example File" subtitle="chattutorial/shared/shared.qrc">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/shared/Albert_Einstein.png" href="qtquickcontrols2-chattutorial-shared-albert-einstein-png.html" status="active" title="" fulltitle="Albert_Einstein.png Image File" subtitle="chattutorial/shared/Albert_Einstein.png">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/shared/Albert_Einstein@2x.png" href="qtquickcontrols2-chattutorial-shared-albert-einstein-2x-png.html" status="active" title="" fulltitle="Albert_Einstein@2x.png Image File" subtitle="chattutorial/shared/Albert_Einstein@2x.png">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/shared/Albert_Einstein@3x.png" href="qtquickcontrols2-chattutorial-shared-albert-einstein-3x-png.html" status="active" title="" fulltitle="Albert_Einstein@3x.png Image File" subtitle="chattutorial/shared/Albert_Einstein@3x.png">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/shared/Albert_Einstein@4x.png" href="qtquickcontrols2-chattutorial-shared-albert-einstein-4x-png.html" status="active" title="" fulltitle="Albert_Einstein@4x.png Image File" subtitle="chattutorial/shared/Albert_Einstein@4x.png">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/shared/Ernest_Hemingway.png" href="qtquickcontrols2-chattutorial-shared-ernest-hemingway-png.html" status="active" title="" fulltitle="Ernest_Hemingway.png Image File" subtitle="chattutorial/shared/Ernest_Hemingway.png">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/shared/Ernest_Hemingway@2x.png" href="qtquickcontrols2-chattutorial-shared-ernest-hemingway-2x-png.html" status="active" title="" fulltitle="Ernest_Hemingway@2x.png Image File" subtitle="chattutorial/shared/Ernest_Hemingway@2x.png">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/shared/Ernest_Hemingway@3x.png" href="qtquickcontrols2-chattutorial-shared-ernest-hemingway-3x-png.html" status="active" title="" fulltitle="Ernest_Hemingway@3x.png Image File" subtitle="chattutorial/shared/Ernest_Hemingway@3x.png">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/shared/Ernest_Hemingway@4x.png" href="qtquickcontrols2-chattutorial-shared-ernest-hemingway-4x-png.html" status="active" title="" fulltitle="Ernest_Hemingway@4x.png Image File" subtitle="chattutorial/shared/Ernest_Hemingway@4x.png">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/shared/Hans_Gude.png" href="qtquickcontrols2-chattutorial-shared-hans-gude-png.html" status="active" title="" fulltitle="Hans_Gude.png Image File" subtitle="chattutorial/shared/Hans_Gude.png">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/shared/Hans_Gude@2x.png" href="qtquickcontrols2-chattutorial-shared-hans-gude-2x-png.html" status="active" title="" fulltitle="Hans_Gude@2x.png Image File" subtitle="chattutorial/shared/Hans_Gude@2x.png">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/shared/Hans_Gude@3x.png" href="qtquickcontrols2-chattutorial-shared-hans-gude-3x-png.html" status="active" title="" fulltitle="Hans_Gude@3x.png Image File" subtitle="chattutorial/shared/Hans_Gude@3x.png">
                <description path="" line="0" column="0"/>
            </page>
            <page name="chattutorial/shared/Hans_Gude@4x.png" href="qtquickcontrols2-chattutorial-shared-hans-gude-4x-png.html" status="active" title="" fulltitle="Hans_Gude@4x.png Image File" subtitle="chattutorial/shared/Hans_Gude@4x.png">
                <description path="" line="0" column="0"/>
            </page>
        </page>
    </document>
</WebXML>
