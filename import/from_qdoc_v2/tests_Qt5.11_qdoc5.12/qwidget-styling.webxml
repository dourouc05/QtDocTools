<?xml version="1.0" encoding="UTF-8"?>
<WebXML>
    <document>
        <page name="qwidget-styling.html" href="qwidget-styling.html" status="active" subtype="page" title="Styling" fulltitle="Styling" subtitle="" module="QtWidgets">
            <description path="C:/Qt/5.11.1/Src/qtbase/src/widgets/styles/qstyle.cpp" line="79" column="4">
                <para>Qt's built-in widgets use the <link raw="QStyle" href="qstyle.html" type="class">QStyle</link> class to perform nearly all of their drawing. <link raw="QStyle" href="qstyle.html" type="class">QStyle</link> is an abstract base class that encapsulates the look and feel of a GUI, and can be used to make the widgets look exactly like the equivalent native widgets or to give the widgets a custom look.</para>
                <para>Qt provides a set of <link raw="QStyle" href="qstyle.html" type="class">QStyle</link> subclasses that emulate the native look of the different platforms supported by Qt (QWindowsStyle, QMacStyle, etc.). These styles are built into the Qt GUI module, other styles can be made available using Qt's plugin mechansim.</para>
                <para>Most functions for drawing style elements take four arguments:</para>
                <list type="bullet">
                    <item>
                        <para>an enum value specifying which graphical element to draw</para>
                    </item>
                    <item>
                        <para>a <link raw="QStyleOption" href="qstyleoption.html" type="class">QStyleOption</link> object specifying how and where to render that element</para>
                    </item>
                    <item>
                        <para>a <link raw="QPainter" href="qpainter.html" type="class">QPainter</link> object that should be used to draw the element</para>
                    </item>
                    <item>
                        <para>a <link raw="QWidget" href="qwidget.html" type="class">QWidget</link> object on which the drawing is performed (optional)</para>
                    </item>
                </list>
                <para>The style gets all the information it needs to render the graphical element from the <link raw="QStyleOption" href="qstyleoption.html" type="class">QStyleOption</link> class. The widget is passed as the last argument in case the style needs it to perform special effects (such as animated default buttons on ), but it isn't mandatory. In fact, <link raw="QStyle" href="qstyle.html" type="class">QStyle</link> can be used to draw on any paint device (not just widgets), in which case the widget argument is a zero pointer.</para>
                <image href="images/paintsystem-stylepainter.png"/>
                <para>The paint system also provides the <link raw="QStylePainter" href="qstylepainter.html" type="class">QStylePainter</link> class inheriting from <link raw="QPainter" href="qpainter.html" type="class">QPainter</link>. <link raw="QStylePainter" href="qstylepainter.html" type="class">QStylePainter</link> is a convenience class for drawing <link raw="QStyle" href="qstyle.html" type="class">QStyle</link> elements inside a widget, and extends <link raw="QPainter" href="qpainter.html" type="class">QPainter</link> with a set of high-level drawing functions implemented on top of <link raw="QStyle" href="qstyle.html" type="class">QStyle</link>'s API. The advantage of using <link raw="QStylePainter" href="qstylepainter.html" type="class">QStylePainter</link> is that the parameter lists get considerably shorter.</para>
                <table width="100%">
                    <row>
                        <item>
                            <para>
                                <inlineimage href="images/paintsystem-icon.png"/></para>
                        </item>
                        <item>
                            <para>
                                <bold>QIcon</bold></para>
                            <para>The <link raw="QIcon" href="qicon.html" type="class">QIcon</link> class provides scalable icons in different modes and states.</para>
                            <para>
                                <link raw="QIcon" href="qicon.html" type="class">QIcon</link> can generate pixmaps reflecting an icon's state, mode and size. These pixmaps are generated from the set of pixmaps made available to the icon, and are used by Qt widgets to show an icon representing a particular action.</para>
                            <para>The rendering of a <link raw="QIcon" href="qicon.html" type="class">QIcon</link> object is handled by the <link raw="QIconEngine" href="qiconengine.html" type="class">QIconEngine</link> class. Each icon has a corresponding icon engine that is responsible for drawing the icon with a requested size, mode and state.</para>
                        </item>
                    </row>
                </table>
                <para>For more information about widget styling and appearance, see the <link raw="Styles and Style Aware Widgets" href="style-reference.html" type="page" page="Styles and Style Aware Widgets">Styles and Style Aware Widgets</link>.</para>
            </description>
        </page>
    </document>
</WebXML>
